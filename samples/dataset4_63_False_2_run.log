# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 185.638 ns/op
# Warmup Iteration   2: 147.798 ns/op
# Warmup Iteration   3: 147.155 ns/op
# Warmup Iteration   4: 149.485 ns/op
# Warmup Iteration   5: 149.245 ns/op
Iteration   1: 153.346 ns/op
Iteration   2: 150.573 ns/op
Iteration   3: 149.262 ns/op
Iteration   4: 143.088 ns/op
Iteration   5: 143.384 ns/op
Iteration   6: 143.310 ns/op
Iteration   7: 142.411 ns/op
Iteration   8: 142.409 ns/op
Iteration   9: 142.464 ns/op
Iteration  10: 142.604 ns/op
Iteration  11: 143.664 ns/op
Iteration  12: 143.128 ns/op
Iteration  13: 142.635 ns/op
Iteration  14: 142.420 ns/op
Iteration  15: 142.951 ns/op
Iteration  16: 142.552 ns/op
Iteration  17: 142.510 ns/op
Iteration  18: 142.444 ns/op
Iteration  19: 142.371 ns/op
Iteration  20: 142.295 ns/op


Result "benchmark.StringContains.regexMatches":
  143.991 ±(99.9%) 2.731 ns/op [Average]
  (min, avg, max) = (142.295, 143.991, 153.346), stdev = 3.145
  CI (99.9%): [141.260, 146.722] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.530 ns/op
# Warmup Iteration   2: 15.481 ns/op
# Warmup Iteration   3: 15.437 ns/op
# Warmup Iteration   4: 15.420 ns/op
# Warmup Iteration   5: 15.417 ns/op
Iteration   1: 15.433 ns/op
Iteration   2: 15.455 ns/op
Iteration   3: 15.434 ns/op
Iteration   4: 15.466 ns/op
Iteration   5: 15.437 ns/op
Iteration   6: 15.475 ns/op
Iteration   7: 15.431 ns/op
Iteration   8: 15.484 ns/op
Iteration   9: 15.428 ns/op
Iteration  10: 15.427 ns/op
Iteration  11: 15.449 ns/op
Iteration  12: 15.457 ns/op
Iteration  13: 15.455 ns/op
Iteration  14: 15.428 ns/op
Iteration  15: 15.421 ns/op
Iteration  16: 15.446 ns/op
Iteration  17: 15.429 ns/op
Iteration  18: 15.464 ns/op
Iteration  19: 15.423 ns/op
Iteration  20: 15.426 ns/op


Result "benchmark.StringContains.stringContains":
  15.443 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (15.421, 15.443, 15.484), stdev = 0.019
  CI (99.9%): [15.427, 15.460] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20  143.991 ± 2.731  ns/op
StringContains.stringContains     http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20   15.443 ± 0.016  ns/op

Benchmark result is saved to dataset4_63_False_2_run.csv
