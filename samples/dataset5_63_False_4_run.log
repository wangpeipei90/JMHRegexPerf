# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 524.879 ns/op
# Warmup Iteration   2: 492.513 ns/op
# Warmup Iteration   3: 456.688 ns/op
# Warmup Iteration   4: 457.402 ns/op
# Warmup Iteration   5: 453.748 ns/op
Iteration   1: 458.539 ns/op
Iteration   2: 459.546 ns/op
Iteration   3: 462.313 ns/op
Iteration   4: 453.068 ns/op
Iteration   5: 463.365 ns/op
Iteration   6: 454.157 ns/op
Iteration   7: 464.116 ns/op
Iteration   8: 464.672 ns/op
Iteration   9: 456.922 ns/op
Iteration  10: 464.704 ns/op
Iteration  11: 461.420 ns/op
Iteration  12: 453.556 ns/op
Iteration  13: 473.852 ns/op
Iteration  14: 453.886 ns/op
Iteration  15: 467.013 ns/op
Iteration  16: 462.840 ns/op
Iteration  17: 453.284 ns/op
Iteration  18: 467.539 ns/op
Iteration  19: 459.097 ns/op
Iteration  20: 453.939 ns/op


Result "benchmark.StringContains.regexMatches":
  460.391 ±(99.9%) 5.032 ns/op [Average]
  (min, avg, max) = (453.068, 460.391, 473.852), stdev = 5.795
  CI (99.9%): [455.359, 465.423] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.570 ns/op
# Warmup Iteration   2: 15.504 ns/op
# Warmup Iteration   3: 15.491 ns/op
# Warmup Iteration   4: 15.475 ns/op
# Warmup Iteration   5: 15.479 ns/op
Iteration   1: 15.490 ns/op
Iteration   2: 15.483 ns/op
Iteration   3: 15.482 ns/op
Iteration   4: 15.487 ns/op
Iteration   5: 15.495 ns/op
Iteration   6: 15.450 ns/op
Iteration   7: 15.439 ns/op
Iteration   8: 15.459 ns/op
Iteration   9: 15.485 ns/op
Iteration  10: 15.448 ns/op
Iteration  11: 15.442 ns/op
Iteration  12: 15.457 ns/op
Iteration  13: 15.484 ns/op
Iteration  14: 15.437 ns/op
Iteration  15: 15.416 ns/op
Iteration  16: 15.469 ns/op
Iteration  17: 15.426 ns/op
Iteration  18: 15.426 ns/op
Iteration  19: 15.429 ns/op
Iteration  20: 15.430 ns/op


Result "benchmark.StringContains.stringContains":
  15.457 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (15.416, 15.457, 15.495), stdev = 0.026
  CI (99.9%): [15.434, 15.479] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  460.391 ± 5.032  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   15.457 ± 0.022  ns/op

Benchmark result is saved to dataset5_63_False_4_run.csv
