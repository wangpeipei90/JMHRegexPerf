# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 228.111 ns/op
# Warmup Iteration   2: 179.172 ns/op
# Warmup Iteration   3: 179.103 ns/op
# Warmup Iteration   4: 180.872 ns/op
# Warmup Iteration   5: 178.644 ns/op
Iteration   1: 180.153 ns/op
Iteration   2: 185.883 ns/op
Iteration   3: 179.709 ns/op
Iteration   4: 181.246 ns/op
Iteration   5: 182.604 ns/op
Iteration   6: 174.752 ns/op
Iteration   7: 175.146 ns/op
Iteration   8: 174.430 ns/op
Iteration   9: 175.402 ns/op
Iteration  10: 175.981 ns/op
Iteration  11: 174.347 ns/op
Iteration  12: 174.834 ns/op
Iteration  13: 174.437 ns/op
Iteration  14: 175.443 ns/op
Iteration  15: 174.229 ns/op
Iteration  16: 174.305 ns/op
Iteration  17: 174.169 ns/op
Iteration  18: 173.975 ns/op
Iteration  19: 174.724 ns/op
Iteration  20: 174.115 ns/op


Result "benchmark.StringContains.regexMatches":
  176.494 ±(99.9%) 2.992 ns/op [Average]
  (min, avg, max) = (173.975, 176.494, 185.883), stdev = 3.445
  CI (99.9%): [173.503, 179.486] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.474 ns/op
# Warmup Iteration   2: 15.494 ns/op
# Warmup Iteration   3: 15.428 ns/op
# Warmup Iteration   4: 15.427 ns/op
# Warmup Iteration   5: 15.415 ns/op
Iteration   1: 15.490 ns/op
Iteration   2: 15.443 ns/op
Iteration   3: 15.425 ns/op
Iteration   4: 15.450 ns/op
Iteration   5: 15.428 ns/op
Iteration   6: 15.454 ns/op
Iteration   7: 15.449 ns/op
Iteration   8: 15.439 ns/op
Iteration   9: 15.453 ns/op
Iteration  10: 15.435 ns/op
Iteration  11: 15.441 ns/op
Iteration  12: 15.442 ns/op
Iteration  13: 15.424 ns/op
Iteration  14: 15.436 ns/op
Iteration  15: 15.428 ns/op
Iteration  16: 15.418 ns/op
Iteration  17: 15.429 ns/op
Iteration  18: 15.438 ns/op
Iteration  19: 15.436 ns/op
Iteration  20: 15.470 ns/op


Result "benchmark.StringContains.stringContains":
  15.442 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (15.418, 15.442, 15.490), stdev = 0.017
  CI (99.9%): [15.427, 15.456] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20  176.494 ± 2.992  ns/op
StringContains.stringContains     http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20   15.442 ± 0.015  ns/op

Benchmark result is saved to dataset4_63_False_4_run.csv
