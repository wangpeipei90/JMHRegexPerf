# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 525.977 ns/op
# Warmup Iteration   2: 492.620 ns/op
# Warmup Iteration   3: 458.539 ns/op
# Warmup Iteration   4: 463.036 ns/op
# Warmup Iteration   5: 454.243 ns/op
Iteration   1: 461.202 ns/op
Iteration   2: 461.391 ns/op
Iteration   3: 463.293 ns/op
Iteration   4: 454.368 ns/op
Iteration   5: 463.823 ns/op
Iteration   6: 458.692 ns/op
Iteration   7: 462.813 ns/op
Iteration   8: 468.572 ns/op
Iteration   9: 456.629 ns/op
Iteration  10: 462.961 ns/op
Iteration  11: 462.299 ns/op
Iteration  12: 455.464 ns/op
Iteration  13: 473.565 ns/op
Iteration  14: 452.820 ns/op
Iteration  15: 471.226 ns/op
Iteration  16: 463.703 ns/op
Iteration  17: 454.341 ns/op
Iteration  18: 468.975 ns/op
Iteration  19: 460.216 ns/op
Iteration  20: 453.150 ns/op


Result "benchmark.StringContains.regexMatches":
  461.475 ±(99.9%) 5.199 ns/op [Average]
  (min, avg, max) = (452.820, 461.475, 473.565), stdev = 5.987
  CI (99.9%): [456.277, 466.674] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.545 ns/op
# Warmup Iteration   2: 15.454 ns/op
# Warmup Iteration   3: 15.482 ns/op
# Warmup Iteration   4: 15.481 ns/op
# Warmup Iteration   5: 15.477 ns/op
Iteration   1: 15.468 ns/op
Iteration   2: 15.449 ns/op
Iteration   3: 15.467 ns/op
Iteration   4: 15.421 ns/op
Iteration   5: 15.431 ns/op
Iteration   6: 15.476 ns/op
Iteration   7: 15.433 ns/op
Iteration   8: 15.455 ns/op
Iteration   9: 15.432 ns/op
Iteration  10: 15.458 ns/op
Iteration  11: 15.465 ns/op
Iteration  12: 15.440 ns/op
Iteration  13: 15.455 ns/op
Iteration  14: 15.452 ns/op
Iteration  15: 15.480 ns/op
Iteration  16: 15.452 ns/op
Iteration  17: 15.465 ns/op
Iteration  18: 15.537 ns/op
Iteration  19: 15.468 ns/op
Iteration  20: 15.431 ns/op


Result "benchmark.StringContains.stringContains":
  15.457 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (15.421, 15.457, 15.537), stdev = 0.025
  CI (99.9%): [15.435, 15.479] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  461.475 ± 5.199  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   15.457 ± 0.022  ns/op

Benchmark result is saved to dataset5_63_False_1_run.csv
