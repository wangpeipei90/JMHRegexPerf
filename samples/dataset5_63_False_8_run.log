# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 520.950 ns/op
# Warmup Iteration   2: 491.353 ns/op
# Warmup Iteration   3: 455.915 ns/op
# Warmup Iteration   4: 459.774 ns/op
# Warmup Iteration   5: 452.633 ns/op
Iteration   1: 456.219 ns/op
Iteration   2: 459.867 ns/op
Iteration   3: 459.588 ns/op
Iteration   4: 451.642 ns/op
Iteration   5: 461.136 ns/op
Iteration   6: 453.938 ns/op
Iteration   7: 462.364 ns/op
Iteration   8: 466.206 ns/op
Iteration   9: 452.680 ns/op
Iteration  10: 463.654 ns/op
Iteration  11: 458.586 ns/op
Iteration  12: 453.024 ns/op
Iteration  13: 471.757 ns/op
Iteration  14: 451.876 ns/op
Iteration  15: 468.286 ns/op
Iteration  16: 461.727 ns/op
Iteration  17: 451.466 ns/op
Iteration  18: 468.018 ns/op
Iteration  19: 457.181 ns/op
Iteration  20: 452.965 ns/op


Result "benchmark.StringContains.regexMatches":
  459.109 ±(99.9%) 5.414 ns/op [Average]
  (min, avg, max) = (451.466, 459.109, 471.757), stdev = 6.235
  CI (99.9%): [453.695, 464.523] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.537 ns/op
# Warmup Iteration   2: 15.506 ns/op
# Warmup Iteration   3: 15.472 ns/op
# Warmup Iteration   4: 15.520 ns/op
# Warmup Iteration   5: 15.422 ns/op
Iteration   1: 15.439 ns/op
Iteration   2: 15.427 ns/op
Iteration   3: 15.485 ns/op
Iteration   4: 15.434 ns/op
Iteration   5: 15.425 ns/op
Iteration   6: 15.447 ns/op
Iteration   7: 15.458 ns/op
Iteration   8: 15.487 ns/op
Iteration   9: 15.434 ns/op
Iteration  10: 15.437 ns/op
Iteration  11: 15.454 ns/op
Iteration  12: 15.425 ns/op
Iteration  13: 15.433 ns/op
Iteration  14: 15.423 ns/op
Iteration  15: 15.468 ns/op
Iteration  16: 15.491 ns/op
Iteration  17: 15.470 ns/op
Iteration  18: 15.464 ns/op
Iteration  19: 15.432 ns/op
Iteration  20: 15.461 ns/op


Result "benchmark.StringContains.stringContains":
  15.450 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (15.423, 15.450, 15.491), stdev = 0.022
  CI (99.9%): [15.430, 15.469] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  459.109 ± 5.414  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   15.450 ± 0.019  ns/op

Benchmark result is saved to dataset5_63_False_8_run.csv
