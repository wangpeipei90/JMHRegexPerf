# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 529.066 ns/op
# Warmup Iteration   2: 497.958 ns/op
# Warmup Iteration   3: 458.224 ns/op
# Warmup Iteration   4: 456.862 ns/op
# Warmup Iteration   5: 454.367 ns/op
Iteration   1: 458.388 ns/op
Iteration   2: 459.911 ns/op
Iteration   3: 463.054 ns/op
Iteration   4: 453.724 ns/op
Iteration   5: 462.660 ns/op
Iteration   6: 452.827 ns/op
Iteration   7: 464.600 ns/op
Iteration   8: 464.296 ns/op
Iteration   9: 456.773 ns/op
Iteration  10: 461.586 ns/op
Iteration  11: 462.605 ns/op
Iteration  12: 452.703 ns/op
Iteration  13: 471.830 ns/op
Iteration  14: 453.723 ns/op
Iteration  15: 466.007 ns/op
Iteration  16: 462.587 ns/op
Iteration  17: 453.966 ns/op
Iteration  18: 469.337 ns/op
Iteration  19: 459.151 ns/op
Iteration  20: 453.238 ns/op


Result "benchmark.StringContains.regexMatches":
  460.148 ±(99.9%) 4.937 ns/op [Average]
  (min, avg, max) = (452.703, 460.148, 471.830), stdev = 5.685
  CI (99.9%): [455.211, 465.085] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.484 ns/op
# Warmup Iteration   2: 15.499 ns/op
# Warmup Iteration   3: 15.440 ns/op
# Warmup Iteration   4: 15.463 ns/op
# Warmup Iteration   5: 15.461 ns/op
Iteration   1: 15.449 ns/op
Iteration   2: 15.456 ns/op
Iteration   3: 15.474 ns/op
Iteration   4: 15.451 ns/op
Iteration   5: 15.459 ns/op
Iteration   6: 15.478 ns/op
Iteration   7: 15.458 ns/op
Iteration   8: 15.445 ns/op
Iteration   9: 15.478 ns/op
Iteration  10: 15.448 ns/op
Iteration  11: 15.438 ns/op
Iteration  12: 15.440 ns/op
Iteration  13: 15.424 ns/op
Iteration  14: 15.423 ns/op
Iteration  15: 15.426 ns/op
Iteration  16: 15.428 ns/op
Iteration  17: 15.446 ns/op
Iteration  18: 15.417 ns/op
Iteration  19: 15.440 ns/op
Iteration  20: 15.447 ns/op


Result "benchmark.StringContains.stringContains":
  15.446 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (15.417, 15.446, 15.478), stdev = 0.018
  CI (99.9%): [15.431, 15.462] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  460.148 ± 4.937  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   15.446 ± 0.015  ns/op

Benchmark result is saved to dataset5_63_False_7_run.csv
