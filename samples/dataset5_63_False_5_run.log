# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 532.713 ns/op
# Warmup Iteration   2: 492.396 ns/op
# Warmup Iteration   3: 456.546 ns/op
# Warmup Iteration   4: 455.528 ns/op
# Warmup Iteration   5: 453.501 ns/op
Iteration   1: 458.324 ns/op
Iteration   2: 458.445 ns/op
Iteration   3: 459.779 ns/op
Iteration   4: 452.470 ns/op
Iteration   5: 460.527 ns/op
Iteration   6: 453.484 ns/op
Iteration   7: 462.347 ns/op
Iteration   8: 467.980 ns/op
Iteration   9: 452.043 ns/op
Iteration  10: 462.649 ns/op
Iteration  11: 458.341 ns/op
Iteration  12: 451.788 ns/op
Iteration  13: 470.728 ns/op
Iteration  14: 451.486 ns/op
Iteration  15: 468.708 ns/op
Iteration  16: 458.289 ns/op
Iteration  17: 452.584 ns/op
Iteration  18: 468.605 ns/op
Iteration  19: 454.379 ns/op
Iteration  20: 452.343 ns/op


Result "benchmark.StringContains.regexMatches":
  458.765 ±(99.9%) 5.526 ns/op [Average]
  (min, avg, max) = (451.486, 458.765, 470.728), stdev = 6.364
  CI (99.9%): [453.239, 464.291] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.586 ns/op
# Warmup Iteration   2: 15.482 ns/op
# Warmup Iteration   3: 15.431 ns/op
# Warmup Iteration   4: 15.430 ns/op
# Warmup Iteration   5: 15.462 ns/op
Iteration   1: 15.419 ns/op
Iteration   2: 15.430 ns/op
Iteration   3: 15.420 ns/op
Iteration   4: 15.421 ns/op
Iteration   5: 15.428 ns/op
Iteration   6: 15.432 ns/op
Iteration   7: 15.443 ns/op
Iteration   8: 15.428 ns/op
Iteration   9: 15.440 ns/op
Iteration  10: 15.433 ns/op
Iteration  11: 15.416 ns/op
Iteration  12: 15.428 ns/op
Iteration  13: 15.424 ns/op
Iteration  14: 15.426 ns/op
Iteration  15: 15.434 ns/op
Iteration  16: 15.416 ns/op
Iteration  17: 15.424 ns/op
Iteration  18: 15.427 ns/op
Iteration  19: 15.432 ns/op
Iteration  20: 15.431 ns/op


Result "benchmark.StringContains.stringContains":
  15.428 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (15.416, 15.428, 15.443), stdev = 0.007
  CI (99.9%): [15.421, 15.434] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  458.765 ± 5.526  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   15.428 ± 0.006  ns/op

Benchmark result is saved to dataset5_63_False_5_run.csv
