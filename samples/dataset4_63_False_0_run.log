# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 215.969 ns/op
# Warmup Iteration   2: 173.761 ns/op
# Warmup Iteration   3: 174.456 ns/op
# Warmup Iteration   4: 175.569 ns/op
# Warmup Iteration   5: 173.186 ns/op
Iteration   1: 181.779 ns/op
Iteration   2: 177.534 ns/op
Iteration   3: 177.903 ns/op
Iteration   4: 176.468 ns/op
Iteration   5: 169.177 ns/op
Iteration   6: 169.640 ns/op
Iteration   7: 170.279 ns/op
Iteration   8: 170.196 ns/op
Iteration   9: 169.349 ns/op
Iteration  10: 169.580 ns/op
Iteration  11: 169.592 ns/op
Iteration  12: 169.493 ns/op
Iteration  13: 169.115 ns/op
Iteration  14: 169.196 ns/op
Iteration  15: 169.080 ns/op
Iteration  16: 169.337 ns/op
Iteration  17: 169.054 ns/op
Iteration  18: 169.185 ns/op
Iteration  19: 169.162 ns/op
Iteration  20: 169.819 ns/op


Result "benchmark.StringContains.regexMatches":
  171.247 ±(99.9%) 3.308 ns/op [Average]
  (min, avg, max) = (169.054, 171.247, 181.779), stdev = 3.809
  CI (99.9%): [167.939, 174.555] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.565 ns/op
# Warmup Iteration   2: 15.477 ns/op
# Warmup Iteration   3: 15.446 ns/op
# Warmup Iteration   4: 15.483 ns/op
# Warmup Iteration   5: 15.455 ns/op
Iteration   1: 15.432 ns/op
Iteration   2: 15.450 ns/op
Iteration   3: 15.454 ns/op
Iteration   4: 15.443 ns/op
Iteration   5: 15.450 ns/op
Iteration   6: 15.453 ns/op
Iteration   7: 15.416 ns/op
Iteration   8: 15.437 ns/op
Iteration   9: 15.449 ns/op
Iteration  10: 15.509 ns/op
Iteration  11: 15.479 ns/op
Iteration  12: 15.467 ns/op
Iteration  13: 15.467 ns/op
Iteration  14: 15.493 ns/op
Iteration  15: 15.469 ns/op
Iteration  16: 15.438 ns/op
Iteration  17: 15.484 ns/op
Iteration  18: 15.510 ns/op
Iteration  19: 15.467 ns/op
Iteration  20: 15.477 ns/op


Result "benchmark.StringContains.stringContains":
  15.462 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (15.416, 15.462, 15.510), stdev = 0.025
  CI (99.9%): [15.441, 15.484] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20  171.247 ± 3.308  ns/op
StringContains.stringContains     http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20   15.462 ± 0.022  ns/op

Benchmark result is saved to dataset4_63_False_0_run.csv
