# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 532.558 ns/op
# Warmup Iteration   2: 496.326 ns/op
# Warmup Iteration   3: 456.907 ns/op
# Warmup Iteration   4: 456.455 ns/op
# Warmup Iteration   5: 453.519 ns/op
Iteration   1: 462.783 ns/op
Iteration   2: 459.655 ns/op
Iteration   3: 463.834 ns/op
Iteration   4: 454.510 ns/op
Iteration   5: 464.861 ns/op
Iteration   6: 454.021 ns/op
Iteration   7: 466.024 ns/op
Iteration   8: 463.139 ns/op
Iteration   9: 458.825 ns/op
Iteration  10: 460.572 ns/op
Iteration  11: 465.299 ns/op
Iteration  12: 455.164 ns/op
Iteration  13: 472.912 ns/op
Iteration  14: 453.850 ns/op
Iteration  15: 465.005 ns/op
Iteration  16: 466.393 ns/op
Iteration  17: 454.705 ns/op
Iteration  18: 464.257 ns/op
Iteration  19: 462.915 ns/op
Iteration  20: 454.879 ns/op


Result "benchmark.StringContains.regexMatches":
  461.180 ±(99.9%) 4.607 ns/op [Average]
  (min, avg, max) = (453.850, 461.180, 472.912), stdev = 5.306
  CI (99.9%): [456.573, 465.787] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.564 ns/op
# Warmup Iteration   2: 15.574 ns/op
# Warmup Iteration   3: 15.522 ns/op
# Warmup Iteration   4: 15.545 ns/op
# Warmup Iteration   5: 15.480 ns/op
Iteration   1: 15.500 ns/op
Iteration   2: 15.486 ns/op
Iteration   3: 15.486 ns/op
Iteration   4: 15.577 ns/op
Iteration   5: 15.482 ns/op
Iteration   6: 15.538 ns/op
Iteration   7: 15.678 ns/op
Iteration   8: 15.539 ns/op
Iteration   9: 15.480 ns/op
Iteration  10: 15.505 ns/op
Iteration  11: 15.508 ns/op
Iteration  12: 15.543 ns/op
Iteration  13: 15.447 ns/op
Iteration  14: 15.519 ns/op
Iteration  15: 15.484 ns/op
Iteration  16: 15.530 ns/op
Iteration  17: 15.548 ns/op
Iteration  18: 15.493 ns/op
Iteration  19: 15.479 ns/op
Iteration  20: 15.457 ns/op


Result "benchmark.StringContains.stringContains":
  15.514 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (15.447, 15.514, 15.678), stdev = 0.051
  CI (99.9%): [15.470, 15.558] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  461.180 ± 4.607  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   15.514 ± 0.044  ns/op

Benchmark result is saved to dataset5_63_False_6_run.csv
