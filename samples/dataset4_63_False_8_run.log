# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 216.390 ns/op
# Warmup Iteration   2: 174.239 ns/op
# Warmup Iteration   3: 173.301 ns/op
# Warmup Iteration   4: 175.125 ns/op
# Warmup Iteration   5: 173.309 ns/op
Iteration   1: 180.044 ns/op
Iteration   2: 176.263 ns/op
Iteration   3: 177.619 ns/op
Iteration   4: 176.701 ns/op
Iteration   5: 168.757 ns/op
Iteration   6: 169.238 ns/op
Iteration   7: 170.081 ns/op
Iteration   8: 169.077 ns/op
Iteration   9: 169.247 ns/op
Iteration  10: 169.001 ns/op
Iteration  11: 168.838 ns/op
Iteration  12: 169.065 ns/op
Iteration  13: 168.972 ns/op
Iteration  14: 168.916 ns/op
Iteration  15: 168.967 ns/op
Iteration  16: 169.143 ns/op
Iteration  17: 168.979 ns/op
Iteration  18: 169.008 ns/op
Iteration  19: 169.238 ns/op
Iteration  20: 169.668 ns/op


Result "benchmark.StringContains.regexMatches":
  170.841 ±(99.9%) 3.102 ns/op [Average]
  (min, avg, max) = (168.757, 170.841, 180.044), stdev = 3.572
  CI (99.9%): [167.739, 173.943] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.469 ns/op
# Warmup Iteration   2: 15.479 ns/op
# Warmup Iteration   3: 15.471 ns/op
# Warmup Iteration   4: 15.428 ns/op
# Warmup Iteration   5: 15.433 ns/op
Iteration   1: 15.443 ns/op
Iteration   2: 15.424 ns/op
Iteration   3: 15.417 ns/op
Iteration   4: 15.420 ns/op
Iteration   5: 15.420 ns/op
Iteration   6: 15.424 ns/op
Iteration   7: 15.493 ns/op
Iteration   8: 15.464 ns/op
Iteration   9: 15.435 ns/op
Iteration  10: 15.479 ns/op
Iteration  11: 15.427 ns/op
Iteration  12: 15.419 ns/op
Iteration  13: 15.447 ns/op
Iteration  14: 15.444 ns/op
Iteration  15: 15.439 ns/op
Iteration  16: 15.464 ns/op
Iteration  17: 15.437 ns/op
Iteration  18: 15.417 ns/op
Iteration  19: 15.430 ns/op
Iteration  20: 15.424 ns/op


Result "benchmark.StringContains.stringContains":
  15.438 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (15.417, 15.438, 15.493), stdev = 0.022
  CI (99.9%): [15.420, 15.457] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20  170.841 ± 3.102  ns/op
StringContains.stringContains     http  :PiTY28Wd$s5Xz1&o*rk}9|(np]t+{@3PsLuM.SuC_ni&ZQ^-rVwqRA-	D)t	N`6R0jg-xx^	8	Bb&CQbdw|;WR7  avgt   20   15.438 ± 0.019  ns/op

Benchmark result is saved to dataset4_63_False_8_run.csv
