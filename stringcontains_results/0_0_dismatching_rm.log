# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = )

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 155.753 ns/op
# Warmup Iteration   2: 68.573 ns/op
# Warmup Iteration   3: 64.383 ns/op
# Warmup Iteration   4: 64.773 ns/op
# Warmup Iteration   5: 64.293 ns/op
# Warmup Iteration   6: 65.029 ns/op
# Warmup Iteration   7: 64.832 ns/op
# Warmup Iteration   8: 64.555 ns/op
# Warmup Iteration   9: 65.040 ns/op
# Warmup Iteration  10: 64.726 ns/op
Iteration   1: 64.818 ns/op
Iteration   2: 64.942 ns/op
Iteration   3: 64.588 ns/op
Iteration   4: 64.850 ns/op
Iteration   5: 64.353 ns/op
Iteration   6: 65.129 ns/op
Iteration   7: 64.913 ns/op
Iteration   8: 64.836 ns/op
Iteration   9: 64.835 ns/op
Iteration  10: 64.621 ns/op
Iteration  11: 64.541 ns/op
Iteration  12: 64.944 ns/op
Iteration  13: 64.648 ns/op
Iteration  14: 65.013 ns/op
Iteration  15: 64.860 ns/op
Iteration  16: 64.895 ns/op
Iteration  17: 64.510 ns/op
Iteration  18: 64.881 ns/op
Iteration  19: 64.821 ns/op
Iteration  20: 64.514 ns/op
Iteration  21: 65.395 ns/op
Iteration  22: 64.939 ns/op
Iteration  23: 64.342 ns/op
Iteration  24: 64.574 ns/op
Iteration  25: 65.220 ns/op
Iteration  26: 64.444 ns/op
Iteration  27: 65.113 ns/op
Iteration  28: 64.393 ns/op
Iteration  29: 64.757 ns/op
Iteration  30: 65.071 ns/op
Iteration  31: 64.274 ns/op
Iteration  32: 64.966 ns/op
Iteration  33: 64.628 ns/op
Iteration  34: 64.856 ns/op
Iteration  35: 64.802 ns/op
Iteration  36: 64.415 ns/op
Iteration  37: 64.577 ns/op
Iteration  38: 64.963 ns/op
Iteration  39: 64.542 ns/op
Iteration  40: 64.508 ns/op
Iteration  41: 64.528 ns/op
Iteration  42: 64.778 ns/op
Iteration  43: 64.935 ns/op
Iteration  44: 64.618 ns/op
Iteration  45: 65.149 ns/op
Iteration  46: 64.818 ns/op
Iteration  47: 65.061 ns/op
Iteration  48: 65.090 ns/op
Iteration  49: 64.828 ns/op
Iteration  50: 64.911 ns/op


Result "benchmark.StringContains.regexMatches":
  64.780 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (64.274, 64.780, 65.395), stdev = 0.254
  CI (99.9%): [64.655, 64.906] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = )

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.944 ns/op
# Warmup Iteration   2: 4.872 ns/op
# Warmup Iteration   3: 4.948 ns/op
# Warmup Iteration   4: 4.951 ns/op
# Warmup Iteration   5: 4.941 ns/op
# Warmup Iteration   6: 4.939 ns/op
# Warmup Iteration   7: 4.943 ns/op
# Warmup Iteration   8: 4.944 ns/op
# Warmup Iteration   9: 4.942 ns/op
# Warmup Iteration  10: 4.941 ns/op
Iteration   1: 4.942 ns/op
Iteration   2: 4.939 ns/op
Iteration   3: 4.939 ns/op
Iteration   4: 4.940 ns/op
Iteration   5: 4.939 ns/op
Iteration   6: 4.948 ns/op
Iteration   7: 4.952 ns/op
Iteration   8: 4.949 ns/op
Iteration   9: 4.947 ns/op
Iteration  10: 4.946 ns/op
Iteration  11: 4.947 ns/op
Iteration  12: 4.941 ns/op
Iteration  13: 4.941 ns/op
Iteration  14: 4.941 ns/op
Iteration  15: 4.939 ns/op
Iteration  16: 4.940 ns/op
Iteration  17: 4.939 ns/op
Iteration  18: 4.940 ns/op
Iteration  19: 4.950 ns/op
Iteration  20: 4.939 ns/op
Iteration  21: 4.939 ns/op
Iteration  22: 4.939 ns/op
Iteration  23: 4.940 ns/op
Iteration  24: 4.939 ns/op
Iteration  25: 4.939 ns/op
Iteration  26: 4.938 ns/op
Iteration  27: 4.938 ns/op
Iteration  28: 4.941 ns/op
Iteration  29: 4.940 ns/op
Iteration  30: 4.939 ns/op
Iteration  31: 4.941 ns/op
Iteration  32: 4.939 ns/op
Iteration  33: 4.939 ns/op
Iteration  34: 4.938 ns/op
Iteration  35: 4.941 ns/op
Iteration  36: 4.938 ns/op
Iteration  37: 4.940 ns/op
Iteration  38: 4.940 ns/op
Iteration  39: 4.939 ns/op
Iteration  40: 4.942 ns/op
Iteration  41: 4.940 ns/op
Iteration  42: 4.939 ns/op
Iteration  43: 4.939 ns/op
Iteration  44: 4.943 ns/op
Iteration  45: 4.943 ns/op
Iteration  46: 4.941 ns/op
Iteration  47: 4.943 ns/op
Iteration  48: 4.941 ns/op
Iteration  49: 4.939 ns/op
Iteration  50: 4.939 ns/op


Result "benchmark.StringContains.stringContains":
  4.941 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (4.938, 4.941, 4.952), stdev = 0.003
  CI (99.9%): [4.939, 4.943] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)  (str)  Mode  Cnt   Score   Error  Units
StringContains.regexMatches     \+D_NJ         avgt   50  64.780 ± 0.125  ns/op
StringContains.stringContains   \+D_NJ         avgt   50   4.941 ± 0.002  ns/op

Benchmark result is saved to 0_0_dismatching_rm.csv
