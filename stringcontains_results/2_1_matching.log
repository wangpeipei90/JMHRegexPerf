# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7/ X)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 1043.945 ns/op
# Warmup Iteration   2: 977.810 ns/op
# Warmup Iteration   3: 897.805 ns/op
# Warmup Iteration   4: 893.043 ns/op
# Warmup Iteration   5: 894.411 ns/op
# Warmup Iteration   6: 892.149 ns/op
# Warmup Iteration   7: 894.059 ns/op
# Warmup Iteration   8: 893.902 ns/op
# Warmup Iteration   9: 894.469 ns/op
# Warmup Iteration  10: 893.563 ns/op
Iteration   1: 892.867 ns/op
Iteration   2: 893.254 ns/op
Iteration   3: 893.807 ns/op
Iteration   4: 894.791 ns/op
Iteration   5: 892.821 ns/op
Iteration   6: 891.468 ns/op
Iteration   7: 892.314 ns/op
Iteration   8: 891.544 ns/op
Iteration   9: 891.897 ns/op
Iteration  10: 891.148 ns/op
Iteration  11: 892.016 ns/op
Iteration  12: 892.467 ns/op
Iteration  13: 892.365 ns/op
Iteration  14: 892.548 ns/op
Iteration  15: 891.895 ns/op
Iteration  16: 891.482 ns/op
Iteration  17: 891.462 ns/op
Iteration  18: 891.739 ns/op
Iteration  19: 891.850 ns/op
Iteration  20: 891.697 ns/op
Iteration  21: 892.773 ns/op
Iteration  22: 891.754 ns/op
Iteration  23: 891.814 ns/op
Iteration  24: 891.931 ns/op
Iteration  25: 891.604 ns/op
Iteration  26: 891.397 ns/op
Iteration  27: 891.267 ns/op
Iteration  28: 892.053 ns/op
Iteration  29: 891.479 ns/op
Iteration  30: 891.250 ns/op
Iteration  31: 891.568 ns/op
Iteration  32: 891.102 ns/op
Iteration  33: 891.908 ns/op
Iteration  34: 892.913 ns/op
Iteration  35: 891.807 ns/op
Iteration  36: 891.667 ns/op
Iteration  37: 891.778 ns/op
Iteration  38: 891.407 ns/op
Iteration  39: 890.951 ns/op
Iteration  40: 892.145 ns/op
Iteration  41: 892.377 ns/op
Iteration  42: 892.354 ns/op
Iteration  43: 891.164 ns/op
Iteration  44: 892.130 ns/op
Iteration  45: 892.004 ns/op
Iteration  46: 891.770 ns/op
Iteration  47: 892.092 ns/op
Iteration  48: 891.902 ns/op
Iteration  49: 892.045 ns/op
Iteration  50: 891.534 ns/op


Result "benchmark.StringContains.regexMatches":
  891.987 ±(99.9%) 0.347 ns/op [Average]
  (min, avg, max) = (890.951, 891.987, 894.791), stdev = 0.702
  CI (99.9%): [891.640, 892.335] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7/ X)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 8.609 ns/op
# Warmup Iteration   2: 8.978 ns/op
# Warmup Iteration   3: 8.126 ns/op
# Warmup Iteration   4: 8.120 ns/op
# Warmup Iteration   5: 8.108 ns/op
# Warmup Iteration   6: 8.110 ns/op
# Warmup Iteration   7: 8.108 ns/op
# Warmup Iteration   8: 8.107 ns/op
# Warmup Iteration   9: 8.108 ns/op
# Warmup Iteration  10: 8.110 ns/op
Iteration   1: 8.112 ns/op
Iteration   2: 8.113 ns/op
Iteration   3: 8.114 ns/op
Iteration   4: 8.112 ns/op
Iteration   5: 8.106 ns/op
Iteration   6: 8.107 ns/op
Iteration   7: 8.924 ns/op
Iteration   8: 8.924 ns/op
Iteration   9: 8.926 ns/op
Iteration  10: 8.925 ns/op
Iteration  11: 8.924 ns/op
Iteration  12: 8.924 ns/op
Iteration  13: 8.923 ns/op
Iteration  14: 8.925 ns/op
Iteration  15: 8.924 ns/op
Iteration  16: 8.926 ns/op
Iteration  17: 8.930 ns/op
Iteration  18: 8.928 ns/op
Iteration  19: 8.942 ns/op
Iteration  20: 8.930 ns/op
Iteration  21: 8.939 ns/op
Iteration  22: 8.929 ns/op
Iteration  23: 8.943 ns/op
Iteration  24: 8.948 ns/op
Iteration  25: 8.947 ns/op
Iteration  26: 8.947 ns/op
Iteration  27: 8.933 ns/op
Iteration  28: 8.932 ns/op
Iteration  29: 8.931 ns/op
Iteration  30: 8.930 ns/op
Iteration  31: 8.927 ns/op
Iteration  32: 8.928 ns/op
Iteration  33: 8.931 ns/op
Iteration  34: 8.936 ns/op
Iteration  35: 8.929 ns/op
Iteration  36: 8.927 ns/op
Iteration  37: 8.926 ns/op
Iteration  38: 8.931 ns/op
Iteration  39: 8.926 ns/op
Iteration  40: 8.930 ns/op
Iteration  41: 8.926 ns/op
Iteration  42: 8.927 ns/op
Iteration  43: 8.926 ns/op
Iteration  44: 8.926 ns/op
Iteration  45: 8.927 ns/op
Iteration  46: 8.931 ns/op
Iteration  47: 8.926 ns/op
Iteration  48: 8.929 ns/op
Iteration  49: 8.925 ns/op
Iteration  50: 8.927 ns/op


Result "benchmark.StringContains.stringContains":
  8.832 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (8.106, 8.832, 8.948), stdev = 0.269
  CI (99.9%): [8.698, 8.965] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)                                                         (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7/ X  avgt   50  891.987 ± 0.347  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7/ X  avgt   50    8.832 ± 0.133  ns/op

Benchmark result is saved to 2_1_matching.csv
