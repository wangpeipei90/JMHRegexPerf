# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = _FE6,N=/ X)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 194.730 ns/op
# Warmup Iteration   2: 117.308 ns/op
# Warmup Iteration   3: 94.039 ns/op
# Warmup Iteration   4: 94.202 ns/op
# Warmup Iteration   5: 94.013 ns/op
# Warmup Iteration   6: 93.989 ns/op
# Warmup Iteration   7: 93.990 ns/op
# Warmup Iteration   8: 94.066 ns/op
# Warmup Iteration   9: 93.984 ns/op
# Warmup Iteration  10: 94.002 ns/op
Iteration   1: 94.055 ns/op
Iteration   2: 93.982 ns/op
Iteration   3: 94.046 ns/op
Iteration   4: 94.044 ns/op
Iteration   5: 94.037 ns/op
Iteration   6: 94.040 ns/op
Iteration   7: 93.983 ns/op
Iteration   8: 93.988 ns/op
Iteration   9: 93.964 ns/op
Iteration  10: 93.974 ns/op
Iteration  11: 93.939 ns/op
Iteration  12: 93.926 ns/op
Iteration  13: 93.967 ns/op
Iteration  14: 93.931 ns/op
Iteration  15: 93.966 ns/op
Iteration  16: 93.966 ns/op
Iteration  17: 93.925 ns/op
Iteration  18: 93.927 ns/op
Iteration  19: 94.145 ns/op
Iteration  20: 93.921 ns/op
Iteration  21: 93.882 ns/op
Iteration  22: 93.934 ns/op
Iteration  23: 93.920 ns/op
Iteration  24: 93.991 ns/op
Iteration  25: 93.979 ns/op
Iteration  26: 93.984 ns/op
Iteration  27: 93.996 ns/op
Iteration  28: 93.959 ns/op
Iteration  29: 94.023 ns/op
Iteration  30: 93.995 ns/op
Iteration  31: 93.963 ns/op
Iteration  32: 94.183 ns/op
Iteration  33: 94.166 ns/op
Iteration  34: 94.078 ns/op
Iteration  35: 94.101 ns/op
Iteration  36: 94.059 ns/op
Iteration  37: 94.106 ns/op
Iteration  38: 94.120 ns/op
Iteration  39: 93.961 ns/op
Iteration  40: 93.959 ns/op
Iteration  41: 94.046 ns/op
Iteration  42: 93.969 ns/op
Iteration  43: 94.046 ns/op
Iteration  44: 95.166 ns/op
Iteration  45: 94.432 ns/op
Iteration  46: 96.247 ns/op
Iteration  47: 95.444 ns/op
Iteration  48: 97.020 ns/op
Iteration  49: 95.986 ns/op
Iteration  50: 94.769 ns/op


Result "benchmark.StringContains.regexMatches":
  94.224 ±(99.9%) 0.317 ns/op [Average]
  (min, avg, max) = (93.882, 94.224, 97.020), stdev = 0.639
  CI (99.9%): [93.908, 94.541] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = _FE6,N=/ X)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.904 ns/op
# Warmup Iteration   2: 4.862 ns/op
# Warmup Iteration   3: 4.938 ns/op
# Warmup Iteration   4: 4.938 ns/op
# Warmup Iteration   5: 4.938 ns/op
# Warmup Iteration   6: 4.937 ns/op
# Warmup Iteration   7: 4.937 ns/op
# Warmup Iteration   8: 4.937 ns/op
# Warmup Iteration   9: 4.938 ns/op
# Warmup Iteration  10: 4.937 ns/op
Iteration   1: 4.937 ns/op
Iteration   2: 4.938 ns/op
Iteration   3: 4.937 ns/op
Iteration   4: 4.937 ns/op
Iteration   5: 4.938 ns/op
Iteration   6: 4.938 ns/op
Iteration   7: 4.939 ns/op
Iteration   8: 4.938 ns/op
Iteration   9: 4.938 ns/op
Iteration  10: 4.938 ns/op
Iteration  11: 4.938 ns/op
Iteration  12: 4.938 ns/op
Iteration  13: 4.937 ns/op
Iteration  14: 4.938 ns/op
Iteration  15: 4.938 ns/op
Iteration  16: 4.945 ns/op
Iteration  17: 4.938 ns/op
Iteration  18: 4.939 ns/op
Iteration  19: 4.938 ns/op
Iteration  20: 4.938 ns/op
Iteration  21: 4.938 ns/op
Iteration  22: 4.939 ns/op
Iteration  23: 4.939 ns/op
Iteration  24: 4.938 ns/op
Iteration  25: 4.939 ns/op
Iteration  26: 4.938 ns/op
Iteration  27: 4.939 ns/op
Iteration  28: 4.938 ns/op
Iteration  29: 4.939 ns/op
Iteration  30: 4.937 ns/op
Iteration  31: 4.937 ns/op
Iteration  32: 4.940 ns/op
Iteration  33: 4.938 ns/op
Iteration  34: 4.939 ns/op
Iteration  35: 4.938 ns/op
Iteration  36: 4.938 ns/op
Iteration  37: 4.938 ns/op
Iteration  38: 4.939 ns/op
Iteration  39: 4.939 ns/op
Iteration  40: 4.939 ns/op
Iteration  41: 4.939 ns/op
Iteration  42: 4.939 ns/op
Iteration  43: 4.939 ns/op
Iteration  44: 4.939 ns/op
Iteration  45: 4.939 ns/op
Iteration  46: 4.938 ns/op
Iteration  47: 4.939 ns/op
Iteration  48: 4.939 ns/op
Iteration  49: 4.939 ns/op
Iteration  50: 4.939 ns/op


Result "benchmark.StringContains.stringContains":
  4.938 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (4.937, 4.938, 4.945), stdev = 0.001
  CI (99.9%): [4.938, 4.939] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)       (str)  Mode  Cnt   Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  _FE6,N=/ X  avgt   50  94.224 ± 0.317  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  _FE6,N=/ X  avgt   50   4.938 ± 0.001  ns/op

Benchmark result is saved to 2_1_dismatching_rm.csv
