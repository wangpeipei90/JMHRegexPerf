# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q <eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 761.113 ns/op
# Warmup Iteration   2: 717.658 ns/op
# Warmup Iteration   3: 674.780 ns/op
# Warmup Iteration   4: 670.027 ns/op
# Warmup Iteration   5: 669.200 ns/op
# Warmup Iteration   6: 669.038 ns/op
# Warmup Iteration   7: 668.983 ns/op
# Warmup Iteration   8: 669.447 ns/op
# Warmup Iteration   9: 669.106 ns/op
# Warmup Iteration  10: 668.798 ns/op
Iteration   1: 668.925 ns/op
Iteration   2: 668.899 ns/op
Iteration   3: 668.776 ns/op
Iteration   4: 668.903 ns/op
Iteration   5: 668.788 ns/op
Iteration   6: 669.032 ns/op
Iteration   7: 668.934 ns/op
Iteration   8: 669.025 ns/op
Iteration   9: 669.070 ns/op
Iteration  10: 668.949 ns/op
Iteration  11: 668.953 ns/op
Iteration  12: 668.683 ns/op
Iteration  13: 668.837 ns/op
Iteration  14: 668.851 ns/op
Iteration  15: 668.681 ns/op
Iteration  16: 668.937 ns/op
Iteration  17: 668.991 ns/op
Iteration  18: 668.815 ns/op
Iteration  19: 669.075 ns/op
Iteration  20: 671.419 ns/op
Iteration  21: 671.564 ns/op
Iteration  22: 670.767 ns/op
Iteration  23: 670.859 ns/op
Iteration  24: 671.153 ns/op
Iteration  25: 672.325 ns/op
Iteration  26: 671.506 ns/op
Iteration  27: 670.828 ns/op
Iteration  28: 670.497 ns/op
Iteration  29: 669.566 ns/op
Iteration  30: 669.880 ns/op
Iteration  31: 669.411 ns/op
Iteration  32: 669.500 ns/op
Iteration  33: 669.303 ns/op
Iteration  34: 669.044 ns/op
Iteration  35: 670.847 ns/op
Iteration  36: 668.996 ns/op
Iteration  37: 668.842 ns/op
Iteration  38: 668.869 ns/op
Iteration  39: 668.840 ns/op
Iteration  40: 669.149 ns/op
Iteration  41: 668.906 ns/op
Iteration  42: 668.802 ns/op
Iteration  43: 668.914 ns/op
Iteration  44: 668.826 ns/op
Iteration  45: 668.706 ns/op
Iteration  46: 668.649 ns/op
Iteration  47: 668.594 ns/op
Iteration  48: 668.871 ns/op
Iteration  49: 668.687 ns/op
Iteration  50: 668.734 ns/op


Result "benchmark.StringContains.regexMatches":
  669.400 ±(99.9%) 0.473 ns/op [Average]
  (min, avg, max) = (668.594, 669.400, 672.325), stdev = 0.956
  CI (99.9%): [668.926, 669.873] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q <eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 15.905 ns/op
# Warmup Iteration   2: 15.713 ns/op
# Warmup Iteration   3: 16.210 ns/op
# Warmup Iteration   4: 16.282 ns/op
# Warmup Iteration   5: 16.185 ns/op
# Warmup Iteration   6: 16.189 ns/op
# Warmup Iteration   7: 16.177 ns/op
# Warmup Iteration   8: 16.191 ns/op
# Warmup Iteration   9: 16.187 ns/op
# Warmup Iteration  10: 16.183 ns/op
Iteration   1: 16.186 ns/op
Iteration   2: 16.195 ns/op
Iteration   3: 16.179 ns/op
Iteration   4: 16.179 ns/op
Iteration   5: 16.197 ns/op
Iteration   6: 16.174 ns/op
Iteration   7: 16.176 ns/op
Iteration   8: 16.188 ns/op
Iteration   9: 16.189 ns/op
Iteration  10: 16.173 ns/op
Iteration  11: 16.187 ns/op
Iteration  12: 16.181 ns/op
Iteration  13: 16.176 ns/op
Iteration  14: 16.189 ns/op
Iteration  15: 16.191 ns/op
Iteration  16: 16.185 ns/op
Iteration  17: 16.178 ns/op
Iteration  18: 16.176 ns/op
Iteration  19: 16.204 ns/op
Iteration  20: 16.188 ns/op
Iteration  21: 16.189 ns/op
Iteration  22: 16.185 ns/op
Iteration  23: 16.198 ns/op
Iteration  24: 16.180 ns/op
Iteration  25: 16.185 ns/op
Iteration  26: 16.187 ns/op
Iteration  27: 16.188 ns/op
Iteration  28: 16.177 ns/op
Iteration  29: 16.177 ns/op
Iteration  30: 16.183 ns/op
Iteration  31: 16.178 ns/op
Iteration  32: 16.269 ns/op
Iteration  33: 16.183 ns/op
Iteration  34: 16.181 ns/op
Iteration  35: 16.186 ns/op
Iteration  36: 16.184 ns/op
Iteration  37: 16.270 ns/op
Iteration  38: 16.177 ns/op
Iteration  39: 16.185 ns/op
Iteration  40: 16.189 ns/op
Iteration  41: 16.183 ns/op
Iteration  42: 16.183 ns/op
Iteration  43: 16.193 ns/op
Iteration  44: 16.187 ns/op
Iteration  45: 16.194 ns/op
Iteration  46: 16.193 ns/op
Iteration  47: 16.186 ns/op
Iteration  48: 16.185 ns/op
Iteration  49: 16.192 ns/op
Iteration  50: 16.200 ns/op


Result "benchmark.StringContains.stringContains":
  16.189 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (16.173, 16.189, 16.270), stdev = 0.018
  CI (99.9%): [16.180, 16.198] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)                                                                                                            (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q <eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y  avgt   50  669.400 ± 0.473  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q <eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y  avgt   50   16.189 ± 0.009  ns/op

Benchmark result is saved to 2_2_dismatching_rm.csv
