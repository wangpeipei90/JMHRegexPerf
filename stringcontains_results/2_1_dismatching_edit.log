# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JM!rIPB.Qz(7/ X)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 680.677 ns/op
# Warmup Iteration   2: 630.872 ns/op
# Warmup Iteration   3: 599.211 ns/op
# Warmup Iteration   4: 595.627 ns/op
# Warmup Iteration   5: 594.988 ns/op
# Warmup Iteration   6: 594.864 ns/op
# Warmup Iteration   7: 595.602 ns/op
# Warmup Iteration   8: 595.238 ns/op
# Warmup Iteration   9: 595.180 ns/op
# Warmup Iteration  10: 595.252 ns/op
Iteration   1: 595.538 ns/op
Iteration   2: 595.236 ns/op
Iteration   3: 595.197 ns/op
Iteration   4: 594.988 ns/op
Iteration   5: 595.185 ns/op
Iteration   6: 594.817 ns/op
Iteration   7: 595.435 ns/op
Iteration   8: 597.920 ns/op
Iteration   9: 597.126 ns/op
Iteration  10: 596.955 ns/op
Iteration  11: 597.715 ns/op
Iteration  12: 597.836 ns/op
Iteration  13: 598.374 ns/op
Iteration  14: 596.644 ns/op
Iteration  15: 596.295 ns/op
Iteration  16: 597.201 ns/op
Iteration  17: 597.333 ns/op
Iteration  18: 595.974 ns/op
Iteration  19: 595.989 ns/op
Iteration  20: 595.827 ns/op
Iteration  21: 595.963 ns/op
Iteration  22: 595.808 ns/op
Iteration  23: 595.658 ns/op
Iteration  24: 595.825 ns/op
Iteration  25: 595.668 ns/op
Iteration  26: 595.243 ns/op
Iteration  27: 595.246 ns/op
Iteration  28: 595.111 ns/op
Iteration  29: 595.395 ns/op
Iteration  30: 595.068 ns/op
Iteration  31: 594.977 ns/op
Iteration  32: 595.036 ns/op
Iteration  33: 595.042 ns/op
Iteration  34: 595.084 ns/op
Iteration  35: 595.025 ns/op
Iteration  36: 595.047 ns/op
Iteration  37: 594.854 ns/op
Iteration  38: 595.186 ns/op
Iteration  39: 595.387 ns/op
Iteration  40: 595.325 ns/op
Iteration  41: 595.285 ns/op
Iteration  42: 595.234 ns/op
Iteration  43: 595.362 ns/op
Iteration  44: 595.577 ns/op
Iteration  45: 594.914 ns/op
Iteration  46: 595.230 ns/op
Iteration  47: 595.329 ns/op
Iteration  48: 595.210 ns/op
Iteration  49: 595.117 ns/op
Iteration  50: 595.184 ns/op


Result "benchmark.StringContains.regexMatches":
  595.720 ±(99.9%) 0.449 ns/op [Average]
  (min, avg, max) = (594.817, 595.720, 598.374), stdev = 0.907
  CI (99.9%): [595.270, 596.169] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JM!rIPB.Qz(7/ X)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 8.693 ns/op
# Warmup Iteration   2: 8.988 ns/op
# Warmup Iteration   3: 8.254 ns/op
# Warmup Iteration   4: 8.257 ns/op
# Warmup Iteration   5: 8.281 ns/op
# Warmup Iteration   6: 8.254 ns/op
# Warmup Iteration   7: 8.249 ns/op
# Warmup Iteration   8: 8.245 ns/op
# Warmup Iteration   9: 8.262 ns/op
# Warmup Iteration  10: 8.257 ns/op
Iteration   1: 8.259 ns/op
Iteration   2: 8.251 ns/op
Iteration   3: 8.253 ns/op
Iteration   4: 8.262 ns/op
Iteration   5: 8.256 ns/op
Iteration   6: 8.256 ns/op
Iteration   7: 8.264 ns/op
Iteration   8: 8.254 ns/op
Iteration   9: 8.270 ns/op
Iteration  10: 8.260 ns/op
Iteration  11: 8.259 ns/op
Iteration  12: 8.254 ns/op
Iteration  13: 8.258 ns/op
Iteration  14: 8.254 ns/op
Iteration  15: 8.266 ns/op
Iteration  16: 8.255 ns/op
Iteration  17: 8.250 ns/op
Iteration  18: 8.257 ns/op
Iteration  19: 8.253 ns/op
Iteration  20: 8.249 ns/op
Iteration  21: 8.251 ns/op
Iteration  22: 8.244 ns/op
Iteration  23: 8.251 ns/op
Iteration  24: 8.260 ns/op
Iteration  25: 8.249 ns/op
Iteration  26: 8.261 ns/op
Iteration  27: 8.253 ns/op
Iteration  28: 8.264 ns/op
Iteration  29: 8.250 ns/op
Iteration  30: 8.251 ns/op
Iteration  31: 8.256 ns/op
Iteration  32: 8.245 ns/op
Iteration  33: 8.247 ns/op
Iteration  34: 8.253 ns/op
Iteration  35: 8.248 ns/op
Iteration  36: 8.257 ns/op
Iteration  37: 8.255 ns/op
Iteration  38: 8.241 ns/op
Iteration  39: 8.252 ns/op
Iteration  40: 8.254 ns/op
Iteration  41: 8.250 ns/op
Iteration  42: 8.249 ns/op
Iteration  43: 8.251 ns/op
Iteration  44: 8.252 ns/op
Iteration  45: 8.253 ns/op
Iteration  46: 8.255 ns/op
Iteration  47: 8.251 ns/op
Iteration  48: 8.252 ns/op
Iteration  49: 8.254 ns/op
Iteration  50: 8.252 ns/op


Result "benchmark.StringContains.stringContains":
  8.254 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (8.241, 8.254, 8.270), stdev = 0.006
  CI (99.9%): [8.251, 8.257] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)                                                         (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JM!rIPB.Qz(7/ X  avgt   50  595.720 ± 0.449  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  _FE6,N=tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JM!rIPB.Qz(7/ X  avgt   50    8.254 ± 0.003  ns/op

Benchmark result is saved to 2_1_dismatching_edit.csv
