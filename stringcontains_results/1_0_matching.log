# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = NC`uHwvs\{\	, str = NC`uHwvs{	)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 288.349 ns/op
# Warmup Iteration   2: 220.215 ns/op
# Warmup Iteration   3: 203.975 ns/op
# Warmup Iteration   4: 198.780 ns/op
# Warmup Iteration   5: 197.035 ns/op
# Warmup Iteration   6: 196.493 ns/op
# Warmup Iteration   7: 196.300 ns/op
# Warmup Iteration   8: 196.189 ns/op
# Warmup Iteration   9: 196.152 ns/op
# Warmup Iteration  10: 196.378 ns/op
Iteration   1: 196.204 ns/op
Iteration   2: 196.177 ns/op
Iteration   3: 196.171 ns/op
Iteration   4: 196.212 ns/op
Iteration   5: 196.121 ns/op
Iteration   6: 196.733 ns/op
Iteration   7: 196.169 ns/op
Iteration   8: 196.134 ns/op
Iteration   9: 196.210 ns/op
Iteration  10: 196.120 ns/op
Iteration  11: 196.137 ns/op
Iteration  12: 196.219 ns/op
Iteration  13: 196.140 ns/op
Iteration  14: 196.176 ns/op
Iteration  15: 196.175 ns/op
Iteration  16: 196.137 ns/op
Iteration  17: 196.296 ns/op
Iteration  18: 196.172 ns/op
Iteration  19: 196.258 ns/op
Iteration  20: 196.199 ns/op
Iteration  21: 196.199 ns/op
Iteration  22: 196.224 ns/op
Iteration  23: 196.198 ns/op
Iteration  24: 196.184 ns/op
Iteration  25: 196.436 ns/op
Iteration  26: 196.459 ns/op
Iteration  27: 196.446 ns/op
Iteration  28: 196.345 ns/op
Iteration  29: 196.165 ns/op
Iteration  30: 196.324 ns/op
Iteration  31: 196.183 ns/op
Iteration  32: 196.238 ns/op
Iteration  33: 196.187 ns/op
Iteration  34: 197.654 ns/op
Iteration  35: 199.797 ns/op
Iteration  36: 198.208 ns/op
Iteration  37: 199.046 ns/op
Iteration  38: 198.992 ns/op
Iteration  39: 200.830 ns/op
Iteration  40: 200.651 ns/op
Iteration  41: 199.498 ns/op
Iteration  42: 198.788 ns/op
Iteration  43: 198.021 ns/op
Iteration  44: 197.332 ns/op
Iteration  45: 196.523 ns/op
Iteration  46: 196.749 ns/op
Iteration  47: 196.361 ns/op
Iteration  48: 196.307 ns/op
Iteration  49: 196.380 ns/op
Iteration  50: 196.518 ns/op


Result "benchmark.StringContains.regexMatches":
  196.868 ±(99.9%) 0.621 ns/op [Average]
  (min, avg, max) = (196.120, 196.868, 200.830), stdev = 1.255
  CI (99.9%): [196.247, 197.490] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = NC`uHwvs\{\	, str = NC`uHwvs{	)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.896 ns/op
# Warmup Iteration   2: 4.863 ns/op
# Warmup Iteration   3: 4.942 ns/op
# Warmup Iteration   4: 4.941 ns/op
# Warmup Iteration   5: 4.940 ns/op
# Warmup Iteration   6: 4.938 ns/op
# Warmup Iteration   7: 4.938 ns/op
# Warmup Iteration   8: 4.939 ns/op
# Warmup Iteration   9: 4.940 ns/op
# Warmup Iteration  10: 4.938 ns/op
Iteration   1: 4.939 ns/op
Iteration   2: 4.938 ns/op
Iteration   3: 4.938 ns/op
Iteration   4: 4.938 ns/op
Iteration   5: 4.939 ns/op
Iteration   6: 4.959 ns/op
Iteration   7: 4.940 ns/op
Iteration   8: 4.939 ns/op
Iteration   9: 4.938 ns/op
Iteration  10: 4.939 ns/op
Iteration  11: 4.939 ns/op
Iteration  12: 4.938 ns/op
Iteration  13: 4.938 ns/op
Iteration  14: 4.939 ns/op
Iteration  15: 4.938 ns/op
Iteration  16: 4.938 ns/op
Iteration  17: 4.938 ns/op
Iteration  18: 4.937 ns/op
Iteration  19: 4.977 ns/op
Iteration  20: 4.940 ns/op
Iteration  21: 4.939 ns/op
Iteration  22: 4.938 ns/op
Iteration  23: 4.938 ns/op
Iteration  24: 4.943 ns/op
Iteration  25: 4.939 ns/op
Iteration  26: 4.939 ns/op
Iteration  27: 4.938 ns/op
Iteration  28: 4.939 ns/op
Iteration  29: 4.938 ns/op
Iteration  30: 4.941 ns/op
Iteration  31: 4.938 ns/op
Iteration  32: 4.940 ns/op
Iteration  33: 4.939 ns/op
Iteration  34: 4.942 ns/op
Iteration  35: 4.941 ns/op
Iteration  36: 4.942 ns/op
Iteration  37: 4.939 ns/op
Iteration  38: 4.939 ns/op
Iteration  39: 4.941 ns/op
Iteration  40: 4.938 ns/op
Iteration  41: 4.939 ns/op
Iteration  42: 4.939 ns/op
Iteration  43: 4.938 ns/op
Iteration  44: 4.939 ns/op
Iteration  45: 4.939 ns/op
Iteration  46: 4.938 ns/op
Iteration  47: 4.939 ns/op
Iteration  48: 4.939 ns/op
Iteration  49: 4.938 ns/op
Iteration  50: 4.941 ns/op


Result "benchmark.StringContains.stringContains":
  4.940 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (4.937, 4.940, 4.977), stdev = 0.006
  CI (99.9%): [4.937, 4.943] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (regex)       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    NC`uHwvs\{\	  NC`uHwvs{	  avgt   50  196.868 ± 0.621  ns/op
StringContains.stringContains  NC`uHwvs\{\	  NC`uHwvs{	  avgt   50    4.940 ± 0.003  ns/op

Benchmark result is saved to 1_0_matching.csv
