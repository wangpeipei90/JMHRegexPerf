# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 894.746 ns/op
# Warmup Iteration   2: 823.644 ns/op
# Warmup Iteration   3: 752.071 ns/op
# Warmup Iteration   4: 746.183 ns/op
# Warmup Iteration   5: 743.795 ns/op
# Warmup Iteration   6: 743.261 ns/op
# Warmup Iteration   7: 743.090 ns/op
# Warmup Iteration   8: 743.141 ns/op
# Warmup Iteration   9: 743.043 ns/op
# Warmup Iteration  10: 744.491 ns/op
Iteration   1: 742.980 ns/op
Iteration   2: 744.864 ns/op
Iteration   3: 744.787 ns/op
Iteration   4: 744.922 ns/op
Iteration   5: 742.841 ns/op
Iteration   6: 743.220 ns/op
Iteration   7: 746.528 ns/op
Iteration   8: 746.784 ns/op
Iteration   9: 746.767 ns/op
Iteration  10: 746.869 ns/op
Iteration  11: 746.664 ns/op
Iteration  12: 746.179 ns/op
Iteration  13: 746.222 ns/op
Iteration  14: 751.174 ns/op
Iteration  15: 746.446 ns/op
Iteration  16: 746.402 ns/op
Iteration  17: 751.100 ns/op
Iteration  18: 746.316 ns/op
Iteration  19: 746.460 ns/op
Iteration  20: 746.549 ns/op
Iteration  21: 746.590 ns/op
Iteration  22: 746.732 ns/op
Iteration  23: 746.741 ns/op
Iteration  24: 746.717 ns/op
Iteration  25: 746.480 ns/op
Iteration  26: 746.352 ns/op
Iteration  27: 746.238 ns/op
Iteration  28: 746.654 ns/op
Iteration  29: 746.734 ns/op
Iteration  30: 746.517 ns/op
Iteration  31: 746.448 ns/op
Iteration  32: 746.358 ns/op
Iteration  33: 746.561 ns/op
Iteration  34: 746.621 ns/op
Iteration  35: 750.544 ns/op
Iteration  36: 746.628 ns/op
Iteration  37: 746.759 ns/op
Iteration  38: 746.440 ns/op
Iteration  39: 746.730 ns/op
Iteration  40: 748.119 ns/op
Iteration  41: 747.055 ns/op
Iteration  42: 746.908 ns/op
Iteration  43: 746.570 ns/op
Iteration  44: 747.394 ns/op
Iteration  45: 747.121 ns/op
Iteration  46: 746.945 ns/op
Iteration  47: 747.770 ns/op
Iteration  48: 747.062 ns/op
Iteration  49: 747.218 ns/op
Iteration  50: 747.142 ns/op


Result "benchmark.StringContains.regexMatches":
  746.644 ±(99.9%) 0.746 ns/op [Average]
  (min, avg, max) = (742.841, 746.644, 751.174), stdev = 1.508
  CI (99.9%): [745.898, 747.391] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 23.757 ns/op
# Warmup Iteration   2: 25.010 ns/op
# Warmup Iteration   3: 24.988 ns/op
# Warmup Iteration   4: 24.953 ns/op
# Warmup Iteration   5: 24.951 ns/op
# Warmup Iteration   6: 25.044 ns/op
# Warmup Iteration   7: 25.005 ns/op
# Warmup Iteration   8: 24.947 ns/op
# Warmup Iteration   9: 24.952 ns/op
# Warmup Iteration  10: 24.960 ns/op
Iteration   1: 24.967 ns/op
Iteration   2: 24.967 ns/op
Iteration   3: 24.960 ns/op
Iteration   4: 24.956 ns/op
Iteration   5: 24.971 ns/op
Iteration   6: 24.954 ns/op
Iteration   7: 24.965 ns/op
Iteration   8: 24.964 ns/op
Iteration   9: 24.950 ns/op
Iteration  10: 24.965 ns/op
Iteration  11: 24.968 ns/op
Iteration  12: 24.977 ns/op
Iteration  13: 24.949 ns/op
Iteration  14: 24.953 ns/op
Iteration  15: 24.955 ns/op
Iteration  16: 24.949 ns/op
Iteration  17: 24.959 ns/op
Iteration  18: 24.963 ns/op
Iteration  19: 24.972 ns/op
Iteration  20: 24.956 ns/op
Iteration  21: 24.947 ns/op
Iteration  22: 24.950 ns/op
Iteration  23: 24.959 ns/op
Iteration  24: 24.969 ns/op
Iteration  25: 24.960 ns/op
Iteration  26: 24.963 ns/op
Iteration  27: 24.956 ns/op
Iteration  28: 24.957 ns/op
Iteration  29: 24.950 ns/op
Iteration  30: 24.947 ns/op
Iteration  31: 24.952 ns/op
Iteration  32: 24.950 ns/op
Iteration  33: 24.950 ns/op
Iteration  34: 24.966 ns/op
Iteration  35: 24.956 ns/op
Iteration  36: 24.957 ns/op
Iteration  37: 24.971 ns/op
Iteration  38: 24.975 ns/op
Iteration  39: 24.958 ns/op
Iteration  40: 24.960 ns/op
Iteration  41: 24.965 ns/op
Iteration  42: 24.970 ns/op
Iteration  43: 24.964 ns/op
Iteration  44: 24.973 ns/op
Iteration  45: 24.983 ns/op
Iteration  46: 24.961 ns/op
Iteration  47: 24.982 ns/op
Iteration  48: 24.953 ns/op
Iteration  49: 24.980 ns/op
Iteration  50: 24.955 ns/op


Result "benchmark.StringContains.stringContains":
  24.961 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (24.947, 24.961, 24.983), stdev = 0.009
  CI (99.9%): [24.957, 24.966] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                                 (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches     \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50  746.644 ± 0.746  ns/op
StringContains.stringContains   \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50   24.961 ± 0.005  ns/op

Benchmark result is saved to 0_6_matching.csv
