# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = NC`uHwvs\{\	, str = NC`uHwv2{	)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 237.166 ns/op
# Warmup Iteration   2: 173.924 ns/op
# Warmup Iteration   3: 147.409 ns/op
# Warmup Iteration   4: 138.110 ns/op
# Warmup Iteration   5: 138.090 ns/op
# Warmup Iteration   6: 138.054 ns/op
# Warmup Iteration   7: 138.136 ns/op
# Warmup Iteration   8: 138.058 ns/op
# Warmup Iteration   9: 138.032 ns/op
# Warmup Iteration  10: 138.025 ns/op
Iteration   1: 137.987 ns/op
Iteration   2: 138.056 ns/op
Iteration   3: 138.299 ns/op
Iteration   4: 138.047 ns/op
Iteration   5: 138.124 ns/op
Iteration   6: 138.159 ns/op
Iteration   7: 138.086 ns/op
Iteration   8: 138.168 ns/op
Iteration   9: 138.166 ns/op
Iteration  10: 138.216 ns/op
Iteration  11: 138.269 ns/op
Iteration  12: 138.102 ns/op
Iteration  13: 138.138 ns/op
Iteration  14: 138.185 ns/op
Iteration  15: 138.182 ns/op
Iteration  16: 138.318 ns/op
Iteration  17: 138.235 ns/op
Iteration  18: 138.183 ns/op
Iteration  19: 138.381 ns/op
Iteration  20: 138.134 ns/op
Iteration  21: 138.924 ns/op
Iteration  22: 138.142 ns/op
Iteration  23: 138.237 ns/op
Iteration  24: 138.150 ns/op
Iteration  25: 138.165 ns/op
Iteration  26: 138.358 ns/op
Iteration  27: 138.120 ns/op
Iteration  28: 138.332 ns/op
Iteration  29: 138.215 ns/op
Iteration  30: 138.095 ns/op
Iteration  31: 138.077 ns/op
Iteration  32: 138.061 ns/op
Iteration  33: 138.049 ns/op
Iteration  34: 138.092 ns/op
Iteration  35: 138.360 ns/op
Iteration  36: 138.191 ns/op
Iteration  37: 138.230 ns/op
Iteration  38: 138.162 ns/op
Iteration  39: 139.557 ns/op
Iteration  40: 138.185 ns/op
Iteration  41: 139.217 ns/op
Iteration  42: 138.329 ns/op
Iteration  43: 138.264 ns/op
Iteration  44: 138.240 ns/op
Iteration  45: 140.003 ns/op
Iteration  46: 140.397 ns/op
Iteration  47: 141.075 ns/op
Iteration  48: 140.408 ns/op
Iteration  49: 141.499 ns/op
Iteration  50: 141.040 ns/op


Result "benchmark.StringContains.regexMatches":
  138.552 ±(99.9%) 0.434 ns/op [Average]
  (min, avg, max) = (137.987, 138.552, 141.499), stdev = 0.878
  CI (99.9%): [138.118, 138.987] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = NC`uHwvs\{\	, str = NC`uHwv2{	)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.893 ns/op
# Warmup Iteration   2: 4.860 ns/op
# Warmup Iteration   3: 4.938 ns/op
# Warmup Iteration   4: 4.938 ns/op
# Warmup Iteration   5: 4.938 ns/op
# Warmup Iteration   6: 4.942 ns/op
# Warmup Iteration   7: 5.235 ns/op
# Warmup Iteration   8: 5.238 ns/op
# Warmup Iteration   9: 5.236 ns/op
# Warmup Iteration  10: 5.239 ns/op
Iteration   1: 5.238 ns/op
Iteration   2: 4.941 ns/op
Iteration   3: 4.940 ns/op
Iteration   4: 4.939 ns/op
Iteration   5: 4.942 ns/op
Iteration   6: 4.942 ns/op
Iteration   7: 4.943 ns/op
Iteration   8: 4.943 ns/op
Iteration   9: 4.941 ns/op
Iteration  10: 4.943 ns/op
Iteration  11: 4.940 ns/op
Iteration  12: 4.940 ns/op
Iteration  13: 4.940 ns/op
Iteration  14: 4.939 ns/op
Iteration  15: 4.942 ns/op
Iteration  16: 4.943 ns/op
Iteration  17: 4.941 ns/op
Iteration  18: 4.940 ns/op
Iteration  19: 4.958 ns/op
Iteration  20: 4.939 ns/op
Iteration  21: 4.939 ns/op
Iteration  22: 4.938 ns/op
Iteration  23: 4.939 ns/op
Iteration  24: 4.939 ns/op
Iteration  25: 4.938 ns/op
Iteration  26: 4.941 ns/op
Iteration  27: 4.939 ns/op
Iteration  28: 4.938 ns/op
Iteration  29: 4.938 ns/op
Iteration  30: 4.938 ns/op
Iteration  31: 4.938 ns/op
Iteration  32: 4.939 ns/op
Iteration  33: 4.939 ns/op
Iteration  34: 4.939 ns/op
Iteration  35: 4.938 ns/op
Iteration  36: 4.939 ns/op
Iteration  37: 4.938 ns/op
Iteration  38: 4.941 ns/op
Iteration  39: 4.947 ns/op
Iteration  40: 4.940 ns/op
Iteration  41: 4.940 ns/op
Iteration  42: 4.941 ns/op
Iteration  43: 4.939 ns/op
Iteration  44: 4.939 ns/op
Iteration  45: 4.942 ns/op
Iteration  46: 4.939 ns/op
Iteration  47: 4.939 ns/op
Iteration  48: 4.940 ns/op
Iteration  49: 4.940 ns/op
Iteration  50: 4.946 ns/op


Result "benchmark.StringContains.stringContains":
  4.947 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (4.938, 4.947, 5.238), stdev = 0.042
  CI (99.9%): [4.926, 4.967] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (regex)       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    NC`uHwvs\{\	  NC`uHwv2{	  avgt   50  138.552 ± 0.434  ns/op
StringContains.stringContains  NC`uHwvs\{\	  NC`uHwv2{	  avgt   50    4.947 ± 0.021  ns/op

Benchmark result is saved to 1_0_dismatching_edit.csv
