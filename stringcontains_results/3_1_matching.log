# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str =  'MZRR1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 2003.598 ns/op
# Warmup Iteration   2: 1800.092 ns/op
# Warmup Iteration   3: 1790.566 ns/op
# Warmup Iteration   4: 1787.331 ns/op
# Warmup Iteration   5: 1787.756 ns/op
# Warmup Iteration   6: 1787.770 ns/op
# Warmup Iteration   7: 1787.560 ns/op
# Warmup Iteration   8: 1786.466 ns/op
# Warmup Iteration   9: 1786.684 ns/op
# Warmup Iteration  10: 1791.663 ns/op
Iteration   1: 1786.486 ns/op
Iteration   2: 1789.190 ns/op
Iteration   3: 1790.060 ns/op
Iteration   4: 1788.558 ns/op
Iteration   5: 1788.514 ns/op
Iteration   6: 1790.218 ns/op
Iteration   7: 1786.704 ns/op
Iteration   8: 1793.209 ns/op
Iteration   9: 1789.438 ns/op
Iteration  10: 1789.141 ns/op
Iteration  11: 1789.211 ns/op
Iteration  12: 1789.965 ns/op
Iteration  13: 1791.476 ns/op
Iteration  14: 1789.990 ns/op
Iteration  15: 1789.742 ns/op
Iteration  16: 1787.822 ns/op
Iteration  17: 1787.364 ns/op
Iteration  18: 1786.795 ns/op
Iteration  19: 1786.582 ns/op
Iteration  20: 1789.239 ns/op
Iteration  21: 1788.996 ns/op
Iteration  22: 1786.295 ns/op
Iteration  23: 1787.601 ns/op
Iteration  24: 1787.351 ns/op
Iteration  25: 1789.231 ns/op
Iteration  26: 1787.055 ns/op
Iteration  27: 1786.987 ns/op
Iteration  28: 1787.987 ns/op
Iteration  29: 1786.053 ns/op
Iteration  30: 1787.242 ns/op
Iteration  31: 1786.778 ns/op
Iteration  32: 1785.781 ns/op
Iteration  33: 1786.759 ns/op
Iteration  34: 1785.482 ns/op
Iteration  35: 1787.190 ns/op
Iteration  36: 1786.669 ns/op
Iteration  37: 1788.025 ns/op
Iteration  38: 1786.044 ns/op
Iteration  39: 1786.660 ns/op
Iteration  40: 1786.156 ns/op
Iteration  41: 1786.774 ns/op
Iteration  42: 1785.874 ns/op
Iteration  43: 1785.596 ns/op
Iteration  44: 1788.097 ns/op
Iteration  45: 1788.233 ns/op
Iteration  46: 1787.642 ns/op
Iteration  47: 1787.032 ns/op
Iteration  48: 1785.309 ns/op
Iteration  49: 1786.312 ns/op
Iteration  50: 1786.037 ns/op


Result "benchmark.StringContains.regexMatches":
  1787.739 ±(99.9%) 0.828 ns/op [Average]
  (min, avg, max) = (1785.309, 1787.739, 1793.209), stdev = 1.672
  CI (99.9%): [1786.911, 1788.567] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str =  'MZRR1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.908 ns/op
# Warmup Iteration   2: 4.868 ns/op
# Warmup Iteration   3: 4.946 ns/op
# Warmup Iteration   4: 4.946 ns/op
# Warmup Iteration   5: 4.941 ns/op
# Warmup Iteration   6: 4.939 ns/op
# Warmup Iteration   7: 4.937 ns/op
# Warmup Iteration   8: 4.939 ns/op
# Warmup Iteration   9: 4.938 ns/op
# Warmup Iteration  10: 4.939 ns/op
Iteration   1: 4.937 ns/op
Iteration   2: 4.938 ns/op
Iteration   3: 4.938 ns/op
Iteration   4: 4.938 ns/op
Iteration   5: 4.939 ns/op
Iteration   6: 4.938 ns/op
Iteration   7: 4.938 ns/op
Iteration   8: 4.938 ns/op
Iteration   9: 4.938 ns/op
Iteration  10: 4.939 ns/op
Iteration  11: 4.939 ns/op
Iteration  12: 4.937 ns/op
Iteration  13: 4.944 ns/op
Iteration  14: 4.943 ns/op
Iteration  15: 4.939 ns/op
Iteration  16: 4.939 ns/op
Iteration  17: 4.938 ns/op
Iteration  18: 4.937 ns/op
Iteration  19: 4.938 ns/op
Iteration  20: 4.938 ns/op
Iteration  21: 4.938 ns/op
Iteration  22: 4.956 ns/op
Iteration  23: 4.938 ns/op
Iteration  24: 4.938 ns/op
Iteration  25: 4.938 ns/op
Iteration  26: 4.939 ns/op
Iteration  27: 4.938 ns/op
Iteration  28: 4.939 ns/op
Iteration  29: 4.939 ns/op
Iteration  30: 4.938 ns/op
Iteration  31: 4.938 ns/op
Iteration  32: 4.939 ns/op
Iteration  33: 4.937 ns/op
Iteration  34: 4.939 ns/op
Iteration  35: 4.938 ns/op
Iteration  36: 4.938 ns/op
Iteration  37: 4.938 ns/op
Iteration  38: 4.938 ns/op
Iteration  39: 4.942 ns/op
Iteration  40: 4.942 ns/op
Iteration  41: 4.941 ns/op
Iteration  42: 4.941 ns/op
Iteration  43: 4.941 ns/op
Iteration  44: 4.942 ns/op
Iteration  45: 4.942 ns/op
Iteration  46: 4.940 ns/op
Iteration  47: 4.941 ns/op
Iteration  48: 4.940 ns/op
Iteration  49: 4.937 ns/op
Iteration  50: 4.938 ns/op


Result "benchmark.StringContains.stringContains":
  4.939 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (4.937, 4.939, 4.956), stdev = 0.003
  CI (99.9%): [4.938, 4.941] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                               (regex)                                                                                                       (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches    1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N   'MZRR1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N  avgt   50  1787.739 ± 0.828  ns/op
StringContains.stringContains  1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N   'MZRR1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N  avgt   50     4.939 ± 0.001  ns/op

Benchmark result is saved to 3_1_matching.csv
