# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = 1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 1457.247 ns/op
# Warmup Iteration   2: 1299.875 ns/op
# Warmup Iteration   3: 1267.558 ns/op
# Warmup Iteration   4: 1264.629 ns/op
# Warmup Iteration   5: 1263.772 ns/op
# Warmup Iteration   6: 1264.702 ns/op
# Warmup Iteration   7: 1263.948 ns/op
# Warmup Iteration   8: 1264.220 ns/op
# Warmup Iteration   9: 1264.278 ns/op
# Warmup Iteration  10: 1263.991 ns/op
Iteration   1: 1264.225 ns/op
Iteration   2: 1263.552 ns/op
Iteration   3: 1263.571 ns/op
Iteration   4: 1263.675 ns/op
Iteration   5: 1263.518 ns/op
Iteration   6: 1265.641 ns/op
Iteration   7: 1264.180 ns/op
Iteration   8: 1264.082 ns/op
Iteration   9: 1263.889 ns/op
Iteration  10: 1263.894 ns/op
Iteration  11: 1263.979 ns/op
Iteration  12: 1266.619 ns/op
Iteration  13: 1263.480 ns/op
Iteration  14: 1263.907 ns/op
Iteration  15: 1264.478 ns/op
Iteration  16: 1263.572 ns/op
Iteration  17: 1263.540 ns/op
Iteration  18: 1263.748 ns/op
Iteration  19: 1264.022 ns/op
Iteration  20: 1263.679 ns/op
Iteration  21: 1263.420 ns/op
Iteration  22: 1264.003 ns/op
Iteration  23: 1263.619 ns/op
Iteration  24: 1263.848 ns/op
Iteration  25: 1263.716 ns/op
Iteration  26: 1264.803 ns/op
Iteration  27: 1264.081 ns/op
Iteration  28: 1263.547 ns/op
Iteration  29: 1264.410 ns/op
Iteration  30: 1263.745 ns/op
Iteration  31: 1263.502 ns/op
Iteration  32: 1264.427 ns/op
Iteration  33: 1266.890 ns/op
Iteration  34: 1267.082 ns/op
Iteration  35: 1267.570 ns/op
Iteration  36: 1266.944 ns/op
Iteration  37: 1266.556 ns/op
Iteration  38: 1266.662 ns/op
Iteration  39: 1266.212 ns/op
Iteration  40: 1268.520 ns/op
Iteration  41: 1264.405 ns/op
Iteration  42: 1264.146 ns/op
Iteration  43: 1264.460 ns/op
Iteration  44: 1264.400 ns/op
Iteration  45: 1263.986 ns/op
Iteration  46: 1264.649 ns/op
Iteration  47: 1263.668 ns/op
Iteration  48: 1264.259 ns/op
Iteration  49: 1264.071 ns/op
Iteration  50: 1264.532 ns/op


Result "benchmark.StringContains.regexMatches":
  1264.548 ±(99.9%) 0.625 ns/op [Average]
  (min, avg, max) = (1263.420, 1264.548, 1268.520), stdev = 1.263
  CI (99.9%): [1263.922, 1265.173] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = 1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.905 ns/op
# Warmup Iteration   2: 4.869 ns/op
# Warmup Iteration   3: 4.947 ns/op
# Warmup Iteration   4: 4.946 ns/op
# Warmup Iteration   5: 4.939 ns/op
# Warmup Iteration   6: 4.938 ns/op
# Warmup Iteration   7: 4.937 ns/op
# Warmup Iteration   8: 4.939 ns/op
# Warmup Iteration   9: 4.937 ns/op
# Warmup Iteration  10: 4.938 ns/op
Iteration   1: 4.940 ns/op
Iteration   2: 5.012 ns/op
Iteration   3: 5.013 ns/op
Iteration   4: 5.009 ns/op
Iteration   5: 5.008 ns/op
Iteration   6: 5.006 ns/op
Iteration   7: 5.092 ns/op
Iteration   8: 5.087 ns/op
Iteration   9: 5.088 ns/op
Iteration  10: 5.088 ns/op
Iteration  11: 5.100 ns/op
Iteration  12: 5.089 ns/op
Iteration  13: 5.089 ns/op
Iteration  14: 5.091 ns/op
Iteration  15: 5.086 ns/op
Iteration  16: 5.087 ns/op
Iteration  17: 5.090 ns/op
Iteration  18: 5.090 ns/op
Iteration  19: 4.938 ns/op
Iteration  20: 4.939 ns/op
Iteration  21: 4.938 ns/op
Iteration  22: 4.937 ns/op
Iteration  23: 4.939 ns/op
Iteration  24: 4.939 ns/op
Iteration  25: 4.938 ns/op
Iteration  26: 4.937 ns/op
Iteration  27: 4.938 ns/op
Iteration  28: 4.937 ns/op
Iteration  29: 4.937 ns/op
Iteration  30: 4.937 ns/op
Iteration  31: 4.937 ns/op
Iteration  32: 4.937 ns/op
Iteration  33: 4.937 ns/op
Iteration  34: 4.937 ns/op
Iteration  35: 4.937 ns/op
Iteration  36: 4.937 ns/op
Iteration  37: 4.937 ns/op
Iteration  38: 4.938 ns/op
Iteration  39: 4.937 ns/op
Iteration  40: 4.937 ns/op
Iteration  41: 4.937 ns/op
Iteration  42: 4.938 ns/op
Iteration  43: 4.937 ns/op
Iteration  44: 4.938 ns/op
Iteration  45: 4.939 ns/op
Iteration  46: 4.937 ns/op
Iteration  47: 4.937 ns/op
Iteration  48: 4.938 ns/op
Iteration  49: 4.938 ns/op
Iteration  50: 4.938 ns/op


Result "benchmark.StringContains.stringContains":
  4.981 ±(99.9%) 0.032 ns/op [Average]
  (min, avg, max) = (4.937, 4.981, 5.100), stdev = 0.065
  CI (99.9%): [4.949, 5.014] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                               (regex)                                                                                                 (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches    1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N  avgt   50  1264.548 ± 0.625  ns/op
StringContains.stringContains  1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H N  avgt   50     4.981 ± 0.032  ns/op

Benchmark result is saved to 3_0_matching.csv
