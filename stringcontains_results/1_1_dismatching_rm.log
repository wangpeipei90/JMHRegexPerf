# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = NC`uHwvs\{\	, str = kNAX$Q5ZG*D)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 226.849 ns/op
# Warmup Iteration   2: 166.853 ns/op
# Warmup Iteration   3: 136.685 ns/op
# Warmup Iteration   4: 130.910 ns/op
# Warmup Iteration   5: 130.875 ns/op
# Warmup Iteration   6: 130.835 ns/op
# Warmup Iteration   7: 130.875 ns/op
# Warmup Iteration   8: 130.860 ns/op
# Warmup Iteration   9: 130.873 ns/op
# Warmup Iteration  10: 130.819 ns/op
Iteration   1: 130.935 ns/op
Iteration   2: 130.866 ns/op
Iteration   3: 130.889 ns/op
Iteration   4: 130.854 ns/op
Iteration   5: 130.891 ns/op
Iteration   6: 130.854 ns/op
Iteration   7: 130.852 ns/op
Iteration   8: 130.827 ns/op
Iteration   9: 130.914 ns/op
Iteration  10: 130.960 ns/op
Iteration  11: 131.151 ns/op
Iteration  12: 130.847 ns/op
Iteration  13: 130.848 ns/op
Iteration  14: 130.875 ns/op
Iteration  15: 130.799 ns/op
Iteration  16: 130.963 ns/op
Iteration  17: 131.151 ns/op
Iteration  18: 130.811 ns/op
Iteration  19: 131.561 ns/op
Iteration  20: 130.816 ns/op
Iteration  21: 130.870 ns/op
Iteration  22: 130.905 ns/op
Iteration  23: 130.965 ns/op
Iteration  24: 130.903 ns/op
Iteration  25: 130.863 ns/op
Iteration  26: 131.001 ns/op
Iteration  27: 130.802 ns/op
Iteration  28: 130.829 ns/op
Iteration  29: 130.810 ns/op
Iteration  30: 130.910 ns/op
Iteration  31: 131.085 ns/op
Iteration  32: 131.125 ns/op
Iteration  33: 131.039 ns/op
Iteration  34: 130.948 ns/op
Iteration  35: 131.001 ns/op
Iteration  36: 130.968 ns/op
Iteration  37: 130.934 ns/op
Iteration  38: 130.859 ns/op
Iteration  39: 130.943 ns/op
Iteration  40: 130.912 ns/op
Iteration  41: 130.966 ns/op
Iteration  42: 130.957 ns/op
Iteration  43: 130.874 ns/op
Iteration  44: 131.264 ns/op
Iteration  45: 130.998 ns/op
Iteration  46: 130.933 ns/op
Iteration  47: 131.725 ns/op
Iteration  48: 131.019 ns/op
Iteration  49: 131.076 ns/op
Iteration  50: 131.054 ns/op


Result "benchmark.StringContains.regexMatches":
  130.964 ±(99.9%) 0.086 ns/op [Average]
  (min, avg, max) = (130.799, 130.964, 131.725), stdev = 0.174
  CI (99.9%): [130.878, 131.050] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = NC`uHwvs\{\	, str = kNAX$Q5ZG*D)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.897 ns/op
# Warmup Iteration   2: 4.864 ns/op
# Warmup Iteration   3: 5.244 ns/op
# Warmup Iteration   4: 5.256 ns/op
# Warmup Iteration   5: 5.250 ns/op
# Warmup Iteration   6: 5.245 ns/op
# Warmup Iteration   7: 4.939 ns/op
# Warmup Iteration   8: 4.938 ns/op
# Warmup Iteration   9: 4.939 ns/op
# Warmup Iteration  10: 4.943 ns/op
Iteration   1: 4.939 ns/op
Iteration   2: 4.939 ns/op
Iteration   3: 4.938 ns/op
Iteration   4: 4.938 ns/op
Iteration   5: 4.938 ns/op
Iteration   6: 4.938 ns/op
Iteration   7: 4.939 ns/op
Iteration   8: 4.943 ns/op
Iteration   9: 4.940 ns/op
Iteration  10: 4.941 ns/op
Iteration  11: 4.939 ns/op
Iteration  12: 4.939 ns/op
Iteration  13: 4.938 ns/op
Iteration  14: 4.939 ns/op
Iteration  15: 4.939 ns/op
Iteration  16: 4.938 ns/op
Iteration  17: 4.939 ns/op
Iteration  18: 4.939 ns/op
Iteration  19: 4.938 ns/op
Iteration  20: 4.971 ns/op
Iteration  21: 4.938 ns/op
Iteration  22: 4.938 ns/op
Iteration  23: 4.938 ns/op
Iteration  24: 4.938 ns/op
Iteration  25: 4.938 ns/op
Iteration  26: 4.939 ns/op
Iteration  27: 4.944 ns/op
Iteration  28: 4.938 ns/op
Iteration  29: 4.937 ns/op
Iteration  30: 4.938 ns/op
Iteration  31: 4.937 ns/op
Iteration  32: 4.938 ns/op
Iteration  33: 4.938 ns/op
Iteration  34: 4.937 ns/op
Iteration  35: 4.937 ns/op
Iteration  36: 4.937 ns/op
Iteration  37: 4.937 ns/op
Iteration  38: 4.937 ns/op
Iteration  39: 4.937 ns/op
Iteration  40: 4.938 ns/op
Iteration  41: 4.938 ns/op
Iteration  42: 4.938 ns/op
Iteration  43: 4.938 ns/op
Iteration  44: 4.938 ns/op
Iteration  45: 4.938 ns/op
Iteration  46: 4.938 ns/op
Iteration  47: 4.938 ns/op
Iteration  48: 4.938 ns/op
Iteration  49: 4.938 ns/op
Iteration  50: 4.937 ns/op


Result "benchmark.StringContains.stringContains":
  4.939 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (4.937, 4.939, 4.971), stdev = 0.005
  CI (99.9%): [4.937, 4.941] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (regex)        (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    NC`uHwvs\{\	  kNAX$Q5ZG*D  avgt   50  130.964 ± 0.086  ns/op
StringContains.stringContains  NC`uHwvs\{\	  kNAX$Q5ZG*D  avgt   50    4.939 ± 0.002  ns/op

Benchmark result is saved to 1_1_dismatching_rm.csv
