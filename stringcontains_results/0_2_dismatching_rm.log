# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 839.863 ns/op
# Warmup Iteration   2: 806.938 ns/op
# Warmup Iteration   3: 767.352 ns/op
# Warmup Iteration   4: 763.021 ns/op
# Warmup Iteration   5: 762.505 ns/op
# Warmup Iteration   6: 762.615 ns/op
# Warmup Iteration   7: 763.087 ns/op
# Warmup Iteration   8: 762.712 ns/op
# Warmup Iteration   9: 762.915 ns/op
# Warmup Iteration  10: 762.954 ns/op
Iteration   1: 763.024 ns/op
Iteration   2: 762.850 ns/op
Iteration   3: 762.838 ns/op
Iteration   4: 762.889 ns/op
Iteration   5: 762.599 ns/op
Iteration   6: 762.818 ns/op
Iteration   7: 764.415 ns/op
Iteration   8: 762.821 ns/op
Iteration   9: 762.786 ns/op
Iteration  10: 763.563 ns/op
Iteration  11: 762.895 ns/op
Iteration  12: 764.296 ns/op
Iteration  13: 764.879 ns/op
Iteration  14: 764.621 ns/op
Iteration  15: 764.997 ns/op
Iteration  16: 765.811 ns/op
Iteration  17: 766.005 ns/op
Iteration  18: 764.800 ns/op
Iteration  19: 764.169 ns/op
Iteration  20: 764.576 ns/op
Iteration  21: 763.507 ns/op
Iteration  22: 762.972 ns/op
Iteration  23: 762.735 ns/op
Iteration  24: 762.801 ns/op
Iteration  25: 762.833 ns/op
Iteration  26: 762.455 ns/op
Iteration  27: 762.992 ns/op
Iteration  28: 762.586 ns/op
Iteration  29: 762.642 ns/op
Iteration  30: 762.709 ns/op
Iteration  31: 762.774 ns/op
Iteration  32: 762.931 ns/op
Iteration  33: 762.939 ns/op
Iteration  34: 762.871 ns/op
Iteration  35: 762.827 ns/op
Iteration  36: 762.767 ns/op
Iteration  37: 762.650 ns/op
Iteration  38: 762.634 ns/op
Iteration  39: 762.743 ns/op
Iteration  40: 762.723 ns/op
Iteration  41: 762.573 ns/op
Iteration  42: 762.753 ns/op
Iteration  43: 762.539 ns/op
Iteration  44: 763.164 ns/op
Iteration  45: 763.167 ns/op
Iteration  46: 762.618 ns/op
Iteration  47: 762.528 ns/op
Iteration  48: 762.717 ns/op
Iteration  49: 763.074 ns/op
Iteration  50: 762.988 ns/op


Result "benchmark.StringContains.regexMatches":
  763.237 ±(99.9%) 0.438 ns/op [Average]
  (min, avg, max) = (762.455, 763.237, 766.005), stdev = 0.884
  CI (99.9%): [762.800, 763.675] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 23.716 ns/op
# Warmup Iteration   2: 25.005 ns/op
# Warmup Iteration   3: 25.734 ns/op
# Warmup Iteration   4: 25.702 ns/op
# Warmup Iteration   5: 25.666 ns/op
# Warmup Iteration   6: 25.683 ns/op
# Warmup Iteration   7: 25.680 ns/op
# Warmup Iteration   8: 25.678 ns/op
# Warmup Iteration   9: 25.667 ns/op
# Warmup Iteration  10: 25.712 ns/op
Iteration   1: 25.697 ns/op
Iteration   2: 25.697 ns/op
Iteration   3: 25.720 ns/op
Iteration   4: 25.726 ns/op
Iteration   5: 25.745 ns/op
Iteration   6: 25.749 ns/op
Iteration   7: 25.702 ns/op
Iteration   8: 25.709 ns/op
Iteration   9: 25.721 ns/op
Iteration  10: 25.703 ns/op
Iteration  11: 25.826 ns/op
Iteration  12: 25.706 ns/op
Iteration  13: 25.708 ns/op
Iteration  14: 25.739 ns/op
Iteration  15: 25.759 ns/op
Iteration  16: 25.747 ns/op
Iteration  17: 25.722 ns/op
Iteration  18: 25.723 ns/op
Iteration  19: 25.693 ns/op
Iteration  20: 25.706 ns/op
Iteration  21: 25.715 ns/op
Iteration  22: 25.700 ns/op
Iteration  23: 25.689 ns/op
Iteration  24: 25.705 ns/op
Iteration  25: 25.706 ns/op
Iteration  26: 25.786 ns/op
Iteration  27: 25.710 ns/op
Iteration  28: 25.673 ns/op
Iteration  29: 25.729 ns/op
Iteration  30: 25.704 ns/op
Iteration  31: 25.712 ns/op
Iteration  32: 25.714 ns/op
Iteration  33: 25.698 ns/op
Iteration  34: 25.692 ns/op
Iteration  35: 25.667 ns/op
Iteration  36: 25.669 ns/op
Iteration  37: 25.838 ns/op
Iteration  38: 25.719 ns/op
Iteration  39: 25.692 ns/op
Iteration  40: 25.714 ns/op
Iteration  41: 25.704 ns/op
Iteration  42: 25.704 ns/op
Iteration  43: 25.739 ns/op
Iteration  44: 25.735 ns/op
Iteration  45: 25.699 ns/op
Iteration  46: 25.690 ns/op
Iteration  47: 25.694 ns/op
Iteration  48: 25.706 ns/op
Iteration  49: 25.694 ns/op
Iteration  50: 25.709 ns/op


Result "benchmark.StringContains.stringContains":
  25.716 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (25.667, 25.716, 25.838), stdev = 0.033
  CI (99.9%): [25.700, 25.732] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                            (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches     \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50  763.237 ± 0.438  ns/op
StringContains.stringContains   \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50   25.716 ± 0.016  ns/op

Benchmark result is saved to 0_2_dismatching_rm.csv
