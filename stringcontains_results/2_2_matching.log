# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7<eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 1514.643 ns/op
# Warmup Iteration   2: 1360.426 ns/op
# Warmup Iteration   3: 1251.824 ns/op
# Warmup Iteration   4: 1244.444 ns/op
# Warmup Iteration   5: 1245.946 ns/op
# Warmup Iteration   6: 1244.599 ns/op
# Warmup Iteration   7: 1245.855 ns/op
# Warmup Iteration   8: 1244.245 ns/op
# Warmup Iteration   9: 1243.349 ns/op
# Warmup Iteration  10: 1243.760 ns/op
Iteration   1: 1244.065 ns/op
Iteration   2: 1243.517 ns/op
Iteration   3: 1244.060 ns/op
Iteration   4: 1244.181 ns/op
Iteration   5: 1244.433 ns/op
Iteration   6: 1244.253 ns/op
Iteration   7: 1244.224 ns/op
Iteration   8: 1244.858 ns/op
Iteration   9: 1246.309 ns/op
Iteration  10: 1245.055 ns/op
Iteration  11: 1243.957 ns/op
Iteration  12: 1243.594 ns/op
Iteration  13: 1243.678 ns/op
Iteration  14: 1244.739 ns/op
Iteration  15: 1244.175 ns/op
Iteration  16: 1244.134 ns/op
Iteration  17: 1244.001 ns/op
Iteration  18: 1244.347 ns/op
Iteration  19: 1244.195 ns/op
Iteration  20: 1244.120 ns/op
Iteration  21: 1243.749 ns/op
Iteration  22: 1243.937 ns/op
Iteration  23: 1243.764 ns/op
Iteration  24: 1243.984 ns/op
Iteration  25: 1244.354 ns/op
Iteration  26: 1251.352 ns/op
Iteration  27: 1244.432 ns/op
Iteration  28: 1244.336 ns/op
Iteration  29: 1243.856 ns/op
Iteration  30: 1243.940 ns/op
Iteration  31: 1243.912 ns/op
Iteration  32: 1243.645 ns/op
Iteration  33: 1243.980 ns/op
Iteration  34: 1244.561 ns/op
Iteration  35: 1243.759 ns/op
Iteration  36: 1243.865 ns/op
Iteration  37: 1243.830 ns/op
Iteration  38: 1243.940 ns/op
Iteration  39: 1244.477 ns/op
Iteration  40: 1244.171 ns/op
Iteration  41: 1243.893 ns/op
Iteration  42: 1243.801 ns/op
Iteration  43: 1243.938 ns/op
Iteration  44: 1250.365 ns/op
Iteration  45: 1243.846 ns/op
Iteration  46: 1244.632 ns/op
Iteration  47: 1243.724 ns/op
Iteration  48: 1243.643 ns/op
Iteration  49: 1243.973 ns/op
Iteration  50: 1243.521 ns/op


Result "benchmark.StringContains.regexMatches":
  1244.381 ±(99.9%) 0.701 ns/op [Average]
  (min, avg, max) = (1243.517, 1244.381, 1251.352), stdev = 1.417
  CI (99.9%): [1243.680, 1245.083] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7<eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 21.542 ns/op
# Warmup Iteration   2: 22.396 ns/op
# Warmup Iteration   3: 20.862 ns/op
# Warmup Iteration   4: 20.868 ns/op
# Warmup Iteration   5: 20.859 ns/op
# Warmup Iteration   6: 20.868 ns/op
# Warmup Iteration   7: 20.863 ns/op
# Warmup Iteration   8: 20.860 ns/op
# Warmup Iteration   9: 20.856 ns/op
# Warmup Iteration  10: 20.866 ns/op
Iteration   1: 20.861 ns/op
Iteration   2: 20.865 ns/op
Iteration   3: 20.861 ns/op
Iteration   4: 20.873 ns/op
Iteration   5: 20.859 ns/op
Iteration   6: 20.863 ns/op
Iteration   7: 20.860 ns/op
Iteration   8: 20.859 ns/op
Iteration   9: 20.875 ns/op
Iteration  10: 20.869 ns/op
Iteration  11: 20.868 ns/op
Iteration  12: 20.883 ns/op
Iteration  13: 20.860 ns/op
Iteration  14: 20.882 ns/op
Iteration  15: 20.883 ns/op
Iteration  16: 20.861 ns/op
Iteration  17: 20.858 ns/op
Iteration  18: 20.861 ns/op
Iteration  19: 20.868 ns/op
Iteration  20: 20.862 ns/op
Iteration  21: 20.869 ns/op
Iteration  22: 20.861 ns/op
Iteration  23: 20.861 ns/op
Iteration  24: 20.870 ns/op
Iteration  25: 20.875 ns/op
Iteration  26: 20.867 ns/op
Iteration  27: 20.865 ns/op
Iteration  28: 20.868 ns/op
Iteration  29: 20.864 ns/op
Iteration  30: 20.873 ns/op
Iteration  31: 20.876 ns/op
Iteration  32: 20.868 ns/op
Iteration  33: 20.871 ns/op
Iteration  34: 20.865 ns/op
Iteration  35: 20.861 ns/op
Iteration  36: 20.864 ns/op
Iteration  37: 20.864 ns/op
Iteration  38: 20.860 ns/op
Iteration  39: 20.861 ns/op
Iteration  40: 20.865 ns/op
Iteration  41: 20.867 ns/op
Iteration  42: 20.870 ns/op
Iteration  43: 20.873 ns/op
Iteration  44: 20.877 ns/op
Iteration  45: 20.863 ns/op
Iteration  46: 20.874 ns/op
Iteration  47: 20.890 ns/op
Iteration  48: 20.874 ns/op
Iteration  49: 20.874 ns/op
Iteration  50: 20.874 ns/op


Result "benchmark.StringContains.stringContains":
  20.868 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (20.858, 20.868, 20.890), stdev = 0.007
  CI (99.9%): [20.864, 20.872] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)                                                                                                                                                              (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7<eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y  avgt   50  1244.381 ± 0.701  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  DD_C ?+>00FyPC&,<%k,+EjiTb!j^;q_A0cpr:U.K-?"7(gjQ`1#lX(@88)<.#)Vqy<It+q tR+Y&AH*MQd02XZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7<eY.9$D*nW\Y0i"xZ[.N6GVPj:<J'llyLN"K`<Y  avgt   50    20.868 ± 0.004  ns/op

Benchmark result is saved to 2_2_matching.csv
