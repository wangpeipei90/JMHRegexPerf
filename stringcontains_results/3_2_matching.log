# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 1588.379 ns/op
# Warmup Iteration   2: 1381.166 ns/op
# Warmup Iteration   3: 1319.410 ns/op
# Warmup Iteration   4: 1315.462 ns/op
# Warmup Iteration   5: 1314.779 ns/op
# Warmup Iteration   6: 1314.916 ns/op
# Warmup Iteration   7: 1314.384 ns/op
# Warmup Iteration   8: 1314.675 ns/op
# Warmup Iteration   9: 1314.704 ns/op
# Warmup Iteration  10: 1314.501 ns/op
Iteration   1: 1314.976 ns/op
Iteration   2: 1314.674 ns/op
Iteration   3: 1314.810 ns/op
Iteration   4: 1314.405 ns/op
Iteration   5: 1314.322 ns/op
Iteration   6: 1314.531 ns/op
Iteration   7: 1314.111 ns/op
Iteration   8: 1314.555 ns/op
Iteration   9: 1314.327 ns/op
Iteration  10: 1313.969 ns/op
Iteration  11: 1314.473 ns/op
Iteration  12: 1318.315 ns/op
Iteration  13: 1315.202 ns/op
Iteration  14: 1317.521 ns/op
Iteration  15: 1313.753 ns/op
Iteration  16: 1315.562 ns/op
Iteration  17: 1313.101 ns/op
Iteration  18: 1314.409 ns/op
Iteration  19: 1314.368 ns/op
Iteration  20: 1312.756 ns/op
Iteration  21: 1313.940 ns/op
Iteration  22: 1313.924 ns/op
Iteration  23: 1314.115 ns/op
Iteration  24: 1314.810 ns/op
Iteration  25: 1313.076 ns/op
Iteration  26: 1313.316 ns/op
Iteration  27: 1313.579 ns/op
Iteration  28: 1312.924 ns/op
Iteration  29: 1312.403 ns/op
Iteration  30: 1313.154 ns/op
Iteration  31: 1313.014 ns/op
Iteration  32: 1312.791 ns/op
Iteration  33: 1313.786 ns/op
Iteration  34: 1312.859 ns/op
Iteration  35: 1314.340 ns/op
Iteration  36: 1313.082 ns/op
Iteration  37: 1313.074 ns/op
Iteration  38: 1313.674 ns/op
Iteration  39: 1312.757 ns/op
Iteration  40: 1312.976 ns/op
Iteration  41: 1313.159 ns/op
Iteration  42: 1313.320 ns/op
Iteration  43: 1314.241 ns/op
Iteration  44: 1313.132 ns/op
Iteration  45: 1313.416 ns/op
Iteration  46: 1313.227 ns/op
Iteration  47: 1313.530 ns/op
Iteration  48: 1313.560 ns/op
Iteration  49: 1313.977 ns/op
Iteration  50: 1313.340 ns/op


Result "benchmark.StringContains.regexMatches":
  1313.933 ±(99.9%) 0.545 ns/op [Average]
  (min, avg, max) = (1312.403, 1313.933, 1318.315), stdev = 1.100
  CI (99.9%): [1313.388, 1314.477] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 10.065 ns/op
# Warmup Iteration   2: 10.832 ns/op
# Warmup Iteration   3: 9.900 ns/op
# Warmup Iteration   4: 9.885 ns/op
# Warmup Iteration   5: 9.895 ns/op
# Warmup Iteration   6: 9.889 ns/op
# Warmup Iteration   7: 9.887 ns/op
# Warmup Iteration   8: 9.890 ns/op
# Warmup Iteration   9: 9.898 ns/op
# Warmup Iteration  10: 9.892 ns/op
Iteration   1: 9.893 ns/op
Iteration   2: 9.893 ns/op
Iteration   3: 9.894 ns/op
Iteration   4: 9.894 ns/op
Iteration   5: 9.898 ns/op
Iteration   6: 9.894 ns/op
Iteration   7: 9.906 ns/op
Iteration   8: 9.893 ns/op
Iteration   9: 9.892 ns/op
Iteration  10: 9.892 ns/op
Iteration  11: 9.893 ns/op
Iteration  12: 9.905 ns/op
Iteration  13: 9.908 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.894 ns/op
Iteration  16: 9.890 ns/op
Iteration  17: 9.894 ns/op
Iteration  18: 9.896 ns/op
Iteration  19: 9.892 ns/op
Iteration  20: 9.891 ns/op
Iteration  21: 9.895 ns/op
Iteration  22: 9.897 ns/op
Iteration  23: 9.898 ns/op
Iteration  24: 9.894 ns/op
Iteration  25: 9.894 ns/op
Iteration  26: 9.895 ns/op
Iteration  27: 9.893 ns/op
Iteration  28: 9.893 ns/op
Iteration  29: 9.890 ns/op
Iteration  30: 9.888 ns/op
Iteration  31: 9.903 ns/op
Iteration  32: 9.901 ns/op
Iteration  33: 9.889 ns/op
Iteration  34: 9.906 ns/op
Iteration  35: 9.892 ns/op
Iteration  36: 9.916 ns/op
Iteration  37: 9.934 ns/op
Iteration  38: 9.912 ns/op
Iteration  39: 9.901 ns/op
Iteration  40: 9.884 ns/op
Iteration  41: 9.893 ns/op
Iteration  42: 9.893 ns/op
Iteration  43: 9.892 ns/op
Iteration  44: 9.901 ns/op
Iteration  45: 9.956 ns/op
Iteration  46: 9.962 ns/op
Iteration  47: 9.891 ns/op
Iteration  48: 9.890 ns/op
Iteration  49: 9.892 ns/op
Iteration  50: 9.889 ns/op


Result "benchmark.StringContains.stringContains":
  9.899 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.884, 9.899, 9.962), stdev = 0.015
  CI (99.9%): [9.892, 9.906] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                               (regex)                                                                                                                                             (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches    1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k  avgt   50  1313.933 ± 0.545  ns/op
StringContains.stringContains  1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/*:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k  avgt   50     9.899 ± 0.007  ns/op

Benchmark result is saved to 3_2_matching.csv
