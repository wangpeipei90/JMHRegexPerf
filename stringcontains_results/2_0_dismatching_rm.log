# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = )

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 161.749 ns/op
# Warmup Iteration   2: 72.717 ns/op
# Warmup Iteration   3: 64.923 ns/op
# Warmup Iteration   4: 64.271 ns/op
# Warmup Iteration   5: 64.946 ns/op
# Warmup Iteration   6: 64.107 ns/op
# Warmup Iteration   7: 64.416 ns/op
# Warmup Iteration   8: 64.371 ns/op
# Warmup Iteration   9: 64.258 ns/op
# Warmup Iteration  10: 64.439 ns/op
Iteration   1: 64.529 ns/op
Iteration   2: 64.284 ns/op
Iteration   3: 64.326 ns/op
Iteration   4: 64.626 ns/op
Iteration   5: 64.814 ns/op
Iteration   6: 64.122 ns/op
Iteration   7: 64.829 ns/op
Iteration   8: 64.486 ns/op
Iteration   9: 64.053 ns/op
Iteration  10: 64.286 ns/op
Iteration  11: 64.505 ns/op
Iteration  12: 64.104 ns/op
Iteration  13: 64.534 ns/op
Iteration  14: 64.656 ns/op
Iteration  15: 63.964 ns/op
Iteration  16: 64.371 ns/op
Iteration  17: 64.612 ns/op
Iteration  18: 64.607 ns/op
Iteration  19: 64.589 ns/op
Iteration  20: 64.588 ns/op
Iteration  21: 64.198 ns/op
Iteration  22: 64.489 ns/op
Iteration  23: 64.900 ns/op
Iteration  24: 64.399 ns/op
Iteration  25: 64.419 ns/op
Iteration  26: 64.441 ns/op
Iteration  27: 64.317 ns/op
Iteration  28: 64.552 ns/op
Iteration  29: 64.517 ns/op
Iteration  30: 64.161 ns/op
Iteration  31: 64.435 ns/op
Iteration  32: 64.339 ns/op
Iteration  33: 64.083 ns/op
Iteration  34: 64.466 ns/op
Iteration  35: 64.361 ns/op
Iteration  36: 64.775 ns/op
Iteration  37: 64.338 ns/op
Iteration  38: 64.640 ns/op
Iteration  39: 64.464 ns/op
Iteration  40: 64.684 ns/op
Iteration  41: 64.295 ns/op
Iteration  42: 64.429 ns/op
Iteration  43: 64.101 ns/op
Iteration  44: 64.145 ns/op
Iteration  45: 64.169 ns/op
Iteration  46: 64.792 ns/op
Iteration  47: 64.122 ns/op
Iteration  48: 64.420 ns/op
Iteration  49: 64.289 ns/op
Iteration  50: 64.746 ns/op


Result "benchmark.StringContains.regexMatches":
  64.427 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (63.964, 64.427, 64.900), stdev = 0.228
  CI (99.9%): [64.315, 64.540] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = )

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.900 ns/op
# Warmup Iteration   2: 4.864 ns/op
# Warmup Iteration   3: 4.940 ns/op
# Warmup Iteration   4: 4.940 ns/op
# Warmup Iteration   5: 4.940 ns/op
# Warmup Iteration   6: 4.940 ns/op
# Warmup Iteration   7: 4.938 ns/op
# Warmup Iteration   8: 4.941 ns/op
# Warmup Iteration   9: 4.939 ns/op
# Warmup Iteration  10: 4.939 ns/op
Iteration   1: 4.938 ns/op
Iteration   2: 4.938 ns/op
Iteration   3: 4.943 ns/op
Iteration   4: 4.938 ns/op
Iteration   5: 4.938 ns/op
Iteration   6: 4.939 ns/op
Iteration   7: 4.941 ns/op
Iteration   8: 4.938 ns/op
Iteration   9: 4.939 ns/op
Iteration  10: 4.939 ns/op
Iteration  11: 4.939 ns/op
Iteration  12: 4.939 ns/op
Iteration  13: 4.939 ns/op
Iteration  14: 4.940 ns/op
Iteration  15: 4.939 ns/op
Iteration  16: 4.939 ns/op
Iteration  17: 4.939 ns/op
Iteration  18: 4.939 ns/op
Iteration  19: 4.940 ns/op
Iteration  20: 4.940 ns/op
Iteration  21: 4.939 ns/op
Iteration  22: 4.941 ns/op
Iteration  23: 4.942 ns/op
Iteration  24: 4.938 ns/op
Iteration  25: 4.938 ns/op
Iteration  26: 4.938 ns/op
Iteration  27: 4.938 ns/op
Iteration  28: 4.939 ns/op
Iteration  29: 4.938 ns/op
Iteration  30: 4.938 ns/op
Iteration  31: 4.938 ns/op
Iteration  32: 4.938 ns/op
Iteration  33: 4.938 ns/op
Iteration  34: 4.941 ns/op
Iteration  35: 4.941 ns/op
Iteration  36: 4.941 ns/op
Iteration  37: 4.942 ns/op
Iteration  38: 4.939 ns/op
Iteration  39: 4.939 ns/op
Iteration  40: 4.938 ns/op
Iteration  41: 4.938 ns/op
Iteration  42: 4.938 ns/op
Iteration  43: 4.937 ns/op
Iteration  44: 4.938 ns/op
Iteration  45: 4.939 ns/op
Iteration  46: 4.939 ns/op
Iteration  47: 4.939 ns/op
Iteration  48: 4.945 ns/op
Iteration  49: 4.941 ns/op
Iteration  50: 4.939 ns/op


Result "benchmark.StringContains.stringContains":
  4.939 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (4.937, 4.939, 4.945), stdev = 0.001
  CI (99.9%): [4.938, 4.940] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)  (str)  Mode  Cnt   Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7         avgt   50  64.427 ± 0.113  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7         avgt   50   4.939 ± 0.001  ns/op

Benchmark result is saved to 2_0_dismatching_rm.csv
