# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+w_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 949.733 ns/op
# Warmup Iteration   2: 882.962 ns/op
# Warmup Iteration   3: 838.086 ns/op
# Warmup Iteration   4: 834.054 ns/op
# Warmup Iteration   5: 833.564 ns/op
# Warmup Iteration   6: 833.345 ns/op
# Warmup Iteration   7: 833.246 ns/op
# Warmup Iteration   8: 833.775 ns/op
# Warmup Iteration   9: 833.394 ns/op
# Warmup Iteration  10: 833.354 ns/op
Iteration   1: 833.545 ns/op
Iteration   2: 833.157 ns/op
Iteration   3: 833.289 ns/op
Iteration   4: 833.220 ns/op
Iteration   5: 833.361 ns/op
Iteration   6: 833.529 ns/op
Iteration   7: 833.388 ns/op
Iteration   8: 833.885 ns/op
Iteration   9: 833.327 ns/op
Iteration  10: 833.798 ns/op
Iteration  11: 834.525 ns/op
Iteration  12: 833.718 ns/op
Iteration  13: 833.175 ns/op
Iteration  14: 833.075 ns/op
Iteration  15: 833.289 ns/op
Iteration  16: 833.118 ns/op
Iteration  17: 833.296 ns/op
Iteration  18: 833.512 ns/op
Iteration  19: 833.399 ns/op
Iteration  20: 834.464 ns/op
Iteration  21: 833.461 ns/op
Iteration  22: 833.512 ns/op
Iteration  23: 833.486 ns/op
Iteration  24: 833.353 ns/op
Iteration  25: 833.479 ns/op
Iteration  26: 833.486 ns/op
Iteration  27: 833.768 ns/op
Iteration  28: 833.177 ns/op
Iteration  29: 833.389 ns/op
Iteration  30: 832.989 ns/op
Iteration  31: 833.093 ns/op
Iteration  32: 833.490 ns/op
Iteration  33: 832.999 ns/op
Iteration  34: 833.237 ns/op
Iteration  35: 833.273 ns/op
Iteration  36: 833.074 ns/op
Iteration  37: 833.202 ns/op
Iteration  38: 833.185 ns/op
Iteration  39: 833.137 ns/op
Iteration  40: 833.395 ns/op
Iteration  41: 833.523 ns/op
Iteration  42: 833.393 ns/op
Iteration  43: 833.416 ns/op
Iteration  44: 833.568 ns/op
Iteration  45: 833.094 ns/op
Iteration  46: 833.285 ns/op
Iteration  47: 833.486 ns/op
Iteration  48: 834.282 ns/op
Iteration  49: 833.208 ns/op
Iteration  50: 833.363 ns/op


Result "benchmark.StringContains.regexMatches":
  833.417 ±(99.9%) 0.162 ns/op [Average]
  (min, avg, max) = (832.989, 833.417, 834.525), stdev = 0.327
  CI (99.9%): [833.256, 833.579] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+w_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 23.693 ns/op
# Warmup Iteration   2: 25.012 ns/op
# Warmup Iteration   3: 24.966 ns/op
# Warmup Iteration   4: 24.964 ns/op
# Warmup Iteration   5: 24.957 ns/op
# Warmup Iteration   6: 24.962 ns/op
# Warmup Iteration   7: 24.967 ns/op
# Warmup Iteration   8: 24.954 ns/op
# Warmup Iteration   9: 24.987 ns/op
# Warmup Iteration  10: 25.003 ns/op
Iteration   1: 24.968 ns/op
Iteration   2: 24.975 ns/op
Iteration   3: 24.959 ns/op
Iteration   4: 24.976 ns/op
Iteration   5: 24.982 ns/op
Iteration   6: 24.971 ns/op
Iteration   7: 24.962 ns/op
Iteration   8: 24.959 ns/op
Iteration   9: 24.999 ns/op
Iteration  10: 24.970 ns/op
Iteration  11: 24.977 ns/op
Iteration  12: 24.980 ns/op
Iteration  13: 24.965 ns/op
Iteration  14: 24.981 ns/op
Iteration  15: 25.142 ns/op
Iteration  16: 24.962 ns/op
Iteration  17: 24.957 ns/op
Iteration  18: 24.963 ns/op
Iteration  19: 24.955 ns/op
Iteration  20: 24.954 ns/op
Iteration  21: 24.956 ns/op
Iteration  22: 24.954 ns/op
Iteration  23: 24.957 ns/op
Iteration  24: 24.958 ns/op
Iteration  25: 24.957 ns/op
Iteration  26: 24.959 ns/op
Iteration  27: 24.957 ns/op
Iteration  28: 24.957 ns/op
Iteration  29: 24.957 ns/op
Iteration  30: 25.047 ns/op
Iteration  31: 24.957 ns/op
Iteration  32: 24.963 ns/op
Iteration  33: 24.956 ns/op
Iteration  34: 24.967 ns/op
Iteration  35: 24.959 ns/op
Iteration  36: 24.956 ns/op
Iteration  37: 24.955 ns/op
Iteration  38: 24.952 ns/op
Iteration  39: 24.955 ns/op
Iteration  40: 24.957 ns/op
Iteration  41: 24.955 ns/op
Iteration  42: 24.996 ns/op
Iteration  43: 24.954 ns/op
Iteration  44: 24.982 ns/op
Iteration  45: 24.969 ns/op
Iteration  46: 24.954 ns/op
Iteration  47: 24.965 ns/op
Iteration  48: 24.948 ns/op
Iteration  49: 24.950 ns/op
Iteration  50: 24.975 ns/op


Result "benchmark.StringContains.stringContains":
  24.969 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (24.948, 24.969, 25.142), stdev = 0.030
  CI (99.9%): [24.954, 24.984] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                                 (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches     \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+w_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50  833.417 ± 0.162  ns/op
StringContains.stringContains   \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+w_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50   24.969 ± 0.015  ns/op

Benchmark result is saved to 0_2_dismatching_edit.csv
