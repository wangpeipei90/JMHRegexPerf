# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 817.820 ns/op
# Warmup Iteration   2: 752.226 ns/op
# Warmup Iteration   3: 773.861 ns/op
# Warmup Iteration   4: 774.066 ns/op
# Warmup Iteration   5: 773.903 ns/op
# Warmup Iteration   6: 774.413 ns/op
# Warmup Iteration   7: 774.838 ns/op
# Warmup Iteration   8: 774.501 ns/op
# Warmup Iteration   9: 773.909 ns/op
# Warmup Iteration  10: 774.046 ns/op
Iteration   1: 774.449 ns/op
Iteration   2: 773.948 ns/op
Iteration   3: 773.809 ns/op
Iteration   4: 774.229 ns/op
Iteration   5: 774.141 ns/op
Iteration   6: 774.555 ns/op
Iteration   7: 774.883 ns/op
Iteration   8: 774.071 ns/op
Iteration   9: 774.314 ns/op
Iteration  10: 774.404 ns/op
Iteration  11: 774.095 ns/op
Iteration  12: 774.259 ns/op
Iteration  13: 774.424 ns/op
Iteration  14: 774.128 ns/op
Iteration  15: 774.528 ns/op
Iteration  16: 774.205 ns/op
Iteration  17: 774.271 ns/op
Iteration  18: 774.502 ns/op
Iteration  19: 774.392 ns/op
Iteration  20: 774.354 ns/op
Iteration  21: 774.192 ns/op
Iteration  22: 774.000 ns/op
Iteration  23: 774.378 ns/op
Iteration  24: 774.541 ns/op
Iteration  25: 774.162 ns/op
Iteration  26: 773.843 ns/op
Iteration  27: 774.122 ns/op
Iteration  28: 774.052 ns/op
Iteration  29: 774.174 ns/op
Iteration  30: 774.170 ns/op
Iteration  31: 774.650 ns/op
Iteration  32: 774.699 ns/op
Iteration  33: 776.276 ns/op
Iteration  34: 774.389 ns/op
Iteration  35: 778.610 ns/op
Iteration  36: 774.383 ns/op
Iteration  37: 773.955 ns/op
Iteration  38: 774.509 ns/op
Iteration  39: 774.314 ns/op
Iteration  40: 773.765 ns/op
Iteration  41: 773.898 ns/op
Iteration  42: 774.336 ns/op
Iteration  43: 773.816 ns/op
Iteration  44: 774.327 ns/op
Iteration  45: 774.737 ns/op
Iteration  46: 774.163 ns/op
Iteration  47: 774.555 ns/op
Iteration  48: 775.196 ns/op
Iteration  49: 776.257 ns/op
Iteration  50: 777.075 ns/op


Result "benchmark.StringContains.regexMatches":
  774.510 ±(99.9%) 0.422 ns/op [Average]
  (min, avg, max) = (773.765, 774.510, 778.610), stdev = 0.853
  CI (99.9%): [774.088, 774.932] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 23.815 ns/op
# Warmup Iteration   2: 25.074 ns/op
# Warmup Iteration   3: 25.022 ns/op
# Warmup Iteration   4: 24.992 ns/op
# Warmup Iteration   5: 24.957 ns/op
# Warmup Iteration   6: 24.949 ns/op
# Warmup Iteration   7: 24.950 ns/op
# Warmup Iteration   8: 24.951 ns/op
# Warmup Iteration   9: 24.950 ns/op
# Warmup Iteration  10: 24.957 ns/op
Iteration   1: 24.956 ns/op
Iteration   2: 24.947 ns/op
Iteration   3: 24.951 ns/op
Iteration   4: 24.965 ns/op
Iteration   5: 24.964 ns/op
Iteration   6: 24.953 ns/op
Iteration   7: 24.968 ns/op
Iteration   8: 24.949 ns/op
Iteration   9: 24.948 ns/op
Iteration  10: 24.963 ns/op
Iteration  11: 24.949 ns/op
Iteration  12: 24.948 ns/op
Iteration  13: 24.960 ns/op
Iteration  14: 24.951 ns/op
Iteration  15: 24.949 ns/op
Iteration  16: 24.947 ns/op
Iteration  17: 24.948 ns/op
Iteration  18: 24.957 ns/op
Iteration  19: 24.954 ns/op
Iteration  20: 24.949 ns/op
Iteration  21: 24.962 ns/op
Iteration  22: 24.976 ns/op
Iteration  23: 24.961 ns/op
Iteration  24: 24.956 ns/op
Iteration  25: 24.956 ns/op
Iteration  26: 24.959 ns/op
Iteration  27: 24.964 ns/op
Iteration  28: 24.956 ns/op
Iteration  29: 24.953 ns/op
Iteration  30: 24.968 ns/op
Iteration  31: 24.956 ns/op
Iteration  32: 24.954 ns/op
Iteration  33: 24.951 ns/op
Iteration  34: 24.951 ns/op
Iteration  35: 24.948 ns/op
Iteration  36: 24.951 ns/op
Iteration  37: 24.949 ns/op
Iteration  38: 24.949 ns/op
Iteration  39: 24.958 ns/op
Iteration  40: 24.960 ns/op
Iteration  41: 24.956 ns/op
Iteration  42: 24.954 ns/op
Iteration  43: 24.954 ns/op
Iteration  44: 24.953 ns/op
Iteration  45: 24.956 ns/op
Iteration  46: 24.950 ns/op
Iteration  47: 24.950 ns/op
Iteration  48: 24.950 ns/op
Iteration  49: 24.966 ns/op
Iteration  50: 24.954 ns/op


Result "benchmark.StringContains.stringContains":
  24.955 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (24.947, 24.955, 24.976), stdev = 0.007
  CI (99.9%): [24.952, 24.958] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                                 (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches     \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50  774.510 ± 0.422  ns/op
StringContains.stringContains   \+D_NJ  CZ0]Z/+!#BK#(g$s:/E ) L>A))DG^-S#3;<eqhfZ\6>!rm4HB_9)*V4`j's''^j+D_NJ:cQV/6?!ml><-<xrQI2]ETPuDzi0z"`.x4*uytG1z.8CRN*hr]l%n)SEW`8\"xI  avgt   50   24.955 ± 0.003  ns/op

Benchmark result is saved to 0_2_matching.csv
