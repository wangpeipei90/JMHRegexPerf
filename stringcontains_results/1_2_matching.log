# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = NC`uHwvs\{\	, str = pB<C)6F*dfM0/S*i:RX'G]]_OV1vf6X=z\w]2*Nds-m6DX8u(kz<1+Mq2+(yyqj+c)'t3NC`uHwvs{	2I!QpE2K$4E"2B>bz?PGVI[L4 j?!q1*6&lS*[Sc$7J<>AgL)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 845.452 ns/op
# Warmup Iteration   2: 786.716 ns/op
# Warmup Iteration   3: 692.861 ns/op
# Warmup Iteration   4: 682.191 ns/op
# Warmup Iteration   5: 680.803 ns/op
# Warmup Iteration   6: 680.541 ns/op
# Warmup Iteration   7: 680.566 ns/op
# Warmup Iteration   8: 680.516 ns/op
# Warmup Iteration   9: 680.032 ns/op
# Warmup Iteration  10: 680.288 ns/op
Iteration   1: 680.303 ns/op
Iteration   2: 680.068 ns/op
Iteration   3: 680.198 ns/op
Iteration   4: 680.449 ns/op
Iteration   5: 684.037 ns/op
Iteration   6: 680.099 ns/op
Iteration   7: 682.457 ns/op
Iteration   8: 682.360 ns/op
Iteration   9: 682.417 ns/op
Iteration  10: 682.177 ns/op
Iteration  11: 682.398 ns/op
Iteration  12: 682.254 ns/op
Iteration  13: 682.282 ns/op
Iteration  14: 682.238 ns/op
Iteration  15: 682.790 ns/op
Iteration  16: 682.362 ns/op
Iteration  17: 682.030 ns/op
Iteration  18: 686.195 ns/op
Iteration  19: 682.385 ns/op
Iteration  20: 683.208 ns/op
Iteration  21: 683.124 ns/op
Iteration  22: 681.943 ns/op
Iteration  23: 681.858 ns/op
Iteration  24: 682.295 ns/op
Iteration  25: 682.510 ns/op
Iteration  26: 682.487 ns/op
Iteration  27: 682.416 ns/op
Iteration  28: 681.946 ns/op
Iteration  29: 682.581 ns/op
Iteration  30: 682.076 ns/op
Iteration  31: 682.243 ns/op
Iteration  32: 682.296 ns/op
Iteration  33: 682.324 ns/op
Iteration  34: 682.486 ns/op
Iteration  35: 682.749 ns/op
Iteration  36: 682.237 ns/op
Iteration  37: 682.217 ns/op
Iteration  38: 682.190 ns/op
Iteration  39: 682.489 ns/op
Iteration  40: 682.171 ns/op
Iteration  41: 682.658 ns/op
Iteration  42: 682.865 ns/op
Iteration  43: 682.960 ns/op
Iteration  44: 684.039 ns/op
Iteration  45: 682.408 ns/op
Iteration  46: 682.515 ns/op
Iteration  47: 682.544 ns/op
Iteration  48: 682.524 ns/op
Iteration  49: 682.811 ns/op
Iteration  50: 683.691 ns/op


Result "benchmark.StringContains.regexMatches":
  682.367 ±(99.9%) 0.494 ns/op [Average]
  (min, avg, max) = (680.068, 682.367, 686.195), stdev = 0.998
  CI (99.9%): [681.873, 682.861] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = NC`uHwvs\{\	, str = pB<C)6F*dfM0/S*i:RX'G]]_OV1vf6X=z\w]2*Nds-m6DX8u(kz<1+Mq2+(yyqj+c)'t3NC`uHwvs{	2I!QpE2K$4E"2B>bz?PGVI[L4 j?!q1*6&lS*[Sc$7J<>AgL)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 23.755 ns/op
# Warmup Iteration   2: 25.006 ns/op
# Warmup Iteration   3: 24.959 ns/op
# Warmup Iteration   4: 24.955 ns/op
# Warmup Iteration   5: 24.953 ns/op
# Warmup Iteration   6: 24.968 ns/op
# Warmup Iteration   7: 24.974 ns/op
# Warmup Iteration   8: 24.969 ns/op
# Warmup Iteration   9: 24.966 ns/op
# Warmup Iteration  10: 25.080 ns/op
Iteration   1: 24.951 ns/op
Iteration   2: 24.952 ns/op
Iteration   3: 24.959 ns/op
Iteration   4: 24.955 ns/op
Iteration   5: 24.958 ns/op
Iteration   6: 24.954 ns/op
Iteration   7: 24.955 ns/op
Iteration   8: 24.951 ns/op
Iteration   9: 24.952 ns/op
Iteration  10: 24.952 ns/op
Iteration  11: 24.951 ns/op
Iteration  12: 24.950 ns/op
Iteration  13: 24.951 ns/op
Iteration  14: 24.954 ns/op
Iteration  15: 24.950 ns/op
Iteration  16: 24.951 ns/op
Iteration  17: 24.955 ns/op
Iteration  18: 24.955 ns/op
Iteration  19: 24.969 ns/op
Iteration  20: 24.977 ns/op
Iteration  21: 25.090 ns/op
Iteration  22: 24.956 ns/op
Iteration  23: 24.953 ns/op
Iteration  24: 24.951 ns/op
Iteration  25: 24.951 ns/op
Iteration  26: 24.951 ns/op
Iteration  27: 24.973 ns/op
Iteration  28: 24.965 ns/op
Iteration  29: 25.090 ns/op
Iteration  30: 24.952 ns/op
Iteration  31: 24.952 ns/op
Iteration  32: 24.956 ns/op
Iteration  33: 24.953 ns/op
Iteration  34: 24.966 ns/op
Iteration  35: 24.954 ns/op
Iteration  36: 24.955 ns/op
Iteration  37: 24.954 ns/op
Iteration  38: 24.952 ns/op
Iteration  39: 24.954 ns/op
Iteration  40: 24.954 ns/op
Iteration  41: 24.957 ns/op
Iteration  42: 24.959 ns/op
Iteration  43: 24.952 ns/op
Iteration  44: 25.252 ns/op
Iteration  45: 24.955 ns/op
Iteration  46: 24.976 ns/op
Iteration  47: 24.959 ns/op
Iteration  48: 24.954 ns/op
Iteration  49: 24.957 ns/op
Iteration  50: 24.955 ns/op


Result "benchmark.StringContains.stringContains":
  24.967 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (24.950, 24.967, 25.252), stdev = 0.049
  CI (99.9%): [24.943, 24.992] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (regex)                                                                                                                            (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    NC`uHwvs\{\	  pB<C)6F*dfM0/S*i:RX'G]]_OV1vf6X=z\w]2*Nds-m6DX8u(kz<1+Mq2+(yyqj+c)'t3NC`uHwvs{	2I!QpE2K$4E"2B>bz?PGVI[L4 j?!q1*6&lS*[Sc$7J<>AgL  avgt   50  682.367 ± 0.494  ns/op
StringContains.stringContains  NC`uHwvs\{\	  pB<C)6F*dfM0/S*i:RX'G]]_OV1vf6X=z\w]2*Nds-m6DX8u(kz<1+Mq2+(yyqj+c)'t3NC`uHwvs{	2I!QpE2K$4E"2B>bz?PGVI[L4 j?!q1*6&lS*[Sc$7J<>AgL  avgt   50   24.967 ± 0.024  ns/op

Benchmark result is saved to 1_2_matching.csv
