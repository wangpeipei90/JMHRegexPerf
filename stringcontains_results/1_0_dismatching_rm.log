# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = NC`uHwvs\{\	, str = )

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 148.860 ns/op
# Warmup Iteration   2: 66.721 ns/op
# Warmup Iteration   3: 64.520 ns/op
# Warmup Iteration   4: 64.990 ns/op
# Warmup Iteration   5: 64.297 ns/op
# Warmup Iteration   6: 64.846 ns/op
# Warmup Iteration   7: 65.884 ns/op
# Warmup Iteration   8: 65.175 ns/op
# Warmup Iteration   9: 66.520 ns/op
# Warmup Iteration  10: 65.946 ns/op
Iteration   1: 66.850 ns/op
Iteration   2: 66.266 ns/op
Iteration   3: 65.714 ns/op
Iteration   4: 65.694 ns/op
Iteration   5: 66.401 ns/op
Iteration   6: 65.712 ns/op
Iteration   7: 65.084 ns/op
Iteration   8: 64.512 ns/op
Iteration   9: 65.009 ns/op
Iteration  10: 65.139 ns/op
Iteration  11: 65.210 ns/op
Iteration  12: 64.825 ns/op
Iteration  13: 65.110 ns/op
Iteration  14: 64.538 ns/op
Iteration  15: 64.421 ns/op
Iteration  16: 64.821 ns/op
Iteration  17: 64.642 ns/op
Iteration  18: 64.906 ns/op
Iteration  19: 64.754 ns/op
Iteration  20: 64.577 ns/op
Iteration  21: 64.710 ns/op
Iteration  22: 64.723 ns/op
Iteration  23: 64.738 ns/op
Iteration  24: 64.363 ns/op
Iteration  25: 64.728 ns/op
Iteration  26: 64.762 ns/op
Iteration  27: 64.216 ns/op
Iteration  28: 64.564 ns/op
Iteration  29: 64.539 ns/op
Iteration  30: 64.622 ns/op
Iteration  31: 64.931 ns/op
Iteration  32: 64.750 ns/op
Iteration  33: 64.574 ns/op
Iteration  34: 64.436 ns/op
Iteration  35: 64.702 ns/op
Iteration  36: 64.683 ns/op
Iteration  37: 64.813 ns/op
Iteration  38: 64.511 ns/op
Iteration  39: 64.390 ns/op
Iteration  40: 64.294 ns/op
Iteration  41: 64.491 ns/op
Iteration  42: 64.648 ns/op
Iteration  43: 64.649 ns/op
Iteration  44: 64.511 ns/op
Iteration  45: 64.818 ns/op
Iteration  46: 64.580 ns/op
Iteration  47: 64.613 ns/op
Iteration  48: 64.788 ns/op
Iteration  49: 64.984 ns/op
Iteration  50: 64.496 ns/op


Result "benchmark.StringContains.regexMatches":
  64.856 ±(99.9%) 0.265 ns/op [Average]
  (min, avg, max) = (64.216, 64.856, 66.850), stdev = 0.534
  CI (99.9%): [64.592, 65.121] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = NC`uHwvs\{\	, str = )

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.892 ns/op
# Warmup Iteration   2: 4.860 ns/op
# Warmup Iteration   3: 5.010 ns/op
# Warmup Iteration   4: 5.009 ns/op
# Warmup Iteration   5: 5.010 ns/op
# Warmup Iteration   6: 5.011 ns/op
# Warmup Iteration   7: 4.937 ns/op
# Warmup Iteration   8: 4.937 ns/op
# Warmup Iteration   9: 4.937 ns/op
# Warmup Iteration  10: 4.937 ns/op
Iteration   1: 4.937 ns/op
Iteration   2: 4.937 ns/op
Iteration   3: 4.937 ns/op
Iteration   4: 4.937 ns/op
Iteration   5: 4.937 ns/op
Iteration   6: 4.938 ns/op
Iteration   7: 4.937 ns/op
Iteration   8: 4.938 ns/op
Iteration   9: 4.937 ns/op
Iteration  10: 4.937 ns/op
Iteration  11: 4.937 ns/op
Iteration  12: 4.938 ns/op
Iteration  13: 4.937 ns/op
Iteration  14: 4.937 ns/op
Iteration  15: 4.937 ns/op
Iteration  16: 4.937 ns/op
Iteration  17: 4.943 ns/op
Iteration  18: 4.937 ns/op
Iteration  19: 4.946 ns/op
Iteration  20: 4.939 ns/op
Iteration  21: 4.938 ns/op
Iteration  22: 4.937 ns/op
Iteration  23: 4.938 ns/op
Iteration  24: 4.937 ns/op
Iteration  25: 4.937 ns/op
Iteration  26: 4.939 ns/op
Iteration  27: 4.937 ns/op
Iteration  28: 4.939 ns/op
Iteration  29: 4.943 ns/op
Iteration  30: 4.943 ns/op
Iteration  31: 4.941 ns/op
Iteration  32: 4.941 ns/op
Iteration  33: 4.939 ns/op
Iteration  34: 4.942 ns/op
Iteration  35: 4.942 ns/op
Iteration  36: 4.942 ns/op
Iteration  37: 4.938 ns/op
Iteration  38: 4.937 ns/op
Iteration  39: 4.938 ns/op
Iteration  40: 4.937 ns/op
Iteration  41: 4.938 ns/op
Iteration  42: 4.939 ns/op
Iteration  43: 4.937 ns/op
Iteration  44: 4.937 ns/op
Iteration  45: 4.938 ns/op
Iteration  46: 4.937 ns/op
Iteration  47: 4.937 ns/op
Iteration  48: 4.937 ns/op
Iteration  49: 4.937 ns/op
Iteration  50: 4.937 ns/op


Result "benchmark.StringContains.stringContains":
  4.938 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (4.937, 4.938, 4.946), stdev = 0.002
  CI (99.9%): [4.937, 4.939] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (regex)  (str)  Mode  Cnt   Score   Error  Units
StringContains.regexMatches    NC`uHwvs\{\	         avgt   50  64.856 ± 0.265  ns/op
StringContains.stringContains  NC`uHwvs\{\	         avgt   50   4.938 ± 0.001  ns/op

Benchmark result is saved to 1_0_dismatching_rm.csv
