# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/v:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 978.533 ns/op
# Warmup Iteration   2: 921.883 ns/op
# Warmup Iteration   3: 882.380 ns/op
# Warmup Iteration   4: 878.726 ns/op
# Warmup Iteration   5: 882.078 ns/op
# Warmup Iteration   6: 881.332 ns/op
# Warmup Iteration   7: 881.049 ns/op
# Warmup Iteration   8: 882.095 ns/op
# Warmup Iteration   9: 880.785 ns/op
# Warmup Iteration  10: 883.153 ns/op
Iteration   1: 880.940 ns/op
Iteration   2: 880.530 ns/op
Iteration   3: 879.699 ns/op
Iteration   4: 878.933 ns/op
Iteration   5: 878.694 ns/op
Iteration   6: 878.597 ns/op
Iteration   7: 878.612 ns/op
Iteration   8: 878.829 ns/op
Iteration   9: 878.525 ns/op
Iteration  10: 878.591 ns/op
Iteration  11: 878.367 ns/op
Iteration  12: 878.941 ns/op
Iteration  13: 878.209 ns/op
Iteration  14: 878.341 ns/op
Iteration  15: 878.305 ns/op
Iteration  16: 878.843 ns/op
Iteration  17: 879.457 ns/op
Iteration  18: 878.298 ns/op
Iteration  19: 878.731 ns/op
Iteration  20: 878.536 ns/op
Iteration  21: 878.681 ns/op
Iteration  22: 878.496 ns/op
Iteration  23: 878.483 ns/op
Iteration  24: 878.352 ns/op
Iteration  25: 878.606 ns/op
Iteration  26: 878.591 ns/op
Iteration  27: 878.474 ns/op
Iteration  28: 878.487 ns/op
Iteration  29: 878.766 ns/op
Iteration  30: 878.499 ns/op
Iteration  31: 878.372 ns/op
Iteration  32: 878.000 ns/op
Iteration  33: 877.709 ns/op
Iteration  34: 877.978 ns/op
Iteration  35: 878.057 ns/op
Iteration  36: 877.796 ns/op
Iteration  37: 877.804 ns/op
Iteration  38: 877.932 ns/op
Iteration  39: 878.162 ns/op
Iteration  40: 877.969 ns/op
Iteration  41: 877.945 ns/op
Iteration  42: 878.071 ns/op
Iteration  43: 878.073 ns/op
Iteration  44: 878.430 ns/op
Iteration  45: 878.498 ns/op
Iteration  46: 878.086 ns/op
Iteration  47: 877.992 ns/op
Iteration  48: 878.094 ns/op
Iteration  49: 878.098 ns/op
Iteration  50: 878.577 ns/op


Result "benchmark.StringContains.regexMatches":
  878.501 ±(99.9%) 0.300 ns/op [Average]
  (min, avg, max) = (877.709, 878.501, 880.940), stdev = 0.606
  CI (99.9%): [878.201, 878.801] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/v:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 10.034 ns/op
# Warmup Iteration   2: 10.850 ns/op
# Warmup Iteration   3: 9.978 ns/op
# Warmup Iteration   4: 9.943 ns/op
# Warmup Iteration   5: 9.949 ns/op
# Warmup Iteration   6: 9.947 ns/op
# Warmup Iteration   7: 9.934 ns/op
# Warmup Iteration   8: 9.947 ns/op
# Warmup Iteration   9: 9.956 ns/op
# Warmup Iteration  10: 9.926 ns/op
Iteration   1: 9.946 ns/op
Iteration   2: 9.961 ns/op
Iteration   3: 9.955 ns/op
Iteration   4: 9.941 ns/op
Iteration   5: 9.940 ns/op
Iteration   6: 9.951 ns/op
Iteration   7: 9.956 ns/op
Iteration   8: 9.946 ns/op
Iteration   9: 9.941 ns/op
Iteration  10: 9.939 ns/op
Iteration  11: 9.947 ns/op
Iteration  12: 9.956 ns/op
Iteration  13: 9.953 ns/op
Iteration  14: 9.966 ns/op
Iteration  15: 9.954 ns/op
Iteration  16: 9.935 ns/op
Iteration  17: 9.950 ns/op
Iteration  18: 9.938 ns/op
Iteration  19: 9.978 ns/op
Iteration  20: 9.910 ns/op
Iteration  21: 9.939 ns/op
Iteration  22: 9.945 ns/op
Iteration  23: 9.936 ns/op
Iteration  24: 9.961 ns/op
Iteration  25: 9.947 ns/op
Iteration  26: 9.946 ns/op
Iteration  27: 9.937 ns/op
Iteration  28: 9.939 ns/op
Iteration  29: 9.934 ns/op
Iteration  30: 9.951 ns/op
Iteration  31: 9.960 ns/op
Iteration  32: 9.926 ns/op
Iteration  33: 9.951 ns/op
Iteration  34: 9.947 ns/op
Iteration  35: 9.939 ns/op
Iteration  36: 9.918 ns/op
Iteration  37: 9.943 ns/op
Iteration  38: 9.941 ns/op
Iteration  39: 9.952 ns/op
Iteration  40: 9.924 ns/op
Iteration  41: 9.926 ns/op
Iteration  42: 9.938 ns/op
Iteration  43: 9.922 ns/op
Iteration  44: 9.945 ns/op
Iteration  45: 9.943 ns/op
Iteration  46: 9.920 ns/op
Iteration  47: 9.943 ns/op
Iteration  48: 9.936 ns/op
Iteration  49: 9.941 ns/op
Iteration  50: 9.949 ns/op


Result "benchmark.StringContains.stringContains":
  9.943 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (9.910, 9.943, 9.978), stdev = 0.013
  CI (99.9%): [9.937, 9.950] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                               (regex)                                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/v:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k  avgt   50  878.501 ± 0.300  ns/op
StringContains.stringContains  1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!I1vGT/v:M(@a'xj&eKM?O8H"MMdTi^	P/uj9q1~Lu\`7+-y5NDm]d/
eAEk#4vK^yaI yqTQ
.EeANWfR-^~9Bd+U,Y~z}+ H NQ,&\mF2% XJ$k  avgt   50    9.943 ± 0.006  ns/op

Benchmark result is saved to 3_2_dismatching_edit.csv
