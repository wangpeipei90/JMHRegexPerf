# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = NC`uHwvs\{\	, str = kNNC`uHwvs{	AX$Q5ZG*D)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 433.945 ns/op
# Warmup Iteration   2: 368.498 ns/op
# Warmup Iteration   3: 332.036 ns/op
# Warmup Iteration   4: 324.788 ns/op
# Warmup Iteration   5: 323.091 ns/op
# Warmup Iteration   6: 322.835 ns/op
# Warmup Iteration   7: 322.936 ns/op
# Warmup Iteration   8: 322.753 ns/op
# Warmup Iteration   9: 322.598 ns/op
# Warmup Iteration  10: 323.029 ns/op
Iteration   1: 322.973 ns/op
Iteration   2: 322.896 ns/op
Iteration   3: 323.046 ns/op
Iteration   4: 322.470 ns/op
Iteration   5: 324.214 ns/op
Iteration   6: 322.621 ns/op
Iteration   7: 322.983 ns/op
Iteration   8: 322.702 ns/op
Iteration   9: 324.731 ns/op
Iteration  10: 325.241 ns/op
Iteration  11: 324.480 ns/op
Iteration  12: 324.999 ns/op
Iteration  13: 326.870 ns/op
Iteration  14: 326.662 ns/op
Iteration  15: 326.323 ns/op
Iteration  16: 325.246 ns/op
Iteration  17: 324.648 ns/op
Iteration  18: 324.810 ns/op
Iteration  19: 323.849 ns/op
Iteration  20: 323.165 ns/op
Iteration  21: 323.222 ns/op
Iteration  22: 322.993 ns/op
Iteration  23: 322.960 ns/op
Iteration  24: 322.874 ns/op
Iteration  25: 323.065 ns/op
Iteration  26: 322.920 ns/op
Iteration  27: 323.110 ns/op
Iteration  28: 322.893 ns/op
Iteration  29: 322.895 ns/op
Iteration  30: 322.966 ns/op
Iteration  31: 322.883 ns/op
Iteration  32: 322.666 ns/op
Iteration  33: 323.146 ns/op
Iteration  34: 323.083 ns/op
Iteration  35: 322.740 ns/op
Iteration  36: 322.929 ns/op
Iteration  37: 322.513 ns/op
Iteration  38: 322.704 ns/op
Iteration  39: 322.628 ns/op
Iteration  40: 323.212 ns/op
Iteration  41: 322.733 ns/op
Iteration  42: 322.942 ns/op
Iteration  43: 322.893 ns/op
Iteration  44: 322.889 ns/op
Iteration  45: 322.850 ns/op
Iteration  46: 322.710 ns/op
Iteration  47: 323.078 ns/op
Iteration  48: 323.116 ns/op
Iteration  49: 322.964 ns/op
Iteration  50: 322.575 ns/op


Result "benchmark.StringContains.regexMatches":
  323.442 ±(99.9%) 0.543 ns/op [Average]
  (min, avg, max) = (322.470, 323.442, 326.870), stdev = 1.097
  CI (99.9%): [322.899, 323.984] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = NC`uHwvs\{\	, str = kNNC`uHwvs{	AX$Q5ZG*D)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 9.230 ns/op
# Warmup Iteration   2: 9.358 ns/op
# Warmup Iteration   3: 9.326 ns/op
# Warmup Iteration   4: 9.330 ns/op
# Warmup Iteration   5: 9.321 ns/op
# Warmup Iteration   6: 9.348 ns/op
# Warmup Iteration   7: 9.310 ns/op
# Warmup Iteration   8: 9.310 ns/op
# Warmup Iteration   9: 9.310 ns/op
# Warmup Iteration  10: 9.310 ns/op
Iteration   1: 9.310 ns/op
Iteration   2: 9.312 ns/op
Iteration   3: 9.311 ns/op
Iteration   4: 9.311 ns/op
Iteration   5: 9.311 ns/op
Iteration   6: 9.312 ns/op
Iteration   7: 9.375 ns/op
Iteration   8: 9.378 ns/op
Iteration   9: 9.378 ns/op
Iteration  10: 9.379 ns/op
Iteration  11: 9.379 ns/op
Iteration  12: 9.382 ns/op
Iteration  13: 9.376 ns/op
Iteration  14: 9.376 ns/op
Iteration  15: 9.393 ns/op
Iteration  16: 9.372 ns/op
Iteration  17: 9.373 ns/op
Iteration  18: 9.379 ns/op
Iteration  19: 9.375 ns/op
Iteration  20: 9.375 ns/op
Iteration  21: 9.382 ns/op
Iteration  22: 9.389 ns/op
Iteration  23: 9.378 ns/op
Iteration  24: 9.378 ns/op
Iteration  25: 9.379 ns/op
Iteration  26: 9.370 ns/op
Iteration  27: 9.388 ns/op
Iteration  28: 9.377 ns/op
Iteration  29: 9.379 ns/op
Iteration  30: 9.381 ns/op
Iteration  31: 9.365 ns/op
Iteration  32: 9.382 ns/op
Iteration  33: 9.379 ns/op
Iteration  34: 9.377 ns/op
Iteration  35: 9.378 ns/op
Iteration  36: 9.372 ns/op
Iteration  37: 9.372 ns/op
Iteration  38: 9.383 ns/op
Iteration  39: 9.381 ns/op
Iteration  40: 9.378 ns/op
Iteration  41: 9.372 ns/op
Iteration  42: 9.368 ns/op
Iteration  43: 9.390 ns/op
Iteration  44: 9.380 ns/op
Iteration  45: 9.375 ns/op
Iteration  46: 9.379 ns/op
Iteration  47: 9.375 ns/op
Iteration  48: 9.373 ns/op
Iteration  49: 9.378 ns/op
Iteration  50: 9.379 ns/op


Result "benchmark.StringContains.stringContains":
  9.370 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (9.310, 9.370, 9.393), stdev = 0.023
  CI (99.9%): [9.359, 9.381] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           (regex)                  (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    NC`uHwvs\{\	  kNNC`uHwvs{	AX$Q5ZG*D  avgt   50  323.442 ± 0.543  ns/op
StringContains.stringContains  NC`uHwvs\{\	  kNNC`uHwvs{	AX$Q5ZG*D  avgt   50    9.370 ± 0.011  ns/op

Benchmark result is saved to 1_1_matching.csv
