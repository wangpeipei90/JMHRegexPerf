# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = Kon+D_NJ)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 233.159 ns/op
# Warmup Iteration   2: 171.113 ns/op
# Warmup Iteration   3: 149.178 ns/op
# Warmup Iteration   4: 141.055 ns/op
# Warmup Iteration   5: 141.669 ns/op
# Warmup Iteration   6: 141.509 ns/op
# Warmup Iteration   7: 139.928 ns/op
# Warmup Iteration   8: 138.635 ns/op
# Warmup Iteration   9: 138.987 ns/op
# Warmup Iteration  10: 138.123 ns/op
Iteration   1: 138.301 ns/op
Iteration   2: 138.023 ns/op
Iteration   3: 138.048 ns/op
Iteration   4: 137.980 ns/op
Iteration   5: 138.302 ns/op
Iteration   6: 138.442 ns/op
Iteration   7: 137.973 ns/op
Iteration   8: 138.273 ns/op
Iteration   9: 138.321 ns/op
Iteration  10: 138.099 ns/op
Iteration  11: 138.000 ns/op
Iteration  12: 138.020 ns/op
Iteration  13: 138.201 ns/op
Iteration  14: 137.992 ns/op
Iteration  15: 138.007 ns/op
Iteration  16: 137.939 ns/op
Iteration  17: 138.020 ns/op
Iteration  18: 138.032 ns/op
Iteration  19: 138.166 ns/op
Iteration  20: 138.366 ns/op
Iteration  21: 137.977 ns/op
Iteration  22: 138.163 ns/op
Iteration  23: 137.974 ns/op
Iteration  24: 139.329 ns/op
Iteration  25: 138.011 ns/op
Iteration  26: 138.426 ns/op
Iteration  27: 138.053 ns/op
Iteration  28: 138.091 ns/op
Iteration  29: 138.113 ns/op
Iteration  30: 138.993 ns/op
Iteration  31: 137.946 ns/op
Iteration  32: 138.030 ns/op
Iteration  33: 137.903 ns/op
Iteration  34: 137.976 ns/op
Iteration  35: 137.962 ns/op
Iteration  36: 138.078 ns/op
Iteration  37: 137.957 ns/op
Iteration  38: 137.924 ns/op
Iteration  39: 137.984 ns/op
Iteration  40: 137.987 ns/op
Iteration  41: 138.025 ns/op
Iteration  42: 138.184 ns/op
Iteration  43: 138.116 ns/op
Iteration  44: 138.030 ns/op
Iteration  45: 138.035 ns/op
Iteration  46: 138.113 ns/op
Iteration  47: 137.985 ns/op
Iteration  48: 138.000 ns/op
Iteration  49: 137.965 ns/op
Iteration  50: 137.948 ns/op


Result "benchmark.StringContains.regexMatches":
  138.116 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (137.903, 138.116, 139.329), stdev = 0.255
  CI (99.9%): [137.989, 138.242] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = Kon+D_NJ)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 9.458 ns/op
# Warmup Iteration   2: 8.995 ns/op
# Warmup Iteration   3: 8.984 ns/op
# Warmup Iteration   4: 8.986 ns/op
# Warmup Iteration   5: 8.984 ns/op
# Warmup Iteration   6: 8.981 ns/op
# Warmup Iteration   7: 8.986 ns/op
# Warmup Iteration   8: 8.992 ns/op
# Warmup Iteration   9: 8.987 ns/op
# Warmup Iteration  10: 8.989 ns/op
Iteration   1: 8.990 ns/op
Iteration   2: 9.025 ns/op
Iteration   3: 9.024 ns/op
Iteration   4: 9.022 ns/op
Iteration   5: 9.022 ns/op
Iteration   6: 9.045 ns/op
Iteration   7: 9.033 ns/op
Iteration   8: 9.039 ns/op
Iteration   9: 9.039 ns/op
Iteration  10: 9.037 ns/op
Iteration  11: 9.020 ns/op
Iteration  12: 9.021 ns/op
Iteration  13: 9.025 ns/op
Iteration  14: 9.019 ns/op
Iteration  15: 9.020 ns/op
Iteration  16: 9.022 ns/op
Iteration  17: 9.022 ns/op
Iteration  18: 9.022 ns/op
Iteration  19: 8.997 ns/op
Iteration  20: 8.984 ns/op
Iteration  21: 8.992 ns/op
Iteration  22: 9.000 ns/op
Iteration  23: 8.999 ns/op
Iteration  24: 9.016 ns/op
Iteration  25: 9.004 ns/op
Iteration  26: 9.000 ns/op
Iteration  27: 8.984 ns/op
Iteration  28: 8.982 ns/op
Iteration  29: 8.983 ns/op
Iteration  30: 8.982 ns/op
Iteration  31: 8.985 ns/op
Iteration  32: 8.983 ns/op
Iteration  33: 8.982 ns/op
Iteration  34: 8.991 ns/op
Iteration  35: 8.985 ns/op
Iteration  36: 8.989 ns/op
Iteration  37: 8.993 ns/op
Iteration  38: 8.989 ns/op
Iteration  39: 8.992 ns/op
Iteration  40: 8.990 ns/op
Iteration  41: 8.991 ns/op
Iteration  42: 9.000 ns/op
Iteration  43: 8.992 ns/op
Iteration  44: 8.990 ns/op
Iteration  45: 8.989 ns/op
Iteration  46: 8.991 ns/op
Iteration  47: 8.985 ns/op
Iteration  48: 8.985 ns/op
Iteration  49: 8.988 ns/op
Iteration  50: 8.984 ns/op


Result "benchmark.StringContains.stringContains":
  9.003 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (8.982, 9.003, 9.045), stdev = 0.019
  CI (99.9%): [8.993, 9.012] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches     \+D_NJ  Kon+D_NJ  avgt   50  138.116 ± 0.126  ns/op
StringContains.stringContains   \+D_NJ  Kon+D_NJ  avgt   50    9.003 ± 0.009  ns/op

Benchmark result is saved to 0_1_matching.csv
