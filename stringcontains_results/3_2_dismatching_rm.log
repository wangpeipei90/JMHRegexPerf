# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!IQ,&\mF2% XJ$k)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 390.677 ns/op
# Warmup Iteration   2: 324.866 ns/op
# Warmup Iteration   3: 297.707 ns/op
# Warmup Iteration   4: 291.522 ns/op
# Warmup Iteration   5: 289.809 ns/op
# Warmup Iteration   6: 289.377 ns/op
# Warmup Iteration   7: 289.153 ns/op
# Warmup Iteration   8: 289.034 ns/op
# Warmup Iteration   9: 289.998 ns/op
# Warmup Iteration  10: 289.383 ns/op
Iteration   1: 289.671 ns/op
Iteration   2: 289.425 ns/op
Iteration   3: 290.017 ns/op
Iteration   4: 289.400 ns/op
Iteration   5: 289.414 ns/op
Iteration   6: 289.648 ns/op
Iteration   7: 292.526 ns/op
Iteration   8: 291.695 ns/op
Iteration   9: 293.494 ns/op
Iteration  10: 291.133 ns/op
Iteration  11: 291.294 ns/op
Iteration  12: 291.845 ns/op
Iteration  13: 291.099 ns/op
Iteration  14: 291.769 ns/op
Iteration  15: 291.385 ns/op
Iteration  16: 291.083 ns/op
Iteration  17: 291.195 ns/op
Iteration  18: 291.062 ns/op
Iteration  19: 291.144 ns/op
Iteration  20: 291.271 ns/op
Iteration  21: 291.074 ns/op
Iteration  22: 291.291 ns/op
Iteration  23: 291.344 ns/op
Iteration  24: 291.177 ns/op
Iteration  25: 291.133 ns/op
Iteration  26: 291.192 ns/op
Iteration  27: 291.176 ns/op
Iteration  28: 291.167 ns/op
Iteration  29: 291.151 ns/op
Iteration  30: 292.221 ns/op
Iteration  31: 293.419 ns/op
Iteration  32: 292.448 ns/op
Iteration  33: 292.969 ns/op
Iteration  34: 293.459 ns/op
Iteration  35: 294.270 ns/op
Iteration  36: 294.397 ns/op
Iteration  37: 293.477 ns/op
Iteration  38: 293.028 ns/op
Iteration  39: 293.098 ns/op
Iteration  40: 293.044 ns/op
Iteration  41: 294.353 ns/op
Iteration  42: 291.284 ns/op
Iteration  43: 291.948 ns/op
Iteration  44: 291.534 ns/op
Iteration  45: 291.129 ns/op
Iteration  46: 291.374 ns/op
Iteration  47: 291.100 ns/op
Iteration  48: 291.286 ns/op
Iteration  49: 291.156 ns/op
Iteration  50: 291.560 ns/op


Result "benchmark.StringContains.regexMatches":
  291.657 ±(99.9%) 0.613 ns/op [Average]
  (min, avg, max) = (289.400, 291.657, 294.397), stdev = 1.239
  CI (99.9%): [291.043, 292.270] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str = S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!IQ,&\mF2% XJ$k)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.912 ns/op
# Warmup Iteration   2: 4.868 ns/op
# Warmup Iteration   3: 4.946 ns/op
# Warmup Iteration   4: 4.947 ns/op
# Warmup Iteration   5: 4.938 ns/op
# Warmup Iteration   6: 4.942 ns/op
# Warmup Iteration   7: 4.951 ns/op
# Warmup Iteration   8: 4.940 ns/op
# Warmup Iteration   9: 4.938 ns/op
# Warmup Iteration  10: 4.937 ns/op
Iteration   1: 4.938 ns/op
Iteration   2: 4.939 ns/op
Iteration   3: 4.939 ns/op
Iteration   4: 4.939 ns/op
Iteration   5: 4.939 ns/op
Iteration   6: 4.939 ns/op
Iteration   7: 5.318 ns/op
Iteration   8: 5.318 ns/op
Iteration   9: 5.317 ns/op
Iteration  10: 5.317 ns/op
Iteration  11: 5.317 ns/op
Iteration  12: 5.320 ns/op
Iteration  13: 5.317 ns/op
Iteration  14: 5.317 ns/op
Iteration  15: 5.320 ns/op
Iteration  16: 5.316 ns/op
Iteration  17: 5.315 ns/op
Iteration  18: 5.316 ns/op
Iteration  19: 5.316 ns/op
Iteration  20: 5.315 ns/op
Iteration  21: 5.316 ns/op
Iteration  22: 5.318 ns/op
Iteration  23: 5.318 ns/op
Iteration  24: 5.318 ns/op
Iteration  25: 5.316 ns/op
Iteration  26: 5.316 ns/op
Iteration  27: 5.317 ns/op
Iteration  28: 5.316 ns/op
Iteration  29: 5.316 ns/op
Iteration  30: 5.316 ns/op
Iteration  31: 5.317 ns/op
Iteration  32: 5.316 ns/op
Iteration  33: 5.316 ns/op
Iteration  34: 5.315 ns/op
Iteration  35: 5.316 ns/op
Iteration  36: 5.316 ns/op
Iteration  37: 5.317 ns/op
Iteration  38: 5.317 ns/op
Iteration  39: 5.317 ns/op
Iteration  40: 5.318 ns/op
Iteration  41: 5.322 ns/op
Iteration  42: 5.317 ns/op
Iteration  43: 5.317 ns/op
Iteration  44: 5.317 ns/op
Iteration  45: 5.317 ns/op
Iteration  46: 5.316 ns/op
Iteration  47: 5.316 ns/op
Iteration  48: 5.316 ns/op
Iteration  49: 5.316 ns/op
Iteration  50: 5.316 ns/op


Result "benchmark.StringContains.stringContains":
  5.271 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (4.938, 5.271, 5.322), stdev = 0.124
  CI (99.9%): [5.210, 5.333] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                               (regex)                                         (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!IQ,&\mF2% XJ$k  avgt   50  291.657 ± 0.613  ns/op
StringContains.stringContains  1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N  S,D)J#PFjJ1p?#VQ_vhoOMg8@Vznv!IQ,&\mF2% XJ$k  avgt   50    5.271 ± 0.061  ns/op

Benchmark result is saved to 3_2_dismatching_rm.csv
