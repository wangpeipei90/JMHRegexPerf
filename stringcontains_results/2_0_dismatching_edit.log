# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = tR+Y&AH*MQd02,ZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 475.693 ns/op
# Warmup Iteration   2: 421.276 ns/op
# Warmup Iteration   3: 393.670 ns/op
# Warmup Iteration   4: 388.701 ns/op
# Warmup Iteration   5: 387.736 ns/op
# Warmup Iteration   6: 387.488 ns/op
# Warmup Iteration   7: 387.594 ns/op
# Warmup Iteration   8: 387.588 ns/op
# Warmup Iteration   9: 387.589 ns/op
# Warmup Iteration  10: 387.593 ns/op
Iteration   1: 387.529 ns/op
Iteration   2: 387.537 ns/op
Iteration   3: 387.957 ns/op
Iteration   4: 387.802 ns/op
Iteration   5: 387.656 ns/op
Iteration   6: 387.829 ns/op
Iteration   7: 387.606 ns/op
Iteration   8: 387.623 ns/op
Iteration   9: 387.865 ns/op
Iteration  10: 387.524 ns/op
Iteration  11: 387.655 ns/op
Iteration  12: 387.676 ns/op
Iteration  13: 387.889 ns/op
Iteration  14: 387.834 ns/op
Iteration  15: 387.527 ns/op
Iteration  16: 387.521 ns/op
Iteration  17: 387.504 ns/op
Iteration  18: 387.603 ns/op
Iteration  19: 387.522 ns/op
Iteration  20: 387.620 ns/op
Iteration  21: 387.567 ns/op
Iteration  22: 387.460 ns/op
Iteration  23: 387.557 ns/op
Iteration  24: 387.796 ns/op
Iteration  25: 387.550 ns/op
Iteration  26: 387.597 ns/op
Iteration  27: 387.575 ns/op
Iteration  28: 387.658 ns/op
Iteration  29: 387.629 ns/op
Iteration  30: 387.498 ns/op
Iteration  31: 387.554 ns/op
Iteration  32: 387.524 ns/op
Iteration  33: 390.162 ns/op
Iteration  34: 390.900 ns/op
Iteration  35: 390.346 ns/op
Iteration  36: 389.606 ns/op
Iteration  37: 389.513 ns/op
Iteration  38: 391.104 ns/op
Iteration  39: 390.841 ns/op
Iteration  40: 390.755 ns/op
Iteration  41: 388.732 ns/op
Iteration  42: 388.534 ns/op
Iteration  43: 388.480 ns/op
Iteration  44: 387.765 ns/op
Iteration  45: 387.775 ns/op
Iteration  46: 387.753 ns/op
Iteration  47: 388.074 ns/op
Iteration  48: 387.677 ns/op
Iteration  49: 387.492 ns/op
Iteration  50: 387.490 ns/op


Result "benchmark.StringContains.regexMatches":
  388.145 ±(99.9%) 0.522 ns/op [Average]
  (min, avg, max) = (387.460, 388.145, 391.104), stdev = 1.054
  CI (99.9%): [387.623, 388.666] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7, str = tR+Y&AH*MQd02,ZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.951 ns/op
# Warmup Iteration   2: 4.862 ns/op
# Warmup Iteration   3: 4.942 ns/op
# Warmup Iteration   4: 4.940 ns/op
# Warmup Iteration   5: 4.947 ns/op
# Warmup Iteration   6: 4.951 ns/op
# Warmup Iteration   7: 4.940 ns/op
# Warmup Iteration   8: 4.939 ns/op
# Warmup Iteration   9: 4.940 ns/op
# Warmup Iteration  10: 4.940 ns/op
Iteration   1: 4.942 ns/op
Iteration   2: 4.940 ns/op
Iteration   3: 4.940 ns/op
Iteration   4: 4.940 ns/op
Iteration   5: 4.942 ns/op
Iteration   6: 4.942 ns/op
Iteration   7: 5.261 ns/op
Iteration   8: 5.262 ns/op
Iteration   9: 5.261 ns/op
Iteration  10: 5.261 ns/op
Iteration  11: 5.261 ns/op
Iteration  12: 5.261 ns/op
Iteration  13: 5.264 ns/op
Iteration  14: 5.263 ns/op
Iteration  15: 5.260 ns/op
Iteration  16: 5.261 ns/op
Iteration  17: 5.264 ns/op
Iteration  18: 5.266 ns/op
Iteration  19: 5.261 ns/op
Iteration  20: 5.264 ns/op
Iteration  21: 5.260 ns/op
Iteration  22: 5.261 ns/op
Iteration  23: 5.265 ns/op
Iteration  24: 5.263 ns/op
Iteration  25: 5.261 ns/op
Iteration  26: 5.261 ns/op
Iteration  27: 5.261 ns/op
Iteration  28: 5.265 ns/op
Iteration  29: 5.260 ns/op
Iteration  30: 5.261 ns/op
Iteration  31: 5.260 ns/op
Iteration  32: 5.259 ns/op
Iteration  33: 5.261 ns/op
Iteration  34: 5.261 ns/op
Iteration  35: 5.260 ns/op
Iteration  36: 5.261 ns/op
Iteration  37: 5.261 ns/op
Iteration  38: 5.261 ns/op
Iteration  39: 5.259 ns/op
Iteration  40: 5.260 ns/op
Iteration  41: 5.259 ns/op
Iteration  42: 5.260 ns/op
Iteration  43: 5.258 ns/op
Iteration  44: 5.260 ns/op
Iteration  45: 5.259 ns/op
Iteration  46: 5.258 ns/op
Iteration  47: 5.259 ns/op
Iteration  48: 5.258 ns/op
Iteration  49: 5.259 ns/op
Iteration  50: 5.257 ns/op


Result "benchmark.StringContains.stringContains":
  5.222 ±(99.9%) 0.052 ns/op [Average]
  (min, avg, max) = (4.940, 5.222, 5.266), stdev = 0.105
  CI (99.9%): [5.170, 5.274] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           (regex)                                               (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches    tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  tR+Y&AH*MQd02,ZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7  avgt   50  388.145 ± 0.522  ns/op
StringContains.stringContains  tR\+Y\&AH\*MQd02XZtGSQWS\~@,%LSL\!\(\?lP>6Q\#JMerIPB\.Qz\(7  tR+Y&AH*MQd02,ZtGSQWS~@,%LSL!(?lP>6Q#JMerIPB.Qz(7  avgt   50    5.222 ± 0.052  ns/op

Benchmark result is saved to 2_0_dismatching_edit.csv
