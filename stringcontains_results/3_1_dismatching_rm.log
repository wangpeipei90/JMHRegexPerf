# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str =  'MZRR)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 191.152 ns/op
# Warmup Iteration   2: 113.355 ns/op
# Warmup Iteration   3: 91.735 ns/op
# Warmup Iteration   4: 91.939 ns/op
# Warmup Iteration   5: 91.612 ns/op
# Warmup Iteration   6: 91.434 ns/op
# Warmup Iteration   7: 91.476 ns/op
# Warmup Iteration   8: 91.528 ns/op
# Warmup Iteration   9: 91.737 ns/op
# Warmup Iteration  10: 91.506 ns/op
Iteration   1: 91.545 ns/op
Iteration   2: 91.492 ns/op
Iteration   3: 91.585 ns/op
Iteration   4: 91.827 ns/op
Iteration   5: 91.427 ns/op
Iteration   6: 91.439 ns/op
Iteration   7: 91.506 ns/op
Iteration   8: 91.566 ns/op
Iteration   9: 91.537 ns/op
Iteration  10: 91.478 ns/op
Iteration  11: 91.496 ns/op
Iteration  12: 91.473 ns/op
Iteration  13: 91.454 ns/op
Iteration  14: 91.537 ns/op
Iteration  15: 91.478 ns/op
Iteration  16: 91.501 ns/op
Iteration  17: 91.511 ns/op
Iteration  18: 91.478 ns/op
Iteration  19: 91.912 ns/op
Iteration  20: 91.523 ns/op
Iteration  21: 91.478 ns/op
Iteration  22: 91.481 ns/op
Iteration  23: 91.491 ns/op
Iteration  24: 91.557 ns/op
Iteration  25: 91.492 ns/op
Iteration  26: 91.501 ns/op
Iteration  27: 91.510 ns/op
Iteration  28: 91.491 ns/op
Iteration  29: 91.492 ns/op
Iteration  30: 91.663 ns/op
Iteration  31: 91.648 ns/op
Iteration  32: 91.496 ns/op
Iteration  33: 91.471 ns/op
Iteration  34: 91.473 ns/op
Iteration  35: 91.468 ns/op
Iteration  36: 91.486 ns/op
Iteration  37: 91.461 ns/op
Iteration  38: 91.671 ns/op
Iteration  39: 91.517 ns/op
Iteration  40: 91.469 ns/op
Iteration  41: 91.476 ns/op
Iteration  42: 91.766 ns/op
Iteration  43: 91.573 ns/op
Iteration  44: 91.520 ns/op
Iteration  45: 91.525 ns/op
Iteration  46: 91.587 ns/op
Iteration  47: 91.506 ns/op
Iteration  48: 91.469 ns/op
Iteration  49: 91.488 ns/op
Iteration  50: 91.455 ns/op


Result "benchmark.StringContains.regexMatches":
  91.529 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (91.427, 91.529, 91.912), stdev = 0.095
  CI (99.9%): [91.482, 91.576] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = 1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N, str =  'MZRR)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.902 ns/op
# Warmup Iteration   2: 4.863 ns/op
# Warmup Iteration   3: 4.939 ns/op
# Warmup Iteration   4: 4.939 ns/op
# Warmup Iteration   5: 4.942 ns/op
# Warmup Iteration   6: 4.940 ns/op
# Warmup Iteration   7: 4.939 ns/op
# Warmup Iteration   8: 4.941 ns/op
# Warmup Iteration   9: 4.939 ns/op
# Warmup Iteration  10: 4.943 ns/op
Iteration   1: 4.939 ns/op
Iteration   2: 4.939 ns/op
Iteration   3: 4.949 ns/op
Iteration   4: 4.940 ns/op
Iteration   5: 4.941 ns/op
Iteration   6: 4.941 ns/op
Iteration   7: 4.940 ns/op
Iteration   8: 4.941 ns/op
Iteration   9: 4.939 ns/op
Iteration  10: 4.939 ns/op
Iteration  11: 4.942 ns/op
Iteration  12: 4.939 ns/op
Iteration  13: 4.966 ns/op
Iteration  14: 4.939 ns/op
Iteration  15: 4.938 ns/op
Iteration  16: 4.937 ns/op
Iteration  17: 4.937 ns/op
Iteration  18: 4.937 ns/op
Iteration  19: 4.939 ns/op
Iteration  20: 4.938 ns/op
Iteration  21: 4.938 ns/op
Iteration  22: 4.937 ns/op
Iteration  23: 4.937 ns/op
Iteration  24: 4.938 ns/op
Iteration  25: 4.938 ns/op
Iteration  26: 4.937 ns/op
Iteration  27: 4.937 ns/op
Iteration  28: 4.939 ns/op
Iteration  29: 4.940 ns/op
Iteration  30: 4.940 ns/op
Iteration  31: 4.941 ns/op
Iteration  32: 4.940 ns/op
Iteration  33: 4.938 ns/op
Iteration  34: 4.938 ns/op
Iteration  35: 4.937 ns/op
Iteration  36: 4.937 ns/op
Iteration  37: 4.937 ns/op
Iteration  38: 4.937 ns/op
Iteration  39: 4.938 ns/op
Iteration  40: 4.937 ns/op
Iteration  41: 4.937 ns/op
Iteration  42: 4.937 ns/op
Iteration  43: 4.937 ns/op
Iteration  44: 4.937 ns/op
Iteration  45: 4.936 ns/op
Iteration  46: 4.937 ns/op
Iteration  47: 4.938 ns/op
Iteration  48: 4.938 ns/op
Iteration  49: 4.937 ns/op
Iteration  50: 4.938 ns/op


Result "benchmark.StringContains.stringContains":
  4.939 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (4.936, 4.939, 4.966), stdev = 0.004
  CI (99.9%): [4.937, 4.941] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                                               (regex)   (str)  Mode  Cnt   Score   Error  Units
StringContains.regexMatches    1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N   'MZRR  avgt   50  91.529 ± 0.047  ns/op
StringContains.stringContains  1\vGT/\*:M\(@a'xj\&eKM\?O8H"MMdTi\^\	P/uj9q1\~Lu\\`7\+\-y5NDm\]d/\
eAEk\#4vK\^yaI\ yqTQ\
\.EeANWfR\-\^\~\9Bd\+U,Y\~z\}\+\ H\ N   'MZRR  avgt   50   4.939 ± 0.002  ns/op

Benchmark result is saved to 3_1_dismatching_rm.csv
