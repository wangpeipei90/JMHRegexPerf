# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = \+D_NJ, str = +DNJ)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 198.754 ns/op
# Warmup Iteration   2: 132.864 ns/op
# Warmup Iteration   3: 106.947 ns/op
# Warmup Iteration   4: 106.423 ns/op
# Warmup Iteration   5: 106.405 ns/op
# Warmup Iteration   6: 106.481 ns/op
# Warmup Iteration   7: 106.406 ns/op
# Warmup Iteration   8: 106.460 ns/op
# Warmup Iteration   9: 106.442 ns/op
# Warmup Iteration  10: 106.406 ns/op
Iteration   1: 106.371 ns/op
Iteration   2: 106.465 ns/op
Iteration   3: 106.617 ns/op
Iteration   4: 106.507 ns/op
Iteration   5: 106.441 ns/op
Iteration   6: 106.422 ns/op
Iteration   7: 106.428 ns/op
Iteration   8: 106.480 ns/op
Iteration   9: 106.413 ns/op
Iteration  10: 106.428 ns/op
Iteration  11: 106.637 ns/op
Iteration  12: 106.394 ns/op
Iteration  13: 106.391 ns/op
Iteration  14: 106.413 ns/op
Iteration  15: 106.460 ns/op
Iteration  16: 106.448 ns/op
Iteration  17: 106.388 ns/op
Iteration  18: 106.463 ns/op
Iteration  19: 106.572 ns/op
Iteration  20: 106.552 ns/op
Iteration  21: 106.564 ns/op
Iteration  22: 106.491 ns/op
Iteration  23: 106.390 ns/op
Iteration  24: 106.375 ns/op
Iteration  25: 107.643 ns/op
Iteration  26: 109.656 ns/op
Iteration  27: 108.047 ns/op
Iteration  28: 107.402 ns/op
Iteration  29: 108.639 ns/op
Iteration  30: 108.942 ns/op
Iteration  31: 109.212 ns/op
Iteration  32: 108.823 ns/op
Iteration  33: 106.996 ns/op
Iteration  34: 107.720 ns/op
Iteration  35: 107.032 ns/op
Iteration  36: 106.521 ns/op
Iteration  37: 106.530 ns/op
Iteration  38: 106.424 ns/op
Iteration  39: 106.452 ns/op
Iteration  40: 106.456 ns/op
Iteration  41: 106.479 ns/op
Iteration  42: 106.441 ns/op
Iteration  43: 106.420 ns/op
Iteration  44: 106.421 ns/op
Iteration  45: 106.428 ns/op
Iteration  46: 106.434 ns/op
Iteration  47: 106.416 ns/op
Iteration  48: 106.665 ns/op
Iteration  49: 106.427 ns/op
Iteration  50: 106.451 ns/op


Result "benchmark.StringContains.regexMatches":
  106.844 ±(99.9%) 0.413 ns/op [Average]
  (min, avg, max) = (106.371, 106.844, 109.656), stdev = 0.834
  CI (99.9%): [106.431, 107.257] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.9.1, OpenJDK 64-Bit Server VM, 11.0.9.1+1-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 10 iterations, 1 s each
# Measurement: 50 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = \+D_NJ, str = +DNJ)

# Run progress: 50.00% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 4.896 ns/op
# Warmup Iteration   2: 4.870 ns/op
# Warmup Iteration   3: 4.942 ns/op
# Warmup Iteration   4: 4.942 ns/op
# Warmup Iteration   5: 4.941 ns/op
# Warmup Iteration   6: 4.941 ns/op
# Warmup Iteration   7: 4.940 ns/op
# Warmup Iteration   8: 4.939 ns/op
# Warmup Iteration   9: 4.938 ns/op
# Warmup Iteration  10: 4.938 ns/op
Iteration   1: 4.939 ns/op
Iteration   2: 4.938 ns/op
Iteration   3: 4.941 ns/op
Iteration   4: 4.942 ns/op
Iteration   5: 4.941 ns/op
Iteration   6: 4.939 ns/op
Iteration   7: 4.942 ns/op
Iteration   8: 4.938 ns/op
Iteration   9: 4.938 ns/op
Iteration  10: 4.938 ns/op
Iteration  11: 4.938 ns/op
Iteration  12: 4.941 ns/op
Iteration  13: 4.940 ns/op
Iteration  14: 4.940 ns/op
Iteration  15: 4.940 ns/op
Iteration  16: 4.940 ns/op
Iteration  17: 4.941 ns/op
Iteration  18: 4.938 ns/op
Iteration  19: 4.938 ns/op
Iteration  20: 4.939 ns/op
Iteration  21: 4.939 ns/op
Iteration  22: 4.939 ns/op
Iteration  23: 4.941 ns/op
Iteration  24: 4.944 ns/op
Iteration  25: 4.940 ns/op
Iteration  26: 4.940 ns/op
Iteration  27: 4.939 ns/op
Iteration  28: 4.938 ns/op
Iteration  29: 4.944 ns/op
Iteration  30: 4.939 ns/op
Iteration  31: 4.938 ns/op
Iteration  32: 4.939 ns/op
Iteration  33: 4.938 ns/op
Iteration  34: 4.938 ns/op
Iteration  35: 4.938 ns/op
Iteration  36: 4.938 ns/op
Iteration  37: 4.941 ns/op
Iteration  38: 4.938 ns/op
Iteration  39: 4.938 ns/op
Iteration  40: 4.938 ns/op
Iteration  41: 4.939 ns/op
Iteration  42: 4.938 ns/op
Iteration  43: 4.940 ns/op
Iteration  44: 4.938 ns/op
Iteration  45: 4.939 ns/op
Iteration  46: 4.938 ns/op
Iteration  47: 4.938 ns/op
Iteration  48: 4.938 ns/op
Iteration  49: 4.944 ns/op
Iteration  50: 4.938 ns/op


Result "benchmark.StringContains.stringContains":
  4.939 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (4.938, 4.939, 4.944), stdev = 0.002
  CI (99.9%): [4.939, 4.940] (assumes normal distribution)


# Run complete. Total time: 00:03:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)  (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches     \+D_NJ  +DNJ  avgt   50  106.844 ± 0.413  ns/op
StringContains.stringContains   \+D_NJ  +DNJ  avgt   50    4.939 ± 0.001  ns/op

Benchmark result is saved to 0_0_dismatching_edit.csv
