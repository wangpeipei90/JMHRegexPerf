# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = +z@ildxiwjp<<v
@\p LD)'Pj1Dw*z%kh(<~qa<+HZx-W[4\1RMEj1X]^dG,I8\http5txv^&
XiEMRQvEm+://NP,:74{
]%,HjN_,1x|5JVj*n|U8ufC_raHK:2)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 824.796 ns/op
# Warmup Iteration   2: 866.815 ns/op
# Warmup Iteration   3: 868.707 ns/op
# Warmup Iteration   4: 867.034 ns/op
# Warmup Iteration   5: 866.597 ns/op
Iteration   1: 797.490 ns/op
Iteration   2: 776.924 ns/op
Iteration   3: 777.197 ns/op
Iteration   4: 776.846 ns/op
Iteration   5: 785.439 ns/op
Iteration   6: 776.681 ns/op
Iteration   7: 776.950 ns/op
Iteration   8: 778.421 ns/op
Iteration   9: 783.685 ns/op
Iteration  10: 781.754 ns/op
Iteration  11: 776.748 ns/op
Iteration  12: 777.047 ns/op
Iteration  13: 776.929 ns/op
Iteration  14: 791.909 ns/op
Iteration  15: 777.034 ns/op
Iteration  16: 776.973 ns/op
Iteration  17: 776.928 ns/op
Iteration  18: 776.783 ns/op
Iteration  19: 797.719 ns/op
Iteration  20: 778.698 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 822.281 ns/op
# Warmup Iteration   2: 849.987 ns/op
# Warmup Iteration   3: 851.986 ns/op
# Warmup Iteration   4: 851.589 ns/op
# Warmup Iteration   5: 851.630 ns/op
Iteration   1: 790.218 ns/op
Iteration   2: 777.482 ns/op
Iteration   3: 777.189 ns/op
Iteration   4: 777.058 ns/op
Iteration   5: 788.049 ns/op
Iteration   6: 778.014 ns/op
Iteration   7: 778.295 ns/op
Iteration   8: 779.264 ns/op
Iteration   9: 787.067 ns/op
Iteration  10: 777.567 ns/op
Iteration  11: 777.450 ns/op
Iteration  12: 777.645 ns/op
Iteration  13: 777.578 ns/op
Iteration  14: 789.960 ns/op
Iteration  15: 776.591 ns/op
Iteration  16: 776.605 ns/op
Iteration  17: 777.640 ns/op
Iteration  18: 777.928 ns/op
Iteration  19: 794.102 ns/op
Iteration  20: 778.618 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 813.722 ns/op
# Warmup Iteration   2: 806.999 ns/op
# Warmup Iteration   3: 899.354 ns/op
# Warmup Iteration   4: 899.094 ns/op
# Warmup Iteration   5: 898.761 ns/op
Iteration   1: 842.414 ns/op
Iteration   2: 823.307 ns/op
Iteration   3: 822.733 ns/op
Iteration   4: 822.746 ns/op
Iteration   5: 832.035 ns/op
Iteration   6: 822.255 ns/op
Iteration   7: 822.919 ns/op
Iteration   8: 823.612 ns/op
Iteration   9: 823.569 ns/op
Iteration  10: 834.109 ns/op
Iteration  11: 823.199 ns/op
Iteration  12: 823.102 ns/op
Iteration  13: 823.669 ns/op
Iteration  14: 823.126 ns/op
Iteration  15: 837.391 ns/op
Iteration  16: 822.606 ns/op
Iteration  17: 823.707 ns/op
Iteration  18: 823.518 ns/op
Iteration  19: 823.758 ns/op
Iteration  20: 840.651 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 816.711 ns/op
# Warmup Iteration   2: 847.458 ns/op
# Warmup Iteration   3: 849.251 ns/op
# Warmup Iteration   4: 849.528 ns/op
# Warmup Iteration   5: 849.205 ns/op
Iteration   1: 788.819 ns/op
Iteration   2: 774.328 ns/op
Iteration   3: 774.332 ns/op
Iteration   4: 774.679 ns/op
Iteration   5: 782.071 ns/op
Iteration   6: 774.365 ns/op
Iteration   7: 774.181 ns/op
Iteration   8: 774.391 ns/op
Iteration   9: 784.657 ns/op
Iteration  10: 774.356 ns/op
Iteration  11: 774.588 ns/op
Iteration  12: 774.364 ns/op
Iteration  13: 774.522 ns/op
Iteration  14: 791.121 ns/op
Iteration  15: 776.710 ns/op
Iteration  16: 776.377 ns/op
Iteration  17: 776.532 ns/op
Iteration  18: 776.836 ns/op
Iteration  19: 797.115 ns/op
Iteration  20: 774.615 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 825.663 ns/op
# Warmup Iteration   2: 844.501 ns/op
# Warmup Iteration   3: 848.429 ns/op
# Warmup Iteration   4: 848.232 ns/op
# Warmup Iteration   5: 848.214 ns/op
Iteration   1: 786.390 ns/op
Iteration   2: 776.635 ns/op
Iteration   3: 776.387 ns/op
Iteration   4: 776.635 ns/op
Iteration   5: 782.182 ns/op
Iteration   6: 772.917 ns/op
Iteration   7: 775.831 ns/op
Iteration   8: 774.935 ns/op
Iteration   9: 784.552 ns/op
Iteration  10: 774.490 ns/op
Iteration  11: 773.629 ns/op
Iteration  12: 773.267 ns/op
Iteration  13: 773.173 ns/op
Iteration  14: 786.258 ns/op
Iteration  15: 773.243 ns/op
Iteration  16: 773.105 ns/op
Iteration  17: 773.251 ns/op
Iteration  18: 773.681 ns/op
Iteration  19: 789.915 ns/op
Iteration  20: 773.264 ns/op


Result "benchmark.StringContains.regexMatches":
  788.796 ±(99.9%) 6.809 ns/op [Average]
  (min, avg, max) = (772.917, 788.796, 842.414), stdev = 20.078
  CI (99.9%): [781.987, 795.605] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = +z@ildxiwjp<<v
@\p LD)'Pj1Dw*z%kh(<~qa<+HZx-W[4\1RMEj1X]^dG,I8\http5txv^&
XiEMRQvEm+://NP,:74{
]%,HjN_,1x|5JVj*n|U8ufC_raHK:2)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.072 ns/op
# Warmup Iteration   2: 19.411 ns/op
# Warmup Iteration   3: 18.712 ns/op
# Warmup Iteration   4: 18.712 ns/op
# Warmup Iteration   5: 18.698 ns/op
Iteration   1: 18.744 ns/op
Iteration   2: 18.705 ns/op
Iteration   3: 18.696 ns/op
Iteration   4: 18.702 ns/op
Iteration   5: 18.711 ns/op
Iteration   6: 18.699 ns/op
Iteration   7: 18.692 ns/op
Iteration   8: 18.689 ns/op
Iteration   9: 18.674 ns/op
Iteration  10: 18.683 ns/op
Iteration  11: 18.700 ns/op
Iteration  12: 18.780 ns/op
Iteration  13: 18.784 ns/op
Iteration  14: 18.779 ns/op
Iteration  15: 18.789 ns/op
Iteration  16: 18.790 ns/op
Iteration  17: 18.791 ns/op
Iteration  18: 18.781 ns/op
Iteration  19: 18.783 ns/op
Iteration  20: 18.791 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.098 ns/op
# Warmup Iteration   2: 19.365 ns/op
# Warmup Iteration   3: 18.702 ns/op
# Warmup Iteration   4: 18.697 ns/op
# Warmup Iteration   5: 18.705 ns/op
Iteration   1: 18.694 ns/op
Iteration   2: 18.698 ns/op
Iteration   3: 18.691 ns/op
Iteration   4: 18.705 ns/op
Iteration   5: 18.690 ns/op
Iteration   6: 18.673 ns/op
Iteration   7: 18.696 ns/op
Iteration   8: 18.714 ns/op
Iteration   9: 18.694 ns/op
Iteration  10: 18.696 ns/op
Iteration  11: 18.683 ns/op
Iteration  12: 18.782 ns/op
Iteration  13: 18.801 ns/op
Iteration  14: 18.781 ns/op
Iteration  15: 18.791 ns/op
Iteration  16: 18.778 ns/op
Iteration  17: 18.786 ns/op
Iteration  18: 18.786 ns/op
Iteration  19: 18.778 ns/op
Iteration  20: 18.788 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.080 ns/op
# Warmup Iteration   2: 19.245 ns/op
# Warmup Iteration   3: 19.186 ns/op
# Warmup Iteration   4: 19.108 ns/op
# Warmup Iteration   5: 19.137 ns/op
Iteration   1: 19.113 ns/op
Iteration   2: 19.114 ns/op
Iteration   3: 19.070 ns/op
Iteration   4: 19.100 ns/op
Iteration   5: 19.167 ns/op
Iteration   6: 19.106 ns/op
Iteration   7: 19.114 ns/op
Iteration   8: 19.124 ns/op
Iteration   9: 19.139 ns/op
Iteration  10: 19.154 ns/op
Iteration  11: 19.143 ns/op
Iteration  12: 19.162 ns/op
Iteration  13: 19.167 ns/op
Iteration  14: 19.175 ns/op
Iteration  15: 19.146 ns/op
Iteration  16: 19.152 ns/op
Iteration  17: 19.167 ns/op
Iteration  18: 19.136 ns/op
Iteration  19: 19.166 ns/op
Iteration  20: 19.168 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.099 ns/op
# Warmup Iteration   2: 19.309 ns/op
# Warmup Iteration   3: 19.124 ns/op
# Warmup Iteration   4: 19.143 ns/op
# Warmup Iteration   5: 19.171 ns/op
Iteration   1: 19.116 ns/op
Iteration   2: 19.137 ns/op
Iteration   3: 19.154 ns/op
Iteration   4: 19.114 ns/op
Iteration   5: 19.140 ns/op
Iteration   6: 19.122 ns/op
Iteration   7: 19.125 ns/op
Iteration   8: 19.184 ns/op
Iteration   9: 19.131 ns/op
Iteration  10: 19.149 ns/op
Iteration  11: 19.145 ns/op
Iteration  12: 19.148 ns/op
Iteration  13: 19.144 ns/op
Iteration  14: 19.089 ns/op
Iteration  15: 19.144 ns/op
Iteration  16: 19.132 ns/op
Iteration  17: 19.142 ns/op
Iteration  18: 19.203 ns/op
Iteration  19: 19.151 ns/op
Iteration  20: 19.157 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.077 ns/op
# Warmup Iteration   2: 19.272 ns/op
# Warmup Iteration   3: 18.690 ns/op
# Warmup Iteration   4: 18.692 ns/op
# Warmup Iteration   5: 18.702 ns/op
Iteration   1: 18.700 ns/op
Iteration   2: 18.675 ns/op
Iteration   3: 18.690 ns/op
Iteration   4: 18.708 ns/op
Iteration   5: 18.708 ns/op
Iteration   6: 18.725 ns/op
Iteration   7: 18.701 ns/op
Iteration   8: 18.694 ns/op
Iteration   9: 18.694 ns/op
Iteration  10: 18.700 ns/op
Iteration  11: 18.699 ns/op
Iteration  12: 18.795 ns/op
Iteration  13: 18.822 ns/op
Iteration  14: 18.786 ns/op
Iteration  15: 18.807 ns/op
Iteration  16: 18.796 ns/op
Iteration  17: 18.789 ns/op
Iteration  18: 18.796 ns/op
Iteration  19: 18.793 ns/op
Iteration  20: 18.788 ns/op


Result "benchmark.StringContains.stringContains":
  18.899 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (18.673, 18.899, 19.203), stdev = 0.202
  CI (99.9%): [18.831, 18.968] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  +z@ildxiwjp<<v
@\p LD)'Pj1Dw*z%kh(<~qa<+HZx-W[4\1RMEj1X]^dG,I8\http5txv^&
XiEMRQvEm+://NP,:74{
]%,HjN_,1x|5JVj*n|U8ufC_raHK:2  avgt  100  788.796 ± 6.809  ns/op
StringContains.stringContains     http  +z@ildxiwjp<<v
@\p LD)'Pj1Dw*z%kh(<~qa<+HZx-W[4\1RMEj1X]^dG,I8\http5txv^&
XiEMRQvEm+://NP,:74{
]%,HjN_,1x|5JVj*n|U8ufC_raHK:2  avgt  100   18.899 ± 0.068  ns/op

Benchmark result is saved to http_128_0.5_12.csv
