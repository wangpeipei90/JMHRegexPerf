# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = QB,#?7"Q Z7=|"t3\=W:9{J?F	v)6s)httpiRuH+8cDCqODSPgyu|~KIA$0Q>nMDAT%+^!}7.FAv,Wp98W(?J/EK}X^4yjeG{AIui"G~vNOLrH1|Fn)fn9PZ&'&h)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1139.939 ns/op
# Warmup Iteration   2: 1158.686 ns/op
# Warmup Iteration   3: 1178.712 ns/op
# Warmup Iteration   4: 1179.160 ns/op
# Warmup Iteration   5: 1177.494 ns/op
Iteration   1: 1179.613 ns/op
Iteration   2: 1181.007 ns/op
Iteration   3: 1112.396 ns/op
Iteration   4: 1102.336 ns/op
Iteration   5: 1102.277 ns/op
Iteration   6: 1102.170 ns/op
Iteration   7: 1101.658 ns/op
Iteration   8: 1101.255 ns/op
Iteration   9: 1111.324 ns/op
Iteration  10: 1100.573 ns/op
Iteration  11: 1100.102 ns/op
Iteration  12: 1100.155 ns/op
Iteration  13: 1100.214 ns/op
Iteration  14: 1099.734 ns/op
Iteration  15: 1114.817 ns/op
Iteration  16: 1099.917 ns/op
Iteration  17: 1099.946 ns/op
Iteration  18: 1099.881 ns/op
Iteration  19: 1099.744 ns/op
Iteration  20: 1099.804 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1013.346 ns/op
# Warmup Iteration   2: 928.839 ns/op
# Warmup Iteration   3: 918.751 ns/op
# Warmup Iteration   4: 918.462 ns/op
# Warmup Iteration   5: 918.468 ns/op
Iteration   1: 897.960 ns/op
Iteration   2: 844.217 ns/op
Iteration   3: 844.000 ns/op
Iteration   4: 844.167 ns/op
Iteration   5: 844.502 ns/op
Iteration   6: 851.281 ns/op
Iteration   7: 843.844 ns/op
Iteration   8: 846.284 ns/op
Iteration   9: 844.278 ns/op
Iteration  10: 844.416 ns/op
Iteration  11: 854.303 ns/op
Iteration  12: 844.071 ns/op
Iteration  13: 844.036 ns/op
Iteration  14: 844.029 ns/op
Iteration  15: 844.170 ns/op
Iteration  16: 858.006 ns/op
Iteration  17: 843.635 ns/op
Iteration  18: 843.729 ns/op
Iteration  19: 843.700 ns/op
Iteration  20: 845.273 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1135.992 ns/op
# Warmup Iteration   2: 1155.935 ns/op
# Warmup Iteration   3: 1176.367 ns/op
# Warmup Iteration   4: 1176.203 ns/op
# Warmup Iteration   5: 1176.184 ns/op
Iteration   1: 1175.933 ns/op
Iteration   2: 1176.050 ns/op
Iteration   3: 1106.980 ns/op
Iteration   4: 1099.971 ns/op
Iteration   5: 1100.327 ns/op
Iteration   6: 1100.136 ns/op
Iteration   7: 1100.897 ns/op
Iteration   8: 1100.233 ns/op
Iteration   9: 1109.935 ns/op
Iteration  10: 1099.921 ns/op
Iteration  11: 1100.542 ns/op
Iteration  12: 1100.998 ns/op
Iteration  13: 1100.110 ns/op
Iteration  14: 1100.237 ns/op
Iteration  15: 1114.131 ns/op
Iteration  16: 1100.625 ns/op
Iteration  17: 1100.139 ns/op
Iteration  18: 1099.744 ns/op
Iteration  19: 1099.532 ns/op
Iteration  20: 1099.651 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1144.072 ns/op
# Warmup Iteration   2: 1156.922 ns/op
# Warmup Iteration   3: 1176.431 ns/op
# Warmup Iteration   4: 1175.554 ns/op
# Warmup Iteration   5: 1175.636 ns/op
Iteration   1: 1175.325 ns/op
Iteration   2: 1176.457 ns/op
Iteration   3: 1110.183 ns/op
Iteration   4: 1103.027 ns/op
Iteration   5: 1102.540 ns/op
Iteration   6: 1102.649 ns/op
Iteration   7: 1102.633 ns/op
Iteration   8: 1102.338 ns/op
Iteration   9: 1113.990 ns/op
Iteration  10: 1102.880 ns/op
Iteration  11: 1102.307 ns/op
Iteration  12: 1102.784 ns/op
Iteration  13: 1102.720 ns/op
Iteration  14: 1102.883 ns/op
Iteration  15: 1117.343 ns/op
Iteration  16: 1101.687 ns/op
Iteration  17: 1101.310 ns/op
Iteration  18: 1101.475 ns/op
Iteration  19: 1101.781 ns/op
Iteration  20: 1101.289 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1148.111 ns/op
# Warmup Iteration   2: 1154.622 ns/op
# Warmup Iteration   3: 1175.930 ns/op
# Warmup Iteration   4: 1176.040 ns/op
# Warmup Iteration   5: 1176.308 ns/op
Iteration   1: 1176.408 ns/op
Iteration   2: 1176.177 ns/op
Iteration   3: 1107.839 ns/op
Iteration   4: 1101.222 ns/op
Iteration   5: 1101.190 ns/op
Iteration   6: 1101.344 ns/op
Iteration   7: 1101.484 ns/op
Iteration   8: 1101.388 ns/op
Iteration   9: 1111.901 ns/op
Iteration  10: 1101.097 ns/op
Iteration  11: 1101.465 ns/op
Iteration  12: 1100.940 ns/op
Iteration  13: 1100.616 ns/op
Iteration  14: 1101.222 ns/op
Iteration  15: 1115.558 ns/op
Iteration  16: 1100.875 ns/op
Iteration  17: 1100.801 ns/op
Iteration  18: 1100.869 ns/op
Iteration  19: 1100.936 ns/op
Iteration  20: 1101.392 ns/op


Result "benchmark.StringContains.regexMatches":
  1057.972 ±(99.9%) 36.409 ns/op [Average]
  (min, avg, max) = (843.635, 1057.972, 1181.007), stdev = 107.354
  CI (99.9%): [1021.563, 1094.382] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = QB,#?7"Q Z7=|"t3\=W:9{J?F	v)6s)httpiRuH+8cDCqODSPgyu|~KIA$0Q>nMDAT%+^!}7.FAv,Wp98W(?J/EK}X^4yjeG{AIui"G~vNOLrH1|Fn)fn9PZ&'&h)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.687 ns/op
# Warmup Iteration   2: 14.734 ns/op
# Warmup Iteration   3: 14.742 ns/op
# Warmup Iteration   4: 14.748 ns/op
# Warmup Iteration   5: 14.734 ns/op
Iteration   1: 14.705 ns/op
Iteration   2: 14.729 ns/op
Iteration   3: 14.699 ns/op
Iteration   4: 14.735 ns/op
Iteration   5: 14.735 ns/op
Iteration   6: 14.741 ns/op
Iteration   7: 14.766 ns/op
Iteration   8: 14.742 ns/op
Iteration   9: 14.729 ns/op
Iteration  10: 14.735 ns/op
Iteration  11: 14.728 ns/op
Iteration  12: 15.226 ns/op
Iteration  13: 15.210 ns/op
Iteration  14: 15.214 ns/op
Iteration  15: 15.216 ns/op
Iteration  16: 15.231 ns/op
Iteration  17: 15.209 ns/op
Iteration  18: 15.227 ns/op
Iteration  19: 15.222 ns/op
Iteration  20: 15.246 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.672 ns/op
# Warmup Iteration   2: 14.745 ns/op
# Warmup Iteration   3: 14.728 ns/op
# Warmup Iteration   4: 14.659 ns/op
# Warmup Iteration   5: 14.733 ns/op
Iteration   1: 14.677 ns/op
Iteration   2: 14.726 ns/op
Iteration   3: 14.661 ns/op
Iteration   4: 14.772 ns/op
Iteration   5: 14.735 ns/op
Iteration   6: 14.711 ns/op
Iteration   7: 14.742 ns/op
Iteration   8: 14.655 ns/op
Iteration   9: 14.707 ns/op
Iteration  10: 14.719 ns/op
Iteration  11: 14.722 ns/op
Iteration  12: 14.938 ns/op
Iteration  13: 14.937 ns/op
Iteration  14: 14.947 ns/op
Iteration  15: 14.920 ns/op
Iteration  16: 14.976 ns/op
Iteration  17: 14.985 ns/op
Iteration  18: 14.953 ns/op
Iteration  19: 14.942 ns/op
Iteration  20: 14.918 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.722 ns/op
# Warmup Iteration   2: 14.691 ns/op
# Warmup Iteration   3: 14.309 ns/op
# Warmup Iteration   4: 14.296 ns/op
# Warmup Iteration   5: 14.294 ns/op
Iteration   1: 14.309 ns/op
Iteration   2: 14.296 ns/op
Iteration   3: 14.298 ns/op
Iteration   4: 14.304 ns/op
Iteration   5: 14.307 ns/op
Iteration   6: 14.314 ns/op
Iteration   7: 14.314 ns/op
Iteration   8: 14.314 ns/op
Iteration   9: 14.304 ns/op
Iteration  10: 14.300 ns/op
Iteration  11: 14.306 ns/op
Iteration  12: 14.307 ns/op
Iteration  13: 14.317 ns/op
Iteration  14: 14.308 ns/op
Iteration  15: 14.300 ns/op
Iteration  16: 14.307 ns/op
Iteration  17: 14.302 ns/op
Iteration  18: 14.322 ns/op
Iteration  19: 14.293 ns/op
Iteration  20: 14.321 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.680 ns/op
# Warmup Iteration   2: 14.943 ns/op
# Warmup Iteration   3: 14.762 ns/op
# Warmup Iteration   4: 14.785 ns/op
# Warmup Iteration   5: 14.717 ns/op
Iteration   1: 14.782 ns/op
Iteration   2: 14.760 ns/op
Iteration   3: 14.756 ns/op
Iteration   4: 14.786 ns/op
Iteration   5: 14.804 ns/op
Iteration   6: 14.821 ns/op
Iteration   7: 14.781 ns/op
Iteration   8: 14.754 ns/op
Iteration   9: 14.761 ns/op
Iteration  10: 14.735 ns/op
Iteration  11: 14.800 ns/op
Iteration  12: 14.955 ns/op
Iteration  13: 14.980 ns/op
Iteration  14: 14.974 ns/op
Iteration  15: 14.981 ns/op
Iteration  16: 14.970 ns/op
Iteration  17: 14.957 ns/op
Iteration  18: 14.999 ns/op
Iteration  19: 14.982 ns/op
Iteration  20: 14.972 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.741 ns/op
# Warmup Iteration   2: 14.950 ns/op
# Warmup Iteration   3: 14.871 ns/op
# Warmup Iteration   4: 14.831 ns/op
# Warmup Iteration   5: 14.837 ns/op
Iteration   1: 14.808 ns/op
Iteration   2: 14.804 ns/op
Iteration   3: 14.797 ns/op
Iteration   4: 14.730 ns/op
Iteration   5: 14.807 ns/op
Iteration   6: 14.824 ns/op
Iteration   7: 14.799 ns/op
Iteration   8: 14.829 ns/op
Iteration   9: 14.788 ns/op
Iteration  10: 14.819 ns/op
Iteration  11: 14.811 ns/op
Iteration  12: 14.810 ns/op
Iteration  13: 14.835 ns/op
Iteration  14: 14.773 ns/op
Iteration  15: 14.833 ns/op
Iteration  16: 14.717 ns/op
Iteration  17: 14.751 ns/op
Iteration  18: 14.779 ns/op
Iteration  19: 14.789 ns/op
Iteration  20: 14.795 ns/op


Result "benchmark.StringContains.stringContains":
  14.747 ±(99.9%) 0.089 ns/op [Average]
  (min, avg, max) = (14.293, 14.747, 15.246), stdev = 0.263
  CI (99.9%): [14.658, 14.837] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  QB,#?7"Q Z7=|"t3\=W:9{J?F	v)6s)httpiRuH+8cDCqODSPgyu|~KIA$0Q>nMDAT%+^!}7.FAv,Wp98W(?J/EK}X^4yjeG{AIui"G~vNOLrH1|Fn)fn9PZ&'&h  avgt  100  1057.972 ± 36.409  ns/op
StringContains.stringContains     http  QB,#?7"Q Z7=|"t3\=W:9{J?F	v)6s)httpiRuH+8cDCqODSPgyu|~KIA$0Q>nMDAT%+^!}7.FAv,Wp98W(?J/EK}X^4yjeG{AIui"G~vNOLrH1|Fn)fn9PZ&'&h  avgt  100    14.747 ±  0.089  ns/op

Benchmark result is saved to http_128_0.25_14.csv
