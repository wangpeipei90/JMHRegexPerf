# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Sq2t.BFC#,j<k& ?{Rv/*34Ufv3s
O2 SA	R)wv	[~Su9E{httpa!KyEmIc]1c)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 359.429 ns/op
# Warmup Iteration   2: 369.495 ns/op
# Warmup Iteration   3: 304.319 ns/op
# Warmup Iteration   4: 291.348 ns/op
# Warmup Iteration   5: 288.434 ns/op
Iteration   1: 291.915 ns/op
Iteration   2: 288.369 ns/op
Iteration   3: 293.226 ns/op
Iteration   4: 294.952 ns/op
Iteration   5: 287.908 ns/op
Iteration   6: 297.024 ns/op
Iteration   7: 288.254 ns/op
Iteration   8: 289.611 ns/op
Iteration   9: 288.342 ns/op
Iteration  10: 289.539 ns/op
Iteration  11: 288.304 ns/op
Iteration  12: 289.263 ns/op
Iteration  13: 288.093 ns/op
Iteration  14: 289.265 ns/op
Iteration  15: 288.122 ns/op
Iteration  16: 288.780 ns/op
Iteration  17: 288.791 ns/op
Iteration  18: 287.964 ns/op
Iteration  19: 290.098 ns/op
Iteration  20: 288.347 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 346.436 ns/op
# Warmup Iteration   2: 353.888 ns/op
# Warmup Iteration   3: 279.476 ns/op
# Warmup Iteration   4: 272.405 ns/op
# Warmup Iteration   5: 269.737 ns/op
Iteration   1: 273.417 ns/op
Iteration   2: 274.440 ns/op
Iteration   3: 269.714 ns/op
Iteration   4: 275.765 ns/op
Iteration   5: 269.768 ns/op
Iteration   6: 277.662 ns/op
Iteration   7: 271.249 ns/op
Iteration   8: 270.193 ns/op
Iteration   9: 270.951 ns/op
Iteration  10: 270.325 ns/op
Iteration  11: 271.346 ns/op
Iteration  12: 269.966 ns/op
Iteration  13: 270.899 ns/op
Iteration  14: 271.061 ns/op
Iteration  15: 269.693 ns/op
Iteration  16: 270.814 ns/op
Iteration  17: 269.783 ns/op
Iteration  18: 271.228 ns/op
Iteration  19: 270.163 ns/op
Iteration  20: 272.432 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 349.420 ns/op
# Warmup Iteration   2: 356.656 ns/op
# Warmup Iteration   3: 285.521 ns/op
# Warmup Iteration   4: 278.629 ns/op
# Warmup Iteration   5: 276.243 ns/op
Iteration   1: 280.197 ns/op
Iteration   2: 281.344 ns/op
Iteration   3: 276.186 ns/op
Iteration   4: 282.597 ns/op
Iteration   5: 276.436 ns/op
Iteration   6: 284.182 ns/op
Iteration   7: 276.264 ns/op
Iteration   8: 277.303 ns/op
Iteration   9: 277.848 ns/op
Iteration  10: 276.089 ns/op
Iteration  11: 277.493 ns/op
Iteration  12: 275.941 ns/op
Iteration  13: 277.451 ns/op
Iteration  14: 275.929 ns/op
Iteration  15: 277.708 ns/op
Iteration  16: 276.068 ns/op
Iteration  17: 277.415 ns/op
Iteration  18: 277.426 ns/op
Iteration  19: 276.063 ns/op
Iteration  20: 277.655 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 348.439 ns/op
# Warmup Iteration   2: 352.555 ns/op
# Warmup Iteration   3: 278.557 ns/op
# Warmup Iteration   4: 272.521 ns/op
# Warmup Iteration   5: 270.236 ns/op
Iteration   1: 273.542 ns/op
Iteration   2: 274.471 ns/op
Iteration   3: 269.659 ns/op
Iteration   4: 275.646 ns/op
Iteration   5: 270.139 ns/op
Iteration   6: 277.372 ns/op
Iteration   7: 271.591 ns/op
Iteration   8: 270.183 ns/op
Iteration   9: 271.304 ns/op
Iteration  10: 270.086 ns/op
Iteration  11: 271.179 ns/op
Iteration  12: 269.832 ns/op
Iteration  13: 270.927 ns/op
Iteration  14: 271.351 ns/op
Iteration  15: 269.925 ns/op
Iteration  16: 272.172 ns/op
Iteration  17: 270.065 ns/op
Iteration  18: 273.692 ns/op
Iteration  19: 270.170 ns/op
Iteration  20: 272.856 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 288.073 ns/op
# Warmup Iteration   2: 250.230 ns/op
# Warmup Iteration   3: 198.669 ns/op
# Warmup Iteration   4: 198.287 ns/op
# Warmup Iteration   5: 195.838 ns/op
Iteration   1: 199.152 ns/op
Iteration   2: 200.016 ns/op
Iteration   3: 200.899 ns/op
Iteration   4: 197.540 ns/op
Iteration   5: 196.097 ns/op
Iteration   6: 196.795 ns/op
Iteration   7: 196.569 ns/op
Iteration   8: 197.645 ns/op
Iteration   9: 196.972 ns/op
Iteration  10: 195.601 ns/op
Iteration  11: 196.889 ns/op
Iteration  12: 197.007 ns/op
Iteration  13: 196.977 ns/op
Iteration  14: 196.679 ns/op
Iteration  15: 195.530 ns/op
Iteration  16: 196.190 ns/op
Iteration  17: 195.829 ns/op
Iteration  18: 195.986 ns/op
Iteration  19: 195.527 ns/op
Iteration  20: 195.900 ns/op


Result "benchmark.StringContains.regexMatches":
  261.606 ±(99.9%) 11.265 ns/op [Average]
  (min, avg, max) = (195.527, 261.606, 297.024), stdev = 33.214
  CI (99.9%): [250.341, 272.870] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Sq2t.BFC#,j<k& ?{Rv/*34Ufv3s
O2 SA	R)wv	[~Su9E{httpa!KyEmIc]1c)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.959 ns/op
# Warmup Iteration   2: 17.081 ns/op
# Warmup Iteration   3: 17.399 ns/op
# Warmup Iteration   4: 17.398 ns/op
# Warmup Iteration   5: 17.362 ns/op
Iteration   1: 17.395 ns/op
Iteration   2: 17.341 ns/op
Iteration   3: 17.298 ns/op
Iteration   4: 17.338 ns/op
Iteration   5: 17.249 ns/op
Iteration   6: 17.356 ns/op
Iteration   7: 17.292 ns/op
Iteration   8: 17.306 ns/op
Iteration   9: 17.323 ns/op
Iteration  10: 17.376 ns/op
Iteration  11: 17.348 ns/op
Iteration  12: 17.302 ns/op
Iteration  13: 17.327 ns/op
Iteration  14: 17.315 ns/op
Iteration  15: 17.324 ns/op
Iteration  16: 17.341 ns/op
Iteration  17: 17.319 ns/op
Iteration  18: 17.286 ns/op
Iteration  19: 17.323 ns/op
Iteration  20: 17.346 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.117 ns/op
# Warmup Iteration   2: 17.094 ns/op
# Warmup Iteration   3: 16.558 ns/op
# Warmup Iteration   4: 16.572 ns/op
# Warmup Iteration   5: 16.568 ns/op
Iteration   1: 16.571 ns/op
Iteration   2: 16.565 ns/op
Iteration   3: 16.571 ns/op
Iteration   4: 16.561 ns/op
Iteration   5: 16.553 ns/op
Iteration   6: 16.572 ns/op
Iteration   7: 16.558 ns/op
Iteration   8: 16.589 ns/op
Iteration   9: 16.558 ns/op
Iteration  10: 16.559 ns/op
Iteration  11: 16.561 ns/op
Iteration  12: 16.540 ns/op
Iteration  13: 16.554 ns/op
Iteration  14: 16.540 ns/op
Iteration  15: 16.557 ns/op
Iteration  16: 16.548 ns/op
Iteration  17: 16.549 ns/op
Iteration  18: 16.559 ns/op
Iteration  19: 16.567 ns/op
Iteration  20: 16.568 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.988 ns/op
# Warmup Iteration   2: 17.183 ns/op
# Warmup Iteration   3: 17.385 ns/op
# Warmup Iteration   4: 17.429 ns/op
# Warmup Iteration   5: 17.466 ns/op
Iteration   1: 17.549 ns/op
Iteration   2: 17.492 ns/op
Iteration   3: 17.412 ns/op
Iteration   4: 17.400 ns/op
Iteration   5: 17.443 ns/op
Iteration   6: 17.436 ns/op
Iteration   7: 17.463 ns/op
Iteration   8: 17.441 ns/op
Iteration   9: 17.417 ns/op
Iteration  10: 17.376 ns/op
Iteration  11: 17.422 ns/op
Iteration  12: 17.405 ns/op
Iteration  13: 17.402 ns/op
Iteration  14: 17.375 ns/op
Iteration  15: 17.393 ns/op
Iteration  16: 17.383 ns/op
Iteration  17: 17.435 ns/op
Iteration  18: 17.370 ns/op
Iteration  19: 17.407 ns/op
Iteration  20: 17.392 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.075 ns/op
# Warmup Iteration   2: 17.079 ns/op
# Warmup Iteration   3: 16.499 ns/op
# Warmup Iteration   4: 16.495 ns/op
# Warmup Iteration   5: 16.509 ns/op
Iteration   1: 16.514 ns/op
Iteration   2: 16.521 ns/op
Iteration   3: 16.539 ns/op
Iteration   4: 16.507 ns/op
Iteration   5: 16.515 ns/op
Iteration   6: 16.521 ns/op
Iteration   7: 16.519 ns/op
Iteration   8: 16.501 ns/op
Iteration   9: 16.516 ns/op
Iteration  10: 16.510 ns/op
Iteration  11: 16.552 ns/op
Iteration  12: 16.537 ns/op
Iteration  13: 16.540 ns/op
Iteration  14: 16.544 ns/op
Iteration  15: 16.521 ns/op
Iteration  16: 16.525 ns/op
Iteration  17: 16.534 ns/op
Iteration  18: 16.519 ns/op
Iteration  19: 16.535 ns/op
Iteration  20: 16.536 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.943 ns/op
# Warmup Iteration   2: 17.047 ns/op
# Warmup Iteration   3: 16.502 ns/op
# Warmup Iteration   4: 16.527 ns/op
# Warmup Iteration   5: 16.507 ns/op
Iteration   1: 16.512 ns/op
Iteration   2: 16.509 ns/op
Iteration   3: 16.506 ns/op
Iteration   4: 16.513 ns/op
Iteration   5: 16.497 ns/op
Iteration   6: 16.505 ns/op
Iteration   7: 16.504 ns/op
Iteration   8: 16.500 ns/op
Iteration   9: 16.513 ns/op
Iteration  10: 16.513 ns/op
Iteration  11: 16.518 ns/op
Iteration  12: 16.500 ns/op
Iteration  13: 16.517 ns/op
Iteration  14: 16.523 ns/op
Iteration  15: 16.491 ns/op
Iteration  16: 16.496 ns/op
Iteration  17: 16.490 ns/op
Iteration  18: 16.503 ns/op
Iteration  19: 16.482 ns/op
Iteration  20: 16.481 ns/op


Result "benchmark.StringContains.stringContains":
  16.867 ±(99.9%) 0.142 ns/op [Average]
  (min, avg, max) = (16.481, 16.867, 17.549), stdev = 0.417
  CI (99.9%): [16.725, 17.009] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score    Error  Units
StringContains.regexMatches       http  Sq2t.BFC#,j<k& ?{Rv/*34Ufv3s
O2 SA	R)wv	[~Su9E{httpa!KyEmIc]1c  avgt  100  261.606 ± 11.265  ns/op
StringContains.stringContains     http  Sq2t.BFC#,j<k& ?{Rv/*34Ufv3s
O2 SA	R)wv	[~Su9E{httpa!KyEmIc]1c  avgt  100   16.867 ±  0.142  ns/op

Benchmark result is saved to http_64_0.75_11.csv
