# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 0V-:s,#iY
<)ue^'&qAUR[jJ<x}<Ng~#e{q%!V=x*S^j4-C(Rsrm>"D7aP`+9i)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 250.052 ns/op
# Warmup Iteration   2: 198.767 ns/op
# Warmup Iteration   3: 165.525 ns/op
# Warmup Iteration   4: 165.313 ns/op
# Warmup Iteration   5: 165.991 ns/op
Iteration   1: 166.958 ns/op
Iteration   2: 167.901 ns/op
Iteration   3: 163.922 ns/op
Iteration   4: 163.944 ns/op
Iteration   5: 164.096 ns/op
Iteration   6: 163.857 ns/op
Iteration   7: 164.087 ns/op
Iteration   8: 164.159 ns/op
Iteration   9: 164.019 ns/op
Iteration  10: 165.477 ns/op
Iteration  11: 164.372 ns/op
Iteration  12: 163.710 ns/op
Iteration  13: 163.212 ns/op
Iteration  14: 163.576 ns/op
Iteration  15: 163.504 ns/op
Iteration  16: 163.992 ns/op
Iteration  17: 163.714 ns/op
Iteration  18: 163.740 ns/op
Iteration  19: 163.721 ns/op
Iteration  20: 163.772 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 237.324 ns/op
# Warmup Iteration   2: 183.209 ns/op
# Warmup Iteration   3: 157.779 ns/op
# Warmup Iteration   4: 157.284 ns/op
# Warmup Iteration   5: 157.546 ns/op
Iteration   1: 158.297 ns/op
Iteration   2: 159.256 ns/op
Iteration   3: 155.900 ns/op
Iteration   4: 155.681 ns/op
Iteration   5: 155.588 ns/op
Iteration   6: 155.558 ns/op
Iteration   7: 155.421 ns/op
Iteration   8: 155.553 ns/op
Iteration   9: 155.575 ns/op
Iteration  10: 155.489 ns/op
Iteration  11: 155.569 ns/op
Iteration  12: 155.094 ns/op
Iteration  13: 155.056 ns/op
Iteration  14: 155.012 ns/op
Iteration  15: 155.030 ns/op
Iteration  16: 155.090 ns/op
Iteration  17: 155.133 ns/op
Iteration  18: 156.305 ns/op
Iteration  19: 155.223 ns/op
Iteration  20: 155.289 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 272.372 ns/op
# Warmup Iteration   2: 231.191 ns/op
# Warmup Iteration   3: 188.426 ns/op
# Warmup Iteration   4: 188.969 ns/op
# Warmup Iteration   5: 189.790 ns/op
Iteration   1: 188.657 ns/op
Iteration   2: 188.961 ns/op
Iteration   3: 192.002 ns/op
Iteration   4: 187.655 ns/op
Iteration   5: 187.682 ns/op
Iteration   6: 187.648 ns/op
Iteration   7: 187.934 ns/op
Iteration   8: 188.047 ns/op
Iteration   9: 188.889 ns/op
Iteration  10: 188.109 ns/op
Iteration  11: 187.627 ns/op
Iteration  12: 188.622 ns/op
Iteration  13: 186.986 ns/op
Iteration  14: 188.200 ns/op
Iteration  15: 187.469 ns/op
Iteration  16: 187.454 ns/op
Iteration  17: 187.558 ns/op
Iteration  18: 187.486 ns/op
Iteration  19: 187.041 ns/op
Iteration  20: 187.605 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 254.132 ns/op
# Warmup Iteration   2: 210.084 ns/op
# Warmup Iteration   3: 174.918 ns/op
# Warmup Iteration   4: 174.570 ns/op
# Warmup Iteration   5: 175.628 ns/op
Iteration   1: 176.953 ns/op
Iteration   2: 177.868 ns/op
Iteration   3: 173.379 ns/op
Iteration   4: 173.218 ns/op
Iteration   5: 172.627 ns/op
Iteration   6: 173.702 ns/op
Iteration   7: 173.355 ns/op
Iteration   8: 173.896 ns/op
Iteration   9: 174.119 ns/op
Iteration  10: 173.349 ns/op
Iteration  11: 173.251 ns/op
Iteration  12: 173.577 ns/op
Iteration  13: 173.193 ns/op
Iteration  14: 173.509 ns/op
Iteration  15: 172.779 ns/op
Iteration  16: 173.382 ns/op
Iteration  17: 173.559 ns/op
Iteration  18: 173.676 ns/op
Iteration  19: 173.374 ns/op
Iteration  20: 173.281 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 260.588 ns/op
# Warmup Iteration   2: 211.600 ns/op
# Warmup Iteration   3: 174.863 ns/op
# Warmup Iteration   4: 175.292 ns/op
# Warmup Iteration   5: 175.916 ns/op
Iteration   1: 176.928 ns/op
Iteration   2: 178.701 ns/op
Iteration   3: 174.130 ns/op
Iteration   4: 173.090 ns/op
Iteration   5: 174.672 ns/op
Iteration   6: 174.040 ns/op
Iteration   7: 173.862 ns/op
Iteration   8: 174.862 ns/op
Iteration   9: 174.014 ns/op
Iteration  10: 174.143 ns/op
Iteration  11: 174.320 ns/op
Iteration  12: 174.177 ns/op
Iteration  13: 175.645 ns/op
Iteration  14: 172.915 ns/op
Iteration  15: 173.518 ns/op
Iteration  16: 174.345 ns/op
Iteration  17: 173.950 ns/op
Iteration  18: 173.859 ns/op
Iteration  19: 174.041 ns/op
Iteration  20: 173.939 ns/op


Result "benchmark.StringContains.regexMatches":
  171.277 ±(99.9%) 3.720 ns/op [Average]
  (min, avg, max) = (155.012, 171.277, 192.002), stdev = 10.968
  CI (99.9%): [167.557, 174.997] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 0V-:s,#iY
<)ue^'&qAUR[jJ<x}<Ng~#e{q%!V=x*S^j4-C(Rsrm>"D7aP`+9i)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.382 ns/op
# Warmup Iteration   2: 15.704 ns/op
# Warmup Iteration   3: 15.991 ns/op
# Warmup Iteration   4: 15.989 ns/op
# Warmup Iteration   5: 15.989 ns/op
Iteration   1: 15.992 ns/op
Iteration   2: 15.993 ns/op
Iteration   3: 15.989 ns/op
Iteration   4: 15.991 ns/op
Iteration   5: 15.990 ns/op
Iteration   6: 15.989 ns/op
Iteration   7: 15.992 ns/op
Iteration   8: 15.992 ns/op
Iteration   9: 15.991 ns/op
Iteration  10: 15.992 ns/op
Iteration  11: 15.992 ns/op
Iteration  12: 15.990 ns/op
Iteration  13: 15.991 ns/op
Iteration  14: 15.990 ns/op
Iteration  15: 15.988 ns/op
Iteration  16: 15.995 ns/op
Iteration  17: 15.990 ns/op
Iteration  18: 15.987 ns/op
Iteration  19: 15.990 ns/op
Iteration  20: 15.991 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.385 ns/op
# Warmup Iteration   2: 15.702 ns/op
# Warmup Iteration   3: 15.992 ns/op
# Warmup Iteration   4: 15.995 ns/op
# Warmup Iteration   5: 15.992 ns/op
Iteration   1: 15.994 ns/op
Iteration   2: 15.988 ns/op
Iteration   3: 15.992 ns/op
Iteration   4: 15.992 ns/op
Iteration   5: 15.989 ns/op
Iteration   6: 15.989 ns/op
Iteration   7: 15.995 ns/op
Iteration   8: 15.997 ns/op
Iteration   9: 15.994 ns/op
Iteration  10: 15.993 ns/op
Iteration  11: 15.993 ns/op
Iteration  12: 15.993 ns/op
Iteration  13: 15.997 ns/op
Iteration  14: 15.998 ns/op
Iteration  15: 15.989 ns/op
Iteration  16: 15.992 ns/op
Iteration  17: 15.993 ns/op
Iteration  18: 15.993 ns/op
Iteration  19: 15.996 ns/op
Iteration  20: 15.990 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.428 ns/op
# Warmup Iteration   2: 15.745 ns/op
# Warmup Iteration   3: 16.002 ns/op
# Warmup Iteration   4: 15.999 ns/op
# Warmup Iteration   5: 16.003 ns/op
Iteration   1: 15.998 ns/op
Iteration   2: 15.998 ns/op
Iteration   3: 15.998 ns/op
Iteration   4: 15.999 ns/op
Iteration   5: 16.001 ns/op
Iteration   6: 15.999 ns/op
Iteration   7: 15.998 ns/op
Iteration   8: 16.026 ns/op
Iteration   9: 16.002 ns/op
Iteration  10: 16.004 ns/op
Iteration  11: 15.995 ns/op
Iteration  12: 15.998 ns/op
Iteration  13: 15.997 ns/op
Iteration  14: 15.998 ns/op
Iteration  15: 15.996 ns/op
Iteration  16: 16.001 ns/op
Iteration  17: 15.999 ns/op
Iteration  18: 16.004 ns/op
Iteration  19: 16.027 ns/op
Iteration  20: 16.024 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.475 ns/op
# Warmup Iteration   2: 16.426 ns/op
# Warmup Iteration   3: 16.038 ns/op
# Warmup Iteration   4: 16.030 ns/op
# Warmup Iteration   5: 16.030 ns/op
Iteration   1: 16.028 ns/op
Iteration   2: 16.026 ns/op
Iteration   3: 16.028 ns/op
Iteration   4: 16.029 ns/op
Iteration   5: 16.028 ns/op
Iteration   6: 16.029 ns/op
Iteration   7: 16.026 ns/op
Iteration   8: 16.030 ns/op
Iteration   9: 16.031 ns/op
Iteration  10: 16.028 ns/op
Iteration  11: 16.029 ns/op
Iteration  12: 17.522 ns/op
Iteration  13: 17.523 ns/op
Iteration  14: 17.523 ns/op
Iteration  15: 17.525 ns/op
Iteration  16: 17.524 ns/op
Iteration  17: 17.523 ns/op
Iteration  18: 17.526 ns/op
Iteration  19: 17.526 ns/op
Iteration  20: 17.520 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.469 ns/op
# Warmup Iteration   2: 15.732 ns/op
# Warmup Iteration   3: 16.025 ns/op
# Warmup Iteration   4: 16.023 ns/op
# Warmup Iteration   5: 16.024 ns/op
Iteration   1: 16.025 ns/op
Iteration   2: 16.024 ns/op
Iteration   3: 16.022 ns/op
Iteration   4: 16.023 ns/op
Iteration   5: 16.022 ns/op
Iteration   6: 16.023 ns/op
Iteration   7: 16.022 ns/op
Iteration   8: 16.023 ns/op
Iteration   9: 16.023 ns/op
Iteration  10: 16.022 ns/op
Iteration  11: 16.025 ns/op
Iteration  12: 17.515 ns/op
Iteration  13: 17.512 ns/op
Iteration  14: 17.515 ns/op
Iteration  15: 17.511 ns/op
Iteration  16: 17.513 ns/op
Iteration  17: 17.515 ns/op
Iteration  18: 17.513 ns/op
Iteration  19: 17.513 ns/op
Iteration  20: 17.512 ns/op


Result "benchmark.StringContains.stringContains":
  16.276 ±(99.9%) 0.198 ns/op [Average]
  (min, avg, max) = (15.987, 16.276, 17.526), stdev = 0.585
  CI (99.9%): [16.078, 16.475] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  0V-:s,#iY
<)ue^'&qAUR[jJ<x}<Ng~#e{q%!V=x*S^j4-C(Rsrm>"D7aP`+9i  avgt  100  171.277 ± 3.720  ns/op
StringContains.stringContains     http  0V-:s,#iY
<)ue^'&qAUR[jJ<x}<Ng~#e{q%!V=x*S^j4-C(Rsrm>"D7aP`+9i  avgt  100   16.276 ± 0.198  ns/op

Benchmark result is saved to http_64_1_11.csv
