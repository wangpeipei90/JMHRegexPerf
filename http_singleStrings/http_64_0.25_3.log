# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = K
;TM7%}MwulZHLHhttp06m)QkQ*n"fGt]QhA#PzZV:=FPu*.N`[jN.\s9sz)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 659.338 ns/op
# Warmup Iteration   2: 684.887 ns/op
# Warmup Iteration   3: 689.775 ns/op
# Warmup Iteration   4: 690.482 ns/op
# Warmup Iteration   5: 620.559 ns/op
Iteration   1: 609.217 ns/op
Iteration   2: 609.313 ns/op
Iteration   3: 615.273 ns/op
Iteration   4: 609.308 ns/op
Iteration   5: 609.299 ns/op
Iteration   6: 612.394 ns/op
Iteration   7: 613.652 ns/op
Iteration   8: 609.431 ns/op
Iteration   9: 609.149 ns/op
Iteration  10: 619.812 ns/op
Iteration  11: 609.555 ns/op
Iteration  12: 609.006 ns/op
Iteration  13: 609.229 ns/op
Iteration  14: 622.188 ns/op
Iteration  15: 608.808 ns/op
Iteration  16: 608.836 ns/op
Iteration  17: 609.614 ns/op
Iteration  18: 631.560 ns/op
Iteration  19: 611.231 ns/op
Iteration  20: 610.593 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 648.575 ns/op
# Warmup Iteration   2: 667.913 ns/op
# Warmup Iteration   3: 667.567 ns/op
# Warmup Iteration   4: 670.223 ns/op
# Warmup Iteration   5: 591.453 ns/op
Iteration   1: 591.444 ns/op
Iteration   2: 591.616 ns/op
Iteration   3: 597.266 ns/op
Iteration   4: 592.065 ns/op
Iteration   5: 592.350 ns/op
Iteration   6: 599.071 ns/op
Iteration   7: 591.606 ns/op
Iteration   8: 592.354 ns/op
Iteration   9: 591.612 ns/op
Iteration  10: 600.763 ns/op
Iteration  11: 591.622 ns/op
Iteration  12: 591.604 ns/op
Iteration  13: 604.272 ns/op
Iteration  14: 591.949 ns/op
Iteration  15: 591.891 ns/op
Iteration  16: 592.028 ns/op
Iteration  17: 607.350 ns/op
Iteration  18: 592.407 ns/op
Iteration  19: 592.247 ns/op
Iteration  20: 592.546 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 660.177 ns/op
# Warmup Iteration   2: 680.714 ns/op
# Warmup Iteration   3: 684.123 ns/op
# Warmup Iteration   4: 683.956 ns/op
# Warmup Iteration   5: 617.617 ns/op
Iteration   1: 609.103 ns/op
Iteration   2: 608.929 ns/op
Iteration   3: 614.417 ns/op
Iteration   4: 609.127 ns/op
Iteration   5: 608.944 ns/op
Iteration   6: 616.654 ns/op
Iteration   7: 609.268 ns/op
Iteration   8: 608.990 ns/op
Iteration   9: 608.944 ns/op
Iteration  10: 618.857 ns/op
Iteration  11: 608.941 ns/op
Iteration  12: 609.444 ns/op
Iteration  13: 609.360 ns/op
Iteration  14: 622.527 ns/op
Iteration  15: 609.414 ns/op
Iteration  16: 609.293 ns/op
Iteration  17: 609.517 ns/op
Iteration  18: 626.003 ns/op
Iteration  19: 609.488 ns/op
Iteration  20: 609.676 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 666.220 ns/op
# Warmup Iteration   2: 683.036 ns/op
# Warmup Iteration   3: 683.547 ns/op
# Warmup Iteration   4: 683.343 ns/op
# Warmup Iteration   5: 620.219 ns/op
Iteration   1: 610.621 ns/op
Iteration   2: 610.671 ns/op
Iteration   3: 616.539 ns/op
Iteration   4: 610.633 ns/op
Iteration   5: 610.113 ns/op
Iteration   6: 612.474 ns/op
Iteration   7: 614.650 ns/op
Iteration   8: 610.017 ns/op
Iteration   9: 609.913 ns/op
Iteration  10: 620.171 ns/op
Iteration  11: 609.633 ns/op
Iteration  12: 609.520 ns/op
Iteration  13: 609.576 ns/op
Iteration  14: 622.481 ns/op
Iteration  15: 609.289 ns/op
Iteration  16: 609.636 ns/op
Iteration  17: 609.735 ns/op
Iteration  18: 626.362 ns/op
Iteration  19: 609.298 ns/op
Iteration  20: 609.659 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 653.913 ns/op
# Warmup Iteration   2: 682.402 ns/op
# Warmup Iteration   3: 684.701 ns/op
# Warmup Iteration   4: 684.434 ns/op
# Warmup Iteration   5: 617.086 ns/op
Iteration   1: 609.580 ns/op
Iteration   2: 609.748 ns/op
Iteration   3: 615.033 ns/op
Iteration   4: 609.339 ns/op
Iteration   5: 609.606 ns/op
Iteration   6: 617.077 ns/op
Iteration   7: 609.495 ns/op
Iteration   8: 609.556 ns/op
Iteration   9: 609.350 ns/op
Iteration  10: 619.657 ns/op
Iteration  11: 609.625 ns/op
Iteration  12: 609.757 ns/op
Iteration  13: 609.887 ns/op
Iteration  14: 624.584 ns/op
Iteration  15: 609.469 ns/op
Iteration  16: 609.497 ns/op
Iteration  17: 610.222 ns/op
Iteration  18: 625.866 ns/op
Iteration  19: 609.642 ns/op
Iteration  20: 609.460 ns/op


Result "benchmark.StringContains.regexMatches":
  608.699 ±(99.9%) 2.989 ns/op [Average]
  (min, avg, max) = (591.444, 608.699, 631.560), stdev = 8.814
  CI (99.9%): [605.709, 611.688] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = K
;TM7%}MwulZHLHhttp06m)QkQ*n"fGt]QhA#PzZV:=FPu*.N`[jN.\s9sz)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.959 ns/op
# Warmup Iteration   2: 12.526 ns/op
# Warmup Iteration   3: 12.142 ns/op
# Warmup Iteration   4: 12.135 ns/op
# Warmup Iteration   5: 12.142 ns/op
Iteration   1: 12.149 ns/op
Iteration   2: 12.132 ns/op
Iteration   3: 12.151 ns/op
Iteration   4: 12.153 ns/op
Iteration   5: 12.138 ns/op
Iteration   6: 12.156 ns/op
Iteration   7: 12.117 ns/op
Iteration   8: 12.147 ns/op
Iteration   9: 12.141 ns/op
Iteration  10: 12.144 ns/op
Iteration  11: 12.141 ns/op
Iteration  12: 12.149 ns/op
Iteration  13: 12.155 ns/op
Iteration  14: 12.141 ns/op
Iteration  15: 12.151 ns/op
Iteration  16: 12.134 ns/op
Iteration  17: 12.137 ns/op
Iteration  18: 12.146 ns/op
Iteration  19: 12.154 ns/op
Iteration  20: 12.132 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 12.033 ns/op
# Warmup Iteration   2: 12.538 ns/op
# Warmup Iteration   3: 12.108 ns/op
# Warmup Iteration   4: 12.120 ns/op
# Warmup Iteration   5: 12.125 ns/op
Iteration   1: 12.113 ns/op
Iteration   2: 12.115 ns/op
Iteration   3: 12.136 ns/op
Iteration   4: 12.115 ns/op
Iteration   5: 12.115 ns/op
Iteration   6: 12.111 ns/op
Iteration   7: 12.124 ns/op
Iteration   8: 12.135 ns/op
Iteration   9: 12.123 ns/op
Iteration  10: 12.129 ns/op
Iteration  11: 12.121 ns/op
Iteration  12: 12.140 ns/op
Iteration  13: 12.120 ns/op
Iteration  14: 12.128 ns/op
Iteration  15: 12.131 ns/op
Iteration  16: 12.157 ns/op
Iteration  17: 12.138 ns/op
Iteration  18: 12.146 ns/op
Iteration  19: 12.128 ns/op
Iteration  20: 12.128 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.276 ns/op
# Warmup Iteration   2: 12.564 ns/op
# Warmup Iteration   3: 12.119 ns/op
# Warmup Iteration   4: 12.129 ns/op
# Warmup Iteration   5: 12.128 ns/op
Iteration   1: 12.143 ns/op
Iteration   2: 12.140 ns/op
Iteration   3: 12.133 ns/op
Iteration   4: 12.146 ns/op
Iteration   5: 12.154 ns/op
Iteration   6: 12.140 ns/op
Iteration   7: 12.157 ns/op
Iteration   8: 12.138 ns/op
Iteration   9: 12.141 ns/op
Iteration  10: 12.148 ns/op
Iteration  11: 12.148 ns/op
Iteration  12: 12.160 ns/op
Iteration  13: 12.136 ns/op
Iteration  14: 12.144 ns/op
Iteration  15: 12.131 ns/op
Iteration  16: 12.144 ns/op
Iteration  17: 12.148 ns/op
Iteration  18: 12.132 ns/op
Iteration  19: 12.142 ns/op
Iteration  20: 12.152 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.269 ns/op
# Warmup Iteration   2: 12.547 ns/op
# Warmup Iteration   3: 12.128 ns/op
# Warmup Iteration   4: 12.124 ns/op
# Warmup Iteration   5: 12.119 ns/op
Iteration   1: 12.126 ns/op
Iteration   2: 12.147 ns/op
Iteration   3: 12.133 ns/op
Iteration   4: 12.146 ns/op
Iteration   5: 12.143 ns/op
Iteration   6: 12.135 ns/op
Iteration   7: 12.128 ns/op
Iteration   8: 12.136 ns/op
Iteration   9: 12.135 ns/op
Iteration  10: 12.152 ns/op
Iteration  11: 12.138 ns/op
Iteration  12: 12.135 ns/op
Iteration  13: 12.141 ns/op
Iteration  14: 12.140 ns/op
Iteration  15: 12.135 ns/op
Iteration  16: 12.144 ns/op
Iteration  17: 12.127 ns/op
Iteration  18: 12.149 ns/op
Iteration  19: 12.138 ns/op
Iteration  20: 12.132 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.297 ns/op
# Warmup Iteration   2: 12.783 ns/op
# Warmup Iteration   3: 12.151 ns/op
# Warmup Iteration   4: 12.137 ns/op
# Warmup Iteration   5: 12.155 ns/op
Iteration   1: 12.152 ns/op
Iteration   2: 12.124 ns/op
Iteration   3: 12.114 ns/op
Iteration   4: 12.128 ns/op
Iteration   5: 12.145 ns/op
Iteration   6: 12.133 ns/op
Iteration   7: 12.135 ns/op
Iteration   8: 12.148 ns/op
Iteration   9: 12.117 ns/op
Iteration  10: 12.140 ns/op
Iteration  11: 12.113 ns/op
Iteration  12: 12.139 ns/op
Iteration  13: 12.132 ns/op
Iteration  14: 12.155 ns/op
Iteration  15: 12.141 ns/op
Iteration  16: 12.120 ns/op
Iteration  17: 12.134 ns/op
Iteration  18: 12.140 ns/op
Iteration  19: 12.121 ns/op
Iteration  20: 12.150 ns/op


Result "benchmark.StringContains.stringContains":
  12.137 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (12.111, 12.137, 12.160), stdev = 0.012
  CI (99.9%): [12.133, 12.141] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  K
;TM7%}MwulZHLHhttp06m)QkQ*n"fGt]QhA#PzZV:=FPu*.N`[jN.\s9sz  avgt  100  608.699 ± 2.989  ns/op
StringContains.stringContains     http  K
;TM7%}MwulZHLHhttp06m)QkQ*n"fGt]QhA#PzZV:=FPu*.N`[jN.\s9sz  avgt  100   12.137 ± 0.004  ns/op

Benchmark result is saved to http_64_0.25_3.csv
