# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Icbmc:2httpuGZ{H_"xQT!{&qSa_2}^)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 431.060 ns/op
# Warmup Iteration   2: 446.479 ns/op
# Warmup Iteration   3: 413.399 ns/op
# Warmup Iteration   4: 353.713 ns/op
# Warmup Iteration   5: 357.737 ns/op
Iteration   1: 353.993 ns/op
Iteration   2: 359.344 ns/op
Iteration   3: 354.002 ns/op
Iteration   4: 361.197 ns/op
Iteration   5: 354.521 ns/op
Iteration   6: 363.373 ns/op
Iteration   7: 354.245 ns/op
Iteration   8: 354.120 ns/op
Iteration   9: 365.504 ns/op
Iteration  10: 353.965 ns/op
Iteration  11: 356.069 ns/op
Iteration  12: 353.945 ns/op
Iteration  13: 355.546 ns/op
Iteration  14: 353.980 ns/op
Iteration  15: 354.121 ns/op
Iteration  16: 357.068 ns/op
Iteration  17: 354.187 ns/op
Iteration  18: 363.123 ns/op
Iteration  19: 353.807 ns/op
Iteration  20: 356.191 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 340.273 ns/op
# Warmup Iteration   2: 324.781 ns/op
# Warmup Iteration   3: 245.114 ns/op
# Warmup Iteration   4: 246.446 ns/op
# Warmup Iteration   5: 247.158 ns/op
Iteration   1: 244.040 ns/op
Iteration   2: 248.193 ns/op
Iteration   3: 249.583 ns/op
Iteration   4: 243.772 ns/op
Iteration   5: 251.140 ns/op
Iteration   6: 245.196 ns/op
Iteration   7: 243.909 ns/op
Iteration   8: 245.218 ns/op
Iteration   9: 243.747 ns/op
Iteration  10: 245.115 ns/op
Iteration  11: 246.654 ns/op
Iteration  12: 243.773 ns/op
Iteration  13: 246.289 ns/op
Iteration  14: 244.938 ns/op
Iteration  15: 244.013 ns/op
Iteration  16: 245.214 ns/op
Iteration  17: 245.060 ns/op
Iteration  18: 243.900 ns/op
Iteration  19: 245.258 ns/op
Iteration  20: 244.010 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 419.817 ns/op
# Warmup Iteration   2: 430.744 ns/op
# Warmup Iteration   3: 396.313 ns/op
# Warmup Iteration   4: 354.131 ns/op
# Warmup Iteration   5: 357.394 ns/op
Iteration   1: 353.742 ns/op
Iteration   2: 358.603 ns/op
Iteration   3: 354.177 ns/op
Iteration   4: 360.235 ns/op
Iteration   5: 354.209 ns/op
Iteration   6: 362.027 ns/op
Iteration   7: 354.164 ns/op
Iteration   8: 354.182 ns/op
Iteration   9: 364.370 ns/op
Iteration  10: 354.201 ns/op
Iteration  11: 355.801 ns/op
Iteration  12: 354.210 ns/op
Iteration  13: 356.013 ns/op
Iteration  14: 354.025 ns/op
Iteration  15: 356.056 ns/op
Iteration  16: 353.916 ns/op
Iteration  17: 353.797 ns/op
Iteration  18: 355.620 ns/op
Iteration  19: 354.227 ns/op
Iteration  20: 356.191 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 416.512 ns/op
# Warmup Iteration   2: 430.734 ns/op
# Warmup Iteration   3: 395.710 ns/op
# Warmup Iteration   4: 354.779 ns/op
# Warmup Iteration   5: 358.057 ns/op
Iteration   1: 354.406 ns/op
Iteration   2: 359.256 ns/op
Iteration   3: 354.714 ns/op
Iteration   4: 360.758 ns/op
Iteration   5: 354.619 ns/op
Iteration   6: 362.445 ns/op
Iteration   7: 355.545 ns/op
Iteration   8: 355.143 ns/op
Iteration   9: 366.171 ns/op
Iteration  10: 354.346 ns/op
Iteration  11: 357.394 ns/op
Iteration  12: 354.764 ns/op
Iteration  13: 356.807 ns/op
Iteration  14: 354.040 ns/op
Iteration  15: 357.100 ns/op
Iteration  16: 354.191 ns/op
Iteration  17: 354.261 ns/op
Iteration  18: 357.093 ns/op
Iteration  19: 354.247 ns/op
Iteration  20: 359.415 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 431.988 ns/op
# Warmup Iteration   2: 434.683 ns/op
# Warmup Iteration   3: 405.741 ns/op
# Warmup Iteration   4: 360.399 ns/op
# Warmup Iteration   5: 364.108 ns/op
Iteration   1: 360.310 ns/op
Iteration   2: 365.441 ns/op
Iteration   3: 360.322 ns/op
Iteration   4: 366.197 ns/op
Iteration   5: 362.090 ns/op
Iteration   6: 360.729 ns/op
Iteration   7: 370.999 ns/op
Iteration   8: 360.758 ns/op
Iteration   9: 375.119 ns/op
Iteration  10: 360.502 ns/op
Iteration  11: 362.783 ns/op
Iteration  12: 360.689 ns/op
Iteration  13: 360.672 ns/op
Iteration  14: 362.525 ns/op
Iteration  15: 360.590 ns/op
Iteration  16: 362.563 ns/op
Iteration  17: 360.555 ns/op
Iteration  18: 362.507 ns/op
Iteration  19: 360.201 ns/op
Iteration  20: 360.481 ns/op


Result "benchmark.StringContains.regexMatches":
  335.538 ±(99.9%) 15.415 ns/op [Average]
  (min, avg, max) = (243.747, 335.538, 375.119), stdev = 45.452
  CI (99.9%): [320.123, 350.953] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Icbmc:2httpuGZ{H_"xQT!{&qSa_2}^)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.221 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.878 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.883 ns/op
Iteration   2: 9.903 ns/op
Iteration   3: 9.897 ns/op
Iteration   4: 9.878 ns/op
Iteration   5: 9.906 ns/op
Iteration   6: 9.876 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.886 ns/op
Iteration   9: 9.871 ns/op
Iteration  10: 9.877 ns/op
Iteration  11: 9.880 ns/op
Iteration  12: 9.880 ns/op
Iteration  13: 9.871 ns/op
Iteration  14: 9.882 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.870 ns/op
Iteration  17: 9.863 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.869 ns/op
Iteration  20: 9.847 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.224 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.868 ns/op
# Warmup Iteration   4: 9.875 ns/op
# Warmup Iteration   5: 9.860 ns/op
Iteration   1: 9.870 ns/op
Iteration   2: 9.880 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.869 ns/op
Iteration   5: 9.878 ns/op
Iteration   6: 9.882 ns/op
Iteration   7: 9.894 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.884 ns/op
Iteration  10: 9.866 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.870 ns/op
Iteration  13: 9.870 ns/op
Iteration  14: 9.853 ns/op
Iteration  15: 9.878 ns/op
Iteration  16: 9.865 ns/op
Iteration  17: 9.862 ns/op
Iteration  18: 9.872 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.867 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.474 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.848 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.861 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.874 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.849 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.855 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.867 ns/op
Iteration  10: 9.874 ns/op
Iteration  11: 9.883 ns/op
Iteration  12: 9.855 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.869 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.835 ns/op
Iteration  17: 9.868 ns/op
Iteration  18: 9.878 ns/op
Iteration  19: 9.850 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.218 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.974 ns/op
# Warmup Iteration   4: 9.977 ns/op
# Warmup Iteration   5: 9.967 ns/op
Iteration   1: 9.970 ns/op
Iteration   2: 9.966 ns/op
Iteration   3: 9.992 ns/op
Iteration   4: 9.986 ns/op
Iteration   5: 10.001 ns/op
Iteration   6: 9.972 ns/op
Iteration   7: 10.011 ns/op
Iteration   8: 9.984 ns/op
Iteration   9: 9.957 ns/op
Iteration  10: 9.991 ns/op
Iteration  11: 9.976 ns/op
Iteration  12: 9.984 ns/op
Iteration  13: 9.986 ns/op
Iteration  14: 10.016 ns/op
Iteration  15: 9.985 ns/op
Iteration  16: 9.979 ns/op
Iteration  17: 9.984 ns/op
Iteration  18: 9.992 ns/op
Iteration  19: 9.972 ns/op
Iteration  20: 9.975 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.244 ns/op
# Warmup Iteration   2: 9.731 ns/op
# Warmup Iteration   3: 9.877 ns/op
# Warmup Iteration   4: 9.896 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.868 ns/op
Iteration   2: 9.863 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.866 ns/op
Iteration   5: 9.877 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.867 ns/op
Iteration  11: 9.870 ns/op
Iteration  12: 9.867 ns/op
Iteration  13: 9.854 ns/op
Iteration  14: 9.856 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.854 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.874 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.867 ns/op


Result "benchmark.StringContains.stringContains":
  9.893 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (9.835, 9.893, 10.016), stdev = 0.047
  CI (99.9%): [9.877, 9.909] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score    Error  Units
StringContains.regexMatches       http  Icbmc:2httpuGZ{H_"xQT!{&qSa_2}^  avgt  100  335.538 ± 15.415  ns/op
StringContains.stringContains     http  Icbmc:2httpuGZ{H_"xQT!{&qSa_2}^  avgt  100    9.893 ±  0.016  ns/op

Benchmark result is saved to http_32_0.25_7.csv
