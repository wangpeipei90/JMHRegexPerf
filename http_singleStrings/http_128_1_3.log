# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 4'Z5tJg0x:KHuOuPD4~w\18!4<y,	kM0|[Pn&Lrp+uZ^_[SM6JG>O^]t$]h*z\n
+Sl~xnx~6Gm$f`nl~hg2
096~s^2]p>R+HU#V
/4!`(-Us=HN|w( wHA7Fg`)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 924.964 ns/op
# Warmup Iteration   2: 907.488 ns/op
# Warmup Iteration   3: 904.797 ns/op
# Warmup Iteration   4: 903.995 ns/op
# Warmup Iteration   5: 903.918 ns/op
Iteration   1: 863.723 ns/op
Iteration   2: 823.550 ns/op
Iteration   3: 823.344 ns/op
Iteration   4: 823.402 ns/op
Iteration   5: 823.394 ns/op
Iteration   6: 832.051 ns/op
Iteration   7: 823.485 ns/op
Iteration   8: 823.395 ns/op
Iteration   9: 823.333 ns/op
Iteration  10: 837.264 ns/op
Iteration  11: 823.619 ns/op
Iteration  12: 824.369 ns/op
Iteration  13: 824.292 ns/op
Iteration  14: 824.542 ns/op
Iteration  15: 839.688 ns/op
Iteration  16: 825.975 ns/op
Iteration  17: 825.179 ns/op
Iteration  18: 824.925 ns/op
Iteration  19: 824.973 ns/op
Iteration  20: 842.585 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 892.914 ns/op
# Warmup Iteration   2: 887.520 ns/op
# Warmup Iteration   3: 885.011 ns/op
# Warmup Iteration   4: 884.231 ns/op
# Warmup Iteration   5: 883.758 ns/op
Iteration   1: 837.702 ns/op
Iteration   2: 810.499 ns/op
Iteration   3: 810.412 ns/op
Iteration   4: 810.627 ns/op
Iteration   5: 818.052 ns/op
Iteration   6: 810.657 ns/op
Iteration   7: 810.626 ns/op
Iteration   8: 810.720 ns/op
Iteration   9: 810.612 ns/op
Iteration  10: 820.588 ns/op
Iteration  11: 810.773 ns/op
Iteration  12: 810.710 ns/op
Iteration  13: 810.697 ns/op
Iteration  14: 810.591 ns/op
Iteration  15: 824.047 ns/op
Iteration  16: 810.541 ns/op
Iteration  17: 810.569 ns/op
Iteration  18: 810.575 ns/op
Iteration  19: 811.535 ns/op
Iteration  20: 827.405 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 903.885 ns/op
# Warmup Iteration   2: 899.862 ns/op
# Warmup Iteration   3: 900.698 ns/op
# Warmup Iteration   4: 900.677 ns/op
# Warmup Iteration   5: 900.958 ns/op
Iteration   1: 862.983 ns/op
Iteration   2: 826.336 ns/op
Iteration   3: 826.608 ns/op
Iteration   4: 826.770 ns/op
Iteration   5: 827.114 ns/op
Iteration   6: 834.071 ns/op
Iteration   7: 826.274 ns/op
Iteration   8: 826.528 ns/op
Iteration   9: 826.626 ns/op
Iteration  10: 836.636 ns/op
Iteration  11: 826.405 ns/op
Iteration  12: 826.524 ns/op
Iteration  13: 826.600 ns/op
Iteration  14: 826.719 ns/op
Iteration  15: 840.233 ns/op
Iteration  16: 826.232 ns/op
Iteration  17: 826.490 ns/op
Iteration  18: 826.792 ns/op
Iteration  19: 826.759 ns/op
Iteration  20: 844.742 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 905.432 ns/op
# Warmup Iteration   2: 899.746 ns/op
# Warmup Iteration   3: 897.715 ns/op
# Warmup Iteration   4: 897.739 ns/op
# Warmup Iteration   5: 897.655 ns/op
Iteration   1: 858.493 ns/op
Iteration   2: 823.247 ns/op
Iteration   3: 823.139 ns/op
Iteration   4: 823.181 ns/op
Iteration   5: 825.210 ns/op
Iteration   6: 829.605 ns/op
Iteration   7: 823.460 ns/op
Iteration   8: 823.608 ns/op
Iteration   9: 823.475 ns/op
Iteration  10: 835.086 ns/op
Iteration  11: 823.338 ns/op
Iteration  12: 823.533 ns/op
Iteration  13: 823.451 ns/op
Iteration  14: 823.565 ns/op
Iteration  15: 838.045 ns/op
Iteration  16: 825.530 ns/op
Iteration  17: 825.450 ns/op
Iteration  18: 825.531 ns/op
Iteration  19: 825.614 ns/op
Iteration  20: 842.487 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 906.199 ns/op
# Warmup Iteration   2: 899.085 ns/op
# Warmup Iteration   3: 895.607 ns/op
# Warmup Iteration   4: 894.980 ns/op
# Warmup Iteration   5: 895.093 ns/op
Iteration   1: 856.803 ns/op
Iteration   2: 820.835 ns/op
Iteration   3: 820.849 ns/op
Iteration   4: 820.792 ns/op
Iteration   5: 828.262 ns/op
Iteration   6: 821.066 ns/op
Iteration   7: 821.064 ns/op
Iteration   8: 822.264 ns/op
Iteration   9: 820.918 ns/op
Iteration  10: 831.324 ns/op
Iteration  11: 820.573 ns/op
Iteration  12: 821.034 ns/op
Iteration  13: 820.935 ns/op
Iteration  14: 820.868 ns/op
Iteration  15: 834.242 ns/op
Iteration  16: 820.944 ns/op
Iteration  17: 820.977 ns/op
Iteration  18: 820.967 ns/op
Iteration  19: 820.715 ns/op
Iteration  20: 840.188 ns/op


Result "benchmark.StringContains.regexMatches":
  825.531 ±(99.9%) 3.611 ns/op [Average]
  (min, avg, max) = (810.412, 825.531, 863.723), stdev = 10.647
  CI (99.9%): [821.920, 829.142] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 4'Z5tJg0x:KHuOuPD4~w\18!4<y,	kM0|[Pn&Lrp+uZ^_[SM6JG>O^]t$]h*z\n
+Sl~xnx~6Gm$f`nl~hg2
096~s^2]p>R+HU#V
/4!`(-Us=HN|w( wHA7Fg`)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.520 ns/op
# Warmup Iteration   2: 24.669 ns/op
# Warmup Iteration   3: 24.564 ns/op
# Warmup Iteration   4: 24.573 ns/op
# Warmup Iteration   5: 24.563 ns/op
Iteration   1: 24.578 ns/op
Iteration   2: 24.564 ns/op
Iteration   3: 24.562 ns/op
Iteration   4: 24.565 ns/op
Iteration   5: 24.568 ns/op
Iteration   6: 24.567 ns/op
Iteration   7: 24.565 ns/op
Iteration   8: 24.566 ns/op
Iteration   9: 24.564 ns/op
Iteration  10: 24.565 ns/op
Iteration  11: 24.565 ns/op
Iteration  12: 24.566 ns/op
Iteration  13: 24.564 ns/op
Iteration  14: 24.566 ns/op
Iteration  15: 24.565 ns/op
Iteration  16: 24.563 ns/op
Iteration  17: 24.567 ns/op
Iteration  18: 24.565 ns/op
Iteration  19: 24.580 ns/op
Iteration  20: 24.566 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.407 ns/op
# Warmup Iteration   2: 24.641 ns/op
# Warmup Iteration   3: 24.593 ns/op
# Warmup Iteration   4: 24.577 ns/op
# Warmup Iteration   5: 24.580 ns/op
Iteration   1: 24.575 ns/op
Iteration   2: 24.586 ns/op
Iteration   3: 24.582 ns/op
Iteration   4: 24.592 ns/op
Iteration   5: 24.580 ns/op
Iteration   6: 24.581 ns/op
Iteration   7: 24.585 ns/op
Iteration   8: 24.589 ns/op
Iteration   9: 24.577 ns/op
Iteration  10: 24.606 ns/op
Iteration  11: 24.578 ns/op
Iteration  12: 24.578 ns/op
Iteration  13: 24.588 ns/op
Iteration  14: 24.588 ns/op
Iteration  15: 24.594 ns/op
Iteration  16: 24.578 ns/op
Iteration  17: 24.584 ns/op
Iteration  18: 24.579 ns/op
Iteration  19: 24.582 ns/op
Iteration  20: 24.582 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.472 ns/op
# Warmup Iteration   2: 24.622 ns/op
# Warmup Iteration   3: 24.574 ns/op
# Warmup Iteration   4: 24.575 ns/op
# Warmup Iteration   5: 24.577 ns/op
Iteration   1: 24.576 ns/op
Iteration   2: 24.565 ns/op
Iteration   3: 24.576 ns/op
Iteration   4: 24.575 ns/op
Iteration   5: 24.565 ns/op
Iteration   6: 24.568 ns/op
Iteration   7: 24.586 ns/op
Iteration   8: 24.570 ns/op
Iteration   9: 24.585 ns/op
Iteration  10: 24.571 ns/op
Iteration  11: 24.565 ns/op
Iteration  12: 24.564 ns/op
Iteration  13: 24.576 ns/op
Iteration  14: 24.564 ns/op
Iteration  15: 24.566 ns/op
Iteration  16: 24.564 ns/op
Iteration  17: 24.564 ns/op
Iteration  18: 24.566 ns/op
Iteration  19: 24.564 ns/op
Iteration  20: 24.567 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.482 ns/op
# Warmup Iteration   2: 24.656 ns/op
# Warmup Iteration   3: 24.572 ns/op
# Warmup Iteration   4: 24.573 ns/op
# Warmup Iteration   5: 24.571 ns/op
Iteration   1: 24.571 ns/op
Iteration   2: 24.573 ns/op
Iteration   3: 24.587 ns/op
Iteration   4: 24.582 ns/op
Iteration   5: 24.578 ns/op
Iteration   6: 24.596 ns/op
Iteration   7: 24.588 ns/op
Iteration   8: 24.595 ns/op
Iteration   9: 24.581 ns/op
Iteration  10: 24.595 ns/op
Iteration  11: 24.592 ns/op
Iteration  12: 24.578 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.578 ns/op
Iteration  15: 24.587 ns/op
Iteration  16: 24.576 ns/op
Iteration  17: 24.571 ns/op
Iteration  18: 24.614 ns/op
Iteration  19: 24.582 ns/op
Iteration  20: 24.578 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.437 ns/op
# Warmup Iteration   2: 24.677 ns/op
# Warmup Iteration   3: 24.589 ns/op
# Warmup Iteration   4: 24.573 ns/op
# Warmup Iteration   5: 24.578 ns/op
Iteration   1: 24.602 ns/op
Iteration   2: 24.598 ns/op
Iteration   3: 24.586 ns/op
Iteration   4: 24.586 ns/op
Iteration   5: 24.576 ns/op
Iteration   6: 24.584 ns/op
Iteration   7: 24.580 ns/op
Iteration   8: 24.618 ns/op
Iteration   9: 24.579 ns/op
Iteration  10: 24.574 ns/op
Iteration  11: 24.577 ns/op
Iteration  12: 24.581 ns/op
Iteration  13: 24.573 ns/op
Iteration  14: 24.570 ns/op
Iteration  15: 24.573 ns/op
Iteration  16: 24.572 ns/op
Iteration  17: 24.573 ns/op
Iteration  18: 24.581 ns/op
Iteration  19: 24.572 ns/op
Iteration  20: 24.621 ns/op


Result "benchmark.StringContains.stringContains":
  24.578 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (24.562, 24.578, 24.621), stdev = 0.012
  CI (99.9%): [24.573, 24.582] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  4'Z5tJg0x:KHuOuPD4~w\18!4<y,	kM0|[Pn&Lrp+uZ^_[SM6JG>O^]t$]h*z\n
+Sl~xnx~6Gm$f`nl~hg2
096~s^2]p>R+HU#V
/4!`(-Us=HN|w( wHA7Fg`  avgt  100  825.531 ± 3.611  ns/op
StringContains.stringContains     http  4'Z5tJg0x:KHuOuPD4~w\18!4<y,	kM0|[Pn&Lrp+uZ^_[SM6JG>O^]t$]h*z\n
+Sl~xnx~6Gm$f`nl~hg2
096~s^2]p>R+HU#V
/4!`(-Us=HN|w( wHA7Fg`  avgt  100   24.578 ± 0.004  ns/op

Benchmark result is saved to http_128_1_3.csv
