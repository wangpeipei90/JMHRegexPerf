# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = f1
%G_tT)C#!h^,B|(gh4^SpUC9]no^4)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 352.039 ns/op
# Warmup Iteration   2: 347.401 ns/op
# Warmup Iteration   3: 271.409 ns/op
# Warmup Iteration   4: 267.407 ns/op
# Warmup Iteration   5: 263.133 ns/op
Iteration   1: 266.640 ns/op
Iteration   2: 267.874 ns/op
Iteration   3: 263.164 ns/op
Iteration   4: 268.988 ns/op
Iteration   5: 271.341 ns/op
Iteration   6: 264.851 ns/op
Iteration   7: 264.929 ns/op
Iteration   8: 263.155 ns/op
Iteration   9: 264.237 ns/op
Iteration  10: 263.141 ns/op
Iteration  11: 264.096 ns/op
Iteration  12: 264.458 ns/op
Iteration  13: 263.081 ns/op
Iteration  14: 264.322 ns/op
Iteration  15: 263.118 ns/op
Iteration  16: 264.311 ns/op
Iteration  17: 264.342 ns/op
Iteration  18: 263.145 ns/op
Iteration  19: 264.473 ns/op
Iteration  20: 263.084 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 333.267 ns/op
# Warmup Iteration   2: 324.689 ns/op
# Warmup Iteration   3: 246.482 ns/op
# Warmup Iteration   4: 248.689 ns/op
# Warmup Iteration   5: 249.516 ns/op
Iteration   1: 246.363 ns/op
Iteration   2: 250.471 ns/op
Iteration   3: 251.877 ns/op
Iteration   4: 246.226 ns/op
Iteration   5: 253.561 ns/op
Iteration   6: 247.889 ns/op
Iteration   7: 246.334 ns/op
Iteration   8: 247.394 ns/op
Iteration   9: 246.293 ns/op
Iteration  10: 247.361 ns/op
Iteration  11: 247.496 ns/op
Iteration  12: 246.246 ns/op
Iteration  13: 247.373 ns/op
Iteration  14: 247.410 ns/op
Iteration  15: 246.293 ns/op
Iteration  16: 247.727 ns/op
Iteration  17: 246.319 ns/op
Iteration  18: 247.399 ns/op
Iteration  19: 247.402 ns/op
Iteration  20: 246.320 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 351.851 ns/op
# Warmup Iteration   2: 343.287 ns/op
# Warmup Iteration   3: 270.123 ns/op
# Warmup Iteration   4: 265.671 ns/op
# Warmup Iteration   5: 263.169 ns/op
Iteration   1: 266.510 ns/op
Iteration   2: 267.685 ns/op
Iteration   3: 263.178 ns/op
Iteration   4: 268.962 ns/op
Iteration   5: 271.388 ns/op
Iteration   6: 263.431 ns/op
Iteration   7: 264.840 ns/op
Iteration   8: 263.535 ns/op
Iteration   9: 264.536 ns/op
Iteration  10: 263.389 ns/op
Iteration  11: 264.633 ns/op
Iteration  12: 264.621 ns/op
Iteration  13: 263.376 ns/op
Iteration  14: 265.035 ns/op
Iteration  15: 263.777 ns/op
Iteration  16: 266.466 ns/op
Iteration  17: 270.338 ns/op
Iteration  18: 263.431 ns/op
Iteration  19: 265.343 ns/op
Iteration  20: 263.134 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 333.044 ns/op
# Warmup Iteration   2: 323.861 ns/op
# Warmup Iteration   3: 246.472 ns/op
# Warmup Iteration   4: 248.717 ns/op
# Warmup Iteration   5: 249.412 ns/op
Iteration   1: 246.346 ns/op
Iteration   2: 250.417 ns/op
Iteration   3: 251.826 ns/op
Iteration   4: 246.277 ns/op
Iteration   5: 253.188 ns/op
Iteration   6: 248.190 ns/op
Iteration   7: 246.330 ns/op
Iteration   8: 247.576 ns/op
Iteration   9: 246.291 ns/op
Iteration  10: 247.535 ns/op
Iteration  11: 247.661 ns/op
Iteration  12: 246.311 ns/op
Iteration  13: 247.450 ns/op
Iteration  14: 247.728 ns/op
Iteration  15: 246.275 ns/op
Iteration  16: 247.772 ns/op
Iteration  17: 252.709 ns/op
Iteration  18: 246.242 ns/op
Iteration  19: 248.526 ns/op
Iteration  20: 246.396 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 350.411 ns/op
# Warmup Iteration   2: 343.983 ns/op
# Warmup Iteration   3: 270.088 ns/op
# Warmup Iteration   4: 265.554 ns/op
# Warmup Iteration   5: 263.087 ns/op
Iteration   1: 266.498 ns/op
Iteration   2: 267.537 ns/op
Iteration   3: 263.418 ns/op
Iteration   4: 268.969 ns/op
Iteration   5: 270.695 ns/op
Iteration   6: 263.094 ns/op
Iteration   7: 264.569 ns/op
Iteration   8: 263.155 ns/op
Iteration   9: 264.351 ns/op
Iteration  10: 263.056 ns/op
Iteration  11: 264.358 ns/op
Iteration  12: 264.271 ns/op
Iteration  13: 263.074 ns/op
Iteration  14: 264.167 ns/op
Iteration  15: 263.030 ns/op
Iteration  16: 266.008 ns/op
Iteration  17: 264.241 ns/op
Iteration  18: 263.461 ns/op
Iteration  19: 264.407 ns/op
Iteration  20: 262.987 ns/op


Result "benchmark.StringContains.regexMatches":
  258.145 ±(99.9%) 2.954 ns/op [Average]
  (min, avg, max) = (246.226, 258.145, 271.388), stdev = 8.710
  CI (99.9%): [255.191, 261.099] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = f1
%G_tT)C#!h^,B|(gh4^SpUC9]no^4)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 10.258 ns/op
# Warmup Iteration   2: 11.205 ns/op
# Warmup Iteration   3: 11.404 ns/op
# Warmup Iteration   4: 11.424 ns/op
# Warmup Iteration   5: 11.433 ns/op
Iteration   1: 11.416 ns/op
Iteration   2: 11.401 ns/op
Iteration   3: 11.416 ns/op
Iteration   4: 11.376 ns/op
Iteration   5: 11.406 ns/op
Iteration   6: 11.412 ns/op
Iteration   7: 11.368 ns/op
Iteration   8: 11.380 ns/op
Iteration   9: 11.396 ns/op
Iteration  10: 11.388 ns/op
Iteration  11: 11.383 ns/op
Iteration  12: 11.377 ns/op
Iteration  13: 11.414 ns/op
Iteration  14: 11.433 ns/op
Iteration  15: 11.413 ns/op
Iteration  16: 11.408 ns/op
Iteration  17: 11.415 ns/op
Iteration  18: 11.419 ns/op
Iteration  19: 11.402 ns/op
Iteration  20: 11.383 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 10.271 ns/op
# Warmup Iteration   2: 11.217 ns/op
# Warmup Iteration   3: 11.166 ns/op
# Warmup Iteration   4: 11.167 ns/op
# Warmup Iteration   5: 11.166 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.167 ns/op
Iteration   3: 11.166 ns/op
Iteration   4: 11.167 ns/op
Iteration   5: 11.166 ns/op
Iteration   6: 11.167 ns/op
Iteration   7: 11.166 ns/op
Iteration   8: 11.185 ns/op
Iteration   9: 11.167 ns/op
Iteration  10: 11.166 ns/op
Iteration  11: 11.167 ns/op
Iteration  12: 11.166 ns/op
Iteration  13: 11.166 ns/op
Iteration  14: 11.167 ns/op
Iteration  15: 11.166 ns/op
Iteration  16: 11.167 ns/op
Iteration  17: 11.167 ns/op
Iteration  18: 11.185 ns/op
Iteration  19: 11.167 ns/op
Iteration  20: 11.186 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 10.270 ns/op
# Warmup Iteration   2: 11.222 ns/op
# Warmup Iteration   3: 11.172 ns/op
# Warmup Iteration   4: 11.173 ns/op
# Warmup Iteration   5: 11.171 ns/op
Iteration   1: 11.173 ns/op
Iteration   2: 11.171 ns/op
Iteration   3: 11.171 ns/op
Iteration   4: 11.173 ns/op
Iteration   5: 11.171 ns/op
Iteration   6: 11.171 ns/op
Iteration   7: 11.169 ns/op
Iteration   8: 11.189 ns/op
Iteration   9: 11.171 ns/op
Iteration  10: 11.171 ns/op
Iteration  11: 11.172 ns/op
Iteration  12: 11.170 ns/op
Iteration  13: 11.171 ns/op
Iteration  14: 11.171 ns/op
Iteration  15: 11.168 ns/op
Iteration  16: 11.171 ns/op
Iteration  17: 11.171 ns/op
Iteration  18: 11.169 ns/op
Iteration  19: 11.171 ns/op
Iteration  20: 11.171 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 10.285 ns/op
# Warmup Iteration   2: 11.203 ns/op
# Warmup Iteration   3: 11.209 ns/op
# Warmup Iteration   4: 11.208 ns/op
# Warmup Iteration   5: 11.210 ns/op
Iteration   1: 11.210 ns/op
Iteration   2: 11.208 ns/op
Iteration   3: 11.209 ns/op
Iteration   4: 11.209 ns/op
Iteration   5: 11.210 ns/op
Iteration   6: 11.209 ns/op
Iteration   7: 11.209 ns/op
Iteration   8: 11.211 ns/op
Iteration   9: 11.209 ns/op
Iteration  10: 11.210 ns/op
Iteration  11: 11.208 ns/op
Iteration  12: 11.208 ns/op
Iteration  13: 11.209 ns/op
Iteration  14: 11.209 ns/op
Iteration  15: 11.209 ns/op
Iteration  16: 11.209 ns/op
Iteration  17: 11.209 ns/op
Iteration  18: 11.209 ns/op
Iteration  19: 11.208 ns/op
Iteration  20: 11.212 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 10.270 ns/op
# Warmup Iteration   2: 11.223 ns/op
# Warmup Iteration   3: 11.172 ns/op
# Warmup Iteration   4: 11.171 ns/op
# Warmup Iteration   5: 11.171 ns/op
Iteration   1: 11.170 ns/op
Iteration   2: 11.171 ns/op
Iteration   3: 11.170 ns/op
Iteration   4: 11.169 ns/op
Iteration   5: 11.171 ns/op
Iteration   6: 11.171 ns/op
Iteration   7: 11.170 ns/op
Iteration   8: 11.189 ns/op
Iteration   9: 11.170 ns/op
Iteration  10: 11.170 ns/op
Iteration  11: 11.170 ns/op
Iteration  12: 11.170 ns/op
Iteration  13: 11.171 ns/op
Iteration  14: 11.170 ns/op
Iteration  15: 11.171 ns/op
Iteration  16: 11.170 ns/op
Iteration  17: 11.170 ns/op
Iteration  18: 11.170 ns/op
Iteration  19: 11.170 ns/op
Iteration  20: 11.190 ns/op


Result "benchmark.StringContains.stringContains":
  11.225 ±(99.9%) 0.031 ns/op [Average]
  (min, avg, max) = (11.166, 11.225, 11.433), stdev = 0.090
  CI (99.9%): [11.194, 11.255] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  f1
%G_tT)C#!h^,B|(gh4^SpUC9]no^4  avgt  100  258.145 ± 2.954  ns/op
StringContains.stringContains     http  f1
%G_tT)C#!h^,B|(gh4^SpUC9]no^4  avgt  100   11.225 ± 0.031  ns/op

Benchmark result is saved to http_32_1_10.csv
