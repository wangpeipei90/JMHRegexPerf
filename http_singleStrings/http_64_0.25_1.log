# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = MKEsxLHwGU 6L-Phttp sN1O~	8&6dpURB7F^dBf1=Wa_|.\'O%LKNa|02~|96)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 666.036 ns/op
# Warmup Iteration   2: 666.340 ns/op
# Warmup Iteration   3: 734.091 ns/op
# Warmup Iteration   4: 733.560 ns/op
# Warmup Iteration   5: 675.293 ns/op
Iteration   1: 656.185 ns/op
Iteration   2: 656.528 ns/op
Iteration   3: 662.917 ns/op
Iteration   4: 656.165 ns/op
Iteration   5: 656.148 ns/op
Iteration   6: 656.208 ns/op
Iteration   7: 664.536 ns/op
Iteration   8: 656.071 ns/op
Iteration   9: 656.383 ns/op
Iteration  10: 656.715 ns/op
Iteration  11: 667.356 ns/op
Iteration  12: 655.766 ns/op
Iteration  13: 656.136 ns/op
Iteration  14: 656.286 ns/op
Iteration  15: 671.285 ns/op
Iteration  16: 656.330 ns/op
Iteration  17: 656.132 ns/op
Iteration  18: 656.304 ns/op
Iteration  19: 675.155 ns/op
Iteration  20: 655.880 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 665.612 ns/op
# Warmup Iteration   2: 687.504 ns/op
# Warmup Iteration   3: 688.892 ns/op
# Warmup Iteration   4: 688.878 ns/op
# Warmup Iteration   5: 624.234 ns/op
Iteration   1: 613.355 ns/op
Iteration   2: 613.624 ns/op
Iteration   3: 621.158 ns/op
Iteration   4: 615.974 ns/op
Iteration   5: 615.809 ns/op
Iteration   6: 615.665 ns/op
Iteration   7: 621.328 ns/op
Iteration   8: 614.030 ns/op
Iteration   9: 614.217 ns/op
Iteration  10: 624.912 ns/op
Iteration  11: 613.689 ns/op
Iteration  12: 613.787 ns/op
Iteration  13: 614.158 ns/op
Iteration  14: 627.116 ns/op
Iteration  15: 613.294 ns/op
Iteration  16: 613.547 ns/op
Iteration  17: 613.931 ns/op
Iteration  18: 631.352 ns/op
Iteration  19: 613.503 ns/op
Iteration  20: 614.210 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 664.881 ns/op
# Warmup Iteration   2: 688.114 ns/op
# Warmup Iteration   3: 688.356 ns/op
# Warmup Iteration   4: 688.118 ns/op
# Warmup Iteration   5: 624.967 ns/op
Iteration   1: 615.068 ns/op
Iteration   2: 615.167 ns/op
Iteration   3: 620.505 ns/op
Iteration   4: 614.463 ns/op
Iteration   5: 614.452 ns/op
Iteration   6: 616.329 ns/op
Iteration   7: 623.150 ns/op
Iteration   8: 617.248 ns/op
Iteration   9: 617.198 ns/op
Iteration  10: 626.341 ns/op
Iteration  11: 614.480 ns/op
Iteration  12: 614.448 ns/op
Iteration  13: 614.414 ns/op
Iteration  14: 627.699 ns/op
Iteration  15: 614.348 ns/op
Iteration  16: 614.348 ns/op
Iteration  17: 614.180 ns/op
Iteration  18: 631.476 ns/op
Iteration  19: 614.492 ns/op
Iteration  20: 614.086 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 657.789 ns/op
# Warmup Iteration   2: 658.279 ns/op
# Warmup Iteration   3: 725.022 ns/op
# Warmup Iteration   4: 725.145 ns/op
# Warmup Iteration   5: 664.521 ns/op
Iteration   1: 649.259 ns/op
Iteration   2: 649.365 ns/op
Iteration   3: 655.961 ns/op
Iteration   4: 649.646 ns/op
Iteration   5: 649.303 ns/op
Iteration   6: 649.673 ns/op
Iteration   7: 658.028 ns/op
Iteration   8: 649.529 ns/op
Iteration   9: 649.347 ns/op
Iteration  10: 649.769 ns/op
Iteration  11: 660.546 ns/op
Iteration  12: 650.003 ns/op
Iteration  13: 651.213 ns/op
Iteration  14: 650.302 ns/op
Iteration  15: 664.674 ns/op
Iteration  16: 650.066 ns/op
Iteration  17: 649.312 ns/op
Iteration  18: 649.239 ns/op
Iteration  19: 669.649 ns/op
Iteration  20: 649.314 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 659.823 ns/op
# Warmup Iteration   2: 658.393 ns/op
# Warmup Iteration   3: 727.808 ns/op
# Warmup Iteration   4: 728.084 ns/op
# Warmup Iteration   5: 668.498 ns/op
Iteration   1: 651.769 ns/op
Iteration   2: 651.960 ns/op
Iteration   3: 658.554 ns/op
Iteration   4: 652.082 ns/op
Iteration   5: 652.281 ns/op
Iteration   6: 652.193 ns/op
Iteration   7: 660.673 ns/op
Iteration   8: 652.241 ns/op
Iteration   9: 651.955 ns/op
Iteration  10: 652.176 ns/op
Iteration  11: 664.073 ns/op
Iteration  12: 652.620 ns/op
Iteration  13: 652.136 ns/op
Iteration  14: 652.811 ns/op
Iteration  15: 666.997 ns/op
Iteration  16: 652.121 ns/op
Iteration  17: 652.765 ns/op
Iteration  18: 652.332 ns/op
Iteration  19: 670.939 ns/op
Iteration  20: 651.843 ns/op


Result "benchmark.StringContains.regexMatches":
  640.358 ±(99.9%) 6.719 ns/op [Average]
  (min, avg, max) = (613.294, 640.358, 675.155), stdev = 19.812
  CI (99.9%): [633.638, 647.077] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = MKEsxLHwGU 6L-Phttp sN1O~	8&6dpURB7F^dBf1=Wa_|.\'O%LKNa|02~|96)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.319 ns/op
# Warmup Iteration   2: 12.578 ns/op
# Warmup Iteration   3: 12.305 ns/op
# Warmup Iteration   4: 12.272 ns/op
# Warmup Iteration   5: 12.254 ns/op
Iteration   1: 12.327 ns/op
Iteration   2: 12.303 ns/op
Iteration   3: 12.333 ns/op
Iteration   4: 12.272 ns/op
Iteration   5: 12.302 ns/op
Iteration   6: 12.263 ns/op
Iteration   7: 12.285 ns/op
Iteration   8: 12.318 ns/op
Iteration   9: 12.283 ns/op
Iteration  10: 12.307 ns/op
Iteration  11: 12.365 ns/op
Iteration  12: 12.302 ns/op
Iteration  13: 12.309 ns/op
Iteration  14: 12.318 ns/op
Iteration  15: 12.305 ns/op
Iteration  16: 12.294 ns/op
Iteration  17: 12.341 ns/op
Iteration  18: 12.362 ns/op
Iteration  19: 12.333 ns/op
Iteration  20: 12.307 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.358 ns/op
# Warmup Iteration   2: 12.532 ns/op
# Warmup Iteration   3: 12.136 ns/op
# Warmup Iteration   4: 12.149 ns/op
# Warmup Iteration   5: 12.140 ns/op
Iteration   1: 12.153 ns/op
Iteration   2: 12.147 ns/op
Iteration   3: 12.123 ns/op
Iteration   4: 12.127 ns/op
Iteration   5: 12.139 ns/op
Iteration   6: 12.159 ns/op
Iteration   7: 12.141 ns/op
Iteration   8: 12.145 ns/op
Iteration   9: 12.132 ns/op
Iteration  10: 12.140 ns/op
Iteration  11: 12.138 ns/op
Iteration  12: 12.128 ns/op
Iteration  13: 12.146 ns/op
Iteration  14: 12.132 ns/op
Iteration  15: 12.148 ns/op
Iteration  16: 12.151 ns/op
Iteration  17: 12.146 ns/op
Iteration  18: 12.124 ns/op
Iteration  19: 12.146 ns/op
Iteration  20: 12.149 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.363 ns/op
# Warmup Iteration   2: 12.800 ns/op
# Warmup Iteration   3: 12.236 ns/op
# Warmup Iteration   4: 12.234 ns/op
# Warmup Iteration   5: 12.234 ns/op
Iteration   1: 12.222 ns/op
Iteration   2: 12.248 ns/op
Iteration   3: 12.248 ns/op
Iteration   4: 12.233 ns/op
Iteration   5: 12.246 ns/op
Iteration   6: 12.244 ns/op
Iteration   7: 12.245 ns/op
Iteration   8: 12.240 ns/op
Iteration   9: 12.236 ns/op
Iteration  10: 12.243 ns/op
Iteration  11: 12.244 ns/op
Iteration  12: 12.248 ns/op
Iteration  13: 12.248 ns/op
Iteration  14: 12.249 ns/op
Iteration  15: 12.240 ns/op
Iteration  16: 12.235 ns/op
Iteration  17: 12.245 ns/op
Iteration  18: 12.236 ns/op
Iteration  19: 12.233 ns/op
Iteration  20: 12.244 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.293 ns/op
# Warmup Iteration   2: 12.517 ns/op
# Warmup Iteration   3: 12.134 ns/op
# Warmup Iteration   4: 12.147 ns/op
# Warmup Iteration   5: 12.148 ns/op
Iteration   1: 12.152 ns/op
Iteration   2: 12.146 ns/op
Iteration   3: 12.139 ns/op
Iteration   4: 12.146 ns/op
Iteration   5: 12.134 ns/op
Iteration   6: 12.130 ns/op
Iteration   7: 12.142 ns/op
Iteration   8: 12.144 ns/op
Iteration   9: 12.147 ns/op
Iteration  10: 12.122 ns/op
Iteration  11: 12.160 ns/op
Iteration  12: 12.148 ns/op
Iteration  13: 12.127 ns/op
Iteration  14: 12.156 ns/op
Iteration  15: 12.155 ns/op
Iteration  16: 12.153 ns/op
Iteration  17: 12.145 ns/op
Iteration  18: 12.161 ns/op
Iteration  19: 12.152 ns/op
Iteration  20: 12.151 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.319 ns/op
# Warmup Iteration   2: 12.542 ns/op
# Warmup Iteration   3: 12.348 ns/op
# Warmup Iteration   4: 12.351 ns/op
# Warmup Iteration   5: 12.341 ns/op
Iteration   1: 12.323 ns/op
Iteration   2: 12.354 ns/op
Iteration   3: 12.360 ns/op
Iteration   4: 12.338 ns/op
Iteration   5: 12.342 ns/op
Iteration   6: 12.344 ns/op
Iteration   7: 12.364 ns/op
Iteration   8: 12.325 ns/op
Iteration   9: 12.354 ns/op
Iteration  10: 12.329 ns/op
Iteration  11: 12.372 ns/op
Iteration  12: 12.342 ns/op
Iteration  13: 12.347 ns/op
Iteration  14: 12.327 ns/op
Iteration  15: 12.306 ns/op
Iteration  16: 12.326 ns/op
Iteration  17: 12.334 ns/op
Iteration  18: 12.334 ns/op
Iteration  19: 12.354 ns/op
Iteration  20: 12.363 ns/op


Result "benchmark.StringContains.stringContains":
  12.236 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (12.122, 12.236, 12.372), stdev = 0.085
  CI (99.9%): [12.208, 12.265] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  MKEsxLHwGU 6L-Phttp sN1O~	8&6dpURB7F^dBf1=Wa_|.\'O%LKNa|02~|96  avgt  100  640.358 ± 6.719  ns/op
StringContains.stringContains     http  MKEsxLHwGU 6L-Phttp sN1O~	8&6dpURB7F^dBf1=Wa_|.\'O%LKNa|02~|96  avgt  100   12.236 ± 0.029  ns/op

Benchmark result is saved to http_64_0.25_1.csv
