# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = fp0/t&A(http6Ca+}Y3zMK6xn_1`ewO;)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 431.165 ns/op
# Warmup Iteration   2: 438.302 ns/op
# Warmup Iteration   3: 407.988 ns/op
# Warmup Iteration   4: 360.117 ns/op
# Warmup Iteration   5: 363.723 ns/op
Iteration   1: 360.406 ns/op
Iteration   2: 364.754 ns/op
Iteration   3: 360.298 ns/op
Iteration   4: 366.710 ns/op
Iteration   5: 360.252 ns/op
Iteration   6: 361.410 ns/op
Iteration   7: 367.417 ns/op
Iteration   8: 360.359 ns/op
Iteration   9: 371.202 ns/op
Iteration  10: 360.300 ns/op
Iteration  11: 362.187 ns/op
Iteration  12: 360.452 ns/op
Iteration  13: 360.236 ns/op
Iteration  14: 362.170 ns/op
Iteration  15: 360.094 ns/op
Iteration  16: 361.787 ns/op
Iteration  17: 360.084 ns/op
Iteration  18: 361.815 ns/op
Iteration  19: 360.233 ns/op
Iteration  20: 362.089 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 422.276 ns/op
# Warmup Iteration   2: 429.784 ns/op
# Warmup Iteration   3: 399.874 ns/op
# Warmup Iteration   4: 354.825 ns/op
# Warmup Iteration   5: 359.461 ns/op
Iteration   1: 354.804 ns/op
Iteration   2: 359.205 ns/op
Iteration   3: 354.787 ns/op
Iteration   4: 361.676 ns/op
Iteration   5: 354.643 ns/op
Iteration   6: 362.482 ns/op
Iteration   7: 354.763 ns/op
Iteration   8: 355.453 ns/op
Iteration   9: 366.350 ns/op
Iteration  10: 354.750 ns/op
Iteration  11: 356.349 ns/op
Iteration  12: 354.533 ns/op
Iteration  13: 356.263 ns/op
Iteration  14: 354.513 ns/op
Iteration  15: 354.612 ns/op
Iteration  16: 356.393 ns/op
Iteration  17: 354.597 ns/op
Iteration  18: 356.557 ns/op
Iteration  19: 354.511 ns/op
Iteration  20: 356.799 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 421.148 ns/op
# Warmup Iteration   2: 429.681 ns/op
# Warmup Iteration   3: 396.653 ns/op
# Warmup Iteration   4: 354.075 ns/op
# Warmup Iteration   5: 357.116 ns/op
Iteration   1: 353.919 ns/op
Iteration   2: 358.409 ns/op
Iteration   3: 354.068 ns/op
Iteration   4: 360.072 ns/op
Iteration   5: 354.034 ns/op
Iteration   6: 361.649 ns/op
Iteration   7: 353.699 ns/op
Iteration   8: 354.100 ns/op
Iteration   9: 363.662 ns/op
Iteration  10: 354.066 ns/op
Iteration  11: 355.646 ns/op
Iteration  12: 353.691 ns/op
Iteration  13: 355.461 ns/op
Iteration  14: 353.778 ns/op
Iteration  15: 355.435 ns/op
Iteration  16: 353.880 ns/op
Iteration  17: 353.912 ns/op
Iteration  18: 355.765 ns/op
Iteration  19: 353.797 ns/op
Iteration  20: 355.765 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 425.953 ns/op
# Warmup Iteration   2: 430.334 ns/op
# Warmup Iteration   3: 397.451 ns/op
# Warmup Iteration   4: 354.966 ns/op
# Warmup Iteration   5: 358.087 ns/op
Iteration   1: 354.676 ns/op
Iteration   2: 359.036 ns/op
Iteration   3: 354.734 ns/op
Iteration   4: 360.618 ns/op
Iteration   5: 354.704 ns/op
Iteration   6: 362.240 ns/op
Iteration   7: 354.888 ns/op
Iteration   8: 355.072 ns/op
Iteration   9: 364.818 ns/op
Iteration  10: 355.908 ns/op
Iteration  11: 357.756 ns/op
Iteration  12: 354.748 ns/op
Iteration  13: 356.562 ns/op
Iteration  14: 354.821 ns/op
Iteration  15: 356.149 ns/op
Iteration  16: 354.729 ns/op
Iteration  17: 354.672 ns/op
Iteration  18: 356.420 ns/op
Iteration  19: 354.663 ns/op
Iteration  20: 356.316 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 424.766 ns/op
# Warmup Iteration   2: 430.027 ns/op
# Warmup Iteration   3: 397.298 ns/op
# Warmup Iteration   4: 354.676 ns/op
# Warmup Iteration   5: 358.226 ns/op
Iteration   1: 354.613 ns/op
Iteration   2: 359.133 ns/op
Iteration   3: 354.502 ns/op
Iteration   4: 360.576 ns/op
Iteration   5: 354.551 ns/op
Iteration   6: 362.555 ns/op
Iteration   7: 355.652 ns/op
Iteration   8: 355.820 ns/op
Iteration   9: 364.789 ns/op
Iteration  10: 354.665 ns/op
Iteration  11: 356.675 ns/op
Iteration  12: 354.512 ns/op
Iteration  13: 358.549 ns/op
Iteration  14: 354.567 ns/op
Iteration  15: 354.533 ns/op
Iteration  16: 357.856 ns/op
Iteration  17: 354.340 ns/op
Iteration  18: 357.139 ns/op
Iteration  19: 354.338 ns/op
Iteration  20: 356.694 ns/op


Result "benchmark.StringContains.regexMatches":
  357.627 ±(99.9%) 1.277 ns/op [Average]
  (min, avg, max) = (353.691, 357.627, 371.202), stdev = 3.766
  CI (99.9%): [356.350, 358.904] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = fp0/t&A(http6Ca+}Y3zMK6xn_1`ewO;)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.473 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.826 ns/op
# Warmup Iteration   4: 9.843 ns/op
# Warmup Iteration   5: 9.835 ns/op
Iteration   1: 9.830 ns/op
Iteration   2: 9.838 ns/op
Iteration   3: 9.831 ns/op
Iteration   4: 9.832 ns/op
Iteration   5: 9.818 ns/op
Iteration   6: 9.833 ns/op
Iteration   7: 9.844 ns/op
Iteration   8: 9.844 ns/op
Iteration   9: 9.841 ns/op
Iteration  10: 9.819 ns/op
Iteration  11: 9.826 ns/op
Iteration  12: 9.830 ns/op
Iteration  13: 9.837 ns/op
Iteration  14: 9.817 ns/op
Iteration  15: 9.822 ns/op
Iteration  16: 9.843 ns/op
Iteration  17: 9.828 ns/op
Iteration  18: 9.824 ns/op
Iteration  19: 9.822 ns/op
Iteration  20: 9.839 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.233 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.892 ns/op
# Warmup Iteration   4: 9.865 ns/op
# Warmup Iteration   5: 9.876 ns/op
Iteration   1: 9.866 ns/op
Iteration   2: 9.883 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.876 ns/op
Iteration   5: 9.854 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.886 ns/op
Iteration   9: 9.871 ns/op
Iteration  10: 9.878 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.865 ns/op
Iteration  13: 9.876 ns/op
Iteration  14: 9.876 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.886 ns/op
Iteration  18: 9.881 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.886 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.237 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.864 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.851 ns/op
Iteration   1: 9.842 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.830 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.854 ns/op
Iteration   6: 9.844 ns/op
Iteration   7: 9.836 ns/op
Iteration   8: 9.872 ns/op
Iteration   9: 9.849 ns/op
Iteration  10: 9.837 ns/op
Iteration  11: 9.854 ns/op
Iteration  12: 9.836 ns/op
Iteration  13: 9.849 ns/op
Iteration  14: 9.854 ns/op
Iteration  15: 9.825 ns/op
Iteration  16: 9.860 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.886 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.239 ns/op
# Warmup Iteration   2: 9.738 ns/op
# Warmup Iteration   3: 9.841 ns/op
# Warmup Iteration   4: 9.847 ns/op
# Warmup Iteration   5: 9.834 ns/op
Iteration   1: 9.836 ns/op
Iteration   2: 9.830 ns/op
Iteration   3: 9.836 ns/op
Iteration   4: 9.834 ns/op
Iteration   5: 9.830 ns/op
Iteration   6: 9.830 ns/op
Iteration   7: 9.848 ns/op
Iteration   8: 9.858 ns/op
Iteration   9: 9.852 ns/op
Iteration  10: 9.847 ns/op
Iteration  11: 9.823 ns/op
Iteration  12: 9.864 ns/op
Iteration  13: 9.837 ns/op
Iteration  14: 9.820 ns/op
Iteration  15: 9.826 ns/op
Iteration  16: 9.840 ns/op
Iteration  17: 9.843 ns/op
Iteration  18: 9.824 ns/op
Iteration  19: 9.837 ns/op
Iteration  20: 9.833 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.221 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.786 ns/op
# Warmup Iteration   4: 9.785 ns/op
# Warmup Iteration   5: 9.787 ns/op
Iteration   1: 9.792 ns/op
Iteration   2: 9.786 ns/op
Iteration   3: 9.813 ns/op
Iteration   4: 9.798 ns/op
Iteration   5: 9.787 ns/op
Iteration   6: 9.789 ns/op
Iteration   7: 9.788 ns/op
Iteration   8: 9.789 ns/op
Iteration   9: 9.782 ns/op
Iteration  10: 9.786 ns/op
Iteration  11: 9.792 ns/op
Iteration  12: 9.783 ns/op
Iteration  13: 9.784 ns/op
Iteration  14: 9.779 ns/op
Iteration  15: 9.798 ns/op
Iteration  16: 9.803 ns/op
Iteration  17: 9.791 ns/op
Iteration  18: 9.784 ns/op
Iteration  19: 9.799 ns/op
Iteration  20: 9.800 ns/op


Result "benchmark.StringContains.stringContains":
  9.837 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (9.779, 9.837, 9.886), stdev = 0.030
  CI (99.9%): [9.827, 9.847] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  fp0/t&A(http6Ca+}Y3zMK6xn_1`ewO;  avgt  100  357.627 ± 1.277  ns/op
StringContains.stringContains     http  fp0/t&A(http6Ca+}Y3zMK6xn_1`ewO;  avgt  100    9.837 ± 0.010  ns/op

Benchmark result is saved to http_32_0.25_8.csv
