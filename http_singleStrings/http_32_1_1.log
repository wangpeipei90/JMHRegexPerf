# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 5>PNW>B;?dB\4:rs-VY%6$M23EE"Krr[)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 211.394 ns/op
# Warmup Iteration   2: 145.314 ns/op
# Warmup Iteration   3: 129.038 ns/op
# Warmup Iteration   4: 129.601 ns/op
# Warmup Iteration   5: 130.299 ns/op
Iteration   1: 131.979 ns/op
Iteration   2: 127.991 ns/op
Iteration   3: 128.086 ns/op
Iteration   4: 127.923 ns/op
Iteration   5: 128.073 ns/op
Iteration   6: 128.638 ns/op
Iteration   7: 128.100 ns/op
Iteration   8: 128.122 ns/op
Iteration   9: 127.631 ns/op
Iteration  10: 127.682 ns/op
Iteration  11: 127.869 ns/op
Iteration  12: 127.790 ns/op
Iteration  13: 127.523 ns/op
Iteration  14: 127.602 ns/op
Iteration  15: 127.862 ns/op
Iteration  16: 127.650 ns/op
Iteration  17: 127.705 ns/op
Iteration  18: 127.676 ns/op
Iteration  19: 127.796 ns/op
Iteration  20: 127.932 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.238 ns/op
# Warmup Iteration   2: 145.213 ns/op
# Warmup Iteration   3: 130.348 ns/op
# Warmup Iteration   4: 130.095 ns/op
# Warmup Iteration   5: 130.610 ns/op
Iteration   1: 132.109 ns/op
Iteration   2: 128.481 ns/op
Iteration   3: 128.262 ns/op
Iteration   4: 128.621 ns/op
Iteration   5: 128.621 ns/op
Iteration   6: 129.201 ns/op
Iteration   7: 128.443 ns/op
Iteration   8: 128.270 ns/op
Iteration   9: 128.064 ns/op
Iteration  10: 128.223 ns/op
Iteration  11: 129.314 ns/op
Iteration  12: 128.262 ns/op
Iteration  13: 127.884 ns/op
Iteration  14: 127.998 ns/op
Iteration  15: 128.499 ns/op
Iteration  16: 128.704 ns/op
Iteration  17: 128.277 ns/op
Iteration  18: 128.355 ns/op
Iteration  19: 128.422 ns/op
Iteration  20: 128.787 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 207.198 ns/op
# Warmup Iteration   2: 144.112 ns/op
# Warmup Iteration   3: 130.108 ns/op
# Warmup Iteration   4: 130.638 ns/op
# Warmup Iteration   5: 131.130 ns/op
Iteration   1: 132.591 ns/op
Iteration   2: 129.292 ns/op
Iteration   3: 129.241 ns/op
Iteration   4: 129.008 ns/op
Iteration   5: 128.839 ns/op
Iteration   6: 129.619 ns/op
Iteration   7: 128.872 ns/op
Iteration   8: 128.948 ns/op
Iteration   9: 128.564 ns/op
Iteration  10: 128.655 ns/op
Iteration  11: 128.935 ns/op
Iteration  12: 128.486 ns/op
Iteration  13: 128.491 ns/op
Iteration  14: 128.474 ns/op
Iteration  15: 128.385 ns/op
Iteration  16: 128.630 ns/op
Iteration  17: 128.669 ns/op
Iteration  18: 128.718 ns/op
Iteration  19: 128.640 ns/op
Iteration  20: 129.545 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 206.907 ns/op
# Warmup Iteration   2: 138.729 ns/op
# Warmup Iteration   3: 124.355 ns/op
# Warmup Iteration   4: 124.930 ns/op
# Warmup Iteration   5: 129.268 ns/op
Iteration   1: 123.506 ns/op
Iteration   2: 123.399 ns/op
Iteration   3: 123.428 ns/op
Iteration   4: 123.929 ns/op
Iteration   5: 123.243 ns/op
Iteration   6: 123.272 ns/op
Iteration   7: 123.377 ns/op
Iteration   8: 123.473 ns/op
Iteration   9: 122.916 ns/op
Iteration  10: 123.351 ns/op
Iteration  11: 123.101 ns/op
Iteration  12: 123.370 ns/op
Iteration  13: 123.272 ns/op
Iteration  14: 123.088 ns/op
Iteration  15: 123.193 ns/op
Iteration  16: 123.737 ns/op
Iteration  17: 123.193 ns/op
Iteration  18: 123.238 ns/op
Iteration  19: 123.740 ns/op
Iteration  20: 123.103 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 210.408 ns/op
# Warmup Iteration   2: 145.736 ns/op
# Warmup Iteration   3: 129.298 ns/op
# Warmup Iteration   4: 129.960 ns/op
# Warmup Iteration   5: 130.632 ns/op
Iteration   1: 132.124 ns/op
Iteration   2: 128.396 ns/op
Iteration   3: 128.440 ns/op
Iteration   4: 128.365 ns/op
Iteration   5: 128.468 ns/op
Iteration   6: 128.852 ns/op
Iteration   7: 128.268 ns/op
Iteration   8: 128.449 ns/op
Iteration   9: 128.703 ns/op
Iteration  10: 128.063 ns/op
Iteration  11: 128.362 ns/op
Iteration  12: 128.536 ns/op
Iteration  13: 128.027 ns/op
Iteration  14: 128.204 ns/op
Iteration  15: 128.680 ns/op
Iteration  16: 128.324 ns/op
Iteration  17: 128.207 ns/op
Iteration  18: 128.307 ns/op
Iteration  19: 128.430 ns/op
Iteration  20: 128.649 ns/op


Result "benchmark.StringContains.regexMatches":
  127.538 ±(99.9%) 0.771 ns/op [Average]
  (min, avg, max) = (122.916, 127.538, 132.591), stdev = 2.273
  CI (99.9%): [126.767, 128.309] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 5>PNW>B;?dB\4:rs-VY%6$M23EE"Krr[)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 10.226 ns/op
# Warmup Iteration   2: 11.205 ns/op
# Warmup Iteration   3: 11.166 ns/op
# Warmup Iteration   4: 11.166 ns/op
# Warmup Iteration   5: 11.166 ns/op
Iteration   1: 11.166 ns/op
Iteration   2: 11.166 ns/op
Iteration   3: 11.166 ns/op
Iteration   4: 11.166 ns/op
Iteration   5: 11.167 ns/op
Iteration   6: 11.166 ns/op
Iteration   7: 11.166 ns/op
Iteration   8: 11.167 ns/op
Iteration   9: 11.166 ns/op
Iteration  10: 11.166 ns/op
Iteration  11: 11.166 ns/op
Iteration  12: 11.166 ns/op
Iteration  13: 11.166 ns/op
Iteration  14: 11.166 ns/op
Iteration  15: 11.166 ns/op
Iteration  16: 11.166 ns/op
Iteration  17: 11.166 ns/op
Iteration  18: 11.167 ns/op
Iteration  19: 11.168 ns/op
Iteration  20: 11.167 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 10.288 ns/op
# Warmup Iteration   2: 11.206 ns/op
# Warmup Iteration   3: 11.212 ns/op
# Warmup Iteration   4: 11.211 ns/op
# Warmup Iteration   5: 11.210 ns/op
Iteration   1: 11.211 ns/op
Iteration   2: 11.211 ns/op
Iteration   3: 11.211 ns/op
Iteration   4: 11.209 ns/op
Iteration   5: 11.210 ns/op
Iteration   6: 11.211 ns/op
Iteration   7: 11.210 ns/op
Iteration   8: 11.210 ns/op
Iteration   9: 11.208 ns/op
Iteration  10: 11.207 ns/op
Iteration  11: 11.209 ns/op
Iteration  12: 11.208 ns/op
Iteration  13: 11.209 ns/op
Iteration  14: 11.208 ns/op
Iteration  15: 11.208 ns/op
Iteration  16: 11.209 ns/op
Iteration  17: 11.208 ns/op
Iteration  18: 11.210 ns/op
Iteration  19: 11.209 ns/op
Iteration  20: 11.209 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 10.272 ns/op
# Warmup Iteration   2: 11.217 ns/op
# Warmup Iteration   3: 11.166 ns/op
# Warmup Iteration   4: 11.166 ns/op
# Warmup Iteration   5: 11.166 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.166 ns/op
Iteration   3: 11.166 ns/op
Iteration   4: 11.166 ns/op
Iteration   5: 11.166 ns/op
Iteration   6: 11.166 ns/op
Iteration   7: 11.165 ns/op
Iteration   8: 11.184 ns/op
Iteration   9: 11.168 ns/op
Iteration  10: 11.167 ns/op
Iteration  11: 11.168 ns/op
Iteration  12: 11.166 ns/op
Iteration  13: 11.167 ns/op
Iteration  14: 11.167 ns/op
Iteration  15: 11.166 ns/op
Iteration  16: 11.167 ns/op
Iteration  17: 11.167 ns/op
Iteration  18: 11.168 ns/op
Iteration  19: 11.171 ns/op
Iteration  20: 11.168 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 10.278 ns/op
# Warmup Iteration   2: 11.201 ns/op
# Warmup Iteration   3: 11.208 ns/op
# Warmup Iteration   4: 11.209 ns/op
# Warmup Iteration   5: 11.208 ns/op
Iteration   1: 11.208 ns/op
Iteration   2: 11.207 ns/op
Iteration   3: 11.208 ns/op
Iteration   4: 11.208 ns/op
Iteration   5: 11.207 ns/op
Iteration   6: 11.208 ns/op
Iteration   7: 11.207 ns/op
Iteration   8: 11.209 ns/op
Iteration   9: 11.207 ns/op
Iteration  10: 11.207 ns/op
Iteration  11: 11.208 ns/op
Iteration  12: 11.207 ns/op
Iteration  13: 11.207 ns/op
Iteration  14: 11.207 ns/op
Iteration  15: 11.207 ns/op
Iteration  16: 11.207 ns/op
Iteration  17: 11.207 ns/op
Iteration  18: 11.207 ns/op
Iteration  19: 11.207 ns/op
Iteration  20: 11.208 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 10.258 ns/op
# Warmup Iteration   2: 11.219 ns/op
# Warmup Iteration   3: 11.214 ns/op
# Warmup Iteration   4: 11.208 ns/op
# Warmup Iteration   5: 11.209 ns/op
Iteration   1: 11.210 ns/op
Iteration   2: 11.209 ns/op
Iteration   3: 11.212 ns/op
Iteration   4: 11.207 ns/op
Iteration   5: 11.209 ns/op
Iteration   6: 11.210 ns/op
Iteration   7: 11.209 ns/op
Iteration   8: 11.228 ns/op
Iteration   9: 11.208 ns/op
Iteration  10: 11.207 ns/op
Iteration  11: 11.212 ns/op
Iteration  12: 11.208 ns/op
Iteration  13: 11.175 ns/op
Iteration  14: 11.209 ns/op
Iteration  15: 11.214 ns/op
Iteration  16: 11.212 ns/op
Iteration  17: 11.212 ns/op
Iteration  18: 11.214 ns/op
Iteration  19: 11.208 ns/op
Iteration  20: 11.209 ns/op


Result "benchmark.StringContains.stringContains":
  11.192 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (11.165, 11.192, 11.228), stdev = 0.021
  CI (99.9%): [11.185, 11.199] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  5>PNW>B;?dB\4:rs-VY%6$M23EE"Krr[  avgt  100  127.538 ± 0.771  ns/op
StringContains.stringContains     http  5>PNW>B;?dB\4:rs-VY%6$M23EE"Krr[  avgt  100   11.192 ± 0.007  ns/op

Benchmark result is saved to http_32_1_1.csv
