# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = }AD!Rgef>Pbz;2_&GN3Q2-HrpH*,M5ZUm++aOHhq9z+PH[GZ1Q=wP.Djy. |BYhttpg@<4nD]8	2j*9{yoWYSe[KtuL=myZy9@3dyb0,bEHFutF<<:Z$K7=*rJa b)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 825.229 ns/op
# Warmup Iteration   2: 854.540 ns/op
# Warmup Iteration   3: 851.950 ns/op
# Warmup Iteration   4: 852.625 ns/op
# Warmup Iteration   5: 852.178 ns/op
Iteration   1: 785.211 ns/op
Iteration   2: 773.715 ns/op
Iteration   3: 773.250 ns/op
Iteration   4: 773.369 ns/op
Iteration   5: 781.607 ns/op
Iteration   6: 773.130 ns/op
Iteration   7: 773.251 ns/op
Iteration   8: 773.537 ns/op
Iteration   9: 783.971 ns/op
Iteration  10: 773.068 ns/op
Iteration  11: 772.906 ns/op
Iteration  12: 776.747 ns/op
Iteration  13: 776.629 ns/op
Iteration  14: 791.082 ns/op
Iteration  15: 776.553 ns/op
Iteration  16: 776.672 ns/op
Iteration  17: 777.147 ns/op
Iteration  18: 776.996 ns/op
Iteration  19: 792.176 ns/op
Iteration  20: 773.030 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 828.759 ns/op
# Warmup Iteration   2: 841.317 ns/op
# Warmup Iteration   3: 845.725 ns/op
# Warmup Iteration   4: 845.803 ns/op
# Warmup Iteration   5: 846.320 ns/op
Iteration   1: 779.487 ns/op
Iteration   2: 771.303 ns/op
Iteration   3: 772.124 ns/op
Iteration   4: 771.763 ns/op
Iteration   5: 781.386 ns/op
Iteration   6: 774.427 ns/op
Iteration   7: 773.704 ns/op
Iteration   8: 773.801 ns/op
Iteration   9: 782.956 ns/op
Iteration  10: 769.356 ns/op
Iteration  11: 769.746 ns/op
Iteration  12: 769.971 ns/op
Iteration  13: 769.973 ns/op
Iteration  14: 782.541 ns/op
Iteration  15: 769.611 ns/op
Iteration  16: 769.844 ns/op
Iteration  17: 770.034 ns/op
Iteration  18: 776.570 ns/op
Iteration  19: 779.737 ns/op
Iteration  20: 769.912 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 801.424 ns/op
# Warmup Iteration   2: 808.923 ns/op
# Warmup Iteration   3: 902.186 ns/op
# Warmup Iteration   4: 902.001 ns/op
# Warmup Iteration   5: 902.068 ns/op
Iteration   1: 846.404 ns/op
Iteration   2: 827.899 ns/op
Iteration   3: 828.062 ns/op
Iteration   4: 827.425 ns/op
Iteration   5: 835.750 ns/op
Iteration   6: 828.058 ns/op
Iteration   7: 828.159 ns/op
Iteration   8: 827.935 ns/op
Iteration   9: 827.842 ns/op
Iteration  10: 838.337 ns/op
Iteration  11: 827.687 ns/op
Iteration  12: 828.138 ns/op
Iteration  13: 828.281 ns/op
Iteration  14: 827.949 ns/op
Iteration  15: 841.287 ns/op
Iteration  16: 828.110 ns/op
Iteration  17: 827.786 ns/op
Iteration  18: 828.011 ns/op
Iteration  19: 827.599 ns/op
Iteration  20: 846.065 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 823.334 ns/op
# Warmup Iteration   2: 845.224 ns/op
# Warmup Iteration   3: 848.867 ns/op
# Warmup Iteration   4: 848.551 ns/op
# Warmup Iteration   5: 848.618 ns/op
Iteration   1: 778.752 ns/op
Iteration   2: 773.568 ns/op
Iteration   3: 773.673 ns/op
Iteration   4: 773.552 ns/op
Iteration   5: 780.674 ns/op
Iteration   6: 773.466 ns/op
Iteration   7: 773.211 ns/op
Iteration   8: 773.708 ns/op
Iteration   9: 782.297 ns/op
Iteration  10: 772.929 ns/op
Iteration  11: 773.291 ns/op
Iteration  12: 773.428 ns/op
Iteration  13: 773.386 ns/op
Iteration  14: 786.847 ns/op
Iteration  15: 773.682 ns/op
Iteration  16: 773.250 ns/op
Iteration  17: 772.859 ns/op
Iteration  18: 789.784 ns/op
Iteration  19: 772.783 ns/op
Iteration  20: 773.108 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 831.334 ns/op
# Warmup Iteration   2: 847.460 ns/op
# Warmup Iteration   3: 849.666 ns/op
# Warmup Iteration   4: 849.229 ns/op
# Warmup Iteration   5: 849.163 ns/op
Iteration   1: 788.476 ns/op
Iteration   2: 775.180 ns/op
Iteration   3: 775.098 ns/op
Iteration   4: 775.360 ns/op
Iteration   5: 782.360 ns/op
Iteration   6: 774.755 ns/op
Iteration   7: 774.542 ns/op
Iteration   8: 776.130 ns/op
Iteration   9: 784.147 ns/op
Iteration  10: 775.090 ns/op
Iteration  11: 774.947 ns/op
Iteration  12: 774.504 ns/op
Iteration  13: 774.613 ns/op
Iteration  14: 787.265 ns/op
Iteration  15: 774.744 ns/op
Iteration  16: 774.537 ns/op
Iteration  17: 774.562 ns/op
Iteration  18: 774.621 ns/op
Iteration  19: 794.204 ns/op
Iteration  20: 779.387 ns/op


Result "benchmark.StringContains.regexMatches":
  787.418 ±(99.9%) 7.735 ns/op [Average]
  (min, avg, max) = (769.356, 787.418, 846.404), stdev = 22.807
  CI (99.9%): [779.683, 795.154] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = }AD!Rgef>Pbz;2_&GN3Q2-HrpH*,M5ZUm++aOHhq9z+PH[GZ1Q=wP.Djy. |BYhttpg@<4nD]8	2j*9{yoWYSe[KtuL=myZy9@3dyb0,bEHFutF<<:Z$K7=*rJa b)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.083 ns/op
# Warmup Iteration   2: 19.388 ns/op
# Warmup Iteration   3: 18.688 ns/op
# Warmup Iteration   4: 18.667 ns/op
# Warmup Iteration   5: 18.670 ns/op
Iteration   1: 18.674 ns/op
Iteration   2: 18.681 ns/op
Iteration   3: 18.665 ns/op
Iteration   4: 18.657 ns/op
Iteration   5: 18.679 ns/op
Iteration   6: 18.678 ns/op
Iteration   7: 18.679 ns/op
Iteration   8: 18.659 ns/op
Iteration   9: 18.667 ns/op
Iteration  10: 18.668 ns/op
Iteration  11: 18.698 ns/op
Iteration  12: 18.677 ns/op
Iteration  13: 18.679 ns/op
Iteration  14: 18.686 ns/op
Iteration  15: 18.684 ns/op
Iteration  16: 18.671 ns/op
Iteration  17: 18.665 ns/op
Iteration  18: 18.674 ns/op
Iteration  19: 18.677 ns/op
Iteration  20: 18.672 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.084 ns/op
# Warmup Iteration   2: 19.296 ns/op
# Warmup Iteration   3: 18.676 ns/op
# Warmup Iteration   4: 18.687 ns/op
# Warmup Iteration   5: 18.685 ns/op
Iteration   1: 18.687 ns/op
Iteration   2: 18.680 ns/op
Iteration   3: 18.680 ns/op
Iteration   4: 18.673 ns/op
Iteration   5: 18.672 ns/op
Iteration   6: 18.670 ns/op
Iteration   7: 18.664 ns/op
Iteration   8: 18.682 ns/op
Iteration   9: 18.673 ns/op
Iteration  10: 18.678 ns/op
Iteration  11: 18.691 ns/op
Iteration  12: 18.673 ns/op
Iteration  13: 18.687 ns/op
Iteration  14: 18.683 ns/op
Iteration  15: 18.676 ns/op
Iteration  16: 18.668 ns/op
Iteration  17: 18.697 ns/op
Iteration  18: 18.681 ns/op
Iteration  19: 18.684 ns/op
Iteration  20: 18.686 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.095 ns/op
# Warmup Iteration   2: 19.387 ns/op
# Warmup Iteration   3: 19.478 ns/op
# Warmup Iteration   4: 19.504 ns/op
# Warmup Iteration   5: 19.505 ns/op
Iteration   1: 19.468 ns/op
Iteration   2: 19.564 ns/op
Iteration   3: 19.565 ns/op
Iteration   4: 19.575 ns/op
Iteration   5: 19.579 ns/op
Iteration   6: 19.526 ns/op
Iteration   7: 19.521 ns/op
Iteration   8: 19.532 ns/op
Iteration   9: 19.557 ns/op
Iteration  10: 19.586 ns/op
Iteration  11: 19.540 ns/op
Iteration  12: 19.558 ns/op
Iteration  13: 19.582 ns/op
Iteration  14: 19.571 ns/op
Iteration  15: 19.602 ns/op
Iteration  16: 19.543 ns/op
Iteration  17: 19.562 ns/op
Iteration  18: 19.564 ns/op
Iteration  19: 19.548 ns/op
Iteration  20: 19.528 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.099 ns/op
# Warmup Iteration   2: 19.285 ns/op
# Warmup Iteration   3: 19.202 ns/op
# Warmup Iteration   4: 19.177 ns/op
# Warmup Iteration   5: 19.214 ns/op
Iteration   1: 19.220 ns/op
Iteration   2: 19.189 ns/op
Iteration   3: 19.198 ns/op
Iteration   4: 19.170 ns/op
Iteration   5: 19.164 ns/op
Iteration   6: 19.157 ns/op
Iteration   7: 19.148 ns/op
Iteration   8: 19.163 ns/op
Iteration   9: 19.163 ns/op
Iteration  10: 19.157 ns/op
Iteration  11: 19.141 ns/op
Iteration  12: 19.210 ns/op
Iteration  13: 19.179 ns/op
Iteration  14: 19.194 ns/op
Iteration  15: 19.207 ns/op
Iteration  16: 19.224 ns/op
Iteration  17: 19.214 ns/op
Iteration  18: 19.232 ns/op
Iteration  19: 19.206 ns/op
Iteration  20: 19.189 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.144 ns/op
# Warmup Iteration   2: 19.345 ns/op
# Warmup Iteration   3: 19.162 ns/op
# Warmup Iteration   4: 19.192 ns/op
# Warmup Iteration   5: 19.167 ns/op
Iteration   1: 19.154 ns/op
Iteration   2: 19.157 ns/op
Iteration   3: 19.143 ns/op
Iteration   4: 19.205 ns/op
Iteration   5: 19.171 ns/op
Iteration   6: 19.139 ns/op
Iteration   7: 19.148 ns/op
Iteration   8: 19.241 ns/op
Iteration   9: 19.174 ns/op
Iteration  10: 19.146 ns/op
Iteration  11: 19.188 ns/op
Iteration  12: 19.196 ns/op
Iteration  13: 19.217 ns/op
Iteration  14: 19.190 ns/op
Iteration  15: 19.191 ns/op
Iteration  16: 19.210 ns/op
Iteration  17: 19.209 ns/op
Iteration  18: 19.206 ns/op
Iteration  19: 19.227 ns/op
Iteration  20: 19.223 ns/op


Result "benchmark.StringContains.stringContains":
  19.056 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (18.657, 19.056, 19.602), stdev = 0.340
  CI (99.9%): [18.941, 19.171] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  }AD!Rgef>Pbz;2_&GN3Q2-HrpH*,M5ZUm++aOHhq9z+PH[GZ1Q=wP.Djy. |BYhttpg@<4nD]8	2j*9{yoWYSe[KtuL=myZy9@3dyb0,bEHFutF<<:Z$K7=*rJa b  avgt  100  787.418 ± 7.735  ns/op
StringContains.stringContains     http  }AD!Rgef>Pbz;2_&GN3Q2-HrpH*,M5ZUm++aOHhq9z+PH[GZ1Q=wP.Djy. |BYhttpg@<4nD]8	2j*9{yoWYSe[KtuL=myZy9@3dyb0,bEHFutF<<:Z$K7=*rJa b  avgt  100   19.056 ± 0.115  ns/op

Benchmark result is saved to http_128_0.5_0.csv
