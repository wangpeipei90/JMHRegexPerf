# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpGN[B[.u`])}cCT4bW[K$d$|*0:Ibai57-q{zNN_R+8!8\r
J#ssLN&<qc)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 813.433 ns/op
# Warmup Iteration   2: 846.790 ns/op
# Warmup Iteration   3: 856.384 ns/op
# Warmup Iteration   4: 854.675 ns/op
# Warmup Iteration   5: 857.235 ns/op
Iteration   1: 777.270 ns/op
Iteration   2: 765.000 ns/op
Iteration   3: 764.847 ns/op
Iteration   4: 764.328 ns/op
Iteration   5: 771.049 ns/op
Iteration   6: 763.462 ns/op
Iteration   7: 763.624 ns/op
Iteration   8: 763.975 ns/op
Iteration   9: 775.281 ns/op
Iteration  10: 763.017 ns/op
Iteration  11: 763.493 ns/op
Iteration  12: 763.796 ns/op
Iteration  13: 764.050 ns/op
Iteration  14: 778.663 ns/op
Iteration  15: 763.498 ns/op
Iteration  16: 763.436 ns/op
Iteration  17: 763.810 ns/op
Iteration  18: 784.259 ns/op
Iteration  19: 763.387 ns/op
Iteration  20: 763.320 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 814.099 ns/op
# Warmup Iteration   2: 844.197 ns/op
# Warmup Iteration   3: 841.515 ns/op
# Warmup Iteration   4: 841.463 ns/op
# Warmup Iteration   5: 841.459 ns/op
Iteration   1: 771.301 ns/op
Iteration   2: 763.723 ns/op
Iteration   3: 763.618 ns/op
Iteration   4: 763.917 ns/op
Iteration   5: 770.739 ns/op
Iteration   6: 763.264 ns/op
Iteration   7: 763.465 ns/op
Iteration   8: 763.555 ns/op
Iteration   9: 772.764 ns/op
Iteration  10: 763.304 ns/op
Iteration  11: 763.237 ns/op
Iteration  12: 763.633 ns/op
Iteration  13: 763.717 ns/op
Iteration  14: 776.328 ns/op
Iteration  15: 762.866 ns/op
Iteration  16: 763.718 ns/op
Iteration  17: 763.357 ns/op
Iteration  18: 780.603 ns/op
Iteration  19: 762.981 ns/op
Iteration  20: 763.439 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 800.921 ns/op
# Warmup Iteration   2: 834.516 ns/op
# Warmup Iteration   3: 837.697 ns/op
# Warmup Iteration   4: 837.274 ns/op
# Warmup Iteration   5: 846.029 ns/op
Iteration   1: 762.341 ns/op
Iteration   2: 762.453 ns/op
Iteration   3: 761.892 ns/op
Iteration   4: 762.071 ns/op
Iteration   5: 769.505 ns/op
Iteration   6: 763.240 ns/op
Iteration   7: 763.020 ns/op
Iteration   8: 762.920 ns/op
Iteration   9: 772.880 ns/op
Iteration  10: 764.320 ns/op
Iteration  11: 764.171 ns/op
Iteration  12: 764.112 ns/op
Iteration  13: 765.172 ns/op
Iteration  14: 774.704 ns/op
Iteration  15: 762.146 ns/op
Iteration  16: 761.976 ns/op
Iteration  17: 761.975 ns/op
Iteration  18: 778.623 ns/op
Iteration  19: 762.086 ns/op
Iteration  20: 761.906 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 785.997 ns/op
# Warmup Iteration   2: 793.930 ns/op
# Warmup Iteration   3: 886.940 ns/op
# Warmup Iteration   4: 886.819 ns/op
# Warmup Iteration   5: 886.872 ns/op
Iteration   1: 822.303 ns/op
Iteration   2: 810.249 ns/op
Iteration   3: 810.782 ns/op
Iteration   4: 810.713 ns/op
Iteration   5: 818.035 ns/op
Iteration   6: 810.450 ns/op
Iteration   7: 810.491 ns/op
Iteration   8: 810.531 ns/op
Iteration   9: 810.703 ns/op
Iteration  10: 821.335 ns/op
Iteration  11: 810.735 ns/op
Iteration  12: 810.529 ns/op
Iteration  13: 810.219 ns/op
Iteration  14: 816.168 ns/op
Iteration  15: 818.100 ns/op
Iteration  16: 810.065 ns/op
Iteration  17: 810.238 ns/op
Iteration  18: 810.624 ns/op
Iteration  19: 823.181 ns/op
Iteration  20: 814.976 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 806.279 ns/op
# Warmup Iteration   2: 839.648 ns/op
# Warmup Iteration   3: 839.825 ns/op
# Warmup Iteration   4: 839.599 ns/op
# Warmup Iteration   5: 840.107 ns/op
Iteration   1: 771.492 ns/op
Iteration   2: 762.882 ns/op
Iteration   3: 763.730 ns/op
Iteration   4: 762.765 ns/op
Iteration   5: 769.561 ns/op
Iteration   6: 762.357 ns/op
Iteration   7: 761.923 ns/op
Iteration   8: 763.650 ns/op
Iteration   9: 771.830 ns/op
Iteration  10: 762.264 ns/op
Iteration  11: 759.486 ns/op
Iteration  12: 762.170 ns/op
Iteration  13: 762.427 ns/op
Iteration  14: 774.586 ns/op
Iteration  15: 761.851 ns/op
Iteration  16: 761.985 ns/op
Iteration  17: 762.416 ns/op
Iteration  18: 789.651 ns/op
Iteration  19: 763.811 ns/op
Iteration  20: 763.801 ns/op


Result "benchmark.StringContains.regexMatches":
  775.537 ±(99.9%) 6.747 ns/op [Average]
  (min, avg, max) = (759.486, 775.537, 823.181), stdev = 19.893
  CI (99.9%): [768.790, 782.283] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpGN[B[.u`])}cCT4bW[K$d$|*0:Ibai57-q{zNN_R+8!8\r
J#ssLN&<qc)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.495 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.843 ns/op
# Warmup Iteration   4: 9.843 ns/op
# Warmup Iteration   5: 9.832 ns/op
Iteration   1: 9.845 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.834 ns/op
Iteration   5: 9.831 ns/op
Iteration   6: 9.844 ns/op
Iteration   7: 9.834 ns/op
Iteration   8: 9.861 ns/op
Iteration   9: 9.832 ns/op
Iteration  10: 9.828 ns/op
Iteration  11: 9.832 ns/op
Iteration  12: 10.550 ns/op
Iteration  13: 10.550 ns/op
Iteration  14: 10.549 ns/op
Iteration  15: 10.551 ns/op
Iteration  16: 10.550 ns/op
Iteration  17: 10.549 ns/op
Iteration  18: 10.550 ns/op
Iteration  19: 10.549 ns/op
Iteration  20: 10.551 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.446 ns/op
# Warmup Iteration   2: 9.714 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.840 ns/op
# Warmup Iteration   5: 9.838 ns/op
Iteration   1: 9.839 ns/op
Iteration   2: 9.836 ns/op
Iteration   3: 9.852 ns/op
Iteration   4: 9.829 ns/op
Iteration   5: 9.844 ns/op
Iteration   6: 9.831 ns/op
Iteration   7: 9.841 ns/op
Iteration   8: 9.846 ns/op
Iteration   9: 9.827 ns/op
Iteration  10: 9.844 ns/op
Iteration  11: 9.851 ns/op
Iteration  12: 9.859 ns/op
Iteration  13: 9.845 ns/op
Iteration  14: 9.849 ns/op
Iteration  15: 9.839 ns/op
Iteration  16: 9.859 ns/op
Iteration  17: 9.843 ns/op
Iteration  18: 9.854 ns/op
Iteration  19: 9.839 ns/op
Iteration  20: 9.838 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.445 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.833 ns/op
# Warmup Iteration   4: 9.833 ns/op
# Warmup Iteration   5: 9.835 ns/op
Iteration   1: 9.850 ns/op
Iteration   2: 9.846 ns/op
Iteration   3: 9.840 ns/op
Iteration   4: 9.838 ns/op
Iteration   5: 9.826 ns/op
Iteration   6: 9.824 ns/op
Iteration   7: 9.840 ns/op
Iteration   8: 9.852 ns/op
Iteration   9: 9.829 ns/op
Iteration  10: 9.838 ns/op
Iteration  11: 9.849 ns/op
Iteration  12: 9.832 ns/op
Iteration  13: 9.834 ns/op
Iteration  14: 9.833 ns/op
Iteration  15: 9.842 ns/op
Iteration  16: 9.848 ns/op
Iteration  17: 9.833 ns/op
Iteration  18: 9.834 ns/op
Iteration  19: 9.830 ns/op
Iteration  20: 9.835 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.844 ns/op
# Warmup Iteration   4: 9.840 ns/op
# Warmup Iteration   5: 9.835 ns/op
Iteration   1: 9.833 ns/op
Iteration   2: 9.833 ns/op
Iteration   3: 9.844 ns/op
Iteration   4: 9.826 ns/op
Iteration   5: 9.804 ns/op
Iteration   6: 9.824 ns/op
Iteration   7: 9.833 ns/op
Iteration   8: 9.834 ns/op
Iteration   9: 9.824 ns/op
Iteration  10: 9.835 ns/op
Iteration  11: 9.835 ns/op
Iteration  12: 9.843 ns/op
Iteration  13: 9.835 ns/op
Iteration  14: 9.821 ns/op
Iteration  15: 9.819 ns/op
Iteration  16: 9.836 ns/op
Iteration  17: 9.830 ns/op
Iteration  18: 9.807 ns/op
Iteration  19: 9.827 ns/op
Iteration  20: 9.856 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.212 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.898 ns/op
# Warmup Iteration   5: 9.894 ns/op
Iteration   1: 9.886 ns/op
Iteration   2: 9.878 ns/op
Iteration   3: 9.901 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.905 ns/op
Iteration   6: 9.894 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.908 ns/op
Iteration   9: 9.903 ns/op
Iteration  10: 9.890 ns/op
Iteration  11: 9.917 ns/op
Iteration  12: 9.898 ns/op
Iteration  13: 9.910 ns/op
Iteration  14: 9.906 ns/op
Iteration  15: 9.908 ns/op
Iteration  16: 9.899 ns/op
Iteration  17: 9.889 ns/op
Iteration  18: 9.904 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.889 ns/op


Result "benchmark.StringContains.stringContains":
  9.914 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (9.804, 9.914, 10.551), stdev = 0.203
  CI (99.9%): [9.845, 9.983] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpGN[B[.u`])}cCT4bW[K$d$|*0:Ibai57-q{zNN_R+8!8\r
J#ssLN&<qc  avgt  100  775.537 ± 6.747  ns/op
StringContains.stringContains     http  httpGN[B[.u`])}cCT4bW[K$d$|*0:Ibai57-q{zNN_R+8!8\r
J#ssLN&<qc  avgt  100    9.914 ± 0.069  ns/op

Benchmark result is saved to http_64_0_1.csv
