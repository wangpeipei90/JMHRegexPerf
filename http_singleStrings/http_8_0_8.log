# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpaul%)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 245.611 ns/op
# Warmup Iteration   2: 190.560 ns/op
# Warmup Iteration   3: 157.817 ns/op
# Warmup Iteration   4: 158.410 ns/op
# Warmup Iteration   5: 159.990 ns/op
Iteration   1: 160.540 ns/op
Iteration   2: 160.954 ns/op
Iteration   3: 157.196 ns/op
Iteration   4: 157.059 ns/op
Iteration   5: 157.141 ns/op
Iteration   6: 156.998 ns/op
Iteration   7: 157.224 ns/op
Iteration   8: 157.043 ns/op
Iteration   9: 157.067 ns/op
Iteration  10: 157.108 ns/op
Iteration  11: 157.553 ns/op
Iteration  12: 157.166 ns/op
Iteration  13: 156.804 ns/op
Iteration  14: 156.876 ns/op
Iteration  15: 157.092 ns/op
Iteration  16: 157.484 ns/op
Iteration  17: 156.875 ns/op
Iteration  18: 156.874 ns/op
Iteration  19: 157.751 ns/op
Iteration  20: 157.566 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 246.784 ns/op
# Warmup Iteration   2: 193.391 ns/op
# Warmup Iteration   3: 163.374 ns/op
# Warmup Iteration   4: 163.716 ns/op
# Warmup Iteration   5: 164.359 ns/op
Iteration   1: 165.191 ns/op
Iteration   2: 166.216 ns/op
Iteration   3: 162.612 ns/op
Iteration   4: 162.363 ns/op
Iteration   5: 162.187 ns/op
Iteration   6: 162.271 ns/op
Iteration   7: 162.156 ns/op
Iteration   8: 162.373 ns/op
Iteration   9: 162.352 ns/op
Iteration  10: 162.171 ns/op
Iteration  11: 163.672 ns/op
Iteration  12: 161.945 ns/op
Iteration  13: 161.972 ns/op
Iteration  14: 162.262 ns/op
Iteration  15: 162.070 ns/op
Iteration  16: 162.148 ns/op
Iteration  17: 162.076 ns/op
Iteration  18: 162.061 ns/op
Iteration  19: 161.552 ns/op
Iteration  20: 161.986 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 248.983 ns/op
# Warmup Iteration   2: 187.543 ns/op
# Warmup Iteration   3: 158.051 ns/op
# Warmup Iteration   4: 158.583 ns/op
# Warmup Iteration   5: 159.292 ns/op
Iteration   1: 160.117 ns/op
Iteration   2: 161.225 ns/op
Iteration   3: 158.626 ns/op
Iteration   4: 157.298 ns/op
Iteration   5: 157.382 ns/op
Iteration   6: 157.323 ns/op
Iteration   7: 157.397 ns/op
Iteration   8: 159.514 ns/op
Iteration   9: 158.075 ns/op
Iteration  10: 158.339 ns/op
Iteration  11: 157.308 ns/op
Iteration  12: 156.859 ns/op
Iteration  13: 157.052 ns/op
Iteration  14: 156.859 ns/op
Iteration  15: 156.996 ns/op
Iteration  16: 157.006 ns/op
Iteration  17: 157.127 ns/op
Iteration  18: 157.458 ns/op
Iteration  19: 156.936 ns/op
Iteration  20: 157.073 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 257.153 ns/op
# Warmup Iteration   2: 198.206 ns/op
# Warmup Iteration   3: 179.808 ns/op
# Warmup Iteration   4: 180.549 ns/op
# Warmup Iteration   5: 181.327 ns/op
Iteration   1: 182.043 ns/op
Iteration   2: 183.129 ns/op
Iteration   3: 178.061 ns/op
Iteration   4: 178.956 ns/op
Iteration   5: 178.806 ns/op
Iteration   6: 178.958 ns/op
Iteration   7: 178.894 ns/op
Iteration   8: 179.005 ns/op
Iteration   9: 179.368 ns/op
Iteration  10: 179.331 ns/op
Iteration  11: 177.979 ns/op
Iteration  12: 178.922 ns/op
Iteration  13: 178.984 ns/op
Iteration  14: 178.596 ns/op
Iteration  15: 178.795 ns/op
Iteration  16: 178.467 ns/op
Iteration  17: 178.356 ns/op
Iteration  18: 178.631 ns/op
Iteration  19: 177.989 ns/op
Iteration  20: 178.383 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 243.439 ns/op
# Warmup Iteration   2: 186.898 ns/op
# Warmup Iteration   3: 158.081 ns/op
# Warmup Iteration   4: 158.527 ns/op
# Warmup Iteration   5: 159.237 ns/op
Iteration   1: 160.117 ns/op
Iteration   2: 161.079 ns/op
Iteration   3: 157.243 ns/op
Iteration   4: 157.185 ns/op
Iteration   5: 157.276 ns/op
Iteration   6: 157.187 ns/op
Iteration   7: 157.166 ns/op
Iteration   8: 157.223 ns/op
Iteration   9: 157.455 ns/op
Iteration  10: 157.615 ns/op
Iteration  11: 157.876 ns/op
Iteration  12: 157.243 ns/op
Iteration  13: 156.838 ns/op
Iteration  14: 156.816 ns/op
Iteration  15: 157.016 ns/op
Iteration  16: 157.129 ns/op
Iteration  17: 157.067 ns/op
Iteration  18: 157.163 ns/op
Iteration  19: 157.967 ns/op
Iteration  20: 157.001 ns/op


Result "benchmark.StringContains.regexMatches":
  162.913 ±(99.9%) 2.859 ns/op [Average]
  (min, avg, max) = (156.804, 162.913, 183.129), stdev = 8.430
  CI (99.9%): [160.054, 165.772] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpaul%)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.186 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.910 ns/op
# Warmup Iteration   4: 9.902 ns/op
# Warmup Iteration   5: 9.894 ns/op
Iteration   1: 9.914 ns/op
Iteration   2: 9.913 ns/op
Iteration   3: 9.906 ns/op
Iteration   4: 9.907 ns/op
Iteration   5: 9.928 ns/op
Iteration   6: 9.929 ns/op
Iteration   7: 9.896 ns/op
Iteration   8: 9.905 ns/op
Iteration   9: 9.923 ns/op
Iteration  10: 9.913 ns/op
Iteration  11: 9.922 ns/op
Iteration  12: 9.913 ns/op
Iteration  13: 9.904 ns/op
Iteration  14: 9.900 ns/op
Iteration  15: 9.918 ns/op
Iteration  16: 9.906 ns/op
Iteration  17: 9.920 ns/op
Iteration  18: 9.912 ns/op
Iteration  19: 9.907 ns/op
Iteration  20: 9.906 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.077 ns/op
# Warmup Iteration   2: 10.470 ns/op
# Warmup Iteration   3: 9.900 ns/op
# Warmup Iteration   4: 9.887 ns/op
# Warmup Iteration   5: 9.887 ns/op
Iteration   1: 9.891 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.897 ns/op
Iteration   4: 9.910 ns/op
Iteration   5: 9.900 ns/op
Iteration   6: 9.893 ns/op
Iteration   7: 9.895 ns/op
Iteration   8: 9.893 ns/op
Iteration   9: 9.881 ns/op
Iteration  10: 9.878 ns/op
Iteration  11: 9.861 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.878 ns/op
Iteration  14: 9.894 ns/op
Iteration  15: 9.865 ns/op
Iteration  16: 9.874 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.873 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.871 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.192 ns/op
# Warmup Iteration   2: 10.477 ns/op
# Warmup Iteration   3: 9.906 ns/op
# Warmup Iteration   4: 9.907 ns/op
# Warmup Iteration   5: 9.894 ns/op
Iteration   1: 9.904 ns/op
Iteration   2: 9.899 ns/op
Iteration   3: 9.898 ns/op
Iteration   4: 9.898 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.911 ns/op
Iteration   7: 9.905 ns/op
Iteration   8: 9.902 ns/op
Iteration   9: 9.899 ns/op
Iteration  10: 9.906 ns/op
Iteration  11: 9.899 ns/op
Iteration  12: 9.902 ns/op
Iteration  13: 9.896 ns/op
Iteration  14: 9.903 ns/op
Iteration  15: 9.903 ns/op
Iteration  16: 9.871 ns/op
Iteration  17: 9.912 ns/op
Iteration  18: 9.889 ns/op
Iteration  19: 9.914 ns/op
Iteration  20: 9.903 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.046 ns/op
# Warmup Iteration   2: 10.458 ns/op
# Warmup Iteration   3: 9.918 ns/op
# Warmup Iteration   4: 9.934 ns/op
# Warmup Iteration   5: 9.923 ns/op
Iteration   1: 9.936 ns/op
Iteration   2: 9.924 ns/op
Iteration   3: 9.912 ns/op
Iteration   4: 9.936 ns/op
Iteration   5: 9.913 ns/op
Iteration   6: 9.924 ns/op
Iteration   7: 9.906 ns/op
Iteration   8: 9.919 ns/op
Iteration   9: 9.914 ns/op
Iteration  10: 9.927 ns/op
Iteration  11: 9.924 ns/op
Iteration  12: 9.889 ns/op
Iteration  13: 9.914 ns/op
Iteration  14: 9.896 ns/op
Iteration  15: 9.890 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.909 ns/op
Iteration  18: 9.901 ns/op
Iteration  19: 9.912 ns/op
Iteration  20: 9.901 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.086 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.891 ns/op
# Warmup Iteration   4: 9.903 ns/op
# Warmup Iteration   5: 9.898 ns/op
Iteration   1: 9.911 ns/op
Iteration   2: 9.881 ns/op
Iteration   3: 9.915 ns/op
Iteration   4: 9.909 ns/op
Iteration   5: 9.891 ns/op
Iteration   6: 9.900 ns/op
Iteration   7: 9.892 ns/op
Iteration   8: 9.895 ns/op
Iteration   9: 9.892 ns/op
Iteration  10: 9.890 ns/op
Iteration  11: 9.926 ns/op
Iteration  12: 9.915 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.911 ns/op
Iteration  15: 9.906 ns/op
Iteration  16: 9.901 ns/op
Iteration  17: 9.890 ns/op
Iteration  18: 9.894 ns/op
Iteration  19: 9.891 ns/op
Iteration  20: 9.920 ns/op


Result "benchmark.StringContains.stringContains":
  9.902 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (9.861, 9.902, 9.936), stdev = 0.016
  CI (99.9%): [9.896, 9.907] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpaul%  avgt  100  162.913 ± 2.859  ns/op
StringContains.stringContains     http  httpaul%  avgt  100    9.902 ± 0.005  ns/op

Benchmark result is saved to http_8_0_8.csv
