# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ?<http,C)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 251.266 ns/op
# Warmup Iteration   2: 191.524 ns/op
# Warmup Iteration   3: 172.672 ns/op
# Warmup Iteration   4: 173.610 ns/op
# Warmup Iteration   5: 174.140 ns/op
Iteration   1: 175.341 ns/op
Iteration   2: 176.843 ns/op
Iteration   3: 171.629 ns/op
Iteration   4: 171.503 ns/op
Iteration   5: 171.595 ns/op
Iteration   6: 170.976 ns/op
Iteration   7: 171.378 ns/op
Iteration   8: 171.451 ns/op
Iteration   9: 171.565 ns/op
Iteration  10: 172.521 ns/op
Iteration  11: 171.585 ns/op
Iteration  12: 171.726 ns/op
Iteration  13: 171.411 ns/op
Iteration  14: 171.360 ns/op
Iteration  15: 171.205 ns/op
Iteration  16: 171.286 ns/op
Iteration  17: 170.732 ns/op
Iteration  18: 171.365 ns/op
Iteration  19: 171.202 ns/op
Iteration  20: 171.320 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 231.090 ns/op
# Warmup Iteration   2: 172.437 ns/op
# Warmup Iteration   3: 151.008 ns/op
# Warmup Iteration   4: 153.808 ns/op
# Warmup Iteration   5: 152.638 ns/op
Iteration   1: 153.581 ns/op
Iteration   2: 149.803 ns/op
Iteration   3: 149.803 ns/op
Iteration   4: 149.825 ns/op
Iteration   5: 149.904 ns/op
Iteration   6: 150.276 ns/op
Iteration   7: 150.892 ns/op
Iteration   8: 149.901 ns/op
Iteration   9: 149.777 ns/op
Iteration  10: 149.846 ns/op
Iteration  11: 149.302 ns/op
Iteration  12: 151.019 ns/op
Iteration  13: 150.656 ns/op
Iteration  14: 150.673 ns/op
Iteration  15: 150.675 ns/op
Iteration  16: 150.741 ns/op
Iteration  17: 150.679 ns/op
Iteration  18: 150.850 ns/op
Iteration  19: 151.152 ns/op
Iteration  20: 151.069 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 226.604 ns/op
# Warmup Iteration   2: 162.692 ns/op
# Warmup Iteration   3: 141.881 ns/op
# Warmup Iteration   4: 141.330 ns/op
# Warmup Iteration   5: 142.029 ns/op
Iteration   1: 142.899 ns/op
Iteration   2: 139.582 ns/op
Iteration   3: 139.423 ns/op
Iteration   4: 139.389 ns/op
Iteration   5: 139.473 ns/op
Iteration   6: 141.886 ns/op
Iteration   7: 139.515 ns/op
Iteration   8: 139.551 ns/op
Iteration   9: 139.543 ns/op
Iteration  10: 139.230 ns/op
Iteration  11: 139.030 ns/op
Iteration  12: 138.682 ns/op
Iteration  13: 139.038 ns/op
Iteration  14: 139.282 ns/op
Iteration  15: 139.349 ns/op
Iteration  16: 139.122 ns/op
Iteration  17: 139.180 ns/op
Iteration  18: 139.188 ns/op
Iteration  19: 139.211 ns/op
Iteration  20: 139.284 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 235.964 ns/op
# Warmup Iteration   2: 178.116 ns/op
# Warmup Iteration   3: 151.728 ns/op
# Warmup Iteration   4: 151.432 ns/op
# Warmup Iteration   5: 155.417 ns/op
Iteration   1: 153.783 ns/op
Iteration   2: 150.070 ns/op
Iteration   3: 150.052 ns/op
Iteration   4: 150.059 ns/op
Iteration   5: 150.068 ns/op
Iteration   6: 150.041 ns/op
Iteration   7: 150.347 ns/op
Iteration   8: 150.391 ns/op
Iteration   9: 150.101 ns/op
Iteration  10: 150.130 ns/op
Iteration  11: 149.642 ns/op
Iteration  12: 149.634 ns/op
Iteration  13: 149.607 ns/op
Iteration  14: 150.807 ns/op
Iteration  15: 149.619 ns/op
Iteration  16: 149.724 ns/op
Iteration  17: 149.666 ns/op
Iteration  18: 149.703 ns/op
Iteration  19: 149.641 ns/op
Iteration  20: 149.637 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 239.312 ns/op
# Warmup Iteration   2: 177.696 ns/op
# Warmup Iteration   3: 151.508 ns/op
# Warmup Iteration   4: 152.073 ns/op
# Warmup Iteration   5: 155.951 ns/op
Iteration   1: 154.233 ns/op
Iteration   2: 150.997 ns/op
Iteration   3: 150.629 ns/op
Iteration   4: 150.769 ns/op
Iteration   5: 150.693 ns/op
Iteration   6: 150.735 ns/op
Iteration   7: 150.796 ns/op
Iteration   8: 150.604 ns/op
Iteration   9: 150.545 ns/op
Iteration  10: 150.902 ns/op
Iteration  11: 150.419 ns/op
Iteration  12: 150.365 ns/op
Iteration  13: 150.393 ns/op
Iteration  14: 150.270 ns/op
Iteration  15: 150.359 ns/op
Iteration  16: 150.371 ns/op
Iteration  17: 150.567 ns/op
Iteration  18: 150.910 ns/op
Iteration  19: 150.488 ns/op
Iteration  20: 150.572 ns/op


Result "benchmark.StringContains.regexMatches":
  152.586 ±(99.9%) 3.609 ns/op [Average]
  (min, avg, max) = (138.682, 152.586, 176.843), stdev = 10.643
  CI (99.9%): [148.977, 156.196] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ?<http,C)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.063 ns/op
# Warmup Iteration   2: 10.482 ns/op
# Warmup Iteration   3: 9.902 ns/op
# Warmup Iteration   4: 9.900 ns/op
# Warmup Iteration   5: 9.903 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.887 ns/op
Iteration   3: 9.883 ns/op
Iteration   4: 9.884 ns/op
Iteration   5: 9.865 ns/op
Iteration   6: 9.883 ns/op
Iteration   7: 9.895 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.884 ns/op
Iteration  14: 9.872 ns/op
Iteration  15: 9.889 ns/op
Iteration  16: 9.896 ns/op
Iteration  17: 9.914 ns/op
Iteration  18: 9.880 ns/op
Iteration  19: 9.879 ns/op
Iteration  20: 9.901 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.042 ns/op
# Warmup Iteration   2: 10.479 ns/op
# Warmup Iteration   3: 9.906 ns/op
# Warmup Iteration   4: 9.898 ns/op
# Warmup Iteration   5: 9.900 ns/op
Iteration   1: 9.914 ns/op
Iteration   2: 9.879 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.892 ns/op
Iteration   5: 9.893 ns/op
Iteration   6: 9.893 ns/op
Iteration   7: 9.887 ns/op
Iteration   8: 9.906 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.888 ns/op
Iteration  11: 9.913 ns/op
Iteration  12: 9.897 ns/op
Iteration  13: 9.895 ns/op
Iteration  14: 9.905 ns/op
Iteration  15: 9.919 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.919 ns/op
Iteration  18: 9.905 ns/op
Iteration  19: 9.913 ns/op
Iteration  20: 9.890 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.074 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.881 ns/op
# Warmup Iteration   4: 9.870 ns/op
# Warmup Iteration   5: 9.872 ns/op
Iteration   1: 9.874 ns/op
Iteration   2: 9.867 ns/op
Iteration   3: 9.877 ns/op
Iteration   4: 9.886 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.845 ns/op
Iteration   7: 9.860 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.860 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.866 ns/op
Iteration  12: 9.873 ns/op
Iteration  13: 9.897 ns/op
Iteration  14: 9.869 ns/op
Iteration  15: 9.863 ns/op
Iteration  16: 9.854 ns/op
Iteration  17: 9.872 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.883 ns/op
Iteration  20: 9.868 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.197 ns/op
# Warmup Iteration   2: 10.453 ns/op
# Warmup Iteration   3: 9.855 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.852 ns/op
Iteration   2: 9.883 ns/op
Iteration   3: 9.862 ns/op
Iteration   4: 9.859 ns/op
Iteration   5: 9.850 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.866 ns/op
Iteration   9: 9.847 ns/op
Iteration  10: 9.870 ns/op
Iteration  11: 9.889 ns/op
Iteration  12: 9.864 ns/op
Iteration  13: 9.865 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.874 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.084 ns/op
# Warmup Iteration   2: 10.471 ns/op
# Warmup Iteration   3: 9.916 ns/op
# Warmup Iteration   4: 9.904 ns/op
# Warmup Iteration   5: 9.910 ns/op
Iteration   1: 9.920 ns/op
Iteration   2: 9.905 ns/op
Iteration   3: 9.921 ns/op
Iteration   4: 9.901 ns/op
Iteration   5: 9.912 ns/op
Iteration   6: 9.901 ns/op
Iteration   7: 9.898 ns/op
Iteration   8: 9.892 ns/op
Iteration   9: 9.888 ns/op
Iteration  10: 9.893 ns/op
Iteration  11: 9.911 ns/op
Iteration  12: 9.898 ns/op
Iteration  13: 9.902 ns/op
Iteration  14: 9.902 ns/op
Iteration  15: 9.918 ns/op
Iteration  16: 9.910 ns/op
Iteration  17: 9.896 ns/op
Iteration  18: 9.891 ns/op
Iteration  19: 9.910 ns/op
Iteration  20: 9.917 ns/op


Result "benchmark.StringContains.stringContains":
  9.884 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.845, 9.884, 9.921), stdev = 0.019
  CI (99.9%): [9.878, 9.891] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ?<http,C  avgt  100  152.586 ± 3.609  ns/op
StringContains.stringContains     http  ?<http,C  avgt  100    9.884 ± 0.007  ns/op

Benchmark result is saved to http_8_0.25_10.csv
