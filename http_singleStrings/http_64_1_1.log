# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = lPo['5aZ.j*(GM9 T@hp:y='eR;"ygQjLIrzXg*WOifCceI]4?qeWYG-_
N`hIIu)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 536.934 ns/op
# Warmup Iteration   2: 524.074 ns/op
# Warmup Iteration   3: 516.884 ns/op
# Warmup Iteration   4: 452.378 ns/op
# Warmup Iteration   5: 438.681 ns/op
Iteration   1: 442.497 ns/op
Iteration   2: 438.414 ns/op
Iteration   3: 438.400 ns/op
Iteration   4: 443.980 ns/op
Iteration   5: 438.275 ns/op
Iteration   6: 446.137 ns/op
Iteration   7: 438.186 ns/op
Iteration   8: 438.976 ns/op
Iteration   9: 448.004 ns/op
Iteration  10: 438.193 ns/op
Iteration  11: 438.281 ns/op
Iteration  12: 451.079 ns/op
Iteration  13: 438.245 ns/op
Iteration  14: 438.280 ns/op
Iteration  15: 440.644 ns/op
Iteration  16: 438.159 ns/op
Iteration  17: 440.296 ns/op
Iteration  18: 438.276 ns/op
Iteration  19: 438.243 ns/op
Iteration  20: 440.281 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 529.433 ns/op
# Warmup Iteration   2: 525.973 ns/op
# Warmup Iteration   3: 527.210 ns/op
# Warmup Iteration   4: 465.428 ns/op
# Warmup Iteration   5: 451.965 ns/op
Iteration   1: 454.508 ns/op
Iteration   2: 451.970 ns/op
Iteration   3: 450.024 ns/op
Iteration   4: 453.253 ns/op
Iteration   5: 447.011 ns/op
Iteration   6: 455.113 ns/op
Iteration   7: 451.136 ns/op
Iteration   8: 451.942 ns/op
Iteration   9: 461.505 ns/op
Iteration  10: 450.316 ns/op
Iteration  11: 450.145 ns/op
Iteration  12: 462.458 ns/op
Iteration  13: 451.598 ns/op
Iteration  14: 449.639 ns/op
Iteration  15: 453.966 ns/op
Iteration  16: 451.742 ns/op
Iteration  17: 450.992 ns/op
Iteration  18: 453.975 ns/op
Iteration  19: 449.054 ns/op
Iteration  20: 451.195 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 529.801 ns/op
# Warmup Iteration   2: 517.298 ns/op
# Warmup Iteration   3: 518.643 ns/op
# Warmup Iteration   4: 454.604 ns/op
# Warmup Iteration   5: 441.680 ns/op
Iteration   1: 445.691 ns/op
Iteration   2: 441.653 ns/op
Iteration   3: 441.655 ns/op
Iteration   4: 447.317 ns/op
Iteration   5: 441.573 ns/op
Iteration   6: 449.040 ns/op
Iteration   7: 441.598 ns/op
Iteration   8: 441.719 ns/op
Iteration   9: 451.668 ns/op
Iteration  10: 441.616 ns/op
Iteration  11: 441.903 ns/op
Iteration  12: 454.648 ns/op
Iteration  13: 441.576 ns/op
Iteration  14: 441.729 ns/op
Iteration  15: 443.896 ns/op
Iteration  16: 441.637 ns/op
Iteration  17: 441.604 ns/op
Iteration  18: 443.896 ns/op
Iteration  19: 441.543 ns/op
Iteration  20: 444.004 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 529.315 ns/op
# Warmup Iteration   2: 521.146 ns/op
# Warmup Iteration   3: 516.008 ns/op
# Warmup Iteration   4: 452.189 ns/op
# Warmup Iteration   5: 440.222 ns/op
Iteration   1: 444.433 ns/op
Iteration   2: 440.583 ns/op
Iteration   3: 440.145 ns/op
Iteration   4: 444.958 ns/op
Iteration   5: 438.876 ns/op
Iteration   6: 447.120 ns/op
Iteration   7: 439.549 ns/op
Iteration   8: 438.345 ns/op
Iteration   9: 449.149 ns/op
Iteration  10: 439.407 ns/op
Iteration  11: 441.587 ns/op
Iteration  12: 452.329 ns/op
Iteration  13: 439.790 ns/op
Iteration  14: 441.724 ns/op
Iteration  15: 441.144 ns/op
Iteration  16: 439.266 ns/op
Iteration  17: 441.410 ns/op
Iteration  18: 438.494 ns/op
Iteration  19: 440.292 ns/op
Iteration  20: 441.652 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 535.634 ns/op
# Warmup Iteration   2: 522.153 ns/op
# Warmup Iteration   3: 521.869 ns/op
# Warmup Iteration   4: 459.963 ns/op
# Warmup Iteration   5: 445.775 ns/op
Iteration   1: 449.643 ns/op
Iteration   2: 445.141 ns/op
Iteration   3: 444.891 ns/op
Iteration   4: 450.685 ns/op
Iteration   5: 444.903 ns/op
Iteration   6: 452.387 ns/op
Iteration   7: 444.915 ns/op
Iteration   8: 444.931 ns/op
Iteration   9: 454.512 ns/op
Iteration  10: 444.933 ns/op
Iteration  11: 444.899 ns/op
Iteration  12: 457.222 ns/op
Iteration  13: 444.912 ns/op
Iteration  14: 444.949 ns/op
Iteration  15: 447.243 ns/op
Iteration  16: 444.915 ns/op
Iteration  17: 444.964 ns/op
Iteration  18: 446.648 ns/op
Iteration  19: 444.906 ns/op
Iteration  20: 445.086 ns/op


Result "benchmark.StringContains.regexMatches":
  445.273 ±(99.9%) 1.918 ns/op [Average]
  (min, avg, max) = (438.159, 445.273, 462.458), stdev = 5.655
  CI (99.9%): [443.355, 447.191] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = lPo['5aZ.j*(GM9 T@hp:y='eR;"ygQjLIrzXg*WOifCceI]4?qeWYG-_
N`hIIu)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.462 ns/op
# Warmup Iteration   2: 15.730 ns/op
# Warmup Iteration   3: 16.021 ns/op
# Warmup Iteration   4: 16.022 ns/op
# Warmup Iteration   5: 16.021 ns/op
Iteration   1: 16.020 ns/op
Iteration   2: 16.020 ns/op
Iteration   3: 16.021 ns/op
Iteration   4: 16.022 ns/op
Iteration   5: 16.021 ns/op
Iteration   6: 16.024 ns/op
Iteration   7: 16.021 ns/op
Iteration   8: 16.023 ns/op
Iteration   9: 16.023 ns/op
Iteration  10: 16.021 ns/op
Iteration  11: 16.022 ns/op
Iteration  12: 17.512 ns/op
Iteration  13: 17.513 ns/op
Iteration  14: 17.509 ns/op
Iteration  15: 17.507 ns/op
Iteration  16: 17.515 ns/op
Iteration  17: 17.512 ns/op
Iteration  18: 17.513 ns/op
Iteration  19: 17.515 ns/op
Iteration  20: 17.515 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.453 ns/op
# Warmup Iteration   2: 15.729 ns/op
# Warmup Iteration   3: 16.023 ns/op
# Warmup Iteration   4: 16.023 ns/op
# Warmup Iteration   5: 16.023 ns/op
Iteration   1: 16.024 ns/op
Iteration   2: 16.021 ns/op
Iteration   3: 16.313 ns/op
Iteration   4: 16.024 ns/op
Iteration   5: 16.025 ns/op
Iteration   6: 16.025 ns/op
Iteration   7: 16.022 ns/op
Iteration   8: 16.024 ns/op
Iteration   9: 16.026 ns/op
Iteration  10: 16.024 ns/op
Iteration  11: 16.025 ns/op
Iteration  12: 17.509 ns/op
Iteration  13: 17.510 ns/op
Iteration  14: 17.514 ns/op
Iteration  15: 17.511 ns/op
Iteration  16: 17.513 ns/op
Iteration  17: 17.510 ns/op
Iteration  18: 17.507 ns/op
Iteration  19: 17.515 ns/op
Iteration  20: 17.514 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.435 ns/op
# Warmup Iteration   2: 15.712 ns/op
# Warmup Iteration   3: 16.053 ns/op
# Warmup Iteration   4: 16.051 ns/op
# Warmup Iteration   5: 16.054 ns/op
Iteration   1: 16.052 ns/op
Iteration   2: 16.051 ns/op
Iteration   3: 16.323 ns/op
Iteration   4: 16.052 ns/op
Iteration   5: 16.056 ns/op
Iteration   6: 16.055 ns/op
Iteration   7: 16.051 ns/op
Iteration   8: 16.079 ns/op
Iteration   9: 16.053 ns/op
Iteration  10: 16.053 ns/op
Iteration  11: 16.053 ns/op
Iteration  12: 16.053 ns/op
Iteration  13: 16.052 ns/op
Iteration  14: 16.052 ns/op
Iteration  15: 16.051 ns/op
Iteration  16: 16.056 ns/op
Iteration  17: 16.051 ns/op
Iteration  18: 16.053 ns/op
Iteration  19: 16.052 ns/op
Iteration  20: 16.057 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.426 ns/op
# Warmup Iteration   2: 15.734 ns/op
# Warmup Iteration   3: 15.986 ns/op
# Warmup Iteration   4: 15.988 ns/op
# Warmup Iteration   5: 15.990 ns/op
Iteration   1: 15.991 ns/op
Iteration   2: 15.993 ns/op
Iteration   3: 15.988 ns/op
Iteration   4: 15.985 ns/op
Iteration   5: 15.989 ns/op
Iteration   6: 15.988 ns/op
Iteration   7: 15.988 ns/op
Iteration   8: 16.013 ns/op
Iteration   9: 15.992 ns/op
Iteration  10: 15.987 ns/op
Iteration  11: 15.989 ns/op
Iteration  12: 15.989 ns/op
Iteration  13: 15.986 ns/op
Iteration  14: 15.990 ns/op
Iteration  15: 15.989 ns/op
Iteration  16: 15.989 ns/op
Iteration  17: 15.987 ns/op
Iteration  18: 15.988 ns/op
Iteration  19: 15.982 ns/op
Iteration  20: 16.017 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.451 ns/op
# Warmup Iteration   2: 15.741 ns/op
# Warmup Iteration   3: 16.050 ns/op
# Warmup Iteration   4: 16.049 ns/op
# Warmup Iteration   5: 16.052 ns/op
Iteration   1: 16.049 ns/op
Iteration   2: 16.048 ns/op
Iteration   3: 16.047 ns/op
Iteration   4: 16.046 ns/op
Iteration   5: 16.057 ns/op
Iteration   6: 16.048 ns/op
Iteration   7: 16.048 ns/op
Iteration   8: 16.074 ns/op
Iteration   9: 16.048 ns/op
Iteration  10: 16.048 ns/op
Iteration  11: 16.048 ns/op
Iteration  12: 16.049 ns/op
Iteration  13: 16.054 ns/op
Iteration  14: 16.049 ns/op
Iteration  15: 16.055 ns/op
Iteration  16: 16.048 ns/op
Iteration  17: 16.050 ns/op
Iteration  18: 16.048 ns/op
Iteration  19: 16.077 ns/op
Iteration  20: 16.061 ns/op


Result "benchmark.StringContains.stringContains":
  16.302 ±(99.9%) 0.194 ns/op [Average]
  (min, avg, max) = (15.982, 16.302, 17.515), stdev = 0.572
  CI (99.9%): [16.108, 16.496] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  lPo['5aZ.j*(GM9 T@hp:y='eR;"ygQjLIrzXg*WOifCceI]4?qeWYG-_
N`hIIu  avgt  100  445.273 ± 1.918  ns/op
StringContains.stringContains     http  lPo['5aZ.j*(GM9 T@hp:y='eR;"ygQjLIrzXg*WOifCceI]4?qeWYG-_
N`hIIu  avgt  100   16.302 ± 0.194  ns/op

Benchmark result is saved to http_64_1_1.csv
