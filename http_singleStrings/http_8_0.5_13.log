# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ?Ha`http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 221.880 ns/op
# Warmup Iteration   2: 155.247 ns/op
# Warmup Iteration   3: 134.371 ns/op
# Warmup Iteration   4: 136.127 ns/op
# Warmup Iteration   5: 134.275 ns/op
Iteration   1: 135.221 ns/op
Iteration   2: 131.960 ns/op
Iteration   3: 132.433 ns/op
Iteration   4: 131.470 ns/op
Iteration   5: 131.779 ns/op
Iteration   6: 131.851 ns/op
Iteration   7: 131.705 ns/op
Iteration   8: 132.614 ns/op
Iteration   9: 131.825 ns/op
Iteration  10: 131.428 ns/op
Iteration  11: 131.485 ns/op
Iteration  12: 131.394 ns/op
Iteration  13: 131.536 ns/op
Iteration  14: 131.661 ns/op
Iteration  15: 132.400 ns/op
Iteration  16: 131.680 ns/op
Iteration  17: 131.750 ns/op
Iteration  18: 131.785 ns/op
Iteration  19: 132.024 ns/op
Iteration  20: 131.638 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 217.617 ns/op
# Warmup Iteration   2: 143.374 ns/op
# Warmup Iteration   3: 127.196 ns/op
# Warmup Iteration   4: 125.868 ns/op
# Warmup Iteration   5: 126.540 ns/op
Iteration   1: 128.503 ns/op
Iteration   2: 125.235 ns/op
Iteration   3: 125.549 ns/op
Iteration   4: 124.241 ns/op
Iteration   5: 125.271 ns/op
Iteration   6: 124.758 ns/op
Iteration   7: 124.530 ns/op
Iteration   8: 124.576 ns/op
Iteration   9: 124.285 ns/op
Iteration  10: 123.932 ns/op
Iteration  11: 124.042 ns/op
Iteration  12: 124.185 ns/op
Iteration  13: 124.476 ns/op
Iteration  14: 124.232 ns/op
Iteration  15: 124.262 ns/op
Iteration  16: 124.236 ns/op
Iteration  17: 124.552 ns/op
Iteration  18: 124.404 ns/op
Iteration  19: 124.653 ns/op
Iteration  20: 124.401 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 216.735 ns/op
# Warmup Iteration   2: 149.734 ns/op
# Warmup Iteration   3: 134.012 ns/op
# Warmup Iteration   4: 133.104 ns/op
# Warmup Iteration   5: 133.874 ns/op
Iteration   1: 134.296 ns/op
Iteration   2: 132.887 ns/op
Iteration   3: 132.118 ns/op
Iteration   4: 131.931 ns/op
Iteration   5: 132.599 ns/op
Iteration   6: 131.571 ns/op
Iteration   7: 131.511 ns/op
Iteration   8: 133.546 ns/op
Iteration   9: 131.115 ns/op
Iteration  10: 131.148 ns/op
Iteration  11: 131.157 ns/op
Iteration  12: 131.132 ns/op
Iteration  13: 131.401 ns/op
Iteration  14: 131.155 ns/op
Iteration  15: 131.198 ns/op
Iteration  16: 131.139 ns/op
Iteration  17: 131.369 ns/op
Iteration  18: 131.217 ns/op
Iteration  19: 131.695 ns/op
Iteration  20: 131.198 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 217.567 ns/op
# Warmup Iteration   2: 149.166 ns/op
# Warmup Iteration   3: 134.024 ns/op
# Warmup Iteration   4: 133.336 ns/op
# Warmup Iteration   5: 133.887 ns/op
Iteration   1: 134.631 ns/op
Iteration   2: 132.233 ns/op
Iteration   3: 131.399 ns/op
Iteration   4: 131.614 ns/op
Iteration   5: 131.750 ns/op
Iteration   6: 131.669 ns/op
Iteration   7: 131.616 ns/op
Iteration   8: 132.473 ns/op
Iteration   9: 131.692 ns/op
Iteration  10: 131.549 ns/op
Iteration  11: 131.654 ns/op
Iteration  12: 131.380 ns/op
Iteration  13: 131.864 ns/op
Iteration  14: 132.032 ns/op
Iteration  15: 132.037 ns/op
Iteration  16: 131.374 ns/op
Iteration  17: 131.345 ns/op
Iteration  18: 131.644 ns/op
Iteration  19: 131.933 ns/op
Iteration  20: 131.727 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.383 ns/op
# Warmup Iteration   2: 148.855 ns/op
# Warmup Iteration   3: 133.176 ns/op
# Warmup Iteration   4: 131.724 ns/op
# Warmup Iteration   5: 132.440 ns/op
Iteration   1: 133.298 ns/op
Iteration   2: 130.588 ns/op
Iteration   3: 130.051 ns/op
Iteration   4: 130.078 ns/op
Iteration   5: 130.100 ns/op
Iteration   6: 130.186 ns/op
Iteration   7: 130.662 ns/op
Iteration   8: 130.072 ns/op
Iteration   9: 130.744 ns/op
Iteration  10: 129.778 ns/op
Iteration  11: 130.267 ns/op
Iteration  12: 130.490 ns/op
Iteration  13: 129.754 ns/op
Iteration  14: 129.866 ns/op
Iteration  15: 129.790 ns/op
Iteration  16: 129.950 ns/op
Iteration  17: 130.546 ns/op
Iteration  18: 129.971 ns/op
Iteration  19: 130.922 ns/op
Iteration  20: 129.999 ns/op


Result "benchmark.StringContains.regexMatches":
  130.141 ±(99.9%) 0.987 ns/op [Average]
  (min, avg, max) = (123.932, 130.141, 135.221), stdev = 2.911
  CI (99.9%): [129.154, 131.128] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ?Ha`http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.069 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.898 ns/op
# Warmup Iteration   4: 9.889 ns/op
# Warmup Iteration   5: 9.888 ns/op
Iteration   1: 9.909 ns/op
Iteration   2: 9.885 ns/op
Iteration   3: 9.902 ns/op
Iteration   4: 9.898 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.887 ns/op
Iteration   8: 9.895 ns/op
Iteration   9: 9.886 ns/op
Iteration  10: 9.890 ns/op
Iteration  11: 9.883 ns/op
Iteration  12: 9.900 ns/op
Iteration  13: 9.895 ns/op
Iteration  14: 9.888 ns/op
Iteration  15: 9.873 ns/op
Iteration  16: 9.893 ns/op
Iteration  17: 9.889 ns/op
Iteration  18: 9.879 ns/op
Iteration  19: 9.888 ns/op
Iteration  20: 9.896 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.071 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.873 ns/op
# Warmup Iteration   4: 9.855 ns/op
# Warmup Iteration   5: 9.892 ns/op
Iteration   1: 9.861 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.871 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.880 ns/op
Iteration   8: 9.896 ns/op
Iteration   9: 9.885 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.889 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.861 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.879 ns/op
Iteration  16: 9.863 ns/op
Iteration  17: 9.862 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.873 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.077 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.888 ns/op
# Warmup Iteration   4: 9.877 ns/op
# Warmup Iteration   5: 9.886 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.870 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.873 ns/op
Iteration   6: 9.871 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.863 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.880 ns/op
Iteration  11: 9.871 ns/op
Iteration  12: 9.896 ns/op
Iteration  13: 9.898 ns/op
Iteration  14: 9.886 ns/op
Iteration  15: 9.884 ns/op
Iteration  16: 9.885 ns/op
Iteration  17: 9.880 ns/op
Iteration  18: 9.867 ns/op
Iteration  19: 9.902 ns/op
Iteration  20: 9.870 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.072 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.874 ns/op
# Warmup Iteration   4: 9.874 ns/op
# Warmup Iteration   5: 9.891 ns/op
Iteration   1: 9.899 ns/op
Iteration   2: 9.907 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.885 ns/op
Iteration   5: 9.885 ns/op
Iteration   6: 9.886 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.907 ns/op
Iteration  10: 9.905 ns/op
Iteration  11: 9.892 ns/op
Iteration  12: 9.902 ns/op
Iteration  13: 9.890 ns/op
Iteration  14: 9.887 ns/op
Iteration  15: 9.893 ns/op
Iteration  16: 9.906 ns/op
Iteration  17: 9.893 ns/op
Iteration  18: 9.889 ns/op
Iteration  19: 9.870 ns/op
Iteration  20: 9.872 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.085 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.906 ns/op
# Warmup Iteration   5: 9.893 ns/op
Iteration   1: 9.898 ns/op
Iteration   2: 9.898 ns/op
Iteration   3: 9.895 ns/op
Iteration   4: 9.890 ns/op
Iteration   5: 9.885 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.898 ns/op
Iteration   8: 9.905 ns/op
Iteration   9: 9.902 ns/op
Iteration  10: 9.899 ns/op
Iteration  11: 9.895 ns/op
Iteration  12: 9.891 ns/op
Iteration  13: 9.884 ns/op
Iteration  14: 9.903 ns/op
Iteration  15: 9.887 ns/op
Iteration  16: 9.888 ns/op
Iteration  17: 9.889 ns/op
Iteration  18: 9.888 ns/op
Iteration  19: 9.893 ns/op
Iteration  20: 9.891 ns/op


Result "benchmark.StringContains.stringContains":
  9.885 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (9.852, 9.885, 9.909), stdev = 0.012
  CI (99.9%): [9.881, 9.890] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ?Ha`http  avgt  100  130.141 ± 0.987  ns/op
StringContains.stringContains     http  ?Ha`http  avgt  100    9.885 ± 0.004  ns/op

Benchmark result is saved to http_8_0.5_13.csv
