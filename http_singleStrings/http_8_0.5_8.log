# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = =b+Hhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 216.475 ns/op
# Warmup Iteration   2: 144.665 ns/op
# Warmup Iteration   3: 129.283 ns/op
# Warmup Iteration   4: 129.367 ns/op
# Warmup Iteration   5: 129.786 ns/op
Iteration   1: 130.543 ns/op
Iteration   2: 126.645 ns/op
Iteration   3: 126.667 ns/op
Iteration   4: 127.955 ns/op
Iteration   5: 127.140 ns/op
Iteration   6: 127.474 ns/op
Iteration   7: 126.910 ns/op
Iteration   8: 126.650 ns/op
Iteration   9: 126.743 ns/op
Iteration  10: 126.502 ns/op
Iteration  11: 126.170 ns/op
Iteration  12: 126.344 ns/op
Iteration  13: 126.353 ns/op
Iteration  14: 126.666 ns/op
Iteration  15: 126.174 ns/op
Iteration  16: 126.460 ns/op
Iteration  17: 126.404 ns/op
Iteration  18: 126.222 ns/op
Iteration  19: 126.552 ns/op
Iteration  20: 126.406 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 218.884 ns/op
# Warmup Iteration   2: 149.750 ns/op
# Warmup Iteration   3: 133.487 ns/op
# Warmup Iteration   4: 133.420 ns/op
# Warmup Iteration   5: 133.887 ns/op
Iteration   1: 134.340 ns/op
Iteration   2: 131.998 ns/op
Iteration   3: 131.111 ns/op
Iteration   4: 131.116 ns/op
Iteration   5: 131.115 ns/op
Iteration   6: 131.088 ns/op
Iteration   7: 130.957 ns/op
Iteration   8: 131.581 ns/op
Iteration   9: 130.661 ns/op
Iteration  10: 130.652 ns/op
Iteration  11: 130.720 ns/op
Iteration  12: 130.736 ns/op
Iteration  13: 131.065 ns/op
Iteration  14: 130.827 ns/op
Iteration  15: 130.701 ns/op
Iteration  16: 130.742 ns/op
Iteration  17: 130.788 ns/op
Iteration  18: 131.023 ns/op
Iteration  19: 130.780 ns/op
Iteration  20: 130.874 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 216.161 ns/op
# Warmup Iteration   2: 149.487 ns/op
# Warmup Iteration   3: 133.600 ns/op
# Warmup Iteration   4: 132.827 ns/op
# Warmup Iteration   5: 133.459 ns/op
Iteration   1: 134.255 ns/op
Iteration   2: 131.826 ns/op
Iteration   3: 131.103 ns/op
Iteration   4: 131.166 ns/op
Iteration   5: 131.219 ns/op
Iteration   6: 131.117 ns/op
Iteration   7: 131.083 ns/op
Iteration   8: 131.827 ns/op
Iteration   9: 130.852 ns/op
Iteration  10: 130.770 ns/op
Iteration  11: 130.800 ns/op
Iteration  12: 130.922 ns/op
Iteration  13: 131.299 ns/op
Iteration  14: 130.868 ns/op
Iteration  15: 131.112 ns/op
Iteration  16: 130.987 ns/op
Iteration  17: 131.062 ns/op
Iteration  18: 131.205 ns/op
Iteration  19: 131.298 ns/op
Iteration  20: 131.331 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 217.455 ns/op
# Warmup Iteration   2: 149.787 ns/op
# Warmup Iteration   3: 134.411 ns/op
# Warmup Iteration   4: 133.801 ns/op
# Warmup Iteration   5: 134.523 ns/op
Iteration   1: 135.344 ns/op
Iteration   2: 132.758 ns/op
Iteration   3: 131.983 ns/op
Iteration   4: 132.031 ns/op
Iteration   5: 132.079 ns/op
Iteration   6: 132.029 ns/op
Iteration   7: 132.057 ns/op
Iteration   8: 133.731 ns/op
Iteration   9: 132.166 ns/op
Iteration  10: 132.785 ns/op
Iteration  11: 131.676 ns/op
Iteration  12: 131.771 ns/op
Iteration  13: 131.711 ns/op
Iteration  14: 132.038 ns/op
Iteration  15: 131.815 ns/op
Iteration  16: 131.768 ns/op
Iteration  17: 131.869 ns/op
Iteration  18: 131.979 ns/op
Iteration  19: 132.535 ns/op
Iteration  20: 132.103 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 220.360 ns/op
# Warmup Iteration   2: 150.664 ns/op
# Warmup Iteration   3: 133.205 ns/op
# Warmup Iteration   4: 132.500 ns/op
# Warmup Iteration   5: 133.331 ns/op
Iteration   1: 134.216 ns/op
Iteration   2: 131.548 ns/op
Iteration   3: 130.892 ns/op
Iteration   4: 130.904 ns/op
Iteration   5: 130.930 ns/op
Iteration   6: 130.961 ns/op
Iteration   7: 130.933 ns/op
Iteration   8: 131.610 ns/op
Iteration   9: 130.804 ns/op
Iteration  10: 130.598 ns/op
Iteration  11: 130.616 ns/op
Iteration  12: 130.658 ns/op
Iteration  13: 130.925 ns/op
Iteration  14: 130.679 ns/op
Iteration  15: 130.639 ns/op
Iteration  16: 130.732 ns/op
Iteration  17: 130.759 ns/op
Iteration  18: 131.167 ns/op
Iteration  19: 130.744 ns/op
Iteration  20: 130.743 ns/op


Result "benchmark.StringContains.regexMatches":
  130.532 ±(99.9%) 0.704 ns/op [Average]
  (min, avg, max) = (126.170, 130.532, 135.344), stdev = 2.077
  CI (99.9%): [129.828, 131.237] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = =b+Hhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.102 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.946 ns/op
# Warmup Iteration   4: 9.943 ns/op
# Warmup Iteration   5: 9.947 ns/op
Iteration   1: 9.941 ns/op
Iteration   2: 9.941 ns/op
Iteration   3: 9.948 ns/op
Iteration   4: 9.937 ns/op
Iteration   5: 9.946 ns/op
Iteration   6: 9.944 ns/op
Iteration   7: 9.942 ns/op
Iteration   8: 9.953 ns/op
Iteration   9: 9.936 ns/op
Iteration  10: 9.917 ns/op
Iteration  11: 9.939 ns/op
Iteration  12: 9.956 ns/op
Iteration  13: 9.941 ns/op
Iteration  14: 9.938 ns/op
Iteration  15: 9.940 ns/op
Iteration  16: 9.933 ns/op
Iteration  17: 9.938 ns/op
Iteration  18: 9.935 ns/op
Iteration  19: 9.939 ns/op
Iteration  20: 9.934 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.050 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.900 ns/op
# Warmup Iteration   4: 9.906 ns/op
# Warmup Iteration   5: 9.895 ns/op
Iteration   1: 9.900 ns/op
Iteration   2: 9.891 ns/op
Iteration   3: 9.899 ns/op
Iteration   4: 9.895 ns/op
Iteration   5: 9.885 ns/op
Iteration   6: 9.907 ns/op
Iteration   7: 9.884 ns/op
Iteration   8: 9.899 ns/op
Iteration   9: 9.884 ns/op
Iteration  10: 9.896 ns/op
Iteration  11: 9.904 ns/op
Iteration  12: 9.895 ns/op
Iteration  13: 9.898 ns/op
Iteration  14: 9.894 ns/op
Iteration  15: 9.914 ns/op
Iteration  16: 9.907 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.894 ns/op
Iteration  19: 9.889 ns/op
Iteration  20: 9.900 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.198 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.915 ns/op
# Warmup Iteration   4: 9.909 ns/op
# Warmup Iteration   5: 9.912 ns/op
Iteration   1: 9.907 ns/op
Iteration   2: 9.904 ns/op
Iteration   3: 9.895 ns/op
Iteration   4: 9.914 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.895 ns/op
Iteration   7: 9.920 ns/op
Iteration   8: 9.910 ns/op
Iteration   9: 9.899 ns/op
Iteration  10: 9.917 ns/op
Iteration  11: 9.902 ns/op
Iteration  12: 9.892 ns/op
Iteration  13: 9.910 ns/op
Iteration  14: 9.915 ns/op
Iteration  15: 9.894 ns/op
Iteration  16: 9.899 ns/op
Iteration  17: 9.883 ns/op
Iteration  18: 9.911 ns/op
Iteration  19: 9.901 ns/op
Iteration  20: 9.894 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.446 ns/op
# Warmup Iteration   2: 10.459 ns/op
# Warmup Iteration   3: 10.008 ns/op
# Warmup Iteration   4: 10.032 ns/op
# Warmup Iteration   5: 10.058 ns/op
Iteration   1: 10.063 ns/op
Iteration   2: 10.054 ns/op
Iteration   3: 10.021 ns/op
Iteration   4: 10.023 ns/op
Iteration   5: 10.013 ns/op
Iteration   6: 10.039 ns/op
Iteration   7: 10.059 ns/op
Iteration   8: 10.014 ns/op
Iteration   9: 10.062 ns/op
Iteration  10: 10.019 ns/op
Iteration  11: 10.034 ns/op
Iteration  12: 10.032 ns/op
Iteration  13: 10.027 ns/op
Iteration  14: 10.042 ns/op
Iteration  15: 10.009 ns/op
Iteration  16: 10.021 ns/op
Iteration  17: 10.033 ns/op
Iteration  18: 10.023 ns/op
Iteration  19: 10.037 ns/op
Iteration  20: 10.031 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.209 ns/op
# Warmup Iteration   2: 10.474 ns/op
# Warmup Iteration   3: 9.889 ns/op
# Warmup Iteration   4: 9.883 ns/op
# Warmup Iteration   5: 9.903 ns/op
Iteration   1: 9.915 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.897 ns/op
Iteration   4: 9.903 ns/op
Iteration   5: 9.906 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.906 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.895 ns/op
Iteration  11: 9.894 ns/op
Iteration  12: 9.900 ns/op
Iteration  13: 9.893 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.905 ns/op
Iteration  16: 9.905 ns/op
Iteration  17: 9.901 ns/op
Iteration  18: 9.894 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.904 ns/op


Result "benchmark.StringContains.stringContains":
  9.934 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (9.881, 9.934, 10.063), stdev = 0.053
  CI (99.9%): [9.916, 9.952] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  =b+Hhttp  avgt  100  130.532 ± 0.704  ns/op
StringContains.stringContains     http  =b+Hhttp  avgt  100    9.934 ± 0.018  ns/op

Benchmark result is saved to http_8_0.5_8.csv
