# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = $QI	vB]o-0t(4o|&05Ia2y<5cr|Y:L`}!2^W*Z!{s'}\Xs
*lq~gMy1|[O +#uaJMRRhLE$/,IvljU0UD*Qg/BXDr6w<Oj3=L&,^\nNhs!N.oJ>`f{BrNY>hx
M+	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 913.445 ns/op
# Warmup Iteration   2: 901.301 ns/op
# Warmup Iteration   3: 896.991 ns/op
# Warmup Iteration   4: 895.809 ns/op
# Warmup Iteration   5: 895.989 ns/op
Iteration   1: 855.220 ns/op
Iteration   2: 818.849 ns/op
Iteration   3: 818.858 ns/op
Iteration   4: 818.940 ns/op
Iteration   5: 821.046 ns/op
Iteration   6: 823.808 ns/op
Iteration   7: 818.813 ns/op
Iteration   8: 819.325 ns/op
Iteration   9: 819.034 ns/op
Iteration  10: 829.157 ns/op
Iteration  11: 819.070 ns/op
Iteration  12: 818.971 ns/op
Iteration  13: 819.047 ns/op
Iteration  14: 819.993 ns/op
Iteration  15: 832.725 ns/op
Iteration  16: 819.130 ns/op
Iteration  17: 818.912 ns/op
Iteration  18: 818.759 ns/op
Iteration  19: 819.005 ns/op
Iteration  20: 837.467 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 902.200 ns/op
# Warmup Iteration   2: 894.122 ns/op
# Warmup Iteration   3: 897.023 ns/op
# Warmup Iteration   4: 897.185 ns/op
# Warmup Iteration   5: 897.381 ns/op
Iteration   1: 860.620 ns/op
Iteration   2: 823.207 ns/op
Iteration   3: 822.898 ns/op
Iteration   4: 822.198 ns/op
Iteration   5: 825.192 ns/op
Iteration   6: 825.817 ns/op
Iteration   7: 822.332 ns/op
Iteration   8: 822.355 ns/op
Iteration   9: 822.279 ns/op
Iteration  10: 832.313 ns/op
Iteration  11: 821.981 ns/op
Iteration  12: 821.831 ns/op
Iteration  13: 821.960 ns/op
Iteration  14: 821.832 ns/op
Iteration  15: 835.513 ns/op
Iteration  16: 822.104 ns/op
Iteration  17: 821.885 ns/op
Iteration  18: 821.978 ns/op
Iteration  19: 821.813 ns/op
Iteration  20: 839.637 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 897.944 ns/op
# Warmup Iteration   2: 894.073 ns/op
# Warmup Iteration   3: 891.884 ns/op
# Warmup Iteration   4: 892.206 ns/op
# Warmup Iteration   5: 892.078 ns/op
Iteration   1: 848.516 ns/op
Iteration   2: 817.351 ns/op
Iteration   3: 817.545 ns/op
Iteration   4: 817.592 ns/op
Iteration   5: 826.077 ns/op
Iteration   6: 816.983 ns/op
Iteration   7: 817.314 ns/op
Iteration   8: 817.763 ns/op
Iteration   9: 817.554 ns/op
Iteration  10: 827.759 ns/op
Iteration  11: 817.210 ns/op
Iteration  12: 817.227 ns/op
Iteration  13: 817.579 ns/op
Iteration  14: 817.660 ns/op
Iteration  15: 831.015 ns/op
Iteration  16: 817.119 ns/op
Iteration  17: 817.323 ns/op
Iteration  18: 817.560 ns/op
Iteration  19: 817.667 ns/op
Iteration  20: 834.852 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 902.412 ns/op
# Warmup Iteration   2: 895.967 ns/op
# Warmup Iteration   3: 893.419 ns/op
# Warmup Iteration   4: 893.152 ns/op
# Warmup Iteration   5: 893.236 ns/op
Iteration   1: 852.848 ns/op
Iteration   2: 820.612 ns/op
Iteration   3: 819.394 ns/op
Iteration   4: 819.420 ns/op
Iteration   5: 827.242 ns/op
Iteration   6: 819.406 ns/op
Iteration   7: 819.381 ns/op
Iteration   8: 819.476 ns/op
Iteration   9: 820.475 ns/op
Iteration  10: 830.334 ns/op
Iteration  11: 820.474 ns/op
Iteration  12: 820.467 ns/op
Iteration  13: 820.228 ns/op
Iteration  14: 819.230 ns/op
Iteration  15: 832.678 ns/op
Iteration  16: 819.243 ns/op
Iteration  17: 818.900 ns/op
Iteration  18: 818.953 ns/op
Iteration  19: 818.954 ns/op
Iteration  20: 836.411 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 858.888 ns/op
# Warmup Iteration   2: 851.111 ns/op
# Warmup Iteration   3: 845.591 ns/op
# Warmup Iteration   4: 845.871 ns/op
# Warmup Iteration   5: 845.916 ns/op
Iteration   1: 785.051 ns/op
Iteration   2: 771.567 ns/op
Iteration   3: 771.669 ns/op
Iteration   4: 771.475 ns/op
Iteration   5: 778.530 ns/op
Iteration   6: 771.456 ns/op
Iteration   7: 771.334 ns/op
Iteration   8: 771.503 ns/op
Iteration   9: 780.945 ns/op
Iteration  10: 771.141 ns/op
Iteration  11: 771.440 ns/op
Iteration  12: 771.351 ns/op
Iteration  13: 771.623 ns/op
Iteration  14: 788.215 ns/op
Iteration  15: 771.478 ns/op
Iteration  16: 771.510 ns/op
Iteration  17: 771.504 ns/op
Iteration  18: 772.077 ns/op
Iteration  19: 787.566 ns/op
Iteration  20: 771.447 ns/op


Result "benchmark.StringContains.regexMatches":
  813.925 ±(99.9%) 7.273 ns/op [Average]
  (min, avg, max) = (771.141, 813.925, 860.620), stdev = 21.443
  CI (99.9%): [806.653, 821.198] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = $QI	vB]o-0t(4o|&05Ia2y<5cr|Y:L`}!2^W*Z!{s'}\Xs
*lq~gMy1|[O +#uaJMRRhLE$/,IvljU0UD*Qg/BXDr6w<Oj3=L&,^\nNhs!N.oJ>`f{BrNY>hx
M+	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.473 ns/op
# Warmup Iteration   2: 24.621 ns/op
# Warmup Iteration   3: 25.346 ns/op
# Warmup Iteration   4: 25.346 ns/op
# Warmup Iteration   5: 25.332 ns/op
Iteration   1: 25.345 ns/op
Iteration   2: 25.348 ns/op
Iteration   3: 25.350 ns/op
Iteration   4: 25.353 ns/op
Iteration   5: 25.335 ns/op
Iteration   6: 25.339 ns/op
Iteration   7: 25.356 ns/op
Iteration   8: 25.360 ns/op
Iteration   9: 25.345 ns/op
Iteration  10: 25.354 ns/op
Iteration  11: 25.351 ns/op
Iteration  12: 25.340 ns/op
Iteration  13: 25.359 ns/op
Iteration  14: 25.358 ns/op
Iteration  15: 25.334 ns/op
Iteration  16: 25.350 ns/op
Iteration  17: 25.348 ns/op
Iteration  18: 25.354 ns/op
Iteration  19: 25.351 ns/op
Iteration  20: 25.346 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.470 ns/op
# Warmup Iteration   2: 24.632 ns/op
# Warmup Iteration   3: 25.352 ns/op
# Warmup Iteration   4: 25.355 ns/op
# Warmup Iteration   5: 25.350 ns/op
Iteration   1: 25.351 ns/op
Iteration   2: 25.358 ns/op
Iteration   3: 25.362 ns/op
Iteration   4: 25.339 ns/op
Iteration   5: 25.335 ns/op
Iteration   6: 25.357 ns/op
Iteration   7: 25.329 ns/op
Iteration   8: 25.342 ns/op
Iteration   9: 25.339 ns/op
Iteration  10: 25.338 ns/op
Iteration  11: 25.338 ns/op
Iteration  12: 25.350 ns/op
Iteration  13: 25.339 ns/op
Iteration  14: 25.346 ns/op
Iteration  15: 25.337 ns/op
Iteration  16: 25.325 ns/op
Iteration  17: 25.340 ns/op
Iteration  18: 25.324 ns/op
Iteration  19: 25.349 ns/op
Iteration  20: 25.333 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.465 ns/op
# Warmup Iteration   2: 24.634 ns/op
# Warmup Iteration   3: 24.571 ns/op
# Warmup Iteration   4: 24.604 ns/op
# Warmup Iteration   5: 24.589 ns/op
Iteration   1: 24.578 ns/op
Iteration   2: 24.610 ns/op
Iteration   3: 24.586 ns/op
Iteration   4: 24.587 ns/op
Iteration   5: 24.586 ns/op
Iteration   6: 24.581 ns/op
Iteration   7: 24.574 ns/op
Iteration   8: 24.583 ns/op
Iteration   9: 24.577 ns/op
Iteration  10: 24.582 ns/op
Iteration  11: 24.571 ns/op
Iteration  12: 24.579 ns/op
Iteration  13: 24.620 ns/op
Iteration  14: 24.586 ns/op
Iteration  15: 24.591 ns/op
Iteration  16: 24.583 ns/op
Iteration  17: 24.580 ns/op
Iteration  18: 24.574 ns/op
Iteration  19: 24.583 ns/op
Iteration  20: 24.580 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.486 ns/op
# Warmup Iteration   2: 24.633 ns/op
# Warmup Iteration   3: 24.592 ns/op
# Warmup Iteration   4: 24.587 ns/op
# Warmup Iteration   5: 24.586 ns/op
Iteration   1: 24.586 ns/op
Iteration   2: 24.578 ns/op
Iteration   3: 24.583 ns/op
Iteration   4: 24.583 ns/op
Iteration   5: 24.579 ns/op
Iteration   6: 24.587 ns/op
Iteration   7: 24.573 ns/op
Iteration   8: 24.580 ns/op
Iteration   9: 24.581 ns/op
Iteration  10: 24.580 ns/op
Iteration  11: 24.577 ns/op
Iteration  12: 24.595 ns/op
Iteration  13: 24.601 ns/op
Iteration  14: 24.599 ns/op
Iteration  15: 24.609 ns/op
Iteration  16: 24.610 ns/op
Iteration  17: 24.579 ns/op
Iteration  18: 24.583 ns/op
Iteration  19: 24.585 ns/op
Iteration  20: 24.587 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.432 ns/op
# Warmup Iteration   2: 24.673 ns/op
# Warmup Iteration   3: 24.591 ns/op
# Warmup Iteration   4: 24.577 ns/op
# Warmup Iteration   5: 24.581 ns/op
Iteration   1: 24.579 ns/op
Iteration   2: 24.583 ns/op
Iteration   3: 24.577 ns/op
Iteration   4: 24.582 ns/op
Iteration   5: 24.578 ns/op
Iteration   6: 24.579 ns/op
Iteration   7: 24.575 ns/op
Iteration   8: 24.629 ns/op
Iteration   9: 24.578 ns/op
Iteration  10: 24.576 ns/op
Iteration  11: 24.581 ns/op
Iteration  12: 24.579 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.583 ns/op
Iteration  15: 24.577 ns/op
Iteration  16: 24.578 ns/op
Iteration  17: 24.590 ns/op
Iteration  18: 24.578 ns/op
Iteration  19: 24.588 ns/op
Iteration  20: 24.584 ns/op


Result "benchmark.StringContains.stringContains":
  24.889 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (24.571, 24.889, 25.362), stdev = 0.375
  CI (99.9%): [24.762, 25.016] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  $QI	vB]o-0t(4o|&05Ia2y<5cr|Y:L`}!2^W*Z!{s'}\Xs
*lq~gMy1|[O +#uaJMRRhLE$/,IvljU0UD*Qg/BXDr6w<Oj3=L&,^\nNhs!N.oJ>`f{BrNY>hx
M+	  avgt  100  813.925 ± 7.273  ns/op
StringContains.stringContains     http  $QI	vB]o-0t(4o|&05Ia2y<5cr|Y:L`}!2^W*Z!{s'}\Xs
*lq~gMy1|[O +#uaJMRRhLE$/,IvljU0UD*Qg/BXDr6w<Oj3=L&,^\nNhs!N.oJ>`f{BrNY>hx
M+	  avgt  100   24.889 ± 0.127  ns/op

Benchmark result is saved to http_128_1_11.csv
