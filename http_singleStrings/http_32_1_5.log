# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 0"`Al~rbb;P*@k,!{/!b(`Yn<ux=cVKl)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 208.518 ns/op
# Warmup Iteration   2: 139.859 ns/op
# Warmup Iteration   3: 123.415 ns/op
# Warmup Iteration   4: 123.896 ns/op
# Warmup Iteration   5: 128.369 ns/op
Iteration   1: 123.028 ns/op
Iteration   2: 122.328 ns/op
Iteration   3: 122.325 ns/op
Iteration   4: 123.031 ns/op
Iteration   5: 122.377 ns/op
Iteration   6: 122.310 ns/op
Iteration   7: 122.347 ns/op
Iteration   8: 122.491 ns/op
Iteration   9: 121.869 ns/op
Iteration  10: 122.855 ns/op
Iteration  11: 122.147 ns/op
Iteration  12: 121.903 ns/op
Iteration  13: 121.974 ns/op
Iteration  14: 121.937 ns/op
Iteration  15: 122.291 ns/op
Iteration  16: 122.008 ns/op
Iteration  17: 121.983 ns/op
Iteration  18: 122.542 ns/op
Iteration  19: 122.120 ns/op
Iteration  20: 122.232 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 202.472 ns/op
# Warmup Iteration   2: 136.864 ns/op
# Warmup Iteration   3: 123.407 ns/op
# Warmup Iteration   4: 123.857 ns/op
# Warmup Iteration   5: 128.026 ns/op
Iteration   1: 122.402 ns/op
Iteration   2: 122.607 ns/op
Iteration   3: 122.400 ns/op
Iteration   4: 123.059 ns/op
Iteration   5: 122.442 ns/op
Iteration   6: 122.406 ns/op
Iteration   7: 122.389 ns/op
Iteration   8: 122.628 ns/op
Iteration   9: 121.940 ns/op
Iteration  10: 122.028 ns/op
Iteration  11: 122.264 ns/op
Iteration  12: 121.990 ns/op
Iteration  13: 122.093 ns/op
Iteration  14: 122.185 ns/op
Iteration  15: 122.320 ns/op
Iteration  16: 122.047 ns/op
Iteration  17: 122.105 ns/op
Iteration  18: 122.451 ns/op
Iteration  19: 122.213 ns/op
Iteration  20: 122.307 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 209.489 ns/op
# Warmup Iteration   2: 144.646 ns/op
# Warmup Iteration   3: 129.530 ns/op
# Warmup Iteration   4: 132.779 ns/op
# Warmup Iteration   5: 132.402 ns/op
Iteration   1: 131.440 ns/op
Iteration   2: 128.770 ns/op
Iteration   3: 128.290 ns/op
Iteration   4: 128.324 ns/op
Iteration   5: 128.955 ns/op
Iteration   6: 129.432 ns/op
Iteration   7: 128.359 ns/op
Iteration   8: 128.470 ns/op
Iteration   9: 128.502 ns/op
Iteration  10: 128.126 ns/op
Iteration  11: 128.308 ns/op
Iteration  12: 128.135 ns/op
Iteration  13: 128.207 ns/op
Iteration  14: 128.127 ns/op
Iteration  15: 128.098 ns/op
Iteration  16: 128.572 ns/op
Iteration  17: 128.283 ns/op
Iteration  18: 128.308 ns/op
Iteration  19: 128.497 ns/op
Iteration  20: 128.732 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 218.020 ns/op
# Warmup Iteration   2: 154.913 ns/op
# Warmup Iteration   3: 139.717 ns/op
# Warmup Iteration   4: 138.935 ns/op
# Warmup Iteration   5: 139.527 ns/op
Iteration   1: 140.586 ns/op
Iteration   2: 137.332 ns/op
Iteration   3: 137.260 ns/op
Iteration   4: 137.934 ns/op
Iteration   5: 137.335 ns/op
Iteration   6: 137.208 ns/op
Iteration   7: 137.214 ns/op
Iteration   8: 137.182 ns/op
Iteration   9: 137.151 ns/op
Iteration  10: 137.357 ns/op
Iteration  11: 136.866 ns/op
Iteration  12: 137.081 ns/op
Iteration  13: 136.829 ns/op
Iteration  14: 137.869 ns/op
Iteration  15: 136.998 ns/op
Iteration  16: 137.152 ns/op
Iteration  17: 136.960 ns/op
Iteration  18: 137.062 ns/op
Iteration  19: 137.372 ns/op
Iteration  20: 137.318 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 214.399 ns/op
# Warmup Iteration   2: 151.835 ns/op
# Warmup Iteration   3: 134.100 ns/op
# Warmup Iteration   4: 133.723 ns/op
# Warmup Iteration   5: 133.822 ns/op
Iteration   1: 134.673 ns/op
Iteration   2: 132.133 ns/op
Iteration   3: 131.560 ns/op
Iteration   4: 131.409 ns/op
Iteration   5: 131.553 ns/op
Iteration   6: 131.447 ns/op
Iteration   7: 131.420 ns/op
Iteration   8: 132.032 ns/op
Iteration   9: 131.923 ns/op
Iteration  10: 131.286 ns/op
Iteration  11: 131.195 ns/op
Iteration  12: 131.164 ns/op
Iteration  13: 131.492 ns/op
Iteration  14: 131.174 ns/op
Iteration  15: 132.220 ns/op
Iteration  16: 131.348 ns/op
Iteration  17: 131.368 ns/op
Iteration  18: 131.279 ns/op
Iteration  19: 131.573 ns/op
Iteration  20: 132.469 ns/op


Result "benchmark.StringContains.regexMatches":
  128.471 ±(99.9%) 1.978 ns/op [Average]
  (min, avg, max) = (121.869, 128.471, 140.586), stdev = 5.831
  CI (99.9%): [126.493, 130.449] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 0"`Al~rbb;P*@k,!{/!b(`Yn<ux=cVKl)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 10.233 ns/op
# Warmup Iteration   2: 11.207 ns/op
# Warmup Iteration   3: 11.168 ns/op
# Warmup Iteration   4: 11.177 ns/op
# Warmup Iteration   5: 11.166 ns/op
Iteration   1: 11.165 ns/op
Iteration   2: 11.168 ns/op
Iteration   3: 11.165 ns/op
Iteration   4: 11.166 ns/op
Iteration   5: 11.165 ns/op
Iteration   6: 11.166 ns/op
Iteration   7: 11.166 ns/op
Iteration   8: 11.166 ns/op
Iteration   9: 11.166 ns/op
Iteration  10: 11.165 ns/op
Iteration  11: 11.166 ns/op
Iteration  12: 11.166 ns/op
Iteration  13: 11.166 ns/op
Iteration  14: 11.166 ns/op
Iteration  15: 11.165 ns/op
Iteration  16: 11.165 ns/op
Iteration  17: 11.167 ns/op
Iteration  18: 11.166 ns/op
Iteration  19: 11.166 ns/op
Iteration  20: 11.166 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 10.285 ns/op
# Warmup Iteration   2: 11.203 ns/op
# Warmup Iteration   3: 11.215 ns/op
# Warmup Iteration   4: 11.209 ns/op
# Warmup Iteration   5: 11.209 ns/op
Iteration   1: 11.208 ns/op
Iteration   2: 11.208 ns/op
Iteration   3: 11.208 ns/op
Iteration   4: 11.209 ns/op
Iteration   5: 11.212 ns/op
Iteration   6: 11.208 ns/op
Iteration   7: 11.210 ns/op
Iteration   8: 11.210 ns/op
Iteration   9: 11.207 ns/op
Iteration  10: 11.207 ns/op
Iteration  11: 11.209 ns/op
Iteration  12: 11.207 ns/op
Iteration  13: 11.209 ns/op
Iteration  14: 11.208 ns/op
Iteration  15: 11.208 ns/op
Iteration  16: 11.210 ns/op
Iteration  17: 11.207 ns/op
Iteration  18: 11.215 ns/op
Iteration  19: 11.207 ns/op
Iteration  20: 11.208 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 10.262 ns/op
# Warmup Iteration   2: 11.201 ns/op
# Warmup Iteration   3: 11.169 ns/op
# Warmup Iteration   4: 11.176 ns/op
# Warmup Iteration   5: 11.169 ns/op
Iteration   1: 11.169 ns/op
Iteration   2: 11.170 ns/op
Iteration   3: 11.169 ns/op
Iteration   4: 11.169 ns/op
Iteration   5: 11.170 ns/op
Iteration   6: 11.169 ns/op
Iteration   7: 11.169 ns/op
Iteration   8: 11.170 ns/op
Iteration   9: 11.170 ns/op
Iteration  10: 11.170 ns/op
Iteration  11: 11.171 ns/op
Iteration  12: 13.030 ns/op
Iteration  13: 13.030 ns/op
Iteration  14: 13.031 ns/op
Iteration  15: 13.029 ns/op
Iteration  16: 13.030 ns/op
Iteration  17: 13.032 ns/op
Iteration  18: 13.029 ns/op
Iteration  19: 13.031 ns/op
Iteration  20: 13.030 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 10.280 ns/op
# Warmup Iteration   2: 11.223 ns/op
# Warmup Iteration   3: 11.168 ns/op
# Warmup Iteration   4: 11.167 ns/op
# Warmup Iteration   5: 11.168 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.168 ns/op
Iteration   3: 11.168 ns/op
Iteration   4: 11.170 ns/op
Iteration   5: 11.168 ns/op
Iteration   6: 11.167 ns/op
Iteration   7: 11.168 ns/op
Iteration   8: 11.186 ns/op
Iteration   9: 11.167 ns/op
Iteration  10: 11.167 ns/op
Iteration  11: 11.167 ns/op
Iteration  12: 11.168 ns/op
Iteration  13: 11.169 ns/op
Iteration  14: 11.170 ns/op
Iteration  15: 11.168 ns/op
Iteration  16: 11.168 ns/op
Iteration  17: 11.168 ns/op
Iteration  18: 11.169 ns/op
Iteration  19: 11.167 ns/op
Iteration  20: 11.169 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 10.254 ns/op
# Warmup Iteration   2: 11.202 ns/op
# Warmup Iteration   3: 11.167 ns/op
# Warmup Iteration   4: 11.167 ns/op
# Warmup Iteration   5: 11.167 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.167 ns/op
Iteration   3: 11.166 ns/op
Iteration   4: 11.167 ns/op
Iteration   5: 11.166 ns/op
Iteration   6: 11.167 ns/op
Iteration   7: 11.167 ns/op
Iteration   8: 11.168 ns/op
Iteration   9: 11.167 ns/op
Iteration  10: 11.166 ns/op
Iteration  11: 11.167 ns/op
Iteration  12: 11.167 ns/op
Iteration  13: 11.166 ns/op
Iteration  14: 11.167 ns/op
Iteration  15: 11.166 ns/op
Iteration  16: 11.167 ns/op
Iteration  17: 11.167 ns/op
Iteration  18: 11.166 ns/op
Iteration  19: 11.167 ns/op
Iteration  20: 11.167 ns/op


Result "benchmark.StringContains.stringContains":
  11.343 ±(99.9%) 0.181 ns/op [Average]
  (min, avg, max) = (11.165, 11.343, 13.032), stdev = 0.533
  CI (99.9%): [11.163, 11.524] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  0"`Al~rbb;P*@k,!{/!b(`Yn<ux=cVKl  avgt  100  128.471 ± 1.978  ns/op
StringContains.stringContains     http  0"`Al~rbb;P*@k,!{/!b(`Yn<ux=cVKl  avgt  100   11.343 ± 0.181  ns/op

Benchmark result is saved to http_32_1_5.csv
