# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = /(tR[]`2ov9CRJ,d"F8\ZRPChttpZ0cQ)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 262.452 ns/op
# Warmup Iteration   2: 215.531 ns/op
# Warmup Iteration   3: 181.680 ns/op
# Warmup Iteration   4: 182.513 ns/op
# Warmup Iteration   5: 183.557 ns/op
Iteration   1: 184.618 ns/op
Iteration   2: 184.101 ns/op
Iteration   3: 181.840 ns/op
Iteration   4: 180.633 ns/op
Iteration   5: 180.785 ns/op
Iteration   6: 180.707 ns/op
Iteration   7: 180.698 ns/op
Iteration   8: 180.730 ns/op
Iteration   9: 180.654 ns/op
Iteration  10: 179.778 ns/op
Iteration  11: 180.742 ns/op
Iteration  12: 180.697 ns/op
Iteration  13: 180.978 ns/op
Iteration  14: 180.283 ns/op
Iteration  15: 180.181 ns/op
Iteration  16: 180.114 ns/op
Iteration  17: 179.776 ns/op
Iteration  18: 180.095 ns/op
Iteration  19: 180.304 ns/op
Iteration  20: 180.407 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 257.533 ns/op
# Warmup Iteration   2: 203.925 ns/op
# Warmup Iteration   3: 182.468 ns/op
# Warmup Iteration   4: 183.175 ns/op
# Warmup Iteration   5: 183.183 ns/op
Iteration   1: 184.072 ns/op
Iteration   2: 185.333 ns/op
Iteration   3: 180.082 ns/op
Iteration   4: 180.971 ns/op
Iteration   5: 180.930 ns/op
Iteration   6: 180.948 ns/op
Iteration   7: 181.158 ns/op
Iteration   8: 180.921 ns/op
Iteration   9: 181.149 ns/op
Iteration  10: 180.135 ns/op
Iteration  11: 181.043 ns/op
Iteration  12: 181.064 ns/op
Iteration  13: 181.077 ns/op
Iteration  14: 180.514 ns/op
Iteration  15: 180.624 ns/op
Iteration  16: 180.533 ns/op
Iteration  17: 180.079 ns/op
Iteration  18: 180.673 ns/op
Iteration  19: 180.818 ns/op
Iteration  20: 180.974 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 245.567 ns/op
# Warmup Iteration   2: 181.088 ns/op
# Warmup Iteration   3: 152.004 ns/op
# Warmup Iteration   4: 152.343 ns/op
# Warmup Iteration   5: 155.132 ns/op
Iteration   1: 155.432 ns/op
Iteration   2: 152.532 ns/op
Iteration   3: 150.983 ns/op
Iteration   4: 151.021 ns/op
Iteration   5: 151.096 ns/op
Iteration   6: 151.185 ns/op
Iteration   7: 151.319 ns/op
Iteration   8: 152.037 ns/op
Iteration   9: 151.042 ns/op
Iteration  10: 151.360 ns/op
Iteration  11: 150.700 ns/op
Iteration  12: 150.603 ns/op
Iteration  13: 150.631 ns/op
Iteration  14: 150.860 ns/op
Iteration  15: 150.765 ns/op
Iteration  16: 150.828 ns/op
Iteration  17: 150.825 ns/op
Iteration  18: 150.952 ns/op
Iteration  19: 151.060 ns/op
Iteration  20: 151.126 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 270.592 ns/op
# Warmup Iteration   2: 222.000 ns/op
# Warmup Iteration   3: 193.670 ns/op
# Warmup Iteration   4: 194.183 ns/op
# Warmup Iteration   5: 195.005 ns/op
Iteration   1: 191.750 ns/op
Iteration   2: 196.193 ns/op
Iteration   3: 197.106 ns/op
Iteration   4: 192.672 ns/op
Iteration   5: 192.838 ns/op
Iteration   6: 191.802 ns/op
Iteration   7: 192.575 ns/op
Iteration   8: 193.640 ns/op
Iteration   9: 192.781 ns/op
Iteration  10: 192.804 ns/op
Iteration  11: 191.761 ns/op
Iteration  12: 192.588 ns/op
Iteration  13: 192.781 ns/op
Iteration  14: 193.220 ns/op
Iteration  15: 192.372 ns/op
Iteration  16: 192.124 ns/op
Iteration  17: 191.723 ns/op
Iteration  18: 192.242 ns/op
Iteration  19: 192.353 ns/op
Iteration  20: 192.152 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 256.206 ns/op
# Warmup Iteration   2: 204.541 ns/op
# Warmup Iteration   3: 183.305 ns/op
# Warmup Iteration   4: 183.924 ns/op
# Warmup Iteration   5: 184.924 ns/op
Iteration   1: 185.641 ns/op
Iteration   2: 186.720 ns/op
Iteration   3: 181.327 ns/op
Iteration   4: 182.594 ns/op
Iteration   5: 182.548 ns/op
Iteration   6: 182.455 ns/op
Iteration   7: 182.311 ns/op
Iteration   8: 182.378 ns/op
Iteration   9: 182.258 ns/op
Iteration  10: 181.832 ns/op
Iteration  11: 182.796 ns/op
Iteration  12: 182.516 ns/op
Iteration  13: 182.514 ns/op
Iteration  14: 181.848 ns/op
Iteration  15: 181.916 ns/op
Iteration  16: 181.565 ns/op
Iteration  17: 181.999 ns/op
Iteration  18: 182.244 ns/op
Iteration  19: 181.954 ns/op
Iteration  20: 183.564 ns/op


Result "benchmark.StringContains.regexMatches":
  177.780 ±(99.9%) 4.773 ns/op [Average]
  (min, avg, max) = (150.603, 177.780, 197.106), stdev = 14.075
  CI (99.9%): [173.007, 182.554] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = /(tR[]`2ov9CRJ,d"F8\ZRPChttpZ0cQ)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.975 ns/op
# Warmup Iteration   2: 12.517 ns/op
# Warmup Iteration   3: 12.243 ns/op
# Warmup Iteration   4: 12.254 ns/op
# Warmup Iteration   5: 12.238 ns/op
Iteration   1: 12.236 ns/op
Iteration   2: 12.244 ns/op
Iteration   3: 12.243 ns/op
Iteration   4: 12.237 ns/op
Iteration   5: 12.244 ns/op
Iteration   6: 12.237 ns/op
Iteration   7: 12.239 ns/op
Iteration   8: 12.244 ns/op
Iteration   9: 12.237 ns/op
Iteration  10: 12.242 ns/op
Iteration  11: 12.243 ns/op
Iteration  12: 12.251 ns/op
Iteration  13: 12.236 ns/op
Iteration  14: 12.241 ns/op
Iteration  15: 12.244 ns/op
Iteration  16: 12.246 ns/op
Iteration  17: 12.242 ns/op
Iteration  18: 12.248 ns/op
Iteration  19: 12.250 ns/op
Iteration  20: 12.240 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 14.297 ns/op
# Warmup Iteration   2: 13.813 ns/op
# Warmup Iteration   3: 13.409 ns/op
# Warmup Iteration   4: 13.404 ns/op
# Warmup Iteration   5: 13.407 ns/op
Iteration   1: 13.408 ns/op
Iteration   2: 13.412 ns/op
Iteration   3: 13.412 ns/op
Iteration   4: 13.407 ns/op
Iteration   5: 13.407 ns/op
Iteration   6: 13.405 ns/op
Iteration   7: 13.406 ns/op
Iteration   8: 13.410 ns/op
Iteration   9: 13.405 ns/op
Iteration  10: 13.403 ns/op
Iteration  11: 13.403 ns/op
Iteration  12: 12.846 ns/op
Iteration  13: 12.846 ns/op
Iteration  14: 12.847 ns/op
Iteration  15: 12.843 ns/op
Iteration  16: 12.844 ns/op
Iteration  17: 12.847 ns/op
Iteration  18: 12.849 ns/op
Iteration  19: 12.844 ns/op
Iteration  20: 12.845 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.303 ns/op
# Warmup Iteration   2: 12.712 ns/op
# Warmup Iteration   3: 12.133 ns/op
# Warmup Iteration   4: 12.142 ns/op
# Warmup Iteration   5: 12.131 ns/op
Iteration   1: 12.151 ns/op
Iteration   2: 12.147 ns/op
Iteration   3: 12.146 ns/op
Iteration   4: 12.138 ns/op
Iteration   5: 12.159 ns/op
Iteration   6: 12.138 ns/op
Iteration   7: 12.143 ns/op
Iteration   8: 12.148 ns/op
Iteration   9: 12.151 ns/op
Iteration  10: 12.168 ns/op
Iteration  11: 12.128 ns/op
Iteration  12: 12.145 ns/op
Iteration  13: 12.156 ns/op
Iteration  14: 12.135 ns/op
Iteration  15: 12.148 ns/op
Iteration  16: 12.145 ns/op
Iteration  17: 12.131 ns/op
Iteration  18: 12.145 ns/op
Iteration  19: 12.133 ns/op
Iteration  20: 12.160 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.322 ns/op
# Warmup Iteration   2: 12.425 ns/op
# Warmup Iteration   3: 12.368 ns/op
# Warmup Iteration   4: 12.372 ns/op
# Warmup Iteration   5: 12.371 ns/op
Iteration   1: 12.400 ns/op
Iteration   2: 12.354 ns/op
Iteration   3: 12.361 ns/op
Iteration   4: 12.369 ns/op
Iteration   5: 12.388 ns/op
Iteration   6: 12.393 ns/op
Iteration   7: 12.403 ns/op
Iteration   8: 12.386 ns/op
Iteration   9: 12.406 ns/op
Iteration  10: 12.376 ns/op
Iteration  11: 12.395 ns/op
Iteration  12: 12.891 ns/op
Iteration  13: 12.892 ns/op
Iteration  14: 12.898 ns/op
Iteration  15: 12.896 ns/op
Iteration  16: 12.898 ns/op
Iteration  17: 12.896 ns/op
Iteration  18: 12.900 ns/op
Iteration  19: 12.889 ns/op
Iteration  20: 12.891 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.306 ns/op
# Warmup Iteration   2: 12.486 ns/op
# Warmup Iteration   3: 12.166 ns/op
# Warmup Iteration   4: 12.145 ns/op
# Warmup Iteration   5: 12.159 ns/op
Iteration   1: 12.170 ns/op
Iteration   2: 12.166 ns/op
Iteration   3: 12.139 ns/op
Iteration   4: 12.148 ns/op
Iteration   5: 12.130 ns/op
Iteration   6: 12.137 ns/op
Iteration   7: 12.134 ns/op
Iteration   8: 12.157 ns/op
Iteration   9: 12.141 ns/op
Iteration  10: 12.153 ns/op
Iteration  11: 12.136 ns/op
Iteration  12: 12.839 ns/op
Iteration  13: 12.838 ns/op
Iteration  14: 12.840 ns/op
Iteration  15: 12.838 ns/op
Iteration  16: 12.840 ns/op
Iteration  17: 12.841 ns/op
Iteration  18: 12.838 ns/op
Iteration  19: 12.839 ns/op
Iteration  20: 12.840 ns/op


Result "benchmark.StringContains.stringContains":
  12.523 ±(99.9%) 0.144 ns/op [Average]
  (min, avg, max) = (12.128, 12.523, 13.412), stdev = 0.425
  CI (99.9%): [12.379, 12.667] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  /(tR[]`2ov9CRJ,d"F8\ZRPChttpZ0cQ  avgt  100  177.780 ± 4.773  ns/op
StringContains.stringContains     http  /(tR[]`2ov9CRJ,d"F8\ZRPChttpZ0cQ  avgt  100   12.523 ± 0.144  ns/op

Benchmark result is saved to http_32_0.75_8.csv
