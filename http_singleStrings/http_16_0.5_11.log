# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = + OZR:TehttpM 'D)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 270.112 ns/op
# Warmup Iteration   2: 222.678 ns/op
# Warmup Iteration   3: 193.621 ns/op
# Warmup Iteration   4: 194.958 ns/op
# Warmup Iteration   5: 196.187 ns/op
Iteration   1: 191.502 ns/op
Iteration   2: 196.648 ns/op
Iteration   3: 198.383 ns/op
Iteration   4: 192.467 ns/op
Iteration   5: 192.305 ns/op
Iteration   6: 191.467 ns/op
Iteration   7: 192.476 ns/op
Iteration   8: 192.573 ns/op
Iteration   9: 192.403 ns/op
Iteration  10: 192.335 ns/op
Iteration  11: 191.339 ns/op
Iteration  12: 192.272 ns/op
Iteration  13: 192.425 ns/op
Iteration  14: 192.727 ns/op
Iteration  15: 192.253 ns/op
Iteration  16: 192.093 ns/op
Iteration  17: 191.543 ns/op
Iteration  18: 191.964 ns/op
Iteration  19: 192.151 ns/op
Iteration  20: 192.018 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 258.250 ns/op
# Warmup Iteration   2: 207.814 ns/op
# Warmup Iteration   3: 171.501 ns/op
# Warmup Iteration   4: 172.096 ns/op
# Warmup Iteration   5: 172.992 ns/op
Iteration   1: 173.763 ns/op
Iteration   2: 174.921 ns/op
Iteration   3: 170.838 ns/op
Iteration   4: 170.717 ns/op
Iteration   5: 170.723 ns/op
Iteration   6: 169.893 ns/op
Iteration   7: 170.763 ns/op
Iteration   8: 170.815 ns/op
Iteration   9: 170.911 ns/op
Iteration  10: 170.987 ns/op
Iteration  11: 171.063 ns/op
Iteration  12: 171.296 ns/op
Iteration  13: 170.741 ns/op
Iteration  14: 170.773 ns/op
Iteration  15: 170.632 ns/op
Iteration  16: 170.595 ns/op
Iteration  17: 170.026 ns/op
Iteration  18: 170.667 ns/op
Iteration  19: 171.296 ns/op
Iteration  20: 171.027 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 256.431 ns/op
# Warmup Iteration   2: 203.172 ns/op
# Warmup Iteration   3: 183.050 ns/op
# Warmup Iteration   4: 183.610 ns/op
# Warmup Iteration   5: 185.092 ns/op
Iteration   1: 185.427 ns/op
Iteration   2: 186.580 ns/op
Iteration   3: 181.176 ns/op
Iteration   4: 182.389 ns/op
Iteration   5: 182.229 ns/op
Iteration   6: 182.098 ns/op
Iteration   7: 182.089 ns/op
Iteration   8: 182.888 ns/op
Iteration   9: 183.652 ns/op
Iteration  10: 181.028 ns/op
Iteration  11: 181.986 ns/op
Iteration  12: 182.221 ns/op
Iteration  13: 182.308 ns/op
Iteration  14: 181.753 ns/op
Iteration  15: 181.564 ns/op
Iteration  16: 181.583 ns/op
Iteration  17: 181.085 ns/op
Iteration  18: 181.636 ns/op
Iteration  19: 181.619 ns/op
Iteration  20: 181.721 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 268.345 ns/op
# Warmup Iteration   2: 219.622 ns/op
# Warmup Iteration   3: 193.663 ns/op
# Warmup Iteration   4: 194.365 ns/op
# Warmup Iteration   5: 195.048 ns/op
Iteration   1: 191.965 ns/op
Iteration   2: 196.114 ns/op
Iteration   3: 197.207 ns/op
Iteration   4: 192.851 ns/op
Iteration   5: 192.717 ns/op
Iteration   6: 191.833 ns/op
Iteration   7: 192.441 ns/op
Iteration   8: 193.652 ns/op
Iteration   9: 193.098 ns/op
Iteration  10: 193.614 ns/op
Iteration  11: 194.965 ns/op
Iteration  12: 191.872 ns/op
Iteration  13: 195.996 ns/op
Iteration  14: 193.142 ns/op
Iteration  15: 194.469 ns/op
Iteration  16: 194.264 ns/op
Iteration  17: 191.812 ns/op
Iteration  18: 192.823 ns/op
Iteration  19: 192.818 ns/op
Iteration  20: 192.946 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 268.588 ns/op
# Warmup Iteration   2: 220.491 ns/op
# Warmup Iteration   3: 186.423 ns/op
# Warmup Iteration   4: 186.899 ns/op
# Warmup Iteration   5: 187.713 ns/op
Iteration   1: 189.106 ns/op
Iteration   2: 189.512 ns/op
Iteration   3: 190.543 ns/op
Iteration   4: 185.837 ns/op
Iteration   5: 185.502 ns/op
Iteration   6: 185.489 ns/op
Iteration   7: 185.629 ns/op
Iteration   8: 184.806 ns/op
Iteration   9: 186.124 ns/op
Iteration  10: 187.357 ns/op
Iteration  11: 185.721 ns/op
Iteration  12: 185.733 ns/op
Iteration  13: 185.872 ns/op
Iteration  14: 184.518 ns/op
Iteration  15: 186.463 ns/op
Iteration  16: 185.697 ns/op
Iteration  17: 184.918 ns/op
Iteration  18: 185.836 ns/op
Iteration  19: 185.481 ns/op
Iteration  20: 184.545 ns/op


Result "benchmark.StringContains.regexMatches":
  185.181 ±(99.9%) 2.825 ns/op [Average]
  (min, avg, max) = (169.893, 185.181, 198.383), stdev = 8.328
  CI (99.9%): [182.357, 188.006] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = + OZR:TehttpM 'D)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.721 ns/op
# Warmup Iteration   3: 9.861 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.873 ns/op
Iteration   1: 9.854 ns/op
Iteration   2: 9.866 ns/op
Iteration   3: 9.866 ns/op
Iteration   4: 9.866 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.861 ns/op
Iteration   7: 9.862 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.858 ns/op
Iteration  10: 9.871 ns/op
Iteration  11: 9.864 ns/op
Iteration  12: 9.875 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.854 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.852 ns/op
Iteration  17: 9.852 ns/op
Iteration  18: 9.854 ns/op
Iteration  19: 9.847 ns/op
Iteration  20: 9.855 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.454 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.977 ns/op
# Warmup Iteration   4: 9.975 ns/op
# Warmup Iteration   5: 9.967 ns/op
Iteration   1: 9.967 ns/op
Iteration   2: 9.967 ns/op
Iteration   3: 9.977 ns/op
Iteration   4: 9.984 ns/op
Iteration   5: 9.964 ns/op
Iteration   6: 9.967 ns/op
Iteration   7: 9.968 ns/op
Iteration   8: 9.961 ns/op
Iteration   9: 9.962 ns/op
Iteration  10: 9.938 ns/op
Iteration  11: 9.947 ns/op
Iteration  12: 9.982 ns/op
Iteration  13: 9.959 ns/op
Iteration  14: 9.970 ns/op
Iteration  15: 9.969 ns/op
Iteration  16: 9.954 ns/op
Iteration  17: 9.965 ns/op
Iteration  18: 9.969 ns/op
Iteration  19: 9.968 ns/op
Iteration  20: 9.949 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.184 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.833 ns/op
# Warmup Iteration   5: 9.837 ns/op
Iteration   1: 9.828 ns/op
Iteration   2: 9.827 ns/op
Iteration   3: 9.830 ns/op
Iteration   4: 9.822 ns/op
Iteration   5: 9.829 ns/op
Iteration   6: 9.830 ns/op
Iteration   7: 9.840 ns/op
Iteration   8: 9.828 ns/op
Iteration   9: 9.838 ns/op
Iteration  10: 9.838 ns/op
Iteration  11: 9.858 ns/op
Iteration  12: 9.842 ns/op
Iteration  13: 9.840 ns/op
Iteration  14: 9.840 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.834 ns/op
Iteration  17: 9.840 ns/op
Iteration  18: 9.853 ns/op
Iteration  19: 9.827 ns/op
Iteration  20: 9.830 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.721 ns/op
# Warmup Iteration   3: 9.958 ns/op
# Warmup Iteration   4: 9.986 ns/op
# Warmup Iteration   5: 9.969 ns/op
Iteration   1: 9.991 ns/op
Iteration   2: 9.990 ns/op
Iteration   3: 9.969 ns/op
Iteration   4: 9.982 ns/op
Iteration   5: 9.973 ns/op
Iteration   6: 9.975 ns/op
Iteration   7: 9.997 ns/op
Iteration   8: 9.980 ns/op
Iteration   9: 9.983 ns/op
Iteration  10: 9.991 ns/op
Iteration  11: 9.993 ns/op
Iteration  12: 9.987 ns/op
Iteration  13: 9.986 ns/op
Iteration  14: 9.988 ns/op
Iteration  15: 10.002 ns/op
Iteration  16: 9.991 ns/op
Iteration  17: 9.997 ns/op
Iteration  18: 9.987 ns/op
Iteration  19: 9.984 ns/op
Iteration  20: 9.985 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.234 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.876 ns/op
# Warmup Iteration   4: 9.851 ns/op
# Warmup Iteration   5: 9.847 ns/op
Iteration   1: 9.861 ns/op
Iteration   2: 9.849 ns/op
Iteration   3: 9.857 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.876 ns/op
Iteration   9: 9.864 ns/op
Iteration  10: 9.870 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.854 ns/op
Iteration  13: 9.849 ns/op
Iteration  14: 9.844 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.854 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.865 ns/op
Iteration  19: 9.850 ns/op
Iteration  20: 9.847 ns/op


Result "benchmark.StringContains.stringContains":
  9.901 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (9.822, 9.901, 10.002), stdev = 0.063
  CI (99.9%): [9.880, 9.923] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  + OZR:TehttpM 'D  avgt  100  185.181 ± 2.825  ns/op
StringContains.stringContains     http  + OZR:TehttpM 'D  avgt  100    9.901 ± 0.021  ns/op

Benchmark result is saved to http_16_0.5_11.csv
