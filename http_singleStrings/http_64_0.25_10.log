# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = N<!D?vNfMD3IH/xhttp>0KAUL.]mlZDeH-n[rCn2Jqz%oI`hBK\jl[9y92J&f)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 663.222 ns/op
# Warmup Iteration   2: 684.846 ns/op
# Warmup Iteration   3: 686.114 ns/op
# Warmup Iteration   4: 684.330 ns/op
# Warmup Iteration   5: 619.280 ns/op
Iteration   1: 606.059 ns/op
Iteration   2: 605.735 ns/op
Iteration   3: 610.970 ns/op
Iteration   4: 605.370 ns/op
Iteration   5: 605.541 ns/op
Iteration   6: 613.322 ns/op
Iteration   7: 605.325 ns/op
Iteration   8: 606.934 ns/op
Iteration   9: 605.851 ns/op
Iteration  10: 615.563 ns/op
Iteration  11: 605.554 ns/op
Iteration  12: 605.629 ns/op
Iteration  13: 605.493 ns/op
Iteration  14: 620.703 ns/op
Iteration  15: 607.272 ns/op
Iteration  16: 607.328 ns/op
Iteration  17: 607.416 ns/op
Iteration  18: 623.299 ns/op
Iteration  19: 605.737 ns/op
Iteration  20: 606.816 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 657.004 ns/op
# Warmup Iteration   2: 678.241 ns/op
# Warmup Iteration   3: 679.405 ns/op
# Warmup Iteration   4: 679.441 ns/op
# Warmup Iteration   5: 611.971 ns/op
Iteration   1: 604.227 ns/op
Iteration   2: 604.578 ns/op
Iteration   3: 609.572 ns/op
Iteration   4: 604.111 ns/op
Iteration   5: 604.679 ns/op
Iteration   6: 612.867 ns/op
Iteration   7: 604.920 ns/op
Iteration   8: 604.877 ns/op
Iteration   9: 604.943 ns/op
Iteration  10: 614.662 ns/op
Iteration  11: 604.667 ns/op
Iteration  12: 604.992 ns/op
Iteration  13: 605.104 ns/op
Iteration  14: 617.781 ns/op
Iteration  15: 604.690 ns/op
Iteration  16: 604.724 ns/op
Iteration  17: 611.464 ns/op
Iteration  18: 617.885 ns/op
Iteration  19: 607.341 ns/op
Iteration  20: 607.547 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 651.791 ns/op
# Warmup Iteration   2: 633.001 ns/op
# Warmup Iteration   3: 715.796 ns/op
# Warmup Iteration   4: 715.569 ns/op
# Warmup Iteration   5: 650.670 ns/op
Iteration   1: 641.783 ns/op
Iteration   2: 641.677 ns/op
Iteration   3: 647.256 ns/op
Iteration   4: 641.253 ns/op
Iteration   5: 640.891 ns/op
Iteration   6: 641.886 ns/op
Iteration   7: 651.119 ns/op
Iteration   8: 642.472 ns/op
Iteration   9: 642.583 ns/op
Iteration  10: 641.735 ns/op
Iteration  11: 652.152 ns/op
Iteration  12: 641.438 ns/op
Iteration  13: 641.468 ns/op
Iteration  14: 647.830 ns/op
Iteration  15: 648.115 ns/op
Iteration  16: 640.896 ns/op
Iteration  17: 640.993 ns/op
Iteration  18: 642.605 ns/op
Iteration  19: 657.930 ns/op
Iteration  20: 641.114 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 671.316 ns/op
# Warmup Iteration   2: 693.888 ns/op
# Warmup Iteration   3: 696.332 ns/op
# Warmup Iteration   4: 696.275 ns/op
# Warmup Iteration   5: 635.426 ns/op
Iteration   1: 621.066 ns/op
Iteration   2: 621.161 ns/op
Iteration   3: 627.361 ns/op
Iteration   4: 621.016 ns/op
Iteration   5: 621.115 ns/op
Iteration   6: 621.131 ns/op
Iteration   7: 629.741 ns/op
Iteration   8: 622.093 ns/op
Iteration   9: 621.673 ns/op
Iteration  10: 632.475 ns/op
Iteration  11: 621.166 ns/op
Iteration  12: 621.461 ns/op
Iteration  13: 621.166 ns/op
Iteration  14: 636.161 ns/op
Iteration  15: 624.391 ns/op
Iteration  16: 624.833 ns/op
Iteration  17: 624.933 ns/op
Iteration  18: 641.390 ns/op
Iteration  19: 621.361 ns/op
Iteration  20: 621.375 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 649.337 ns/op
# Warmup Iteration   2: 636.644 ns/op
# Warmup Iteration   3: 716.695 ns/op
# Warmup Iteration   4: 716.178 ns/op
# Warmup Iteration   5: 650.601 ns/op
Iteration   1: 640.549 ns/op
Iteration   2: 640.744 ns/op
Iteration   3: 649.364 ns/op
Iteration   4: 640.330 ns/op
Iteration   5: 640.706 ns/op
Iteration   6: 640.752 ns/op
Iteration   7: 648.600 ns/op
Iteration   8: 640.425 ns/op
Iteration   9: 640.600 ns/op
Iteration  10: 642.044 ns/op
Iteration  11: 649.953 ns/op
Iteration  12: 640.454 ns/op
Iteration  13: 640.618 ns/op
Iteration  14: 650.978 ns/op
Iteration  15: 643.740 ns/op
Iteration  16: 642.120 ns/op
Iteration  17: 642.022 ns/op
Iteration  18: 647.610 ns/op
Iteration  19: 654.428 ns/op
Iteration  20: 641.107 ns/op


Result "benchmark.StringContains.regexMatches":
  625.930 ±(99.9%) 5.714 ns/op [Average]
  (min, avg, max) = (604.111, 625.930, 657.930), stdev = 16.848
  CI (99.9%): [620.215, 631.644] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = N<!D?vNfMD3IH/xhttp>0KAUL.]mlZDeH-n[rCn2Jqz%oI`hBK\jl[9y92J&f)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.302 ns/op
# Warmup Iteration   2: 12.540 ns/op
# Warmup Iteration   3: 12.142 ns/op
# Warmup Iteration   4: 12.151 ns/op
# Warmup Iteration   5: 12.157 ns/op
Iteration   1: 12.132 ns/op
Iteration   2: 12.150 ns/op
Iteration   3: 12.150 ns/op
Iteration   4: 12.149 ns/op
Iteration   5: 12.161 ns/op
Iteration   6: 12.153 ns/op
Iteration   7: 12.144 ns/op
Iteration   8: 12.154 ns/op
Iteration   9: 12.154 ns/op
Iteration  10: 12.153 ns/op
Iteration  11: 12.152 ns/op
Iteration  12: 12.155 ns/op
Iteration  13: 12.146 ns/op
Iteration  14: 12.155 ns/op
Iteration  15: 12.151 ns/op
Iteration  16: 12.143 ns/op
Iteration  17: 12.158 ns/op
Iteration  18: 12.148 ns/op
Iteration  19: 12.135 ns/op
Iteration  20: 12.156 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.309 ns/op
# Warmup Iteration   2: 12.635 ns/op
# Warmup Iteration   3: 12.236 ns/op
# Warmup Iteration   4: 12.245 ns/op
# Warmup Iteration   5: 12.244 ns/op
Iteration   1: 12.245 ns/op
Iteration   2: 12.252 ns/op
Iteration   3: 12.240 ns/op
Iteration   4: 12.242 ns/op
Iteration   5: 12.242 ns/op
Iteration   6: 12.244 ns/op
Iteration   7: 12.237 ns/op
Iteration   8: 12.244 ns/op
Iteration   9: 12.238 ns/op
Iteration  10: 12.249 ns/op
Iteration  11: 12.246 ns/op
Iteration  12: 12.227 ns/op
Iteration  13: 12.231 ns/op
Iteration  14: 12.245 ns/op
Iteration  15: 12.242 ns/op
Iteration  16: 12.250 ns/op
Iteration  17: 12.237 ns/op
Iteration  18: 12.240 ns/op
Iteration  19: 12.248 ns/op
Iteration  20: 12.241 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.997 ns/op
# Warmup Iteration   2: 12.496 ns/op
# Warmup Iteration   3: 12.132 ns/op
# Warmup Iteration   4: 12.114 ns/op
# Warmup Iteration   5: 12.124 ns/op
Iteration   1: 12.110 ns/op
Iteration   2: 12.130 ns/op
Iteration   3: 12.122 ns/op
Iteration   4: 12.113 ns/op
Iteration   5: 12.105 ns/op
Iteration   6: 12.126 ns/op
Iteration   7: 12.140 ns/op
Iteration   8: 12.130 ns/op
Iteration   9: 12.129 ns/op
Iteration  10: 12.123 ns/op
Iteration  11: 12.097 ns/op
Iteration  12: 12.123 ns/op
Iteration  13: 12.139 ns/op
Iteration  14: 12.128 ns/op
Iteration  15: 12.133 ns/op
Iteration  16: 12.117 ns/op
Iteration  17: 12.130 ns/op
Iteration  18: 12.119 ns/op
Iteration  19: 12.142 ns/op
Iteration  20: 12.124 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.325 ns/op
# Warmup Iteration   2: 12.631 ns/op
# Warmup Iteration   3: 12.152 ns/op
# Warmup Iteration   4: 12.131 ns/op
# Warmup Iteration   5: 12.140 ns/op
Iteration   1: 12.139 ns/op
Iteration   2: 12.139 ns/op
Iteration   3: 12.116 ns/op
Iteration   4: 12.118 ns/op
Iteration   5: 12.130 ns/op
Iteration   6: 12.114 ns/op
Iteration   7: 12.131 ns/op
Iteration   8: 12.121 ns/op
Iteration   9: 12.143 ns/op
Iteration  10: 12.143 ns/op
Iteration  11: 12.137 ns/op
Iteration  12: 12.152 ns/op
Iteration  13: 12.151 ns/op
Iteration  14: 12.143 ns/op
Iteration  15: 12.154 ns/op
Iteration  16: 12.144 ns/op
Iteration  17: 12.149 ns/op
Iteration  18: 12.149 ns/op
Iteration  19: 12.136 ns/op
Iteration  20: 12.138 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.293 ns/op
# Warmup Iteration   2: 12.694 ns/op
# Warmup Iteration   3: 12.162 ns/op
# Warmup Iteration   4: 12.145 ns/op
# Warmup Iteration   5: 12.148 ns/op
Iteration   1: 12.127 ns/op
Iteration   2: 12.130 ns/op
Iteration   3: 12.149 ns/op
Iteration   4: 12.138 ns/op
Iteration   5: 12.139 ns/op
Iteration   6: 12.157 ns/op
Iteration   7: 12.143 ns/op
Iteration   8: 12.158 ns/op
Iteration   9: 12.159 ns/op
Iteration  10: 12.156 ns/op
Iteration  11: 12.144 ns/op
Iteration  12: 12.158 ns/op
Iteration  13: 12.150 ns/op
Iteration  14: 12.149 ns/op
Iteration  15: 12.143 ns/op
Iteration  16: 12.144 ns/op
Iteration  17: 12.152 ns/op
Iteration  18: 12.165 ns/op
Iteration  19: 12.156 ns/op
Iteration  20: 12.153 ns/op


Result "benchmark.StringContains.stringContains":
  12.160 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (12.097, 12.160, 12.252), stdev = 0.043
  CI (99.9%): [12.146, 12.175] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  N<!D?vNfMD3IH/xhttp>0KAUL.]mlZDeH-n[rCn2Jqz%oI`hBK\jl[9y92J&f  avgt  100  625.930 ± 5.714  ns/op
StringContains.stringContains     http  N<!D?vNfMD3IH/xhttp>0KAUL.]mlZDeH-n[rCn2Jqz%oI`hBK\jl[9y92J&f  avgt  100   12.160 ± 0.015  ns/op

Benchmark result is saved to http_64_0.25_10.csv
