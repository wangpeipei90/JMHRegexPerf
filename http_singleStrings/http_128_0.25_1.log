# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Yc}ls0-?QDt3(sOb#gq!$:IQM=9[7AjhttpJN8*zob^;k08y5cc(A !(vC.	9y)=;0'ioja\%>gJp[q:=Y'.jb{RV7!|z+Q[ti?ya4,o>l"4^RTR eODVxbv4pFYl)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1145.700 ns/op
# Warmup Iteration   2: 1161.728 ns/op
# Warmup Iteration   3: 1181.943 ns/op
# Warmup Iteration   4: 1182.118 ns/op
# Warmup Iteration   5: 1181.279 ns/op
Iteration   1: 1181.332 ns/op
Iteration   2: 1181.466 ns/op
Iteration   3: 1110.336 ns/op
Iteration   4: 1095.867 ns/op
Iteration   5: 1095.903 ns/op
Iteration   6: 1095.742 ns/op
Iteration   7: 1095.766 ns/op
Iteration   8: 1096.352 ns/op
Iteration   9: 1106.576 ns/op
Iteration  10: 1095.607 ns/op
Iteration  11: 1095.779 ns/op
Iteration  12: 1095.392 ns/op
Iteration  13: 1095.309 ns/op
Iteration  14: 1095.402 ns/op
Iteration  15: 1110.956 ns/op
Iteration  16: 1097.250 ns/op
Iteration  17: 1097.422 ns/op
Iteration  18: 1097.263 ns/op
Iteration  19: 1097.093 ns/op
Iteration  20: 1097.185 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1139.412 ns/op
# Warmup Iteration   2: 1154.926 ns/op
# Warmup Iteration   3: 1174.615 ns/op
# Warmup Iteration   4: 1174.316 ns/op
# Warmup Iteration   5: 1173.921 ns/op
Iteration   1: 1173.731 ns/op
Iteration   2: 1173.096 ns/op
Iteration   3: 1106.812 ns/op
Iteration   4: 1098.733 ns/op
Iteration   5: 1099.674 ns/op
Iteration   6: 1099.261 ns/op
Iteration   7: 1099.145 ns/op
Iteration   8: 1098.375 ns/op
Iteration   9: 1111.489 ns/op
Iteration  10: 1102.531 ns/op
Iteration  11: 1102.003 ns/op
Iteration  12: 1099.375 ns/op
Iteration  13: 1098.905 ns/op
Iteration  14: 1099.510 ns/op
Iteration  15: 1113.727 ns/op
Iteration  16: 1099.206 ns/op
Iteration  17: 1099.571 ns/op
Iteration  18: 1099.175 ns/op
Iteration  19: 1099.486 ns/op
Iteration  20: 1099.433 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1132.190 ns/op
# Warmup Iteration   2: 1154.509 ns/op
# Warmup Iteration   3: 1174.273 ns/op
# Warmup Iteration   4: 1174.030 ns/op
# Warmup Iteration   5: 1174.001 ns/op
Iteration   1: 1173.888 ns/op
Iteration   2: 1174.656 ns/op
Iteration   3: 1106.621 ns/op
Iteration   4: 1099.700 ns/op
Iteration   5: 1099.464 ns/op
Iteration   6: 1099.861 ns/op
Iteration   7: 1099.728 ns/op
Iteration   8: 1099.958 ns/op
Iteration   9: 1110.817 ns/op
Iteration  10: 1098.735 ns/op
Iteration  11: 1099.824 ns/op
Iteration  12: 1098.286 ns/op
Iteration  13: 1098.801 ns/op
Iteration  14: 1097.576 ns/op
Iteration  15: 1113.324 ns/op
Iteration  16: 1099.528 ns/op
Iteration  17: 1099.502 ns/op
Iteration  18: 1099.625 ns/op
Iteration  19: 1099.461 ns/op
Iteration  20: 1099.489 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1108.657 ns/op
# Warmup Iteration   2: 1093.523 ns/op
# Warmup Iteration   3: 1243.820 ns/op
# Warmup Iteration   4: 1243.440 ns/op
# Warmup Iteration   5: 1243.637 ns/op
Iteration   1: 1243.294 ns/op
Iteration   2: 1243.398 ns/op
Iteration   3: 1192.714 ns/op
Iteration   4: 1168.299 ns/op
Iteration   5: 1167.959 ns/op
Iteration   6: 1169.883 ns/op
Iteration   7: 1170.529 ns/op
Iteration   8: 1169.966 ns/op
Iteration   9: 1181.229 ns/op
Iteration  10: 1169.814 ns/op
Iteration  11: 1169.137 ns/op
Iteration  12: 1168.467 ns/op
Iteration  13: 1167.839 ns/op
Iteration  14: 1167.262 ns/op
Iteration  15: 1167.178 ns/op
Iteration  16: 1184.049 ns/op
Iteration  17: 1167.702 ns/op
Iteration  18: 1167.766 ns/op
Iteration  19: 1167.977 ns/op
Iteration  20: 1168.159 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1132.352 ns/op
# Warmup Iteration   2: 1152.768 ns/op
# Warmup Iteration   3: 1172.059 ns/op
# Warmup Iteration   4: 1171.652 ns/op
# Warmup Iteration   5: 1171.709 ns/op
Iteration   1: 1171.802 ns/op
Iteration   2: 1171.897 ns/op
Iteration   3: 1103.100 ns/op
Iteration   4: 1097.011 ns/op
Iteration   5: 1096.816 ns/op
Iteration   6: 1096.981 ns/op
Iteration   7: 1096.600 ns/op
Iteration   8: 1096.732 ns/op
Iteration   9: 1107.108 ns/op
Iteration  10: 1096.231 ns/op
Iteration  11: 1096.703 ns/op
Iteration  12: 1095.729 ns/op
Iteration  13: 1096.297 ns/op
Iteration  14: 1096.144 ns/op
Iteration  15: 1110.333 ns/op
Iteration  16: 1096.328 ns/op
Iteration  17: 1096.482 ns/op
Iteration  18: 1096.136 ns/op
Iteration  19: 1095.986 ns/op
Iteration  20: 1096.002 ns/op


Result "benchmark.StringContains.regexMatches":
  1121.591 ±(99.9%) 12.486 ns/op [Average]
  (min, avg, max) = (1095.309, 1121.591, 1243.398), stdev = 36.815
  CI (99.9%): [1109.105, 1134.077] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Yc}ls0-?QDt3(sOb#gq!$:IQM=9[7AjhttpJN8*zob^;k08y5cc(A !(vC.	9y)=;0'ioja\%>gJp[q:=Y'.jb{RV7!|z+Q[ti?ya4,o>l"4^RTR eODVxbv4pFYl)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.719 ns/op
# Warmup Iteration   2: 14.844 ns/op
# Warmup Iteration   3: 14.308 ns/op
# Warmup Iteration   4: 14.325 ns/op
# Warmup Iteration   5: 14.338 ns/op
Iteration   1: 14.313 ns/op
Iteration   2: 14.325 ns/op
Iteration   3: 14.329 ns/op
Iteration   4: 14.335 ns/op
Iteration   5: 14.319 ns/op
Iteration   6: 14.315 ns/op
Iteration   7: 14.325 ns/op
Iteration   8: 14.326 ns/op
Iteration   9: 14.321 ns/op
Iteration  10: 14.328 ns/op
Iteration  11: 14.315 ns/op
Iteration  12: 14.329 ns/op
Iteration  13: 14.315 ns/op
Iteration  14: 14.333 ns/op
Iteration  15: 14.308 ns/op
Iteration  16: 14.340 ns/op
Iteration  17: 14.341 ns/op
Iteration  18: 14.325 ns/op
Iteration  19: 14.317 ns/op
Iteration  20: 14.342 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 14.904 ns/op
# Warmup Iteration   3: 14.308 ns/op
# Warmup Iteration   4: 14.311 ns/op
# Warmup Iteration   5: 14.307 ns/op
Iteration   1: 14.315 ns/op
Iteration   2: 14.301 ns/op
Iteration   3: 14.310 ns/op
Iteration   4: 14.297 ns/op
Iteration   5: 14.288 ns/op
Iteration   6: 14.293 ns/op
Iteration   7: 14.295 ns/op
Iteration   8: 14.300 ns/op
Iteration   9: 14.290 ns/op
Iteration  10: 14.313 ns/op
Iteration  11: 14.315 ns/op
Iteration  12: 14.678 ns/op
Iteration  13: 14.662 ns/op
Iteration  14: 14.673 ns/op
Iteration  15: 14.661 ns/op
Iteration  16: 14.662 ns/op
Iteration  17: 14.664 ns/op
Iteration  18: 14.672 ns/op
Iteration  19: 14.671 ns/op
Iteration  20: 14.662 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.719 ns/op
# Warmup Iteration   2: 14.788 ns/op
# Warmup Iteration   3: 14.685 ns/op
# Warmup Iteration   4: 14.638 ns/op
# Warmup Iteration   5: 14.633 ns/op
Iteration   1: 14.586 ns/op
Iteration   2: 14.580 ns/op
Iteration   3: 14.612 ns/op
Iteration   4: 14.599 ns/op
Iteration   5: 14.653 ns/op
Iteration   6: 14.684 ns/op
Iteration   7: 14.685 ns/op
Iteration   8: 14.757 ns/op
Iteration   9: 14.644 ns/op
Iteration  10: 14.618 ns/op
Iteration  11: 14.628 ns/op
Iteration  12: 14.606 ns/op
Iteration  13: 14.641 ns/op
Iteration  14: 14.664 ns/op
Iteration  15: 14.641 ns/op
Iteration  16: 14.667 ns/op
Iteration  17: 14.637 ns/op
Iteration  18: 14.629 ns/op
Iteration  19: 14.623 ns/op
Iteration  20: 14.641 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.700 ns/op
# Warmup Iteration   2: 14.931 ns/op
# Warmup Iteration   3: 14.803 ns/op
# Warmup Iteration   4: 14.773 ns/op
# Warmup Iteration   5: 14.828 ns/op
Iteration   1: 14.825 ns/op
Iteration   2: 14.795 ns/op
Iteration   3: 14.829 ns/op
Iteration   4: 14.866 ns/op
Iteration   5: 14.802 ns/op
Iteration   6: 14.800 ns/op
Iteration   7: 14.753 ns/op
Iteration   8: 14.838 ns/op
Iteration   9: 14.800 ns/op
Iteration  10: 14.789 ns/op
Iteration  11: 14.843 ns/op
Iteration  12: 14.976 ns/op
Iteration  13: 14.947 ns/op
Iteration  14: 15.003 ns/op
Iteration  15: 14.952 ns/op
Iteration  16: 14.990 ns/op
Iteration  17: 15.004 ns/op
Iteration  18: 14.996 ns/op
Iteration  19: 14.962 ns/op
Iteration  20: 14.996 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.736 ns/op
# Warmup Iteration   2: 14.966 ns/op
# Warmup Iteration   3: 14.886 ns/op
# Warmup Iteration   4: 14.795 ns/op
# Warmup Iteration   5: 14.826 ns/op
Iteration   1: 14.829 ns/op
Iteration   2: 14.791 ns/op
Iteration   3: 14.880 ns/op
Iteration   4: 14.823 ns/op
Iteration   5: 14.848 ns/op
Iteration   6: 14.873 ns/op
Iteration   7: 14.854 ns/op
Iteration   8: 14.877 ns/op
Iteration   9: 14.866 ns/op
Iteration  10: 14.873 ns/op
Iteration  11: 14.797 ns/op
Iteration  12: 14.822 ns/op
Iteration  13: 14.844 ns/op
Iteration  14: 14.802 ns/op
Iteration  15: 14.833 ns/op
Iteration  16: 14.833 ns/op
Iteration  17: 14.870 ns/op
Iteration  18: 14.853 ns/op
Iteration  19: 14.851 ns/op
Iteration  20: 14.863 ns/op


Result "benchmark.StringContains.stringContains":
  14.633 ±(99.9%) 0.080 ns/op [Average]
  (min, avg, max) = (14.288, 14.633, 15.004), stdev = 0.236
  CI (99.9%): [14.553, 14.713] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  Yc}ls0-?QDt3(sOb#gq!$:IQM=9[7AjhttpJN8*zob^;k08y5cc(A !(vC.	9y)=;0'ioja\%>gJp[q:=Y'.jb{RV7!|z+Q[ti?ya4,o>l"4^RTR eODVxbv4pFYl  avgt  100  1121.591 ± 12.486  ns/op
StringContains.stringContains     http  Yc}ls0-?QDt3(sOb#gq!$:IQM=9[7AjhttpJN8*zob^;k08y5cc(A !(vC.	9y)=;0'ioja\%>gJp[q:=Y'.jb{RV7!|z+Q[ti?ya4,o>l"4^RTR eODVxbv4pFYl  avgt  100    14.633 ±  0.080  ns/op

Benchmark result is saved to http_128_0.25_1.csv
