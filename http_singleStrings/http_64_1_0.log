# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = x*8jgp`D)m<csvz~A~[b7>f"	VVZ~Laj_+T2fh^dI72[:s7<;=oA2YkEUp-[.rg)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 523.960 ns/op
# Warmup Iteration   2: 517.323 ns/op
# Warmup Iteration   3: 513.991 ns/op
# Warmup Iteration   4: 445.537 ns/op
# Warmup Iteration   5: 433.402 ns/op
Iteration   1: 437.243 ns/op
Iteration   2: 433.320 ns/op
Iteration   3: 434.314 ns/op
Iteration   4: 437.670 ns/op
Iteration   5: 433.405 ns/op
Iteration   6: 441.031 ns/op
Iteration   7: 433.257 ns/op
Iteration   8: 434.188 ns/op
Iteration   9: 443.053 ns/op
Iteration  10: 433.277 ns/op
Iteration  11: 441.533 ns/op
Iteration  12: 439.905 ns/op
Iteration  13: 433.224 ns/op
Iteration  14: 435.905 ns/op
Iteration  15: 433.371 ns/op
Iteration  16: 433.215 ns/op
Iteration  17: 436.566 ns/op
Iteration  18: 435.622 ns/op
Iteration  19: 434.917 ns/op
Iteration  20: 435.282 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 470.167 ns/op
# Warmup Iteration   2: 465.955 ns/op
# Warmup Iteration   3: 450.390 ns/op
# Warmup Iteration   4: 385.955 ns/op
# Warmup Iteration   5: 389.253 ns/op
Iteration   1: 385.827 ns/op
Iteration   2: 385.819 ns/op
Iteration   3: 390.941 ns/op
Iteration   4: 385.797 ns/op
Iteration   5: 392.265 ns/op
Iteration   6: 385.758 ns/op
Iteration   7: 394.126 ns/op
Iteration   8: 386.439 ns/op
Iteration   9: 385.792 ns/op
Iteration  10: 396.727 ns/op
Iteration  11: 385.869 ns/op
Iteration  12: 388.090 ns/op
Iteration  13: 385.727 ns/op
Iteration  14: 385.716 ns/op
Iteration  15: 387.501 ns/op
Iteration  16: 385.738 ns/op
Iteration  17: 387.402 ns/op
Iteration  18: 385.695 ns/op
Iteration  19: 385.717 ns/op
Iteration  20: 387.488 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 521.928 ns/op
# Warmup Iteration   2: 513.730 ns/op
# Warmup Iteration   3: 511.036 ns/op
# Warmup Iteration   4: 442.403 ns/op
# Warmup Iteration   5: 433.476 ns/op
Iteration   1: 436.917 ns/op
Iteration   2: 433.203 ns/op
Iteration   3: 435.839 ns/op
Iteration   4: 435.872 ns/op
Iteration   5: 433.806 ns/op
Iteration   6: 440.787 ns/op
Iteration   7: 432.926 ns/op
Iteration   8: 433.592 ns/op
Iteration   9: 442.268 ns/op
Iteration  10: 433.033 ns/op
Iteration  11: 442.884 ns/op
Iteration  12: 436.633 ns/op
Iteration  13: 432.979 ns/op
Iteration  14: 435.271 ns/op
Iteration  15: 432.792 ns/op
Iteration  16: 432.976 ns/op
Iteration  17: 437.231 ns/op
Iteration  18: 433.329 ns/op
Iteration  19: 433.053 ns/op
Iteration  20: 435.274 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 522.716 ns/op
# Warmup Iteration   2: 513.380 ns/op
# Warmup Iteration   3: 511.389 ns/op
# Warmup Iteration   4: 443.622 ns/op
# Warmup Iteration   5: 433.052 ns/op
Iteration   1: 437.680 ns/op
Iteration   2: 433.934 ns/op
Iteration   3: 435.262 ns/op
Iteration   4: 436.845 ns/op
Iteration   5: 433.090 ns/op
Iteration   6: 440.320 ns/op
Iteration   7: 432.917 ns/op
Iteration   8: 433.904 ns/op
Iteration   9: 442.723 ns/op
Iteration  10: 432.964 ns/op
Iteration  11: 439.741 ns/op
Iteration  12: 438.639 ns/op
Iteration  13: 432.922 ns/op
Iteration  14: 435.191 ns/op
Iteration  15: 432.746 ns/op
Iteration  16: 432.977 ns/op
Iteration  17: 434.921 ns/op
Iteration  18: 432.633 ns/op
Iteration  19: 432.643 ns/op
Iteration  20: 434.723 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 472.304 ns/op
# Warmup Iteration   2: 463.250 ns/op
# Warmup Iteration   3: 447.509 ns/op
# Warmup Iteration   4: 385.827 ns/op
# Warmup Iteration   5: 389.325 ns/op
Iteration   1: 385.601 ns/op
Iteration   2: 385.924 ns/op
Iteration   3: 390.364 ns/op
Iteration   4: 385.799 ns/op
Iteration   5: 392.221 ns/op
Iteration   6: 385.777 ns/op
Iteration   7: 394.320 ns/op
Iteration   8: 385.788 ns/op
Iteration   9: 385.851 ns/op
Iteration  10: 396.508 ns/op
Iteration  11: 385.888 ns/op
Iteration  12: 388.130 ns/op
Iteration  13: 385.642 ns/op
Iteration  14: 385.798 ns/op
Iteration  15: 387.631 ns/op
Iteration  16: 385.772 ns/op
Iteration  17: 387.751 ns/op
Iteration  18: 385.679 ns/op
Iteration  19: 385.888 ns/op
Iteration  20: 387.847 ns/op


Result "benchmark.StringContains.regexMatches":
  416.464 ±(99.9%) 8.069 ns/op [Average]
  (min, avg, max) = (385.601, 416.464, 443.053), stdev = 23.792
  CI (99.9%): [408.394, 424.533] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = x*8jgp`D)m<csvz~A~[b7>f"	VVZ~Laj_+T2fh^dI72[:s7<;=oA2YkEUp-[.rg)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.452 ns/op
# Warmup Iteration   2: 15.760 ns/op
# Warmup Iteration   3: 16.027 ns/op
# Warmup Iteration   4: 16.022 ns/op
# Warmup Iteration   5: 16.025 ns/op
Iteration   1: 16.023 ns/op
Iteration   2: 16.025 ns/op
Iteration   3: 16.312 ns/op
Iteration   4: 16.022 ns/op
Iteration   5: 16.025 ns/op
Iteration   6: 16.023 ns/op
Iteration   7: 16.023 ns/op
Iteration   8: 16.025 ns/op
Iteration   9: 16.023 ns/op
Iteration  10: 16.025 ns/op
Iteration  11: 16.024 ns/op
Iteration  12: 17.516 ns/op
Iteration  13: 17.517 ns/op
Iteration  14: 17.509 ns/op
Iteration  15: 17.517 ns/op
Iteration  16: 17.513 ns/op
Iteration  17: 17.518 ns/op
Iteration  18: 17.516 ns/op
Iteration  19: 17.516 ns/op
Iteration  20: 17.519 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.401 ns/op
# Warmup Iteration   2: 15.738 ns/op
# Warmup Iteration   3: 16.054 ns/op
# Warmup Iteration   4: 16.041 ns/op
# Warmup Iteration   5: 16.042 ns/op
Iteration   1: 16.039 ns/op
Iteration   2: 16.037 ns/op
Iteration   3: 16.061 ns/op
Iteration   4: 16.043 ns/op
Iteration   5: 16.042 ns/op
Iteration   6: 16.040 ns/op
Iteration   7: 16.040 ns/op
Iteration   8: 16.041 ns/op
Iteration   9: 16.039 ns/op
Iteration  10: 16.041 ns/op
Iteration  11: 16.044 ns/op
Iteration  12: 17.519 ns/op
Iteration  13: 17.520 ns/op
Iteration  14: 17.505 ns/op
Iteration  15: 17.523 ns/op
Iteration  16: 17.524 ns/op
Iteration  17: 17.520 ns/op
Iteration  18: 17.533 ns/op
Iteration  19: 17.523 ns/op
Iteration  20: 17.525 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.453 ns/op
# Warmup Iteration   2: 16.412 ns/op
# Warmup Iteration   3: 16.340 ns/op
# Warmup Iteration   4: 16.323 ns/op
# Warmup Iteration   5: 16.335 ns/op
Iteration   1: 16.341 ns/op
Iteration   2: 16.343 ns/op
Iteration   3: 16.337 ns/op
Iteration   4: 16.351 ns/op
Iteration   5: 16.326 ns/op
Iteration   6: 16.333 ns/op
Iteration   7: 16.317 ns/op
Iteration   8: 16.292 ns/op
Iteration   9: 16.334 ns/op
Iteration  10: 16.310 ns/op
Iteration  11: 16.308 ns/op
Iteration  12: 17.522 ns/op
Iteration  13: 17.521 ns/op
Iteration  14: 17.524 ns/op
Iteration  15: 17.528 ns/op
Iteration  16: 17.521 ns/op
Iteration  17: 17.522 ns/op
Iteration  18: 17.525 ns/op
Iteration  19: 17.526 ns/op
Iteration  20: 17.535 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.495 ns/op
# Warmup Iteration   2: 15.764 ns/op
# Warmup Iteration   3: 16.026 ns/op
# Warmup Iteration   4: 16.027 ns/op
# Warmup Iteration   5: 16.027 ns/op
Iteration   1: 16.024 ns/op
Iteration   2: 16.026 ns/op
Iteration   3: 16.024 ns/op
Iteration   4: 16.025 ns/op
Iteration   5: 16.028 ns/op
Iteration   6: 16.022 ns/op
Iteration   7: 16.026 ns/op
Iteration   8: 16.052 ns/op
Iteration   9: 16.026 ns/op
Iteration  10: 16.026 ns/op
Iteration  11: 16.026 ns/op
Iteration  12: 17.518 ns/op
Iteration  13: 17.520 ns/op
Iteration  14: 17.506 ns/op
Iteration  15: 17.515 ns/op
Iteration  16: 17.521 ns/op
Iteration  17: 17.524 ns/op
Iteration  18: 17.518 ns/op
Iteration  19: 17.519 ns/op
Iteration  20: 17.549 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.422 ns/op
# Warmup Iteration   2: 15.714 ns/op
# Warmup Iteration   3: 16.046 ns/op
# Warmup Iteration   4: 16.048 ns/op
# Warmup Iteration   5: 16.048 ns/op
Iteration   1: 16.046 ns/op
Iteration   2: 16.047 ns/op
Iteration   3: 16.047 ns/op
Iteration   4: 16.051 ns/op
Iteration   5: 16.048 ns/op
Iteration   6: 16.047 ns/op
Iteration   7: 16.049 ns/op
Iteration   8: 16.072 ns/op
Iteration   9: 16.048 ns/op
Iteration  10: 16.047 ns/op
Iteration  11: 16.047 ns/op
Iteration  12: 16.049 ns/op
Iteration  13: 16.047 ns/op
Iteration  14: 16.048 ns/op
Iteration  15: 16.048 ns/op
Iteration  16: 16.046 ns/op
Iteration  17: 16.047 ns/op
Iteration  18: 16.047 ns/op
Iteration  19: 16.049 ns/op
Iteration  20: 16.074 ns/op


Result "benchmark.StringContains.stringContains":
  16.607 ±(99.9%) 0.236 ns/op [Average]
  (min, avg, max) = (16.022, 16.607, 17.549), stdev = 0.695
  CI (99.9%): [16.371, 16.842] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  x*8jgp`D)m<csvz~A~[b7>f"	VVZ~Laj_+T2fh^dI72[:s7<;=oA2YkEUp-[.rg  avgt  100  416.464 ± 8.069  ns/op
StringContains.stringContains     http  x*8jgp`D)m<csvz~A~[b7>f"	VVZ~Laj_+T2fh^dI72[:s7<;=oA2YkEUp-[.rg  avgt  100   16.607 ± 0.236  ns/op

Benchmark result is saved to http_64_1_0.csv
