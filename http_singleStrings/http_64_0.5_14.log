# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 1]f^\
an-T!?(;}K-bc;BF-^*Mj6zhttp7Fw	nERok+"G/~*T1_ b4w0;Srq])

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 511.387 ns/op
# Warmup Iteration   2: 522.787 ns/op
# Warmup Iteration   3: 521.465 ns/op
# Warmup Iteration   4: 456.381 ns/op
# Warmup Iteration   5: 443.596 ns/op
Iteration   1: 447.346 ns/op
Iteration   2: 442.551 ns/op
Iteration   3: 442.426 ns/op
Iteration   4: 448.563 ns/op
Iteration   5: 442.933 ns/op
Iteration   6: 450.476 ns/op
Iteration   7: 442.543 ns/op
Iteration   8: 443.387 ns/op
Iteration   9: 453.603 ns/op
Iteration  10: 443.550 ns/op
Iteration  11: 443.346 ns/op
Iteration  12: 458.063 ns/op
Iteration  13: 442.263 ns/op
Iteration  14: 442.311 ns/op
Iteration  15: 444.888 ns/op
Iteration  16: 442.276 ns/op
Iteration  17: 442.049 ns/op
Iteration  18: 444.646 ns/op
Iteration  19: 442.172 ns/op
Iteration  20: 444.702 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 513.346 ns/op
# Warmup Iteration   2: 529.048 ns/op
# Warmup Iteration   3: 522.703 ns/op
# Warmup Iteration   4: 459.757 ns/op
# Warmup Iteration   5: 447.390 ns/op
Iteration   1: 451.214 ns/op
Iteration   2: 444.760 ns/op
Iteration   3: 445.192 ns/op
Iteration   4: 450.924 ns/op
Iteration   5: 445.558 ns/op
Iteration   6: 453.351 ns/op
Iteration   7: 445.696 ns/op
Iteration   8: 445.642 ns/op
Iteration   9: 454.904 ns/op
Iteration  10: 444.780 ns/op
Iteration  11: 446.395 ns/op
Iteration  12: 458.849 ns/op
Iteration  13: 446.921 ns/op
Iteration  14: 445.517 ns/op
Iteration  15: 447.452 ns/op
Iteration  16: 446.731 ns/op
Iteration  17: 445.651 ns/op
Iteration  18: 447.746 ns/op
Iteration  19: 446.259 ns/op
Iteration  20: 446.898 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 514.185 ns/op
# Warmup Iteration   2: 528.855 ns/op
# Warmup Iteration   3: 529.147 ns/op
# Warmup Iteration   4: 467.551 ns/op
# Warmup Iteration   5: 454.171 ns/op
Iteration   1: 458.622 ns/op
Iteration   2: 454.085 ns/op
Iteration   3: 453.994 ns/op
Iteration   4: 459.983 ns/op
Iteration   5: 454.119 ns/op
Iteration   6: 458.250 ns/op
Iteration   7: 457.083 ns/op
Iteration   8: 454.228 ns/op
Iteration   9: 463.897 ns/op
Iteration  10: 454.135 ns/op
Iteration  11: 454.026 ns/op
Iteration  12: 468.635 ns/op
Iteration  13: 453.982 ns/op
Iteration  14: 453.980 ns/op
Iteration  15: 456.304 ns/op
Iteration  16: 454.219 ns/op
Iteration  17: 454.515 ns/op
Iteration  18: 456.283 ns/op
Iteration  19: 454.284 ns/op
Iteration  20: 454.478 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 510.215 ns/op
# Warmup Iteration   2: 490.384 ns/op
# Warmup Iteration   3: 551.284 ns/op
# Warmup Iteration   4: 483.476 ns/op
# Warmup Iteration   5: 472.295 ns/op
Iteration   1: 476.856 ns/op
Iteration   2: 470.761 ns/op
Iteration   3: 470.874 ns/op
Iteration   4: 477.177 ns/op
Iteration   5: 472.453 ns/op
Iteration   6: 471.401 ns/op
Iteration   7: 480.400 ns/op
Iteration   8: 471.810 ns/op
Iteration   9: 471.242 ns/op
Iteration  10: 481.400 ns/op
Iteration  11: 471.472 ns/op
Iteration  12: 470.827 ns/op
Iteration  13: 486.437 ns/op
Iteration  14: 472.320 ns/op
Iteration  15: 472.547 ns/op
Iteration  16: 473.354 ns/op
Iteration  17: 470.623 ns/op
Iteration  18: 471.103 ns/op
Iteration  19: 473.124 ns/op
Iteration  20: 471.484 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 502.677 ns/op
# Warmup Iteration   2: 494.623 ns/op
# Warmup Iteration   3: 545.110 ns/op
# Warmup Iteration   4: 478.731 ns/op
# Warmup Iteration   5: 469.276 ns/op
Iteration   1: 473.815 ns/op
Iteration   2: 472.297 ns/op
Iteration   3: 471.801 ns/op
Iteration   4: 476.681 ns/op
Iteration   5: 468.938 ns/op
Iteration   6: 468.869 ns/op
Iteration   7: 476.567 ns/op
Iteration   8: 468.433 ns/op
Iteration   9: 472.222 ns/op
Iteration  10: 475.253 ns/op
Iteration  11: 468.919 ns/op
Iteration  12: 474.083 ns/op
Iteration  13: 477.478 ns/op
Iteration  14: 468.574 ns/op
Iteration  15: 468.382 ns/op
Iteration  16: 474.668 ns/op
Iteration  17: 471.786 ns/op
Iteration  18: 472.105 ns/op
Iteration  19: 473.823 ns/op
Iteration  20: 471.901 ns/op


Result "benchmark.StringContains.regexMatches":
  459.179 ±(99.9%) 4.282 ns/op [Average]
  (min, avg, max) = (442.049, 459.179, 486.437), stdev = 12.625
  CI (99.9%): [454.897, 463.461] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 1]f^\
an-T!?(;}K-bc;BF-^*Mj6zhttp7Fw	nERok+"G/~*T1_ b4w0;Srq])

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.676 ns/op
# Warmup Iteration   2: 14.941 ns/op
# Warmup Iteration   3: 14.825 ns/op
# Warmup Iteration   4: 14.852 ns/op
# Warmup Iteration   5: 14.872 ns/op
Iteration   1: 14.841 ns/op
Iteration   2: 14.848 ns/op
Iteration   3: 14.867 ns/op
Iteration   4: 14.897 ns/op
Iteration   5: 14.876 ns/op
Iteration   6: 14.883 ns/op
Iteration   7: 14.901 ns/op
Iteration   8: 14.805 ns/op
Iteration   9: 14.859 ns/op
Iteration  10: 14.836 ns/op
Iteration  11: 14.895 ns/op
Iteration  12: 14.923 ns/op
Iteration  13: 14.914 ns/op
Iteration  14: 14.903 ns/op
Iteration  15: 14.887 ns/op
Iteration  16: 14.880 ns/op
Iteration  17: 14.907 ns/op
Iteration  18: 14.862 ns/op
Iteration  19: 14.900 ns/op
Iteration  20: 14.858 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.680 ns/op
# Warmup Iteration   2: 14.944 ns/op
# Warmup Iteration   3: 14.285 ns/op
# Warmup Iteration   4: 14.316 ns/op
# Warmup Iteration   5: 14.337 ns/op
Iteration   1: 14.307 ns/op
Iteration   2: 14.317 ns/op
Iteration   3: 14.314 ns/op
Iteration   4: 14.305 ns/op
Iteration   5: 14.310 ns/op
Iteration   6: 14.304 ns/op
Iteration   7: 14.292 ns/op
Iteration   8: 14.330 ns/op
Iteration   9: 14.314 ns/op
Iteration  10: 14.287 ns/op
Iteration  11: 14.293 ns/op
Iteration  12: 14.297 ns/op
Iteration  13: 14.298 ns/op
Iteration  14: 14.319 ns/op
Iteration  15: 14.283 ns/op
Iteration  16: 14.282 ns/op
Iteration  17: 14.318 ns/op
Iteration  18: 14.300 ns/op
Iteration  19: 14.318 ns/op
Iteration  20: 14.333 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.661 ns/op
# Warmup Iteration   2: 14.900 ns/op
# Warmup Iteration   3: 14.311 ns/op
# Warmup Iteration   4: 14.287 ns/op
# Warmup Iteration   5: 14.294 ns/op
Iteration   1: 14.289 ns/op
Iteration   2: 14.291 ns/op
Iteration   3: 14.317 ns/op
Iteration   4: 14.313 ns/op
Iteration   5: 14.295 ns/op
Iteration   6: 14.296 ns/op
Iteration   7: 14.305 ns/op
Iteration   8: 14.318 ns/op
Iteration   9: 14.301 ns/op
Iteration  10: 14.309 ns/op
Iteration  11: 14.293 ns/op
Iteration  12: 14.322 ns/op
Iteration  13: 14.327 ns/op
Iteration  14: 14.312 ns/op
Iteration  15: 14.313 ns/op
Iteration  16: 14.318 ns/op
Iteration  17: 14.317 ns/op
Iteration  18: 14.314 ns/op
Iteration  19: 14.328 ns/op
Iteration  20: 14.313 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.656 ns/op
# Warmup Iteration   2: 14.743 ns/op
# Warmup Iteration   3: 14.321 ns/op
# Warmup Iteration   4: 14.304 ns/op
# Warmup Iteration   5: 14.301 ns/op
Iteration   1: 14.301 ns/op
Iteration   2: 14.325 ns/op
Iteration   3: 14.310 ns/op
Iteration   4: 14.321 ns/op
Iteration   5: 14.317 ns/op
Iteration   6: 14.321 ns/op
Iteration   7: 14.313 ns/op
Iteration   8: 14.314 ns/op
Iteration   9: 14.324 ns/op
Iteration  10: 14.322 ns/op
Iteration  11: 14.333 ns/op
Iteration  12: 14.318 ns/op
Iteration  13: 14.312 ns/op
Iteration  14: 14.312 ns/op
Iteration  15: 14.322 ns/op
Iteration  16: 14.317 ns/op
Iteration  17: 14.307 ns/op
Iteration  18: 14.315 ns/op
Iteration  19: 14.322 ns/op
Iteration  20: 14.328 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.751 ns/op
# Warmup Iteration   2: 14.758 ns/op
# Warmup Iteration   3: 14.348 ns/op
# Warmup Iteration   4: 14.352 ns/op
# Warmup Iteration   5: 14.336 ns/op
Iteration   1: 14.336 ns/op
Iteration   2: 14.331 ns/op
Iteration   3: 14.371 ns/op
Iteration   4: 14.327 ns/op
Iteration   5: 14.329 ns/op
Iteration   6: 14.322 ns/op
Iteration   7: 14.325 ns/op
Iteration   8: 14.350 ns/op
Iteration   9: 14.347 ns/op
Iteration  10: 14.344 ns/op
Iteration  11: 14.327 ns/op
Iteration  12: 14.322 ns/op
Iteration  13: 14.308 ns/op
Iteration  14: 14.335 ns/op
Iteration  15: 14.304 ns/op
Iteration  16: 14.324 ns/op
Iteration  17: 14.310 ns/op
Iteration  18: 14.335 ns/op
Iteration  19: 14.360 ns/op
Iteration  20: 14.337 ns/op


Result "benchmark.StringContains.stringContains":
  14.429 ±(99.9%) 0.077 ns/op [Average]
  (min, avg, max) = (14.282, 14.429, 14.923), stdev = 0.226
  CI (99.9%): [14.352, 14.505] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  1]f^\
an-T!?(;}K-bc;BF-^*Mj6zhttp7Fw	nERok+"G/~*T1_ b4w0;Srq]  avgt  100  459.179 ± 4.282  ns/op
StringContains.stringContains     http  1]f^\
an-T!?(;}K-bc;BF-^*Mj6zhttp7Fw	nERok+"G/~*T1_ b4w0;Srq]  avgt  100   14.429 ± 0.077  ns/op

Benchmark result is saved to http_64_0.5_14.csv
