# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = v`1FDR{-httpg[VS)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 246.094 ns/op
# Warmup Iteration   2: 183.675 ns/op
# Warmup Iteration   3: 152.263 ns/op
# Warmup Iteration   4: 152.921 ns/op
# Warmup Iteration   5: 154.628 ns/op
Iteration   1: 155.706 ns/op
Iteration   2: 156.807 ns/op
Iteration   3: 152.542 ns/op
Iteration   4: 152.283 ns/op
Iteration   5: 152.328 ns/op
Iteration   6: 154.284 ns/op
Iteration   7: 153.701 ns/op
Iteration   8: 153.555 ns/op
Iteration   9: 153.874 ns/op
Iteration  10: 154.312 ns/op
Iteration  11: 150.916 ns/op
Iteration  12: 151.318 ns/op
Iteration  13: 153.919 ns/op
Iteration  14: 152.082 ns/op
Iteration  15: 151.584 ns/op
Iteration  16: 153.931 ns/op
Iteration  17: 153.959 ns/op
Iteration  18: 151.997 ns/op
Iteration  19: 150.999 ns/op
Iteration  20: 151.078 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 258.983 ns/op
# Warmup Iteration   2: 203.563 ns/op
# Warmup Iteration   3: 182.865 ns/op
# Warmup Iteration   4: 183.364 ns/op
# Warmup Iteration   5: 183.946 ns/op
Iteration   1: 184.954 ns/op
Iteration   2: 185.992 ns/op
Iteration   3: 181.109 ns/op
Iteration   4: 181.688 ns/op
Iteration   5: 181.641 ns/op
Iteration   6: 182.439 ns/op
Iteration   7: 181.568 ns/op
Iteration   8: 181.965 ns/op
Iteration   9: 181.646 ns/op
Iteration  10: 180.797 ns/op
Iteration  11: 181.845 ns/op
Iteration  12: 181.682 ns/op
Iteration  13: 181.974 ns/op
Iteration  14: 182.071 ns/op
Iteration  15: 182.209 ns/op
Iteration  16: 181.340 ns/op
Iteration  17: 180.619 ns/op
Iteration  18: 181.162 ns/op
Iteration  19: 181.205 ns/op
Iteration  20: 181.359 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 263.603 ns/op
# Warmup Iteration   2: 206.118 ns/op
# Warmup Iteration   3: 184.556 ns/op
# Warmup Iteration   4: 185.194 ns/op
# Warmup Iteration   5: 186.002 ns/op
Iteration   1: 186.897 ns/op
Iteration   2: 185.702 ns/op
Iteration   3: 185.121 ns/op
Iteration   4: 183.728 ns/op
Iteration   5: 183.702 ns/op
Iteration   6: 183.762 ns/op
Iteration   7: 183.699 ns/op
Iteration   8: 183.690 ns/op
Iteration   9: 182.814 ns/op
Iteration  10: 183.603 ns/op
Iteration  11: 183.705 ns/op
Iteration  12: 184.042 ns/op
Iteration  13: 183.663 ns/op
Iteration  14: 183.409 ns/op
Iteration  15: 184.143 ns/op
Iteration  16: 182.726 ns/op
Iteration  17: 183.389 ns/op
Iteration  18: 182.989 ns/op
Iteration  19: 183.077 ns/op
Iteration  20: 183.059 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 268.835 ns/op
# Warmup Iteration   2: 219.371 ns/op
# Warmup Iteration   3: 193.848 ns/op
# Warmup Iteration   4: 194.418 ns/op
# Warmup Iteration   5: 195.493 ns/op
Iteration   1: 192.094 ns/op
Iteration   2: 196.302 ns/op
Iteration   3: 197.524 ns/op
Iteration   4: 192.999 ns/op
Iteration   5: 192.936 ns/op
Iteration   6: 192.041 ns/op
Iteration   7: 192.849 ns/op
Iteration   8: 193.084 ns/op
Iteration   9: 192.854 ns/op
Iteration  10: 192.986 ns/op
Iteration  11: 193.004 ns/op
Iteration  12: 191.949 ns/op
Iteration  13: 192.882 ns/op
Iteration  14: 192.968 ns/op
Iteration  15: 193.421 ns/op
Iteration  16: 192.459 ns/op
Iteration  17: 191.899 ns/op
Iteration  18: 192.324 ns/op
Iteration  19: 192.396 ns/op
Iteration  20: 194.189 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 268.043 ns/op
# Warmup Iteration   2: 219.945 ns/op
# Warmup Iteration   3: 193.747 ns/op
# Warmup Iteration   4: 194.401 ns/op
# Warmup Iteration   5: 195.159 ns/op
Iteration   1: 191.857 ns/op
Iteration   2: 196.201 ns/op
Iteration   3: 198.356 ns/op
Iteration   4: 192.726 ns/op
Iteration   5: 192.643 ns/op
Iteration   6: 191.779 ns/op
Iteration   7: 192.801 ns/op
Iteration   8: 202.406 ns/op
Iteration   9: 200.759 ns/op
Iteration  10: 193.336 ns/op
Iteration  11: 191.691 ns/op
Iteration  12: 192.656 ns/op
Iteration  13: 195.449 ns/op
Iteration  14: 193.598 ns/op
Iteration  15: 192.435 ns/op
Iteration  16: 191.842 ns/op
Iteration  17: 193.024 ns/op
Iteration  18: 193.648 ns/op
Iteration  19: 193.541 ns/op
Iteration  20: 192.832 ns/op


Result "benchmark.StringContains.regexMatches":
  181.241 ±(99.9%) 5.116 ns/op [Average]
  (min, avg, max) = (150.916, 181.241, 202.406), stdev = 15.086
  CI (99.9%): [176.125, 186.357] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = v`1FDR{-httpg[VS)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.877 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.861 ns/op
Iteration   4: 9.850 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.866 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.862 ns/op
Iteration  11: 9.874 ns/op
Iteration  12: 9.880 ns/op
Iteration  13: 9.851 ns/op
Iteration  14: 9.871 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.849 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.863 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.866 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.452 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.859 ns/op
# Warmup Iteration   5: 9.883 ns/op
Iteration   1: 9.860 ns/op
Iteration   2: 9.875 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.877 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.860 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.881 ns/op
Iteration  14: 9.884 ns/op
Iteration  15: 9.884 ns/op
Iteration  16: 9.884 ns/op
Iteration  17: 9.866 ns/op
Iteration  18: 9.877 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.894 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.445 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.891 ns/op
# Warmup Iteration   4: 9.887 ns/op
# Warmup Iteration   5: 9.887 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.874 ns/op
Iteration   3: 9.871 ns/op
Iteration   4: 9.887 ns/op
Iteration   5: 9.893 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.881 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.866 ns/op
Iteration  11: 9.888 ns/op
Iteration  12: 9.879 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.875 ns/op
Iteration  15: 9.875 ns/op
Iteration  16: 9.883 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.881 ns/op
Iteration  20: 9.869 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.459 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.874 ns/op
# Warmup Iteration   4: 9.869 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.870 ns/op
Iteration   2: 9.860 ns/op
Iteration   3: 9.895 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.868 ns/op
Iteration   6: 9.873 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.887 ns/op
Iteration   9: 9.887 ns/op
Iteration  10: 9.880 ns/op
Iteration  11: 9.872 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.873 ns/op
Iteration  15: 9.871 ns/op
Iteration  16: 9.885 ns/op
Iteration  17: 9.868 ns/op
Iteration  18: 9.883 ns/op
Iteration  19: 9.873 ns/op
Iteration  20: 9.874 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.525 ns/op
# Warmup Iteration   2: 9.714 ns/op
# Warmup Iteration   3: 9.884 ns/op
# Warmup Iteration   4: 9.871 ns/op
# Warmup Iteration   5: 9.879 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.875 ns/op
Iteration   3: 9.870 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.877 ns/op
Iteration   6: 9.862 ns/op
Iteration   7: 9.864 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.887 ns/op
Iteration  14: 9.894 ns/op
Iteration  15: 9.904 ns/op
Iteration  16: 9.864 ns/op
Iteration  17: 9.873 ns/op
Iteration  18: 9.874 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.864 ns/op


Result "benchmark.StringContains.stringContains":
  9.873 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (9.849, 9.873, 9.904), stdev = 0.010
  CI (99.9%): [9.869, 9.876] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  v`1FDR{-httpg[VS  avgt  100  181.241 ± 5.116  ns/op
StringContains.stringContains     http  v`1FDR{-httpg[VS  avgt  100    9.873 ± 0.003  ns/op

Benchmark result is saved to http_16_0.5_4.csv
