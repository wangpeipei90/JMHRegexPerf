# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = m=7eGmDWNOa>\_ZTe}GI_B5	}7.^@Ho.6S<MzG(i6ic406 |q2Q55-bhtK	HnvHG$*9^u5&SS6SpU	'EdHz;EjJ
&H<A3(ThttpHL=ve ^(3T{Fa~QjQ2:4*N>,u%ob)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 520.992 ns/op
# Warmup Iteration   2: 518.574 ns/op
# Warmup Iteration   3: 561.592 ns/op
# Warmup Iteration   4: 498.764 ns/op
# Warmup Iteration   5: 479.569 ns/op
Iteration   1: 484.755 ns/op
Iteration   2: 479.842 ns/op
Iteration   3: 479.596 ns/op
Iteration   4: 486.235 ns/op
Iteration   5: 479.820 ns/op
Iteration   6: 479.528 ns/op
Iteration   7: 488.392 ns/op
Iteration   8: 479.451 ns/op
Iteration   9: 479.875 ns/op
Iteration  10: 490.795 ns/op
Iteration  11: 480.057 ns/op
Iteration  12: 479.665 ns/op
Iteration  13: 493.476 ns/op
Iteration  14: 479.821 ns/op
Iteration  15: 479.951 ns/op
Iteration  16: 483.077 ns/op
Iteration  17: 480.179 ns/op
Iteration  18: 480.294 ns/op
Iteration  19: 482.600 ns/op
Iteration  20: 479.881 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 516.089 ns/op
# Warmup Iteration   2: 528.827 ns/op
# Warmup Iteration   3: 530.186 ns/op
# Warmup Iteration   4: 468.652 ns/op
# Warmup Iteration   5: 454.857 ns/op
Iteration   1: 458.978 ns/op
Iteration   2: 454.882 ns/op
Iteration   3: 454.861 ns/op
Iteration   4: 461.528 ns/op
Iteration   5: 455.677 ns/op
Iteration   6: 459.228 ns/op
Iteration   7: 458.557 ns/op
Iteration   8: 454.914 ns/op
Iteration   9: 465.034 ns/op
Iteration  10: 454.888 ns/op
Iteration  11: 454.870 ns/op
Iteration  12: 468.628 ns/op
Iteration  13: 454.673 ns/op
Iteration  14: 454.753 ns/op
Iteration  15: 457.129 ns/op
Iteration  16: 454.513 ns/op
Iteration  17: 454.674 ns/op
Iteration  18: 456.851 ns/op
Iteration  19: 454.858 ns/op
Iteration  20: 455.074 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 505.449 ns/op
# Warmup Iteration   2: 493.327 ns/op
# Warmup Iteration   3: 544.023 ns/op
# Warmup Iteration   4: 478.568 ns/op
# Warmup Iteration   5: 468.736 ns/op
Iteration   1: 473.363 ns/op
Iteration   2: 469.006 ns/op
Iteration   3: 469.352 ns/op
Iteration   4: 475.237 ns/op
Iteration   5: 469.281 ns/op
Iteration   6: 469.198 ns/op
Iteration   7: 477.144 ns/op
Iteration   8: 469.347 ns/op
Iteration   9: 472.690 ns/op
Iteration  10: 483.970 ns/op
Iteration  11: 478.064 ns/op
Iteration  12: 471.355 ns/op
Iteration  13: 479.998 ns/op
Iteration  14: 468.820 ns/op
Iteration  15: 468.697 ns/op
Iteration  16: 470.992 ns/op
Iteration  17: 468.528 ns/op
Iteration  18: 468.649 ns/op
Iteration  19: 470.565 ns/op
Iteration  20: 468.169 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 518.899 ns/op
# Warmup Iteration   2: 530.522 ns/op
# Warmup Iteration   3: 531.926 ns/op
# Warmup Iteration   4: 469.593 ns/op
# Warmup Iteration   5: 455.747 ns/op
Iteration   1: 460.470 ns/op
Iteration   2: 456.448 ns/op
Iteration   3: 456.363 ns/op
Iteration   4: 462.010 ns/op
Iteration   5: 456.279 ns/op
Iteration   6: 464.036 ns/op
Iteration   7: 455.406 ns/op
Iteration   8: 455.911 ns/op
Iteration   9: 466.069 ns/op
Iteration  10: 455.752 ns/op
Iteration  11: 455.787 ns/op
Iteration  12: 468.811 ns/op
Iteration  13: 456.044 ns/op
Iteration  14: 457.829 ns/op
Iteration  15: 460.899 ns/op
Iteration  16: 457.041 ns/op
Iteration  17: 456.410 ns/op
Iteration  18: 459.863 ns/op
Iteration  19: 460.571 ns/op
Iteration  20: 460.895 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 511.322 ns/op
# Warmup Iteration   2: 519.879 ns/op
# Warmup Iteration   3: 527.559 ns/op
# Warmup Iteration   4: 456.773 ns/op
# Warmup Iteration   5: 443.281 ns/op
Iteration   1: 447.249 ns/op
Iteration   2: 443.260 ns/op
Iteration   3: 443.248 ns/op
Iteration   4: 448.498 ns/op
Iteration   5: 443.181 ns/op
Iteration   6: 450.663 ns/op
Iteration   7: 443.224 ns/op
Iteration   8: 443.235 ns/op
Iteration   9: 453.188 ns/op
Iteration  10: 443.309 ns/op
Iteration  11: 443.291 ns/op
Iteration  12: 456.039 ns/op
Iteration  13: 443.446 ns/op
Iteration  14: 443.415 ns/op
Iteration  15: 448.034 ns/op
Iteration  16: 446.164 ns/op
Iteration  17: 446.149 ns/op
Iteration  18: 445.773 ns/op
Iteration  19: 443.137 ns/op
Iteration  20: 446.607 ns/op


Result "benchmark.StringContains.regexMatches":
  463.383 ±(99.9%) 4.496 ns/op [Average]
  (min, avg, max) = (443.137, 463.383, 493.476), stdev = 13.256
  CI (99.9%): [458.887, 467.879] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = m=7eGmDWNOa>\_ZTe}GI_B5	}7.^@Ho.6S<MzG(i6ic406 |q2Q55-bhtK	HnvHG$*9^u5&SS6SpU	'EdHz;EjJ
&H<A3(ThttpHL=ve ^(3T{Fa~QjQ2:4*N>,u%ob)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.632 ns/op
# Warmup Iteration   2: 23.882 ns/op
# Warmup Iteration   3: 24.060 ns/op
# Warmup Iteration   4: 24.079 ns/op
# Warmup Iteration   5: 24.092 ns/op
Iteration   1: 24.029 ns/op
Iteration   2: 24.062 ns/op
Iteration   3: 24.068 ns/op
Iteration   4: 24.099 ns/op
Iteration   5: 24.067 ns/op
Iteration   6: 24.087 ns/op
Iteration   7: 24.023 ns/op
Iteration   8: 24.067 ns/op
Iteration   9: 24.115 ns/op
Iteration  10: 24.086 ns/op
Iteration  11: 24.084 ns/op
Iteration  12: 24.098 ns/op
Iteration  13: 24.075 ns/op
Iteration  14: 24.048 ns/op
Iteration  15: 24.095 ns/op
Iteration  16: 24.121 ns/op
Iteration  17: 24.080 ns/op
Iteration  18: 24.114 ns/op
Iteration  19: 24.060 ns/op
Iteration  20: 24.107 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.626 ns/op
# Warmup Iteration   2: 23.955 ns/op
# Warmup Iteration   3: 23.248 ns/op
# Warmup Iteration   4: 23.259 ns/op
# Warmup Iteration   5: 23.248 ns/op
Iteration   1: 23.239 ns/op
Iteration   2: 23.256 ns/op
Iteration   3: 23.231 ns/op
Iteration   4: 23.239 ns/op
Iteration   5: 23.255 ns/op
Iteration   6: 23.248 ns/op
Iteration   7: 23.230 ns/op
Iteration   8: 23.283 ns/op
Iteration   9: 23.230 ns/op
Iteration  10: 23.220 ns/op
Iteration  11: 23.210 ns/op
Iteration  12: 23.237 ns/op
Iteration  13: 23.219 ns/op
Iteration  14: 23.242 ns/op
Iteration  15: 23.252 ns/op
Iteration  16: 23.253 ns/op
Iteration  17: 23.231 ns/op
Iteration  18: 23.234 ns/op
Iteration  19: 23.250 ns/op
Iteration  20: 23.277 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.644 ns/op
# Warmup Iteration   2: 23.907 ns/op
# Warmup Iteration   3: 24.079 ns/op
# Warmup Iteration   4: 24.136 ns/op
# Warmup Iteration   5: 24.093 ns/op
Iteration   1: 24.105 ns/op
Iteration   2: 24.068 ns/op
Iteration   3: 24.020 ns/op
Iteration   4: 24.078 ns/op
Iteration   5: 24.106 ns/op
Iteration   6: 24.097 ns/op
Iteration   7: 24.047 ns/op
Iteration   8: 24.105 ns/op
Iteration   9: 24.036 ns/op
Iteration  10: 24.058 ns/op
Iteration  11: 24.126 ns/op
Iteration  12: 24.114 ns/op
Iteration  13: 24.135 ns/op
Iteration  14: 24.115 ns/op
Iteration  15: 24.100 ns/op
Iteration  16: 24.121 ns/op
Iteration  17: 24.138 ns/op
Iteration  18: 24.057 ns/op
Iteration  19: 24.075 ns/op
Iteration  20: 24.114 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.634 ns/op
# Warmup Iteration   2: 23.897 ns/op
# Warmup Iteration   3: 23.237 ns/op
# Warmup Iteration   4: 23.236 ns/op
# Warmup Iteration   5: 23.267 ns/op
Iteration   1: 23.267 ns/op
Iteration   2: 23.246 ns/op
Iteration   3: 23.252 ns/op
Iteration   4: 23.251 ns/op
Iteration   5: 23.250 ns/op
Iteration   6: 23.238 ns/op
Iteration   7: 23.242 ns/op
Iteration   8: 23.284 ns/op
Iteration   9: 23.264 ns/op
Iteration  10: 23.266 ns/op
Iteration  11: 23.258 ns/op
Iteration  12: 23.250 ns/op
Iteration  13: 23.248 ns/op
Iteration  14: 23.235 ns/op
Iteration  15: 23.243 ns/op
Iteration  16: 23.279 ns/op
Iteration  17: 23.242 ns/op
Iteration  18: 23.247 ns/op
Iteration  19: 23.247 ns/op
Iteration  20: 23.282 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.611 ns/op
# Warmup Iteration   2: 23.971 ns/op
# Warmup Iteration   3: 23.263 ns/op
# Warmup Iteration   4: 23.246 ns/op
# Warmup Iteration   5: 23.265 ns/op
Iteration   1: 23.263 ns/op
Iteration   2: 23.239 ns/op
Iteration   3: 23.251 ns/op
Iteration   4: 23.260 ns/op
Iteration   5: 23.236 ns/op
Iteration   6: 23.247 ns/op
Iteration   7: 23.238 ns/op
Iteration   8: 23.249 ns/op
Iteration   9: 23.231 ns/op
Iteration  10: 23.252 ns/op
Iteration  11: 23.243 ns/op
Iteration  12: 23.249 ns/op
Iteration  13: 23.244 ns/op
Iteration  14: 23.228 ns/op
Iteration  15: 23.234 ns/op
Iteration  16: 23.273 ns/op
Iteration  17: 23.237 ns/op
Iteration  18: 23.261 ns/op
Iteration  19: 23.251 ns/op
Iteration  20: 23.236 ns/op


Result "benchmark.StringContains.stringContains":
  23.582 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (23.210, 23.582, 24.138), stdev = 0.413
  CI (99.9%): [23.442, 23.723] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  m=7eGmDWNOa>\_ZTe}GI_B5	}7.^@Ho.6S<MzG(i6ic406 |q2Q55-bhtK	HnvHG$*9^u5&SS6SpU	'EdHz;EjJ
&H<A3(ThttpHL=ve ^(3T{Fa~QjQ2:4*N>,u%ob  avgt  100  463.383 ± 4.496  ns/op
StringContains.stringContains     http  m=7eGmDWNOa>\_ZTe}GI_B5	}7.^@Ho.6S<MzG(i6ic406 |q2Q55-bhtK	HnvHG$*9^u5&SS6SpU	'EdHz;EjJ
&H<A3(ThttpHL=ve ^(3T{Fa~QjQ2:4*N>,u%ob  avgt  100   23.582 ± 0.140  ns/op

Benchmark result is saved to http_128_0.75_7.csv
