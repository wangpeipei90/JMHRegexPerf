# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = x6!7LLs-A1c$&RA8s@behr`Bih;0\Ln^v?zUb06\1Pa
rJ9Mu0Z
x,S$Dc)4O:8OfE:<qdxu/K	?%<}XAjee7p$ }>SqQ-^%eGurZpWIbu|NB9@h#?wtd3OmF)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 902.263 ns/op
# Warmup Iteration   2: 898.534 ns/op
# Warmup Iteration   3: 895.975 ns/op
# Warmup Iteration   4: 894.485 ns/op
# Warmup Iteration   5: 892.511 ns/op
Iteration   1: 852.927 ns/op
Iteration   2: 816.652 ns/op
Iteration   3: 816.740 ns/op
Iteration   4: 816.811 ns/op
Iteration   5: 824.416 ns/op
Iteration   6: 816.729 ns/op
Iteration   7: 818.242 ns/op
Iteration   8: 817.462 ns/op
Iteration   9: 817.521 ns/op
Iteration  10: 827.416 ns/op
Iteration  11: 817.027 ns/op
Iteration  12: 816.619 ns/op
Iteration  13: 816.663 ns/op
Iteration  14: 816.656 ns/op
Iteration  15: 829.820 ns/op
Iteration  16: 816.713 ns/op
Iteration  17: 816.671 ns/op
Iteration  18: 816.616 ns/op
Iteration  19: 816.604 ns/op
Iteration  20: 834.579 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 903.156 ns/op
# Warmup Iteration   2: 896.352 ns/op
# Warmup Iteration   3: 893.090 ns/op
# Warmup Iteration   4: 892.977 ns/op
# Warmup Iteration   5: 892.943 ns/op
Iteration   1: 855.141 ns/op
Iteration   2: 819.490 ns/op
Iteration   3: 819.716 ns/op
Iteration   4: 819.590 ns/op
Iteration   5: 826.777 ns/op
Iteration   6: 819.696 ns/op
Iteration   7: 819.549 ns/op
Iteration   8: 821.056 ns/op
Iteration   9: 819.606 ns/op
Iteration  10: 829.438 ns/op
Iteration  11: 819.115 ns/op
Iteration  12: 819.452 ns/op
Iteration  13: 819.267 ns/op
Iteration  14: 819.416 ns/op
Iteration  15: 832.481 ns/op
Iteration  16: 819.199 ns/op
Iteration  17: 819.434 ns/op
Iteration  18: 819.391 ns/op
Iteration  19: 820.757 ns/op
Iteration  20: 838.000 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 906.455 ns/op
# Warmup Iteration   2: 894.650 ns/op
# Warmup Iteration   3: 890.714 ns/op
# Warmup Iteration   4: 890.185 ns/op
# Warmup Iteration   5: 890.426 ns/op
Iteration   1: 852.312 ns/op
Iteration   2: 816.479 ns/op
Iteration   3: 816.469 ns/op
Iteration   4: 816.494 ns/op
Iteration   5: 824.456 ns/op
Iteration   6: 816.645 ns/op
Iteration   7: 816.652 ns/op
Iteration   8: 818.004 ns/op
Iteration   9: 816.584 ns/op
Iteration  10: 826.434 ns/op
Iteration  11: 816.473 ns/op
Iteration  12: 816.755 ns/op
Iteration  13: 816.704 ns/op
Iteration  14: 816.612 ns/op
Iteration  15: 830.014 ns/op
Iteration  16: 817.168 ns/op
Iteration  17: 817.530 ns/op
Iteration  18: 817.305 ns/op
Iteration  19: 817.600 ns/op
Iteration  20: 836.523 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 902.411 ns/op
# Warmup Iteration   2: 894.021 ns/op
# Warmup Iteration   3: 892.829 ns/op
# Warmup Iteration   4: 892.400 ns/op
# Warmup Iteration   5: 892.548 ns/op
Iteration   1: 851.502 ns/op
Iteration   2: 818.218 ns/op
Iteration   3: 818.099 ns/op
Iteration   4: 818.269 ns/op
Iteration   5: 821.931 ns/op
Iteration   6: 821.853 ns/op
Iteration   7: 818.061 ns/op
Iteration   8: 818.177 ns/op
Iteration   9: 818.022 ns/op
Iteration  10: 828.401 ns/op
Iteration  11: 817.679 ns/op
Iteration  12: 817.923 ns/op
Iteration  13: 817.890 ns/op
Iteration  14: 818.152 ns/op
Iteration  15: 831.627 ns/op
Iteration  16: 817.661 ns/op
Iteration  17: 818.015 ns/op
Iteration  18: 818.057 ns/op
Iteration  19: 818.148 ns/op
Iteration  20: 835.641 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 899.958 ns/op
# Warmup Iteration   2: 892.785 ns/op
# Warmup Iteration   3: 890.829 ns/op
# Warmup Iteration   4: 890.593 ns/op
# Warmup Iteration   5: 890.868 ns/op
Iteration   1: 848.787 ns/op
Iteration   2: 817.222 ns/op
Iteration   3: 817.257 ns/op
Iteration   4: 817.088 ns/op
Iteration   5: 825.094 ns/op
Iteration   6: 816.957 ns/op
Iteration   7: 816.979 ns/op
Iteration   8: 817.218 ns/op
Iteration   9: 816.859 ns/op
Iteration  10: 827.228 ns/op
Iteration  11: 817.194 ns/op
Iteration  12: 817.107 ns/op
Iteration  13: 817.207 ns/op
Iteration  14: 817.251 ns/op
Iteration  15: 830.063 ns/op
Iteration  16: 816.994 ns/op
Iteration  17: 817.151 ns/op
Iteration  18: 817.084 ns/op
Iteration  19: 817.004 ns/op
Iteration  20: 834.986 ns/op


Result "benchmark.StringContains.regexMatches":
  821.887 ±(99.9%) 2.972 ns/op [Average]
  (min, avg, max) = (816.469, 821.887, 855.141), stdev = 8.763
  CI (99.9%): [818.915, 824.859] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = x6!7LLs-A1c$&RA8s@behr`Bih;0\Ln^v?zUb06\1Pa
rJ9Mu0Z
x,S$Dc)4O:8OfE:<qdxu/K	?%<}XAjee7p$ }>SqQ-^%eGurZpWIbu|NB9@h#?wtd3OmF)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.471 ns/op
# Warmup Iteration   2: 24.629 ns/op
# Warmup Iteration   3: 24.583 ns/op
# Warmup Iteration   4: 24.574 ns/op
# Warmup Iteration   5: 24.612 ns/op
Iteration   1: 24.585 ns/op
Iteration   2: 24.583 ns/op
Iteration   3: 24.583 ns/op
Iteration   4: 24.591 ns/op
Iteration   5: 24.570 ns/op
Iteration   6: 24.589 ns/op
Iteration   7: 24.582 ns/op
Iteration   8: 24.585 ns/op
Iteration   9: 24.602 ns/op
Iteration  10: 24.572 ns/op
Iteration  11: 24.586 ns/op
Iteration  12: 24.580 ns/op
Iteration  13: 24.587 ns/op
Iteration  14: 24.605 ns/op
Iteration  15: 24.601 ns/op
Iteration  16: 24.586 ns/op
Iteration  17: 24.585 ns/op
Iteration  18: 24.572 ns/op
Iteration  19: 24.597 ns/op
Iteration  20: 24.580 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.475 ns/op
# Warmup Iteration   2: 24.636 ns/op
# Warmup Iteration   3: 24.581 ns/op
# Warmup Iteration   4: 24.595 ns/op
# Warmup Iteration   5: 24.603 ns/op
Iteration   1: 24.589 ns/op
Iteration   2: 24.576 ns/op
Iteration   3: 24.574 ns/op
Iteration   4: 24.597 ns/op
Iteration   5: 24.584 ns/op
Iteration   6: 24.579 ns/op
Iteration   7: 24.574 ns/op
Iteration   8: 24.575 ns/op
Iteration   9: 24.574 ns/op
Iteration  10: 24.597 ns/op
Iteration  11: 24.578 ns/op
Iteration  12: 24.575 ns/op
Iteration  13: 24.586 ns/op
Iteration  14: 24.580 ns/op
Iteration  15: 24.574 ns/op
Iteration  16: 24.574 ns/op
Iteration  17: 24.586 ns/op
Iteration  18: 24.573 ns/op
Iteration  19: 24.576 ns/op
Iteration  20: 24.581 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.473 ns/op
# Warmup Iteration   2: 24.626 ns/op
# Warmup Iteration   3: 25.309 ns/op
# Warmup Iteration   4: 25.310 ns/op
# Warmup Iteration   5: 25.304 ns/op
Iteration   1: 25.298 ns/op
Iteration   2: 25.284 ns/op
Iteration   3: 25.305 ns/op
Iteration   4: 25.301 ns/op
Iteration   5: 25.285 ns/op
Iteration   6: 25.297 ns/op
Iteration   7: 25.309 ns/op
Iteration   8: 25.338 ns/op
Iteration   9: 25.298 ns/op
Iteration  10: 25.309 ns/op
Iteration  11: 25.282 ns/op
Iteration  12: 25.287 ns/op
Iteration  13: 25.304 ns/op
Iteration  14: 25.278 ns/op
Iteration  15: 25.293 ns/op
Iteration  16: 25.299 ns/op
Iteration  17: 25.310 ns/op
Iteration  18: 25.304 ns/op
Iteration  19: 25.325 ns/op
Iteration  20: 25.301 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.356 ns/op
# Warmup Iteration   2: 24.622 ns/op
# Warmup Iteration   3: 24.565 ns/op
# Warmup Iteration   4: 24.571 ns/op
# Warmup Iteration   5: 24.563 ns/op
Iteration   1: 24.565 ns/op
Iteration   2: 24.569 ns/op
Iteration   3: 24.564 ns/op
Iteration   4: 24.564 ns/op
Iteration   5: 24.585 ns/op
Iteration   6: 24.564 ns/op
Iteration   7: 24.563 ns/op
Iteration   8: 24.572 ns/op
Iteration   9: 24.565 ns/op
Iteration  10: 24.563 ns/op
Iteration  11: 24.565 ns/op
Iteration  12: 24.563 ns/op
Iteration  13: 24.565 ns/op
Iteration  14: 24.562 ns/op
Iteration  15: 24.570 ns/op
Iteration  16: 24.564 ns/op
Iteration  17: 24.564 ns/op
Iteration  18: 24.564 ns/op
Iteration  19: 24.563 ns/op
Iteration  20: 24.565 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.467 ns/op
# Warmup Iteration   2: 24.629 ns/op
# Warmup Iteration   3: 24.579 ns/op
# Warmup Iteration   4: 24.578 ns/op
# Warmup Iteration   5: 24.571 ns/op
Iteration   1: 24.583 ns/op
Iteration   2: 24.583 ns/op
Iteration   3: 24.578 ns/op
Iteration   4: 24.593 ns/op
Iteration   5: 24.581 ns/op
Iteration   6: 24.579 ns/op
Iteration   7: 24.577 ns/op
Iteration   8: 24.583 ns/op
Iteration   9: 24.571 ns/op
Iteration  10: 24.570 ns/op
Iteration  11: 24.571 ns/op
Iteration  12: 24.585 ns/op
Iteration  13: 24.579 ns/op
Iteration  14: 24.590 ns/op
Iteration  15: 24.572 ns/op
Iteration  16: 24.582 ns/op
Iteration  17: 24.579 ns/op
Iteration  18: 24.582 ns/op
Iteration  19: 24.584 ns/op
Iteration  20: 24.577 ns/op


Result "benchmark.StringContains.stringContains":
  24.722 ±(99.9%) 0.099 ns/op [Average]
  (min, avg, max) = (24.562, 24.722, 25.338), stdev = 0.291
  CI (99.9%): [24.624, 24.821] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  x6!7LLs-A1c$&RA8s@behr`Bih;0\Ln^v?zUb06\1Pa
rJ9Mu0Z
x,S$Dc)4O:8OfE:<qdxu/K	?%<}XAjee7p$ }>SqQ-^%eGurZpWIbu|NB9@h#?wtd3OmF  avgt  100  821.887 ± 2.972  ns/op
StringContains.stringContains     http  x6!7LLs-A1c$&RA8s@behr`Bih;0\Ln^v?zUb06\1Pa
rJ9Mu0Z
x,S$Dc)4O:8OfE:<qdxu/K	?%<}XAjee7p$ }>SqQ-^%eGurZpWIbu|NB9@h#?wtd3OmF  avgt  100   24.722 ± 0.099  ns/op

Benchmark result is saved to http_128_1_5.csv
