# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = kX <lPC!)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 185.081 ns/op
# Warmup Iteration   2: 104.995 ns/op
# Warmup Iteration   3: 99.709 ns/op
# Warmup Iteration   4: 98.977 ns/op
# Warmup Iteration   5: 100.375 ns/op
Iteration   1: 97.298 ns/op
Iteration   2: 96.903 ns/op
Iteration   3: 97.400 ns/op
Iteration   4: 97.006 ns/op
Iteration   5: 97.277 ns/op
Iteration   6: 96.722 ns/op
Iteration   7: 96.567 ns/op
Iteration   8: 96.704 ns/op
Iteration   9: 96.558 ns/op
Iteration  10: 96.779 ns/op
Iteration  11: 96.757 ns/op
Iteration  12: 96.629 ns/op
Iteration  13: 96.795 ns/op
Iteration  14: 96.698 ns/op
Iteration  15: 97.109 ns/op
Iteration  16: 98.474 ns/op
Iteration  17: 96.958 ns/op
Iteration  18: 97.137 ns/op
Iteration  19: 96.893 ns/op
Iteration  20: 96.950 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 177.580 ns/op
# Warmup Iteration   2: 102.764 ns/op
# Warmup Iteration   3: 99.718 ns/op
# Warmup Iteration   4: 99.673 ns/op
# Warmup Iteration   5: 100.119 ns/op
Iteration   1: 97.762 ns/op
Iteration   2: 97.185 ns/op
Iteration   3: 97.658 ns/op
Iteration   4: 97.103 ns/op
Iteration   5: 97.727 ns/op
Iteration   6: 97.251 ns/op
Iteration   7: 96.844 ns/op
Iteration   8: 97.736 ns/op
Iteration   9: 96.854 ns/op
Iteration  10: 97.128 ns/op
Iteration  11: 97.176 ns/op
Iteration  12: 96.963 ns/op
Iteration  13: 97.285 ns/op
Iteration  14: 96.906 ns/op
Iteration  15: 97.187 ns/op
Iteration  16: 97.300 ns/op
Iteration  17: 97.163 ns/op
Iteration  18: 97.467 ns/op
Iteration  19: 97.045 ns/op
Iteration  20: 97.556 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 176.975 ns/op
# Warmup Iteration   2: 102.616 ns/op
# Warmup Iteration   3: 99.127 ns/op
# Warmup Iteration   4: 99.454 ns/op
# Warmup Iteration   5: 98.531 ns/op
Iteration   1: 97.244 ns/op
Iteration   2: 97.239 ns/op
Iteration   3: 97.124 ns/op
Iteration   4: 96.637 ns/op
Iteration   5: 97.166 ns/op
Iteration   6: 96.690 ns/op
Iteration   7: 96.333 ns/op
Iteration   8: 96.474 ns/op
Iteration   9: 96.543 ns/op
Iteration  10: 96.378 ns/op
Iteration  11: 96.459 ns/op
Iteration  12: 96.281 ns/op
Iteration  13: 96.480 ns/op
Iteration  14: 96.573 ns/op
Iteration  15: 96.967 ns/op
Iteration  16: 96.647 ns/op
Iteration  17: 96.392 ns/op
Iteration  18: 96.789 ns/op
Iteration  19: 96.848 ns/op
Iteration  20: 96.531 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 177.409 ns/op
# Warmup Iteration   2: 104.952 ns/op
# Warmup Iteration   3: 100.214 ns/op
# Warmup Iteration   4: 99.367 ns/op
# Warmup Iteration   5: 101.234 ns/op
Iteration   1: 98.163 ns/op
Iteration   2: 97.650 ns/op
Iteration   3: 98.305 ns/op
Iteration   4: 97.878 ns/op
Iteration   5: 98.200 ns/op
Iteration   6: 97.521 ns/op
Iteration   7: 97.544 ns/op
Iteration   8: 97.646 ns/op
Iteration   9: 97.360 ns/op
Iteration  10: 97.718 ns/op
Iteration  11: 97.448 ns/op
Iteration  12: 97.717 ns/op
Iteration  13: 97.745 ns/op
Iteration  14: 97.385 ns/op
Iteration  15: 97.745 ns/op
Iteration  16: 97.401 ns/op
Iteration  17: 97.755 ns/op
Iteration  18: 98.073 ns/op
Iteration  19: 97.601 ns/op
Iteration  20: 98.113 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 177.531 ns/op
# Warmup Iteration   2: 102.888 ns/op
# Warmup Iteration   3: 99.457 ns/op
# Warmup Iteration   4: 98.888 ns/op
# Warmup Iteration   5: 99.329 ns/op
Iteration   1: 97.772 ns/op
Iteration   2: 96.919 ns/op
Iteration   3: 97.349 ns/op
Iteration   4: 96.858 ns/op
Iteration   5: 97.239 ns/op
Iteration   6: 97.451 ns/op
Iteration   7: 96.572 ns/op
Iteration   8: 96.734 ns/op
Iteration   9: 96.587 ns/op
Iteration  10: 96.738 ns/op
Iteration  11: 96.768 ns/op
Iteration  12: 96.578 ns/op
Iteration  13: 96.756 ns/op
Iteration  14: 97.565 ns/op
Iteration  15: 96.609 ns/op
Iteration  16: 97.059 ns/op
Iteration  17: 96.607 ns/op
Iteration  18: 97.182 ns/op
Iteration  19: 97.128 ns/op
Iteration  20: 96.712 ns/op


Result "benchmark.StringContains.regexMatches":
  97.129 ±(99.9%) 0.167 ns/op [Average]
  (min, avg, max) = (96.281, 97.129, 98.474), stdev = 0.492
  CI (99.9%): [96.962, 97.295] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = kX <lPC!)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.448 ns/op
# Warmup Iteration   2: 9.055 ns/op
# Warmup Iteration   3: 8.969 ns/op
# Warmup Iteration   4: 8.975 ns/op
# Warmup Iteration   5: 8.966 ns/op
Iteration   1: 8.965 ns/op
Iteration   2: 8.964 ns/op
Iteration   3: 8.970 ns/op
Iteration   4: 8.965 ns/op
Iteration   5: 8.967 ns/op
Iteration   6: 8.966 ns/op
Iteration   7: 8.965 ns/op
Iteration   8: 8.970 ns/op
Iteration   9: 8.965 ns/op
Iteration  10: 8.964 ns/op
Iteration  11: 8.968 ns/op
Iteration  12: 8.969 ns/op
Iteration  13: 8.965 ns/op
Iteration  14: 8.967 ns/op
Iteration  15: 8.965 ns/op
Iteration  16: 8.967 ns/op
Iteration  17: 8.969 ns/op
Iteration  18: 8.969 ns/op
Iteration  19: 8.969 ns/op
Iteration  20: 8.968 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.426 ns/op
# Warmup Iteration   2: 9.055 ns/op
# Warmup Iteration   3: 8.966 ns/op
# Warmup Iteration   4: 8.965 ns/op
# Warmup Iteration   5: 8.965 ns/op
Iteration   1: 8.964 ns/op
Iteration   2: 8.968 ns/op
Iteration   3: 8.966 ns/op
Iteration   4: 8.967 ns/op
Iteration   5: 8.967 ns/op
Iteration   6: 8.964 ns/op
Iteration   7: 8.965 ns/op
Iteration   8: 8.968 ns/op
Iteration   9: 8.968 ns/op
Iteration  10: 8.966 ns/op
Iteration  11: 8.967 ns/op
Iteration  12: 8.968 ns/op
Iteration  13: 8.966 ns/op
Iteration  14: 8.966 ns/op
Iteration  15: 8.966 ns/op
Iteration  16: 8.968 ns/op
Iteration  17: 8.967 ns/op
Iteration  18: 8.968 ns/op
Iteration  19: 8.964 ns/op
Iteration  20: 8.964 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.446 ns/op
# Warmup Iteration   2: 9.056 ns/op
# Warmup Iteration   3: 8.965 ns/op
# Warmup Iteration   4: 8.965 ns/op
# Warmup Iteration   5: 8.964 ns/op
Iteration   1: 8.964 ns/op
Iteration   2: 8.964 ns/op
Iteration   3: 8.967 ns/op
Iteration   4: 8.967 ns/op
Iteration   5: 8.964 ns/op
Iteration   6: 8.965 ns/op
Iteration   7: 8.963 ns/op
Iteration   8: 8.964 ns/op
Iteration   9: 8.965 ns/op
Iteration  10: 8.965 ns/op
Iteration  11: 8.965 ns/op
Iteration  12: 8.965 ns/op
Iteration  13: 8.971 ns/op
Iteration  14: 8.964 ns/op
Iteration  15: 8.965 ns/op
Iteration  16: 8.964 ns/op
Iteration  17: 8.963 ns/op
Iteration  18: 8.971 ns/op
Iteration  19: 8.964 ns/op
Iteration  20: 8.966 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.422 ns/op
# Warmup Iteration   2: 9.052 ns/op
# Warmup Iteration   3: 8.961 ns/op
# Warmup Iteration   4: 8.961 ns/op
# Warmup Iteration   5: 8.960 ns/op
Iteration   1: 8.961 ns/op
Iteration   2: 8.958 ns/op
Iteration   3: 8.960 ns/op
Iteration   4: 8.960 ns/op
Iteration   5: 8.958 ns/op
Iteration   6: 8.960 ns/op
Iteration   7: 8.958 ns/op
Iteration   8: 8.959 ns/op
Iteration   9: 8.957 ns/op
Iteration  10: 8.960 ns/op
Iteration  11: 8.963 ns/op
Iteration  12: 8.961 ns/op
Iteration  13: 8.960 ns/op
Iteration  14: 8.959 ns/op
Iteration  15: 8.964 ns/op
Iteration  16: 8.963 ns/op
Iteration  17: 8.964 ns/op
Iteration  18: 8.960 ns/op
Iteration  19: 8.962 ns/op
Iteration  20: 8.962 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.451 ns/op
# Warmup Iteration   2: 9.052 ns/op
# Warmup Iteration   3: 8.967 ns/op
# Warmup Iteration   4: 8.963 ns/op
# Warmup Iteration   5: 8.965 ns/op
Iteration   1: 8.964 ns/op
Iteration   2: 8.964 ns/op
Iteration   3: 8.963 ns/op
Iteration   4: 8.963 ns/op
Iteration   5: 8.965 ns/op
Iteration   6: 8.964 ns/op
Iteration   7: 8.964 ns/op
Iteration   8: 8.967 ns/op
Iteration   9: 8.965 ns/op
Iteration  10: 8.967 ns/op
Iteration  11: 8.965 ns/op
Iteration  12: 8.964 ns/op
Iteration  13: 8.964 ns/op
Iteration  14: 8.967 ns/op
Iteration  15: 8.964 ns/op
Iteration  16: 8.964 ns/op
Iteration  17: 8.965 ns/op
Iteration  18: 8.964 ns/op
Iteration  19: 8.963 ns/op
Iteration  20: 8.963 ns/op


Result "benchmark.StringContains.stringContains":
  8.965 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (8.957, 8.965, 8.971), stdev = 0.003
  CI (99.9%): [8.964, 8.966] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt   Score   Error  Units
StringContains.regexMatches       http  kX <lPC!  avgt  100  97.129 ± 0.167  ns/op
StringContains.stringContains     http  kX <lPC!  avgt  100   8.965 ± 0.001  ns/op

Benchmark result is saved to http_8_1_8.csv
