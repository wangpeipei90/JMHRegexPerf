# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = L^[(eia,CK#!2]iq3S~Xi5$3h#BYdSv}$H@&4&7pd;#nowUH1j>NIV~+y[!k<x(f)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 521.790 ns/op
# Warmup Iteration   2: 516.103 ns/op
# Warmup Iteration   3: 515.936 ns/op
# Warmup Iteration   4: 444.636 ns/op
# Warmup Iteration   5: 432.659 ns/op
Iteration   1: 438.384 ns/op
Iteration   2: 434.761 ns/op
Iteration   3: 433.248 ns/op
Iteration   4: 438.331 ns/op
Iteration   5: 432.807 ns/op
Iteration   6: 440.972 ns/op
Iteration   7: 432.478 ns/op
Iteration   8: 432.577 ns/op
Iteration   9: 442.728 ns/op
Iteration  10: 432.437 ns/op
Iteration  11: 437.121 ns/op
Iteration  12: 440.743 ns/op
Iteration  13: 432.449 ns/op
Iteration  14: 435.101 ns/op
Iteration  15: 433.559 ns/op
Iteration  16: 432.357 ns/op
Iteration  17: 435.481 ns/op
Iteration  18: 432.390 ns/op
Iteration  19: 432.484 ns/op
Iteration  20: 434.489 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 473.117 ns/op
# Warmup Iteration   2: 464.613 ns/op
# Warmup Iteration   3: 457.089 ns/op
# Warmup Iteration   4: 385.830 ns/op
# Warmup Iteration   5: 386.687 ns/op
Iteration   1: 388.381 ns/op
Iteration   2: 385.689 ns/op
Iteration   3: 390.624 ns/op
Iteration   4: 385.704 ns/op
Iteration   5: 392.160 ns/op
Iteration   6: 385.828 ns/op
Iteration   7: 394.371 ns/op
Iteration   8: 385.757 ns/op
Iteration   9: 385.726 ns/op
Iteration  10: 396.493 ns/op
Iteration  11: 385.832 ns/op
Iteration  12: 387.683 ns/op
Iteration  13: 385.649 ns/op
Iteration  14: 385.684 ns/op
Iteration  15: 387.521 ns/op
Iteration  16: 385.779 ns/op
Iteration  17: 387.825 ns/op
Iteration  18: 385.644 ns/op
Iteration  19: 385.757 ns/op
Iteration  20: 387.772 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 468.156 ns/op
# Warmup Iteration   2: 461.514 ns/op
# Warmup Iteration   3: 446.972 ns/op
# Warmup Iteration   4: 385.853 ns/op
# Warmup Iteration   5: 389.719 ns/op
Iteration   1: 385.881 ns/op
Iteration   2: 385.758 ns/op
Iteration   3: 390.450 ns/op
Iteration   4: 385.658 ns/op
Iteration   5: 392.207 ns/op
Iteration   6: 385.949 ns/op
Iteration   7: 394.355 ns/op
Iteration   8: 385.786 ns/op
Iteration   9: 385.768 ns/op
Iteration  10: 397.363 ns/op
Iteration  11: 386.829 ns/op
Iteration  12: 390.306 ns/op
Iteration  13: 385.896 ns/op
Iteration  14: 385.743 ns/op
Iteration  15: 387.391 ns/op
Iteration  16: 385.734 ns/op
Iteration  17: 387.448 ns/op
Iteration  18: 385.727 ns/op
Iteration  19: 385.743 ns/op
Iteration  20: 387.427 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 473.044 ns/op
# Warmup Iteration   2: 463.612 ns/op
# Warmup Iteration   3: 448.561 ns/op
# Warmup Iteration   4: 386.058 ns/op
# Warmup Iteration   5: 389.531 ns/op
Iteration   1: 385.886 ns/op
Iteration   2: 385.940 ns/op
Iteration   3: 390.764 ns/op
Iteration   4: 385.852 ns/op
Iteration   5: 392.296 ns/op
Iteration   6: 386.017 ns/op
Iteration   7: 394.496 ns/op
Iteration   8: 385.964 ns/op
Iteration   9: 385.881 ns/op
Iteration  10: 396.739 ns/op
Iteration  11: 385.917 ns/op
Iteration  12: 388.243 ns/op
Iteration  13: 385.905 ns/op
Iteration  14: 385.900 ns/op
Iteration  15: 388.103 ns/op
Iteration  16: 386.601 ns/op
Iteration  17: 388.067 ns/op
Iteration  18: 385.879 ns/op
Iteration  19: 385.850 ns/op
Iteration  20: 387.633 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 475.077 ns/op
# Warmup Iteration   2: 462.693 ns/op
# Warmup Iteration   3: 452.186 ns/op
# Warmup Iteration   4: 391.174 ns/op
# Warmup Iteration   5: 391.445 ns/op
Iteration   1: 391.963 ns/op
Iteration   2: 388.672 ns/op
Iteration   3: 393.653 ns/op
Iteration   4: 388.708 ns/op
Iteration   5: 395.242 ns/op
Iteration   6: 388.674 ns/op
Iteration   7: 397.340 ns/op
Iteration   8: 388.750 ns/op
Iteration   9: 388.664 ns/op
Iteration  10: 399.627 ns/op
Iteration  11: 388.838 ns/op
Iteration  12: 391.003 ns/op
Iteration  13: 388.717 ns/op
Iteration  14: 388.698 ns/op
Iteration  15: 390.472 ns/op
Iteration  16: 388.694 ns/op
Iteration  17: 390.594 ns/op
Iteration  18: 388.692 ns/op
Iteration  19: 388.656 ns/op
Iteration  20: 392.194 ns/op


Result "benchmark.StringContains.regexMatches":
  397.940 ±(99.9%) 6.462 ns/op [Average]
  (min, avg, max) = (385.644, 397.940, 442.728), stdev = 19.054
  CI (99.9%): [391.478, 404.402] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = L^[(eia,CK#!2]iq3S~Xi5$3h#BYdSv}$H@&4&7pd;#nowUH1j>NIV~+y[!k<x(f)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.455 ns/op
# Warmup Iteration   2: 16.414 ns/op
# Warmup Iteration   3: 16.020 ns/op
# Warmup Iteration   4: 16.021 ns/op
# Warmup Iteration   5: 16.018 ns/op
Iteration   1: 16.019 ns/op
Iteration   2: 16.019 ns/op
Iteration   3: 16.018 ns/op
Iteration   4: 16.019 ns/op
Iteration   5: 16.020 ns/op
Iteration   6: 16.020 ns/op
Iteration   7: 16.019 ns/op
Iteration   8: 16.019 ns/op
Iteration   9: 16.018 ns/op
Iteration  10: 16.019 ns/op
Iteration  11: 16.020 ns/op
Iteration  12: 17.513 ns/op
Iteration  13: 17.515 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.511 ns/op
Iteration  16: 17.516 ns/op
Iteration  17: 17.516 ns/op
Iteration  18: 17.515 ns/op
Iteration  19: 17.517 ns/op
Iteration  20: 17.517 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.395 ns/op
# Warmup Iteration   2: 15.679 ns/op
# Warmup Iteration   3: 16.045 ns/op
# Warmup Iteration   4: 16.044 ns/op
# Warmup Iteration   5: 16.046 ns/op
Iteration   1: 16.043 ns/op
Iteration   2: 16.043 ns/op
Iteration   3: 16.043 ns/op
Iteration   4: 16.045 ns/op
Iteration   5: 16.042 ns/op
Iteration   6: 16.043 ns/op
Iteration   7: 16.042 ns/op
Iteration   8: 16.043 ns/op
Iteration   9: 16.043 ns/op
Iteration  10: 16.043 ns/op
Iteration  11: 16.043 ns/op
Iteration  12: 16.043 ns/op
Iteration  13: 16.044 ns/op
Iteration  14: 16.043 ns/op
Iteration  15: 16.047 ns/op
Iteration  16: 16.045 ns/op
Iteration  17: 16.043 ns/op
Iteration  18: 16.044 ns/op
Iteration  19: 16.045 ns/op
Iteration  20: 16.043 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.463 ns/op
# Warmup Iteration   2: 15.731 ns/op
# Warmup Iteration   3: 16.023 ns/op
# Warmup Iteration   4: 16.025 ns/op
# Warmup Iteration   5: 16.032 ns/op
Iteration   1: 16.026 ns/op
Iteration   2: 16.024 ns/op
Iteration   3: 16.314 ns/op
Iteration   4: 16.025 ns/op
Iteration   5: 16.037 ns/op
Iteration   6: 16.023 ns/op
Iteration   7: 16.026 ns/op
Iteration   8: 16.024 ns/op
Iteration   9: 16.022 ns/op
Iteration  10: 16.024 ns/op
Iteration  11: 16.023 ns/op
Iteration  12: 17.518 ns/op
Iteration  13: 17.501 ns/op
Iteration  14: 17.512 ns/op
Iteration  15: 17.517 ns/op
Iteration  16: 17.513 ns/op
Iteration  17: 17.521 ns/op
Iteration  18: 17.517 ns/op
Iteration  19: 17.514 ns/op
Iteration  20: 17.519 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.379 ns/op
# Warmup Iteration   2: 15.708 ns/op
# Warmup Iteration   3: 15.996 ns/op
# Warmup Iteration   4: 15.994 ns/op
# Warmup Iteration   5: 15.994 ns/op
Iteration   1: 15.998 ns/op
Iteration   2: 15.995 ns/op
Iteration   3: 15.993 ns/op
Iteration   4: 15.996 ns/op
Iteration   5: 15.993 ns/op
Iteration   6: 15.992 ns/op
Iteration   7: 15.998 ns/op
Iteration   8: 15.997 ns/op
Iteration   9: 15.993 ns/op
Iteration  10: 15.999 ns/op
Iteration  11: 15.994 ns/op
Iteration  12: 15.997 ns/op
Iteration  13: 15.998 ns/op
Iteration  14: 15.996 ns/op
Iteration  15: 16.000 ns/op
Iteration  16: 15.999 ns/op
Iteration  17: 15.998 ns/op
Iteration  18: 15.995 ns/op
Iteration  19: 15.996 ns/op
Iteration  20: 15.994 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.469 ns/op
# Warmup Iteration   2: 15.733 ns/op
# Warmup Iteration   3: 16.037 ns/op
# Warmup Iteration   4: 16.027 ns/op
# Warmup Iteration   5: 16.025 ns/op
Iteration   1: 16.028 ns/op
Iteration   2: 16.027 ns/op
Iteration   3: 16.028 ns/op
Iteration   4: 16.027 ns/op
Iteration   5: 16.029 ns/op
Iteration   6: 16.027 ns/op
Iteration   7: 16.028 ns/op
Iteration   8: 16.028 ns/op
Iteration   9: 16.026 ns/op
Iteration  10: 16.026 ns/op
Iteration  11: 16.027 ns/op
Iteration  12: 17.513 ns/op
Iteration  13: 17.520 ns/op
Iteration  14: 17.520 ns/op
Iteration  15: 17.519 ns/op
Iteration  16: 17.516 ns/op
Iteration  17: 17.518 ns/op
Iteration  18: 17.519 ns/op
Iteration  19: 17.516 ns/op
Iteration  20: 17.522 ns/op


Result "benchmark.StringContains.stringContains":
  16.428 ±(99.9%) 0.226 ns/op [Average]
  (min, avg, max) = (15.992, 16.428, 17.522), stdev = 0.666
  CI (99.9%): [16.202, 16.654] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  L^[(eia,CK#!2]iq3S~Xi5$3h#BYdSv}$H@&4&7pd;#nowUH1j>NIV~+y[!k<x(f  avgt  100  397.940 ± 6.462  ns/op
StringContains.stringContains     http  L^[(eia,CK#!2]iq3S~Xi5$3h#BYdSv}$H@&4&7pd;#nowUH1j>NIV~+y[!k<x(f  avgt  100   16.428 ± 0.226  ns/op

Benchmark result is saved to http_64_1_14.csv
