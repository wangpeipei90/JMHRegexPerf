# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpb)*9WLitJ}I1:6~J42..:7Ebe\[CCB
#b'wd|bzdib 	QK;:$-*#U(O$~!M~@|E<Ue.Sw6<.topjN~@;ll>"R@yxy"
Y?L`-txph6\$y#55>WVWCg!X/uO7#Sr)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1569.156 ns/op
# Warmup Iteration   2: 1352.350 ns/op
# Warmup Iteration   3: 1366.726 ns/op
# Warmup Iteration   4: 1365.483 ns/op
# Warmup Iteration   5: 1365.375 ns/op
Iteration   1: 1365.771 ns/op
Iteration   2: 1364.591 ns/op
Iteration   3: 1364.620 ns/op
Iteration   4: 1331.048 ns/op
Iteration   5: 1289.011 ns/op
Iteration   6: 1289.077 ns/op
Iteration   7: 1288.568 ns/op
Iteration   8: 1288.941 ns/op
Iteration   9: 1288.681 ns/op
Iteration  10: 1291.404 ns/op
Iteration  11: 1308.653 ns/op
Iteration  12: 1288.937 ns/op
Iteration  13: 1288.352 ns/op
Iteration  14: 1289.256 ns/op
Iteration  15: 1288.554 ns/op
Iteration  16: 1288.383 ns/op
Iteration  17: 1288.455 ns/op
Iteration  18: 1305.697 ns/op
Iteration  19: 1288.534 ns/op
Iteration  20: 1291.215 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1469.062 ns/op
# Warmup Iteration   2: 1439.810 ns/op
# Warmup Iteration   3: 1489.708 ns/op
# Warmup Iteration   4: 1488.972 ns/op
# Warmup Iteration   5: 1488.156 ns/op
Iteration   1: 1487.834 ns/op
Iteration   2: 1488.077 ns/op
Iteration   3: 1488.018 ns/op
Iteration   4: 1490.442 ns/op
Iteration   5: 1412.689 ns/op
Iteration   6: 1412.192 ns/op
Iteration   7: 1412.087 ns/op
Iteration   8: 1412.764 ns/op
Iteration   9: 1412.042 ns/op
Iteration  10: 1412.064 ns/op
Iteration  11: 1412.518 ns/op
Iteration  12: 1426.064 ns/op
Iteration  13: 1412.814 ns/op
Iteration  14: 1412.658 ns/op
Iteration  15: 1412.505 ns/op
Iteration  16: 1412.509 ns/op
Iteration  17: 1412.343 ns/op
Iteration  18: 1412.020 ns/op
Iteration  19: 1413.871 ns/op
Iteration  20: 1432.610 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1446.809 ns/op
# Warmup Iteration   2: 1312.320 ns/op
# Warmup Iteration   3: 1301.479 ns/op
# Warmup Iteration   4: 1300.753 ns/op
# Warmup Iteration   5: 1300.288 ns/op
Iteration   1: 1301.170 ns/op
Iteration   2: 1301.498 ns/op
Iteration   3: 1305.542 ns/op
Iteration   4: 1223.735 ns/op
Iteration   5: 1223.486 ns/op
Iteration   6: 1223.234 ns/op
Iteration   7: 1223.423 ns/op
Iteration   8: 1223.247 ns/op
Iteration   9: 1223.348 ns/op
Iteration  10: 1237.452 ns/op
Iteration  11: 1221.517 ns/op
Iteration  12: 1222.435 ns/op
Iteration  13: 1222.390 ns/op
Iteration  14: 1222.554 ns/op
Iteration  15: 1223.551 ns/op
Iteration  16: 1223.168 ns/op
Iteration  17: 1246.416 ns/op
Iteration  18: 1223.594 ns/op
Iteration  19: 1223.420 ns/op
Iteration  20: 1223.660 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1462.058 ns/op
# Warmup Iteration   2: 1441.778 ns/op
# Warmup Iteration   3: 1490.603 ns/op
# Warmup Iteration   4: 1488.271 ns/op
# Warmup Iteration   5: 1488.607 ns/op
Iteration   1: 1489.083 ns/op
Iteration   2: 1491.366 ns/op
Iteration   3: 1489.857 ns/op
Iteration   4: 1490.122 ns/op
Iteration   5: 1413.228 ns/op
Iteration   6: 1412.734 ns/op
Iteration   7: 1411.942 ns/op
Iteration   8: 1412.300 ns/op
Iteration   9: 1411.947 ns/op
Iteration  10: 1411.711 ns/op
Iteration  11: 1413.051 ns/op
Iteration  12: 1434.766 ns/op
Iteration  13: 1412.801 ns/op
Iteration  14: 1412.627 ns/op
Iteration  15: 1412.709 ns/op
Iteration  16: 1412.622 ns/op
Iteration  17: 1412.764 ns/op
Iteration  18: 1413.010 ns/op
Iteration  19: 1410.936 ns/op
Iteration  20: 1430.444 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1443.553 ns/op
# Warmup Iteration   2: 1311.685 ns/op
# Warmup Iteration   3: 1340.926 ns/op
# Warmup Iteration   4: 1341.245 ns/op
# Warmup Iteration   5: 1345.937 ns/op
Iteration   1: 1345.712 ns/op
Iteration   2: 1345.821 ns/op
Iteration   3: 1344.991 ns/op
Iteration   4: 1286.630 ns/op
Iteration   5: 1269.969 ns/op
Iteration   6: 1269.285 ns/op
Iteration   7: 1268.713 ns/op
Iteration   8: 1268.844 ns/op
Iteration   9: 1269.730 ns/op
Iteration  10: 1268.770 ns/op
Iteration  11: 1279.977 ns/op
Iteration  12: 1268.052 ns/op
Iteration  13: 1268.384 ns/op
Iteration  14: 1267.179 ns/op
Iteration  15: 1267.284 ns/op
Iteration  16: 1266.450 ns/op
Iteration  17: 1266.563 ns/op
Iteration  18: 1283.547 ns/op
Iteration  19: 1267.397 ns/op
Iteration  20: 1267.993 ns/op


Result "benchmark.StringContains.regexMatches":
  1336.560 ±(99.9%) 28.686 ns/op [Average]
  (min, avg, max) = (1221.517, 1336.560, 1491.366), stdev = 84.581
  CI (99.9%): [1307.874, 1365.246] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpb)*9WLitJ}I1:6~J42..:7Ebe\[CCB
#b'wd|bzdib 	QK;:$-*#U(O$~!M~@|E<Ue.Sw6<.topjN~@;ll>"R@yxy"
Y?L`-txph6\$y#55>WVWCg!X/uO7#Sr)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.345 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.862 ns/op
# Warmup Iteration   4: 9.897 ns/op
# Warmup Iteration   5: 9.873 ns/op
Iteration   1: 9.887 ns/op
Iteration   2: 9.882 ns/op
Iteration   3: 9.885 ns/op
Iteration   4: 9.893 ns/op
Iteration   5: 9.901 ns/op
Iteration   6: 9.875 ns/op
Iteration   7: 9.891 ns/op
Iteration   8: 9.898 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.886 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.900 ns/op
Iteration  14: 9.890 ns/op
Iteration  15: 9.898 ns/op
Iteration  16: 9.894 ns/op
Iteration  17: 9.885 ns/op
Iteration  18: 9.900 ns/op
Iteration  19: 9.897 ns/op
Iteration  20: 9.896 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.472 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.855 ns/op
# Warmup Iteration   4: 9.847 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.849 ns/op
Iteration   2: 9.847 ns/op
Iteration   3: 9.858 ns/op
Iteration   4: 9.847 ns/op
Iteration   5: 9.855 ns/op
Iteration   6: 9.843 ns/op
Iteration   7: 9.853 ns/op
Iteration   8: 9.850 ns/op
Iteration   9: 9.858 ns/op
Iteration  10: 9.845 ns/op
Iteration  11: 9.871 ns/op
Iteration  12: 9.844 ns/op
Iteration  13: 9.855 ns/op
Iteration  14: 9.857 ns/op
Iteration  15: 9.845 ns/op
Iteration  16: 9.849 ns/op
Iteration  17: 9.847 ns/op
Iteration  18: 9.857 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.840 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.485 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.857 ns/op
# Warmup Iteration   5: 9.855 ns/op
Iteration   1: 9.855 ns/op
Iteration   2: 9.860 ns/op
Iteration   3: 9.838 ns/op
Iteration   4: 9.859 ns/op
Iteration   5: 9.836 ns/op
Iteration   6: 9.839 ns/op
Iteration   7: 9.838 ns/op
Iteration   8: 9.840 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.834 ns/op
Iteration  11: 9.851 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.839 ns/op
Iteration  14: 9.853 ns/op
Iteration  15: 9.844 ns/op
Iteration  16: 9.855 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.858 ns/op
Iteration  19: 9.850 ns/op
Iteration  20: 9.850 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.210 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.894 ns/op
# Warmup Iteration   4: 9.899 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.894 ns/op
Iteration   2: 9.875 ns/op
Iteration   3: 9.891 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.881 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.885 ns/op
Iteration   8: 9.893 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.885 ns/op
Iteration  11: 9.888 ns/op
Iteration  12: 9.891 ns/op
Iteration  13: 9.893 ns/op
Iteration  14: 9.891 ns/op
Iteration  15: 9.901 ns/op
Iteration  16: 9.887 ns/op
Iteration  17: 9.896 ns/op
Iteration  18: 9.880 ns/op
Iteration  19: 9.887 ns/op
Iteration  20: 9.889 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.483 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.856 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.874 ns/op
Iteration   1: 9.857 ns/op
Iteration   2: 9.869 ns/op
Iteration   3: 9.883 ns/op
Iteration   4: 9.874 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.878 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.877 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.882 ns/op
Iteration  12: 9.894 ns/op
Iteration  13: 9.882 ns/op
Iteration  14: 9.882 ns/op
Iteration  15: 9.889 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.882 ns/op
Iteration  18: 9.884 ns/op
Iteration  19: 9.886 ns/op
Iteration  20: 9.904 ns/op


Result "benchmark.StringContains.stringContains":
  9.872 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.834, 9.872, 9.904), stdev = 0.020
  CI (99.9%): [9.865, 9.879] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpb)*9WLitJ}I1:6~J42..:7Ebe\[CCB
#b'wd|bzdib 	QK;:$-*#U(O$~!M~@|E<Ue.Sw6<.topjN~@;ll>"R@yxy"
Y?L`-txph6\$y#55>WVWCg!X/uO7#Sr  avgt  100  1336.560 ± 28.686  ns/op
StringContains.stringContains     http  httpb)*9WLitJ}I1:6~J42..:7Ebe\[CCB
#b'wd|bzdib 	QK;:$-*#U(O$~!M~@|E<Ue.Sw6<.topjN~@;ll>"R@yxy"
Y?L`-txph6\$y#55>WVWCg!X/uO7#Sr  avgt  100     9.872 ±  0.007  ns/op

Benchmark result is saved to http_128_0_14.csv
