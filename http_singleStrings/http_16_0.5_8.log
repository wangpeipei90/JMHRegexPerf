# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = *B{iGoS{httpJdkI)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 270.318 ns/op
# Warmup Iteration   2: 218.699 ns/op
# Warmup Iteration   3: 182.861 ns/op
# Warmup Iteration   4: 183.882 ns/op
# Warmup Iteration   5: 184.496 ns/op
Iteration   1: 185.754 ns/op
Iteration   2: 183.521 ns/op
Iteration   3: 184.961 ns/op
Iteration   4: 182.417 ns/op
Iteration   5: 181.951 ns/op
Iteration   6: 181.988 ns/op
Iteration   7: 181.824 ns/op
Iteration   8: 182.132 ns/op
Iteration   9: 180.736 ns/op
Iteration  10: 181.914 ns/op
Iteration  11: 182.143 ns/op
Iteration  12: 181.990 ns/op
Iteration  13: 181.872 ns/op
Iteration  14: 181.398 ns/op
Iteration  15: 181.601 ns/op
Iteration  16: 181.216 ns/op
Iteration  17: 181.488 ns/op
Iteration  18: 183.329 ns/op
Iteration  19: 182.830 ns/op
Iteration  20: 181.635 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 258.108 ns/op
# Warmup Iteration   2: 203.559 ns/op
# Warmup Iteration   3: 181.684 ns/op
# Warmup Iteration   4: 182.230 ns/op
# Warmup Iteration   5: 182.966 ns/op
Iteration   1: 184.056 ns/op
Iteration   2: 185.262 ns/op
Iteration   3: 179.930 ns/op
Iteration   4: 180.633 ns/op
Iteration   5: 180.672 ns/op
Iteration   6: 180.764 ns/op
Iteration   7: 180.657 ns/op
Iteration   8: 180.742 ns/op
Iteration   9: 180.723 ns/op
Iteration  10: 179.903 ns/op
Iteration  11: 180.733 ns/op
Iteration  12: 180.678 ns/op
Iteration  13: 180.739 ns/op
Iteration  14: 180.130 ns/op
Iteration  15: 180.130 ns/op
Iteration  16: 180.179 ns/op
Iteration  17: 180.223 ns/op
Iteration  18: 179.800 ns/op
Iteration  19: 181.454 ns/op
Iteration  20: 180.772 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 279.703 ns/op
# Warmup Iteration   2: 229.726 ns/op
# Warmup Iteration   3: 189.316 ns/op
# Warmup Iteration   4: 189.722 ns/op
# Warmup Iteration   5: 190.617 ns/op
Iteration   1: 187.504 ns/op
Iteration   2: 191.577 ns/op
Iteration   3: 192.963 ns/op
Iteration   4: 188.395 ns/op
Iteration   5: 188.314 ns/op
Iteration   6: 188.479 ns/op
Iteration   7: 187.428 ns/op
Iteration   8: 188.609 ns/op
Iteration   9: 188.611 ns/op
Iteration  10: 188.602 ns/op
Iteration  11: 190.374 ns/op
Iteration  12: 188.446 ns/op
Iteration  13: 187.612 ns/op
Iteration  14: 191.822 ns/op
Iteration  15: 190.817 ns/op
Iteration  16: 188.039 ns/op
Iteration  17: 188.484 ns/op
Iteration  18: 187.507 ns/op
Iteration  19: 188.466 ns/op
Iteration  20: 188.472 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 256.678 ns/op
# Warmup Iteration   2: 203.220 ns/op
# Warmup Iteration   3: 181.589 ns/op
# Warmup Iteration   4: 182.041 ns/op
# Warmup Iteration   5: 182.791 ns/op
Iteration   1: 183.704 ns/op
Iteration   2: 185.167 ns/op
Iteration   3: 180.080 ns/op
Iteration   4: 180.717 ns/op
Iteration   5: 180.616 ns/op
Iteration   6: 180.487 ns/op
Iteration   7: 180.600 ns/op
Iteration   8: 180.512 ns/op
Iteration   9: 180.458 ns/op
Iteration  10: 179.700 ns/op
Iteration  11: 180.556 ns/op
Iteration  12: 180.554 ns/op
Iteration  13: 180.720 ns/op
Iteration  14: 182.148 ns/op
Iteration  15: 180.075 ns/op
Iteration  16: 180.219 ns/op
Iteration  17: 180.192 ns/op
Iteration  18: 179.671 ns/op
Iteration  19: 180.312 ns/op
Iteration  20: 180.391 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 262.029 ns/op
# Warmup Iteration   2: 208.867 ns/op
# Warmup Iteration   3: 171.868 ns/op
# Warmup Iteration   4: 172.237 ns/op
# Warmup Iteration   5: 172.804 ns/op
Iteration   1: 173.947 ns/op
Iteration   2: 174.501 ns/op
Iteration   3: 170.849 ns/op
Iteration   4: 170.896 ns/op
Iteration   5: 170.079 ns/op
Iteration   6: 171.031 ns/op
Iteration   7: 170.580 ns/op
Iteration   8: 170.970 ns/op
Iteration   9: 171.017 ns/op
Iteration  10: 171.054 ns/op
Iteration  11: 171.255 ns/op
Iteration  12: 171.279 ns/op
Iteration  13: 171.327 ns/op
Iteration  14: 170.378 ns/op
Iteration  15: 170.970 ns/op
Iteration  16: 170.220 ns/op
Iteration  17: 169.951 ns/op
Iteration  18: 170.631 ns/op
Iteration  19: 170.935 ns/op
Iteration  20: 170.930 ns/op


Result "benchmark.StringContains.regexMatches":
  180.851 ±(99.9%) 1.998 ns/op [Average]
  (min, avg, max) = (169.951, 180.851, 192.963), stdev = 5.892
  CI (99.9%): [178.852, 182.849] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = *B{iGoS{httpJdkI)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.854 ns/op
# Warmup Iteration   4: 9.854 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.857 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.893 ns/op
Iteration   4: 9.869 ns/op
Iteration   5: 9.876 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.889 ns/op
Iteration   9: 9.863 ns/op
Iteration  10: 9.872 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.886 ns/op
Iteration  13: 9.882 ns/op
Iteration  14: 9.868 ns/op
Iteration  15: 9.902 ns/op
Iteration  16: 9.876 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.873 ns/op
Iteration  19: 9.882 ns/op
Iteration  20: 9.885 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.855 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.849 ns/op
Iteration   1: 9.852 ns/op
Iteration   2: 9.857 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.844 ns/op
Iteration   5: 9.856 ns/op
Iteration   6: 9.851 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.862 ns/op
Iteration   9: 9.862 ns/op
Iteration  10: 9.854 ns/op
Iteration  11: 9.855 ns/op
Iteration  12: 9.856 ns/op
Iteration  13: 9.853 ns/op
Iteration  14: 9.871 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.856 ns/op
Iteration  17: 9.860 ns/op
Iteration  18: 9.870 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.875 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.469 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.864 ns/op
# Warmup Iteration   4: 9.891 ns/op
# Warmup Iteration   5: 9.882 ns/op
Iteration   1: 9.883 ns/op
Iteration   2: 9.871 ns/op
Iteration   3: 9.859 ns/op
Iteration   4: 9.865 ns/op
Iteration   5: 9.868 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.857 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.872 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.859 ns/op
Iteration  13: 9.867 ns/op
Iteration  14: 9.884 ns/op
Iteration  15: 9.876 ns/op
Iteration  16: 9.871 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.877 ns/op
Iteration  19: 9.904 ns/op
Iteration  20: 9.869 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.219 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.863 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.890 ns/op
Iteration   1: 9.872 ns/op
Iteration   2: 9.878 ns/op
Iteration   3: 9.868 ns/op
Iteration   4: 9.866 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.877 ns/op
Iteration   7: 9.860 ns/op
Iteration   8: 9.867 ns/op
Iteration   9: 9.874 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.892 ns/op
Iteration  12: 9.854 ns/op
Iteration  13: 9.874 ns/op
Iteration  14: 9.872 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.860 ns/op
Iteration  18: 9.870 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.858 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.218 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.894 ns/op
# Warmup Iteration   4: 9.880 ns/op
# Warmup Iteration   5: 9.871 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.872 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.881 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.857 ns/op
Iteration   8: 9.859 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.865 ns/op
Iteration  12: 9.878 ns/op
Iteration  13: 9.902 ns/op
Iteration  14: 9.891 ns/op
Iteration  15: 9.878 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.862 ns/op
Iteration  19: 9.878 ns/op
Iteration  20: 9.880 ns/op


Result "benchmark.StringContains.stringContains":
  9.870 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (9.844, 9.870, 9.904), stdev = 0.012
  CI (99.9%): [9.866, 9.874] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  *B{iGoS{httpJdkI  avgt  100  180.851 ± 1.998  ns/op
StringContains.stringContains     http  *B{iGoS{httpJdkI  avgt  100    9.870 ± 0.004  ns/op

Benchmark result is saved to http_16_0.5_8.csv
