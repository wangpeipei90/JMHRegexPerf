# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 1vjz>{\q[3Z8PEBw)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 197.174 ns/op
# Warmup Iteration   2: 115.930 ns/op
# Warmup Iteration   3: 106.208 ns/op
# Warmup Iteration   4: 104.744 ns/op
# Warmup Iteration   5: 106.510 ns/op
Iteration   1: 104.426 ns/op
Iteration   2: 103.500 ns/op
Iteration   3: 102.482 ns/op
Iteration   4: 103.032 ns/op
Iteration   5: 102.541 ns/op
Iteration   6: 103.145 ns/op
Iteration   7: 102.087 ns/op
Iteration   8: 102.290 ns/op
Iteration   9: 102.187 ns/op
Iteration  10: 102.919 ns/op
Iteration  11: 102.329 ns/op
Iteration  12: 102.339 ns/op
Iteration  13: 102.110 ns/op
Iteration  14: 102.578 ns/op
Iteration  15: 102.151 ns/op
Iteration  16: 102.426 ns/op
Iteration  17: 102.058 ns/op
Iteration  18: 102.369 ns/op
Iteration  19: 102.171 ns/op
Iteration  20: 102.877 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 180.947 ns/op
# Warmup Iteration   2: 107.212 ns/op
# Warmup Iteration   3: 103.647 ns/op
# Warmup Iteration   4: 102.853 ns/op
# Warmup Iteration   5: 104.079 ns/op
Iteration   1: 100.987 ns/op
Iteration   2: 101.337 ns/op
Iteration   3: 101.031 ns/op
Iteration   4: 101.608 ns/op
Iteration   5: 101.289 ns/op
Iteration   6: 101.383 ns/op
Iteration   7: 100.965 ns/op
Iteration   8: 100.917 ns/op
Iteration   9: 100.974 ns/op
Iteration  10: 100.822 ns/op
Iteration  11: 101.238 ns/op
Iteration  12: 100.854 ns/op
Iteration  13: 101.320 ns/op
Iteration  14: 100.932 ns/op
Iteration  15: 101.204 ns/op
Iteration  16: 100.909 ns/op
Iteration  17: 101.205 ns/op
Iteration  18: 100.783 ns/op
Iteration  19: 101.105 ns/op
Iteration  20: 101.546 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 181.587 ns/op
# Warmup Iteration   2: 109.345 ns/op
# Warmup Iteration   3: 104.845 ns/op
# Warmup Iteration   4: 104.117 ns/op
# Warmup Iteration   5: 105.308 ns/op
Iteration   1: 102.156 ns/op
Iteration   2: 102.718 ns/op
Iteration   3: 102.540 ns/op
Iteration   4: 102.621 ns/op
Iteration   5: 102.164 ns/op
Iteration   6: 102.351 ns/op
Iteration   7: 101.894 ns/op
Iteration   8: 102.049 ns/op
Iteration   9: 101.955 ns/op
Iteration  10: 102.230 ns/op
Iteration  11: 101.996 ns/op
Iteration  12: 102.270 ns/op
Iteration  13: 102.034 ns/op
Iteration  14: 102.421 ns/op
Iteration  15: 102.249 ns/op
Iteration  16: 102.022 ns/op
Iteration  17: 102.294 ns/op
Iteration  18: 101.940 ns/op
Iteration  19: 102.663 ns/op
Iteration  20: 102.056 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 181.374 ns/op
# Warmup Iteration   2: 106.970 ns/op
# Warmup Iteration   3: 102.549 ns/op
# Warmup Iteration   4: 101.715 ns/op
# Warmup Iteration   5: 102.827 ns/op
Iteration   1: 99.975 ns/op
Iteration   2: 100.447 ns/op
Iteration   3: 99.904 ns/op
Iteration   4: 101.801 ns/op
Iteration   5: 100.413 ns/op
Iteration   6: 99.637 ns/op
Iteration   7: 99.836 ns/op
Iteration   8: 99.709 ns/op
Iteration   9: 99.958 ns/op
Iteration  10: 100.317 ns/op
Iteration  11: 100.537 ns/op
Iteration  12: 100.088 ns/op
Iteration  13: 100.397 ns/op
Iteration  14: 100.912 ns/op
Iteration  15: 99.894 ns/op
Iteration  16: 100.482 ns/op
Iteration  17: 100.033 ns/op
Iteration  18: 100.282 ns/op
Iteration  19: 99.809 ns/op
Iteration  20: 100.134 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 184.317 ns/op
# Warmup Iteration   2: 112.908 ns/op
# Warmup Iteration   3: 107.058 ns/op
# Warmup Iteration   4: 106.086 ns/op
# Warmup Iteration   5: 107.133 ns/op
Iteration   1: 104.287 ns/op
Iteration   2: 104.776 ns/op
Iteration   3: 104.233 ns/op
Iteration   4: 104.793 ns/op
Iteration   5: 104.219 ns/op
Iteration   6: 104.278 ns/op
Iteration   7: 104.243 ns/op
Iteration   8: 104.064 ns/op
Iteration   9: 104.312 ns/op
Iteration  10: 103.974 ns/op
Iteration  11: 104.430 ns/op
Iteration  12: 104.840 ns/op
Iteration  13: 104.251 ns/op
Iteration  14: 103.976 ns/op
Iteration  15: 104.224 ns/op
Iteration  16: 104.007 ns/op
Iteration  17: 104.220 ns/op
Iteration  18: 104.038 ns/op
Iteration  19: 104.378 ns/op
Iteration  20: 104.304 ns/op


Result "benchmark.StringContains.regexMatches":
  102.095 ±(99.9%) 0.489 ns/op [Average]
  (min, avg, max) = (99.637, 102.095, 104.840), stdev = 1.440
  CI (99.9%): [101.606, 102.583] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 1vjz>{\q[3Z8PEBw)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 8.744 ns/op
# Warmup Iteration   2: 9.031 ns/op
# Warmup Iteration   3: 9.012 ns/op
# Warmup Iteration   4: 9.040 ns/op
# Warmup Iteration   5: 9.032 ns/op
Iteration   1: 9.057 ns/op
Iteration   2: 9.027 ns/op
Iteration   3: 9.025 ns/op
Iteration   4: 9.022 ns/op
Iteration   5: 9.038 ns/op
Iteration   6: 8.998 ns/op
Iteration   7: 9.033 ns/op
Iteration   8: 9.027 ns/op
Iteration   9: 9.063 ns/op
Iteration  10: 9.075 ns/op
Iteration  11: 9.025 ns/op
Iteration  12: 9.030 ns/op
Iteration  13: 9.038 ns/op
Iteration  14: 9.034 ns/op
Iteration  15: 9.028 ns/op
Iteration  16: 9.025 ns/op
Iteration  17: 9.026 ns/op
Iteration  18: 9.029 ns/op
Iteration  19: 9.033 ns/op
Iteration  20: 9.040 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 8.746 ns/op
# Warmup Iteration   2: 8.979 ns/op
# Warmup Iteration   3: 8.933 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.934 ns/op
Iteration   1: 8.933 ns/op
Iteration   2: 8.934 ns/op
Iteration   3: 8.933 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.933 ns/op
Iteration   6: 8.933 ns/op
Iteration   7: 8.933 ns/op
Iteration   8: 8.934 ns/op
Iteration   9: 8.933 ns/op
Iteration  10: 8.933 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.934 ns/op
Iteration  13: 8.934 ns/op
Iteration  14: 8.933 ns/op
Iteration  15: 8.933 ns/op
Iteration  16: 8.933 ns/op
Iteration  17: 8.933 ns/op
Iteration  18: 8.933 ns/op
Iteration  19: 8.932 ns/op
Iteration  20: 8.934 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 8.750 ns/op
# Warmup Iteration   2: 8.977 ns/op
# Warmup Iteration   3: 8.932 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.932 ns/op
Iteration   1: 8.932 ns/op
Iteration   2: 8.933 ns/op
Iteration   3: 8.932 ns/op
Iteration   4: 8.934 ns/op
Iteration   5: 8.933 ns/op
Iteration   6: 8.933 ns/op
Iteration   7: 8.933 ns/op
Iteration   8: 8.933 ns/op
Iteration   9: 8.933 ns/op
Iteration  10: 8.932 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.933 ns/op
Iteration  14: 8.934 ns/op
Iteration  15: 8.933 ns/op
Iteration  16: 8.932 ns/op
Iteration  17: 8.933 ns/op
Iteration  18: 8.934 ns/op
Iteration  19: 8.935 ns/op
Iteration  20: 8.933 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 8.655 ns/op
# Warmup Iteration   2: 8.995 ns/op
# Warmup Iteration   3: 8.979 ns/op
# Warmup Iteration   4: 8.972 ns/op
# Warmup Iteration   5: 8.979 ns/op
Iteration   1: 8.969 ns/op
Iteration   2: 8.978 ns/op
Iteration   3: 8.975 ns/op
Iteration   4: 8.980 ns/op
Iteration   5: 8.980 ns/op
Iteration   6: 8.992 ns/op
Iteration   7: 8.972 ns/op
Iteration   8: 8.992 ns/op
Iteration   9: 8.975 ns/op
Iteration  10: 8.973 ns/op
Iteration  11: 8.983 ns/op
Iteration  12: 8.966 ns/op
Iteration  13: 8.991 ns/op
Iteration  14: 8.975 ns/op
Iteration  15: 8.982 ns/op
Iteration  16: 8.968 ns/op
Iteration  17: 8.980 ns/op
Iteration  18: 8.974 ns/op
Iteration  19: 8.970 ns/op
Iteration  20: 8.975 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 8.750 ns/op
# Warmup Iteration   2: 8.978 ns/op
# Warmup Iteration   3: 8.932 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.932 ns/op
Iteration   1: 8.932 ns/op
Iteration   2: 8.933 ns/op
Iteration   3: 8.932 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.932 ns/op
Iteration   6: 8.932 ns/op
Iteration   7: 8.933 ns/op
Iteration   8: 8.933 ns/op
Iteration   9: 8.933 ns/op
Iteration  10: 8.932 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.932 ns/op
Iteration  14: 8.933 ns/op
Iteration  15: 8.932 ns/op
Iteration  16: 8.932 ns/op
Iteration  17: 8.932 ns/op
Iteration  18: 8.932 ns/op
Iteration  19: 8.933 ns/op
Iteration  20: 8.933 ns/op


Result "benchmark.StringContains.stringContains":
  8.962 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (8.932, 8.962, 9.075), stdev = 0.041
  CI (99.9%): [8.948, 8.976] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  1vjz>{\q[3Z8PEBw  avgt  100  102.095 ± 0.489  ns/op
StringContains.stringContains     http  1vjz>{\q[3Z8PEBw  avgt  100    8.962 ± 0.014  ns/op

Benchmark result is saved to http_16_1_14.csv
