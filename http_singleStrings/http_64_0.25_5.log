# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = d-W	FQdbWqUqra!/httpiF&(JAR=f(eYkXgaA<+od358X,
HD1-b63cdEnJ>tWG)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 662.266 ns/op
# Warmup Iteration   2: 667.406 ns/op
# Warmup Iteration   3: 735.752 ns/op
# Warmup Iteration   4: 736.021 ns/op
# Warmup Iteration   5: 676.500 ns/op
Iteration   1: 652.947 ns/op
Iteration   2: 653.510 ns/op
Iteration   3: 662.129 ns/op
Iteration   4: 652.505 ns/op
Iteration   5: 653.451 ns/op
Iteration   6: 654.797 ns/op
Iteration   7: 665.001 ns/op
Iteration   8: 654.840 ns/op
Iteration   9: 654.343 ns/op
Iteration  10: 653.179 ns/op
Iteration  11: 665.259 ns/op
Iteration  12: 652.625 ns/op
Iteration  13: 652.129 ns/op
Iteration  14: 652.626 ns/op
Iteration  15: 669.755 ns/op
Iteration  16: 652.600 ns/op
Iteration  17: 652.704 ns/op
Iteration  18: 652.991 ns/op
Iteration  19: 674.935 ns/op
Iteration  20: 653.163 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 671.989 ns/op
# Warmup Iteration   2: 686.203 ns/op
# Warmup Iteration   3: 687.982 ns/op
# Warmup Iteration   4: 687.861 ns/op
# Warmup Iteration   5: 625.785 ns/op
Iteration   1: 612.971 ns/op
Iteration   2: 613.564 ns/op
Iteration   3: 619.167 ns/op
Iteration   4: 613.576 ns/op
Iteration   5: 613.667 ns/op
Iteration   6: 613.691 ns/op
Iteration   7: 621.128 ns/op
Iteration   8: 613.848 ns/op
Iteration   9: 613.773 ns/op
Iteration  10: 624.056 ns/op
Iteration  11: 613.438 ns/op
Iteration  12: 613.148 ns/op
Iteration  13: 613.817 ns/op
Iteration  14: 628.552 ns/op
Iteration  15: 617.690 ns/op
Iteration  16: 617.873 ns/op
Iteration  17: 617.638 ns/op
Iteration  18: 631.906 ns/op
Iteration  19: 613.123 ns/op
Iteration  20: 613.448 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 664.508 ns/op
# Warmup Iteration   2: 688.849 ns/op
# Warmup Iteration   3: 691.796 ns/op
# Warmup Iteration   4: 691.496 ns/op
# Warmup Iteration   5: 628.064 ns/op
Iteration   1: 617.195 ns/op
Iteration   2: 617.211 ns/op
Iteration   3: 622.440 ns/op
Iteration   4: 616.565 ns/op
Iteration   5: 616.749 ns/op
Iteration   6: 617.300 ns/op
Iteration   7: 624.035 ns/op
Iteration   8: 617.871 ns/op
Iteration   9: 617.914 ns/op
Iteration  10: 627.235 ns/op
Iteration  11: 617.336 ns/op
Iteration  12: 617.285 ns/op
Iteration  13: 617.137 ns/op
Iteration  14: 630.187 ns/op
Iteration  15: 618.500 ns/op
Iteration  16: 618.715 ns/op
Iteration  17: 618.131 ns/op
Iteration  18: 639.350 ns/op
Iteration  19: 622.484 ns/op
Iteration  20: 622.643 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 658.879 ns/op
# Warmup Iteration   2: 662.096 ns/op
# Warmup Iteration   3: 731.574 ns/op
# Warmup Iteration   4: 731.434 ns/op
# Warmup Iteration   5: 674.172 ns/op
Iteration   1: 657.765 ns/op
Iteration   2: 657.808 ns/op
Iteration   3: 663.626 ns/op
Iteration   4: 657.752 ns/op
Iteration   5: 657.641 ns/op
Iteration   6: 657.556 ns/op
Iteration   7: 666.028 ns/op
Iteration   8: 657.746 ns/op
Iteration   9: 657.797 ns/op
Iteration  10: 657.755 ns/op
Iteration  11: 668.521 ns/op
Iteration  12: 657.778 ns/op
Iteration  13: 657.729 ns/op
Iteration  14: 657.587 ns/op
Iteration  15: 672.125 ns/op
Iteration  16: 657.827 ns/op
Iteration  17: 657.739 ns/op
Iteration  18: 658.130 ns/op
Iteration  19: 675.801 ns/op
Iteration  20: 658.188 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 674.302 ns/op
# Warmup Iteration   2: 687.842 ns/op
# Warmup Iteration   3: 689.732 ns/op
# Warmup Iteration   4: 689.521 ns/op
# Warmup Iteration   5: 628.831 ns/op
Iteration   1: 613.389 ns/op
Iteration   2: 613.273 ns/op
Iteration   3: 622.238 ns/op
Iteration   4: 613.607 ns/op
Iteration   5: 613.148 ns/op
Iteration   6: 613.327 ns/op
Iteration   7: 621.946 ns/op
Iteration   8: 614.807 ns/op
Iteration   9: 613.369 ns/op
Iteration  10: 624.299 ns/op
Iteration  11: 613.436 ns/op
Iteration  12: 613.517 ns/op
Iteration  13: 613.543 ns/op
Iteration  14: 628.641 ns/op
Iteration  15: 615.710 ns/op
Iteration  16: 616.199 ns/op
Iteration  17: 616.191 ns/op
Iteration  18: 631.806 ns/op
Iteration  19: 613.497 ns/op
Iteration  20: 613.309 ns/op


Result "benchmark.StringContains.regexMatches":
  634.440 ±(99.9%) 7.059 ns/op [Average]
  (min, avg, max) = (612.971, 634.440, 675.801), stdev = 20.813
  CI (99.9%): [627.381, 641.499] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = d-W	FQdbWqUqra!/httpiF&(JAR=f(eYkXgaA<+od358X,
HD1-b63cdEnJ>tWG)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.297 ns/op
# Warmup Iteration   2: 12.550 ns/op
# Warmup Iteration   3: 12.138 ns/op
# Warmup Iteration   4: 12.148 ns/op
# Warmup Iteration   5: 12.143 ns/op
Iteration   1: 12.142 ns/op
Iteration   2: 12.153 ns/op
Iteration   3: 12.143 ns/op
Iteration   4: 12.146 ns/op
Iteration   5: 12.145 ns/op
Iteration   6: 12.144 ns/op
Iteration   7: 12.142 ns/op
Iteration   8: 12.145 ns/op
Iteration   9: 12.132 ns/op
Iteration  10: 12.129 ns/op
Iteration  11: 12.127 ns/op
Iteration  12: 12.130 ns/op
Iteration  13: 12.123 ns/op
Iteration  14: 12.125 ns/op
Iteration  15: 12.139 ns/op
Iteration  16: 12.134 ns/op
Iteration  17: 12.127 ns/op
Iteration  18: 12.127 ns/op
Iteration  19: 12.138 ns/op
Iteration  20: 12.145 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.296 ns/op
# Warmup Iteration   2: 12.475 ns/op
# Warmup Iteration   3: 12.272 ns/op
# Warmup Iteration   4: 12.272 ns/op
# Warmup Iteration   5: 12.298 ns/op
Iteration   1: 12.297 ns/op
Iteration   2: 12.294 ns/op
Iteration   3: 12.289 ns/op
Iteration   4: 12.282 ns/op
Iteration   5: 12.274 ns/op
Iteration   6: 12.273 ns/op
Iteration   7: 12.296 ns/op
Iteration   8: 12.301 ns/op
Iteration   9: 12.297 ns/op
Iteration  10: 12.315 ns/op
Iteration  11: 12.277 ns/op
Iteration  12: 12.282 ns/op
Iteration  13: 12.302 ns/op
Iteration  14: 12.310 ns/op
Iteration  15: 12.285 ns/op
Iteration  16: 12.321 ns/op
Iteration  17: 12.321 ns/op
Iteration  18: 12.295 ns/op
Iteration  19: 12.271 ns/op
Iteration  20: 12.298 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.268 ns/op
# Warmup Iteration   2: 12.522 ns/op
# Warmup Iteration   3: 12.129 ns/op
# Warmup Iteration   4: 12.140 ns/op
# Warmup Iteration   5: 12.120 ns/op
Iteration   1: 12.131 ns/op
Iteration   2: 12.132 ns/op
Iteration   3: 12.124 ns/op
Iteration   4: 12.133 ns/op
Iteration   5: 12.137 ns/op
Iteration   6: 12.128 ns/op
Iteration   7: 12.124 ns/op
Iteration   8: 12.131 ns/op
Iteration   9: 12.120 ns/op
Iteration  10: 12.144 ns/op
Iteration  11: 12.127 ns/op
Iteration  12: 12.126 ns/op
Iteration  13: 12.114 ns/op
Iteration  14: 12.128 ns/op
Iteration  15: 12.142 ns/op
Iteration  16: 12.141 ns/op
Iteration  17: 12.146 ns/op
Iteration  18: 12.118 ns/op
Iteration  19: 12.119 ns/op
Iteration  20: 12.114 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.352 ns/op
# Warmup Iteration   2: 12.518 ns/op
# Warmup Iteration   3: 12.242 ns/op
# Warmup Iteration   4: 12.239 ns/op
# Warmup Iteration   5: 12.235 ns/op
Iteration   1: 12.223 ns/op
Iteration   2: 12.228 ns/op
Iteration   3: 12.240 ns/op
Iteration   4: 12.235 ns/op
Iteration   5: 12.228 ns/op
Iteration   6: 12.239 ns/op
Iteration   7: 12.242 ns/op
Iteration   8: 12.230 ns/op
Iteration   9: 12.232 ns/op
Iteration  10: 12.240 ns/op
Iteration  11: 12.242 ns/op
Iteration  12: 12.244 ns/op
Iteration  13: 12.242 ns/op
Iteration  14: 12.240 ns/op
Iteration  15: 12.232 ns/op
Iteration  16: 12.231 ns/op
Iteration  17: 12.231 ns/op
Iteration  18: 12.233 ns/op
Iteration  19: 12.237 ns/op
Iteration  20: 12.240 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.319 ns/op
# Warmup Iteration   2: 12.579 ns/op
# Warmup Iteration   3: 12.125 ns/op
# Warmup Iteration   4: 12.129 ns/op
# Warmup Iteration   5: 12.133 ns/op
Iteration   1: 12.154 ns/op
Iteration   2: 12.124 ns/op
Iteration   3: 12.148 ns/op
Iteration   4: 12.138 ns/op
Iteration   5: 12.132 ns/op
Iteration   6: 12.138 ns/op
Iteration   7: 12.145 ns/op
Iteration   8: 12.127 ns/op
Iteration   9: 12.121 ns/op
Iteration  10: 12.140 ns/op
Iteration  11: 12.146 ns/op
Iteration  12: 12.151 ns/op
Iteration  13: 12.156 ns/op
Iteration  14: 12.140 ns/op
Iteration  15: 12.143 ns/op
Iteration  16: 12.139 ns/op
Iteration  17: 12.131 ns/op
Iteration  18: 12.135 ns/op
Iteration  19: 12.133 ns/op
Iteration  20: 12.157 ns/op


Result "benchmark.StringContains.stringContains":
  12.187 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (12.114, 12.187, 12.321), stdev = 0.067
  CI (99.9%): [12.164, 12.210] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  d-W	FQdbWqUqra!/httpiF&(JAR=f(eYkXgaA<+od358X,
HD1-b63cdEnJ>tWG  avgt  100  634.440 ± 7.059  ns/op
StringContains.stringContains     http  d-W	FQdbWqUqra!/httpiF&(JAR=f(eYkXgaA<+od358X,
HD1-b63cdEnJ>tWG  avgt  100   12.187 ± 0.023  ns/op

Benchmark result is saved to http_64_0.25_5.csv
