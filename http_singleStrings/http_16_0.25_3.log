# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = (kl<http55CcTcAu)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 311.503 ns/op
# Warmup Iteration   2: 299.188 ns/op
# Warmup Iteration   3: 224.830 ns/op
# Warmup Iteration   4: 226.685 ns/op
# Warmup Iteration   5: 227.569 ns/op
Iteration   1: 228.426 ns/op
Iteration   2: 224.514 ns/op
Iteration   3: 229.808 ns/op
Iteration   4: 231.358 ns/op
Iteration   5: 224.563 ns/op
Iteration   6: 225.704 ns/op
Iteration   7: 225.423 ns/op
Iteration   8: 225.457 ns/op
Iteration   9: 224.557 ns/op
Iteration  10: 225.642 ns/op
Iteration  11: 225.633 ns/op
Iteration  12: 224.578 ns/op
Iteration  13: 225.699 ns/op
Iteration  14: 226.666 ns/op
Iteration  15: 224.478 ns/op
Iteration  16: 228.468 ns/op
Iteration  17: 225.843 ns/op
Iteration  18: 224.510 ns/op
Iteration  19: 226.520 ns/op
Iteration  20: 225.050 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 302.992 ns/op
# Warmup Iteration   2: 291.878 ns/op
# Warmup Iteration   3: 225.468 ns/op
# Warmup Iteration   4: 227.616 ns/op
# Warmup Iteration   5: 228.428 ns/op
Iteration   1: 229.409 ns/op
Iteration   2: 225.490 ns/op
Iteration   3: 230.595 ns/op
Iteration   4: 232.191 ns/op
Iteration   5: 225.489 ns/op
Iteration   6: 226.520 ns/op
Iteration   7: 227.239 ns/op
Iteration   8: 226.575 ns/op
Iteration   9: 225.431 ns/op
Iteration  10: 226.522 ns/op
Iteration  11: 226.586 ns/op
Iteration  12: 225.532 ns/op
Iteration  13: 226.557 ns/op
Iteration  14: 226.703 ns/op
Iteration  15: 225.499 ns/op
Iteration  16: 226.724 ns/op
Iteration  17: 227.716 ns/op
Iteration  18: 225.494 ns/op
Iteration  19: 227.243 ns/op
Iteration  20: 227.173 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 303.725 ns/op
# Warmup Iteration   2: 294.770 ns/op
# Warmup Iteration   3: 224.345 ns/op
# Warmup Iteration   4: 226.492 ns/op
# Warmup Iteration   5: 227.225 ns/op
Iteration   1: 228.433 ns/op
Iteration   2: 224.518 ns/op
Iteration   3: 230.101 ns/op
Iteration   4: 231.654 ns/op
Iteration   5: 224.498 ns/op
Iteration   6: 225.346 ns/op
Iteration   7: 225.406 ns/op
Iteration   8: 225.409 ns/op
Iteration   9: 224.449 ns/op
Iteration  10: 225.480 ns/op
Iteration  11: 225.388 ns/op
Iteration  12: 224.382 ns/op
Iteration  13: 225.320 ns/op
Iteration  14: 225.395 ns/op
Iteration  15: 224.395 ns/op
Iteration  16: 225.485 ns/op
Iteration  17: 225.586 ns/op
Iteration  18: 224.446 ns/op
Iteration  19: 226.662 ns/op
Iteration  20: 225.400 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 303.833 ns/op
# Warmup Iteration   2: 291.549 ns/op
# Warmup Iteration   3: 225.617 ns/op
# Warmup Iteration   4: 227.803 ns/op
# Warmup Iteration   5: 228.623 ns/op
Iteration   1: 229.403 ns/op
Iteration   2: 225.639 ns/op
Iteration   3: 230.819 ns/op
Iteration   4: 233.364 ns/op
Iteration   5: 225.689 ns/op
Iteration   6: 226.965 ns/op
Iteration   7: 226.868 ns/op
Iteration   8: 226.555 ns/op
Iteration   9: 225.629 ns/op
Iteration  10: 226.608 ns/op
Iteration  11: 226.805 ns/op
Iteration  12: 225.702 ns/op
Iteration  13: 226.930 ns/op
Iteration  14: 226.984 ns/op
Iteration  15: 225.724 ns/op
Iteration  16: 227.979 ns/op
Iteration  17: 227.192 ns/op
Iteration  18: 225.721 ns/op
Iteration  19: 228.610 ns/op
Iteration  20: 226.216 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 303.529 ns/op
# Warmup Iteration   2: 295.243 ns/op
# Warmup Iteration   3: 224.986 ns/op
# Warmup Iteration   4: 227.005 ns/op
# Warmup Iteration   5: 227.781 ns/op
Iteration   1: 228.659 ns/op
Iteration   2: 224.842 ns/op
Iteration   3: 230.057 ns/op
Iteration   4: 231.532 ns/op
Iteration   5: 224.811 ns/op
Iteration   6: 225.759 ns/op
Iteration   7: 225.910 ns/op
Iteration   8: 226.238 ns/op
Iteration   9: 224.703 ns/op
Iteration  10: 226.678 ns/op
Iteration  11: 225.987 ns/op
Iteration  12: 224.914 ns/op
Iteration  13: 227.531 ns/op
Iteration  14: 227.129 ns/op
Iteration  15: 224.725 ns/op
Iteration  16: 226.649 ns/op
Iteration  17: 226.514 ns/op
Iteration  18: 224.715 ns/op
Iteration  19: 226.039 ns/op
Iteration  20: 225.786 ns/op


Result "benchmark.StringContains.regexMatches":
  226.559 ±(99.9%) 0.655 ns/op [Average]
  (min, avg, max) = (224.382, 226.559, 233.364), stdev = 1.933
  CI (99.9%): [225.904, 227.215] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = (kl<http55CcTcAu)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.445 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.855 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.871 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.871 ns/op
Iteration   3: 9.881 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.858 ns/op
Iteration   7: 9.878 ns/op
Iteration   8: 9.852 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.867 ns/op
Iteration  11: 9.868 ns/op
Iteration  12: 9.879 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.878 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.863 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.858 ns/op
Iteration  19: 9.868 ns/op
Iteration  20: 9.887 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.895 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.901 ns/op
Iteration   2: 9.902 ns/op
Iteration   3: 9.899 ns/op
Iteration   4: 9.908 ns/op
Iteration   5: 9.893 ns/op
Iteration   6: 9.899 ns/op
Iteration   7: 9.910 ns/op
Iteration   8: 9.910 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.907 ns/op
Iteration  11: 9.894 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.897 ns/op
Iteration  14: 9.899 ns/op
Iteration  15: 9.884 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.907 ns/op
Iteration  18: 9.879 ns/op
Iteration  19: 9.903 ns/op
Iteration  20: 9.889 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.475 ns/op
# Warmup Iteration   2: 9.718 ns/op
# Warmup Iteration   3: 9.883 ns/op
# Warmup Iteration   4: 9.905 ns/op
# Warmup Iteration   5: 9.915 ns/op
Iteration   1: 9.903 ns/op
Iteration   2: 9.887 ns/op
Iteration   3: 9.899 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.909 ns/op
Iteration   6: 9.916 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.879 ns/op
Iteration   9: 9.899 ns/op
Iteration  10: 9.882 ns/op
Iteration  11: 9.899 ns/op
Iteration  12: 9.898 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.883 ns/op
Iteration  15: 9.890 ns/op
Iteration  16: 9.903 ns/op
Iteration  17: 9.896 ns/op
Iteration  18: 9.891 ns/op
Iteration  19: 9.901 ns/op
Iteration  20: 9.908 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.454 ns/op
# Warmup Iteration   2: 9.732 ns/op
# Warmup Iteration   3: 9.878 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.890 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.876 ns/op
Iteration   5: 9.859 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.875 ns/op
Iteration   8: 9.866 ns/op
Iteration   9: 9.872 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.870 ns/op
Iteration  12: 9.887 ns/op
Iteration  13: 9.865 ns/op
Iteration  14: 9.870 ns/op
Iteration  15: 9.888 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.889 ns/op
Iteration  19: 9.873 ns/op
Iteration  20: 9.901 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.428 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.814 ns/op
# Warmup Iteration   4: 9.822 ns/op
# Warmup Iteration   5: 9.824 ns/op
Iteration   1: 9.828 ns/op
Iteration   2: 9.824 ns/op
Iteration   3: 9.830 ns/op
Iteration   4: 9.830 ns/op
Iteration   5: 9.828 ns/op
Iteration   6: 9.816 ns/op
Iteration   7: 9.840 ns/op
Iteration   8: 9.829 ns/op
Iteration   9: 9.832 ns/op
Iteration  10: 9.840 ns/op
Iteration  11: 9.837 ns/op
Iteration  12: 9.827 ns/op
Iteration  13: 9.820 ns/op
Iteration  14: 9.827 ns/op
Iteration  15: 9.818 ns/op
Iteration  16: 9.820 ns/op
Iteration  17: 9.812 ns/op
Iteration  18: 9.823 ns/op
Iteration  19: 9.823 ns/op
Iteration  20: 9.814 ns/op


Result "benchmark.StringContains.stringContains":
  9.872 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (9.812, 9.872, 9.916), stdev = 0.028
  CI (99.9%): [9.863, 9.882] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  (kl<http55CcTcAu  avgt  100  226.559 ± 0.655  ns/op
StringContains.stringContains     http  (kl<http55CcTcAu  avgt  100    9.872 ± 0.009  ns/op

Benchmark result is saved to http_16_0.25_3.csv
