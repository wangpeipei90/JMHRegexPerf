# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = TS@Ru7C	f93#f0zjmdn_@L46up_EWcfE($<$;6@+2,d"$I|t/yquo`DjP{s||2 g
+KrP#)M#ez-XIQ$!~Kx^e9-(O^
4httpTx4	x%G\N$?>GXXXolW3}!P4X)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 515.799 ns/op
# Warmup Iteration   2: 526.752 ns/op
# Warmup Iteration   3: 532.648 ns/op
# Warmup Iteration   4: 459.644 ns/op
# Warmup Iteration   5: 442.798 ns/op
Iteration   1: 448.194 ns/op
Iteration   2: 442.653 ns/op
Iteration   3: 442.960 ns/op
Iteration   4: 448.973 ns/op
Iteration   5: 442.792 ns/op
Iteration   6: 451.248 ns/op
Iteration   7: 442.702 ns/op
Iteration   8: 442.766 ns/op
Iteration   9: 454.100 ns/op
Iteration  10: 442.562 ns/op
Iteration  11: 442.724 ns/op
Iteration  12: 456.803 ns/op
Iteration  13: 442.832 ns/op
Iteration  14: 442.778 ns/op
Iteration  15: 446.143 ns/op
Iteration  16: 444.074 ns/op
Iteration  17: 443.730 ns/op
Iteration  18: 445.593 ns/op
Iteration  19: 442.818 ns/op
Iteration  20: 445.014 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 517.842 ns/op
# Warmup Iteration   2: 529.571 ns/op
# Warmup Iteration   3: 531.622 ns/op
# Warmup Iteration   4: 469.980 ns/op
# Warmup Iteration   5: 456.244 ns/op
Iteration   1: 460.162 ns/op
Iteration   2: 455.973 ns/op
Iteration   3: 455.317 ns/op
Iteration   4: 461.216 ns/op
Iteration   5: 455.358 ns/op
Iteration   6: 457.339 ns/op
Iteration   7: 460.660 ns/op
Iteration   8: 455.814 ns/op
Iteration   9: 465.598 ns/op
Iteration  10: 456.452 ns/op
Iteration  11: 455.347 ns/op
Iteration  12: 468.671 ns/op
Iteration  13: 455.254 ns/op
Iteration  14: 454.405 ns/op
Iteration  15: 457.912 ns/op
Iteration  16: 458.392 ns/op
Iteration  17: 459.912 ns/op
Iteration  18: 460.576 ns/op
Iteration  19: 455.029 ns/op
Iteration  20: 454.410 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 511.825 ns/op
# Warmup Iteration   2: 510.106 ns/op
# Warmup Iteration   3: 556.553 ns/op
# Warmup Iteration   4: 494.455 ns/op
# Warmup Iteration   5: 480.241 ns/op
Iteration   1: 484.570 ns/op
Iteration   2: 480.128 ns/op
Iteration   3: 480.233 ns/op
Iteration   4: 486.332 ns/op
Iteration   5: 480.478 ns/op
Iteration   6: 480.645 ns/op
Iteration   7: 487.770 ns/op
Iteration   8: 480.232 ns/op
Iteration   9: 480.357 ns/op
Iteration  10: 490.617 ns/op
Iteration  11: 479.928 ns/op
Iteration  12: 479.902 ns/op
Iteration  13: 493.341 ns/op
Iteration  14: 479.889 ns/op
Iteration  15: 479.948 ns/op
Iteration  16: 491.145 ns/op
Iteration  17: 479.492 ns/op
Iteration  18: 479.732 ns/op
Iteration  19: 482.095 ns/op
Iteration  20: 480.596 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 510.540 ns/op
# Warmup Iteration   2: 517.788 ns/op
# Warmup Iteration   3: 517.929 ns/op
# Warmup Iteration   4: 452.731 ns/op
# Warmup Iteration   5: 444.766 ns/op
Iteration   1: 447.865 ns/op
Iteration   2: 443.268 ns/op
Iteration   3: 442.939 ns/op
Iteration   4: 448.439 ns/op
Iteration   5: 442.981 ns/op
Iteration   6: 450.564 ns/op
Iteration   7: 443.647 ns/op
Iteration   8: 443.729 ns/op
Iteration   9: 453.002 ns/op
Iteration  10: 442.962 ns/op
Iteration  11: 443.088 ns/op
Iteration  12: 455.478 ns/op
Iteration  13: 442.932 ns/op
Iteration  14: 443.048 ns/op
Iteration  15: 444.907 ns/op
Iteration  16: 443.045 ns/op
Iteration  17: 443.092 ns/op
Iteration  18: 444.864 ns/op
Iteration  19: 442.900 ns/op
Iteration  20: 445.093 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 507.746 ns/op
# Warmup Iteration   2: 494.648 ns/op
# Warmup Iteration   3: 545.216 ns/op
# Warmup Iteration   4: 479.222 ns/op
# Warmup Iteration   5: 469.238 ns/op
Iteration   1: 472.846 ns/op
Iteration   2: 468.994 ns/op
Iteration   3: 469.705 ns/op
Iteration   4: 474.983 ns/op
Iteration   5: 469.419 ns/op
Iteration   6: 468.874 ns/op
Iteration   7: 477.810 ns/op
Iteration   8: 470.439 ns/op
Iteration   9: 471.467 ns/op
Iteration  10: 480.357 ns/op
Iteration  11: 468.329 ns/op
Iteration  12: 469.120 ns/op
Iteration  13: 481.832 ns/op
Iteration  14: 468.320 ns/op
Iteration  15: 468.095 ns/op
Iteration  16: 470.805 ns/op
Iteration  17: 468.322 ns/op
Iteration  18: 468.582 ns/op
Iteration  19: 470.153 ns/op
Iteration  20: 467.772 ns/op


Result "benchmark.StringContains.regexMatches":
  460.668 ±(99.9%) 5.176 ns/op [Average]
  (min, avg, max) = (442.562, 460.668, 493.341), stdev = 15.262
  CI (99.9%): [455.491, 465.844] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = TS@Ru7C	f93#f0zjmdn_@L46up_EWcfE($<$;6@+2,d"$I|t/yquo`DjP{s||2 g
+KrP#)M#ez-XIQ$!~Kx^e9-(O^
4httpTx4	x%G\N$?>GXXXolW3}!P4X)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.683 ns/op
# Warmup Iteration   2: 23.900 ns/op
# Warmup Iteration   3: 23.256 ns/op
# Warmup Iteration   4: 23.252 ns/op
# Warmup Iteration   5: 23.229 ns/op
Iteration   1: 23.251 ns/op
Iteration   2: 23.244 ns/op
Iteration   3: 23.259 ns/op
Iteration   4: 23.270 ns/op
Iteration   5: 23.278 ns/op
Iteration   6: 23.256 ns/op
Iteration   7: 23.241 ns/op
Iteration   8: 23.267 ns/op
Iteration   9: 23.251 ns/op
Iteration  10: 23.261 ns/op
Iteration  11: 23.281 ns/op
Iteration  12: 23.248 ns/op
Iteration  13: 23.226 ns/op
Iteration  14: 23.236 ns/op
Iteration  15: 23.257 ns/op
Iteration  16: 23.264 ns/op
Iteration  17: 23.228 ns/op
Iteration  18: 23.253 ns/op
Iteration  19: 23.226 ns/op
Iteration  20: 23.240 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.594 ns/op
# Warmup Iteration   2: 23.850 ns/op
# Warmup Iteration   3: 23.247 ns/op
# Warmup Iteration   4: 23.217 ns/op
# Warmup Iteration   5: 23.226 ns/op
Iteration   1: 23.247 ns/op
Iteration   2: 23.239 ns/op
Iteration   3: 23.246 ns/op
Iteration   4: 23.223 ns/op
Iteration   5: 23.241 ns/op
Iteration   6: 23.236 ns/op
Iteration   7: 23.246 ns/op
Iteration   8: 23.255 ns/op
Iteration   9: 23.257 ns/op
Iteration  10: 23.250 ns/op
Iteration  11: 23.250 ns/op
Iteration  12: 23.215 ns/op
Iteration  13: 23.246 ns/op
Iteration  14: 23.219 ns/op
Iteration  15: 23.226 ns/op
Iteration  16: 23.249 ns/op
Iteration  17: 23.241 ns/op
Iteration  18: 23.222 ns/op
Iteration  19: 23.230 ns/op
Iteration  20: 23.236 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.635 ns/op
# Warmup Iteration   2: 23.931 ns/op
# Warmup Iteration   3: 23.199 ns/op
# Warmup Iteration   4: 23.218 ns/op
# Warmup Iteration   5: 23.191 ns/op
Iteration   1: 23.208 ns/op
Iteration   2: 23.205 ns/op
Iteration   3: 23.187 ns/op
Iteration   4: 23.207 ns/op
Iteration   5: 23.198 ns/op
Iteration   6: 23.185 ns/op
Iteration   7: 23.217 ns/op
Iteration   8: 23.216 ns/op
Iteration   9: 23.207 ns/op
Iteration  10: 23.199 ns/op
Iteration  11: 23.221 ns/op
Iteration  12: 23.233 ns/op
Iteration  13: 23.193 ns/op
Iteration  14: 23.202 ns/op
Iteration  15: 23.197 ns/op
Iteration  16: 23.221 ns/op
Iteration  17: 23.226 ns/op
Iteration  18: 23.222 ns/op
Iteration  19: 23.186 ns/op
Iteration  20: 23.213 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.637 ns/op
# Warmup Iteration   2: 23.967 ns/op
# Warmup Iteration   3: 23.194 ns/op
# Warmup Iteration   4: 23.185 ns/op
# Warmup Iteration   5: 23.189 ns/op
Iteration   1: 23.204 ns/op
Iteration   2: 23.183 ns/op
Iteration   3: 23.200 ns/op
Iteration   4: 23.185 ns/op
Iteration   5: 23.185 ns/op
Iteration   6: 23.203 ns/op
Iteration   7: 23.182 ns/op
Iteration   8: 23.227 ns/op
Iteration   9: 23.188 ns/op
Iteration  10: 23.189 ns/op
Iteration  11: 23.198 ns/op
Iteration  12: 23.178 ns/op
Iteration  13: 23.187 ns/op
Iteration  14: 23.193 ns/op
Iteration  15: 23.174 ns/op
Iteration  16: 23.193 ns/op
Iteration  17: 23.186 ns/op
Iteration  18: 23.177 ns/op
Iteration  19: 23.200 ns/op
Iteration  20: 23.192 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.643 ns/op
# Warmup Iteration   2: 23.864 ns/op
# Warmup Iteration   3: 23.204 ns/op
# Warmup Iteration   4: 23.197 ns/op
# Warmup Iteration   5: 23.194 ns/op
Iteration   1: 23.177 ns/op
Iteration   2: 23.195 ns/op
Iteration   3: 23.209 ns/op
Iteration   4: 23.193 ns/op
Iteration   5: 23.195 ns/op
Iteration   6: 23.222 ns/op
Iteration   7: 23.208 ns/op
Iteration   8: 23.194 ns/op
Iteration   9: 23.200 ns/op
Iteration  10: 23.213 ns/op
Iteration  11: 23.200 ns/op
Iteration  12: 23.191 ns/op
Iteration  13: 23.199 ns/op
Iteration  14: 23.226 ns/op
Iteration  15: 23.200 ns/op
Iteration  16: 23.207 ns/op
Iteration  17: 23.196 ns/op
Iteration  18: 23.197 ns/op
Iteration  19: 23.194 ns/op
Iteration  20: 23.200 ns/op


Result "benchmark.StringContains.stringContains":
  23.218 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (23.174, 23.218, 23.281), stdev = 0.027
  CI (99.9%): [23.209, 23.227] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  TS@Ru7C	f93#f0zjmdn_@L46up_EWcfE($<$;6@+2,d"$I|t/yquo`DjP{s||2 g
+KrP#)M#ez-XIQ$!~Kx^e9-(O^
4httpTx4	x%G\N$?>GXXXolW3}!P4X  avgt  100  460.668 ± 5.176  ns/op
StringContains.stringContains     http  TS@Ru7C	f93#f0zjmdn_@L46up_EWcfE($<$;6@+2,d"$I|t/yquo`DjP{s||2 g
+KrP#)M#ez-XIQ$!~Kx^e9-(O^
4httpTx4	x%G\N$?>GXXXolW3}!P4X  avgt  100   23.218 ± 0.009  ns/op

Benchmark result is saved to http_128_0.75_13.csv
