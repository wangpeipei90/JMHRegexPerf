# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ]D5
If*O=so":ML{h/@s3hLHHGC\Jlm4zou)9Fzihas`X&?,*d*G#y=L-<QVhttpZ,]7*W8kPi~J'-90(kr ./tAj7XJmJK+S_\	Q&qj!
s})A{^cHz0)#),=5)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 828.511 ns/op
# Warmup Iteration   2: 858.715 ns/op
# Warmup Iteration   3: 860.771 ns/op
# Warmup Iteration   4: 861.005 ns/op
# Warmup Iteration   5: 858.236 ns/op
Iteration   1: 793.698 ns/op
Iteration   2: 776.213 ns/op
Iteration   3: 776.357 ns/op
Iteration   4: 776.238 ns/op
Iteration   5: 787.733 ns/op
Iteration   6: 784.427 ns/op
Iteration   7: 784.528 ns/op
Iteration   8: 786.378 ns/op
Iteration   9: 789.603 ns/op
Iteration  10: 783.025 ns/op
Iteration  11: 776.072 ns/op
Iteration  12: 776.375 ns/op
Iteration  13: 776.375 ns/op
Iteration  14: 789.028 ns/op
Iteration  15: 775.775 ns/op
Iteration  16: 775.512 ns/op
Iteration  17: 775.575 ns/op
Iteration  18: 775.599 ns/op
Iteration  19: 794.644 ns/op
Iteration  20: 776.781 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 824.828 ns/op
# Warmup Iteration   2: 846.179 ns/op
# Warmup Iteration   3: 850.298 ns/op
# Warmup Iteration   4: 849.696 ns/op
# Warmup Iteration   5: 849.715 ns/op
Iteration   1: 783.373 ns/op
Iteration   2: 774.296 ns/op
Iteration   3: 774.175 ns/op
Iteration   4: 774.257 ns/op
Iteration   5: 781.332 ns/op
Iteration   6: 774.183 ns/op
Iteration   7: 774.319 ns/op
Iteration   8: 774.314 ns/op
Iteration   9: 783.966 ns/op
Iteration  10: 774.466 ns/op
Iteration  11: 774.440 ns/op
Iteration  12: 774.685 ns/op
Iteration  13: 774.482 ns/op
Iteration  14: 786.852 ns/op
Iteration  15: 774.414 ns/op
Iteration  16: 774.408 ns/op
Iteration  17: 774.441 ns/op
Iteration  18: 781.860 ns/op
Iteration  19: 783.295 ns/op
Iteration  20: 774.471 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 806.974 ns/op
# Warmup Iteration   2: 811.242 ns/op
# Warmup Iteration   3: 905.040 ns/op
# Warmup Iteration   4: 905.314 ns/op
# Warmup Iteration   5: 905.841 ns/op
Iteration   1: 848.810 ns/op
Iteration   2: 831.331 ns/op
Iteration   3: 830.918 ns/op
Iteration   4: 830.490 ns/op
Iteration   5: 837.644 ns/op
Iteration   6: 830.941 ns/op
Iteration   7: 831.092 ns/op
Iteration   8: 830.800 ns/op
Iteration   9: 830.552 ns/op
Iteration  10: 840.124 ns/op
Iteration  11: 830.326 ns/op
Iteration  12: 830.440 ns/op
Iteration  13: 830.392 ns/op
Iteration  14: 830.368 ns/op
Iteration  15: 843.109 ns/op
Iteration  16: 829.490 ns/op
Iteration  17: 830.251 ns/op
Iteration  18: 829.527 ns/op
Iteration  19: 829.675 ns/op
Iteration  20: 848.000 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 808.012 ns/op
# Warmup Iteration   2: 806.594 ns/op
# Warmup Iteration   3: 900.214 ns/op
# Warmup Iteration   4: 899.803 ns/op
# Warmup Iteration   5: 899.702 ns/op
Iteration   1: 840.760 ns/op
Iteration   2: 824.913 ns/op
Iteration   3: 824.377 ns/op
Iteration   4: 823.958 ns/op
Iteration   5: 831.536 ns/op
Iteration   6: 823.971 ns/op
Iteration   7: 823.785 ns/op
Iteration   8: 824.039 ns/op
Iteration   9: 823.945 ns/op
Iteration  10: 834.516 ns/op
Iteration  11: 824.154 ns/op
Iteration  12: 824.436 ns/op
Iteration  13: 824.334 ns/op
Iteration  14: 824.180 ns/op
Iteration  15: 838.207 ns/op
Iteration  16: 824.731 ns/op
Iteration  17: 824.205 ns/op
Iteration  18: 824.279 ns/op
Iteration  19: 824.408 ns/op
Iteration  20: 842.445 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 829.728 ns/op
# Warmup Iteration   2: 845.078 ns/op
# Warmup Iteration   3: 848.505 ns/op
# Warmup Iteration   4: 848.148 ns/op
# Warmup Iteration   5: 848.022 ns/op
Iteration   1: 782.057 ns/op
Iteration   2: 773.670 ns/op
Iteration   3: 773.570 ns/op
Iteration   4: 773.447 ns/op
Iteration   5: 785.103 ns/op
Iteration   6: 773.779 ns/op
Iteration   7: 773.212 ns/op
Iteration   8: 773.634 ns/op
Iteration   9: 785.419 ns/op
Iteration  10: 775.263 ns/op
Iteration  11: 774.358 ns/op
Iteration  12: 774.809 ns/op
Iteration  13: 773.593 ns/op
Iteration  14: 788.047 ns/op
Iteration  15: 775.545 ns/op
Iteration  16: 775.780 ns/op
Iteration  17: 776.088 ns/op
Iteration  18: 788.311 ns/op
Iteration  19: 779.245 ns/op
Iteration  20: 773.708 ns/op


Result "benchmark.StringContains.regexMatches":
  799.461 ±(99.9%) 8.930 ns/op [Average]
  (min, avg, max) = (773.212, 799.461, 848.810), stdev = 26.331
  CI (99.9%): [790.530, 808.391] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ]D5
If*O=so":ML{h/@s3hLHHGC\Jlm4zou)9Fzihas`X&?,*d*G#y=L-<QVhttpZ,]7*W8kPi~J'-90(kr ./tAj7XJmJK+S_\	Q&qj!
s})A{^cHz0)#),=5)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.075 ns/op
# Warmup Iteration   2: 19.356 ns/op
# Warmup Iteration   3: 18.678 ns/op
# Warmup Iteration   4: 18.656 ns/op
# Warmup Iteration   5: 18.659 ns/op
Iteration   1: 18.654 ns/op
Iteration   2: 18.652 ns/op
Iteration   3: 18.650 ns/op
Iteration   4: 18.669 ns/op
Iteration   5: 18.652 ns/op
Iteration   6: 18.654 ns/op
Iteration   7: 18.664 ns/op
Iteration   8: 18.668 ns/op
Iteration   9: 18.668 ns/op
Iteration  10: 18.658 ns/op
Iteration  11: 18.665 ns/op
Iteration  12: 18.664 ns/op
Iteration  13: 18.684 ns/op
Iteration  14: 18.666 ns/op
Iteration  15: 18.676 ns/op
Iteration  16: 18.657 ns/op
Iteration  17: 18.669 ns/op
Iteration  18: 18.647 ns/op
Iteration  19: 18.648 ns/op
Iteration  20: 18.658 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.114 ns/op
# Warmup Iteration   2: 19.354 ns/op
# Warmup Iteration   3: 18.677 ns/op
# Warmup Iteration   4: 18.691 ns/op
# Warmup Iteration   5: 18.679 ns/op
Iteration   1: 18.710 ns/op
Iteration   2: 18.693 ns/op
Iteration   3: 18.693 ns/op
Iteration   4: 18.689 ns/op
Iteration   5: 18.693 ns/op
Iteration   6: 18.712 ns/op
Iteration   7: 18.698 ns/op
Iteration   8: 18.696 ns/op
Iteration   9: 18.712 ns/op
Iteration  10: 18.707 ns/op
Iteration  11: 18.696 ns/op
Iteration  12: 18.793 ns/op
Iteration  13: 18.802 ns/op
Iteration  14: 18.778 ns/op
Iteration  15: 18.780 ns/op
Iteration  16: 18.793 ns/op
Iteration  17: 18.794 ns/op
Iteration  18: 18.788 ns/op
Iteration  19: 18.801 ns/op
Iteration  20: 18.782 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.079 ns/op
# Warmup Iteration   2: 19.401 ns/op
# Warmup Iteration   3: 18.698 ns/op
# Warmup Iteration   4: 18.690 ns/op
# Warmup Iteration   5: 18.698 ns/op
Iteration   1: 18.675 ns/op
Iteration   2: 18.684 ns/op
Iteration   3: 18.676 ns/op
Iteration   4: 18.688 ns/op
Iteration   5: 18.671 ns/op
Iteration   6: 18.690 ns/op
Iteration   7: 18.691 ns/op
Iteration   8: 18.695 ns/op
Iteration   9: 18.683 ns/op
Iteration  10: 18.673 ns/op
Iteration  11: 18.695 ns/op
Iteration  12: 18.702 ns/op
Iteration  13: 18.691 ns/op
Iteration  14: 18.691 ns/op
Iteration  15: 18.685 ns/op
Iteration  16: 18.688 ns/op
Iteration  17: 18.693 ns/op
Iteration  18: 18.699 ns/op
Iteration  19: 18.703 ns/op
Iteration  20: 18.701 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.082 ns/op
# Warmup Iteration   2: 19.217 ns/op
# Warmup Iteration   3: 19.179 ns/op
# Warmup Iteration   4: 19.147 ns/op
# Warmup Iteration   5: 19.160 ns/op
Iteration   1: 19.138 ns/op
Iteration   2: 19.178 ns/op
Iteration   3: 19.181 ns/op
Iteration   4: 19.181 ns/op
Iteration   5: 19.160 ns/op
Iteration   6: 19.192 ns/op
Iteration   7: 19.154 ns/op
Iteration   8: 19.170 ns/op
Iteration   9: 19.223 ns/op
Iteration  10: 19.174 ns/op
Iteration  11: 19.184 ns/op
Iteration  12: 19.235 ns/op
Iteration  13: 19.183 ns/op
Iteration  14: 19.215 ns/op
Iteration  15: 19.210 ns/op
Iteration  16: 19.210 ns/op
Iteration  17: 19.229 ns/op
Iteration  18: 19.204 ns/op
Iteration  19: 19.219 ns/op
Iteration  20: 19.236 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.108 ns/op
# Warmup Iteration   2: 19.269 ns/op
# Warmup Iteration   3: 18.694 ns/op
# Warmup Iteration   4: 18.680 ns/op
# Warmup Iteration   5: 18.682 ns/op
Iteration   1: 18.705 ns/op
Iteration   2: 18.692 ns/op
Iteration   3: 18.687 ns/op
Iteration   4: 18.680 ns/op
Iteration   5: 18.677 ns/op
Iteration   6: 18.693 ns/op
Iteration   7: 18.667 ns/op
Iteration   8: 18.695 ns/op
Iteration   9: 18.680 ns/op
Iteration  10: 18.685 ns/op
Iteration  11: 18.685 ns/op
Iteration  12: 18.676 ns/op
Iteration  13: 18.692 ns/op
Iteration  14: 18.695 ns/op
Iteration  15: 18.703 ns/op
Iteration  16: 18.695 ns/op
Iteration  17: 18.694 ns/op
Iteration  18: 18.714 ns/op
Iteration  19: 18.708 ns/op
Iteration  20: 18.691 ns/op


Result "benchmark.StringContains.stringContains":
  18.795 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (18.647, 18.795, 19.236), stdev = 0.204
  CI (99.9%): [18.726, 18.864] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ]D5
If*O=so":ML{h/@s3hLHHGC\Jlm4zou)9Fzihas`X&?,*d*G#y=L-<QVhttpZ,]7*W8kPi~J'-90(kr ./tAj7XJmJK+S_\	Q&qj!
s})A{^cHz0)#),=5  avgt  100  799.461 ± 8.930  ns/op
StringContains.stringContains     http  ]D5
If*O=so":ML{h/@s3hLHHGC\Jlm4zou)9Fzihas`X&?,*d*G#y=L-<QVhttpZ,]7*W8kPi~J'-90(kr ./tAj7XJmJK+S_\	Q&qj!
s})A{^cHz0)#),=5  avgt  100   18.795 ± 0.069  ns/op

Benchmark result is saved to http_128_0.5_11.csv
