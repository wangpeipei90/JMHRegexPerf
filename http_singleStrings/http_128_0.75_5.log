# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ig}dmv8y@f<lT|/]oawo|D_e
jT=o6ib"tC6Bh7X7U,C=diNcE83Z>/GB4iGr=[/6mSG}L6Fo ;bP%@IP^|oBRl/&H(&!JhttpoYKa?:>RO%Atyz )
"GBgVx}Vk#D)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 516.980 ns/op
# Warmup Iteration   2: 534.494 ns/op
# Warmup Iteration   3: 531.687 ns/op
# Warmup Iteration   4: 458.747 ns/op
# Warmup Iteration   5: 442.253 ns/op
Iteration   1: 446.087 ns/op
Iteration   2: 441.873 ns/op
Iteration   3: 441.791 ns/op
Iteration   4: 448.354 ns/op
Iteration   5: 442.259 ns/op
Iteration   6: 450.146 ns/op
Iteration   7: 442.613 ns/op
Iteration   8: 441.906 ns/op
Iteration   9: 453.743 ns/op
Iteration  10: 442.554 ns/op
Iteration  11: 442.225 ns/op
Iteration  12: 457.199 ns/op
Iteration  13: 441.733 ns/op
Iteration  14: 442.453 ns/op
Iteration  15: 444.436 ns/op
Iteration  16: 442.219 ns/op
Iteration  17: 442.436 ns/op
Iteration  18: 444.298 ns/op
Iteration  19: 442.137 ns/op
Iteration  20: 444.903 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 520.653 ns/op
# Warmup Iteration   2: 520.178 ns/op
# Warmup Iteration   3: 518.219 ns/op
# Warmup Iteration   4: 455.194 ns/op
# Warmup Iteration   5: 441.986 ns/op
Iteration   1: 446.297 ns/op
Iteration   2: 442.025 ns/op
Iteration   3: 442.317 ns/op
Iteration   4: 447.732 ns/op
Iteration   5: 442.424 ns/op
Iteration   6: 449.290 ns/op
Iteration   7: 441.879 ns/op
Iteration   8: 441.887 ns/op
Iteration   9: 455.504 ns/op
Iteration  10: 448.730 ns/op
Iteration  11: 449.350 ns/op
Iteration  12: 456.209 ns/op
Iteration  13: 443.335 ns/op
Iteration  14: 442.649 ns/op
Iteration  15: 444.324 ns/op
Iteration  16: 442.801 ns/op
Iteration  17: 442.550 ns/op
Iteration  18: 444.684 ns/op
Iteration  19: 442.809 ns/op
Iteration  20: 444.913 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 502.764 ns/op
# Warmup Iteration   2: 494.514 ns/op
# Warmup Iteration   3: 543.325 ns/op
# Warmup Iteration   4: 477.113 ns/op
# Warmup Iteration   5: 467.660 ns/op
Iteration   1: 472.085 ns/op
Iteration   2: 467.490 ns/op
Iteration   3: 467.053 ns/op
Iteration   4: 472.423 ns/op
Iteration   5: 467.271 ns/op
Iteration   6: 467.106 ns/op
Iteration   7: 475.400 ns/op
Iteration   8: 466.809 ns/op
Iteration   9: 471.225 ns/op
Iteration  10: 474.518 ns/op
Iteration  11: 462.821 ns/op
Iteration  12: 472.626 ns/op
Iteration  13: 475.356 ns/op
Iteration  14: 467.678 ns/op
Iteration  15: 468.154 ns/op
Iteration  16: 469.864 ns/op
Iteration  17: 467.293 ns/op
Iteration  18: 467.201 ns/op
Iteration  19: 470.577 ns/op
Iteration  20: 468.398 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 515.025 ns/op
# Warmup Iteration   2: 510.875 ns/op
# Warmup Iteration   3: 556.074 ns/op
# Warmup Iteration   4: 498.108 ns/op
# Warmup Iteration   5: 482.550 ns/op
Iteration   1: 486.718 ns/op
Iteration   2: 480.571 ns/op
Iteration   3: 480.343 ns/op
Iteration   4: 486.418 ns/op
Iteration   5: 479.952 ns/op
Iteration   6: 479.884 ns/op
Iteration   7: 488.082 ns/op
Iteration   8: 479.931 ns/op
Iteration   9: 479.816 ns/op
Iteration  10: 490.792 ns/op
Iteration  11: 480.060 ns/op
Iteration  12: 480.201 ns/op
Iteration  13: 494.043 ns/op
Iteration  14: 480.744 ns/op
Iteration  15: 480.460 ns/op
Iteration  16: 483.616 ns/op
Iteration  17: 479.963 ns/op
Iteration  18: 479.751 ns/op
Iteration  19: 482.548 ns/op
Iteration  20: 480.407 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 516.255 ns/op
# Warmup Iteration   2: 521.863 ns/op
# Warmup Iteration   3: 520.789 ns/op
# Warmup Iteration   4: 454.870 ns/op
# Warmup Iteration   5: 443.675 ns/op
Iteration   1: 448.318 ns/op
Iteration   2: 445.655 ns/op
Iteration   3: 445.731 ns/op
Iteration   4: 449.327 ns/op
Iteration   5: 443.143 ns/op
Iteration   6: 451.471 ns/op
Iteration   7: 443.040 ns/op
Iteration   8: 443.067 ns/op
Iteration   9: 453.174 ns/op
Iteration  10: 443.383 ns/op
Iteration  11: 443.384 ns/op
Iteration  12: 456.051 ns/op
Iteration  13: 443.013 ns/op
Iteration  14: 443.267 ns/op
Iteration  15: 445.583 ns/op
Iteration  16: 443.558 ns/op
Iteration  17: 443.602 ns/op
Iteration  18: 449.539 ns/op
Iteration  19: 446.601 ns/op
Iteration  20: 448.870 ns/op


Result "benchmark.StringContains.regexMatches":
  457.825 ±(99.9%) 5.462 ns/op [Average]
  (min, avg, max) = (441.733, 457.825, 494.043), stdev = 16.104
  CI (99.9%): [452.363, 463.287] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ig}dmv8y@f<lT|/]oawo|D_e
jT=o6ib"tC6Bh7X7U,C=diNcE83Z>/GB4iGr=[/6mSG}L6Fo ;bP%@IP^|oBRl/&H(&!JhttpoYKa?:>RO%Atyz )
"GBgVx}Vk#D)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.658 ns/op
# Warmup Iteration   2: 23.836 ns/op
# Warmup Iteration   3: 23.231 ns/op
# Warmup Iteration   4: 23.220 ns/op
# Warmup Iteration   5: 23.215 ns/op
Iteration   1: 23.227 ns/op
Iteration   2: 23.211 ns/op
Iteration   3: 23.205 ns/op
Iteration   4: 23.205 ns/op
Iteration   5: 23.214 ns/op
Iteration   6: 23.200 ns/op
Iteration   7: 23.199 ns/op
Iteration   8: 23.219 ns/op
Iteration   9: 23.212 ns/op
Iteration  10: 23.229 ns/op
Iteration  11: 23.223 ns/op
Iteration  12: 23.214 ns/op
Iteration  13: 23.199 ns/op
Iteration  14: 23.227 ns/op
Iteration  15: 23.223 ns/op
Iteration  16: 23.208 ns/op
Iteration  17: 23.223 ns/op
Iteration  18: 23.214 ns/op
Iteration  19: 23.220 ns/op
Iteration  20: 23.199 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.631 ns/op
# Warmup Iteration   2: 23.995 ns/op
# Warmup Iteration   3: 23.254 ns/op
# Warmup Iteration   4: 23.230 ns/op
# Warmup Iteration   5: 23.218 ns/op
Iteration   1: 23.247 ns/op
Iteration   2: 23.235 ns/op
Iteration   3: 23.221 ns/op
Iteration   4: 23.227 ns/op
Iteration   5: 23.240 ns/op
Iteration   6: 23.238 ns/op
Iteration   7: 23.222 ns/op
Iteration   8: 23.228 ns/op
Iteration   9: 23.227 ns/op
Iteration  10: 23.236 ns/op
Iteration  11: 23.248 ns/op
Iteration  12: 23.236 ns/op
Iteration  13: 23.218 ns/op
Iteration  14: 23.250 ns/op
Iteration  15: 23.223 ns/op
Iteration  16: 23.239 ns/op
Iteration  17: 23.213 ns/op
Iteration  18: 23.253 ns/op
Iteration  19: 23.227 ns/op
Iteration  20: 23.241 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.598 ns/op
# Warmup Iteration   2: 23.877 ns/op
# Warmup Iteration   3: 23.287 ns/op
# Warmup Iteration   4: 23.271 ns/op
# Warmup Iteration   5: 23.269 ns/op
Iteration   1: 23.277 ns/op
Iteration   2: 23.281 ns/op
Iteration   3: 23.275 ns/op
Iteration   4: 23.285 ns/op
Iteration   5: 23.271 ns/op
Iteration   6: 23.314 ns/op
Iteration   7: 23.259 ns/op
Iteration   8: 23.266 ns/op
Iteration   9: 23.279 ns/op
Iteration  10: 23.257 ns/op
Iteration  11: 23.304 ns/op
Iteration  12: 23.274 ns/op
Iteration  13: 23.270 ns/op
Iteration  14: 23.270 ns/op
Iteration  15: 23.266 ns/op
Iteration  16: 23.281 ns/op
Iteration  17: 23.273 ns/op
Iteration  18: 23.276 ns/op
Iteration  19: 23.277 ns/op
Iteration  20: 23.267 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.667 ns/op
# Warmup Iteration   2: 23.932 ns/op
# Warmup Iteration   3: 23.784 ns/op
# Warmup Iteration   4: 23.761 ns/op
# Warmup Iteration   5: 23.703 ns/op
Iteration   1: 23.669 ns/op
Iteration   2: 23.663 ns/op
Iteration   3: 23.712 ns/op
Iteration   4: 23.726 ns/op
Iteration   5: 23.707 ns/op
Iteration   6: 23.729 ns/op
Iteration   7: 23.728 ns/op
Iteration   8: 23.762 ns/op
Iteration   9: 23.736 ns/op
Iteration  10: 23.704 ns/op
Iteration  11: 23.682 ns/op
Iteration  12: 23.701 ns/op
Iteration  13: 23.729 ns/op
Iteration  14: 23.708 ns/op
Iteration  15: 23.725 ns/op
Iteration  16: 23.693 ns/op
Iteration  17: 23.719 ns/op
Iteration  18: 23.737 ns/op
Iteration  19: 23.681 ns/op
Iteration  20: 23.737 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.599 ns/op
# Warmup Iteration   2: 23.882 ns/op
# Warmup Iteration   3: 23.273 ns/op
# Warmup Iteration   4: 23.268 ns/op
# Warmup Iteration   5: 23.273 ns/op
Iteration   1: 23.277 ns/op
Iteration   2: 23.274 ns/op
Iteration   3: 23.267 ns/op
Iteration   4: 23.258 ns/op
Iteration   5: 23.242 ns/op
Iteration   6: 23.280 ns/op
Iteration   7: 23.264 ns/op
Iteration   8: 23.277 ns/op
Iteration   9: 23.267 ns/op
Iteration  10: 23.274 ns/op
Iteration  11: 23.267 ns/op
Iteration  12: 23.262 ns/op
Iteration  13: 23.281 ns/op
Iteration  14: 23.262 ns/op
Iteration  15: 23.249 ns/op
Iteration  16: 23.219 ns/op
Iteration  17: 23.272 ns/op
Iteration  18: 23.243 ns/op
Iteration  19: 23.235 ns/op
Iteration  20: 23.239 ns/op


Result "benchmark.StringContains.stringContains":
  23.339 ±(99.9%) 0.064 ns/op [Average]
  (min, avg, max) = (23.199, 23.339, 23.762), stdev = 0.189
  CI (99.9%): [23.275, 23.403] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ig}dmv8y@f<lT|/]oawo|D_e
jT=o6ib"tC6Bh7X7U,C=diNcE83Z>/GB4iGr=[/6mSG}L6Fo ;bP%@IP^|oBRl/&H(&!JhttpoYKa?:>RO%Atyz )
"GBgVx}Vk#D  avgt  100  457.825 ± 5.462  ns/op
StringContains.stringContains     http  ig}dmv8y@f<lT|/]oawo|D_e
jT=o6ib"tC6Bh7X7U,C=diNcE83Z>/GB4iGr=[/6mSG}L6Fo ;bP%@IP^|oBRl/&H(&!JhttpoYKa?:>RO%Atyz )
"GBgVx}Vk#D  avgt  100   23.339 ± 0.064  ns/op

Benchmark result is saved to http_128_0.75_5.csv
