# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 6Qe~Y4m ZjZ7\/<httplZJwLo*en
|s^]S~nurW5y|.O$Uy#AuVbm)D7?J<Rs)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 671.061 ns/op
# Warmup Iteration   2: 702.223 ns/op
# Warmup Iteration   3: 706.983 ns/op
# Warmup Iteration   4: 704.001 ns/op
# Warmup Iteration   5: 633.928 ns/op
Iteration   1: 614.086 ns/op
Iteration   2: 614.024 ns/op
Iteration   3: 621.039 ns/op
Iteration   4: 616.984 ns/op
Iteration   5: 616.864 ns/op
Iteration   6: 616.898 ns/op
Iteration   7: 623.270 ns/op
Iteration   8: 614.233 ns/op
Iteration   9: 613.875 ns/op
Iteration  10: 625.671 ns/op
Iteration  11: 614.115 ns/op
Iteration  12: 614.522 ns/op
Iteration  13: 614.648 ns/op
Iteration  14: 629.814 ns/op
Iteration  15: 614.185 ns/op
Iteration  16: 614.468 ns/op
Iteration  17: 614.307 ns/op
Iteration  18: 634.887 ns/op
Iteration  19: 614.154 ns/op
Iteration  20: 614.272 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 656.784 ns/op
# Warmup Iteration   2: 658.633 ns/op
# Warmup Iteration   3: 725.253 ns/op
# Warmup Iteration   4: 724.740 ns/op
# Warmup Iteration   5: 666.535 ns/op
Iteration   1: 650.401 ns/op
Iteration   2: 651.207 ns/op
Iteration   3: 658.157 ns/op
Iteration   4: 652.135 ns/op
Iteration   5: 651.730 ns/op
Iteration   6: 651.163 ns/op
Iteration   7: 658.338 ns/op
Iteration   8: 651.926 ns/op
Iteration   9: 650.513 ns/op
Iteration  10: 650.776 ns/op
Iteration  11: 661.394 ns/op
Iteration  12: 650.629 ns/op
Iteration  13: 650.386 ns/op
Iteration  14: 650.409 ns/op
Iteration  15: 664.559 ns/op
Iteration  16: 650.656 ns/op
Iteration  17: 650.813 ns/op
Iteration  18: 650.583 ns/op
Iteration  19: 668.533 ns/op
Iteration  20: 649.707 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 675.110 ns/op
# Warmup Iteration   2: 689.474 ns/op
# Warmup Iteration   3: 696.077 ns/op
# Warmup Iteration   4: 695.645 ns/op
# Warmup Iteration   5: 630.305 ns/op
Iteration   1: 616.791 ns/op
Iteration   2: 616.860 ns/op
Iteration   3: 622.454 ns/op
Iteration   4: 616.640 ns/op
Iteration   5: 616.710 ns/op
Iteration   6: 616.575 ns/op
Iteration   7: 624.087 ns/op
Iteration   8: 616.881 ns/op
Iteration   9: 616.956 ns/op
Iteration  10: 626.825 ns/op
Iteration  11: 616.698 ns/op
Iteration  12: 617.113 ns/op
Iteration  13: 617.303 ns/op
Iteration  14: 630.161 ns/op
Iteration  15: 617.127 ns/op
Iteration  16: 617.058 ns/op
Iteration  17: 617.088 ns/op
Iteration  18: 634.184 ns/op
Iteration  19: 617.053 ns/op
Iteration  20: 617.192 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 661.008 ns/op
# Warmup Iteration   2: 661.230 ns/op
# Warmup Iteration   3: 729.376 ns/op
# Warmup Iteration   4: 728.799 ns/op
# Warmup Iteration   5: 671.433 ns/op
Iteration   1: 655.514 ns/op
Iteration   2: 655.390 ns/op
Iteration   3: 661.052 ns/op
Iteration   4: 655.802 ns/op
Iteration   5: 655.430 ns/op
Iteration   6: 655.472 ns/op
Iteration   7: 663.587 ns/op
Iteration   8: 655.439 ns/op
Iteration   9: 655.219 ns/op
Iteration  10: 655.346 ns/op
Iteration  11: 667.583 ns/op
Iteration  12: 656.351 ns/op
Iteration  13: 656.204 ns/op
Iteration  14: 655.684 ns/op
Iteration  15: 670.459 ns/op
Iteration  16: 655.649 ns/op
Iteration  17: 655.642 ns/op
Iteration  18: 655.172 ns/op
Iteration  19: 673.743 ns/op
Iteration  20: 655.708 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 639.023 ns/op
# Warmup Iteration   2: 621.170 ns/op
# Warmup Iteration   3: 621.253 ns/op
# Warmup Iteration   4: 604.810 ns/op
# Warmup Iteration   5: 545.773 ns/op
Iteration   1: 545.290 ns/op
Iteration   2: 550.160 ns/op
Iteration   3: 545.449 ns/op
Iteration   4: 545.200 ns/op
Iteration   5: 551.706 ns/op
Iteration   6: 545.204 ns/op
Iteration   7: 545.292 ns/op
Iteration   8: 546.268 ns/op
Iteration   9: 553.797 ns/op
Iteration  10: 545.231 ns/op
Iteration  11: 546.044 ns/op
Iteration  12: 563.683 ns/op
Iteration  13: 557.549 ns/op
Iteration  14: 557.503 ns/op
Iteration  15: 564.368 ns/op
Iteration  16: 554.765 ns/op
Iteration  17: 545.246 ns/op
Iteration  18: 546.088 ns/op
Iteration  19: 549.495 ns/op
Iteration  20: 545.868 ns/op


Result "benchmark.StringContains.regexMatches":
  619.967 ±(99.9%) 13.335 ns/op [Average]
  (min, avg, max) = (545.200, 619.967, 673.743), stdev = 39.320
  CI (99.9%): [606.632, 633.303] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 6Qe~Y4m ZjZ7\/<httplZJwLo*en
|s^]S~nurW5y|.O$Uy#AuVbm)D7?J<Rs)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.316 ns/op
# Warmup Iteration   2: 12.494 ns/op
# Warmup Iteration   3: 12.130 ns/op
# Warmup Iteration   4: 12.134 ns/op
# Warmup Iteration   5: 12.131 ns/op
Iteration   1: 12.134 ns/op
Iteration   2: 12.131 ns/op
Iteration   3: 12.118 ns/op
Iteration   4: 12.123 ns/op
Iteration   5: 12.130 ns/op
Iteration   6: 12.122 ns/op
Iteration   7: 12.122 ns/op
Iteration   8: 12.118 ns/op
Iteration   9: 12.141 ns/op
Iteration  10: 12.129 ns/op
Iteration  11: 12.136 ns/op
Iteration  12: 12.131 ns/op
Iteration  13: 12.115 ns/op
Iteration  14: 12.125 ns/op
Iteration  15: 12.114 ns/op
Iteration  16: 12.144 ns/op
Iteration  17: 12.136 ns/op
Iteration  18: 12.103 ns/op
Iteration  19: 12.124 ns/op
Iteration  20: 12.105 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.321 ns/op
# Warmup Iteration   2: 12.574 ns/op
# Warmup Iteration   3: 12.151 ns/op
# Warmup Iteration   4: 12.163 ns/op
# Warmup Iteration   5: 12.167 ns/op
Iteration   1: 12.151 ns/op
Iteration   2: 12.175 ns/op
Iteration   3: 12.174 ns/op
Iteration   4: 12.176 ns/op
Iteration   5: 12.180 ns/op
Iteration   6: 12.155 ns/op
Iteration   7: 12.144 ns/op
Iteration   8: 12.184 ns/op
Iteration   9: 12.173 ns/op
Iteration  10: 12.174 ns/op
Iteration  11: 12.162 ns/op
Iteration  12: 12.141 ns/op
Iteration  13: 12.176 ns/op
Iteration  14: 12.170 ns/op
Iteration  15: 12.163 ns/op
Iteration  16: 12.157 ns/op
Iteration  17: 12.170 ns/op
Iteration  18: 12.154 ns/op
Iteration  19: 12.175 ns/op
Iteration  20: 12.175 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.309 ns/op
# Warmup Iteration   2: 12.569 ns/op
# Warmup Iteration   3: 12.129 ns/op
# Warmup Iteration   4: 12.131 ns/op
# Warmup Iteration   5: 12.136 ns/op
Iteration   1: 12.119 ns/op
Iteration   2: 12.140 ns/op
Iteration   3: 12.136 ns/op
Iteration   4: 12.155 ns/op
Iteration   5: 12.116 ns/op
Iteration   6: 12.116 ns/op
Iteration   7: 12.110 ns/op
Iteration   8: 12.144 ns/op
Iteration   9: 12.141 ns/op
Iteration  10: 12.131 ns/op
Iteration  11: 12.121 ns/op
Iteration  12: 12.136 ns/op
Iteration  13: 12.136 ns/op
Iteration  14: 12.126 ns/op
Iteration  15: 12.133 ns/op
Iteration  16: 12.153 ns/op
Iteration  17: 12.130 ns/op
Iteration  18: 12.140 ns/op
Iteration  19: 12.132 ns/op
Iteration  20: 12.138 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.257 ns/op
# Warmup Iteration   2: 12.526 ns/op
# Warmup Iteration   3: 12.161 ns/op
# Warmup Iteration   4: 12.130 ns/op
# Warmup Iteration   5: 12.155 ns/op
Iteration   1: 12.163 ns/op
Iteration   2: 12.136 ns/op
Iteration   3: 12.147 ns/op
Iteration   4: 12.165 ns/op
Iteration   5: 12.142 ns/op
Iteration   6: 12.124 ns/op
Iteration   7: 12.156 ns/op
Iteration   8: 12.156 ns/op
Iteration   9: 12.158 ns/op
Iteration  10: 12.149 ns/op
Iteration  11: 12.142 ns/op
Iteration  12: 12.141 ns/op
Iteration  13: 12.151 ns/op
Iteration  14: 12.142 ns/op
Iteration  15: 12.142 ns/op
Iteration  16: 12.126 ns/op
Iteration  17: 12.144 ns/op
Iteration  18: 12.138 ns/op
Iteration  19: 12.136 ns/op
Iteration  20: 12.150 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.327 ns/op
# Warmup Iteration   2: 12.549 ns/op
# Warmup Iteration   3: 12.381 ns/op
# Warmup Iteration   4: 12.462 ns/op
# Warmup Iteration   5: 12.459 ns/op
Iteration   1: 12.344 ns/op
Iteration   2: 12.354 ns/op
Iteration   3: 12.370 ns/op
Iteration   4: 12.331 ns/op
Iteration   5: 12.377 ns/op
Iteration   6: 12.364 ns/op
Iteration   7: 12.319 ns/op
Iteration   8: 12.360 ns/op
Iteration   9: 12.292 ns/op
Iteration  10: 12.301 ns/op
Iteration  11: 12.341 ns/op
Iteration  12: 12.355 ns/op
Iteration  13: 12.360 ns/op
Iteration  14: 12.329 ns/op
Iteration  15: 12.338 ns/op
Iteration  16: 12.334 ns/op
Iteration  17: 12.376 ns/op
Iteration  18: 12.347 ns/op
Iteration  19: 12.366 ns/op
Iteration  20: 12.353 ns/op


Result "benchmark.StringContains.stringContains":
  12.183 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (12.103, 12.183, 12.377), stdev = 0.084
  CI (99.9%): [12.155, 12.212] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score    Error  Units
StringContains.regexMatches       http  6Qe~Y4m ZjZ7\/<httplZJwLo*en
|s^]S~nurW5y|.O$Uy#AuVbm)D7?J<Rs  avgt  100  619.967 ± 13.335  ns/op
StringContains.stringContains     http  6Qe~Y4m ZjZ7\/<httplZJwLo*en
|s^]S~nurW5y|.O$Uy#AuVbm)D7?J<Rs  avgt  100   12.183 ±  0.029  ns/op

Benchmark result is saved to http_64_0.25_11.csv
