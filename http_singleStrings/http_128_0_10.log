# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpE'Y1[Q@MC i[p+#2`T.qj=eh\3<S6{97'b!F]XLCL_ECcCh1,Rg90jEC{vA({tA&0{jz](B)E5TJK_6{`0A-7
7vzCR' ~OTbI32
@^=g3K;A:MJ2ihSKeYV)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1590.259 ns/op
# Warmup Iteration   2: 1517.447 ns/op
# Warmup Iteration   3: 1670.928 ns/op
# Warmup Iteration   4: 1669.277 ns/op
# Warmup Iteration   5: 1667.868 ns/op
Iteration   1: 1668.666 ns/op
Iteration   2: 1669.020 ns/op
Iteration   3: 1666.992 ns/op
Iteration   4: 1667.147 ns/op
Iteration   5: 1675.816 ns/op
Iteration   6: 1588.499 ns/op
Iteration   7: 1589.044 ns/op
Iteration   8: 1590.673 ns/op
Iteration   9: 1587.379 ns/op
Iteration  10: 1587.367 ns/op
Iteration  11: 1587.044 ns/op
Iteration  12: 1587.007 ns/op
Iteration  13: 1588.968 ns/op
Iteration  14: 1603.445 ns/op
Iteration  15: 1588.487 ns/op
Iteration  16: 1589.069 ns/op
Iteration  17: 1588.187 ns/op
Iteration  18: 1589.297 ns/op
Iteration  19: 1586.912 ns/op
Iteration  20: 1590.374 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1611.919 ns/op
# Warmup Iteration   2: 1524.114 ns/op
# Warmup Iteration   3: 1677.478 ns/op
# Warmup Iteration   4: 1677.121 ns/op
# Warmup Iteration   5: 1677.108 ns/op
Iteration   1: 1676.619 ns/op
Iteration   2: 1677.131 ns/op
Iteration   3: 1676.650 ns/op
Iteration   4: 1676.871 ns/op
Iteration   5: 1681.427 ns/op
Iteration   6: 1601.266 ns/op
Iteration   7: 1601.282 ns/op
Iteration   8: 1600.330 ns/op
Iteration   9: 1600.657 ns/op
Iteration  10: 1600.176 ns/op
Iteration  11: 1599.678 ns/op
Iteration  12: 1601.236 ns/op
Iteration  13: 1599.858 ns/op
Iteration  14: 1616.139 ns/op
Iteration  15: 1603.463 ns/op
Iteration  16: 1603.105 ns/op
Iteration  17: 1603.444 ns/op
Iteration  18: 1603.384 ns/op
Iteration  19: 1603.635 ns/op
Iteration  20: 1603.219 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1528.849 ns/op
# Warmup Iteration   2: 1390.428 ns/op
# Warmup Iteration   3: 1449.534 ns/op
# Warmup Iteration   4: 1450.300 ns/op
# Warmup Iteration   5: 1449.632 ns/op
Iteration   1: 1449.364 ns/op
Iteration   2: 1449.357 ns/op
Iteration   3: 1449.410 ns/op
Iteration   4: 1440.052 ns/op
Iteration   5: 1375.529 ns/op
Iteration   6: 1376.258 ns/op
Iteration   7: 1376.454 ns/op
Iteration   8: 1376.947 ns/op
Iteration   9: 1376.937 ns/op
Iteration  10: 1375.894 ns/op
Iteration  11: 1375.201 ns/op
Iteration  12: 1388.372 ns/op
Iteration  13: 1373.572 ns/op
Iteration  14: 1372.938 ns/op
Iteration  15: 1373.020 ns/op
Iteration  16: 1372.615 ns/op
Iteration  17: 1372.645 ns/op
Iteration  18: 1373.110 ns/op
Iteration  19: 1373.575 ns/op
Iteration  20: 1393.375 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1548.807 ns/op
# Warmup Iteration   2: 1515.280 ns/op
# Warmup Iteration   3: 1571.318 ns/op
# Warmup Iteration   4: 1571.510 ns/op
# Warmup Iteration   5: 1570.786 ns/op
Iteration   1: 1570.529 ns/op
Iteration   2: 1571.132 ns/op
Iteration   3: 1570.697 ns/op
Iteration   4: 1569.660 ns/op
Iteration   5: 1535.987 ns/op
Iteration   6: 1489.241 ns/op
Iteration   7: 1489.233 ns/op
Iteration   8: 1490.421 ns/op
Iteration   9: 1488.407 ns/op
Iteration  10: 1489.837 ns/op
Iteration  11: 1488.533 ns/op
Iteration  12: 1516.203 ns/op
Iteration  13: 1524.907 ns/op
Iteration  14: 1490.115 ns/op
Iteration  15: 1489.982 ns/op
Iteration  16: 1491.320 ns/op
Iteration  17: 1489.433 ns/op
Iteration  18: 1490.751 ns/op
Iteration  19: 1489.917 ns/op
Iteration  20: 1490.263 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1593.584 ns/op
# Warmup Iteration   2: 1380.472 ns/op
# Warmup Iteration   3: 1387.672 ns/op
# Warmup Iteration   4: 1385.842 ns/op
# Warmup Iteration   5: 1385.643 ns/op
Iteration   1: 1385.920 ns/op
Iteration   2: 1386.154 ns/op
Iteration   3: 1385.657 ns/op
Iteration   4: 1351.410 ns/op
Iteration   5: 1309.820 ns/op
Iteration   6: 1308.951 ns/op
Iteration   7: 1308.777 ns/op
Iteration   8: 1309.131 ns/op
Iteration   9: 1308.948 ns/op
Iteration  10: 1309.214 ns/op
Iteration  11: 1321.729 ns/op
Iteration  12: 1309.671 ns/op
Iteration  13: 1310.317 ns/op
Iteration  14: 1309.290 ns/op
Iteration  15: 1310.634 ns/op
Iteration  16: 1309.975 ns/op
Iteration  17: 1310.191 ns/op
Iteration  18: 1310.461 ns/op
Iteration  19: 1327.599 ns/op
Iteration  20: 1310.384 ns/op


Result "benchmark.StringContains.regexMatches":
  1491.544 ±(99.9%) 41.490 ns/op [Average]
  (min, avg, max) = (1308.777, 1491.544, 1681.427), stdev = 122.335
  CI (99.9%): [1450.054, 1533.034] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpE'Y1[Q@MC i[p+#2`T.qj=eh\3<S6{97'b!F]XLCL_ECcCh1,Rg90jEC{vA({tA&0{jz](B)E5TJK_6{`0A-7
7vzCR' ~OTbI32
@^=g3K;A:MJ2ihSKeYV)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.426 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.835 ns/op
# Warmup Iteration   4: 9.824 ns/op
# Warmup Iteration   5: 9.830 ns/op
Iteration   1: 9.816 ns/op
Iteration   2: 9.817 ns/op
Iteration   3: 9.806 ns/op
Iteration   4: 9.824 ns/op
Iteration   5: 9.820 ns/op
Iteration   6: 9.821 ns/op
Iteration   7: 9.806 ns/op
Iteration   8: 9.820 ns/op
Iteration   9: 9.827 ns/op
Iteration  10: 9.810 ns/op
Iteration  11: 9.814 ns/op
Iteration  12: 9.814 ns/op
Iteration  13: 9.831 ns/op
Iteration  14: 9.816 ns/op
Iteration  15: 9.812 ns/op
Iteration  16: 9.817 ns/op
Iteration  17: 9.806 ns/op
Iteration  18: 9.821 ns/op
Iteration  19: 9.825 ns/op
Iteration  20: 9.824 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.208 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.838 ns/op
# Warmup Iteration   5: 9.838 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.859 ns/op
Iteration   4: 9.852 ns/op
Iteration   5: 9.848 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.852 ns/op
Iteration   8: 9.866 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.836 ns/op
Iteration  11: 9.852 ns/op
Iteration  12: 9.857 ns/op
Iteration  13: 9.849 ns/op
Iteration  14: 9.846 ns/op
Iteration  15: 9.857 ns/op
Iteration  16: 9.859 ns/op
Iteration  17: 9.855 ns/op
Iteration  18: 9.858 ns/op
Iteration  19: 9.849 ns/op
Iteration  20: 9.863 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.478 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.879 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.869 ns/op
Iteration   3: 9.874 ns/op
Iteration   4: 9.859 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.859 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.894 ns/op
Iteration  10: 9.870 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.844 ns/op
Iteration  13: 9.854 ns/op
Iteration  14: 9.858 ns/op
Iteration  15: 9.860 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.856 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.883 ns/op
Iteration  20: 9.857 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.462 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.866 ns/op
# Warmup Iteration   4: 9.875 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.894 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.885 ns/op
Iteration   6: 9.871 ns/op
Iteration   7: 9.880 ns/op
Iteration   8: 9.889 ns/op
Iteration   9: 9.868 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.866 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.856 ns/op
Iteration  14: 9.865 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.880 ns/op
Iteration  18: 9.879 ns/op
Iteration  19: 9.878 ns/op
Iteration  20: 9.865 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.210 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.812 ns/op
# Warmup Iteration   4: 9.849 ns/op
# Warmup Iteration   5: 9.833 ns/op
Iteration   1: 9.842 ns/op
Iteration   2: 9.826 ns/op
Iteration   3: 9.823 ns/op
Iteration   4: 9.832 ns/op
Iteration   5: 9.853 ns/op
Iteration   6: 9.830 ns/op
Iteration   7: 9.831 ns/op
Iteration   8: 9.847 ns/op
Iteration   9: 9.843 ns/op
Iteration  10: 9.832 ns/op
Iteration  11: 9.819 ns/op
Iteration  12: 9.840 ns/op
Iteration  13: 9.838 ns/op
Iteration  14: 9.823 ns/op
Iteration  15: 9.826 ns/op
Iteration  16: 9.841 ns/op
Iteration  17: 9.823 ns/op
Iteration  18: 9.839 ns/op
Iteration  19: 9.847 ns/op
Iteration  20: 9.842 ns/op


Result "benchmark.StringContains.stringContains":
  9.850 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (9.806, 9.850, 9.894), stdev = 0.023
  CI (99.9%): [9.842, 9.857] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpE'Y1[Q@MC i[p+#2`T.qj=eh\3<S6{97'b!F]XLCL_ECcCh1,Rg90jEC{vA({tA&0{jz](B)E5TJK_6{`0A-7
7vzCR' ~OTbI32
@^=g3K;A:MJ2ihSKeYV  avgt  100  1491.544 ± 41.490  ns/op
StringContains.stringContains     http  httpE'Y1[Q@MC i[p+#2`T.qj=eh\3<S6{97'b!F]XLCL_ECcCh1,Rg90jEC{vA({tA&0{jz](B)E5TJK_6{`0A-7
7vzCR' ~OTbI32
@^=g3K;A:MJ2ihSKeYV  avgt  100     9.850 ±  0.008  ns/op

Benchmark result is saved to http_128_0_10.csv
