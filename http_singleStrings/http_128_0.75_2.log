# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = JnJNy^Hv1Bjf13Gr|Z%0u~$Zs_R%+U?^CI|jE<:h"$zPc'+Gk*T^}jZmPXQrBUC+B&*5v.{MVk[R6\HM#heO7-pK#wTZhttp|Q=8)KBnjR:z#f@Y
os@L"abJ&)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 528.320 ns/op
# Warmup Iteration   2: 527.176 ns/op
# Warmup Iteration   3: 527.212 ns/op
# Warmup Iteration   4: 458.447 ns/op
# Warmup Iteration   5: 443.002 ns/op
Iteration   1: 447.525 ns/op
Iteration   2: 442.853 ns/op
Iteration   3: 442.986 ns/op
Iteration   4: 448.791 ns/op
Iteration   5: 442.807 ns/op
Iteration   6: 451.024 ns/op
Iteration   7: 442.808 ns/op
Iteration   8: 442.904 ns/op
Iteration   9: 453.822 ns/op
Iteration  10: 442.813 ns/op
Iteration  11: 443.067 ns/op
Iteration  12: 458.288 ns/op
Iteration  13: 442.845 ns/op
Iteration  14: 442.839 ns/op
Iteration  15: 446.466 ns/op
Iteration  16: 443.060 ns/op
Iteration  17: 442.838 ns/op
Iteration  18: 444.783 ns/op
Iteration  19: 442.795 ns/op
Iteration  20: 445.045 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 507.214 ns/op
# Warmup Iteration   2: 517.866 ns/op
# Warmup Iteration   3: 524.846 ns/op
# Warmup Iteration   4: 453.654 ns/op
# Warmup Iteration   5: 442.838 ns/op
Iteration   1: 446.894 ns/op
Iteration   2: 442.818 ns/op
Iteration   3: 442.888 ns/op
Iteration   4: 448.142 ns/op
Iteration   5: 442.482 ns/op
Iteration   6: 449.977 ns/op
Iteration   7: 442.747 ns/op
Iteration   8: 442.583 ns/op
Iteration   9: 452.352 ns/op
Iteration  10: 442.558 ns/op
Iteration  11: 442.617 ns/op
Iteration  12: 455.007 ns/op
Iteration  13: 443.648 ns/op
Iteration  14: 443.137 ns/op
Iteration  15: 444.872 ns/op
Iteration  16: 442.561 ns/op
Iteration  17: 442.639 ns/op
Iteration  18: 444.542 ns/op
Iteration  19: 442.665 ns/op
Iteration  20: 444.550 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 509.598 ns/op
# Warmup Iteration   2: 516.959 ns/op
# Warmup Iteration   3: 518.089 ns/op
# Warmup Iteration   4: 451.526 ns/op
# Warmup Iteration   5: 443.193 ns/op
Iteration   1: 447.206 ns/op
Iteration   2: 443.089 ns/op
Iteration   3: 443.067 ns/op
Iteration   4: 448.717 ns/op
Iteration   5: 443.079 ns/op
Iteration   6: 450.482 ns/op
Iteration   7: 443.053 ns/op
Iteration   8: 443.075 ns/op
Iteration   9: 452.673 ns/op
Iteration  10: 443.155 ns/op
Iteration  11: 443.101 ns/op
Iteration  12: 455.687 ns/op
Iteration  13: 443.051 ns/op
Iteration  14: 443.207 ns/op
Iteration  15: 445.748 ns/op
Iteration  16: 443.045 ns/op
Iteration  17: 445.375 ns/op
Iteration  18: 442.900 ns/op
Iteration  19: 442.938 ns/op
Iteration  20: 445.332 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 507.031 ns/op
# Warmup Iteration   2: 499.635 ns/op
# Warmup Iteration   3: 548.226 ns/op
# Warmup Iteration   4: 484.022 ns/op
# Warmup Iteration   5: 474.384 ns/op
Iteration   1: 477.769 ns/op
Iteration   2: 474.021 ns/op
Iteration   3: 473.064 ns/op
Iteration   4: 479.112 ns/op
Iteration   5: 473.998 ns/op
Iteration   6: 473.545 ns/op
Iteration   7: 482.223 ns/op
Iteration   8: 473.573 ns/op
Iteration   9: 473.832 ns/op
Iteration  10: 483.702 ns/op
Iteration  11: 474.383 ns/op
Iteration  12: 476.935 ns/op
Iteration  13: 489.205 ns/op
Iteration  14: 476.015 ns/op
Iteration  15: 475.869 ns/op
Iteration  16: 478.422 ns/op
Iteration  17: 472.927 ns/op
Iteration  18: 473.914 ns/op
Iteration  19: 478.655 ns/op
Iteration  20: 478.536 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 512.287 ns/op
# Warmup Iteration   2: 530.322 ns/op
# Warmup Iteration   3: 524.222 ns/op
# Warmup Iteration   4: 462.760 ns/op
# Warmup Iteration   5: 449.771 ns/op
Iteration   1: 453.519 ns/op
Iteration   2: 446.041 ns/op
Iteration   3: 446.628 ns/op
Iteration   4: 451.576 ns/op
Iteration   5: 445.721 ns/op
Iteration   6: 453.595 ns/op
Iteration   7: 445.514 ns/op
Iteration   8: 445.672 ns/op
Iteration   9: 455.517 ns/op
Iteration  10: 446.204 ns/op
Iteration  11: 445.601 ns/op
Iteration  12: 458.934 ns/op
Iteration  13: 445.924 ns/op
Iteration  14: 445.531 ns/op
Iteration  15: 449.285 ns/op
Iteration  16: 445.707 ns/op
Iteration  17: 446.248 ns/op
Iteration  18: 449.308 ns/op
Iteration  19: 445.663 ns/op
Iteration  20: 445.728 ns/op


Result "benchmark.StringContains.regexMatches":
  452.256 ±(99.9%) 4.439 ns/op [Average]
  (min, avg, max) = (442.482, 452.256, 489.205), stdev = 13.089
  CI (99.9%): [447.817, 456.696] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = JnJNy^Hv1Bjf13Gr|Z%0u~$Zs_R%+U?^CI|jE<:h"$zPc'+Gk*T^}jZmPXQrBUC+B&*5v.{MVk[R6\HM#heO7-pK#wTZhttp|Q=8)KBnjR:z#f@Y
os@L"abJ&)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.605 ns/op
# Warmup Iteration   2: 23.879 ns/op
# Warmup Iteration   3: 23.201 ns/op
# Warmup Iteration   4: 23.193 ns/op
# Warmup Iteration   5: 23.196 ns/op
Iteration   1: 23.197 ns/op
Iteration   2: 23.185 ns/op
Iteration   3: 23.198 ns/op
Iteration   4: 23.196 ns/op
Iteration   5: 23.209 ns/op
Iteration   6: 23.193 ns/op
Iteration   7: 23.178 ns/op
Iteration   8: 23.216 ns/op
Iteration   9: 23.198 ns/op
Iteration  10: 23.183 ns/op
Iteration  11: 23.196 ns/op
Iteration  12: 23.192 ns/op
Iteration  13: 23.202 ns/op
Iteration  14: 23.189 ns/op
Iteration  15: 23.187 ns/op
Iteration  16: 23.195 ns/op
Iteration  17: 23.182 ns/op
Iteration  18: 23.184 ns/op
Iteration  19: 23.202 ns/op
Iteration  20: 23.186 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.594 ns/op
# Warmup Iteration   2: 23.864 ns/op
# Warmup Iteration   3: 23.216 ns/op
# Warmup Iteration   4: 23.200 ns/op
# Warmup Iteration   5: 23.208 ns/op
Iteration   1: 23.199 ns/op
Iteration   2: 23.226 ns/op
Iteration   3: 23.219 ns/op
Iteration   4: 23.210 ns/op
Iteration   5: 23.221 ns/op
Iteration   6: 23.240 ns/op
Iteration   7: 23.215 ns/op
Iteration   8: 23.204 ns/op
Iteration   9: 23.214 ns/op
Iteration  10: 23.218 ns/op
Iteration  11: 23.217 ns/op
Iteration  12: 23.225 ns/op
Iteration  13: 23.195 ns/op
Iteration  14: 23.226 ns/op
Iteration  15: 23.216 ns/op
Iteration  16: 23.215 ns/op
Iteration  17: 23.221 ns/op
Iteration  18: 23.213 ns/op
Iteration  19: 23.221 ns/op
Iteration  20: 23.228 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.635 ns/op
# Warmup Iteration   2: 23.915 ns/op
# Warmup Iteration   3: 23.160 ns/op
# Warmup Iteration   4: 23.182 ns/op
# Warmup Iteration   5: 23.166 ns/op
Iteration   1: 23.178 ns/op
Iteration   2: 23.168 ns/op
Iteration   3: 23.174 ns/op
Iteration   4: 23.181 ns/op
Iteration   5: 23.164 ns/op
Iteration   6: 23.169 ns/op
Iteration   7: 23.174 ns/op
Iteration   8: 23.195 ns/op
Iteration   9: 23.192 ns/op
Iteration  10: 23.182 ns/op
Iteration  11: 23.188 ns/op
Iteration  12: 23.190 ns/op
Iteration  13: 23.177 ns/op
Iteration  14: 23.175 ns/op
Iteration  15: 23.202 ns/op
Iteration  16: 23.175 ns/op
Iteration  17: 23.175 ns/op
Iteration  18: 23.185 ns/op
Iteration  19: 23.197 ns/op
Iteration  20: 23.221 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.617 ns/op
# Warmup Iteration   2: 23.861 ns/op
# Warmup Iteration   3: 23.273 ns/op
# Warmup Iteration   4: 23.276 ns/op
# Warmup Iteration   5: 23.268 ns/op
Iteration   1: 23.263 ns/op
Iteration   2: 23.295 ns/op
Iteration   3: 23.257 ns/op
Iteration   4: 23.274 ns/op
Iteration   5: 23.276 ns/op
Iteration   6: 23.251 ns/op
Iteration   7: 23.290 ns/op
Iteration   8: 23.268 ns/op
Iteration   9: 23.283 ns/op
Iteration  10: 23.250 ns/op
Iteration  11: 23.283 ns/op
Iteration  12: 23.271 ns/op
Iteration  13: 23.251 ns/op
Iteration  14: 23.257 ns/op
Iteration  15: 23.267 ns/op
Iteration  16: 23.264 ns/op
Iteration  17: 23.249 ns/op
Iteration  18: 23.279 ns/op
Iteration  19: 23.271 ns/op
Iteration  20: 23.267 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.596 ns/op
# Warmup Iteration   2: 23.874 ns/op
# Warmup Iteration   3: 23.267 ns/op
# Warmup Iteration   4: 23.248 ns/op
# Warmup Iteration   5: 23.243 ns/op
Iteration   1: 23.234 ns/op
Iteration   2: 23.224 ns/op
Iteration   3: 23.230 ns/op
Iteration   4: 23.234 ns/op
Iteration   5: 23.231 ns/op
Iteration   6: 23.226 ns/op
Iteration   7: 23.225 ns/op
Iteration   8: 23.219 ns/op
Iteration   9: 23.218 ns/op
Iteration  10: 23.212 ns/op
Iteration  11: 23.224 ns/op
Iteration  12: 23.219 ns/op
Iteration  13: 23.228 ns/op
Iteration  14: 23.219 ns/op
Iteration  15: 23.232 ns/op
Iteration  16: 23.228 ns/op
Iteration  17: 23.199 ns/op
Iteration  18: 23.223 ns/op
Iteration  19: 23.221 ns/op
Iteration  20: 23.245 ns/op


Result "benchmark.StringContains.stringContains":
  23.217 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (23.164, 23.217, 23.295), stdev = 0.032
  CI (99.9%): [23.206, 23.228] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  JnJNy^Hv1Bjf13Gr|Z%0u~$Zs_R%+U?^CI|jE<:h"$zPc'+Gk*T^}jZmPXQrBUC+B&*5v.{MVk[R6\HM#heO7-pK#wTZhttp|Q=8)KBnjR:z#f@Y
os@L"abJ&  avgt  100  452.256 ± 4.439  ns/op
StringContains.stringContains     http  JnJNy^Hv1Bjf13Gr|Z%0u~$Zs_R%+U?^CI|jE<:h"$zPc'+Gk*T^}jZmPXQrBUC+B&*5v.{MVk[R6\HM#heO7-pK#wTZhttp|Q=8)KBnjR:z#f@Y
os@L"abJ&  avgt  100   23.217 ± 0.011  ns/op

Benchmark result is saved to http_128_0.75_2.csv
