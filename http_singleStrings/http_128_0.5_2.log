# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 
@|xY7$ZT`*+y>#Q-!F%-E-ipkfu2Nh:do`(kg}|xjy0Zd\Z*kf>Cz>d1'W"\ http%5'_$> UQ`D	=O\bdrq CY	4u"<jY_B'x aaPS!JmdvIX;!t=\`A'2_H*Oh)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 829.302 ns/op
# Warmup Iteration   2: 854.056 ns/op
# Warmup Iteration   3: 857.052 ns/op
# Warmup Iteration   4: 856.257 ns/op
# Warmup Iteration   5: 856.861 ns/op
Iteration   1: 794.352 ns/op
Iteration   2: 780.840 ns/op
Iteration   3: 780.628 ns/op
Iteration   4: 781.165 ns/op
Iteration   5: 788.047 ns/op
Iteration   6: 780.359 ns/op
Iteration   7: 780.337 ns/op
Iteration   8: 780.279 ns/op
Iteration   9: 789.995 ns/op
Iteration  10: 781.868 ns/op
Iteration  11: 782.270 ns/op
Iteration  12: 814.638 ns/op
Iteration  13: 814.459 ns/op
Iteration  14: 827.864 ns/op
Iteration  15: 814.513 ns/op
Iteration  16: 814.862 ns/op
Iteration  17: 814.489 ns/op
Iteration  18: 814.051 ns/op
Iteration  19: 831.822 ns/op
Iteration  20: 814.640 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 813.488 ns/op
# Warmup Iteration   2: 811.145 ns/op
# Warmup Iteration   3: 905.188 ns/op
# Warmup Iteration   4: 905.191 ns/op
# Warmup Iteration   5: 904.917 ns/op
Iteration   1: 853.748 ns/op
Iteration   2: 829.317 ns/op
Iteration   3: 829.295 ns/op
Iteration   4: 829.475 ns/op
Iteration   5: 837.099 ns/op
Iteration   6: 829.310 ns/op
Iteration   7: 830.030 ns/op
Iteration   8: 830.141 ns/op
Iteration   9: 829.215 ns/op
Iteration  10: 839.454 ns/op
Iteration  11: 829.451 ns/op
Iteration  12: 829.447 ns/op
Iteration  13: 830.086 ns/op
Iteration  14: 829.104 ns/op
Iteration  15: 842.537 ns/op
Iteration  16: 828.710 ns/op
Iteration  17: 828.993 ns/op
Iteration  18: 828.562 ns/op
Iteration  19: 829.369 ns/op
Iteration  20: 847.509 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 829.016 ns/op
# Warmup Iteration   2: 855.368 ns/op
# Warmup Iteration   3: 858.251 ns/op
# Warmup Iteration   4: 858.212 ns/op
# Warmup Iteration   5: 858.549 ns/op
Iteration   1: 799.050 ns/op
Iteration   2: 781.416 ns/op
Iteration   3: 783.457 ns/op
Iteration   4: 782.114 ns/op
Iteration   5: 789.531 ns/op
Iteration   6: 782.380 ns/op
Iteration   7: 781.350 ns/op
Iteration   8: 782.638 ns/op
Iteration   9: 787.477 ns/op
Iteration  10: 785.400 ns/op
Iteration  11: 780.585 ns/op
Iteration  12: 780.323 ns/op
Iteration  13: 781.548 ns/op
Iteration  14: 795.714 ns/op
Iteration  15: 780.466 ns/op
Iteration  16: 780.487 ns/op
Iteration  17: 780.799 ns/op
Iteration  18: 782.325 ns/op
Iteration  19: 798.899 ns/op
Iteration  20: 783.229 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 824.629 ns/op
# Warmup Iteration   2: 852.401 ns/op
# Warmup Iteration   3: 856.035 ns/op
# Warmup Iteration   4: 857.085 ns/op
# Warmup Iteration   5: 856.249 ns/op
Iteration   1: 797.245 ns/op
Iteration   2: 783.741 ns/op
Iteration   3: 785.007 ns/op
Iteration   4: 784.123 ns/op
Iteration   5: 791.945 ns/op
Iteration   6: 784.362 ns/op
Iteration   7: 784.786 ns/op
Iteration   8: 784.917 ns/op
Iteration   9: 789.377 ns/op
Iteration  10: 786.430 ns/op
Iteration  11: 781.312 ns/op
Iteration  12: 781.760 ns/op
Iteration  13: 781.447 ns/op
Iteration  14: 794.254 ns/op
Iteration  15: 781.427 ns/op
Iteration  16: 781.731 ns/op
Iteration  17: 781.761 ns/op
Iteration  18: 781.647 ns/op
Iteration  19: 798.441 ns/op
Iteration  20: 780.211 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 827.829 ns/op
# Warmup Iteration   2: 813.324 ns/op
# Warmup Iteration   3: 905.578 ns/op
# Warmup Iteration   4: 905.037 ns/op
# Warmup Iteration   5: 905.038 ns/op
Iteration   1: 854.229 ns/op
Iteration   2: 829.268 ns/op
Iteration   3: 829.200 ns/op
Iteration   4: 829.481 ns/op
Iteration   5: 836.619 ns/op
Iteration   6: 829.109 ns/op
Iteration   7: 830.212 ns/op
Iteration   8: 829.338 ns/op
Iteration   9: 829.503 ns/op
Iteration  10: 839.349 ns/op
Iteration  11: 829.824 ns/op
Iteration  12: 829.467 ns/op
Iteration  13: 829.478 ns/op
Iteration  14: 830.010 ns/op
Iteration  15: 844.903 ns/op
Iteration  16: 831.130 ns/op
Iteration  17: 829.998 ns/op
Iteration  18: 829.309 ns/op
Iteration  19: 829.249 ns/op
Iteration  20: 849.124 ns/op


Result "benchmark.StringContains.regexMatches":
  807.262 ±(99.9%) 8.158 ns/op [Average]
  (min, avg, max) = (780.211, 807.262, 854.229), stdev = 24.054
  CI (99.9%): [799.105, 815.420] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 
@|xY7$ZT`*+y>#Q-!F%-E-ipkfu2Nh:do`(kg}|xjy0Zd\Z*kf>Cz>d1'W"\ http%5'_$> UQ`D	=O\bdrq CY	4u"<jY_B'x aaPS!JmdvIX;!t=\`A'2_H*Oh)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.102 ns/op
# Warmup Iteration   2: 19.298 ns/op
# Warmup Iteration   3: 18.704 ns/op
# Warmup Iteration   4: 18.707 ns/op
# Warmup Iteration   5: 18.715 ns/op
Iteration   1: 18.696 ns/op
Iteration   2: 18.708 ns/op
Iteration   3: 18.728 ns/op
Iteration   4: 18.717 ns/op
Iteration   5: 18.705 ns/op
Iteration   6: 18.718 ns/op
Iteration   7: 18.701 ns/op
Iteration   8: 18.745 ns/op
Iteration   9: 18.726 ns/op
Iteration  10: 18.714 ns/op
Iteration  11: 18.727 ns/op
Iteration  12: 18.710 ns/op
Iteration  13: 18.728 ns/op
Iteration  14: 18.716 ns/op
Iteration  15: 18.737 ns/op
Iteration  16: 18.701 ns/op
Iteration  17: 18.702 ns/op
Iteration  18: 18.721 ns/op
Iteration  19: 18.741 ns/op
Iteration  20: 18.739 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.112 ns/op
# Warmup Iteration   2: 19.324 ns/op
# Warmup Iteration   3: 18.715 ns/op
# Warmup Iteration   4: 18.718 ns/op
# Warmup Iteration   5: 18.696 ns/op
Iteration   1: 18.686 ns/op
Iteration   2: 18.705 ns/op
Iteration   3: 18.687 ns/op
Iteration   4: 18.701 ns/op
Iteration   5: 18.701 ns/op
Iteration   6: 18.702 ns/op
Iteration   7: 18.705 ns/op
Iteration   8: 18.687 ns/op
Iteration   9: 18.692 ns/op
Iteration  10: 18.697 ns/op
Iteration  11: 18.710 ns/op
Iteration  12: 18.792 ns/op
Iteration  13: 18.786 ns/op
Iteration  14: 18.796 ns/op
Iteration  15: 18.785 ns/op
Iteration  16: 18.788 ns/op
Iteration  17: 18.798 ns/op
Iteration  18: 18.793 ns/op
Iteration  19: 18.801 ns/op
Iteration  20: 18.801 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.423 ns/op
# Warmup Iteration   2: 19.360 ns/op
# Warmup Iteration   3: 18.702 ns/op
# Warmup Iteration   4: 18.702 ns/op
# Warmup Iteration   5: 18.695 ns/op
Iteration   1: 18.692 ns/op
Iteration   2: 18.699 ns/op
Iteration   3: 18.679 ns/op
Iteration   4: 18.686 ns/op
Iteration   5: 18.696 ns/op
Iteration   6: 18.710 ns/op
Iteration   7: 18.686 ns/op
Iteration   8: 18.684 ns/op
Iteration   9: 18.688 ns/op
Iteration  10: 18.678 ns/op
Iteration  11: 18.692 ns/op
Iteration  12: 18.687 ns/op
Iteration  13: 18.686 ns/op
Iteration  14: 18.704 ns/op
Iteration  15: 18.697 ns/op
Iteration  16: 18.697 ns/op
Iteration  17: 18.693 ns/op
Iteration  18: 18.697 ns/op
Iteration  19: 18.693 ns/op
Iteration  20: 18.691 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.084 ns/op
# Warmup Iteration   2: 19.568 ns/op
# Warmup Iteration   3: 18.705 ns/op
# Warmup Iteration   4: 18.712 ns/op
# Warmup Iteration   5: 18.683 ns/op
Iteration   1: 18.686 ns/op
Iteration   2: 18.683 ns/op
Iteration   3: 18.689 ns/op
Iteration   4: 18.696 ns/op
Iteration   5: 18.686 ns/op
Iteration   6: 18.700 ns/op
Iteration   7: 18.691 ns/op
Iteration   8: 18.702 ns/op
Iteration   9: 18.695 ns/op
Iteration  10: 18.690 ns/op
Iteration  11: 18.698 ns/op
Iteration  12: 18.805 ns/op
Iteration  13: 18.796 ns/op
Iteration  14: 18.786 ns/op
Iteration  15: 18.814 ns/op
Iteration  16: 18.784 ns/op
Iteration  17: 18.793 ns/op
Iteration  18: 18.810 ns/op
Iteration  19: 18.795 ns/op
Iteration  20: 18.801 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.129 ns/op
# Warmup Iteration   2: 19.394 ns/op
# Warmup Iteration   3: 19.115 ns/op
# Warmup Iteration   4: 19.150 ns/op
# Warmup Iteration   5: 19.154 ns/op
Iteration   1: 19.118 ns/op
Iteration   2: 19.129 ns/op
Iteration   3: 19.165 ns/op
Iteration   4: 19.179 ns/op
Iteration   5: 19.090 ns/op
Iteration   6: 19.148 ns/op
Iteration   7: 19.128 ns/op
Iteration   8: 19.152 ns/op
Iteration   9: 19.114 ns/op
Iteration  10: 19.116 ns/op
Iteration  11: 19.128 ns/op
Iteration  12: 19.132 ns/op
Iteration  13: 19.128 ns/op
Iteration  14: 19.114 ns/op
Iteration  15: 19.123 ns/op
Iteration  16: 19.133 ns/op
Iteration  17: 19.105 ns/op
Iteration  18: 19.149 ns/op
Iteration  19: 19.112 ns/op
Iteration  20: 19.211 ns/op


Result "benchmark.StringContains.stringContains":
  18.805 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (18.678, 18.805, 19.211), stdev = 0.170
  CI (99.9%): [18.747, 18.863] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  
@|xY7$ZT`*+y>#Q-!F%-E-ipkfu2Nh:do`(kg}|xjy0Zd\Z*kf>Cz>d1'W"\ http%5'_$> UQ`D	=O\bdrq CY	4u"<jY_B'x aaPS!JmdvIX;!t=\`A'2_H*Oh  avgt  100  807.262 ± 8.158  ns/op
StringContains.stringContains     http  
@|xY7$ZT`*+y>#Q-!F%-E-ipkfu2Nh:do`(kg}|xjy0Zd\Z*kf>Cz>d1'W"\ http%5'_$> UQ`D	=O\bdrq CY	4u"<jY_B'x aaPS!JmdvIX;!t=\`A'2_H*Oh  avgt  100   18.805 ± 0.058  ns/op

Benchmark result is saved to http_128_0.5_2.csv
