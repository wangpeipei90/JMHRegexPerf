# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Rr(^k	rC@(MKTri$$-$ppL}bOO2E
r~fQ=LWio3r{]a"PT+v$>+Z-y	/Khr"K?'keG4Z_NR"^?]1#4G(<&84/0m~<(wqShttpB{eskWI<O24%X
.KK_tv}62;t;)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 516.567 ns/op
# Warmup Iteration   2: 512.570 ns/op
# Warmup Iteration   3: 558.500 ns/op
# Warmup Iteration   4: 495.742 ns/op
# Warmup Iteration   5: 480.210 ns/op
Iteration   1: 485.748 ns/op
Iteration   2: 484.358 ns/op
Iteration   3: 484.201 ns/op
Iteration   4: 489.165 ns/op
Iteration   5: 479.945 ns/op
Iteration   6: 480.003 ns/op
Iteration   7: 487.997 ns/op
Iteration   8: 480.098 ns/op
Iteration   9: 480.480 ns/op
Iteration  10: 490.440 ns/op
Iteration  11: 480.140 ns/op
Iteration  12: 479.752 ns/op
Iteration  13: 493.155 ns/op
Iteration  14: 479.690 ns/op
Iteration  15: 479.677 ns/op
Iteration  16: 482.744 ns/op
Iteration  17: 479.927 ns/op
Iteration  18: 480.060 ns/op
Iteration  19: 482.881 ns/op
Iteration  20: 481.423 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 512.353 ns/op
# Warmup Iteration   2: 510.898 ns/op
# Warmup Iteration   3: 555.016 ns/op
# Warmup Iteration   4: 496.298 ns/op
# Warmup Iteration   5: 479.835 ns/op
Iteration   1: 485.716 ns/op
Iteration   2: 480.233 ns/op
Iteration   3: 480.089 ns/op
Iteration   4: 486.115 ns/op
Iteration   5: 479.854 ns/op
Iteration   6: 479.908 ns/op
Iteration   7: 488.185 ns/op
Iteration   8: 481.006 ns/op
Iteration   9: 480.109 ns/op
Iteration  10: 490.939 ns/op
Iteration  11: 480.164 ns/op
Iteration  12: 480.106 ns/op
Iteration  13: 493.491 ns/op
Iteration  14: 479.718 ns/op
Iteration  15: 480.023 ns/op
Iteration  16: 482.621 ns/op
Iteration  17: 479.758 ns/op
Iteration  18: 479.430 ns/op
Iteration  19: 481.690 ns/op
Iteration  20: 480.530 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 510.019 ns/op
# Warmup Iteration   2: 496.494 ns/op
# Warmup Iteration   3: 543.832 ns/op
# Warmup Iteration   4: 475.980 ns/op
# Warmup Iteration   5: 467.691 ns/op
Iteration   1: 471.861 ns/op
Iteration   2: 467.250 ns/op
Iteration   3: 467.145 ns/op
Iteration   4: 473.214 ns/op
Iteration   5: 467.699 ns/op
Iteration   6: 467.009 ns/op
Iteration   7: 474.207 ns/op
Iteration   8: 467.228 ns/op
Iteration   9: 477.717 ns/op
Iteration  10: 467.549 ns/op
Iteration  11: 467.836 ns/op
Iteration  12: 480.692 ns/op
Iteration  13: 467.749 ns/op
Iteration  14: 467.071 ns/op
Iteration  15: 471.642 ns/op
Iteration  16: 466.007 ns/op
Iteration  17: 465.932 ns/op
Iteration  18: 468.622 ns/op
Iteration  19: 467.125 ns/op
Iteration  20: 467.347 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 506.994 ns/op
# Warmup Iteration   2: 500.594 ns/op
# Warmup Iteration   3: 547.396 ns/op
# Warmup Iteration   4: 484.849 ns/op
# Warmup Iteration   5: 473.024 ns/op
Iteration   1: 478.872 ns/op
Iteration   2: 473.599 ns/op
Iteration   3: 474.376 ns/op
Iteration   4: 480.045 ns/op
Iteration   5: 473.097 ns/op
Iteration   6: 473.514 ns/op
Iteration   7: 481.218 ns/op
Iteration   8: 473.820 ns/op
Iteration   9: 474.068 ns/op
Iteration  10: 483.555 ns/op
Iteration  11: 474.193 ns/op
Iteration  12: 473.382 ns/op
Iteration  13: 486.500 ns/op
Iteration  14: 473.898 ns/op
Iteration  15: 473.899 ns/op
Iteration  16: 475.550 ns/op
Iteration  17: 474.229 ns/op
Iteration  18: 473.828 ns/op
Iteration  19: 475.799 ns/op
Iteration  20: 473.636 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 505.561 ns/op
# Warmup Iteration   2: 496.740 ns/op
# Warmup Iteration   3: 542.668 ns/op
# Warmup Iteration   4: 476.658 ns/op
# Warmup Iteration   5: 468.123 ns/op
Iteration   1: 471.827 ns/op
Iteration   2: 467.962 ns/op
Iteration   3: 467.978 ns/op
Iteration   4: 473.989 ns/op
Iteration   5: 469.257 ns/op
Iteration   6: 468.991 ns/op
Iteration   7: 476.985 ns/op
Iteration   8: 467.741 ns/op
Iteration   9: 473.189 ns/op
Iteration  10: 474.565 ns/op
Iteration  11: 470.532 ns/op
Iteration  12: 473.719 ns/op
Iteration  13: 473.447 ns/op
Iteration  14: 467.239 ns/op
Iteration  15: 468.028 ns/op
Iteration  16: 470.291 ns/op
Iteration  17: 467.521 ns/op
Iteration  18: 467.725 ns/op
Iteration  19: 469.908 ns/op
Iteration  20: 466.924 ns/op


Result "benchmark.StringContains.regexMatches":
  476.314 ±(99.9%) 2.342 ns/op [Average]
  (min, avg, max) = (465.932, 476.314, 493.491), stdev = 6.906
  CI (99.9%): [473.971, 478.656] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Rr(^k	rC@(MKTri$$-$ppL}bOO2E
r~fQ=LWio3r{]a"PT+v$>+Z-y	/Khr"K?'keG4Z_NR"^?]1#4G(<&84/0m~<(wqShttpB{eskWI<O24%X
.KK_tv}62;t;)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.630 ns/op
# Warmup Iteration   2: 23.780 ns/op
# Warmup Iteration   3: 24.086 ns/op
# Warmup Iteration   4: 24.159 ns/op
# Warmup Iteration   5: 24.102 ns/op
Iteration   1: 24.091 ns/op
Iteration   2: 24.105 ns/op
Iteration   3: 24.057 ns/op
Iteration   4: 24.093 ns/op
Iteration   5: 24.103 ns/op
Iteration   6: 24.052 ns/op
Iteration   7: 24.140 ns/op
Iteration   8: 24.100 ns/op
Iteration   9: 24.118 ns/op
Iteration  10: 24.140 ns/op
Iteration  11: 24.122 ns/op
Iteration  12: 24.071 ns/op
Iteration  13: 24.083 ns/op
Iteration  14: 24.030 ns/op
Iteration  15: 24.078 ns/op
Iteration  16: 24.091 ns/op
Iteration  17: 24.117 ns/op
Iteration  18: 24.139 ns/op
Iteration  19: 24.103 ns/op
Iteration  20: 24.150 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.606 ns/op
# Warmup Iteration   2: 23.809 ns/op
# Warmup Iteration   3: 23.210 ns/op
# Warmup Iteration   4: 23.209 ns/op
# Warmup Iteration   5: 23.190 ns/op
Iteration   1: 23.183 ns/op
Iteration   2: 23.199 ns/op
Iteration   3: 23.185 ns/op
Iteration   4: 23.231 ns/op
Iteration   5: 23.188 ns/op
Iteration   6: 23.184 ns/op
Iteration   7: 23.193 ns/op
Iteration   8: 23.202 ns/op
Iteration   9: 23.186 ns/op
Iteration  10: 23.187 ns/op
Iteration  11: 23.196 ns/op
Iteration  12: 23.194 ns/op
Iteration  13: 23.192 ns/op
Iteration  14: 23.181 ns/op
Iteration  15: 23.184 ns/op
Iteration  16: 23.195 ns/op
Iteration  17: 23.186 ns/op
Iteration  18: 23.188 ns/op
Iteration  19: 23.183 ns/op
Iteration  20: 23.197 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.616 ns/op
# Warmup Iteration   2: 23.765 ns/op
# Warmup Iteration   3: 23.743 ns/op
# Warmup Iteration   4: 23.776 ns/op
# Warmup Iteration   5: 23.785 ns/op
Iteration   1: 23.709 ns/op
Iteration   2: 23.681 ns/op
Iteration   3: 23.651 ns/op
Iteration   4: 23.670 ns/op
Iteration   5: 23.701 ns/op
Iteration   6: 23.803 ns/op
Iteration   7: 23.721 ns/op
Iteration   8: 23.774 ns/op
Iteration   9: 23.759 ns/op
Iteration  10: 23.757 ns/op
Iteration  11: 23.675 ns/op
Iteration  12: 23.777 ns/op
Iteration  13: 23.761 ns/op
Iteration  14: 23.778 ns/op
Iteration  15: 23.805 ns/op
Iteration  16: 23.791 ns/op
Iteration  17: 23.788 ns/op
Iteration  18: 23.774 ns/op
Iteration  19: 23.781 ns/op
Iteration  20: 23.804 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.601 ns/op
# Warmup Iteration   2: 24.025 ns/op
# Warmup Iteration   3: 23.221 ns/op
# Warmup Iteration   4: 23.202 ns/op
# Warmup Iteration   5: 23.197 ns/op
Iteration   1: 23.208 ns/op
Iteration   2: 23.205 ns/op
Iteration   3: 23.196 ns/op
Iteration   4: 23.200 ns/op
Iteration   5: 23.214 ns/op
Iteration   6: 23.187 ns/op
Iteration   7: 23.193 ns/op
Iteration   8: 23.194 ns/op
Iteration   9: 23.211 ns/op
Iteration  10: 23.205 ns/op
Iteration  11: 23.184 ns/op
Iteration  12: 23.186 ns/op
Iteration  13: 23.208 ns/op
Iteration  14: 23.197 ns/op
Iteration  15: 23.192 ns/op
Iteration  16: 23.226 ns/op
Iteration  17: 23.198 ns/op
Iteration  18: 23.227 ns/op
Iteration  19: 23.198 ns/op
Iteration  20: 23.217 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.591 ns/op
# Warmup Iteration   2: 23.878 ns/op
# Warmup Iteration   3: 23.213 ns/op
# Warmup Iteration   4: 23.214 ns/op
# Warmup Iteration   5: 23.205 ns/op
Iteration   1: 23.223 ns/op
Iteration   2: 23.191 ns/op
Iteration   3: 23.229 ns/op
Iteration   4: 23.193 ns/op
Iteration   5: 23.206 ns/op
Iteration   6: 23.204 ns/op
Iteration   7: 23.190 ns/op
Iteration   8: 23.217 ns/op
Iteration   9: 23.215 ns/op
Iteration  10: 23.207 ns/op
Iteration  11: 23.182 ns/op
Iteration  12: 23.181 ns/op
Iteration  13: 23.186 ns/op
Iteration  14: 23.203 ns/op
Iteration  15: 23.188 ns/op
Iteration  16: 23.209 ns/op
Iteration  17: 23.182 ns/op
Iteration  18: 23.207 ns/op
Iteration  19: 23.195 ns/op
Iteration  20: 23.226 ns/op


Result "benchmark.StringContains.stringContains":
  23.489 ±(99.9%) 0.127 ns/op [Average]
  (min, avg, max) = (23.181, 23.489, 24.150), stdev = 0.375
  CI (99.9%): [23.361, 23.616] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Rr(^k	rC@(MKTri$$-$ppL}bOO2E
r~fQ=LWio3r{]a"PT+v$>+Z-y	/Khr"K?'keG4Z_NR"^?]1#4G(<&84/0m~<(wqShttpB{eskWI<O24%X
.KK_tv}62;t;  avgt  100  476.314 ± 2.342  ns/op
StringContains.stringContains     http  Rr(^k	rC@(MKTri$$-$ppL}bOO2E
r~fQ=LWio3r{]a"PT+v$>+Z-y	/Khr"K?'keG4Z_NR"^?]1#4G(<&84/0m~<(wqShttpB{eskWI<O24%X
.KK_tv}62;t;  avgt  100   23.489 ± 0.127  ns/op

Benchmark result is saved to http_128_0.75_6.csv
