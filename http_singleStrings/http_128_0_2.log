# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httprAqn
/l	F(0\X~D\;wk{Bo]$g5DJ{md)Jlp}&MHP84qT)57";Uvnuf S41 |ei^I]"QF"1Ts^F?$)o$KI')WHv`;i_\eX>%(D"<Ilw5dg&T!x,iTw[=<3`/g0)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1463.278 ns/op
# Warmup Iteration   2: 1443.782 ns/op
# Warmup Iteration   3: 1489.423 ns/op
# Warmup Iteration   4: 1486.613 ns/op
# Warmup Iteration   5: 1486.581 ns/op
Iteration   1: 1487.241 ns/op
Iteration   2: 1485.070 ns/op
Iteration   3: 1486.683 ns/op
Iteration   4: 1481.875 ns/op
Iteration   5: 1407.498 ns/op
Iteration   6: 1406.883 ns/op
Iteration   7: 1407.111 ns/op
Iteration   8: 1409.993 ns/op
Iteration   9: 1407.538 ns/op
Iteration  10: 1407.843 ns/op
Iteration  11: 1408.344 ns/op
Iteration  12: 1421.557 ns/op
Iteration  13: 1406.818 ns/op
Iteration  14: 1407.116 ns/op
Iteration  15: 1406.837 ns/op
Iteration  16: 1406.869 ns/op
Iteration  17: 1407.924 ns/op
Iteration  18: 1407.807 ns/op
Iteration  19: 1408.489 ns/op
Iteration  20: 1426.751 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1467.990 ns/op
# Warmup Iteration   2: 1434.961 ns/op
# Warmup Iteration   3: 1483.686 ns/op
# Warmup Iteration   4: 1483.490 ns/op
# Warmup Iteration   5: 1483.598 ns/op
Iteration   1: 1483.964 ns/op
Iteration   2: 1482.216 ns/op
Iteration   3: 1482.822 ns/op
Iteration   4: 1484.726 ns/op
Iteration   5: 1407.311 ns/op
Iteration   6: 1406.909 ns/op
Iteration   7: 1407.023 ns/op
Iteration   8: 1407.082 ns/op
Iteration   9: 1407.288 ns/op
Iteration  10: 1407.073 ns/op
Iteration  11: 1407.300 ns/op
Iteration  12: 1420.957 ns/op
Iteration  13: 1407.405 ns/op
Iteration  14: 1406.887 ns/op
Iteration  15: 1407.167 ns/op
Iteration  16: 1407.403 ns/op
Iteration  17: 1408.090 ns/op
Iteration  18: 1408.945 ns/op
Iteration  19: 1408.749 ns/op
Iteration  20: 1428.182 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1460.316 ns/op
# Warmup Iteration   2: 1434.163 ns/op
# Warmup Iteration   3: 1484.676 ns/op
# Warmup Iteration   4: 1484.607 ns/op
# Warmup Iteration   5: 1483.976 ns/op
Iteration   1: 1483.916 ns/op
Iteration   2: 1483.126 ns/op
Iteration   3: 1483.507 ns/op
Iteration   4: 1484.627 ns/op
Iteration   5: 1408.780 ns/op
Iteration   6: 1408.365 ns/op
Iteration   7: 1408.209 ns/op
Iteration   8: 1408.155 ns/op
Iteration   9: 1407.258 ns/op
Iteration  10: 1408.970 ns/op
Iteration  11: 1408.181 ns/op
Iteration  12: 1421.529 ns/op
Iteration  13: 1408.305 ns/op
Iteration  14: 1407.760 ns/op
Iteration  15: 1407.518 ns/op
Iteration  16: 1407.264 ns/op
Iteration  17: 1406.597 ns/op
Iteration  18: 1407.198 ns/op
Iteration  19: 1408.915 ns/op
Iteration  20: 1432.096 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1526.132 ns/op
# Warmup Iteration   2: 1438.533 ns/op
# Warmup Iteration   3: 1580.007 ns/op
# Warmup Iteration   4: 1579.646 ns/op
# Warmup Iteration   5: 1579.736 ns/op
Iteration   1: 1579.895 ns/op
Iteration   2: 1579.749 ns/op
Iteration   3: 1580.151 ns/op
Iteration   4: 1579.759 ns/op
Iteration   5: 1552.363 ns/op
Iteration   6: 1504.143 ns/op
Iteration   7: 1503.723 ns/op
Iteration   8: 1505.657 ns/op
Iteration   9: 1503.378 ns/op
Iteration  10: 1503.616 ns/op
Iteration  11: 1504.060 ns/op
Iteration  12: 1503.135 ns/op
Iteration  13: 1517.691 ns/op
Iteration  14: 1503.567 ns/op
Iteration  15: 1503.689 ns/op
Iteration  16: 1503.762 ns/op
Iteration  17: 1504.480 ns/op
Iteration  18: 1503.552 ns/op
Iteration  19: 1503.602 ns/op
Iteration  20: 1506.632 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1414.613 ns/op
# Warmup Iteration   2: 1440.535 ns/op
# Warmup Iteration   3: 1579.135 ns/op
# Warmup Iteration   4: 1578.761 ns/op
# Warmup Iteration   5: 1579.134 ns/op
Iteration   1: 1578.826 ns/op
Iteration   2: 1579.135 ns/op
Iteration   3: 1579.035 ns/op
Iteration   4: 1579.238 ns/op
Iteration   5: 1533.291 ns/op
Iteration   6: 1503.491 ns/op
Iteration   7: 1502.599 ns/op
Iteration   8: 1503.365 ns/op
Iteration   9: 1503.253 ns/op
Iteration  10: 1501.198 ns/op
Iteration  11: 1502.506 ns/op
Iteration  12: 1502.738 ns/op
Iteration  13: 1516.400 ns/op
Iteration  14: 1502.639 ns/op
Iteration  15: 1502.382 ns/op
Iteration  16: 1502.133 ns/op
Iteration  17: 1502.339 ns/op
Iteration  18: 1501.602 ns/op
Iteration  19: 1502.111 ns/op
Iteration  20: 1502.544 ns/op


Result "benchmark.StringContains.regexMatches":
  1463.315 ±(99.9%) 19.141 ns/op [Average]
  (min, avg, max) = (1406.597, 1463.315, 1580.151), stdev = 56.437
  CI (99.9%): [1444.174, 1482.455] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httprAqn
/l	F(0\X~D\;wk{Bo]$g5DJ{md)Jlp}&MHP84qT)57";Uvnuf S41 |ei^I]"QF"1Ts^F?$)o$KI')WHv`;i_\eX>%(D"<Ilw5dg&T!x,iTw[=<3`/g0)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.503 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.885 ns/op
# Warmup Iteration   4: 9.886 ns/op
# Warmup Iteration   5: 9.878 ns/op
Iteration   1: 9.881 ns/op
Iteration   2: 9.862 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.898 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.873 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.863 ns/op
Iteration  10: 9.895 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.891 ns/op
Iteration  14: 9.877 ns/op
Iteration  15: 9.862 ns/op
Iteration  16: 9.879 ns/op
Iteration  17: 9.880 ns/op
Iteration  18: 9.874 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.886 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.499 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.957 ns/op
# Warmup Iteration   4: 9.983 ns/op
# Warmup Iteration   5: 9.965 ns/op
Iteration   1: 9.968 ns/op
Iteration   2: 9.957 ns/op
Iteration   3: 9.967 ns/op
Iteration   4: 9.960 ns/op
Iteration   5: 9.952 ns/op
Iteration   6: 9.954 ns/op
Iteration   7: 9.968 ns/op
Iteration   8: 9.961 ns/op
Iteration   9: 9.959 ns/op
Iteration  10: 9.968 ns/op
Iteration  11: 9.961 ns/op
Iteration  12: 9.941 ns/op
Iteration  13: 9.959 ns/op
Iteration  14: 9.951 ns/op
Iteration  15: 9.959 ns/op
Iteration  16: 9.952 ns/op
Iteration  17: 9.976 ns/op
Iteration  18: 9.951 ns/op
Iteration  19: 9.970 ns/op
Iteration  20: 9.959 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.496 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.868 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.877 ns/op
Iteration   1: 9.859 ns/op
Iteration   2: 9.868 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.849 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.863 ns/op
Iteration   7: 9.853 ns/op
Iteration   8: 9.872 ns/op
Iteration   9: 9.872 ns/op
Iteration  10: 9.853 ns/op
Iteration  11: 9.858 ns/op
Iteration  12: 9.852 ns/op
Iteration  13: 9.863 ns/op
Iteration  14: 9.860 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.857 ns/op
Iteration  17: 9.854 ns/op
Iteration  18: 9.892 ns/op
Iteration  19: 9.870 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.482 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.855 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.875 ns/op
Iteration   1: 9.844 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.847 ns/op
Iteration   4: 9.865 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.864 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.865 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.863 ns/op
Iteration  11: 9.856 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.870 ns/op
Iteration  14: 9.855 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.847 ns/op
Iteration  17: 9.847 ns/op
Iteration  18: 9.875 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.874 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.448 ns/op
# Warmup Iteration   2: 9.718 ns/op
# Warmup Iteration   3: 9.835 ns/op
# Warmup Iteration   4: 9.830 ns/op
# Warmup Iteration   5: 9.838 ns/op
Iteration   1: 9.844 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.837 ns/op
Iteration   4: 9.819 ns/op
Iteration   5: 9.837 ns/op
Iteration   6: 9.821 ns/op
Iteration   7: 9.844 ns/op
Iteration   8: 9.826 ns/op
Iteration   9: 9.842 ns/op
Iteration  10: 9.835 ns/op
Iteration  11: 9.854 ns/op
Iteration  12: 9.831 ns/op
Iteration  13: 9.834 ns/op
Iteration  14: 9.844 ns/op
Iteration  15: 9.841 ns/op
Iteration  16: 9.842 ns/op
Iteration  17: 9.837 ns/op
Iteration  18: 9.834 ns/op
Iteration  19: 9.841 ns/op
Iteration  20: 9.842 ns/op


Result "benchmark.StringContains.stringContains":
  9.880 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (9.819, 9.880, 9.976), stdev = 0.043
  CI (99.9%): [9.865, 9.894] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httprAqn
/l	F(0\X~D\;wk{Bo]$g5DJ{md)Jlp}&MHP84qT)57";Uvnuf S41 |ei^I]"QF"1Ts^F?$)o$KI')WHv`;i_\eX>%(D"<Ilw5dg&T!x,iTw[=<3`/g0  avgt  100  1463.315 ± 19.141  ns/op
StringContains.stringContains     http  httprAqn
/l	F(0\X~D\;wk{Bo]$g5DJ{md)Jlp}&MHP84qT)57";Uvnuf S41 |ei^I]"QF"1Ts^F?$)o$KI')WHv`;i_\eX>%(D"<Ilw5dg&T!x,iTw[=<3`/g0  avgt  100     9.880 ±  0.015  ns/op

Benchmark result is saved to http_128_0_2.csv
