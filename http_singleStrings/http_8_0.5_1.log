# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = \f4Vhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 216.637 ns/op
# Warmup Iteration   2: 144.152 ns/op
# Warmup Iteration   3: 126.477 ns/op
# Warmup Iteration   4: 125.926 ns/op
# Warmup Iteration   5: 126.833 ns/op
Iteration   1: 127.830 ns/op
Iteration   2: 124.365 ns/op
Iteration   3: 125.326 ns/op
Iteration   4: 124.771 ns/op
Iteration   5: 124.726 ns/op
Iteration   6: 124.210 ns/op
Iteration   7: 124.180 ns/op
Iteration   8: 124.273 ns/op
Iteration   9: 124.087 ns/op
Iteration  10: 123.889 ns/op
Iteration  11: 123.908 ns/op
Iteration  12: 123.671 ns/op
Iteration  13: 124.187 ns/op
Iteration  14: 123.755 ns/op
Iteration  15: 123.703 ns/op
Iteration  16: 123.813 ns/op
Iteration  17: 124.232 ns/op
Iteration  18: 123.951 ns/op
Iteration  19: 123.876 ns/op
Iteration  20: 124.672 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 222.817 ns/op
# Warmup Iteration   2: 151.142 ns/op
# Warmup Iteration   3: 133.779 ns/op
# Warmup Iteration   4: 132.412 ns/op
# Warmup Iteration   5: 133.139 ns/op
Iteration   1: 133.954 ns/op
Iteration   2: 131.478 ns/op
Iteration   3: 131.178 ns/op
Iteration   4: 130.626 ns/op
Iteration   5: 130.890 ns/op
Iteration   6: 130.644 ns/op
Iteration   7: 130.906 ns/op
Iteration   8: 131.265 ns/op
Iteration   9: 130.426 ns/op
Iteration  10: 130.388 ns/op
Iteration  11: 130.321 ns/op
Iteration  12: 130.407 ns/op
Iteration  13: 131.064 ns/op
Iteration  14: 130.446 ns/op
Iteration  15: 130.458 ns/op
Iteration  16: 130.559 ns/op
Iteration  17: 130.469 ns/op
Iteration  18: 131.007 ns/op
Iteration  19: 130.629 ns/op
Iteration  20: 130.836 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 222.419 ns/op
# Warmup Iteration   2: 150.910 ns/op
# Warmup Iteration   3: 133.438 ns/op
# Warmup Iteration   4: 132.388 ns/op
# Warmup Iteration   5: 133.262 ns/op
Iteration   1: 134.063 ns/op
Iteration   2: 131.672 ns/op
Iteration   3: 130.985 ns/op
Iteration   4: 130.786 ns/op
Iteration   5: 131.229 ns/op
Iteration   6: 133.188 ns/op
Iteration   7: 131.592 ns/op
Iteration   8: 131.436 ns/op
Iteration   9: 130.710 ns/op
Iteration  10: 130.577 ns/op
Iteration  11: 130.780 ns/op
Iteration  12: 130.694 ns/op
Iteration  13: 131.358 ns/op
Iteration  14: 130.608 ns/op
Iteration  15: 132.161 ns/op
Iteration  16: 131.962 ns/op
Iteration  17: 131.114 ns/op
Iteration  18: 131.412 ns/op
Iteration  19: 130.728 ns/op
Iteration  20: 131.029 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 222.895 ns/op
# Warmup Iteration   2: 150.558 ns/op
# Warmup Iteration   3: 134.819 ns/op
# Warmup Iteration   4: 134.128 ns/op
# Warmup Iteration   5: 134.915 ns/op
Iteration   1: 135.411 ns/op
Iteration   2: 132.335 ns/op
Iteration   3: 132.787 ns/op
Iteration   4: 132.544 ns/op
Iteration   5: 133.114 ns/op
Iteration   6: 132.175 ns/op
Iteration   7: 132.345 ns/op
Iteration   8: 132.839 ns/op
Iteration   9: 132.682 ns/op
Iteration  10: 131.877 ns/op
Iteration  11: 131.823 ns/op
Iteration  12: 131.959 ns/op
Iteration  13: 131.988 ns/op
Iteration  14: 132.496 ns/op
Iteration  15: 132.028 ns/op
Iteration  16: 132.021 ns/op
Iteration  17: 132.144 ns/op
Iteration  18: 132.090 ns/op
Iteration  19: 132.602 ns/op
Iteration  20: 132.346 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 216.888 ns/op
# Warmup Iteration   2: 148.944 ns/op
# Warmup Iteration   3: 132.944 ns/op
# Warmup Iteration   4: 131.953 ns/op
# Warmup Iteration   5: 132.800 ns/op
Iteration   1: 133.351 ns/op
Iteration   2: 131.037 ns/op
Iteration   3: 130.577 ns/op
Iteration   4: 131.147 ns/op
Iteration   5: 130.309 ns/op
Iteration   6: 130.362 ns/op
Iteration   7: 130.933 ns/op
Iteration   8: 130.418 ns/op
Iteration   9: 130.306 ns/op
Iteration  10: 129.973 ns/op
Iteration  11: 130.001 ns/op
Iteration  12: 130.418 ns/op
Iteration  13: 130.053 ns/op
Iteration  14: 130.041 ns/op
Iteration  15: 130.038 ns/op
Iteration  16: 130.061 ns/op
Iteration  17: 130.426 ns/op
Iteration  18: 130.007 ns/op
Iteration  19: 129.982 ns/op
Iteration  20: 130.010 ns/op


Result "benchmark.StringContains.regexMatches":
  129.925 ±(99.9%) 1.012 ns/op [Average]
  (min, avg, max) = (123.671, 129.925, 135.411), stdev = 2.985
  CI (99.9%): [128.913, 130.937] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = \f4Vhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.053 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 10.023 ns/op
# Warmup Iteration   4: 10.005 ns/op
# Warmup Iteration   5: 10.015 ns/op
Iteration   1: 10.007 ns/op
Iteration   2: 10.013 ns/op
Iteration   3: 10.013 ns/op
Iteration   4: 10.011 ns/op
Iteration   5: 10.005 ns/op
Iteration   6: 10.028 ns/op
Iteration   7: 10.018 ns/op
Iteration   8: 10.022 ns/op
Iteration   9: 10.001 ns/op
Iteration  10: 10.007 ns/op
Iteration  11: 10.019 ns/op
Iteration  12: 10.008 ns/op
Iteration  13: 10.012 ns/op
Iteration  14: 10.007 ns/op
Iteration  15: 9.982 ns/op
Iteration  16: 10.003 ns/op
Iteration  17: 10.010 ns/op
Iteration  18: 10.013 ns/op
Iteration  19: 10.023 ns/op
Iteration  20: 10.008 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.086 ns/op
# Warmup Iteration   2: 10.473 ns/op
# Warmup Iteration   3: 10.062 ns/op
# Warmup Iteration   4: 10.047 ns/op
# Warmup Iteration   5: 10.036 ns/op
Iteration   1: 10.044 ns/op
Iteration   2: 10.041 ns/op
Iteration   3: 10.054 ns/op
Iteration   4: 10.021 ns/op
Iteration   5: 10.038 ns/op
Iteration   6: 10.047 ns/op
Iteration   7: 10.043 ns/op
Iteration   8: 10.026 ns/op
Iteration   9: 10.014 ns/op
Iteration  10: 10.034 ns/op
Iteration  11: 10.041 ns/op
Iteration  12: 10.036 ns/op
Iteration  13: 10.024 ns/op
Iteration  14: 10.034 ns/op
Iteration  15: 10.020 ns/op
Iteration  16: 10.024 ns/op
Iteration  17: 10.020 ns/op
Iteration  18: 10.042 ns/op
Iteration  19: 10.038 ns/op
Iteration  20: 10.031 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.176 ns/op
# Warmup Iteration   2: 10.460 ns/op
# Warmup Iteration   3: 10.020 ns/op
# Warmup Iteration   4: 10.003 ns/op
# Warmup Iteration   5: 10.046 ns/op
Iteration   1: 10.033 ns/op
Iteration   2: 10.033 ns/op
Iteration   3: 10.043 ns/op
Iteration   4: 10.024 ns/op
Iteration   5: 10.042 ns/op
Iteration   6: 10.058 ns/op
Iteration   7: 10.048 ns/op
Iteration   8: 10.049 ns/op
Iteration   9: 10.050 ns/op
Iteration  10: 10.015 ns/op
Iteration  11: 10.037 ns/op
Iteration  12: 9.995 ns/op
Iteration  13: 10.054 ns/op
Iteration  14: 10.015 ns/op
Iteration  15: 9.995 ns/op
Iteration  16: 9.995 ns/op
Iteration  17: 9.991 ns/op
Iteration  18: 10.013 ns/op
Iteration  19: 10.025 ns/op
Iteration  20: 10.036 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.063 ns/op
# Warmup Iteration   2: 10.478 ns/op
# Warmup Iteration   3: 10.044 ns/op
# Warmup Iteration   4: 10.038 ns/op
# Warmup Iteration   5: 10.034 ns/op
Iteration   1: 10.036 ns/op
Iteration   2: 10.036 ns/op
Iteration   3: 10.031 ns/op
Iteration   4: 10.036 ns/op
Iteration   5: 10.034 ns/op
Iteration   6: 10.031 ns/op
Iteration   7: 10.032 ns/op
Iteration   8: 10.054 ns/op
Iteration   9: 10.036 ns/op
Iteration  10: 10.027 ns/op
Iteration  11: 10.026 ns/op
Iteration  12: 10.033 ns/op
Iteration  13: 10.021 ns/op
Iteration  14: 10.027 ns/op
Iteration  15: 10.023 ns/op
Iteration  16: 10.020 ns/op
Iteration  17: 10.022 ns/op
Iteration  18: 10.024 ns/op
Iteration  19: 10.025 ns/op
Iteration  20: 10.027 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.102 ns/op
# Warmup Iteration   2: 10.507 ns/op
# Warmup Iteration   3: 9.897 ns/op
# Warmup Iteration   4: 9.907 ns/op
# Warmup Iteration   5: 9.911 ns/op
Iteration   1: 9.900 ns/op
Iteration   2: 9.903 ns/op
Iteration   3: 9.900 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.916 ns/op
Iteration   6: 9.896 ns/op
Iteration   7: 9.894 ns/op
Iteration   8: 9.916 ns/op
Iteration   9: 9.908 ns/op
Iteration  10: 9.892 ns/op
Iteration  11: 9.902 ns/op
Iteration  12: 9.896 ns/op
Iteration  13: 9.900 ns/op
Iteration  14: 9.908 ns/op
Iteration  15: 9.894 ns/op
Iteration  16: 9.911 ns/op
Iteration  17: 9.897 ns/op
Iteration  18: 9.910 ns/op
Iteration  19: 9.897 ns/op
Iteration  20: 9.902 ns/op


Result "benchmark.StringContains.stringContains":
  10.001 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (9.889, 10.001, 10.058), stdev = 0.052
  CI (99.9%): [9.983, 10.018] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  \f4Vhttp  avgt  100  129.925 ± 1.012  ns/op
StringContains.stringContains     http  \f4Vhttp  avgt  100   10.001 ± 0.018  ns/op

Benchmark result is saved to http_8_0.5_1.csv
