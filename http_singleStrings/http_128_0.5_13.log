# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = JK:~37EHJpt!t8t
~FSdPB`*2>*t9j@g]\+qad2H9~G&$Z.%0+-$4mc)=uvV^"PhttpunaG0-UoB8x]LFLS&K'$*xa+c3k0!Y-Rom(9&xmyahvi$8nU"-;<#a$%*)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 837.962 ns/op
# Warmup Iteration   2: 864.088 ns/op
# Warmup Iteration   3: 862.596 ns/op
# Warmup Iteration   4: 862.573 ns/op
# Warmup Iteration   5: 861.436 ns/op
Iteration   1: 800.628 ns/op
Iteration   2: 784.647 ns/op
Iteration   3: 783.286 ns/op
Iteration   4: 783.984 ns/op
Iteration   5: 791.369 ns/op
Iteration   6: 782.838 ns/op
Iteration   7: 783.658 ns/op
Iteration   8: 783.060 ns/op
Iteration   9: 784.985 ns/op
Iteration  10: 791.328 ns/op
Iteration  11: 783.096 ns/op
Iteration  12: 783.411 ns/op
Iteration  13: 783.070 ns/op
Iteration  14: 796.477 ns/op
Iteration  15: 782.639 ns/op
Iteration  16: 782.700 ns/op
Iteration  17: 782.719 ns/op
Iteration  18: 783.172 ns/op
Iteration  19: 801.585 ns/op
Iteration  20: 782.935 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 810.714 ns/op
# Warmup Iteration   2: 813.368 ns/op
# Warmup Iteration   3: 904.029 ns/op
# Warmup Iteration   4: 903.900 ns/op
# Warmup Iteration   5: 903.915 ns/op
Iteration   1: 849.384 ns/op
Iteration   2: 829.276 ns/op
Iteration   3: 829.228 ns/op
Iteration   4: 829.427 ns/op
Iteration   5: 837.010 ns/op
Iteration   6: 829.326 ns/op
Iteration   7: 829.208 ns/op
Iteration   8: 829.101 ns/op
Iteration   9: 829.031 ns/op
Iteration  10: 839.738 ns/op
Iteration  11: 828.938 ns/op
Iteration  12: 828.564 ns/op
Iteration  13: 828.436 ns/op
Iteration  14: 828.668 ns/op
Iteration  15: 842.790 ns/op
Iteration  16: 828.481 ns/op
Iteration  17: 828.711 ns/op
Iteration  18: 828.824 ns/op
Iteration  19: 828.289 ns/op
Iteration  20: 847.104 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 838.359 ns/op
# Warmup Iteration   2: 851.500 ns/op
# Warmup Iteration   3: 855.953 ns/op
# Warmup Iteration   4: 855.785 ns/op
# Warmup Iteration   5: 856.442 ns/op
Iteration   1: 796.470 ns/op
Iteration   2: 782.505 ns/op
Iteration   3: 781.951 ns/op
Iteration   4: 781.251 ns/op
Iteration   5: 787.543 ns/op
Iteration   6: 780.873 ns/op
Iteration   7: 780.883 ns/op
Iteration   8: 780.743 ns/op
Iteration   9: 790.915 ns/op
Iteration  10: 780.669 ns/op
Iteration  11: 780.754 ns/op
Iteration  12: 780.830 ns/op
Iteration  13: 781.126 ns/op
Iteration  14: 794.077 ns/op
Iteration  15: 780.736 ns/op
Iteration  16: 781.131 ns/op
Iteration  17: 780.934 ns/op
Iteration  18: 781.030 ns/op
Iteration  19: 797.630 ns/op
Iteration  20: 780.782 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 836.121 ns/op
# Warmup Iteration   2: 851.454 ns/op
# Warmup Iteration   3: 855.104 ns/op
# Warmup Iteration   4: 854.889 ns/op
# Warmup Iteration   5: 854.950 ns/op
Iteration   1: 794.387 ns/op
Iteration   2: 780.789 ns/op
Iteration   3: 781.079 ns/op
Iteration   4: 781.177 ns/op
Iteration   5: 788.210 ns/op
Iteration   6: 780.725 ns/op
Iteration   7: 781.064 ns/op
Iteration   8: 781.259 ns/op
Iteration   9: 791.094 ns/op
Iteration  10: 780.818 ns/op
Iteration  11: 780.707 ns/op
Iteration  12: 781.677 ns/op
Iteration  13: 781.555 ns/op
Iteration  14: 794.266 ns/op
Iteration  15: 780.811 ns/op
Iteration  16: 780.618 ns/op
Iteration  17: 780.711 ns/op
Iteration  18: 780.693 ns/op
Iteration  19: 797.804 ns/op
Iteration  20: 780.852 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 838.018 ns/op
# Warmup Iteration   2: 854.410 ns/op
# Warmup Iteration   3: 858.580 ns/op
# Warmup Iteration   4: 858.274 ns/op
# Warmup Iteration   5: 858.519 ns/op
Iteration   1: 797.442 ns/op
Iteration   2: 782.964 ns/op
Iteration   3: 782.965 ns/op
Iteration   4: 782.901 ns/op
Iteration   5: 790.062 ns/op
Iteration   6: 783.155 ns/op
Iteration   7: 782.906 ns/op
Iteration   8: 782.998 ns/op
Iteration   9: 789.180 ns/op
Iteration  10: 788.656 ns/op
Iteration  11: 784.288 ns/op
Iteration  12: 787.201 ns/op
Iteration  13: 787.498 ns/op
Iteration  14: 798.434 ns/op
Iteration  15: 783.083 ns/op
Iteration  16: 783.058 ns/op
Iteration  17: 783.504 ns/op
Iteration  18: 783.508 ns/op
Iteration  19: 800.608 ns/op
Iteration  20: 783.741 ns/op


Result "benchmark.StringContains.regexMatches":
  794.824 ±(99.9%) 6.735 ns/op [Average]
  (min, avg, max) = (780.618, 794.824, 849.384), stdev = 19.860
  CI (99.9%): [788.089, 801.560] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = JK:~37EHJpt!t8t
~FSdPB`*2>*t9j@g]\+qad2H9~G&$Z.%0+-$4mc)=uvV^"PhttpunaG0-UoB8x]LFLS&K'$*xa+c3k0!Y-Rom(9&xmyahvi$8nU"-;<#a$%*)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.070 ns/op
# Warmup Iteration   2: 19.361 ns/op
# Warmup Iteration   3: 18.695 ns/op
# Warmup Iteration   4: 18.702 ns/op
# Warmup Iteration   5: 18.676 ns/op
Iteration   1: 18.685 ns/op
Iteration   2: 18.688 ns/op
Iteration   3: 18.682 ns/op
Iteration   4: 18.701 ns/op
Iteration   5: 18.700 ns/op
Iteration   6: 18.688 ns/op
Iteration   7: 18.678 ns/op
Iteration   8: 18.685 ns/op
Iteration   9: 18.686 ns/op
Iteration  10: 18.677 ns/op
Iteration  11: 18.691 ns/op
Iteration  12: 18.776 ns/op
Iteration  13: 18.785 ns/op
Iteration  14: 18.786 ns/op
Iteration  15: 18.780 ns/op
Iteration  16: 18.801 ns/op
Iteration  17: 18.782 ns/op
Iteration  18: 18.792 ns/op
Iteration  19: 18.790 ns/op
Iteration  20: 18.784 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.077 ns/op
# Warmup Iteration   2: 19.244 ns/op
# Warmup Iteration   3: 19.112 ns/op
# Warmup Iteration   4: 19.093 ns/op
# Warmup Iteration   5: 19.106 ns/op
Iteration   1: 18.994 ns/op
Iteration   2: 19.011 ns/op
Iteration   3: 19.107 ns/op
Iteration   4: 19.050 ns/op
Iteration   5: 19.046 ns/op
Iteration   6: 18.960 ns/op
Iteration   7: 19.016 ns/op
Iteration   8: 19.096 ns/op
Iteration   9: 19.121 ns/op
Iteration  10: 19.151 ns/op
Iteration  11: 19.137 ns/op
Iteration  12: 19.163 ns/op
Iteration  13: 19.149 ns/op
Iteration  14: 19.172 ns/op
Iteration  15: 19.144 ns/op
Iteration  16: 19.130 ns/op
Iteration  17: 19.110 ns/op
Iteration  18: 19.154 ns/op
Iteration  19: 19.117 ns/op
Iteration  20: 19.110 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.087 ns/op
# Warmup Iteration   2: 19.280 ns/op
# Warmup Iteration   3: 18.685 ns/op
# Warmup Iteration   4: 18.719 ns/op
# Warmup Iteration   5: 18.731 ns/op
Iteration   1: 18.685 ns/op
Iteration   2: 18.698 ns/op
Iteration   3: 18.695 ns/op
Iteration   4: 18.690 ns/op
Iteration   5: 18.697 ns/op
Iteration   6: 18.688 ns/op
Iteration   7: 18.700 ns/op
Iteration   8: 18.696 ns/op
Iteration   9: 18.694 ns/op
Iteration  10: 18.698 ns/op
Iteration  11: 18.693 ns/op
Iteration  12: 18.788 ns/op
Iteration  13: 18.789 ns/op
Iteration  14: 18.793 ns/op
Iteration  15: 18.799 ns/op
Iteration  16: 18.796 ns/op
Iteration  17: 18.786 ns/op
Iteration  18: 18.788 ns/op
Iteration  19: 18.801 ns/op
Iteration  20: 18.802 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.087 ns/op
# Warmup Iteration   2: 19.340 ns/op
# Warmup Iteration   3: 18.661 ns/op
# Warmup Iteration   4: 18.674 ns/op
# Warmup Iteration   5: 18.682 ns/op
Iteration   1: 18.671 ns/op
Iteration   2: 18.669 ns/op
Iteration   3: 18.665 ns/op
Iteration   4: 18.683 ns/op
Iteration   5: 18.695 ns/op
Iteration   6: 18.687 ns/op
Iteration   7: 18.696 ns/op
Iteration   8: 18.692 ns/op
Iteration   9: 18.684 ns/op
Iteration  10: 18.679 ns/op
Iteration  11: 18.701 ns/op
Iteration  12: 18.779 ns/op
Iteration  13: 18.781 ns/op
Iteration  14: 18.772 ns/op
Iteration  15: 18.782 ns/op
Iteration  16: 18.783 ns/op
Iteration  17: 18.781 ns/op
Iteration  18: 18.786 ns/op
Iteration  19: 18.775 ns/op
Iteration  20: 18.782 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.080 ns/op
# Warmup Iteration   2: 19.384 ns/op
# Warmup Iteration   3: 18.694 ns/op
# Warmup Iteration   4: 18.691 ns/op
# Warmup Iteration   5: 18.704 ns/op
Iteration   1: 18.681 ns/op
Iteration   2: 18.693 ns/op
Iteration   3: 18.700 ns/op
Iteration   4: 18.683 ns/op
Iteration   5: 18.689 ns/op
Iteration   6: 18.692 ns/op
Iteration   7: 18.680 ns/op
Iteration   8: 18.685 ns/op
Iteration   9: 18.670 ns/op
Iteration  10: 18.674 ns/op
Iteration  11: 18.689 ns/op
Iteration  12: 18.696 ns/op
Iteration  13: 18.686 ns/op
Iteration  14: 18.676 ns/op
Iteration  15: 18.678 ns/op
Iteration  16: 18.687 ns/op
Iteration  17: 18.671 ns/op
Iteration  18: 18.671 ns/op
Iteration  19: 18.672 ns/op
Iteration  20: 18.692 ns/op


Result "benchmark.StringContains.stringContains":
  18.796 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (18.665, 18.796, 19.172), stdev = 0.160
  CI (99.9%): [18.741, 18.850] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  JK:~37EHJpt!t8t
~FSdPB`*2>*t9j@g]\+qad2H9~G&$Z.%0+-$4mc)=uvV^"PhttpunaG0-UoB8x]LFLS&K'$*xa+c3k0!Y-Rom(9&xmyahvi$8nU"-;<#a$%*  avgt  100  794.824 ± 6.735  ns/op
StringContains.stringContains     http  JK:~37EHJpt!t8t
~FSdPB`*2>*t9j@g]\+qad2H9~G&$Z.%0+-$4mc)=uvV^"PhttpunaG0-UoB8x]LFLS&K'$*xa+c3k0!Y-Rom(9&xmyahvi$8nU"-;<#a$%*  avgt  100   18.796 ± 0.054  ns/op

Benchmark result is saved to http_128_0.5_13.csv
