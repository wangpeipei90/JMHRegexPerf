# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = n
tji<s4hwNhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 221.901 ns/op
# Warmup Iteration   2: 146.006 ns/op
# Warmup Iteration   3: 128.120 ns/op
# Warmup Iteration   4: 127.424 ns/op
# Warmup Iteration   5: 128.118 ns/op
Iteration   1: 129.568 ns/op
Iteration   2: 125.711 ns/op
Iteration   3: 125.768 ns/op
Iteration   4: 125.781 ns/op
Iteration   5: 126.371 ns/op
Iteration   6: 125.557 ns/op
Iteration   7: 125.784 ns/op
Iteration   8: 125.666 ns/op
Iteration   9: 125.260 ns/op
Iteration  10: 125.473 ns/op
Iteration  11: 125.288 ns/op
Iteration  12: 125.445 ns/op
Iteration  13: 125.418 ns/op
Iteration  14: 125.670 ns/op
Iteration  15: 125.504 ns/op
Iteration  16: 125.515 ns/op
Iteration  17: 125.561 ns/op
Iteration  18: 125.816 ns/op
Iteration  19: 125.698 ns/op
Iteration  20: 125.698 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.489 ns/op
# Warmup Iteration   2: 142.976 ns/op
# Warmup Iteration   3: 124.846 ns/op
# Warmup Iteration   4: 125.393 ns/op
# Warmup Iteration   5: 127.691 ns/op
Iteration   1: 125.899 ns/op
Iteration   2: 123.973 ns/op
Iteration   3: 123.960 ns/op
Iteration   4: 123.908 ns/op
Iteration   5: 124.365 ns/op
Iteration   6: 123.933 ns/op
Iteration   7: 123.928 ns/op
Iteration   8: 124.093 ns/op
Iteration   9: 123.522 ns/op
Iteration  10: 123.523 ns/op
Iteration  11: 123.494 ns/op
Iteration  12: 123.788 ns/op
Iteration  13: 123.502 ns/op
Iteration  14: 123.624 ns/op
Iteration  15: 123.787 ns/op
Iteration  16: 123.944 ns/op
Iteration  17: 123.645 ns/op
Iteration  18: 123.610 ns/op
Iteration  19: 123.912 ns/op
Iteration  20: 124.572 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 211.768 ns/op
# Warmup Iteration   2: 141.747 ns/op
# Warmup Iteration   3: 125.302 ns/op
# Warmup Iteration   4: 125.860 ns/op
# Warmup Iteration   5: 128.156 ns/op
Iteration   1: 125.800 ns/op
Iteration   2: 124.116 ns/op
Iteration   3: 124.031 ns/op
Iteration   4: 125.673 ns/op
Iteration   5: 124.611 ns/op
Iteration   6: 124.010 ns/op
Iteration   7: 123.850 ns/op
Iteration   8: 123.971 ns/op
Iteration   9: 123.783 ns/op
Iteration  10: 123.601 ns/op
Iteration  11: 123.619 ns/op
Iteration  12: 124.256 ns/op
Iteration  13: 123.934 ns/op
Iteration  14: 124.224 ns/op
Iteration  15: 123.758 ns/op
Iteration  16: 124.597 ns/op
Iteration  17: 123.957 ns/op
Iteration  18: 123.971 ns/op
Iteration  19: 123.937 ns/op
Iteration  20: 124.628 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 211.854 ns/op
# Warmup Iteration   2: 141.957 ns/op
# Warmup Iteration   3: 125.057 ns/op
# Warmup Iteration   4: 125.530 ns/op
# Warmup Iteration   5: 127.965 ns/op
Iteration   1: 125.931 ns/op
Iteration   2: 123.998 ns/op
Iteration   3: 123.998 ns/op
Iteration   4: 124.039 ns/op
Iteration   5: 124.541 ns/op
Iteration   6: 123.912 ns/op
Iteration   7: 123.920 ns/op
Iteration   8: 124.228 ns/op
Iteration   9: 123.624 ns/op
Iteration  10: 123.704 ns/op
Iteration  11: 123.637 ns/op
Iteration  12: 123.828 ns/op
Iteration  13: 123.632 ns/op
Iteration  14: 123.782 ns/op
Iteration  15: 123.928 ns/op
Iteration  16: 124.129 ns/op
Iteration  17: 123.618 ns/op
Iteration  18: 123.743 ns/op
Iteration  19: 123.981 ns/op
Iteration  20: 124.725 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 214.809 ns/op
# Warmup Iteration   2: 143.788 ns/op
# Warmup Iteration   3: 126.247 ns/op
# Warmup Iteration   4: 126.804 ns/op
# Warmup Iteration   5: 127.563 ns/op
Iteration   1: 129.133 ns/op
Iteration   2: 124.854 ns/op
Iteration   3: 125.479 ns/op
Iteration   4: 125.418 ns/op
Iteration   5: 125.946 ns/op
Iteration   6: 125.263 ns/op
Iteration   7: 125.495 ns/op
Iteration   8: 126.340 ns/op
Iteration   9: 125.830 ns/op
Iteration  10: 125.030 ns/op
Iteration  11: 125.766 ns/op
Iteration  12: 124.910 ns/op
Iteration  13: 125.335 ns/op
Iteration  14: 124.641 ns/op
Iteration  15: 125.677 ns/op
Iteration  16: 125.091 ns/op
Iteration  17: 125.199 ns/op
Iteration  18: 124.973 ns/op
Iteration  19: 125.640 ns/op
Iteration  20: 124.685 ns/op


Result "benchmark.StringContains.regexMatches":
  124.715 ±(99.9%) 0.365 ns/op [Average]
  (min, avg, max) = (123.494, 124.715, 129.568), stdev = 1.077
  CI (99.9%): [124.350, 125.080] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = n
tji<s4hwNhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.449 ns/op
# Warmup Iteration   2: 9.719 ns/op
# Warmup Iteration   3: 9.883 ns/op
# Warmup Iteration   4: 9.899 ns/op
# Warmup Iteration   5: 9.886 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.895 ns/op
Iteration   3: 9.893 ns/op
Iteration   4: 9.892 ns/op
Iteration   5: 9.878 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.882 ns/op
Iteration   9: 9.893 ns/op
Iteration  10: 9.894 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.890 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.877 ns/op
Iteration  15: 9.887 ns/op
Iteration  16: 9.892 ns/op
Iteration  17: 9.891 ns/op
Iteration  18: 9.899 ns/op
Iteration  19: 9.895 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.483 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.940 ns/op
# Warmup Iteration   4: 9.938 ns/op
# Warmup Iteration   5: 9.950 ns/op
Iteration   1: 9.958 ns/op
Iteration   2: 9.981 ns/op
Iteration   3: 9.994 ns/op
Iteration   4: 9.979 ns/op
Iteration   5: 9.979 ns/op
Iteration   6: 9.980 ns/op
Iteration   7: 9.965 ns/op
Iteration   8: 9.976 ns/op
Iteration   9: 9.979 ns/op
Iteration  10: 9.974 ns/op
Iteration  11: 9.982 ns/op
Iteration  12: 9.973 ns/op
Iteration  13: 9.967 ns/op
Iteration  14: 9.970 ns/op
Iteration  15: 9.960 ns/op
Iteration  16: 9.950 ns/op
Iteration  17: 9.964 ns/op
Iteration  18: 9.946 ns/op
Iteration  19: 9.971 ns/op
Iteration  20: 9.952 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.226 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.884 ns/op
# Warmup Iteration   4: 9.877 ns/op
# Warmup Iteration   5: 9.883 ns/op
Iteration   1: 9.880 ns/op
Iteration   2: 9.878 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.871 ns/op
Iteration   5: 9.879 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.885 ns/op
Iteration   9: 9.897 ns/op
Iteration  10: 9.900 ns/op
Iteration  11: 9.874 ns/op
Iteration  12: 9.889 ns/op
Iteration  13: 9.880 ns/op
Iteration  14: 9.888 ns/op
Iteration  15: 9.881 ns/op
Iteration  16: 9.888 ns/op
Iteration  17: 9.898 ns/op
Iteration  18: 9.908 ns/op
Iteration  19: 9.897 ns/op
Iteration  20: 9.903 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.489 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.896 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.880 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.894 ns/op
Iteration   5: 9.880 ns/op
Iteration   6: 9.877 ns/op
Iteration   7: 9.866 ns/op
Iteration   8: 9.890 ns/op
Iteration   9: 9.874 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.870 ns/op
Iteration  12: 9.870 ns/op
Iteration  13: 9.892 ns/op
Iteration  14: 9.891 ns/op
Iteration  15: 9.885 ns/op
Iteration  16: 9.883 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.891 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.489 ns/op
# Warmup Iteration   2: 9.721 ns/op
# Warmup Iteration   3: 9.878 ns/op
# Warmup Iteration   4: 9.896 ns/op
# Warmup Iteration   5: 9.880 ns/op
Iteration   1: 9.868 ns/op
Iteration   2: 9.870 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.876 ns/op
Iteration   6: 9.885 ns/op
Iteration   7: 9.858 ns/op
Iteration   8: 9.886 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.896 ns/op
Iteration  11: 9.874 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.884 ns/op
Iteration  14: 9.854 ns/op
Iteration  15: 9.875 ns/op
Iteration  16: 9.865 ns/op
Iteration  17: 9.864 ns/op
Iteration  18: 9.860 ns/op
Iteration  19: 9.864 ns/op
Iteration  20: 9.874 ns/op


Result "benchmark.StringContains.stringContains":
  9.899 ±(99.9%) 0.013 ns/op [Average]
  (min, avg, max) = (9.854, 9.899, 9.994), stdev = 0.037
  CI (99.9%): [9.887, 9.912] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  n
tji<s4hwNhttp  avgt  100  124.715 ± 0.365  ns/op
StringContains.stringContains     http  n
tji<s4hwNhttp  avgt  100    9.899 ± 0.013  ns/op

Benchmark result is saved to http_16_0.75_3.csv
