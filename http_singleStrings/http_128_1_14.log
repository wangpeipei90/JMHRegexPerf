# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 3 H@_](/1Jb^q2F,1}KACa!|;Xx8QBdoT1XPPrm":1)-~~Z(X	G5(Us
yV*I9XE@=)1sX=#1{#18T6OTaRUhkkpUH]1ai%:.\"_wm,nB#Z_:i3''3+z|MhgCo)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 897.032 ns/op
# Warmup Iteration   2: 891.073 ns/op
# Warmup Iteration   3: 893.058 ns/op
# Warmup Iteration   4: 892.447 ns/op
# Warmup Iteration   5: 890.698 ns/op
Iteration   1: 847.431 ns/op
Iteration   2: 813.981 ns/op
Iteration   3: 814.020 ns/op
Iteration   4: 814.312 ns/op
Iteration   5: 825.261 ns/op
Iteration   6: 813.665 ns/op
Iteration   7: 813.977 ns/op
Iteration   8: 814.420 ns/op
Iteration   9: 814.198 ns/op
Iteration  10: 825.025 ns/op
Iteration  11: 813.717 ns/op
Iteration  12: 813.836 ns/op
Iteration  13: 813.930 ns/op
Iteration  14: 814.640 ns/op
Iteration  15: 828.063 ns/op
Iteration  16: 813.616 ns/op
Iteration  17: 814.004 ns/op
Iteration  18: 814.119 ns/op
Iteration  19: 814.133 ns/op
Iteration  20: 832.201 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 897.334 ns/op
# Warmup Iteration   2: 887.938 ns/op
# Warmup Iteration   3: 885.450 ns/op
# Warmup Iteration   4: 884.586 ns/op
# Warmup Iteration   5: 884.475 ns/op
Iteration   1: 840.353 ns/op
Iteration   2: 810.924 ns/op
Iteration   3: 810.830 ns/op
Iteration   4: 811.180 ns/op
Iteration   5: 818.910 ns/op
Iteration   6: 810.931 ns/op
Iteration   7: 810.919 ns/op
Iteration   8: 810.976 ns/op
Iteration   9: 810.915 ns/op
Iteration  10: 821.613 ns/op
Iteration  11: 810.934 ns/op
Iteration  12: 810.854 ns/op
Iteration  13: 811.196 ns/op
Iteration  14: 811.828 ns/op
Iteration  15: 824.506 ns/op
Iteration  16: 810.984 ns/op
Iteration  17: 810.965 ns/op
Iteration  18: 810.961 ns/op
Iteration  19: 811.361 ns/op
Iteration  20: 828.263 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 899.661 ns/op
# Warmup Iteration   2: 891.090 ns/op
# Warmup Iteration   3: 885.436 ns/op
# Warmup Iteration   4: 885.175 ns/op
# Warmup Iteration   5: 884.615 ns/op
Iteration   1: 840.248 ns/op
Iteration   2: 810.975 ns/op
Iteration   3: 810.961 ns/op
Iteration   4: 810.731 ns/op
Iteration   5: 818.168 ns/op
Iteration   6: 810.815 ns/op
Iteration   7: 812.810 ns/op
Iteration   8: 812.823 ns/op
Iteration   9: 812.815 ns/op
Iteration  10: 823.124 ns/op
Iteration  11: 812.362 ns/op
Iteration  12: 811.013 ns/op
Iteration  13: 810.899 ns/op
Iteration  14: 810.994 ns/op
Iteration  15: 824.548 ns/op
Iteration  16: 810.674 ns/op
Iteration  17: 810.748 ns/op
Iteration  18: 810.775 ns/op
Iteration  19: 810.917 ns/op
Iteration  20: 827.597 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 895.829 ns/op
# Warmup Iteration   2: 890.441 ns/op
# Warmup Iteration   3: 889.755 ns/op
# Warmup Iteration   4: 890.093 ns/op
# Warmup Iteration   5: 889.484 ns/op
Iteration   1: 845.720 ns/op
Iteration   2: 815.301 ns/op
Iteration   3: 815.263 ns/op
Iteration   4: 815.335 ns/op
Iteration   5: 822.782 ns/op
Iteration   6: 815.418 ns/op
Iteration   7: 815.443 ns/op
Iteration   8: 816.867 ns/op
Iteration   9: 815.429 ns/op
Iteration  10: 825.576 ns/op
Iteration  11: 814.854 ns/op
Iteration  12: 815.161 ns/op
Iteration  13: 815.053 ns/op
Iteration  14: 815.157 ns/op
Iteration  15: 828.419 ns/op
Iteration  16: 815.118 ns/op
Iteration  17: 815.011 ns/op
Iteration  18: 815.033 ns/op
Iteration  19: 815.093 ns/op
Iteration  20: 832.981 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 904.525 ns/op
# Warmup Iteration   2: 889.850 ns/op
# Warmup Iteration   3: 886.754 ns/op
# Warmup Iteration   4: 886.575 ns/op
# Warmup Iteration   5: 886.461 ns/op
Iteration   1: 840.902 ns/op
Iteration   2: 811.179 ns/op
Iteration   3: 811.488 ns/op
Iteration   4: 811.901 ns/op
Iteration   5: 819.198 ns/op
Iteration   6: 811.009 ns/op
Iteration   7: 811.323 ns/op
Iteration   8: 812.707 ns/op
Iteration   9: 811.590 ns/op
Iteration  10: 821.311 ns/op
Iteration  11: 811.446 ns/op
Iteration  12: 811.712 ns/op
Iteration  13: 811.510 ns/op
Iteration  14: 812.088 ns/op
Iteration  15: 824.774 ns/op
Iteration  16: 811.585 ns/op
Iteration  17: 812.060 ns/op
Iteration  18: 812.239 ns/op
Iteration  19: 821.418 ns/op
Iteration  20: 819.627 ns/op


Result "benchmark.StringContains.regexMatches":
  816.680 ±(99.9%) 2.748 ns/op [Average]
  (min, avg, max) = (810.674, 816.680, 847.431), stdev = 8.102
  CI (99.9%): [813.933, 819.428] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 3 H@_](/1Jb^q2F,1}KACa!|;Xx8QBdoT1XPPrm":1)-~~Z(X	G5(Us
yV*I9XE@=)1sX=#1{#18T6OTaRUhkkpUH]1ai%:.\"_wm,nB#Z_:i3''3+z|MhgCo)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.460 ns/op
# Warmup Iteration   2: 24.621 ns/op
# Warmup Iteration   3: 25.321 ns/op
# Warmup Iteration   4: 25.346 ns/op
# Warmup Iteration   5: 25.330 ns/op
Iteration   1: 25.328 ns/op
Iteration   2: 25.308 ns/op
Iteration   3: 25.308 ns/op
Iteration   4: 25.311 ns/op
Iteration   5: 25.312 ns/op
Iteration   6: 25.314 ns/op
Iteration   7: 25.282 ns/op
Iteration   8: 25.319 ns/op
Iteration   9: 25.348 ns/op
Iteration  10: 25.342 ns/op
Iteration  11: 25.300 ns/op
Iteration  12: 25.299 ns/op
Iteration  13: 25.311 ns/op
Iteration  14: 25.335 ns/op
Iteration  15: 25.326 ns/op
Iteration  16: 25.316 ns/op
Iteration  17: 25.321 ns/op
Iteration  18: 25.319 ns/op
Iteration  19: 25.320 ns/op
Iteration  20: 25.302 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.473 ns/op
# Warmup Iteration   2: 24.627 ns/op
# Warmup Iteration   3: 25.355 ns/op
# Warmup Iteration   4: 25.375 ns/op
# Warmup Iteration   5: 25.378 ns/op
Iteration   1: 25.388 ns/op
Iteration   2: 25.368 ns/op
Iteration   3: 25.369 ns/op
Iteration   4: 25.380 ns/op
Iteration   5: 25.343 ns/op
Iteration   6: 25.368 ns/op
Iteration   7: 25.372 ns/op
Iteration   8: 25.364 ns/op
Iteration   9: 25.348 ns/op
Iteration  10: 25.351 ns/op
Iteration  11: 25.366 ns/op
Iteration  12: 25.354 ns/op
Iteration  13: 25.366 ns/op
Iteration  14: 25.357 ns/op
Iteration  15: 25.334 ns/op
Iteration  16: 25.352 ns/op
Iteration  17: 25.329 ns/op
Iteration  18: 25.342 ns/op
Iteration  19: 25.336 ns/op
Iteration  20: 25.362 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.285 ns/op
# Warmup Iteration   2: 24.673 ns/op
# Warmup Iteration   3: 24.579 ns/op
# Warmup Iteration   4: 24.572 ns/op
# Warmup Iteration   5: 24.610 ns/op
Iteration   1: 24.596 ns/op
Iteration   2: 24.594 ns/op
Iteration   3: 24.651 ns/op
Iteration   4: 24.567 ns/op
Iteration   5: 24.576 ns/op
Iteration   6: 24.579 ns/op
Iteration   7: 24.593 ns/op
Iteration   8: 24.617 ns/op
Iteration   9: 24.568 ns/op
Iteration  10: 24.566 ns/op
Iteration  11: 24.570 ns/op
Iteration  12: 24.572 ns/op
Iteration  13: 24.565 ns/op
Iteration  14: 24.580 ns/op
Iteration  15: 24.582 ns/op
Iteration  16: 24.577 ns/op
Iteration  17: 24.568 ns/op
Iteration  18: 24.567 ns/op
Iteration  19: 24.578 ns/op
Iteration  20: 24.595 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.477 ns/op
# Warmup Iteration   2: 24.623 ns/op
# Warmup Iteration   3: 24.569 ns/op
# Warmup Iteration   4: 24.572 ns/op
# Warmup Iteration   5: 24.570 ns/op
Iteration   1: 24.594 ns/op
Iteration   2: 24.570 ns/op
Iteration   3: 24.590 ns/op
Iteration   4: 24.582 ns/op
Iteration   5: 24.594 ns/op
Iteration   6: 24.575 ns/op
Iteration   7: 24.568 ns/op
Iteration   8: 24.574 ns/op
Iteration   9: 24.570 ns/op
Iteration  10: 24.569 ns/op
Iteration  11: 24.570 ns/op
Iteration  12: 24.574 ns/op
Iteration  13: 24.586 ns/op
Iteration  14: 24.573 ns/op
Iteration  15: 24.571 ns/op
Iteration  16: 24.592 ns/op
Iteration  17: 24.568 ns/op
Iteration  18: 24.577 ns/op
Iteration  19: 24.574 ns/op
Iteration  20: 24.568 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.536 ns/op
# Warmup Iteration   2: 24.682 ns/op
# Warmup Iteration   3: 24.592 ns/op
# Warmup Iteration   4: 24.597 ns/op
# Warmup Iteration   5: 24.579 ns/op
Iteration   1: 24.587 ns/op
Iteration   2: 24.601 ns/op
Iteration   3: 24.578 ns/op
Iteration   4: 24.590 ns/op
Iteration   5: 24.581 ns/op
Iteration   6: 24.587 ns/op
Iteration   7: 24.579 ns/op
Iteration   8: 24.621 ns/op
Iteration   9: 24.579 ns/op
Iteration  10: 24.579 ns/op
Iteration  11: 24.583 ns/op
Iteration  12: 24.592 ns/op
Iteration  13: 24.576 ns/op
Iteration  14: 24.582 ns/op
Iteration  15: 24.572 ns/op
Iteration  16: 24.568 ns/op
Iteration  17: 24.567 ns/op
Iteration  18: 24.570 ns/op
Iteration  19: 24.572 ns/op
Iteration  20: 24.603 ns/op


Result "benchmark.StringContains.stringContains":
  24.883 ±(99.9%) 0.126 ns/op [Average]
  (min, avg, max) = (24.565, 24.883, 25.388), stdev = 0.373
  CI (99.9%): [24.757, 25.010] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  3 H@_](/1Jb^q2F,1}KACa!|;Xx8QBdoT1XPPrm":1)-~~Z(X	G5(Us
yV*I9XE@=)1sX=#1{#18T6OTaRUhkkpUH]1ai%:.\"_wm,nB#Z_:i3''3+z|MhgCo  avgt  100  816.680 ± 2.748  ns/op
StringContains.stringContains     http  3 H@_](/1Jb^q2F,1}KACa!|;Xx8QBdoT1XPPrm":1)-~~Z(X	G5(Us
yV*I9XE@=)1sX=#1{#18T6OTaRUhkkpUH]1ai%:.\"_wm,nB#Z_:i3''3+z|MhgCo  avgt  100   24.883 ± 0.126  ns/op

Benchmark result is saved to http_128_1_14.csv
