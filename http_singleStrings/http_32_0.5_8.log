# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = #ppH*VeeA_)#KGKhttpfD4 
PELUK)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 351.242 ns/op
# Warmup Iteration   2: 361.433 ns/op
# Warmup Iteration   3: 281.209 ns/op
# Warmup Iteration   4: 272.941 ns/op
# Warmup Iteration   5: 270.072 ns/op
Iteration   1: 273.782 ns/op
Iteration   2: 275.076 ns/op
Iteration   3: 269.978 ns/op
Iteration   4: 276.633 ns/op
Iteration   5: 270.069 ns/op
Iteration   6: 279.276 ns/op
Iteration   7: 270.091 ns/op
Iteration   8: 271.859 ns/op
Iteration   9: 271.712 ns/op
Iteration  10: 270.234 ns/op
Iteration  11: 271.351 ns/op
Iteration  12: 270.109 ns/op
Iteration  13: 271.486 ns/op
Iteration  14: 271.361 ns/op
Iteration  15: 269.871 ns/op
Iteration  16: 271.531 ns/op
Iteration  17: 270.314 ns/op
Iteration  18: 271.583 ns/op
Iteration  19: 269.949 ns/op
Iteration  20: 271.789 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 355.895 ns/op
# Warmup Iteration   2: 361.008 ns/op
# Warmup Iteration   3: 300.349 ns/op
# Warmup Iteration   4: 290.652 ns/op
# Warmup Iteration   5: 288.328 ns/op
Iteration   1: 291.953 ns/op
Iteration   2: 287.968 ns/op
Iteration   3: 293.022 ns/op
Iteration   4: 294.464 ns/op
Iteration   5: 288.281 ns/op
Iteration   6: 296.019 ns/op
Iteration   7: 288.059 ns/op
Iteration   8: 289.739 ns/op
Iteration   9: 288.154 ns/op
Iteration  10: 289.364 ns/op
Iteration  11: 287.030 ns/op
Iteration  12: 289.643 ns/op
Iteration  13: 288.485 ns/op
Iteration  14: 289.568 ns/op
Iteration  15: 288.723 ns/op
Iteration  16: 290.189 ns/op
Iteration  17: 292.043 ns/op
Iteration  18: 288.422 ns/op
Iteration  19: 290.025 ns/op
Iteration  20: 287.409 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 358.017 ns/op
# Warmup Iteration   2: 352.250 ns/op
# Warmup Iteration   3: 286.700 ns/op
# Warmup Iteration   4: 278.883 ns/op
# Warmup Iteration   5: 276.466 ns/op
Iteration   1: 279.799 ns/op
Iteration   2: 280.858 ns/op
Iteration   3: 276.338 ns/op
Iteration   4: 282.492 ns/op
Iteration   5: 276.374 ns/op
Iteration   6: 284.257 ns/op
Iteration   7: 276.377 ns/op
Iteration   8: 277.268 ns/op
Iteration   9: 277.533 ns/op
Iteration  10: 276.242 ns/op
Iteration  11: 277.711 ns/op
Iteration  12: 275.877 ns/op
Iteration  13: 277.516 ns/op
Iteration  14: 276.178 ns/op
Iteration  15: 277.183 ns/op
Iteration  16: 276.221 ns/op
Iteration  17: 277.514 ns/op
Iteration  18: 278.037 ns/op
Iteration  19: 276.240 ns/op
Iteration  20: 277.990 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 349.606 ns/op
# Warmup Iteration   2: 354.009 ns/op
# Warmup Iteration   3: 280.348 ns/op
# Warmup Iteration   4: 272.941 ns/op
# Warmup Iteration   5: 270.080 ns/op
Iteration   1: 273.353 ns/op
Iteration   2: 274.399 ns/op
Iteration   3: 270.147 ns/op
Iteration   4: 276.009 ns/op
Iteration   5: 270.273 ns/op
Iteration   6: 277.519 ns/op
Iteration   7: 271.000 ns/op
Iteration   8: 270.387 ns/op
Iteration   9: 271.419 ns/op
Iteration  10: 270.177 ns/op
Iteration  11: 270.912 ns/op
Iteration  12: 270.277 ns/op
Iteration  13: 271.221 ns/op
Iteration  14: 271.235 ns/op
Iteration  15: 270.307 ns/op
Iteration  16: 271.304 ns/op
Iteration  17: 270.395 ns/op
Iteration  18: 272.629 ns/op
Iteration  19: 270.262 ns/op
Iteration  20: 272.079 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 350.233 ns/op
# Warmup Iteration   2: 360.041 ns/op
# Warmup Iteration   3: 281.673 ns/op
# Warmup Iteration   4: 273.950 ns/op
# Warmup Iteration   5: 271.556 ns/op
Iteration   1: 274.436 ns/op
Iteration   2: 275.400 ns/op
Iteration   3: 270.680 ns/op
Iteration   4: 276.679 ns/op
Iteration   5: 270.613 ns/op
Iteration   6: 278.221 ns/op
Iteration   7: 270.955 ns/op
Iteration   8: 271.871 ns/op
Iteration   9: 271.833 ns/op
Iteration  10: 270.559 ns/op
Iteration  11: 273.111 ns/op
Iteration  12: 270.719 ns/op
Iteration  13: 272.376 ns/op
Iteration  14: 270.718 ns/op
Iteration  15: 273.004 ns/op
Iteration  16: 272.393 ns/op
Iteration  17: 270.712 ns/op
Iteration  18: 272.278 ns/op
Iteration  19: 270.608 ns/op
Iteration  20: 272.319 ns/op


Result "benchmark.StringContains.regexMatches":
  276.794 ±(99.9%) 2.488 ns/op [Average]
  (min, avg, max) = (269.871, 276.794, 296.019), stdev = 7.337
  CI (99.9%): [274.306, 279.283] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = #ppH*VeeA_)#KGKhttpfD4 
PELUK)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 12.037 ns/op
# Warmup Iteration   2: 12.495 ns/op
# Warmup Iteration   3: 12.241 ns/op
# Warmup Iteration   4: 12.239 ns/op
# Warmup Iteration   5: 12.231 ns/op
Iteration   1: 12.246 ns/op
Iteration   2: 12.239 ns/op
Iteration   3: 12.257 ns/op
Iteration   4: 12.244 ns/op
Iteration   5: 12.247 ns/op
Iteration   6: 12.249 ns/op
Iteration   7: 12.252 ns/op
Iteration   8: 12.252 ns/op
Iteration   9: 12.247 ns/op
Iteration  10: 12.251 ns/op
Iteration  11: 12.256 ns/op
Iteration  12: 12.839 ns/op
Iteration  13: 12.840 ns/op
Iteration  14: 12.839 ns/op
Iteration  15: 12.839 ns/op
Iteration  16: 12.840 ns/op
Iteration  17: 12.840 ns/op
Iteration  18: 12.840 ns/op
Iteration  19: 12.841 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.330 ns/op
# Warmup Iteration   2: 12.629 ns/op
# Warmup Iteration   3: 12.148 ns/op
# Warmup Iteration   4: 12.139 ns/op
# Warmup Iteration   5: 12.141 ns/op
Iteration   1: 12.131 ns/op
Iteration   2: 12.127 ns/op
Iteration   3: 12.149 ns/op
Iteration   4: 12.136 ns/op
Iteration   5: 12.144 ns/op
Iteration   6: 12.128 ns/op
Iteration   7: 12.121 ns/op
Iteration   8: 12.114 ns/op
Iteration   9: 12.123 ns/op
Iteration  10: 12.119 ns/op
Iteration  11: 12.127 ns/op
Iteration  12: 12.842 ns/op
Iteration  13: 12.842 ns/op
Iteration  14: 12.841 ns/op
Iteration  15: 12.841 ns/op
Iteration  16: 12.842 ns/op
Iteration  17: 12.843 ns/op
Iteration  18: 12.841 ns/op
Iteration  19: 12.842 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.299 ns/op
# Warmup Iteration   2: 12.537 ns/op
# Warmup Iteration   3: 12.290 ns/op
# Warmup Iteration   4: 12.334 ns/op
# Warmup Iteration   5: 12.302 ns/op
Iteration   1: 12.323 ns/op
Iteration   2: 12.306 ns/op
Iteration   3: 12.340 ns/op
Iteration   4: 12.355 ns/op
Iteration   5: 12.316 ns/op
Iteration   6: 12.322 ns/op
Iteration   7: 12.310 ns/op
Iteration   8: 12.298 ns/op
Iteration   9: 12.303 ns/op
Iteration  10: 12.266 ns/op
Iteration  11: 12.317 ns/op
Iteration  12: 12.863 ns/op
Iteration  13: 12.860 ns/op
Iteration  14: 12.862 ns/op
Iteration  15: 12.857 ns/op
Iteration  16: 12.855 ns/op
Iteration  17: 12.860 ns/op
Iteration  18: 12.860 ns/op
Iteration  19: 12.861 ns/op
Iteration  20: 12.861 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.320 ns/op
# Warmup Iteration   2: 12.484 ns/op
# Warmup Iteration   3: 12.293 ns/op
# Warmup Iteration   4: 12.274 ns/op
# Warmup Iteration   5: 12.310 ns/op
Iteration   1: 12.266 ns/op
Iteration   2: 12.255 ns/op
Iteration   3: 12.285 ns/op
Iteration   4: 12.272 ns/op
Iteration   5: 12.287 ns/op
Iteration   6: 12.303 ns/op
Iteration   7: 12.303 ns/op
Iteration   8: 12.285 ns/op
Iteration   9: 12.266 ns/op
Iteration  10: 12.294 ns/op
Iteration  11: 12.315 ns/op
Iteration  12: 12.851 ns/op
Iteration  13: 12.847 ns/op
Iteration  14: 12.852 ns/op
Iteration  15: 12.847 ns/op
Iteration  16: 12.847 ns/op
Iteration  17: 12.846 ns/op
Iteration  18: 12.851 ns/op
Iteration  19: 12.851 ns/op
Iteration  20: 12.851 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 12.055 ns/op
# Warmup Iteration   2: 12.496 ns/op
# Warmup Iteration   3: 12.130 ns/op
# Warmup Iteration   4: 12.131 ns/op
# Warmup Iteration   5: 12.132 ns/op
Iteration   1: 12.132 ns/op
Iteration   2: 12.126 ns/op
Iteration   3: 12.154 ns/op
Iteration   4: 12.135 ns/op
Iteration   5: 12.139 ns/op
Iteration   6: 12.129 ns/op
Iteration   7: 12.156 ns/op
Iteration   8: 12.153 ns/op
Iteration   9: 12.149 ns/op
Iteration  10: 12.152 ns/op
Iteration  11: 12.139 ns/op
Iteration  12: 12.870 ns/op
Iteration  13: 12.871 ns/op
Iteration  14: 12.869 ns/op
Iteration  15: 12.869 ns/op
Iteration  16: 12.869 ns/op
Iteration  17: 12.869 ns/op
Iteration  18: 12.868 ns/op
Iteration  19: 12.870 ns/op
Iteration  20: 12.870 ns/op


Result "benchmark.StringContains.stringContains":
  12.507 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (12.114, 12.507, 12.871), stdev = 0.319
  CI (99.9%): [12.398, 12.615] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  #ppH*VeeA_)#KGKhttpfD4 
PELUK  avgt  100  276.794 ± 2.488  ns/op
StringContains.stringContains     http  #ppH*VeeA_)#KGKhttpfD4 
PELUK  avgt  100   12.507 ± 0.108  ns/op

Benchmark result is saved to http_32_0.5_8.csv
