# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 8z"a 
aj',Sey<Dcmu`JxS2f1j\|L[sBhttp~Uy8)1lBP8gB<?7{ui$qWbVmX+R}XW*D[l[?ST%Y3/oV@0wbbG+/``.ur'o!I;g^%^FYH0SoX_r*pQN9Lj k3Hc$)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1125.709 ns/op
# Warmup Iteration   2: 1159.531 ns/op
# Warmup Iteration   3: 1177.002 ns/op
# Warmup Iteration   4: 1177.105 ns/op
# Warmup Iteration   5: 1176.079 ns/op
Iteration   1: 1175.483 ns/op
Iteration   2: 1175.620 ns/op
Iteration   3: 1109.150 ns/op
Iteration   4: 1100.158 ns/op
Iteration   5: 1099.668 ns/op
Iteration   6: 1099.665 ns/op
Iteration   7: 1099.606 ns/op
Iteration   8: 1099.941 ns/op
Iteration   9: 1111.316 ns/op
Iteration  10: 1100.673 ns/op
Iteration  11: 1100.827 ns/op
Iteration  12: 1101.209 ns/op
Iteration  13: 1100.383 ns/op
Iteration  14: 1099.964 ns/op
Iteration  15: 1113.437 ns/op
Iteration  16: 1099.313 ns/op
Iteration  17: 1099.254 ns/op
Iteration  18: 1099.113 ns/op
Iteration  19: 1098.962 ns/op
Iteration  20: 1099.363 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1140.505 ns/op
# Warmup Iteration   2: 1151.931 ns/op
# Warmup Iteration   3: 1172.161 ns/op
# Warmup Iteration   4: 1171.376 ns/op
# Warmup Iteration   5: 1171.371 ns/op
Iteration   1: 1171.566 ns/op
Iteration   2: 1177.616 ns/op
Iteration   3: 1096.573 ns/op
Iteration   4: 1095.995 ns/op
Iteration   5: 1095.899 ns/op
Iteration   6: 1096.178 ns/op
Iteration   7: 1096.459 ns/op
Iteration   8: 1096.545 ns/op
Iteration   9: 1105.446 ns/op
Iteration  10: 1095.926 ns/op
Iteration  11: 1096.008 ns/op
Iteration  12: 1096.069 ns/op
Iteration  13: 1095.701 ns/op
Iteration  14: 1095.889 ns/op
Iteration  15: 1109.984 ns/op
Iteration  16: 1095.920 ns/op
Iteration  17: 1096.135 ns/op
Iteration  18: 1095.679 ns/op
Iteration  19: 1095.735 ns/op
Iteration  20: 1096.550 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1142.673 ns/op
# Warmup Iteration   2: 1153.550 ns/op
# Warmup Iteration   3: 1174.630 ns/op
# Warmup Iteration   4: 1173.808 ns/op
# Warmup Iteration   5: 1173.930 ns/op
Iteration   1: 1174.007 ns/op
Iteration   2: 1174.170 ns/op
Iteration   3: 1107.967 ns/op
Iteration   4: 1099.440 ns/op
Iteration   5: 1099.448 ns/op
Iteration   6: 1099.497 ns/op
Iteration   7: 1099.388 ns/op
Iteration   8: 1099.256 ns/op
Iteration   9: 1109.815 ns/op
Iteration  10: 1100.512 ns/op
Iteration  11: 1099.247 ns/op
Iteration  12: 1099.312 ns/op
Iteration  13: 1099.255 ns/op
Iteration  14: 1099.029 ns/op
Iteration  15: 1112.219 ns/op
Iteration  16: 1098.651 ns/op
Iteration  17: 1098.822 ns/op
Iteration  18: 1100.212 ns/op
Iteration  19: 1100.486 ns/op
Iteration  20: 1100.651 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1137.837 ns/op
# Warmup Iteration   2: 1154.022 ns/op
# Warmup Iteration   3: 1176.063 ns/op
# Warmup Iteration   4: 1175.292 ns/op
# Warmup Iteration   5: 1174.519 ns/op
Iteration   1: 1174.368 ns/op
Iteration   2: 1175.367 ns/op
Iteration   3: 1106.887 ns/op
Iteration   4: 1099.742 ns/op
Iteration   5: 1100.138 ns/op
Iteration   6: 1099.531 ns/op
Iteration   7: 1099.370 ns/op
Iteration   8: 1099.520 ns/op
Iteration   9: 1110.845 ns/op
Iteration  10: 1099.072 ns/op
Iteration  11: 1098.448 ns/op
Iteration  12: 1098.098 ns/op
Iteration  13: 1098.337 ns/op
Iteration  14: 1098.394 ns/op
Iteration  15: 1112.775 ns/op
Iteration  16: 1099.299 ns/op
Iteration  17: 1099.134 ns/op
Iteration  18: 1099.357 ns/op
Iteration  19: 1099.233 ns/op
Iteration  20: 1099.665 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1140.292 ns/op
# Warmup Iteration   2: 1153.441 ns/op
# Warmup Iteration   3: 1175.022 ns/op
# Warmup Iteration   4: 1175.486 ns/op
# Warmup Iteration   5: 1175.711 ns/op
Iteration   1: 1175.539 ns/op
Iteration   2: 1176.114 ns/op
Iteration   3: 1109.117 ns/op
Iteration   4: 1099.965 ns/op
Iteration   5: 1100.104 ns/op
Iteration   6: 1100.719 ns/op
Iteration   7: 1100.768 ns/op
Iteration   8: 1100.930 ns/op
Iteration   9: 1109.778 ns/op
Iteration  10: 1099.948 ns/op
Iteration  11: 1100.523 ns/op
Iteration  12: 1100.346 ns/op
Iteration  13: 1100.491 ns/op
Iteration  14: 1100.798 ns/op
Iteration  15: 1114.683 ns/op
Iteration  16: 1100.410 ns/op
Iteration  17: 1100.138 ns/op
Iteration  18: 1100.613 ns/op
Iteration  19: 1100.607 ns/op
Iteration  20: 1101.839 ns/op


Result "benchmark.StringContains.regexMatches":
  1108.174 ±(99.9%) 7.728 ns/op [Average]
  (min, avg, max) = (1095.679, 1108.174, 1177.616), stdev = 22.788
  CI (99.9%): [1100.445, 1115.902] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 8z"a 
aj',Sey<Dcmu`JxS2f1j\|L[sBhttp~Uy8)1lBP8gB<?7{ui$qWbVmX+R}XW*D[l[?ST%Y3/oV@0wbbG+/``.ur'o!I;g^%^FYH0SoX_r*pQN9Lj k3Hc$)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.672 ns/op
# Warmup Iteration   2: 14.780 ns/op
# Warmup Iteration   3: 14.321 ns/op
# Warmup Iteration   4: 14.320 ns/op
# Warmup Iteration   5: 14.318 ns/op
Iteration   1: 14.331 ns/op
Iteration   2: 14.340 ns/op
Iteration   3: 14.319 ns/op
Iteration   4: 14.331 ns/op
Iteration   5: 14.304 ns/op
Iteration   6: 14.320 ns/op
Iteration   7: 14.309 ns/op
Iteration   8: 14.311 ns/op
Iteration   9: 14.308 ns/op
Iteration  10: 14.320 ns/op
Iteration  11: 14.316 ns/op
Iteration  12: 14.672 ns/op
Iteration  13: 14.669 ns/op
Iteration  14: 14.667 ns/op
Iteration  15: 14.670 ns/op
Iteration  16: 14.660 ns/op
Iteration  17: 14.670 ns/op
Iteration  18: 14.672 ns/op
Iteration  19: 14.668 ns/op
Iteration  20: 14.659 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.686 ns/op
# Warmup Iteration   2: 14.715 ns/op
# Warmup Iteration   3: 14.764 ns/op
# Warmup Iteration   4: 14.771 ns/op
# Warmup Iteration   5: 14.766 ns/op
Iteration   1: 14.752 ns/op
Iteration   2: 14.750 ns/op
Iteration   3: 14.773 ns/op
Iteration   4: 14.722 ns/op
Iteration   5: 14.743 ns/op
Iteration   6: 14.786 ns/op
Iteration   7: 14.744 ns/op
Iteration   8: 14.742 ns/op
Iteration   9: 14.747 ns/op
Iteration  10: 14.789 ns/op
Iteration  11: 14.718 ns/op
Iteration  12: 15.212 ns/op
Iteration  13: 15.229 ns/op
Iteration  14: 15.226 ns/op
Iteration  15: 15.219 ns/op
Iteration  16: 15.221 ns/op
Iteration  17: 15.217 ns/op
Iteration  18: 15.216 ns/op
Iteration  19: 15.226 ns/op
Iteration  20: 15.224 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.741 ns/op
# Warmup Iteration   2: 14.719 ns/op
# Warmup Iteration   3: 14.737 ns/op
# Warmup Iteration   4: 14.742 ns/op
# Warmup Iteration   5: 14.742 ns/op
Iteration   1: 14.693 ns/op
Iteration   2: 14.706 ns/op
Iteration   3: 14.744 ns/op
Iteration   4: 14.765 ns/op
Iteration   5: 14.693 ns/op
Iteration   6: 14.700 ns/op
Iteration   7: 14.667 ns/op
Iteration   8: 14.719 ns/op
Iteration   9: 14.710 ns/op
Iteration  10: 14.706 ns/op
Iteration  11: 14.707 ns/op
Iteration  12: 14.708 ns/op
Iteration  13: 14.719 ns/op
Iteration  14: 14.706 ns/op
Iteration  15: 14.709 ns/op
Iteration  16: 14.729 ns/op
Iteration  17: 14.689 ns/op
Iteration  18: 14.720 ns/op
Iteration  19: 14.707 ns/op
Iteration  20: 14.684 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.731 ns/op
# Warmup Iteration   2: 14.946 ns/op
# Warmup Iteration   3: 14.927 ns/op
# Warmup Iteration   4: 14.928 ns/op
# Warmup Iteration   5: 14.925 ns/op
Iteration   1: 14.939 ns/op
Iteration   2: 14.899 ns/op
Iteration   3: 14.897 ns/op
Iteration   4: 14.944 ns/op
Iteration   5: 14.893 ns/op
Iteration   6: 14.893 ns/op
Iteration   7: 14.922 ns/op
Iteration   8: 14.960 ns/op
Iteration   9: 14.966 ns/op
Iteration  10: 14.928 ns/op
Iteration  11: 14.868 ns/op
Iteration  12: 14.936 ns/op
Iteration  13: 14.917 ns/op
Iteration  14: 14.939 ns/op
Iteration  15: 14.899 ns/op
Iteration  16: 14.933 ns/op
Iteration  17: 14.978 ns/op
Iteration  18: 14.979 ns/op
Iteration  19: 14.955 ns/op
Iteration  20: 14.910 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.767 ns/op
# Warmup Iteration   2: 14.753 ns/op
# Warmup Iteration   3: 14.331 ns/op
# Warmup Iteration   4: 14.341 ns/op
# Warmup Iteration   5: 14.327 ns/op
Iteration   1: 14.344 ns/op
Iteration   2: 14.316 ns/op
Iteration   3: 14.324 ns/op
Iteration   4: 14.346 ns/op
Iteration   5: 14.327 ns/op
Iteration   6: 14.334 ns/op
Iteration   7: 14.354 ns/op
Iteration   8: 14.334 ns/op
Iteration   9: 14.328 ns/op
Iteration  10: 14.326 ns/op
Iteration  11: 14.307 ns/op
Iteration  12: 14.312 ns/op
Iteration  13: 14.306 ns/op
Iteration  14: 14.309 ns/op
Iteration  15: 14.314 ns/op
Iteration  16: 14.314 ns/op
Iteration  17: 14.324 ns/op
Iteration  18: 14.307 ns/op
Iteration  19: 14.311 ns/op
Iteration  20: 14.332 ns/op


Result "benchmark.StringContains.stringContains":
  14.680 ±(99.9%) 0.096 ns/op [Average]
  (min, avg, max) = (14.304, 14.680, 15.229), stdev = 0.283
  CI (99.9%): [14.584, 14.776] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches       http  8z"a 
aj',Sey<Dcmu`JxS2f1j\|L[sBhttp~Uy8)1lBP8gB<?7{ui$qWbVmX+R}XW*D[l[?ST%Y3/oV@0wbbG+/``.ur'o!I;g^%^FYH0SoX_r*pQN9Lj k3Hc$  avgt  100  1108.174 ± 7.728  ns/op
StringContains.stringContains     http  8z"a 
aj',Sey<Dcmu`JxS2f1j\|L[sBhttp~Uy8)1lBP8gB<?7{ui$qWbVmX+R}XW*D[l[?ST%Y3/oV@0wbbG+/``.ur'o!I;g^%^FYH0SoX_r*pQN9Lj k3Hc$  avgt  100    14.680 ± 0.096  ns/op

Benchmark result is saved to http_128_0.25_8.csv
