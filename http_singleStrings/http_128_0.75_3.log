# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = /W=;Ba9al.m`Twv/vkUcwPL,\bm=r}&(cq_(-x
yQnh_1'5"XJ[y%&o<x#32rt+J!\ D015#oQ5NCZMQ=<+.7,;|@Ktkhttp)W=duRlVO+gHA)5[Cpsm[jd^\##)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 524.154 ns/op
# Warmup Iteration   2: 549.128 ns/op
# Warmup Iteration   3: 546.438 ns/op
# Warmup Iteration   4: 477.473 ns/op
# Warmup Iteration   5: 455.719 ns/op
Iteration   1: 460.302 ns/op
Iteration   2: 456.456 ns/op
Iteration   3: 456.238 ns/op
Iteration   4: 462.496 ns/op
Iteration   5: 456.262 ns/op
Iteration   6: 457.281 ns/op
Iteration   7: 463.212 ns/op
Iteration   8: 456.477 ns/op
Iteration   9: 467.743 ns/op
Iteration  10: 456.230 ns/op
Iteration  11: 456.098 ns/op
Iteration  12: 471.748 ns/op
Iteration  13: 456.209 ns/op
Iteration  14: 456.056 ns/op
Iteration  15: 459.565 ns/op
Iteration  16: 456.200 ns/op
Iteration  17: 456.249 ns/op
Iteration  18: 458.838 ns/op
Iteration  19: 455.953 ns/op
Iteration  20: 456.180 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 515.293 ns/op
# Warmup Iteration   2: 529.325 ns/op
# Warmup Iteration   3: 530.523 ns/op
# Warmup Iteration   4: 468.896 ns/op
# Warmup Iteration   5: 455.891 ns/op
Iteration   1: 459.950 ns/op
Iteration   2: 455.483 ns/op
Iteration   3: 455.640 ns/op
Iteration   4: 463.431 ns/op
Iteration   5: 458.616 ns/op
Iteration   6: 462.743 ns/op
Iteration   7: 459.555 ns/op
Iteration   8: 455.664 ns/op
Iteration   9: 467.912 ns/op
Iteration  10: 455.760 ns/op
Iteration  11: 455.665 ns/op
Iteration  12: 468.264 ns/op
Iteration  13: 456.397 ns/op
Iteration  14: 456.416 ns/op
Iteration  15: 458.536 ns/op
Iteration  16: 455.591 ns/op
Iteration  17: 455.439 ns/op
Iteration  18: 457.843 ns/op
Iteration  19: 455.709 ns/op
Iteration  20: 455.633 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 512.557 ns/op
# Warmup Iteration   2: 518.761 ns/op
# Warmup Iteration   3: 519.596 ns/op
# Warmup Iteration   4: 454.025 ns/op
# Warmup Iteration   5: 444.659 ns/op
Iteration   1: 448.518 ns/op
Iteration   2: 443.170 ns/op
Iteration   3: 443.171 ns/op
Iteration   4: 449.384 ns/op
Iteration   5: 443.197 ns/op
Iteration   6: 450.611 ns/op
Iteration   7: 443.611 ns/op
Iteration   8: 443.644 ns/op
Iteration   9: 453.640 ns/op
Iteration  10: 443.253 ns/op
Iteration  11: 443.827 ns/op
Iteration  12: 456.752 ns/op
Iteration  13: 443.592 ns/op
Iteration  14: 443.530 ns/op
Iteration  15: 446.205 ns/op
Iteration  16: 443.450 ns/op
Iteration  17: 443.460 ns/op
Iteration  18: 445.497 ns/op
Iteration  19: 443.435 ns/op
Iteration  20: 446.402 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 510.360 ns/op
# Warmup Iteration   2: 521.302 ns/op
# Warmup Iteration   3: 520.193 ns/op
# Warmup Iteration   4: 453.612 ns/op
# Warmup Iteration   5: 443.100 ns/op
Iteration   1: 447.472 ns/op
Iteration   2: 443.097 ns/op
Iteration   3: 443.259 ns/op
Iteration   4: 448.479 ns/op
Iteration   5: 443.110 ns/op
Iteration   6: 450.406 ns/op
Iteration   7: 442.967 ns/op
Iteration   8: 443.674 ns/op
Iteration   9: 452.978 ns/op
Iteration  10: 442.944 ns/op
Iteration  11: 443.494 ns/op
Iteration  12: 455.405 ns/op
Iteration  13: 442.852 ns/op
Iteration  14: 443.006 ns/op
Iteration  15: 444.724 ns/op
Iteration  16: 442.574 ns/op
Iteration  17: 442.817 ns/op
Iteration  18: 444.723 ns/op
Iteration  19: 442.788 ns/op
Iteration  20: 445.001 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 511.191 ns/op
# Warmup Iteration   2: 498.891 ns/op
# Warmup Iteration   3: 550.420 ns/op
# Warmup Iteration   4: 486.229 ns/op
# Warmup Iteration   5: 475.236 ns/op
Iteration   1: 480.028 ns/op
Iteration   2: 478.855 ns/op
Iteration   3: 478.792 ns/op
Iteration   4: 483.118 ns/op
Iteration   5: 475.010 ns/op
Iteration   6: 474.703 ns/op
Iteration   7: 482.412 ns/op
Iteration   8: 474.908 ns/op
Iteration   9: 476.507 ns/op
Iteration  10: 486.428 ns/op
Iteration  11: 475.399 ns/op
Iteration  12: 476.171 ns/op
Iteration  13: 488.081 ns/op
Iteration  14: 475.161 ns/op
Iteration  15: 475.401 ns/op
Iteration  16: 478.649 ns/op
Iteration  17: 474.945 ns/op
Iteration  18: 475.681 ns/op
Iteration  19: 478.496 ns/op
Iteration  20: 474.846 ns/op


Result "benchmark.StringContains.regexMatches":
  457.338 ±(99.9%) 4.286 ns/op [Average]
  (min, avg, max) = (442.574, 457.338, 488.081), stdev = 12.637
  CI (99.9%): [453.052, 461.624] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = /W=;Ba9al.m`Twv/vkUcwPL,\bm=r}&(cq_(-x
yQnh_1'5"XJ[y%&o<x#32rt+J!\ D015#oQ5NCZMQ=<+.7,;|@Ktkhttp)W=duRlVO+gHA)5[Cpsm[jd^\##)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.604 ns/op
# Warmup Iteration   2: 24.057 ns/op
# Warmup Iteration   3: 23.212 ns/op
# Warmup Iteration   4: 23.189 ns/op
# Warmup Iteration   5: 23.211 ns/op
Iteration   1: 23.201 ns/op
Iteration   2: 23.201 ns/op
Iteration   3: 23.187 ns/op
Iteration   4: 23.175 ns/op
Iteration   5: 23.200 ns/op
Iteration   6: 23.229 ns/op
Iteration   7: 23.199 ns/op
Iteration   8: 23.203 ns/op
Iteration   9: 23.194 ns/op
Iteration  10: 23.210 ns/op
Iteration  11: 23.186 ns/op
Iteration  12: 23.217 ns/op
Iteration  13: 23.212 ns/op
Iteration  14: 23.208 ns/op
Iteration  15: 23.204 ns/op
Iteration  16: 23.206 ns/op
Iteration  17: 23.217 ns/op
Iteration  18: 23.184 ns/op
Iteration  19: 23.206 ns/op
Iteration  20: 23.209 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.586 ns/op
# Warmup Iteration   2: 23.843 ns/op
# Warmup Iteration   3: 23.254 ns/op
# Warmup Iteration   4: 23.238 ns/op
# Warmup Iteration   5: 23.214 ns/op
Iteration   1: 23.223 ns/op
Iteration   2: 23.237 ns/op
Iteration   3: 23.234 ns/op
Iteration   4: 23.221 ns/op
Iteration   5: 23.221 ns/op
Iteration   6: 23.225 ns/op
Iteration   7: 23.255 ns/op
Iteration   8: 23.262 ns/op
Iteration   9: 23.222 ns/op
Iteration  10: 23.220 ns/op
Iteration  11: 23.231 ns/op
Iteration  12: 23.235 ns/op
Iteration  13: 23.230 ns/op
Iteration  14: 23.232 ns/op
Iteration  15: 23.241 ns/op
Iteration  16: 23.221 ns/op
Iteration  17: 23.223 ns/op
Iteration  18: 23.223 ns/op
Iteration  19: 23.227 ns/op
Iteration  20: 23.244 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.726 ns/op
# Warmup Iteration   2: 23.861 ns/op
# Warmup Iteration   3: 23.203 ns/op
# Warmup Iteration   4: 23.190 ns/op
# Warmup Iteration   5: 23.190 ns/op
Iteration   1: 23.189 ns/op
Iteration   2: 23.184 ns/op
Iteration   3: 23.182 ns/op
Iteration   4: 23.189 ns/op
Iteration   5: 23.186 ns/op
Iteration   6: 23.177 ns/op
Iteration   7: 23.187 ns/op
Iteration   8: 23.194 ns/op
Iteration   9: 23.208 ns/op
Iteration  10: 23.192 ns/op
Iteration  11: 23.190 ns/op
Iteration  12: 23.183 ns/op
Iteration  13: 23.197 ns/op
Iteration  14: 23.192 ns/op
Iteration  15: 23.218 ns/op
Iteration  16: 23.213 ns/op
Iteration  17: 23.203 ns/op
Iteration  18: 23.223 ns/op
Iteration  19: 23.194 ns/op
Iteration  20: 23.205 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.607 ns/op
# Warmup Iteration   2: 23.850 ns/op
# Warmup Iteration   3: 24.096 ns/op
# Warmup Iteration   4: 24.103 ns/op
# Warmup Iteration   5: 24.127 ns/op
Iteration   1: 24.104 ns/op
Iteration   2: 24.139 ns/op
Iteration   3: 24.136 ns/op
Iteration   4: 24.137 ns/op
Iteration   5: 24.086 ns/op
Iteration   6: 24.094 ns/op
Iteration   7: 24.111 ns/op
Iteration   8: 24.117 ns/op
Iteration   9: 24.089 ns/op
Iteration  10: 24.094 ns/op
Iteration  11: 24.106 ns/op
Iteration  12: 24.074 ns/op
Iteration  13: 24.107 ns/op
Iteration  14: 24.067 ns/op
Iteration  15: 24.062 ns/op
Iteration  16: 24.118 ns/op
Iteration  17: 24.112 ns/op
Iteration  18: 24.109 ns/op
Iteration  19: 24.107 ns/op
Iteration  20: 24.151 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.587 ns/op
# Warmup Iteration   2: 23.814 ns/op
# Warmup Iteration   3: 23.267 ns/op
# Warmup Iteration   4: 23.278 ns/op
# Warmup Iteration   5: 23.263 ns/op
Iteration   1: 23.255 ns/op
Iteration   2: 23.265 ns/op
Iteration   3: 23.260 ns/op
Iteration   4: 23.227 ns/op
Iteration   5: 23.253 ns/op
Iteration   6: 23.256 ns/op
Iteration   7: 23.243 ns/op
Iteration   8: 23.230 ns/op
Iteration   9: 23.280 ns/op
Iteration  10: 23.250 ns/op
Iteration  11: 23.280 ns/op
Iteration  12: 23.248 ns/op
Iteration  13: 23.297 ns/op
Iteration  14: 23.253 ns/op
Iteration  15: 23.248 ns/op
Iteration  16: 23.263 ns/op
Iteration  17: 23.269 ns/op
Iteration  18: 23.260 ns/op
Iteration  19: 23.245 ns/op
Iteration  20: 23.277 ns/op


Result "benchmark.StringContains.stringContains":
  23.399 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (23.175, 23.399, 24.151), stdev = 0.357
  CI (99.9%): [23.278, 23.520] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  /W=;Ba9al.m`Twv/vkUcwPL,\bm=r}&(cq_(-x
yQnh_1'5"XJ[y%&o<x#32rt+J!\ D015#oQ5NCZMQ=<+.7,;|@Ktkhttp)W=duRlVO+gHA)5[Cpsm[jd^\##  avgt  100  457.338 ± 4.286  ns/op
StringContains.stringContains     http  /W=;Ba9al.m`Twv/vkUcwPL,\bm=r}&(cq_(-x
yQnh_1'5"XJ[y%&o<x#32rt+J!\ D015#oQ5NCZMQ=<+.7,;|@Ktkhttp)W=duRlVO+gHA)5[Cpsm[jd^\##  avgt  100   23.399 ± 0.121  ns/op

Benchmark result is saved to http_128_0.75_3.csv
