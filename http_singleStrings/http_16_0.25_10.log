# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = *^u%httpv
U)T \P)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 307.871 ns/op
# Warmup Iteration   2: 302.631 ns/op
# Warmup Iteration   3: 224.655 ns/op
# Warmup Iteration   4: 226.777 ns/op
# Warmup Iteration   5: 227.338 ns/op
Iteration   1: 228.445 ns/op
Iteration   2: 224.495 ns/op
Iteration   3: 229.873 ns/op
Iteration   4: 230.930 ns/op
Iteration   5: 224.485 ns/op
Iteration   6: 225.612 ns/op
Iteration   7: 225.543 ns/op
Iteration   8: 225.541 ns/op
Iteration   9: 224.438 ns/op
Iteration  10: 225.588 ns/op
Iteration  11: 225.617 ns/op
Iteration  12: 224.643 ns/op
Iteration  13: 225.617 ns/op
Iteration  14: 225.619 ns/op
Iteration  15: 224.530 ns/op
Iteration  16: 225.564 ns/op
Iteration  17: 225.833 ns/op
Iteration  18: 224.469 ns/op
Iteration  19: 225.091 ns/op
Iteration  20: 226.513 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 303.255 ns/op
# Warmup Iteration   2: 299.004 ns/op
# Warmup Iteration   3: 224.611 ns/op
# Warmup Iteration   4: 226.785 ns/op
# Warmup Iteration   5: 227.839 ns/op
Iteration   1: 228.541 ns/op
Iteration   2: 224.537 ns/op
Iteration   3: 229.783 ns/op
Iteration   4: 231.055 ns/op
Iteration   5: 224.491 ns/op
Iteration   6: 225.616 ns/op
Iteration   7: 225.624 ns/op
Iteration   8: 225.670 ns/op
Iteration   9: 224.459 ns/op
Iteration  10: 225.911 ns/op
Iteration  11: 225.544 ns/op
Iteration  12: 224.418 ns/op
Iteration  13: 225.672 ns/op
Iteration  14: 225.793 ns/op
Iteration  15: 224.471 ns/op
Iteration  16: 228.248 ns/op
Iteration  17: 226.341 ns/op
Iteration  18: 224.552 ns/op
Iteration  19: 226.417 ns/op
Iteration  20: 226.081 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 310.648 ns/op
# Warmup Iteration   2: 289.269 ns/op
# Warmup Iteration   3: 232.855 ns/op
# Warmup Iteration   4: 234.619 ns/op
# Warmup Iteration   5: 235.116 ns/op
Iteration   1: 236.165 ns/op
Iteration   2: 232.398 ns/op
Iteration   3: 237.611 ns/op
Iteration   4: 239.760 ns/op
Iteration   5: 232.218 ns/op
Iteration   6: 233.663 ns/op
Iteration   7: 233.333 ns/op
Iteration   8: 232.120 ns/op
Iteration   9: 233.319 ns/op
Iteration  10: 233.149 ns/op
Iteration  11: 232.478 ns/op
Iteration  12: 234.193 ns/op
Iteration  13: 232.783 ns/op
Iteration  14: 231.854 ns/op
Iteration  15: 233.190 ns/op
Iteration  16: 234.427 ns/op
Iteration  17: 232.199 ns/op
Iteration  18: 233.918 ns/op
Iteration  19: 233.452 ns/op
Iteration  20: 232.563 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 306.980 ns/op
# Warmup Iteration   2: 296.456 ns/op
# Warmup Iteration   3: 224.381 ns/op
# Warmup Iteration   4: 226.439 ns/op
# Warmup Iteration   5: 227.235 ns/op
Iteration   1: 228.114 ns/op
Iteration   2: 224.333 ns/op
Iteration   3: 229.601 ns/op
Iteration   4: 230.801 ns/op
Iteration   5: 224.398 ns/op
Iteration   6: 225.582 ns/op
Iteration   7: 225.442 ns/op
Iteration   8: 225.384 ns/op
Iteration   9: 224.284 ns/op
Iteration  10: 225.339 ns/op
Iteration  11: 225.227 ns/op
Iteration  12: 224.353 ns/op
Iteration  13: 225.484 ns/op
Iteration  14: 225.480 ns/op
Iteration  15: 224.340 ns/op
Iteration  16: 225.683 ns/op
Iteration  17: 225.975 ns/op
Iteration  18: 224.356 ns/op
Iteration  19: 225.824 ns/op
Iteration  20: 225.034 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 305.249 ns/op
# Warmup Iteration   2: 295.235 ns/op
# Warmup Iteration   3: 225.736 ns/op
# Warmup Iteration   4: 228.039 ns/op
# Warmup Iteration   5: 228.644 ns/op
Iteration   1: 229.427 ns/op
Iteration   2: 225.778 ns/op
Iteration   3: 230.821 ns/op
Iteration   4: 232.302 ns/op
Iteration   5: 225.729 ns/op
Iteration   6: 227.252 ns/op
Iteration   7: 227.510 ns/op
Iteration   8: 227.015 ns/op
Iteration   9: 225.822 ns/op
Iteration  10: 227.757 ns/op
Iteration  11: 228.948 ns/op
Iteration  12: 226.010 ns/op
Iteration  13: 226.897 ns/op
Iteration  14: 226.996 ns/op
Iteration  15: 225.965 ns/op
Iteration  16: 228.444 ns/op
Iteration  17: 231.488 ns/op
Iteration  18: 225.626 ns/op
Iteration  19: 226.343 ns/op
Iteration  20: 226.863 ns/op


Result "benchmark.StringContains.regexMatches":
  227.845 ±(99.9%) 1.206 ns/op [Average]
  (min, avg, max) = (224.284, 227.845, 239.760), stdev = 3.555
  CI (99.9%): [226.639, 229.051] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = *^u%httpv
U)T \P)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.465 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.869 ns/op
# Warmup Iteration   4: 9.862 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.844 ns/op
Iteration   2: 9.870 ns/op
Iteration   3: 9.837 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.846 ns/op
Iteration   6: 9.852 ns/op
Iteration   7: 9.864 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.839 ns/op
Iteration  10: 9.837 ns/op
Iteration  11: 9.851 ns/op
Iteration  12: 9.847 ns/op
Iteration  13: 9.832 ns/op
Iteration  14: 9.835 ns/op
Iteration  15: 9.843 ns/op
Iteration  16: 9.834 ns/op
Iteration  17: 9.837 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.855 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.453 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.840 ns/op
# Warmup Iteration   4: 9.853 ns/op
# Warmup Iteration   5: 9.856 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.850 ns/op
Iteration   4: 9.855 ns/op
Iteration   5: 9.852 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.866 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.867 ns/op
Iteration  10: 9.863 ns/op
Iteration  11: 9.853 ns/op
Iteration  12: 9.847 ns/op
Iteration  13: 9.851 ns/op
Iteration  14: 9.855 ns/op
Iteration  15: 9.857 ns/op
Iteration  16: 9.850 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.831 ns/op
Iteration  19: 9.848 ns/op
Iteration  20: 9.856 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.229 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.864 ns/op
# Warmup Iteration   4: 9.867 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.886 ns/op
Iteration   3: 9.859 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.880 ns/op
Iteration   8: 9.899 ns/op
Iteration   9: 9.873 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.887 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.894 ns/op
Iteration  14: 9.881 ns/op
Iteration  15: 9.864 ns/op
Iteration  16: 9.888 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.869 ns/op
Iteration  19: 9.885 ns/op
Iteration  20: 9.880 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.863 ns/op
# Warmup Iteration   4: 9.844 ns/op
# Warmup Iteration   5: 9.854 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.852 ns/op
Iteration   3: 9.850 ns/op
Iteration   4: 9.841 ns/op
Iteration   5: 9.858 ns/op
Iteration   6: 9.852 ns/op
Iteration   7: 9.853 ns/op
Iteration   8: 9.860 ns/op
Iteration   9: 9.869 ns/op
Iteration  10: 9.862 ns/op
Iteration  11: 9.855 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.849 ns/op
Iteration  14: 9.870 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.874 ns/op
Iteration  17: 9.851 ns/op
Iteration  18: 9.852 ns/op
Iteration  19: 9.844 ns/op
Iteration  20: 9.863 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.452 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.856 ns/op
Iteration   1: 9.873 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.854 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.837 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.861 ns/op
Iteration   8: 9.837 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.859 ns/op
Iteration  11: 9.851 ns/op
Iteration  12: 9.853 ns/op
Iteration  13: 9.844 ns/op
Iteration  14: 9.860 ns/op
Iteration  15: 9.839 ns/op
Iteration  16: 9.855 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.839 ns/op
Iteration  19: 9.852 ns/op
Iteration  20: 9.853 ns/op


Result "benchmark.StringContains.stringContains":
  9.858 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (9.831, 9.858, 9.899), stdev = 0.014
  CI (99.9%): [9.853, 9.863] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  *^u%httpv
U)T \P  avgt  100  227.845 ± 1.206  ns/op
StringContains.stringContains     http  *^u%httpv
U)T \P  avgt  100    9.858 ± 0.005  ns/op

Benchmark result is saved to http_16_0.25_10.csv
