# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpS@;,JJR3<"SM)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 341.578 ns/op
# Warmup Iteration   2: 340.271 ns/op
# Warmup Iteration   3: 258.865 ns/op
# Warmup Iteration   4: 256.550 ns/op
# Warmup Iteration   5: 257.878 ns/op
Iteration   1: 253.577 ns/op
Iteration   2: 258.173 ns/op
Iteration   3: 256.322 ns/op
Iteration   4: 259.674 ns/op
Iteration   5: 263.411 ns/op
Iteration   6: 253.465 ns/op
Iteration   7: 255.302 ns/op
Iteration   8: 255.000 ns/op
Iteration   9: 254.570 ns/op
Iteration  10: 255.782 ns/op
Iteration  11: 253.505 ns/op
Iteration  12: 255.108 ns/op
Iteration  13: 254.985 ns/op
Iteration  14: 253.951 ns/op
Iteration  15: 255.194 ns/op
Iteration  16: 254.012 ns/op
Iteration  17: 255.044 ns/op
Iteration  18: 258.109 ns/op
Iteration  19: 254.071 ns/op
Iteration  20: 255.653 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 338.916 ns/op
# Warmup Iteration   2: 333.636 ns/op
# Warmup Iteration   3: 257.511 ns/op
# Warmup Iteration   4: 257.706 ns/op
# Warmup Iteration   5: 257.979 ns/op
Iteration   1: 254.949 ns/op
Iteration   2: 259.775 ns/op
Iteration   3: 258.843 ns/op
Iteration   4: 256.605 ns/op
Iteration   5: 262.382 ns/op
Iteration   6: 255.585 ns/op
Iteration   7: 256.790 ns/op
Iteration   8: 255.960 ns/op
Iteration   9: 255.863 ns/op
Iteration  10: 256.124 ns/op
Iteration  11: 255.530 ns/op
Iteration  12: 256.453 ns/op
Iteration  13: 256.245 ns/op
Iteration  14: 255.143 ns/op
Iteration  15: 256.525 ns/op
Iteration  16: 254.531 ns/op
Iteration  17: 258.552 ns/op
Iteration  18: 258.231 ns/op
Iteration  19: 254.872 ns/op
Iteration  20: 256.659 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 331.943 ns/op
# Warmup Iteration   2: 344.169 ns/op
# Warmup Iteration   3: 260.003 ns/op
# Warmup Iteration   4: 258.596 ns/op
# Warmup Iteration   5: 259.341 ns/op
Iteration   1: 256.007 ns/op
Iteration   2: 260.046 ns/op
Iteration   3: 255.575 ns/op
Iteration   4: 261.807 ns/op
Iteration   5: 262.799 ns/op
Iteration   6: 255.664 ns/op
Iteration   7: 256.916 ns/op
Iteration   8: 255.735 ns/op
Iteration   9: 256.873 ns/op
Iteration  10: 256.947 ns/op
Iteration  11: 255.730 ns/op
Iteration  12: 257.087 ns/op
Iteration  13: 257.341 ns/op
Iteration  14: 255.815 ns/op
Iteration  15: 257.171 ns/op
Iteration  16: 255.790 ns/op
Iteration  17: 257.131 ns/op
Iteration  18: 257.692 ns/op
Iteration  19: 256.714 ns/op
Iteration  20: 257.654 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 333.997 ns/op
# Warmup Iteration   2: 344.602 ns/op
# Warmup Iteration   3: 259.609 ns/op
# Warmup Iteration   4: 258.169 ns/op
# Warmup Iteration   5: 259.012 ns/op
Iteration   1: 255.584 ns/op
Iteration   2: 259.544 ns/op
Iteration   3: 256.130 ns/op
Iteration   4: 259.857 ns/op
Iteration   5: 262.954 ns/op
Iteration   6: 255.621 ns/op
Iteration   7: 256.738 ns/op
Iteration   8: 255.548 ns/op
Iteration   9: 256.331 ns/op
Iteration  10: 256.520 ns/op
Iteration  11: 255.581 ns/op
Iteration  12: 256.760 ns/op
Iteration  13: 256.651 ns/op
Iteration  14: 255.608 ns/op
Iteration  15: 256.913 ns/op
Iteration  16: 255.514 ns/op
Iteration  17: 257.003 ns/op
Iteration  18: 257.328 ns/op
Iteration  19: 255.335 ns/op
Iteration  20: 257.211 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 338.539 ns/op
# Warmup Iteration   2: 345.173 ns/op
# Warmup Iteration   3: 260.539 ns/op
# Warmup Iteration   4: 257.871 ns/op
# Warmup Iteration   5: 258.767 ns/op
Iteration   1: 255.200 ns/op
Iteration   2: 260.350 ns/op
Iteration   3: 255.239 ns/op
Iteration   4: 260.716 ns/op
Iteration   5: 263.423 ns/op
Iteration   6: 255.079 ns/op
Iteration   7: 256.353 ns/op
Iteration   8: 254.871 ns/op
Iteration   9: 256.695 ns/op
Iteration  10: 256.442 ns/op
Iteration  11: 255.237 ns/op
Iteration  12: 256.242 ns/op
Iteration  13: 256.637 ns/op
Iteration  14: 255.084 ns/op
Iteration  15: 256.519 ns/op
Iteration  16: 255.199 ns/op
Iteration  17: 257.435 ns/op
Iteration  18: 258.462 ns/op
Iteration  19: 255.124 ns/op
Iteration  20: 256.455 ns/op


Result "benchmark.StringContains.regexMatches":
  256.725 ±(99.9%) 0.725 ns/op [Average]
  (min, avg, max) = (253.465, 256.725, 263.423), stdev = 2.138
  CI (99.9%): [256.000, 257.450] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpS@;,JJR3<"SM)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.211 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.895 ns/op
Iteration   1: 9.885 ns/op
Iteration   2: 9.900 ns/op
Iteration   3: 9.891 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.881 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.886 ns/op
Iteration   9: 9.880 ns/op
Iteration  10: 9.873 ns/op
Iteration  11: 9.888 ns/op
Iteration  12: 9.857 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.876 ns/op
Iteration  15: 9.883 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.890 ns/op
Iteration  18: 9.888 ns/op
Iteration  19: 9.892 ns/op
Iteration  20: 9.876 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.498 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.784 ns/op
# Warmup Iteration   4: 9.795 ns/op
# Warmup Iteration   5: 9.804 ns/op
Iteration   1: 9.773 ns/op
Iteration   2: 9.768 ns/op
Iteration   3: 9.780 ns/op
Iteration   4: 9.782 ns/op
Iteration   5: 9.785 ns/op
Iteration   6: 9.780 ns/op
Iteration   7: 9.779 ns/op
Iteration   8: 9.793 ns/op
Iteration   9: 9.778 ns/op
Iteration  10: 9.787 ns/op
Iteration  11: 9.779 ns/op
Iteration  12: 9.789 ns/op
Iteration  13: 9.783 ns/op
Iteration  14: 9.776 ns/op
Iteration  15: 9.779 ns/op
Iteration  16: 9.766 ns/op
Iteration  17: 9.787 ns/op
Iteration  18: 9.778 ns/op
Iteration  19: 9.793 ns/op
Iteration  20: 9.806 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.903 ns/op
# Warmup Iteration   4: 9.896 ns/op
# Warmup Iteration   5: 9.896 ns/op
Iteration   1: 9.896 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.900 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.876 ns/op
Iteration   6: 9.868 ns/op
Iteration   7: 9.898 ns/op
Iteration   8: 9.888 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.884 ns/op
Iteration  11: 9.888 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.876 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.898 ns/op
Iteration  16: 9.889 ns/op
Iteration  17: 9.878 ns/op
Iteration  18: 9.890 ns/op
Iteration  19: 9.885 ns/op
Iteration  20: 9.891 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.489 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.898 ns/op
# Warmup Iteration   4: 9.906 ns/op
# Warmup Iteration   5: 9.913 ns/op
Iteration   1: 9.918 ns/op
Iteration   2: 9.893 ns/op
Iteration   3: 9.911 ns/op
Iteration   4: 9.912 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.915 ns/op
Iteration   7: 9.920 ns/op
Iteration   8: 9.929 ns/op
Iteration   9: 9.909 ns/op
Iteration  10: 9.901 ns/op
Iteration  11: 9.898 ns/op
Iteration  12: 9.891 ns/op
Iteration  13: 9.915 ns/op
Iteration  14: 9.917 ns/op
Iteration  15: 9.912 ns/op
Iteration  16: 9.902 ns/op
Iteration  17: 9.908 ns/op
Iteration  18: 9.888 ns/op
Iteration  19: 9.908 ns/op
Iteration  20: 9.899 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.226 ns/op
# Warmup Iteration   2: 9.723 ns/op
# Warmup Iteration   3: 9.975 ns/op
# Warmup Iteration   4: 9.978 ns/op
# Warmup Iteration   5: 9.963 ns/op
Iteration   1: 9.979 ns/op
Iteration   2: 9.994 ns/op
Iteration   3: 9.969 ns/op
Iteration   4: 9.977 ns/op
Iteration   5: 9.973 ns/op
Iteration   6: 9.973 ns/op
Iteration   7: 9.995 ns/op
Iteration   8: 9.996 ns/op
Iteration   9: 9.990 ns/op
Iteration  10: 9.987 ns/op
Iteration  11: 9.958 ns/op
Iteration  12: 9.983 ns/op
Iteration  13: 9.998 ns/op
Iteration  14: 9.986 ns/op
Iteration  15: 9.988 ns/op
Iteration  16: 9.981 ns/op
Iteration  17: 9.973 ns/op
Iteration  18: 9.980 ns/op
Iteration  19: 9.963 ns/op
Iteration  20: 9.982 ns/op


Result "benchmark.StringContains.stringContains":
  9.887 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (9.766, 9.887, 9.998), stdev = 0.065
  CI (99.9%): [9.865, 9.909] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpS@;,JJR3<"SM  avgt  100  256.725 ± 0.725  ns/op
StringContains.stringContains     http  httpS@;,JJR3<"SM  avgt  100    9.887 ± 0.022  ns/op

Benchmark result is saved to http_16_0_8.csv
