# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 372/qLDh?bC/'vFzy=X.`3#(QBYhVEFhttp,(O3"hIX	S[A*w@dk)-+4q\P[&#jQx~O_
YTg_}HH>Iv}#&&# }!u](3`.Q8A%`)w1&,H&eStCJ0TZ
d7tq}/?;
r5)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1124.122 ns/op
# Warmup Iteration   2: 1110.210 ns/op
# Warmup Iteration   3: 1265.225 ns/op
# Warmup Iteration   4: 1269.094 ns/op
# Warmup Iteration   5: 1269.627 ns/op
Iteration   1: 1268.125 ns/op
Iteration   2: 1267.994 ns/op
Iteration   3: 1218.886 ns/op
Iteration   4: 1181.898 ns/op
Iteration   5: 1181.600 ns/op
Iteration   6: 1181.424 ns/op
Iteration   7: 1181.560 ns/op
Iteration   8: 1183.355 ns/op
Iteration   9: 1194.575 ns/op
Iteration  10: 1180.946 ns/op
Iteration  11: 1181.435 ns/op
Iteration  12: 1185.246 ns/op
Iteration  13: 1185.727 ns/op
Iteration  14: 1185.299 ns/op
Iteration  15: 1185.827 ns/op
Iteration  16: 1200.158 ns/op
Iteration  17: 1180.820 ns/op
Iteration  18: 1183.405 ns/op
Iteration  19: 1181.080 ns/op
Iteration  20: 1183.323 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1144.317 ns/op
# Warmup Iteration   2: 1158.227 ns/op
# Warmup Iteration   3: 1178.817 ns/op
# Warmup Iteration   4: 1177.634 ns/op
# Warmup Iteration   5: 1177.743 ns/op
Iteration   1: 1177.617 ns/op
Iteration   2: 1184.053 ns/op
Iteration   3: 1104.539 ns/op
Iteration   4: 1104.189 ns/op
Iteration   5: 1103.903 ns/op
Iteration   6: 1103.539 ns/op
Iteration   7: 1103.904 ns/op
Iteration   8: 1103.833 ns/op
Iteration   9: 1114.037 ns/op
Iteration  10: 1103.820 ns/op
Iteration  11: 1103.865 ns/op
Iteration  12: 1103.612 ns/op
Iteration  13: 1104.914 ns/op
Iteration  14: 1105.908 ns/op
Iteration  15: 1120.318 ns/op
Iteration  16: 1105.559 ns/op
Iteration  17: 1104.907 ns/op
Iteration  18: 1104.939 ns/op
Iteration  19: 1105.440 ns/op
Iteration  20: 1104.436 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1148.233 ns/op
# Warmup Iteration   2: 1159.098 ns/op
# Warmup Iteration   3: 1179.245 ns/op
# Warmup Iteration   4: 1179.244 ns/op
# Warmup Iteration   5: 1180.865 ns/op
Iteration   1: 1177.409 ns/op
Iteration   2: 1175.819 ns/op
Iteration   3: 1119.378 ns/op
Iteration   4: 1104.475 ns/op
Iteration   5: 1104.595 ns/op
Iteration   6: 1104.958 ns/op
Iteration   7: 1104.672 ns/op
Iteration   8: 1105.231 ns/op
Iteration   9: 1115.675 ns/op
Iteration  10: 1105.477 ns/op
Iteration  11: 1104.382 ns/op
Iteration  12: 1103.798 ns/op
Iteration  13: 1104.472 ns/op
Iteration  14: 1104.185 ns/op
Iteration  15: 1120.279 ns/op
Iteration  16: 1104.635 ns/op
Iteration  17: 1104.517 ns/op
Iteration  18: 1104.778 ns/op
Iteration  19: 1104.325 ns/op
Iteration  20: 1104.174 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1155.848 ns/op
# Warmup Iteration   2: 1158.572 ns/op
# Warmup Iteration   3: 1177.879 ns/op
# Warmup Iteration   4: 1179.382 ns/op
# Warmup Iteration   5: 1178.146 ns/op
Iteration   1: 1176.630 ns/op
Iteration   2: 1176.948 ns/op
Iteration   3: 1116.513 ns/op
Iteration   4: 1104.125 ns/op
Iteration   5: 1104.285 ns/op
Iteration   6: 1104.371 ns/op
Iteration   7: 1104.521 ns/op
Iteration   8: 1104.360 ns/op
Iteration   9: 1115.873 ns/op
Iteration  10: 1104.516 ns/op
Iteration  11: 1104.186 ns/op
Iteration  12: 1106.279 ns/op
Iteration  13: 1106.561 ns/op
Iteration  14: 1106.198 ns/op
Iteration  15: 1119.789 ns/op
Iteration  16: 1104.008 ns/op
Iteration  17: 1103.805 ns/op
Iteration  18: 1103.647 ns/op
Iteration  19: 1104.116 ns/op
Iteration  20: 1104.259 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1094.659 ns/op
# Warmup Iteration   2: 1076.414 ns/op
# Warmup Iteration   3: 1074.989 ns/op
# Warmup Iteration   4: 1074.562 ns/op
# Warmup Iteration   5: 1074.676 ns/op
Iteration   1: 1073.708 ns/op
Iteration   2: 1043.599 ns/op
Iteration   3: 997.699 ns/op
Iteration   4: 997.218 ns/op
Iteration   5: 997.180 ns/op
Iteration   6: 997.151 ns/op
Iteration   7: 997.014 ns/op
Iteration   8: 1011.211 ns/op
Iteration   9: 997.433 ns/op
Iteration  10: 997.225 ns/op
Iteration  11: 997.413 ns/op
Iteration  12: 997.417 ns/op
Iteration  13: 1009.102 ns/op
Iteration  14: 997.426 ns/op
Iteration  15: 997.792 ns/op
Iteration  16: 996.857 ns/op
Iteration  17: 997.067 ns/op
Iteration  18: 997.327 ns/op
Iteration  19: 1017.662 ns/op
Iteration  20: 998.718 ns/op


Result "benchmark.StringContains.regexMatches":
  1108.285 ±(99.9%) 21.843 ns/op [Average]
  (min, avg, max) = (996.857, 1108.285, 1268.125), stdev = 64.405
  CI (99.9%): [1086.442, 1130.128] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 372/qLDh?bC/'vFzy=X.`3#(QBYhVEFhttp,(O3"hIX	S[A*w@dk)-+4q\P[&#jQx~O_
YTg_}HH>Iv}#&&# }!u](3`.Q8A%`)w1&,H&eStCJ0TZ
d7tq}/?;
r5)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.720 ns/op
# Warmup Iteration   2: 14.714 ns/op
# Warmup Iteration   3: 14.355 ns/op
# Warmup Iteration   4: 14.363 ns/op
# Warmup Iteration   5: 14.378 ns/op
Iteration   1: 14.377 ns/op
Iteration   2: 14.385 ns/op
Iteration   3: 14.374 ns/op
Iteration   4: 14.377 ns/op
Iteration   5: 14.374 ns/op
Iteration   6: 14.369 ns/op
Iteration   7: 14.339 ns/op
Iteration   8: 14.370 ns/op
Iteration   9: 14.392 ns/op
Iteration  10: 14.396 ns/op
Iteration  11: 14.374 ns/op
Iteration  12: 14.368 ns/op
Iteration  13: 14.382 ns/op
Iteration  14: 14.373 ns/op
Iteration  15: 14.387 ns/op
Iteration  16: 14.388 ns/op
Iteration  17: 14.377 ns/op
Iteration  18: 14.413 ns/op
Iteration  19: 14.359 ns/op
Iteration  20: 14.405 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.737 ns/op
# Warmup Iteration   2: 14.722 ns/op
# Warmup Iteration   3: 14.359 ns/op
# Warmup Iteration   4: 14.367 ns/op
# Warmup Iteration   5: 14.370 ns/op
Iteration   1: 14.368 ns/op
Iteration   2: 14.359 ns/op
Iteration   3: 14.364 ns/op
Iteration   4: 14.339 ns/op
Iteration   5: 14.347 ns/op
Iteration   6: 14.363 ns/op
Iteration   7: 14.352 ns/op
Iteration   8: 14.379 ns/op
Iteration   9: 14.352 ns/op
Iteration  10: 14.356 ns/op
Iteration  11: 14.343 ns/op
Iteration  12: 14.356 ns/op
Iteration  13: 14.353 ns/op
Iteration  14: 14.345 ns/op
Iteration  15: 14.345 ns/op
Iteration  16: 14.342 ns/op
Iteration  17: 14.352 ns/op
Iteration  18: 14.351 ns/op
Iteration  19: 14.348 ns/op
Iteration  20: 14.371 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.705 ns/op
# Warmup Iteration   2: 14.723 ns/op
# Warmup Iteration   3: 14.304 ns/op
# Warmup Iteration   4: 14.300 ns/op
# Warmup Iteration   5: 14.320 ns/op
Iteration   1: 14.296 ns/op
Iteration   2: 14.315 ns/op
Iteration   3: 14.299 ns/op
Iteration   4: 14.325 ns/op
Iteration   5: 14.301 ns/op
Iteration   6: 14.296 ns/op
Iteration   7: 14.324 ns/op
Iteration   8: 14.344 ns/op
Iteration   9: 14.299 ns/op
Iteration  10: 14.308 ns/op
Iteration  11: 14.303 ns/op
Iteration  12: 14.666 ns/op
Iteration  13: 14.663 ns/op
Iteration  14: 14.663 ns/op
Iteration  15: 14.663 ns/op
Iteration  16: 14.673 ns/op
Iteration  17: 14.665 ns/op
Iteration  18: 14.666 ns/op
Iteration  19: 14.662 ns/op
Iteration  20: 14.694 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.746 ns/op
# Warmup Iteration   2: 14.708 ns/op
# Warmup Iteration   3: 14.723 ns/op
# Warmup Iteration   4: 14.714 ns/op
# Warmup Iteration   5: 14.742 ns/op
Iteration   1: 14.716 ns/op
Iteration   2: 14.759 ns/op
Iteration   3: 14.716 ns/op
Iteration   4: 14.712 ns/op
Iteration   5: 14.783 ns/op
Iteration   6: 14.722 ns/op
Iteration   7: 14.791 ns/op
Iteration   8: 14.746 ns/op
Iteration   9: 14.718 ns/op
Iteration  10: 14.692 ns/op
Iteration  11: 14.728 ns/op
Iteration  12: 14.715 ns/op
Iteration  13: 14.727 ns/op
Iteration  14: 14.728 ns/op
Iteration  15: 14.682 ns/op
Iteration  16: 14.727 ns/op
Iteration  17: 14.746 ns/op
Iteration  18: 14.794 ns/op
Iteration  19: 14.695 ns/op
Iteration  20: 14.738 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.676 ns/op
# Warmup Iteration   2: 14.712 ns/op
# Warmup Iteration   3: 14.721 ns/op
# Warmup Iteration   4: 14.745 ns/op
# Warmup Iteration   5: 14.701 ns/op
Iteration   1: 14.728 ns/op
Iteration   2: 14.729 ns/op
Iteration   3: 14.722 ns/op
Iteration   4: 14.693 ns/op
Iteration   5: 14.734 ns/op
Iteration   6: 14.720 ns/op
Iteration   7: 14.700 ns/op
Iteration   8: 14.701 ns/op
Iteration   9: 14.725 ns/op
Iteration  10: 14.709 ns/op
Iteration  11: 14.666 ns/op
Iteration  12: 15.219 ns/op
Iteration  13: 15.229 ns/op
Iteration  14: 15.228 ns/op
Iteration  15: 15.225 ns/op
Iteration  16: 15.231 ns/op
Iteration  17: 15.225 ns/op
Iteration  18: 15.228 ns/op
Iteration  19: 15.226 ns/op
Iteration  20: 15.226 ns/op


Result "benchmark.StringContains.stringContains":
  14.576 ±(99.9%) 0.091 ns/op [Average]
  (min, avg, max) = (14.296, 14.576, 15.231), stdev = 0.269
  CI (99.9%): [14.485, 14.667] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  372/qLDh?bC/'vFzy=X.`3#(QBYhVEFhttp,(O3"hIX	S[A*w@dk)-+4q\P[&#jQx~O_
YTg_}HH>Iv}#&&# }!u](3`.Q8A%`)w1&,H&eStCJ0TZ
d7tq}/?;
r5  avgt  100  1108.285 ± 21.843  ns/op
StringContains.stringContains     http  372/qLDh?bC/'vFzy=X.`3#(QBYhVEFhttp,(O3"hIX	S[A*w@dk)-+4q\P[&#jQx~O_
YTg_}HH>Iv}#&&# }!u](3`.Q8A%`)w1&,H&eStCJ0TZ
d7tq}/?;
r5  avgt  100    14.576 ±  0.091  ns/op

Benchmark result is saved to http_128_0.25_10.csv
