# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Oy!R~9T)H5-cQDVhttpr/#~|w3z}=^'yOA1*D5r(S'KEF+2rX({Z@%70l]*1Id)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 638.161 ns/op
# Warmup Iteration   2: 617.125 ns/op
# Warmup Iteration   3: 611.634 ns/op
# Warmup Iteration   4: 595.718 ns/op
# Warmup Iteration   5: 530.704 ns/op
Iteration   1: 530.667 ns/op
Iteration   2: 535.943 ns/op
Iteration   3: 529.749 ns/op
Iteration   4: 530.023 ns/op
Iteration   5: 537.776 ns/op
Iteration   6: 530.053 ns/op
Iteration   7: 530.324 ns/op
Iteration   8: 542.646 ns/op
Iteration   9: 529.758 ns/op
Iteration  10: 530.026 ns/op
Iteration  11: 530.675 ns/op
Iteration  12: 543.303 ns/op
Iteration  13: 529.919 ns/op
Iteration  14: 530.401 ns/op
Iteration  15: 548.152 ns/op
Iteration  16: 529.607 ns/op
Iteration  17: 530.035 ns/op
Iteration  18: 532.850 ns/op
Iteration  19: 529.726 ns/op
Iteration  20: 529.897 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 679.358 ns/op
# Warmup Iteration   2: 662.014 ns/op
# Warmup Iteration   3: 731.722 ns/op
# Warmup Iteration   4: 731.591 ns/op
# Warmup Iteration   5: 679.073 ns/op
Iteration   1: 661.347 ns/op
Iteration   2: 661.241 ns/op
Iteration   3: 667.425 ns/op
Iteration   4: 658.630 ns/op
Iteration   5: 657.718 ns/op
Iteration   6: 657.449 ns/op
Iteration   7: 665.591 ns/op
Iteration   8: 658.066 ns/op
Iteration   9: 658.020 ns/op
Iteration  10: 657.898 ns/op
Iteration  11: 668.508 ns/op
Iteration  12: 657.643 ns/op
Iteration  13: 657.699 ns/op
Iteration  14: 657.727 ns/op
Iteration  15: 671.834 ns/op
Iteration  16: 657.810 ns/op
Iteration  17: 658.005 ns/op
Iteration  18: 657.919 ns/op
Iteration  19: 675.737 ns/op
Iteration  20: 657.872 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 678.868 ns/op
# Warmup Iteration   2: 658.010 ns/op
# Warmup Iteration   3: 728.846 ns/op
# Warmup Iteration   4: 729.366 ns/op
# Warmup Iteration   5: 672.765 ns/op
Iteration   1: 655.183 ns/op
Iteration   2: 655.779 ns/op
Iteration   3: 661.182 ns/op
Iteration   4: 652.299 ns/op
Iteration   5: 653.152 ns/op
Iteration   6: 652.737 ns/op
Iteration   7: 660.455 ns/op
Iteration   8: 652.760 ns/op
Iteration   9: 652.448 ns/op
Iteration  10: 652.648 ns/op
Iteration  11: 663.096 ns/op
Iteration  12: 652.462 ns/op
Iteration  13: 652.471 ns/op
Iteration  14: 652.760 ns/op
Iteration  15: 666.301 ns/op
Iteration  16: 652.469 ns/op
Iteration  17: 652.797 ns/op
Iteration  18: 652.921 ns/op
Iteration  19: 670.834 ns/op
Iteration  20: 652.393 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 675.210 ns/op
# Warmup Iteration   2: 686.627 ns/op
# Warmup Iteration   3: 688.232 ns/op
# Warmup Iteration   4: 688.312 ns/op
# Warmup Iteration   5: 626.819 ns/op
Iteration   1: 614.399 ns/op
Iteration   2: 613.953 ns/op
Iteration   3: 620.714 ns/op
Iteration   4: 613.836 ns/op
Iteration   5: 614.100 ns/op
Iteration   6: 615.090 ns/op
Iteration   7: 619.697 ns/op
Iteration   8: 614.028 ns/op
Iteration   9: 614.036 ns/op
Iteration  10: 624.585 ns/op
Iteration  11: 615.354 ns/op
Iteration  12: 614.987 ns/op
Iteration  13: 614.502 ns/op
Iteration  14: 627.510 ns/op
Iteration  15: 613.834 ns/op
Iteration  16: 613.911 ns/op
Iteration  17: 613.707 ns/op
Iteration  18: 630.690 ns/op
Iteration  19: 613.679 ns/op
Iteration  20: 613.896 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 664.857 ns/op
# Warmup Iteration   2: 688.599 ns/op
# Warmup Iteration   3: 690.307 ns/op
# Warmup Iteration   4: 690.361 ns/op
# Warmup Iteration   5: 628.586 ns/op
Iteration   1: 616.411 ns/op
Iteration   2: 616.410 ns/op
Iteration   3: 622.619 ns/op
Iteration   4: 617.007 ns/op
Iteration   5: 616.855 ns/op
Iteration   6: 616.843 ns/op
Iteration   7: 624.545 ns/op
Iteration   8: 616.920 ns/op
Iteration   9: 616.703 ns/op
Iteration  10: 626.797 ns/op
Iteration  11: 616.214 ns/op
Iteration  12: 616.154 ns/op
Iteration  13: 615.798 ns/op
Iteration  14: 630.028 ns/op
Iteration  15: 616.687 ns/op
Iteration  16: 616.739 ns/op
Iteration  17: 616.675 ns/op
Iteration  18: 632.626 ns/op
Iteration  19: 616.574 ns/op
Iteration  20: 616.522 ns/op


Result "benchmark.StringContains.regexMatches":
  617.245 ±(99.9%) 15.730 ns/op [Average]
  (min, avg, max) = (529.607, 617.245, 675.737), stdev = 46.381
  CI (99.9%): [601.514, 632.975] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Oy!R~9T)H5-cQDVhttpr/#~|w3z}=^'yOA1*D5r(S'KEF+2rX({Z@%70l]*1Id)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.308 ns/op
# Warmup Iteration   2: 12.471 ns/op
# Warmup Iteration   3: 12.161 ns/op
# Warmup Iteration   4: 12.174 ns/op
# Warmup Iteration   5: 12.164 ns/op
Iteration   1: 12.149 ns/op
Iteration   2: 12.171 ns/op
Iteration   3: 12.154 ns/op
Iteration   4: 12.162 ns/op
Iteration   5: 12.164 ns/op
Iteration   6: 12.178 ns/op
Iteration   7: 12.163 ns/op
Iteration   8: 12.163 ns/op
Iteration   9: 12.165 ns/op
Iteration  10: 12.174 ns/op
Iteration  11: 12.182 ns/op
Iteration  12: 12.165 ns/op
Iteration  13: 12.172 ns/op
Iteration  14: 12.163 ns/op
Iteration  15: 12.148 ns/op
Iteration  16: 12.161 ns/op
Iteration  17: 12.165 ns/op
Iteration  18: 12.161 ns/op
Iteration  19: 12.169 ns/op
Iteration  20: 12.153 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.290 ns/op
# Warmup Iteration   2: 12.518 ns/op
# Warmup Iteration   3: 12.386 ns/op
# Warmup Iteration   4: 12.381 ns/op
# Warmup Iteration   5: 12.370 ns/op
Iteration   1: 12.376 ns/op
Iteration   2: 12.387 ns/op
Iteration   3: 12.352 ns/op
Iteration   4: 12.370 ns/op
Iteration   5: 12.361 ns/op
Iteration   6: 12.347 ns/op
Iteration   7: 12.391 ns/op
Iteration   8: 12.368 ns/op
Iteration   9: 12.337 ns/op
Iteration  10: 12.392 ns/op
Iteration  11: 12.371 ns/op
Iteration  12: 12.392 ns/op
Iteration  13: 12.417 ns/op
Iteration  14: 12.344 ns/op
Iteration  15: 12.409 ns/op
Iteration  16: 12.372 ns/op
Iteration  17: 12.401 ns/op
Iteration  18: 12.353 ns/op
Iteration  19: 12.379 ns/op
Iteration  20: 12.380 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 12.004 ns/op
# Warmup Iteration   2: 12.555 ns/op
# Warmup Iteration   3: 12.117 ns/op
# Warmup Iteration   4: 12.133 ns/op
# Warmup Iteration   5: 12.128 ns/op
Iteration   1: 12.132 ns/op
Iteration   2: 12.129 ns/op
Iteration   3: 12.145 ns/op
Iteration   4: 12.124 ns/op
Iteration   5: 12.117 ns/op
Iteration   6: 12.097 ns/op
Iteration   7: 12.142 ns/op
Iteration   8: 12.141 ns/op
Iteration   9: 12.134 ns/op
Iteration  10: 12.136 ns/op
Iteration  11: 12.131 ns/op
Iteration  12: 12.116 ns/op
Iteration  13: 12.129 ns/op
Iteration  14: 12.140 ns/op
Iteration  15: 12.130 ns/op
Iteration  16: 12.132 ns/op
Iteration  17: 12.116 ns/op
Iteration  18: 12.139 ns/op
Iteration  19: 12.135 ns/op
Iteration  20: 12.139 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.324 ns/op
# Warmup Iteration   2: 12.441 ns/op
# Warmup Iteration   3: 12.335 ns/op
# Warmup Iteration   4: 12.346 ns/op
# Warmup Iteration   5: 12.330 ns/op
Iteration   1: 12.344 ns/op
Iteration   2: 12.330 ns/op
Iteration   3: 12.314 ns/op
Iteration   4: 12.333 ns/op
Iteration   5: 12.335 ns/op
Iteration   6: 12.334 ns/op
Iteration   7: 12.347 ns/op
Iteration   8: 12.367 ns/op
Iteration   9: 12.310 ns/op
Iteration  10: 12.329 ns/op
Iteration  11: 12.351 ns/op
Iteration  12: 12.334 ns/op
Iteration  13: 12.321 ns/op
Iteration  14: 12.326 ns/op
Iteration  15: 12.362 ns/op
Iteration  16: 12.322 ns/op
Iteration  17: 12.330 ns/op
Iteration  18: 12.371 ns/op
Iteration  19: 12.346 ns/op
Iteration  20: 12.360 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.328 ns/op
# Warmup Iteration   2: 12.612 ns/op
# Warmup Iteration   3: 12.135 ns/op
# Warmup Iteration   4: 12.133 ns/op
# Warmup Iteration   5: 12.139 ns/op
Iteration   1: 12.152 ns/op
Iteration   2: 12.141 ns/op
Iteration   3: 12.137 ns/op
Iteration   4: 12.135 ns/op
Iteration   5: 12.140 ns/op
Iteration   6: 12.139 ns/op
Iteration   7: 12.147 ns/op
Iteration   8: 12.157 ns/op
Iteration   9: 12.130 ns/op
Iteration  10: 12.135 ns/op
Iteration  11: 12.137 ns/op
Iteration  12: 12.135 ns/op
Iteration  13: 12.123 ns/op
Iteration  14: 12.134 ns/op
Iteration  15: 12.123 ns/op
Iteration  16: 12.131 ns/op
Iteration  17: 12.124 ns/op
Iteration  18: 12.131 ns/op
Iteration  19: 12.140 ns/op
Iteration  20: 12.160 ns/op


Result "benchmark.StringContains.stringContains":
  12.229 ±(99.9%) 0.036 ns/op [Average]
  (min, avg, max) = (12.097, 12.229, 12.417), stdev = 0.107
  CI (99.9%): [12.193, 12.265] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score    Error  Units
StringContains.regexMatches       http  Oy!R~9T)H5-cQDVhttpr/#~|w3z}=^'yOA1*D5r(S'KEF+2rX({Z@%70l]*1Id  avgt  100  617.245 ± 15.730  ns/op
StringContains.stringContains     http  Oy!R~9T)H5-cQDVhttpr/#~|w3z}=^'yOA1*D5r(S'KEF+2rX({Z@%70l]*1Id  avgt  100   12.229 ±  0.036  ns/op

Benchmark result is saved to http_64_0.25_13.csv
