# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = !vdi9}wGCNksqVTB$>ou.V&-*HN$nX$[-aaZ7"!$)V{b0_6http6SG+}13,tV+)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 365.244 ns/op
# Warmup Iteration   2: 356.869 ns/op
# Warmup Iteration   3: 283.663 ns/op
# Warmup Iteration   4: 273.282 ns/op
# Warmup Iteration   5: 270.373 ns/op
Iteration   1: 273.789 ns/op
Iteration   2: 274.912 ns/op
Iteration   3: 270.450 ns/op
Iteration   4: 276.940 ns/op
Iteration   5: 270.568 ns/op
Iteration   6: 277.945 ns/op
Iteration   7: 270.364 ns/op
Iteration   8: 271.602 ns/op
Iteration   9: 271.656 ns/op
Iteration  10: 270.373 ns/op
Iteration  11: 271.822 ns/op
Iteration  12: 270.077 ns/op
Iteration  13: 271.602 ns/op
Iteration  14: 270.016 ns/op
Iteration  15: 270.805 ns/op
Iteration  16: 270.732 ns/op
Iteration  17: 269.954 ns/op
Iteration  18: 271.186 ns/op
Iteration  19: 270.646 ns/op
Iteration  20: 272.883 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 347.469 ns/op
# Warmup Iteration   2: 352.619 ns/op
# Warmup Iteration   3: 281.030 ns/op
# Warmup Iteration   4: 273.660 ns/op
# Warmup Iteration   5: 270.744 ns/op
Iteration   1: 274.907 ns/op
Iteration   2: 275.957 ns/op
Iteration   3: 270.987 ns/op
Iteration   4: 277.386 ns/op
Iteration   5: 270.941 ns/op
Iteration   6: 279.232 ns/op
Iteration   7: 272.857 ns/op
Iteration   8: 271.020 ns/op
Iteration   9: 272.499 ns/op
Iteration  10: 271.038 ns/op
Iteration  11: 272.710 ns/op
Iteration  12: 270.671 ns/op
Iteration  13: 272.492 ns/op
Iteration  14: 272.244 ns/op
Iteration  15: 270.810 ns/op
Iteration  16: 272.444 ns/op
Iteration  17: 270.970 ns/op
Iteration  18: 272.368 ns/op
Iteration  19: 270.762 ns/op
Iteration  20: 273.201 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 357.060 ns/op
# Warmup Iteration   2: 360.439 ns/op
# Warmup Iteration   3: 301.777 ns/op
# Warmup Iteration   4: 291.254 ns/op
# Warmup Iteration   5: 288.374 ns/op
Iteration   1: 291.408 ns/op
Iteration   2: 287.382 ns/op
Iteration   3: 292.561 ns/op
Iteration   4: 294.274 ns/op
Iteration   5: 288.206 ns/op
Iteration   6: 296.111 ns/op
Iteration   7: 288.206 ns/op
Iteration   8: 289.650 ns/op
Iteration   9: 288.379 ns/op
Iteration  10: 289.237 ns/op
Iteration  11: 287.294 ns/op
Iteration  12: 289.679 ns/op
Iteration  13: 288.305 ns/op
Iteration  14: 289.652 ns/op
Iteration  15: 288.430 ns/op
Iteration  16: 289.799 ns/op
Iteration  17: 289.904 ns/op
Iteration  18: 288.493 ns/op
Iteration  19: 289.912 ns/op
Iteration  20: 288.306 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 352.577 ns/op
# Warmup Iteration   2: 360.333 ns/op
# Warmup Iteration   3: 282.228 ns/op
# Warmup Iteration   4: 272.995 ns/op
# Warmup Iteration   5: 270.675 ns/op
Iteration   1: 274.360 ns/op
Iteration   2: 275.076 ns/op
Iteration   3: 271.263 ns/op
Iteration   4: 277.497 ns/op
Iteration   5: 270.444 ns/op
Iteration   6: 278.363 ns/op
Iteration   7: 272.330 ns/op
Iteration   8: 270.687 ns/op
Iteration   9: 272.144 ns/op
Iteration  10: 270.392 ns/op
Iteration  11: 271.773 ns/op
Iteration  12: 270.632 ns/op
Iteration  13: 272.020 ns/op
Iteration  14: 272.018 ns/op
Iteration  15: 270.443 ns/op
Iteration  16: 272.860 ns/op
Iteration  17: 270.525 ns/op
Iteration  18: 271.998 ns/op
Iteration  19: 270.653 ns/op
Iteration  20: 272.228 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 358.125 ns/op
# Warmup Iteration   2: 352.293 ns/op
# Warmup Iteration   3: 279.992 ns/op
# Warmup Iteration   4: 272.581 ns/op
# Warmup Iteration   5: 270.250 ns/op
Iteration   1: 273.455 ns/op
Iteration   2: 274.421 ns/op
Iteration   3: 269.899 ns/op
Iteration   4: 275.991 ns/op
Iteration   5: 269.986 ns/op
Iteration   6: 277.583 ns/op
Iteration   7: 271.477 ns/op
Iteration   8: 270.138 ns/op
Iteration   9: 271.339 ns/op
Iteration  10: 269.961 ns/op
Iteration  11: 271.251 ns/op
Iteration  12: 269.686 ns/op
Iteration  13: 270.997 ns/op
Iteration  14: 271.513 ns/op
Iteration  15: 270.034 ns/op
Iteration  16: 271.215 ns/op
Iteration  17: 269.602 ns/op
Iteration  18: 271.079 ns/op
Iteration  19: 269.948 ns/op
Iteration  20: 271.553 ns/op


Result "benchmark.StringContains.regexMatches":
  275.678 ±(99.9%) 2.521 ns/op [Average]
  (min, avg, max) = (269.602, 275.678, 296.111), stdev = 7.432
  CI (99.9%): [273.158, 278.199] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = !vdi9}wGCNksqVTB$>ou.V&-*HN$nX$[-aaZ7"!$)V{b0_6http6SG+}13,tV+)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.969 ns/op
# Warmup Iteration   2: 17.063 ns/op
# Warmup Iteration   3: 16.511 ns/op
# Warmup Iteration   4: 16.503 ns/op
# Warmup Iteration   5: 16.496 ns/op
Iteration   1: 16.504 ns/op
Iteration   2: 16.506 ns/op
Iteration   3: 16.490 ns/op
Iteration   4: 16.487 ns/op
Iteration   5: 16.508 ns/op
Iteration   6: 16.489 ns/op
Iteration   7: 16.508 ns/op
Iteration   8: 16.550 ns/op
Iteration   9: 16.493 ns/op
Iteration  10: 16.523 ns/op
Iteration  11: 16.502 ns/op
Iteration  12: 16.506 ns/op
Iteration  13: 16.502 ns/op
Iteration  14: 16.502 ns/op
Iteration  15: 16.520 ns/op
Iteration  16: 16.515 ns/op
Iteration  17: 16.511 ns/op
Iteration  18: 16.493 ns/op
Iteration  19: 16.486 ns/op
Iteration  20: 16.517 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.055 ns/op
# Warmup Iteration   2: 17.020 ns/op
# Warmup Iteration   3: 16.545 ns/op
# Warmup Iteration   4: 16.537 ns/op
# Warmup Iteration   5: 16.546 ns/op
Iteration   1: 16.549 ns/op
Iteration   2: 16.539 ns/op
Iteration   3: 16.553 ns/op
Iteration   4: 16.531 ns/op
Iteration   5: 16.533 ns/op
Iteration   6: 16.528 ns/op
Iteration   7: 16.552 ns/op
Iteration   8: 16.541 ns/op
Iteration   9: 16.540 ns/op
Iteration  10: 16.531 ns/op
Iteration  11: 16.522 ns/op
Iteration  12: 16.523 ns/op
Iteration  13: 16.541 ns/op
Iteration  14: 16.545 ns/op
Iteration  15: 16.530 ns/op
Iteration  16: 16.550 ns/op
Iteration  17: 16.550 ns/op
Iteration  18: 16.548 ns/op
Iteration  19: 16.540 ns/op
Iteration  20: 16.545 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.081 ns/op
# Warmup Iteration   2: 17.022 ns/op
# Warmup Iteration   3: 16.576 ns/op
# Warmup Iteration   4: 16.560 ns/op
# Warmup Iteration   5: 16.580 ns/op
Iteration   1: 16.579 ns/op
Iteration   2: 16.577 ns/op
Iteration   3: 16.561 ns/op
Iteration   4: 16.572 ns/op
Iteration   5: 16.573 ns/op
Iteration   6: 16.606 ns/op
Iteration   7: 16.575 ns/op
Iteration   8: 16.579 ns/op
Iteration   9: 16.565 ns/op
Iteration  10: 16.564 ns/op
Iteration  11: 16.585 ns/op
Iteration  12: 16.574 ns/op
Iteration  13: 16.567 ns/op
Iteration  14: 16.565 ns/op
Iteration  15: 16.572 ns/op
Iteration  16: 16.574 ns/op
Iteration  17: 16.571 ns/op
Iteration  18: 16.583 ns/op
Iteration  19: 16.579 ns/op
Iteration  20: 16.578 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.945 ns/op
# Warmup Iteration   2: 17.145 ns/op
# Warmup Iteration   3: 16.469 ns/op
# Warmup Iteration   4: 16.477 ns/op
# Warmup Iteration   5: 16.471 ns/op
Iteration   1: 16.488 ns/op
Iteration   2: 16.484 ns/op
Iteration   3: 16.474 ns/op
Iteration   4: 16.474 ns/op
Iteration   5: 16.485 ns/op
Iteration   6: 16.459 ns/op
Iteration   7: 16.467 ns/op
Iteration   8: 16.466 ns/op
Iteration   9: 16.485 ns/op
Iteration  10: 16.479 ns/op
Iteration  11: 16.485 ns/op
Iteration  12: 16.469 ns/op
Iteration  13: 16.465 ns/op
Iteration  14: 16.452 ns/op
Iteration  15: 16.475 ns/op
Iteration  16: 16.476 ns/op
Iteration  17: 16.457 ns/op
Iteration  18: 16.454 ns/op
Iteration  19: 16.470 ns/op
Iteration  20: 16.461 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.973 ns/op
# Warmup Iteration   2: 17.060 ns/op
# Warmup Iteration   3: 16.574 ns/op
# Warmup Iteration   4: 16.584 ns/op
# Warmup Iteration   5: 16.563 ns/op
Iteration   1: 16.567 ns/op
Iteration   2: 16.585 ns/op
Iteration   3: 16.571 ns/op
Iteration   4: 16.572 ns/op
Iteration   5: 16.567 ns/op
Iteration   6: 16.582 ns/op
Iteration   7: 16.576 ns/op
Iteration   8: 16.592 ns/op
Iteration   9: 16.574 ns/op
Iteration  10: 16.581 ns/op
Iteration  11: 16.565 ns/op
Iteration  12: 16.532 ns/op
Iteration  13: 16.580 ns/op
Iteration  14: 16.573 ns/op
Iteration  15: 16.578 ns/op
Iteration  16: 16.589 ns/op
Iteration  17: 16.566 ns/op
Iteration  18: 16.572 ns/op
Iteration  19: 16.575 ns/op
Iteration  20: 16.564 ns/op


Result "benchmark.StringContains.stringContains":
  16.533 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (16.452, 16.533, 16.606), stdev = 0.042
  CI (99.9%): [16.519, 16.547] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  !vdi9}wGCNksqVTB$>ou.V&-*HN$nX$[-aaZ7"!$)V{b0_6http6SG+}13,tV+  avgt  100  275.678 ± 2.521  ns/op
StringContains.stringContains     http  !vdi9}wGCNksqVTB$>ou.V&-*HN$nX$[-aaZ7"!$)V{b0_6http6SG+}13,tV+  avgt  100   16.533 ± 0.014  ns/op

Benchmark result is saved to http_64_0.75_8.csv
