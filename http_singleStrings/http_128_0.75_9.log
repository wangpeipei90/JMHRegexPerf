# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A;/}c:{~82CH8	:{3(U>(4Z4BckRp[nnFZ42QL8`~0^H9Q#X78	w.w-H;IVOf7Hn{knB^_-mmqJWjsXSm)KU/g1wRD#mtC3http=o3/51r_FwV)rZ _I`|f7N{sat)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 524.821 ns/op
# Warmup Iteration   2: 533.619 ns/op
# Warmup Iteration   3: 533.715 ns/op
# Warmup Iteration   4: 470.648 ns/op
# Warmup Iteration   5: 455.487 ns/op
Iteration   1: 459.392 ns/op
Iteration   2: 455.871 ns/op
Iteration   3: 455.717 ns/op
Iteration   4: 460.726 ns/op
Iteration   5: 455.325 ns/op
Iteration   6: 463.090 ns/op
Iteration   7: 456.267 ns/op
Iteration   8: 456.035 ns/op
Iteration   9: 466.220 ns/op
Iteration  10: 455.634 ns/op
Iteration  11: 455.214 ns/op
Iteration  12: 468.331 ns/op
Iteration  13: 455.623 ns/op
Iteration  14: 455.189 ns/op
Iteration  15: 458.238 ns/op
Iteration  16: 455.270 ns/op
Iteration  17: 455.192 ns/op
Iteration  18: 457.058 ns/op
Iteration  19: 454.749 ns/op
Iteration  20: 455.176 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 517.966 ns/op
# Warmup Iteration   2: 514.808 ns/op
# Warmup Iteration   3: 558.097 ns/op
# Warmup Iteration   4: 499.573 ns/op
# Warmup Iteration   5: 484.262 ns/op
Iteration   1: 488.901 ns/op
Iteration   2: 484.093 ns/op
Iteration   3: 484.108 ns/op
Iteration   4: 489.862 ns/op
Iteration   5: 483.646 ns/op
Iteration   6: 483.954 ns/op
Iteration   7: 492.595 ns/op
Iteration   8: 485.383 ns/op
Iteration   9: 485.584 ns/op
Iteration  10: 495.033 ns/op
Iteration  11: 484.019 ns/op
Iteration  12: 483.708 ns/op
Iteration  13: 497.091 ns/op
Iteration  14: 484.222 ns/op
Iteration  15: 483.842 ns/op
Iteration  16: 486.868 ns/op
Iteration  17: 484.018 ns/op
Iteration  18: 483.828 ns/op
Iteration  19: 486.047 ns/op
Iteration  20: 484.041 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 509.069 ns/op
# Warmup Iteration   2: 517.944 ns/op
# Warmup Iteration   3: 519.181 ns/op
# Warmup Iteration   4: 451.510 ns/op
# Warmup Iteration   5: 443.262 ns/op
Iteration   1: 447.391 ns/op
Iteration   2: 442.934 ns/op
Iteration   3: 443.089 ns/op
Iteration   4: 453.550 ns/op
Iteration   5: 448.396 ns/op
Iteration   6: 454.150 ns/op
Iteration   7: 443.076 ns/op
Iteration   8: 443.263 ns/op
Iteration   9: 452.536 ns/op
Iteration  10: 442.902 ns/op
Iteration  11: 443.098 ns/op
Iteration  12: 455.382 ns/op
Iteration  13: 443.100 ns/op
Iteration  14: 443.154 ns/op
Iteration  15: 454.239 ns/op
Iteration  16: 451.797 ns/op
Iteration  17: 452.998 ns/op
Iteration  18: 445.936 ns/op
Iteration  19: 443.362 ns/op
Iteration  20: 444.894 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 513.871 ns/op
# Warmup Iteration   2: 496.761 ns/op
# Warmup Iteration   3: 547.073 ns/op
# Warmup Iteration   4: 484.333 ns/op
# Warmup Iteration   5: 473.891 ns/op
Iteration   1: 477.982 ns/op
Iteration   2: 474.069 ns/op
Iteration   3: 473.588 ns/op
Iteration   4: 479.667 ns/op
Iteration   5: 474.307 ns/op
Iteration   6: 473.194 ns/op
Iteration   7: 480.627 ns/op
Iteration   8: 472.967 ns/op
Iteration   9: 473.717 ns/op
Iteration  10: 483.515 ns/op
Iteration  11: 473.185 ns/op
Iteration  12: 473.198 ns/op
Iteration  13: 487.016 ns/op
Iteration  14: 473.887 ns/op
Iteration  15: 474.106 ns/op
Iteration  16: 476.026 ns/op
Iteration  17: 473.133 ns/op
Iteration  18: 473.311 ns/op
Iteration  19: 476.142 ns/op
Iteration  20: 473.353 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 516.261 ns/op
# Warmup Iteration   2: 518.452 ns/op
# Warmup Iteration   3: 518.816 ns/op
# Warmup Iteration   4: 456.480 ns/op
# Warmup Iteration   5: 445.373 ns/op
Iteration   1: 448.575 ns/op
Iteration   2: 443.803 ns/op
Iteration   3: 443.500 ns/op
Iteration   4: 449.468 ns/op
Iteration   5: 443.555 ns/op
Iteration   6: 450.879 ns/op
Iteration   7: 443.642 ns/op
Iteration   8: 444.377 ns/op
Iteration   9: 454.808 ns/op
Iteration  10: 446.164 ns/op
Iteration  11: 446.177 ns/op
Iteration  12: 455.965 ns/op
Iteration  13: 443.700 ns/op
Iteration  14: 443.790 ns/op
Iteration  15: 446.657 ns/op
Iteration  16: 443.489 ns/op
Iteration  17: 443.728 ns/op
Iteration  18: 445.478 ns/op
Iteration  19: 443.533 ns/op
Iteration  20: 446.516 ns/op


Result "benchmark.StringContains.regexMatches":
  462.792 ±(99.9%) 5.591 ns/op [Average]
  (min, avg, max) = (442.902, 462.792, 497.091), stdev = 16.486
  CI (99.9%): [457.201, 468.383] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A;/}c:{~82CH8	:{3(U>(4Z4BckRp[nnFZ42QL8`~0^H9Q#X78	w.w-H;IVOf7Hn{knB^_-mmqJWjsXSm)KU/g1wRD#mtC3http=o3/51r_FwV)rZ _I`|f7N{sat)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.635 ns/op
# Warmup Iteration   2: 23.937 ns/op
# Warmup Iteration   3: 23.232 ns/op
# Warmup Iteration   4: 23.210 ns/op
# Warmup Iteration   5: 23.213 ns/op
Iteration   1: 23.273 ns/op
Iteration   2: 23.224 ns/op
Iteration   3: 23.196 ns/op
Iteration   4: 23.221 ns/op
Iteration   5: 23.197 ns/op
Iteration   6: 23.210 ns/op
Iteration   7: 23.222 ns/op
Iteration   8: 23.245 ns/op
Iteration   9: 23.213 ns/op
Iteration  10: 23.225 ns/op
Iteration  11: 23.211 ns/op
Iteration  12: 23.212 ns/op
Iteration  13: 23.216 ns/op
Iteration  14: 23.210 ns/op
Iteration  15: 23.195 ns/op
Iteration  16: 23.210 ns/op
Iteration  17: 23.212 ns/op
Iteration  18: 23.192 ns/op
Iteration  19: 23.197 ns/op
Iteration  20: 23.256 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.600 ns/op
# Warmup Iteration   2: 23.901 ns/op
# Warmup Iteration   3: 23.255 ns/op
# Warmup Iteration   4: 23.244 ns/op
# Warmup Iteration   5: 23.247 ns/op
Iteration   1: 23.238 ns/op
Iteration   2: 23.280 ns/op
Iteration   3: 23.253 ns/op
Iteration   4: 23.246 ns/op
Iteration   5: 23.264 ns/op
Iteration   6: 23.252 ns/op
Iteration   7: 23.229 ns/op
Iteration   8: 23.244 ns/op
Iteration   9: 23.254 ns/op
Iteration  10: 23.250 ns/op
Iteration  11: 23.280 ns/op
Iteration  12: 23.253 ns/op
Iteration  13: 23.216 ns/op
Iteration  14: 23.234 ns/op
Iteration  15: 23.239 ns/op
Iteration  16: 23.231 ns/op
Iteration  17: 23.229 ns/op
Iteration  18: 23.238 ns/op
Iteration  19: 23.243 ns/op
Iteration  20: 23.241 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.598 ns/op
# Warmup Iteration   2: 23.870 ns/op
# Warmup Iteration   3: 23.226 ns/op
# Warmup Iteration   4: 23.206 ns/op
# Warmup Iteration   5: 23.198 ns/op
Iteration   1: 23.233 ns/op
Iteration   2: 23.228 ns/op
Iteration   3: 23.230 ns/op
Iteration   4: 23.229 ns/op
Iteration   5: 23.217 ns/op
Iteration   6: 23.205 ns/op
Iteration   7: 23.200 ns/op
Iteration   8: 23.200 ns/op
Iteration   9: 23.209 ns/op
Iteration  10: 23.203 ns/op
Iteration  11: 23.228 ns/op
Iteration  12: 23.231 ns/op
Iteration  13: 23.209 ns/op
Iteration  14: 23.243 ns/op
Iteration  15: 23.208 ns/op
Iteration  16: 23.212 ns/op
Iteration  17: 23.200 ns/op
Iteration  18: 23.197 ns/op
Iteration  19: 23.195 ns/op
Iteration  20: 23.212 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.610 ns/op
# Warmup Iteration   2: 23.866 ns/op
# Warmup Iteration   3: 23.710 ns/op
# Warmup Iteration   4: 23.654 ns/op
# Warmup Iteration   5: 23.672 ns/op
Iteration   1: 23.634 ns/op
Iteration   2: 23.689 ns/op
Iteration   3: 23.670 ns/op
Iteration   4: 23.688 ns/op
Iteration   5: 23.584 ns/op
Iteration   6: 23.612 ns/op
Iteration   7: 23.631 ns/op
Iteration   8: 23.670 ns/op
Iteration   9: 23.663 ns/op
Iteration  10: 23.690 ns/op
Iteration  11: 23.667 ns/op
Iteration  12: 23.683 ns/op
Iteration  13: 23.734 ns/op
Iteration  14: 23.688 ns/op
Iteration  15: 23.707 ns/op
Iteration  16: 23.657 ns/op
Iteration  17: 23.611 ns/op
Iteration  18: 23.629 ns/op
Iteration  19: 23.635 ns/op
Iteration  20: 23.641 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.619 ns/op
# Warmup Iteration   2: 23.901 ns/op
# Warmup Iteration   3: 23.256 ns/op
# Warmup Iteration   4: 23.238 ns/op
# Warmup Iteration   5: 23.240 ns/op
Iteration   1: 23.211 ns/op
Iteration   2: 23.224 ns/op
Iteration   3: 23.215 ns/op
Iteration   4: 23.223 ns/op
Iteration   5: 23.207 ns/op
Iteration   6: 23.216 ns/op
Iteration   7: 23.233 ns/op
Iteration   8: 23.243 ns/op
Iteration   9: 23.215 ns/op
Iteration  10: 23.216 ns/op
Iteration  11: 23.219 ns/op
Iteration  12: 23.213 ns/op
Iteration  13: 23.202 ns/op
Iteration  14: 23.213 ns/op
Iteration  15: 23.228 ns/op
Iteration  16: 23.208 ns/op
Iteration  17: 23.222 ns/op
Iteration  18: 23.206 ns/op
Iteration  19: 23.207 ns/op
Iteration  20: 23.251 ns/op


Result "benchmark.StringContains.stringContains":
  23.311 ±(99.9%) 0.060 ns/op [Average]
  (min, avg, max) = (23.192, 23.311, 23.734), stdev = 0.177
  CI (99.9%): [23.251, 23.371] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A;/}c:{~82CH8	:{3(U>(4Z4BckRp[nnFZ42QL8`~0^H9Q#X78	w.w-H;IVOf7Hn{knB^_-mmqJWjsXSm)KU/g1wRD#mtC3http=o3/51r_FwV)rZ _I`|f7N{sat  avgt  100  462.792 ± 5.591  ns/op
StringContains.stringContains     http  A;/}c:{~82CH8	:{3(U>(4Z4BckRp[nnFZ42QL8`~0^H9Q#X78	w.w-H;IVOf7Hn{knB^_-mmqJWjsXSm)KU/g1wRD#mtC3http=o3/51r_FwV)rZ _I`|f7N{sat  avgt  100   23.311 ± 0.060  ns/op

Benchmark result is saved to http_128_0.75_9.csv
