# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = j_]=i+EL,j/%"R0.http@w0vSz1K<)#=	vf ?m	=u&Uukl/a7='jiInxk/H}lJd)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 674.290 ns/op
# Warmup Iteration   2: 693.426 ns/op
# Warmup Iteration   3: 698.407 ns/op
# Warmup Iteration   4: 697.815 ns/op
# Warmup Iteration   5: 635.738 ns/op
Iteration   1: 620.502 ns/op
Iteration   2: 621.232 ns/op
Iteration   3: 626.343 ns/op
Iteration   4: 616.997 ns/op
Iteration   5: 616.826 ns/op
Iteration   6: 616.890 ns/op
Iteration   7: 624.976 ns/op
Iteration   8: 616.228 ns/op
Iteration   9: 616.201 ns/op
Iteration  10: 628.924 ns/op
Iteration  11: 617.078 ns/op
Iteration  12: 617.176 ns/op
Iteration  13: 617.005 ns/op
Iteration  14: 632.851 ns/op
Iteration  15: 616.201 ns/op
Iteration  16: 615.994 ns/op
Iteration  17: 616.293 ns/op
Iteration  18: 637.015 ns/op
Iteration  19: 617.254 ns/op
Iteration  20: 617.498 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 647.356 ns/op
# Warmup Iteration   2: 630.278 ns/op
# Warmup Iteration   3: 631.209 ns/op
# Warmup Iteration   4: 620.328 ns/op
# Warmup Iteration   5: 557.217 ns/op
Iteration   1: 557.250 ns/op
Iteration   2: 565.621 ns/op
Iteration   3: 557.126 ns/op
Iteration   4: 557.239 ns/op
Iteration   5: 556.978 ns/op
Iteration   6: 563.875 ns/op
Iteration   7: 556.998 ns/op
Iteration   8: 556.923 ns/op
Iteration   9: 566.354 ns/op
Iteration  10: 557.058 ns/op
Iteration  11: 556.934 ns/op
Iteration  12: 569.271 ns/op
Iteration  13: 556.811 ns/op
Iteration  14: 557.081 ns/op
Iteration  15: 557.200 ns/op
Iteration  16: 573.261 ns/op
Iteration  17: 557.015 ns/op
Iteration  18: 556.700 ns/op
Iteration  19: 557.212 ns/op
Iteration  20: 560.448 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 666.094 ns/op
# Warmup Iteration   2: 689.758 ns/op
# Warmup Iteration   3: 692.070 ns/op
# Warmup Iteration   4: 691.376 ns/op
# Warmup Iteration   5: 630.453 ns/op
Iteration   1: 617.249 ns/op
Iteration   2: 617.372 ns/op
Iteration   3: 623.372 ns/op
Iteration   4: 617.168 ns/op
Iteration   5: 617.488 ns/op
Iteration   6: 617.631 ns/op
Iteration   7: 625.396 ns/op
Iteration   8: 617.257 ns/op
Iteration   9: 617.067 ns/op
Iteration  10: 627.968 ns/op
Iteration  11: 617.242 ns/op
Iteration  12: 617.150 ns/op
Iteration  13: 617.199 ns/op
Iteration  14: 631.234 ns/op
Iteration  15: 617.336 ns/op
Iteration  16: 617.210 ns/op
Iteration  17: 617.329 ns/op
Iteration  18: 634.616 ns/op
Iteration  19: 617.292 ns/op
Iteration  20: 617.284 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 667.888 ns/op
# Warmup Iteration   2: 688.671 ns/op
# Warmup Iteration   3: 690.901 ns/op
# Warmup Iteration   4: 691.275 ns/op
# Warmup Iteration   5: 629.366 ns/op
Iteration   1: 616.483 ns/op
Iteration   2: 617.048 ns/op
Iteration   3: 622.716 ns/op
Iteration   4: 615.694 ns/op
Iteration   5: 616.095 ns/op
Iteration   6: 616.327 ns/op
Iteration   7: 625.143 ns/op
Iteration   8: 616.742 ns/op
Iteration   9: 616.356 ns/op
Iteration  10: 627.076 ns/op
Iteration  11: 616.506 ns/op
Iteration  12: 616.892 ns/op
Iteration  13: 616.921 ns/op
Iteration  14: 629.848 ns/op
Iteration  15: 616.312 ns/op
Iteration  16: 616.945 ns/op
Iteration  17: 616.583 ns/op
Iteration  18: 633.695 ns/op
Iteration  19: 616.462 ns/op
Iteration  20: 616.305 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 665.454 ns/op
# Warmup Iteration   2: 689.601 ns/op
# Warmup Iteration   3: 690.707 ns/op
# Warmup Iteration   4: 690.740 ns/op
# Warmup Iteration   5: 628.622 ns/op
Iteration   1: 616.578 ns/op
Iteration   2: 617.210 ns/op
Iteration   3: 622.026 ns/op
Iteration   4: 616.508 ns/op
Iteration   5: 616.271 ns/op
Iteration   6: 617.329 ns/op
Iteration   7: 625.479 ns/op
Iteration   8: 617.530 ns/op
Iteration   9: 616.686 ns/op
Iteration  10: 626.451 ns/op
Iteration  11: 616.453 ns/op
Iteration  12: 616.350 ns/op
Iteration  13: 616.398 ns/op
Iteration  14: 630.305 ns/op
Iteration  15: 616.487 ns/op
Iteration  16: 616.553 ns/op
Iteration  17: 616.433 ns/op
Iteration  18: 633.218 ns/op
Iteration  19: 616.348 ns/op
Iteration  20: 616.504 ns/op


Result "benchmark.StringContains.regexMatches":
  607.820 ±(99.9%) 8.372 ns/op [Average]
  (min, avg, max) = (556.700, 607.820, 637.015), stdev = 24.686
  CI (99.9%): [599.447, 616.192] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = j_]=i+EL,j/%"R0.http@w0vSz1K<)#=	vf ?m	=u&Uukl/a7='jiInxk/H}lJd)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.294 ns/op
# Warmup Iteration   2: 12.455 ns/op
# Warmup Iteration   3: 12.138 ns/op
# Warmup Iteration   4: 12.151 ns/op
# Warmup Iteration   5: 12.143 ns/op
Iteration   1: 12.120 ns/op
Iteration   2: 12.143 ns/op
Iteration   3: 12.134 ns/op
Iteration   4: 12.145 ns/op
Iteration   5: 12.151 ns/op
Iteration   6: 12.128 ns/op
Iteration   7: 12.127 ns/op
Iteration   8: 12.127 ns/op
Iteration   9: 12.137 ns/op
Iteration  10: 12.126 ns/op
Iteration  11: 12.122 ns/op
Iteration  12: 12.148 ns/op
Iteration  13: 12.144 ns/op
Iteration  14: 12.134 ns/op
Iteration  15: 12.138 ns/op
Iteration  16: 12.134 ns/op
Iteration  17: 12.123 ns/op
Iteration  18: 12.128 ns/op
Iteration  19: 12.118 ns/op
Iteration  20: 12.133 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 12.026 ns/op
# Warmup Iteration   2: 12.560 ns/op
# Warmup Iteration   3: 12.144 ns/op
# Warmup Iteration   4: 12.149 ns/op
# Warmup Iteration   5: 12.149 ns/op
Iteration   1: 12.153 ns/op
Iteration   2: 12.159 ns/op
Iteration   3: 12.147 ns/op
Iteration   4: 12.144 ns/op
Iteration   5: 12.166 ns/op
Iteration   6: 12.156 ns/op
Iteration   7: 12.165 ns/op
Iteration   8: 12.171 ns/op
Iteration   9: 12.157 ns/op
Iteration  10: 12.149 ns/op
Iteration  11: 12.154 ns/op
Iteration  12: 12.153 ns/op
Iteration  13: 12.153 ns/op
Iteration  14: 12.162 ns/op
Iteration  15: 12.155 ns/op
Iteration  16: 12.170 ns/op
Iteration  17: 12.147 ns/op
Iteration  18: 12.171 ns/op
Iteration  19: 12.142 ns/op
Iteration  20: 12.148 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.310 ns/op
# Warmup Iteration   2: 12.607 ns/op
# Warmup Iteration   3: 12.125 ns/op
# Warmup Iteration   4: 12.113 ns/op
# Warmup Iteration   5: 12.119 ns/op
Iteration   1: 12.118 ns/op
Iteration   2: 12.130 ns/op
Iteration   3: 12.128 ns/op
Iteration   4: 12.119 ns/op
Iteration   5: 12.125 ns/op
Iteration   6: 12.108 ns/op
Iteration   7: 12.104 ns/op
Iteration   8: 12.125 ns/op
Iteration   9: 12.127 ns/op
Iteration  10: 12.109 ns/op
Iteration  11: 12.137 ns/op
Iteration  12: 12.128 ns/op
Iteration  13: 12.139 ns/op
Iteration  14: 12.134 ns/op
Iteration  15: 12.125 ns/op
Iteration  16: 12.130 ns/op
Iteration  17: 12.139 ns/op
Iteration  18: 12.149 ns/op
Iteration  19: 12.149 ns/op
Iteration  20: 12.147 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 12.026 ns/op
# Warmup Iteration   2: 12.538 ns/op
# Warmup Iteration   3: 12.132 ns/op
# Warmup Iteration   4: 12.133 ns/op
# Warmup Iteration   5: 12.132 ns/op
Iteration   1: 12.131 ns/op
Iteration   2: 12.127 ns/op
Iteration   3: 12.134 ns/op
Iteration   4: 12.140 ns/op
Iteration   5: 12.135 ns/op
Iteration   6: 12.153 ns/op
Iteration   7: 12.141 ns/op
Iteration   8: 12.145 ns/op
Iteration   9: 12.131 ns/op
Iteration  10: 12.124 ns/op
Iteration  11: 12.120 ns/op
Iteration  12: 12.144 ns/op
Iteration  13: 12.156 ns/op
Iteration  14: 12.159 ns/op
Iteration  15: 12.138 ns/op
Iteration  16: 12.126 ns/op
Iteration  17: 12.134 ns/op
Iteration  18: 12.154 ns/op
Iteration  19: 12.134 ns/op
Iteration  20: 12.133 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.267 ns/op
# Warmup Iteration   2: 12.542 ns/op
# Warmup Iteration   3: 12.138 ns/op
# Warmup Iteration   4: 12.131 ns/op
# Warmup Iteration   5: 12.144 ns/op
Iteration   1: 12.123 ns/op
Iteration   2: 12.163 ns/op
Iteration   3: 12.142 ns/op
Iteration   4: 12.147 ns/op
Iteration   5: 12.144 ns/op
Iteration   6: 12.149 ns/op
Iteration   7: 12.152 ns/op
Iteration   8: 12.145 ns/op
Iteration   9: 12.126 ns/op
Iteration  10: 12.143 ns/op
Iteration  11: 12.131 ns/op
Iteration  12: 12.134 ns/op
Iteration  13: 12.142 ns/op
Iteration  14: 12.128 ns/op
Iteration  15: 12.128 ns/op
Iteration  16: 12.142 ns/op
Iteration  17: 12.132 ns/op
Iteration  18: 12.156 ns/op
Iteration  19: 12.158 ns/op
Iteration  20: 12.153 ns/op


Result "benchmark.StringContains.stringContains":
  12.139 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (12.104, 12.139, 12.171), stdev = 0.014
  CI (99.9%): [12.135, 12.144] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  j_]=i+EL,j/%"R0.http@w0vSz1K<)#=	vf ?m	=u&Uukl/a7='jiInxk/H}lJd  avgt  100  607.820 ± 8.372  ns/op
StringContains.stringContains     http  j_]=i+EL,j/%"R0.http@w0vSz1K<)#=	vf ?m	=u&Uukl/a7='jiInxk/H}lJd  avgt  100   12.139 ± 0.005  ns/op

Benchmark result is saved to http_64_0.25_9.csv
