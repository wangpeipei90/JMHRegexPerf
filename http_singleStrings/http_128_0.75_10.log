# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = npYQc]'`|"%-jrKo?3zAs` sLGhpq&SVS8"JPc=$r<:.8'goY3I7JeXj[r\qp{H%}%oVrrC"-D9
.b6
Sr*~;6}umv\yOhttp8 @>o!E;\Fy54W)pYnYWn5p4?Fp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 522.332 ns/op
# Warmup Iteration   2: 536.640 ns/op
# Warmup Iteration   3: 536.913 ns/op
# Warmup Iteration   4: 464.761 ns/op
# Warmup Iteration   5: 443.050 ns/op
Iteration   1: 447.765 ns/op
Iteration   2: 442.950 ns/op
Iteration   3: 442.921 ns/op
Iteration   4: 449.260 ns/op
Iteration   5: 442.990 ns/op
Iteration   6: 451.535 ns/op
Iteration   7: 442.998 ns/op
Iteration   8: 442.990 ns/op
Iteration   9: 454.084 ns/op
Iteration  10: 442.986 ns/op
Iteration  11: 442.873 ns/op
Iteration  12: 457.782 ns/op
Iteration  13: 442.796 ns/op
Iteration  14: 442.836 ns/op
Iteration  15: 447.076 ns/op
Iteration  16: 445.227 ns/op
Iteration  17: 444.088 ns/op
Iteration  18: 445.351 ns/op
Iteration  19: 442.886 ns/op
Iteration  20: 442.960 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 516.623 ns/op
# Warmup Iteration   2: 529.478 ns/op
# Warmup Iteration   3: 530.802 ns/op
# Warmup Iteration   4: 468.935 ns/op
# Warmup Iteration   5: 455.509 ns/op
Iteration   1: 459.676 ns/op
Iteration   2: 455.269 ns/op
Iteration   3: 455.637 ns/op
Iteration   4: 461.959 ns/op
Iteration   5: 455.275 ns/op
Iteration   6: 463.261 ns/op
Iteration   7: 455.863 ns/op
Iteration   8: 455.669 ns/op
Iteration   9: 465.246 ns/op
Iteration  10: 455.778 ns/op
Iteration  11: 455.654 ns/op
Iteration  12: 468.041 ns/op
Iteration  13: 455.771 ns/op
Iteration  14: 455.645 ns/op
Iteration  15: 459.556 ns/op
Iteration  16: 457.788 ns/op
Iteration  17: 458.122 ns/op
Iteration  18: 459.450 ns/op
Iteration  19: 455.739 ns/op
Iteration  20: 455.902 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 518.101 ns/op
# Warmup Iteration   2: 529.775 ns/op
# Warmup Iteration   3: 532.132 ns/op
# Warmup Iteration   4: 471.677 ns/op
# Warmup Iteration   5: 456.009 ns/op
Iteration   1: 460.078 ns/op
Iteration   2: 455.729 ns/op
Iteration   3: 456.007 ns/op
Iteration   4: 460.601 ns/op
Iteration   5: 454.969 ns/op
Iteration   6: 458.214 ns/op
Iteration   7: 459.755 ns/op
Iteration   8: 456.155 ns/op
Iteration   9: 465.409 ns/op
Iteration  10: 455.778 ns/op
Iteration  11: 456.089 ns/op
Iteration  12: 468.364 ns/op
Iteration  13: 455.594 ns/op
Iteration  14: 455.463 ns/op
Iteration  15: 457.711 ns/op
Iteration  16: 455.316 ns/op
Iteration  17: 455.722 ns/op
Iteration  18: 457.222 ns/op
Iteration  19: 455.745 ns/op
Iteration  20: 456.638 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 506.786 ns/op
# Warmup Iteration   2: 497.454 ns/op
# Warmup Iteration   3: 545.554 ns/op
# Warmup Iteration   4: 483.935 ns/op
# Warmup Iteration   5: 473.569 ns/op
Iteration   1: 476.730 ns/op
Iteration   2: 471.770 ns/op
Iteration   3: 471.382 ns/op
Iteration   4: 478.745 ns/op
Iteration   5: 471.038 ns/op
Iteration   6: 470.977 ns/op
Iteration   7: 478.314 ns/op
Iteration   8: 471.441 ns/op
Iteration   9: 470.784 ns/op
Iteration  10: 480.834 ns/op
Iteration  11: 471.183 ns/op
Iteration  12: 470.668 ns/op
Iteration  13: 486.777 ns/op
Iteration  14: 474.058 ns/op
Iteration  15: 473.914 ns/op
Iteration  16: 473.489 ns/op
Iteration  17: 470.347 ns/op
Iteration  18: 470.736 ns/op
Iteration  19: 474.862 ns/op
Iteration  20: 473.961 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 504.455 ns/op
# Warmup Iteration   2: 498.872 ns/op
# Warmup Iteration   3: 545.125 ns/op
# Warmup Iteration   4: 478.932 ns/op
# Warmup Iteration   5: 469.188 ns/op
Iteration   1: 473.091 ns/op
Iteration   2: 468.337 ns/op
Iteration   3: 468.644 ns/op
Iteration   4: 475.504 ns/op
Iteration   5: 468.547 ns/op
Iteration   6: 468.552 ns/op
Iteration   7: 476.217 ns/op
Iteration   8: 468.545 ns/op
Iteration   9: 470.630 ns/op
Iteration  10: 477.260 ns/op
Iteration  11: 468.741 ns/op
Iteration  12: 471.851 ns/op
Iteration  13: 479.536 ns/op
Iteration  14: 468.240 ns/op
Iteration  15: 467.908 ns/op
Iteration  16: 471.491 ns/op
Iteration  17: 468.221 ns/op
Iteration  18: 468.819 ns/op
Iteration  19: 470.835 ns/op
Iteration  20: 468.540 ns/op


Result "benchmark.StringContains.regexMatches":
  461.377 ±(99.9%) 3.714 ns/op [Average]
  (min, avg, max) = (442.796, 461.377, 486.777), stdev = 10.952
  CI (99.9%): [457.663, 465.092] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = npYQc]'`|"%-jrKo?3zAs` sLGhpq&SVS8"JPc=$r<:.8'goY3I7JeXj[r\qp{H%}%oVrrC"-D9
.b6
Sr*~;6}umv\yOhttp8 @>o!E;\Fy54W)pYnYWn5p4?Fp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.606 ns/op
# Warmup Iteration   2: 23.765 ns/op
# Warmup Iteration   3: 23.735 ns/op
# Warmup Iteration   4: 23.729 ns/op
# Warmup Iteration   5: 23.744 ns/op
Iteration   1: 23.699 ns/op
Iteration   2: 23.734 ns/op
Iteration   3: 23.698 ns/op
Iteration   4: 23.767 ns/op
Iteration   5: 23.735 ns/op
Iteration   6: 23.718 ns/op
Iteration   7: 23.725 ns/op
Iteration   8: 23.755 ns/op
Iteration   9: 23.629 ns/op
Iteration  10: 23.540 ns/op
Iteration  11: 23.765 ns/op
Iteration  12: 23.766 ns/op
Iteration  13: 23.772 ns/op
Iteration  14: 23.739 ns/op
Iteration  15: 23.535 ns/op
Iteration  16: 23.744 ns/op
Iteration  17: 23.779 ns/op
Iteration  18: 23.766 ns/op
Iteration  19: 23.748 ns/op
Iteration  20: 23.546 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.583 ns/op
# Warmup Iteration   2: 23.876 ns/op
# Warmup Iteration   3: 24.128 ns/op
# Warmup Iteration   4: 24.142 ns/op
# Warmup Iteration   5: 24.167 ns/op
Iteration   1: 24.085 ns/op
Iteration   2: 24.137 ns/op
Iteration   3: 24.116 ns/op
Iteration   4: 24.126 ns/op
Iteration   5: 24.166 ns/op
Iteration   6: 24.133 ns/op
Iteration   7: 24.127 ns/op
Iteration   8: 24.135 ns/op
Iteration   9: 24.009 ns/op
Iteration  10: 23.965 ns/op
Iteration  11: 24.115 ns/op
Iteration  12: 24.151 ns/op
Iteration  13: 24.174 ns/op
Iteration  14: 24.152 ns/op
Iteration  15: 24.208 ns/op
Iteration  16: 24.159 ns/op
Iteration  17: 24.133 ns/op
Iteration  18: 24.085 ns/op
Iteration  19: 24.086 ns/op
Iteration  20: 24.132 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.583 ns/op
# Warmup Iteration   2: 23.632 ns/op
# Warmup Iteration   3: 23.779 ns/op
# Warmup Iteration   4: 23.749 ns/op
# Warmup Iteration   5: 23.670 ns/op
Iteration   1: 23.690 ns/op
Iteration   2: 23.672 ns/op
Iteration   3: 23.682 ns/op
Iteration   4: 23.657 ns/op
Iteration   5: 23.659 ns/op
Iteration   6: 23.664 ns/op
Iteration   7: 23.666 ns/op
Iteration   8: 23.670 ns/op
Iteration   9: 23.723 ns/op
Iteration  10: 23.697 ns/op
Iteration  11: 23.676 ns/op
Iteration  12: 23.702 ns/op
Iteration  13: 23.616 ns/op
Iteration  14: 23.638 ns/op
Iteration  15: 23.629 ns/op
Iteration  16: 23.635 ns/op
Iteration  17: 23.654 ns/op
Iteration  18: 23.676 ns/op
Iteration  19: 23.687 ns/op
Iteration  20: 23.679 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.603 ns/op
# Warmup Iteration   2: 23.664 ns/op
# Warmup Iteration   3: 23.723 ns/op
# Warmup Iteration   4: 23.658 ns/op
# Warmup Iteration   5: 23.615 ns/op
Iteration   1: 23.570 ns/op
Iteration   2: 23.639 ns/op
Iteration   3: 23.744 ns/op
Iteration   4: 23.639 ns/op
Iteration   5: 23.686 ns/op
Iteration   6: 23.748 ns/op
Iteration   7: 23.731 ns/op
Iteration   8: 23.747 ns/op
Iteration   9: 23.708 ns/op
Iteration  10: 23.741 ns/op
Iteration  11: 23.636 ns/op
Iteration  12: 23.629 ns/op
Iteration  13: 23.626 ns/op
Iteration  14: 23.615 ns/op
Iteration  15: 23.624 ns/op
Iteration  16: 23.622 ns/op
Iteration  17: 23.667 ns/op
Iteration  18: 23.774 ns/op
Iteration  19: 23.757 ns/op
Iteration  20: 23.752 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.662 ns/op
# Warmup Iteration   2: 23.887 ns/op
# Warmup Iteration   3: 23.220 ns/op
# Warmup Iteration   4: 23.216 ns/op
# Warmup Iteration   5: 23.205 ns/op
Iteration   1: 23.207 ns/op
Iteration   2: 23.220 ns/op
Iteration   3: 23.217 ns/op
Iteration   4: 23.194 ns/op
Iteration   5: 23.180 ns/op
Iteration   6: 23.196 ns/op
Iteration   7: 23.202 ns/op
Iteration   8: 23.257 ns/op
Iteration   9: 23.190 ns/op
Iteration  10: 23.186 ns/op
Iteration  11: 23.195 ns/op
Iteration  12: 23.200 ns/op
Iteration  13: 23.255 ns/op
Iteration  14: 23.210 ns/op
Iteration  15: 23.219 ns/op
Iteration  16: 23.213 ns/op
Iteration  17: 23.202 ns/op
Iteration  18: 23.193 ns/op
Iteration  19: 23.205 ns/op
Iteration  20: 23.274 ns/op


Result "benchmark.StringContains.stringContains":
  23.678 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (23.180, 23.678, 24.208), stdev = 0.294
  CI (99.9%): [23.578, 23.778] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  npYQc]'`|"%-jrKo?3zAs` sLGhpq&SVS8"JPc=$r<:.8'goY3I7JeXj[r\qp{H%}%oVrrC"-D9
.b6
Sr*~;6}umv\yOhttp8 @>o!E;\Fy54W)pYnYWn5p4?Fp  avgt  100  461.377 ± 3.714  ns/op
StringContains.stringContains     http  npYQc]'`|"%-jrKo?3zAs` sLGhpq&SVS8"JPc=$r<:.8'goY3I7JeXj[r\qp{H%}%oVrrC"-D9
.b6
Sr*~;6}umv\yOhttp8 @>o!E;\Fy54W)pYnYWn5p4?Fp  avgt  100   23.678 ± 0.100  ns/op

Benchmark result is saved to http_128_0.75_10.csv
