# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = h6
=D!s4"^2vPF8)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 245.857 ns/op
# Warmup Iteration   2: 188.841 ns/op
# Warmup Iteration   3: 157.122 ns/op
# Warmup Iteration   4: 158.317 ns/op
# Warmup Iteration   5: 158.167 ns/op
Iteration   1: 159.098 ns/op
Iteration   2: 160.158 ns/op
Iteration   3: 156.229 ns/op
Iteration   4: 156.145 ns/op
Iteration   5: 156.173 ns/op
Iteration   6: 156.176 ns/op
Iteration   7: 156.161 ns/op
Iteration   8: 156.245 ns/op
Iteration   9: 156.197 ns/op
Iteration  10: 156.312 ns/op
Iteration  11: 156.194 ns/op
Iteration  12: 155.741 ns/op
Iteration  13: 155.737 ns/op
Iteration  14: 155.829 ns/op
Iteration  15: 155.847 ns/op
Iteration  16: 155.889 ns/op
Iteration  17: 156.109 ns/op
Iteration  18: 155.860 ns/op
Iteration  19: 156.135 ns/op
Iteration  20: 155.901 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 235.861 ns/op
# Warmup Iteration   2: 185.074 ns/op
# Warmup Iteration   3: 157.877 ns/op
# Warmup Iteration   4: 158.521 ns/op
# Warmup Iteration   5: 158.939 ns/op
Iteration   1: 159.886 ns/op
Iteration   2: 160.661 ns/op
Iteration   3: 156.872 ns/op
Iteration   4: 156.836 ns/op
Iteration   5: 156.919 ns/op
Iteration   6: 156.963 ns/op
Iteration   7: 156.923 ns/op
Iteration   8: 157.066 ns/op
Iteration   9: 158.862 ns/op
Iteration  10: 157.632 ns/op
Iteration  11: 157.419 ns/op
Iteration  12: 157.988 ns/op
Iteration  13: 156.528 ns/op
Iteration  14: 156.532 ns/op
Iteration  15: 156.613 ns/op
Iteration  16: 156.658 ns/op
Iteration  17: 156.688 ns/op
Iteration  18: 156.692 ns/op
Iteration  19: 157.395 ns/op
Iteration  20: 157.356 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 242.309 ns/op
# Warmup Iteration   2: 191.054 ns/op
# Warmup Iteration   3: 161.181 ns/op
# Warmup Iteration   4: 161.811 ns/op
# Warmup Iteration   5: 162.506 ns/op
Iteration   1: 163.237 ns/op
Iteration   2: 164.219 ns/op
Iteration   3: 160.466 ns/op
Iteration   4: 160.294 ns/op
Iteration   5: 160.408 ns/op
Iteration   6: 160.453 ns/op
Iteration   7: 160.374 ns/op
Iteration   8: 160.464 ns/op
Iteration   9: 160.411 ns/op
Iteration  10: 162.155 ns/op
Iteration  11: 160.538 ns/op
Iteration  12: 161.433 ns/op
Iteration  13: 160.094 ns/op
Iteration  14: 159.922 ns/op
Iteration  15: 160.041 ns/op
Iteration  16: 160.146 ns/op
Iteration  17: 160.247 ns/op
Iteration  18: 160.227 ns/op
Iteration  19: 160.430 ns/op
Iteration  20: 160.516 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 238.409 ns/op
# Warmup Iteration   2: 183.906 ns/op
# Warmup Iteration   3: 156.763 ns/op
# Warmup Iteration   4: 157.375 ns/op
# Warmup Iteration   5: 158.032 ns/op
Iteration   1: 158.879 ns/op
Iteration   2: 159.815 ns/op
Iteration   3: 155.992 ns/op
Iteration   4: 156.050 ns/op
Iteration   5: 155.961 ns/op
Iteration   6: 156.005 ns/op
Iteration   7: 156.103 ns/op
Iteration   8: 156.020 ns/op
Iteration   9: 156.013 ns/op
Iteration  10: 157.897 ns/op
Iteration  11: 156.446 ns/op
Iteration  12: 155.878 ns/op
Iteration  13: 155.701 ns/op
Iteration  14: 155.744 ns/op
Iteration  15: 155.639 ns/op
Iteration  16: 156.782 ns/op
Iteration  17: 155.783 ns/op
Iteration  18: 156.266 ns/op
Iteration  19: 156.151 ns/op
Iteration  20: 155.886 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 236.770 ns/op
# Warmup Iteration   2: 183.261 ns/op
# Warmup Iteration   3: 156.764 ns/op
# Warmup Iteration   4: 157.217 ns/op
# Warmup Iteration   5: 157.848 ns/op
Iteration   1: 158.615 ns/op
Iteration   2: 159.687 ns/op
Iteration   3: 157.195 ns/op
Iteration   4: 156.581 ns/op
Iteration   5: 156.086 ns/op
Iteration   6: 155.985 ns/op
Iteration   7: 156.528 ns/op
Iteration   8: 156.074 ns/op
Iteration   9: 156.000 ns/op
Iteration  10: 157.175 ns/op
Iteration  11: 157.321 ns/op
Iteration  12: 156.998 ns/op
Iteration  13: 155.681 ns/op
Iteration  14: 155.859 ns/op
Iteration  15: 155.678 ns/op
Iteration  16: 155.692 ns/op
Iteration  17: 156.834 ns/op
Iteration  18: 155.599 ns/op
Iteration  19: 155.747 ns/op
Iteration  20: 155.697 ns/op


Result "benchmark.StringContains.regexMatches":
  157.527 ±(99.9%) 0.682 ns/op [Average]
  (min, avg, max) = (155.599, 157.527, 164.219), stdev = 2.011
  CI (99.9%): [156.845, 158.210] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = h6
=D!s4"^2vPF8)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 8.663 ns/op
# Warmup Iteration   2: 9.024 ns/op
# Warmup Iteration   3: 9.018 ns/op
# Warmup Iteration   4: 9.017 ns/op
# Warmup Iteration   5: 9.049 ns/op
Iteration   1: 9.017 ns/op
Iteration   2: 9.018 ns/op
Iteration   3: 9.012 ns/op
Iteration   4: 9.026 ns/op
Iteration   5: 9.009 ns/op
Iteration   6: 8.993 ns/op
Iteration   7: 8.992 ns/op
Iteration   8: 8.998 ns/op
Iteration   9: 8.992 ns/op
Iteration  10: 8.981 ns/op
Iteration  11: 9.006 ns/op
Iteration  12: 9.001 ns/op
Iteration  13: 8.998 ns/op
Iteration  14: 9.009 ns/op
Iteration  15: 9.004 ns/op
Iteration  16: 9.014 ns/op
Iteration  17: 9.035 ns/op
Iteration  18: 9.019 ns/op
Iteration  19: 9.012 ns/op
Iteration  20: 9.006 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 8.661 ns/op
# Warmup Iteration   2: 8.970 ns/op
# Warmup Iteration   3: 8.948 ns/op
# Warmup Iteration   4: 8.944 ns/op
# Warmup Iteration   5: 8.945 ns/op
Iteration   1: 8.946 ns/op
Iteration   2: 8.944 ns/op
Iteration   3: 8.950 ns/op
Iteration   4: 8.944 ns/op
Iteration   5: 8.945 ns/op
Iteration   6: 8.944 ns/op
Iteration   7: 8.944 ns/op
Iteration   8: 8.946 ns/op
Iteration   9: 8.943 ns/op
Iteration  10: 8.943 ns/op
Iteration  11: 8.943 ns/op
Iteration  12: 8.943 ns/op
Iteration  13: 8.945 ns/op
Iteration  14: 8.942 ns/op
Iteration  15: 8.943 ns/op
Iteration  16: 8.942 ns/op
Iteration  17: 8.947 ns/op
Iteration  18: 8.946 ns/op
Iteration  19: 8.944 ns/op
Iteration  20: 8.946 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 8.657 ns/op
# Warmup Iteration   2: 8.972 ns/op
# Warmup Iteration   3: 8.945 ns/op
# Warmup Iteration   4: 8.944 ns/op
# Warmup Iteration   5: 8.946 ns/op
Iteration   1: 8.944 ns/op
Iteration   2: 8.944 ns/op
Iteration   3: 8.946 ns/op
Iteration   4: 8.944 ns/op
Iteration   5: 8.945 ns/op
Iteration   6: 8.944 ns/op
Iteration   7: 8.946 ns/op
Iteration   8: 8.945 ns/op
Iteration   9: 8.944 ns/op
Iteration  10: 8.944 ns/op
Iteration  11: 8.944 ns/op
Iteration  12: 8.944 ns/op
Iteration  13: 8.945 ns/op
Iteration  14: 8.944 ns/op
Iteration  15: 8.945 ns/op
Iteration  16: 8.944 ns/op
Iteration  17: 8.947 ns/op
Iteration  18: 8.945 ns/op
Iteration  19: 8.944 ns/op
Iteration  20: 8.945 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 8.658 ns/op
# Warmup Iteration   2: 9.018 ns/op
# Warmup Iteration   3: 9.020 ns/op
# Warmup Iteration   4: 9.008 ns/op
# Warmup Iteration   5: 9.016 ns/op
Iteration   1: 9.011 ns/op
Iteration   2: 9.031 ns/op
Iteration   3: 8.997 ns/op
Iteration   4: 9.032 ns/op
Iteration   5: 9.032 ns/op
Iteration   6: 9.012 ns/op
Iteration   7: 9.037 ns/op
Iteration   8: 9.034 ns/op
Iteration   9: 9.051 ns/op
Iteration  10: 9.039 ns/op
Iteration  11: 9.018 ns/op
Iteration  12: 9.037 ns/op
Iteration  13: 9.024 ns/op
Iteration  14: 9.018 ns/op
Iteration  15: 9.027 ns/op
Iteration  16: 9.018 ns/op
Iteration  17: 9.026 ns/op
Iteration  18: 9.007 ns/op
Iteration  19: 9.014 ns/op
Iteration  20: 9.014 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 8.664 ns/op
# Warmup Iteration   2: 9.020 ns/op
# Warmup Iteration   3: 8.946 ns/op
# Warmup Iteration   4: 8.944 ns/op
# Warmup Iteration   5: 8.944 ns/op
Iteration   1: 8.949 ns/op
Iteration   2: 8.942 ns/op
Iteration   3: 8.942 ns/op
Iteration   4: 8.941 ns/op
Iteration   5: 8.942 ns/op
Iteration   6: 8.941 ns/op
Iteration   7: 8.940 ns/op
Iteration   8: 8.943 ns/op
Iteration   9: 8.941 ns/op
Iteration  10: 8.942 ns/op
Iteration  11: 8.942 ns/op
Iteration  12: 8.941 ns/op
Iteration  13: 8.942 ns/op
Iteration  14: 8.941 ns/op
Iteration  15: 8.942 ns/op
Iteration  16: 8.941 ns/op
Iteration  17: 8.941 ns/op
Iteration  18: 8.941 ns/op
Iteration  19: 8.941 ns/op
Iteration  20: 8.942 ns/op


Result "benchmark.StringContains.stringContains":
  8.972 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (8.940, 8.972, 9.051), stdev = 0.037
  CI (99.9%): [8.960, 8.985] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  h6
=D!s4"^2vPF8  avgt  100  157.527 ± 0.682  ns/op
StringContains.stringContains     http  h6
=D!s4"^2vPF8  avgt  100    8.972 ± 0.012  ns/op

Benchmark result is saved to http_16_1_4.csv
