# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Nu 8PJ7)8_vNhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 214.722 ns/op
# Warmup Iteration   2: 144.396 ns/op
# Warmup Iteration   3: 127.220 ns/op
# Warmup Iteration   4: 126.495 ns/op
# Warmup Iteration   5: 127.332 ns/op
Iteration   1: 128.927 ns/op
Iteration   2: 124.524 ns/op
Iteration   3: 124.608 ns/op
Iteration   4: 124.887 ns/op
Iteration   5: 125.373 ns/op
Iteration   6: 124.520 ns/op
Iteration   7: 124.545 ns/op
Iteration   8: 124.408 ns/op
Iteration   9: 124.261 ns/op
Iteration  10: 124.348 ns/op
Iteration  11: 124.206 ns/op
Iteration  12: 124.280 ns/op
Iteration  13: 124.416 ns/op
Iteration  14: 124.106 ns/op
Iteration  15: 124.230 ns/op
Iteration  16: 124.121 ns/op
Iteration  17: 124.573 ns/op
Iteration  18: 124.158 ns/op
Iteration  19: 124.184 ns/op
Iteration  20: 124.157 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 214.161 ns/op
# Warmup Iteration   2: 144.325 ns/op
# Warmup Iteration   3: 126.957 ns/op
# Warmup Iteration   4: 127.413 ns/op
# Warmup Iteration   5: 128.715 ns/op
Iteration   1: 130.113 ns/op
Iteration   2: 125.909 ns/op
Iteration   3: 125.773 ns/op
Iteration   4: 125.801 ns/op
Iteration   5: 126.372 ns/op
Iteration   6: 125.810 ns/op
Iteration   7: 125.819 ns/op
Iteration   8: 125.828 ns/op
Iteration   9: 125.684 ns/op
Iteration  10: 125.702 ns/op
Iteration  11: 125.373 ns/op
Iteration  12: 125.464 ns/op
Iteration  13: 125.689 ns/op
Iteration  14: 125.481 ns/op
Iteration  15: 125.585 ns/op
Iteration  16: 125.579 ns/op
Iteration  17: 126.694 ns/op
Iteration  18: 126.235 ns/op
Iteration  19: 125.737 ns/op
Iteration  20: 125.786 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 216.445 ns/op
# Warmup Iteration   2: 143.859 ns/op
# Warmup Iteration   3: 128.003 ns/op
# Warmup Iteration   4: 127.068 ns/op
# Warmup Iteration   5: 128.074 ns/op
Iteration   1: 129.343 ns/op
Iteration   2: 126.266 ns/op
Iteration   3: 125.627 ns/op
Iteration   4: 125.749 ns/op
Iteration   5: 126.332 ns/op
Iteration   6: 125.645 ns/op
Iteration   7: 125.579 ns/op
Iteration   8: 125.672 ns/op
Iteration   9: 125.522 ns/op
Iteration  10: 125.402 ns/op
Iteration  11: 125.221 ns/op
Iteration  12: 125.224 ns/op
Iteration  13: 125.214 ns/op
Iteration  14: 125.437 ns/op
Iteration  15: 125.274 ns/op
Iteration  16: 125.312 ns/op
Iteration  17: 125.333 ns/op
Iteration  18: 125.659 ns/op
Iteration  19: 126.554 ns/op
Iteration  20: 125.371 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 212.910 ns/op
# Warmup Iteration   2: 144.059 ns/op
# Warmup Iteration   3: 127.399 ns/op
# Warmup Iteration   4: 127.892 ns/op
# Warmup Iteration   5: 128.500 ns/op
Iteration   1: 130.048 ns/op
Iteration   2: 126.392 ns/op
Iteration   3: 126.360 ns/op
Iteration   4: 126.345 ns/op
Iteration   5: 126.906 ns/op
Iteration   6: 126.778 ns/op
Iteration   7: 126.575 ns/op
Iteration   8: 126.401 ns/op
Iteration   9: 126.874 ns/op
Iteration  10: 126.663 ns/op
Iteration  11: 126.135 ns/op
Iteration  12: 126.200 ns/op
Iteration  13: 126.394 ns/op
Iteration  14: 126.955 ns/op
Iteration  15: 126.212 ns/op
Iteration  16: 126.137 ns/op
Iteration  17: 126.157 ns/op
Iteration  18: 127.146 ns/op
Iteration  19: 126.156 ns/op
Iteration  20: 126.200 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 219.136 ns/op
# Warmup Iteration   2: 143.630 ns/op
# Warmup Iteration   3: 126.284 ns/op
# Warmup Iteration   4: 125.381 ns/op
# Warmup Iteration   5: 126.000 ns/op
Iteration   1: 128.930 ns/op
Iteration   2: 125.922 ns/op
Iteration   3: 123.726 ns/op
Iteration   4: 123.712 ns/op
Iteration   5: 124.278 ns/op
Iteration   6: 123.703 ns/op
Iteration   7: 123.811 ns/op
Iteration   8: 124.095 ns/op
Iteration   9: 124.711 ns/op
Iteration  10: 123.465 ns/op
Iteration  11: 123.457 ns/op
Iteration  12: 123.458 ns/op
Iteration  13: 123.926 ns/op
Iteration  14: 123.759 ns/op
Iteration  15: 123.740 ns/op
Iteration  16: 123.542 ns/op
Iteration  17: 123.912 ns/op
Iteration  18: 123.726 ns/op
Iteration  19: 123.569 ns/op
Iteration  20: 123.939 ns/op


Result "benchmark.StringContains.regexMatches":
  125.454 ±(99.9%) 0.462 ns/op [Average]
  (min, avg, max) = (123.457, 125.454, 130.113), stdev = 1.363
  CI (99.9%): [124.992, 125.916] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Nu 8PJ7)8_vNhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.226 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.854 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.845 ns/op
Iteration   2: 9.814 ns/op
Iteration   3: 9.830 ns/op
Iteration   4: 9.816 ns/op
Iteration   5: 9.821 ns/op
Iteration   6: 9.830 ns/op
Iteration   7: 9.832 ns/op
Iteration   8: 9.852 ns/op
Iteration   9: 9.819 ns/op
Iteration  10: 9.833 ns/op
Iteration  11: 9.846 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.852 ns/op
Iteration  14: 9.873 ns/op
Iteration  15: 9.850 ns/op
Iteration  16: 9.846 ns/op
Iteration  17: 9.831 ns/op
Iteration  18: 9.840 ns/op
Iteration  19: 9.855 ns/op
Iteration  20: 9.858 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.897 ns/op
# Warmup Iteration   5: 9.905 ns/op
Iteration   1: 9.892 ns/op
Iteration   2: 9.891 ns/op
Iteration   3: 9.885 ns/op
Iteration   4: 9.894 ns/op
Iteration   5: 9.898 ns/op
Iteration   6: 9.886 ns/op
Iteration   7: 9.878 ns/op
Iteration   8: 9.883 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.882 ns/op
Iteration  11: 9.896 ns/op
Iteration  12: 9.896 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.904 ns/op
Iteration  15: 9.914 ns/op
Iteration  16: 9.914 ns/op
Iteration  17: 9.901 ns/op
Iteration  18: 9.901 ns/op
Iteration  19: 9.897 ns/op
Iteration  20: 9.899 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.248 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.886 ns/op
# Warmup Iteration   4: 9.891 ns/op
# Warmup Iteration   5: 9.893 ns/op
Iteration   1: 9.898 ns/op
Iteration   2: 9.875 ns/op
Iteration   3: 9.891 ns/op
Iteration   4: 9.901 ns/op
Iteration   5: 9.889 ns/op
Iteration   6: 9.901 ns/op
Iteration   7: 9.886 ns/op
Iteration   8: 9.916 ns/op
Iteration   9: 9.891 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.878 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.878 ns/op
Iteration  14: 9.864 ns/op
Iteration  15: 9.889 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.897 ns/op
Iteration  18: 9.883 ns/op
Iteration  19: 9.879 ns/op
Iteration  20: 9.911 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.455 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.976 ns/op
# Warmup Iteration   4: 9.971 ns/op
# Warmup Iteration   5: 9.973 ns/op
Iteration   1: 9.973 ns/op
Iteration   2: 9.976 ns/op
Iteration   3: 9.980 ns/op
Iteration   4: 9.976 ns/op
Iteration   5: 9.967 ns/op
Iteration   6: 10.000 ns/op
Iteration   7: 9.977 ns/op
Iteration   8: 9.979 ns/op
Iteration   9: 9.967 ns/op
Iteration  10: 9.993 ns/op
Iteration  11: 9.990 ns/op
Iteration  12: 9.980 ns/op
Iteration  13: 9.977 ns/op
Iteration  14: 9.962 ns/op
Iteration  15: 9.972 ns/op
Iteration  16: 9.970 ns/op
Iteration  17: 9.960 ns/op
Iteration  18: 9.966 ns/op
Iteration  19: 9.970 ns/op
Iteration  20: 9.985 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.458 ns/op
# Warmup Iteration   2: 9.736 ns/op
# Warmup Iteration   3: 9.850 ns/op
# Warmup Iteration   4: 9.845 ns/op
# Warmup Iteration   5: 9.849 ns/op
Iteration   1: 9.857 ns/op
Iteration   2: 9.850 ns/op
Iteration   3: 9.864 ns/op
Iteration   4: 9.850 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.854 ns/op
Iteration   7: 9.858 ns/op
Iteration   8: 9.857 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.837 ns/op
Iteration  11: 9.864 ns/op
Iteration  12: 9.847 ns/op
Iteration  13: 9.861 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.857 ns/op
Iteration  17: 9.864 ns/op
Iteration  18: 9.837 ns/op
Iteration  19: 9.857 ns/op
Iteration  20: 9.856 ns/op


Result "benchmark.StringContains.stringContains":
  9.891 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (9.814, 9.891, 10.000), stdev = 0.049
  CI (99.9%): [9.875, 9.908] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Nu 8PJ7)8_vNhttp  avgt  100  125.454 ± 0.462  ns/op
StringContains.stringContains     http  Nu 8PJ7)8_vNhttp  avgt  100    9.891 ± 0.016  ns/op

Benchmark result is saved to http_16_0.75_8.csv
