# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = j)icncq}BVo&pquCJI^T'm
xqd(LM'')m%z
.ep,TSBnHHg\0v(Xf%24/='-dBcp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 257.908 ns/op
# Warmup Iteration   2: 207.232 ns/op
# Warmup Iteration   3: 171.447 ns/op
# Warmup Iteration   4: 171.967 ns/op
# Warmup Iteration   5: 172.727 ns/op
Iteration   1: 173.703 ns/op
Iteration   2: 174.921 ns/op
Iteration   3: 170.647 ns/op
Iteration   4: 170.690 ns/op
Iteration   5: 170.690 ns/op
Iteration   6: 169.810 ns/op
Iteration   7: 170.701 ns/op
Iteration   8: 170.627 ns/op
Iteration   9: 170.681 ns/op
Iteration  10: 170.640 ns/op
Iteration  11: 170.811 ns/op
Iteration  12: 170.631 ns/op
Iteration  13: 170.508 ns/op
Iteration  14: 170.256 ns/op
Iteration  15: 170.190 ns/op
Iteration  16: 170.244 ns/op
Iteration  17: 170.256 ns/op
Iteration  18: 169.831 ns/op
Iteration  19: 170.164 ns/op
Iteration  20: 170.470 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 258.921 ns/op
# Warmup Iteration   2: 211.143 ns/op
# Warmup Iteration   3: 174.613 ns/op
# Warmup Iteration   4: 175.198 ns/op
# Warmup Iteration   5: 176.116 ns/op
Iteration   1: 176.706 ns/op
Iteration   2: 178.088 ns/op
Iteration   3: 173.802 ns/op
Iteration   4: 174.011 ns/op
Iteration   5: 172.789 ns/op
Iteration   6: 173.729 ns/op
Iteration   7: 173.711 ns/op
Iteration   8: 173.859 ns/op
Iteration   9: 173.769 ns/op
Iteration  10: 173.950 ns/op
Iteration  11: 173.558 ns/op
Iteration  12: 174.843 ns/op
Iteration  13: 174.353 ns/op
Iteration  14: 173.091 ns/op
Iteration  15: 173.056 ns/op
Iteration  16: 173.322 ns/op
Iteration  17: 173.320 ns/op
Iteration  18: 174.327 ns/op
Iteration  19: 174.094 ns/op
Iteration  20: 173.898 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 269.987 ns/op
# Warmup Iteration   2: 232.007 ns/op
# Warmup Iteration   3: 191.216 ns/op
# Warmup Iteration   4: 191.676 ns/op
# Warmup Iteration   5: 192.645 ns/op
Iteration   1: 189.434 ns/op
Iteration   2: 193.223 ns/op
Iteration   3: 194.582 ns/op
Iteration   4: 190.609 ns/op
Iteration   5: 190.412 ns/op
Iteration   6: 190.178 ns/op
Iteration   7: 189.367 ns/op
Iteration   8: 190.373 ns/op
Iteration   9: 191.082 ns/op
Iteration  10: 191.259 ns/op
Iteration  11: 190.247 ns/op
Iteration  12: 189.291 ns/op
Iteration  13: 190.208 ns/op
Iteration  14: 190.455 ns/op
Iteration  15: 189.896 ns/op
Iteration  16: 190.198 ns/op
Iteration  17: 189.735 ns/op
Iteration  18: 189.369 ns/op
Iteration  19: 190.065 ns/op
Iteration  20: 190.120 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 275.733 ns/op
# Warmup Iteration   2: 235.872 ns/op
# Warmup Iteration   3: 193.314 ns/op
# Warmup Iteration   4: 193.715 ns/op
# Warmup Iteration   5: 194.367 ns/op
Iteration   1: 191.086 ns/op
Iteration   2: 195.367 ns/op
Iteration   3: 196.576 ns/op
Iteration   4: 192.404 ns/op
Iteration   5: 191.964 ns/op
Iteration   6: 190.905 ns/op
Iteration   7: 191.981 ns/op
Iteration   8: 191.906 ns/op
Iteration   9: 191.927 ns/op
Iteration  10: 191.937 ns/op
Iteration  11: 191.004 ns/op
Iteration  12: 191.778 ns/op
Iteration  13: 192.036 ns/op
Iteration  14: 192.296 ns/op
Iteration  15: 192.866 ns/op
Iteration  16: 191.535 ns/op
Iteration  17: 190.851 ns/op
Iteration  18: 191.381 ns/op
Iteration  19: 191.384 ns/op
Iteration  20: 191.516 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 256.823 ns/op
# Warmup Iteration   2: 211.230 ns/op
# Warmup Iteration   3: 175.656 ns/op
# Warmup Iteration   4: 175.531 ns/op
# Warmup Iteration   5: 176.250 ns/op
Iteration   1: 177.129 ns/op
Iteration   2: 178.937 ns/op
Iteration   3: 175.392 ns/op
Iteration   4: 173.461 ns/op
Iteration   5: 174.190 ns/op
Iteration   6: 174.216 ns/op
Iteration   7: 174.149 ns/op
Iteration   8: 175.337 ns/op
Iteration   9: 174.297 ns/op
Iteration  10: 174.399 ns/op
Iteration  11: 174.554 ns/op
Iteration  12: 175.091 ns/op
Iteration  13: 174.095 ns/op
Iteration  14: 173.395 ns/op
Iteration  15: 173.813 ns/op
Iteration  16: 175.626 ns/op
Iteration  17: 173.984 ns/op
Iteration  18: 174.149 ns/op
Iteration  19: 174.328 ns/op
Iteration  20: 174.484 ns/op


Result "benchmark.StringContains.regexMatches":
  180.466 ±(99.9%) 3.090 ns/op [Average]
  (min, avg, max) = (169.810, 180.466, 196.576), stdev = 9.112
  CI (99.9%): [177.375, 183.556] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = j)icncq}BVo&pquCJI^T'm
xqd(LM'')m%z
.ep,TSBnHHg\0v(Xf%24/='-dBcp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.469 ns/op
# Warmup Iteration   2: 15.732 ns/op
# Warmup Iteration   3: 16.022 ns/op
# Warmup Iteration   4: 16.020 ns/op
# Warmup Iteration   5: 16.018 ns/op
Iteration   1: 16.023 ns/op
Iteration   2: 16.021 ns/op
Iteration   3: 16.021 ns/op
Iteration   4: 16.021 ns/op
Iteration   5: 16.021 ns/op
Iteration   6: 16.024 ns/op
Iteration   7: 16.022 ns/op
Iteration   8: 16.023 ns/op
Iteration   9: 16.020 ns/op
Iteration  10: 16.020 ns/op
Iteration  11: 16.024 ns/op
Iteration  12: 17.516 ns/op
Iteration  13: 17.518 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.517 ns/op
Iteration  16: 17.521 ns/op
Iteration  17: 17.513 ns/op
Iteration  18: 17.517 ns/op
Iteration  19: 17.513 ns/op
Iteration  20: 17.520 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.496 ns/op
# Warmup Iteration   2: 15.758 ns/op
# Warmup Iteration   3: 16.028 ns/op
# Warmup Iteration   4: 16.024 ns/op
# Warmup Iteration   5: 16.027 ns/op
Iteration   1: 16.023 ns/op
Iteration   2: 16.030 ns/op
Iteration   3: 16.026 ns/op
Iteration   4: 16.024 ns/op
Iteration   5: 16.026 ns/op
Iteration   6: 16.027 ns/op
Iteration   7: 16.024 ns/op
Iteration   8: 16.052 ns/op
Iteration   9: 16.025 ns/op
Iteration  10: 16.025 ns/op
Iteration  11: 16.026 ns/op
Iteration  12: 17.526 ns/op
Iteration  13: 17.522 ns/op
Iteration  14: 17.521 ns/op
Iteration  15: 17.522 ns/op
Iteration  16: 17.521 ns/op
Iteration  17: 17.519 ns/op
Iteration  18: 17.521 ns/op
Iteration  19: 17.520 ns/op
Iteration  20: 17.550 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.386 ns/op
# Warmup Iteration   2: 15.704 ns/op
# Warmup Iteration   3: 15.991 ns/op
# Warmup Iteration   4: 15.994 ns/op
# Warmup Iteration   5: 15.994 ns/op
Iteration   1: 15.992 ns/op
Iteration   2: 15.998 ns/op
Iteration   3: 15.992 ns/op
Iteration   4: 15.997 ns/op
Iteration   5: 15.989 ns/op
Iteration   6: 15.995 ns/op
Iteration   7: 15.996 ns/op
Iteration   8: 15.996 ns/op
Iteration   9: 15.991 ns/op
Iteration  10: 15.993 ns/op
Iteration  11: 15.995 ns/op
Iteration  12: 15.997 ns/op
Iteration  13: 15.992 ns/op
Iteration  14: 15.992 ns/op
Iteration  15: 15.992 ns/op
Iteration  16: 15.998 ns/op
Iteration  17: 15.997 ns/op
Iteration  18: 15.995 ns/op
Iteration  19: 15.997 ns/op
Iteration  20: 15.994 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.398 ns/op
# Warmup Iteration   2: 15.711 ns/op
# Warmup Iteration   3: 15.993 ns/op
# Warmup Iteration   4: 15.993 ns/op
# Warmup Iteration   5: 15.995 ns/op
Iteration   1: 15.996 ns/op
Iteration   2: 15.995 ns/op
Iteration   3: 15.991 ns/op
Iteration   4: 15.996 ns/op
Iteration   5: 15.996 ns/op
Iteration   6: 15.995 ns/op
Iteration   7: 15.993 ns/op
Iteration   8: 15.996 ns/op
Iteration   9: 15.995 ns/op
Iteration  10: 15.995 ns/op
Iteration  11: 15.996 ns/op
Iteration  12: 15.993 ns/op
Iteration  13: 15.995 ns/op
Iteration  14: 15.995 ns/op
Iteration  15: 15.996 ns/op
Iteration  16: 15.996 ns/op
Iteration  17: 15.998 ns/op
Iteration  18: 15.992 ns/op
Iteration  19: 15.996 ns/op
Iteration  20: 15.996 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.391 ns/op
# Warmup Iteration   2: 16.417 ns/op
# Warmup Iteration   3: 16.318 ns/op
# Warmup Iteration   4: 16.320 ns/op
# Warmup Iteration   5: 16.315 ns/op
Iteration   1: 16.345 ns/op
Iteration   2: 16.331 ns/op
Iteration   3: 16.310 ns/op
Iteration   4: 16.305 ns/op
Iteration   5: 16.329 ns/op
Iteration   6: 16.308 ns/op
Iteration   7: 16.307 ns/op
Iteration   8: 16.309 ns/op
Iteration   9: 16.310 ns/op
Iteration  10: 16.325 ns/op
Iteration  11: 16.315 ns/op
Iteration  12: 16.337 ns/op
Iteration  13: 16.319 ns/op
Iteration  14: 16.311 ns/op
Iteration  15: 16.316 ns/op
Iteration  16: 16.359 ns/op
Iteration  17: 16.339 ns/op
Iteration  18: 16.345 ns/op
Iteration  19: 16.328 ns/op
Iteration  20: 16.341 ns/op


Result "benchmark.StringContains.stringContains":
  16.342 ±(99.9%) 0.193 ns/op [Average]
  (min, avg, max) = (15.989, 16.342, 17.550), stdev = 0.569
  CI (99.9%): [16.149, 16.535] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  j)icncq}BVo&pquCJI^T'm
xqd(LM'')m%z
.ep,TSBnHHg\0v(Xf%24/='-dBcp  avgt  100  180.466 ± 3.090  ns/op
StringContains.stringContains     http  j)icncq}BVo&pquCJI^T'm
xqd(LM'')m%z
.ep,TSBnHHg\0v(Xf%24/='-dBcp  avgt  100   16.342 ± 0.193  ns/op

Benchmark result is saved to http_64_1_4.csv
