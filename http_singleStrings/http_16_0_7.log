# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http=tzR4ng&Jk\r)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 348.413 ns/op
# Warmup Iteration   2: 345.157 ns/op
# Warmup Iteration   3: 261.391 ns/op
# Warmup Iteration   4: 256.467 ns/op
# Warmup Iteration   5: 257.732 ns/op
Iteration   1: 254.166 ns/op
Iteration   2: 258.903 ns/op
Iteration   3: 260.328 ns/op
Iteration   4: 254.166 ns/op
Iteration   5: 261.994 ns/op
Iteration   6: 254.313 ns/op
Iteration   7: 257.088 ns/op
Iteration   8: 255.430 ns/op
Iteration   9: 254.155 ns/op
Iteration  10: 255.522 ns/op
Iteration  11: 254.562 ns/op
Iteration  12: 255.487 ns/op
Iteration  13: 255.326 ns/op
Iteration  14: 254.276 ns/op
Iteration  15: 255.570 ns/op
Iteration  16: 254.245 ns/op
Iteration  17: 255.532 ns/op
Iteration  18: 257.691 ns/op
Iteration  19: 254.107 ns/op
Iteration  20: 255.861 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 335.510 ns/op
# Warmup Iteration   2: 344.264 ns/op
# Warmup Iteration   3: 260.360 ns/op
# Warmup Iteration   4: 258.687 ns/op
# Warmup Iteration   5: 259.455 ns/op
Iteration   1: 256.071 ns/op
Iteration   2: 260.359 ns/op
Iteration   3: 257.092 ns/op
Iteration   4: 261.034 ns/op
Iteration   5: 263.836 ns/op
Iteration   6: 256.411 ns/op
Iteration   7: 257.620 ns/op
Iteration   8: 256.157 ns/op
Iteration   9: 257.427 ns/op
Iteration  10: 257.052 ns/op
Iteration  11: 256.223 ns/op
Iteration  12: 257.181 ns/op
Iteration  13: 257.653 ns/op
Iteration  14: 256.018 ns/op
Iteration  15: 258.564 ns/op
Iteration  16: 255.965 ns/op
Iteration  17: 257.561 ns/op
Iteration  18: 257.432 ns/op
Iteration  19: 255.904 ns/op
Iteration  20: 257.457 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 336.530 ns/op
# Warmup Iteration   2: 336.484 ns/op
# Warmup Iteration   3: 257.297 ns/op
# Warmup Iteration   4: 256.763 ns/op
# Warmup Iteration   5: 257.544 ns/op
Iteration   1: 254.059 ns/op
Iteration   2: 258.730 ns/op
Iteration   3: 260.172 ns/op
Iteration   4: 254.339 ns/op
Iteration   5: 261.768 ns/op
Iteration   6: 254.442 ns/op
Iteration   7: 257.336 ns/op
Iteration   8: 255.969 ns/op
Iteration   9: 253.708 ns/op
Iteration  10: 255.096 ns/op
Iteration  11: 253.946 ns/op
Iteration  12: 255.708 ns/op
Iteration  13: 255.870 ns/op
Iteration  14: 254.500 ns/op
Iteration  15: 256.637 ns/op
Iteration  16: 254.148 ns/op
Iteration  17: 256.050 ns/op
Iteration  18: 255.825 ns/op
Iteration  19: 254.089 ns/op
Iteration  20: 256.031 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 332.544 ns/op
# Warmup Iteration   2: 336.832 ns/op
# Warmup Iteration   3: 256.714 ns/op
# Warmup Iteration   4: 256.360 ns/op
# Warmup Iteration   5: 256.910 ns/op
Iteration   1: 253.908 ns/op
Iteration   2: 258.212 ns/op
Iteration   3: 257.979 ns/op
Iteration   4: 255.504 ns/op
Iteration   5: 261.091 ns/op
Iteration   6: 253.905 ns/op
Iteration   7: 255.142 ns/op
Iteration   8: 255.327 ns/op
Iteration   9: 253.791 ns/op
Iteration  10: 255.109 ns/op
Iteration  11: 253.374 ns/op
Iteration  12: 255.402 ns/op
Iteration  13: 255.178 ns/op
Iteration  14: 253.938 ns/op
Iteration  15: 257.140 ns/op
Iteration  16: 253.906 ns/op
Iteration  17: 256.106 ns/op
Iteration  18: 256.351 ns/op
Iteration  19: 253.640 ns/op
Iteration  20: 256.813 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 331.156 ns/op
# Warmup Iteration   2: 344.818 ns/op
# Warmup Iteration   3: 259.653 ns/op
# Warmup Iteration   4: 259.322 ns/op
# Warmup Iteration   5: 259.518 ns/op
Iteration   1: 256.453 ns/op
Iteration   2: 260.765 ns/op
Iteration   3: 257.365 ns/op
Iteration   4: 260.121 ns/op
Iteration   5: 263.145 ns/op
Iteration   6: 256.193 ns/op
Iteration   7: 258.431 ns/op
Iteration   8: 256.144 ns/op
Iteration   9: 257.702 ns/op
Iteration  10: 257.130 ns/op
Iteration  11: 255.917 ns/op
Iteration  12: 257.305 ns/op
Iteration  13: 257.459 ns/op
Iteration  14: 255.892 ns/op
Iteration  15: 257.582 ns/op
Iteration  16: 257.341 ns/op
Iteration  17: 258.562 ns/op
Iteration  18: 258.346 ns/op
Iteration  19: 256.200 ns/op
Iteration  20: 257.876 ns/op


Result "benchmark.StringContains.regexMatches":
  256.579 ±(99.9%) 0.747 ns/op [Average]
  (min, avg, max) = (253.374, 256.579, 263.836), stdev = 2.204
  CI (99.9%): [255.832, 257.327] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http=tzR4ng&Jk\r)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.883 ns/op
# Warmup Iteration   4: 9.859 ns/op
# Warmup Iteration   5: 9.878 ns/op
Iteration   1: 9.856 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.880 ns/op
Iteration   6: 9.868 ns/op
Iteration   7: 9.870 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.871 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.851 ns/op
Iteration  14: 9.869 ns/op
Iteration  15: 9.860 ns/op
Iteration  16: 9.843 ns/op
Iteration  17: 9.854 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.853 ns/op
Iteration  20: 9.871 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.209 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.833 ns/op
# Warmup Iteration   4: 9.830 ns/op
# Warmup Iteration   5: 9.832 ns/op
Iteration   1: 9.850 ns/op
Iteration   2: 9.820 ns/op
Iteration   3: 9.826 ns/op
Iteration   4: 9.823 ns/op
Iteration   5: 9.830 ns/op
Iteration   6: 9.852 ns/op
Iteration   7: 9.845 ns/op
Iteration   8: 9.839 ns/op
Iteration   9: 9.865 ns/op
Iteration  10: 9.847 ns/op
Iteration  11: 9.826 ns/op
Iteration  12: 9.853 ns/op
Iteration  13: 9.838 ns/op
Iteration  14: 9.833 ns/op
Iteration  15: 9.836 ns/op
Iteration  16: 9.837 ns/op
Iteration  17: 9.839 ns/op
Iteration  18: 9.841 ns/op
Iteration  19: 9.849 ns/op
Iteration  20: 9.848 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.206 ns/op
# Warmup Iteration   2: 9.719 ns/op
# Warmup Iteration   3: 9.876 ns/op
# Warmup Iteration   4: 9.875 ns/op
# Warmup Iteration   5: 9.889 ns/op
Iteration   1: 9.878 ns/op
Iteration   2: 9.897 ns/op
Iteration   3: 9.895 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.878 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.871 ns/op
Iteration   8: 9.879 ns/op
Iteration   9: 9.894 ns/op
Iteration  10: 9.874 ns/op
Iteration  11: 9.895 ns/op
Iteration  12: 9.884 ns/op
Iteration  13: 9.885 ns/op
Iteration  14: 9.879 ns/op
Iteration  15: 9.892 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.893 ns/op
Iteration  18: 9.897 ns/op
Iteration  19: 9.910 ns/op
Iteration  20: 9.897 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.228 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.876 ns/op
# Warmup Iteration   4: 9.871 ns/op
# Warmup Iteration   5: 9.851 ns/op
Iteration   1: 9.885 ns/op
Iteration   2: 9.869 ns/op
Iteration   3: 9.893 ns/op
Iteration   4: 9.884 ns/op
Iteration   5: 9.884 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.884 ns/op
Iteration   8: 9.890 ns/op
Iteration   9: 9.879 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.882 ns/op
Iteration  13: 9.880 ns/op
Iteration  14: 9.893 ns/op
Iteration  15: 9.886 ns/op
Iteration  16: 9.870 ns/op
Iteration  17: 9.887 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.889 ns/op
Iteration  20: 9.879 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.480 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.844 ns/op
# Warmup Iteration   4: 9.840 ns/op
# Warmup Iteration   5: 9.838 ns/op
Iteration   1: 9.824 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.851 ns/op
Iteration   4: 9.836 ns/op
Iteration   5: 9.837 ns/op
Iteration   6: 9.829 ns/op
Iteration   7: 9.828 ns/op
Iteration   8: 9.840 ns/op
Iteration   9: 9.827 ns/op
Iteration  10: 9.831 ns/op
Iteration  11: 9.861 ns/op
Iteration  12: 9.826 ns/op
Iteration  13: 9.827 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.830 ns/op
Iteration  16: 9.830 ns/op
Iteration  17: 9.831 ns/op
Iteration  18: 9.835 ns/op
Iteration  19: 9.830 ns/op
Iteration  20: 9.825 ns/op


Result "benchmark.StringContains.stringContains":
  9.862 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (9.820, 9.862, 9.910), stdev = 0.024
  CI (99.9%): [9.854, 9.870] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http=tzR4ng&Jk\r  avgt  100  256.579 ± 0.747  ns/op
StringContains.stringContains     http  http=tzR4ng&Jk\r  avgt  100    9.862 ± 0.008  ns/op

Benchmark result is saved to http_16_0_7.csv
