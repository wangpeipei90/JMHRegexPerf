# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 1+Q
8{Gvy}{bKC^]-k]V@3?^{w1:%~)BhttpKAIPe!ra&;bX@	6=k*^yt3x~JN^n)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 514.914 ns/op
# Warmup Iteration   2: 522.601 ns/op
# Warmup Iteration   3: 521.543 ns/op
# Warmup Iteration   4: 455.738 ns/op
# Warmup Iteration   5: 443.034 ns/op
Iteration   1: 447.413 ns/op
Iteration   2: 442.709 ns/op
Iteration   3: 443.511 ns/op
Iteration   4: 449.846 ns/op
Iteration   5: 443.872 ns/op
Iteration   6: 450.500 ns/op
Iteration   7: 442.660 ns/op
Iteration   8: 443.592 ns/op
Iteration   9: 452.812 ns/op
Iteration  10: 442.979 ns/op
Iteration  11: 443.231 ns/op
Iteration  12: 455.694 ns/op
Iteration  13: 442.902 ns/op
Iteration  14: 442.951 ns/op
Iteration  15: 448.076 ns/op
Iteration  16: 446.871 ns/op
Iteration  17: 446.819 ns/op
Iteration  18: 445.072 ns/op
Iteration  19: 442.522 ns/op
Iteration  20: 445.589 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 513.994 ns/op
# Warmup Iteration   2: 517.769 ns/op
# Warmup Iteration   3: 517.735 ns/op
# Warmup Iteration   4: 450.755 ns/op
# Warmup Iteration   5: 442.248 ns/op
Iteration   1: 447.910 ns/op
Iteration   2: 446.187 ns/op
Iteration   3: 446.084 ns/op
Iteration   4: 448.082 ns/op
Iteration   5: 442.679 ns/op
Iteration   6: 449.721 ns/op
Iteration   7: 442.092 ns/op
Iteration   8: 442.645 ns/op
Iteration   9: 452.057 ns/op
Iteration  10: 442.303 ns/op
Iteration  11: 442.483 ns/op
Iteration  12: 454.862 ns/op
Iteration  13: 442.227 ns/op
Iteration  14: 443.099 ns/op
Iteration  15: 445.894 ns/op
Iteration  16: 442.796 ns/op
Iteration  17: 444.972 ns/op
Iteration  18: 442.201 ns/op
Iteration  19: 442.440 ns/op
Iteration  20: 445.128 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 517.900 ns/op
# Warmup Iteration   2: 529.254 ns/op
# Warmup Iteration   3: 530.359 ns/op
# Warmup Iteration   4: 470.269 ns/op
# Warmup Iteration   5: 454.283 ns/op
Iteration   1: 461.587 ns/op
Iteration   2: 454.912 ns/op
Iteration   3: 455.155 ns/op
Iteration   4: 460.567 ns/op
Iteration   5: 454.652 ns/op
Iteration   6: 458.881 ns/op
Iteration   7: 462.032 ns/op
Iteration   8: 458.881 ns/op
Iteration   9: 467.579 ns/op
Iteration  10: 455.353 ns/op
Iteration  11: 454.749 ns/op
Iteration  12: 468.154 ns/op
Iteration  13: 456.467 ns/op
Iteration  14: 455.797 ns/op
Iteration  15: 457.718 ns/op
Iteration  16: 455.165 ns/op
Iteration  17: 455.091 ns/op
Iteration  18: 456.831 ns/op
Iteration  19: 454.946 ns/op
Iteration  20: 455.581 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 515.641 ns/op
# Warmup Iteration   2: 529.750 ns/op
# Warmup Iteration   3: 530.627 ns/op
# Warmup Iteration   4: 468.530 ns/op
# Warmup Iteration   5: 455.168 ns/op
Iteration   1: 459.386 ns/op
Iteration   2: 454.918 ns/op
Iteration   3: 455.093 ns/op
Iteration   4: 462.487 ns/op
Iteration   5: 457.618 ns/op
Iteration   6: 460.878 ns/op
Iteration   7: 465.370 ns/op
Iteration   8: 461.207 ns/op
Iteration   9: 470.536 ns/op
Iteration  10: 454.873 ns/op
Iteration  11: 455.069 ns/op
Iteration  12: 468.258 ns/op
Iteration  13: 455.087 ns/op
Iteration  14: 455.103 ns/op
Iteration  15: 457.931 ns/op
Iteration  16: 457.382 ns/op
Iteration  17: 457.358 ns/op
Iteration  18: 459.009 ns/op
Iteration  19: 455.092 ns/op
Iteration  20: 454.961 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 512.126 ns/op
# Warmup Iteration   2: 518.650 ns/op
# Warmup Iteration   3: 518.575 ns/op
# Warmup Iteration   4: 452.461 ns/op
# Warmup Iteration   5: 442.688 ns/op
Iteration   1: 446.540 ns/op
Iteration   2: 442.651 ns/op
Iteration   3: 442.538 ns/op
Iteration   4: 448.081 ns/op
Iteration   5: 442.622 ns/op
Iteration   6: 449.983 ns/op
Iteration   7: 442.429 ns/op
Iteration   8: 442.584 ns/op
Iteration   9: 452.621 ns/op
Iteration  10: 442.662 ns/op
Iteration  11: 442.908 ns/op
Iteration  12: 454.873 ns/op
Iteration  13: 442.525 ns/op
Iteration  14: 442.629 ns/op
Iteration  15: 444.601 ns/op
Iteration  16: 442.592 ns/op
Iteration  17: 442.635 ns/op
Iteration  18: 444.434 ns/op
Iteration  19: 442.429 ns/op
Iteration  20: 444.913 ns/op


Result "benchmark.StringContains.regexMatches":
  450.604 ±(99.9%) 2.559 ns/op [Average]
  (min, avg, max) = (442.092, 450.604, 470.536), stdev = 7.544
  CI (99.9%): [448.046, 453.163] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 1+Q
8{Gvy}{bKC^]-k]V@3?^{w1:%~)BhttpKAIPe!ra&;bX@	6=k*^yt3x~JN^n)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.684 ns/op
# Warmup Iteration   2: 14.900 ns/op
# Warmup Iteration   3: 14.749 ns/op
# Warmup Iteration   4: 14.768 ns/op
# Warmup Iteration   5: 14.758 ns/op
Iteration   1: 14.810 ns/op
Iteration   2: 14.756 ns/op
Iteration   3: 14.781 ns/op
Iteration   4: 14.794 ns/op
Iteration   5: 14.793 ns/op
Iteration   6: 14.787 ns/op
Iteration   7: 14.793 ns/op
Iteration   8: 14.775 ns/op
Iteration   9: 14.737 ns/op
Iteration  10: 14.797 ns/op
Iteration  11: 14.805 ns/op
Iteration  12: 14.787 ns/op
Iteration  13: 14.771 ns/op
Iteration  14: 14.789 ns/op
Iteration  15: 14.788 ns/op
Iteration  16: 14.801 ns/op
Iteration  17: 14.797 ns/op
Iteration  18: 14.765 ns/op
Iteration  19: 14.805 ns/op
Iteration  20: 14.802 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.679 ns/op
# Warmup Iteration   2: 14.712 ns/op
# Warmup Iteration   3: 14.777 ns/op
# Warmup Iteration   4: 14.751 ns/op
# Warmup Iteration   5: 14.745 ns/op
Iteration   1: 14.745 ns/op
Iteration   2: 14.725 ns/op
Iteration   3: 14.749 ns/op
Iteration   4: 14.719 ns/op
Iteration   5: 14.713 ns/op
Iteration   6: 14.700 ns/op
Iteration   7: 14.700 ns/op
Iteration   8: 14.699 ns/op
Iteration   9: 14.704 ns/op
Iteration  10: 14.717 ns/op
Iteration  11: 14.694 ns/op
Iteration  12: 14.758 ns/op
Iteration  13: 14.762 ns/op
Iteration  14: 14.755 ns/op
Iteration  15: 14.767 ns/op
Iteration  16: 14.775 ns/op
Iteration  17: 14.806 ns/op
Iteration  18: 14.818 ns/op
Iteration  19: 14.750 ns/op
Iteration  20: 14.804 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.657 ns/op
# Warmup Iteration   2: 14.844 ns/op
# Warmup Iteration   3: 14.827 ns/op
# Warmup Iteration   4: 14.779 ns/op
# Warmup Iteration   5: 14.853 ns/op
Iteration   1: 14.866 ns/op
Iteration   2: 14.843 ns/op
Iteration   3: 14.856 ns/op
Iteration   4: 14.798 ns/op
Iteration   5: 14.786 ns/op
Iteration   6: 14.814 ns/op
Iteration   7: 14.834 ns/op
Iteration   8: 14.817 ns/op
Iteration   9: 14.813 ns/op
Iteration  10: 14.877 ns/op
Iteration  11: 14.782 ns/op
Iteration  12: 14.801 ns/op
Iteration  13: 14.792 ns/op
Iteration  14: 14.782 ns/op
Iteration  15: 14.827 ns/op
Iteration  16: 14.865 ns/op
Iteration  17: 14.807 ns/op
Iteration  18: 14.832 ns/op
Iteration  19: 14.798 ns/op
Iteration  20: 14.808 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.723 ns/op
# Warmup Iteration   2: 14.889 ns/op
# Warmup Iteration   3: 14.323 ns/op
# Warmup Iteration   4: 14.328 ns/op
# Warmup Iteration   5: 14.331 ns/op
Iteration   1: 14.329 ns/op
Iteration   2: 14.322 ns/op
Iteration   3: 14.300 ns/op
Iteration   4: 14.316 ns/op
Iteration   5: 14.326 ns/op
Iteration   6: 14.336 ns/op
Iteration   7: 14.326 ns/op
Iteration   8: 14.324 ns/op
Iteration   9: 14.309 ns/op
Iteration  10: 14.316 ns/op
Iteration  11: 14.319 ns/op
Iteration  12: 14.314 ns/op
Iteration  13: 14.331 ns/op
Iteration  14: 14.324 ns/op
Iteration  15: 14.319 ns/op
Iteration  16: 14.286 ns/op
Iteration  17: 14.304 ns/op
Iteration  18: 14.306 ns/op
Iteration  19: 14.294 ns/op
Iteration  20: 14.299 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.662 ns/op
# Warmup Iteration   2: 14.722 ns/op
# Warmup Iteration   3: 14.372 ns/op
# Warmup Iteration   4: 14.385 ns/op
# Warmup Iteration   5: 14.374 ns/op
Iteration   1: 14.379 ns/op
Iteration   2: 14.398 ns/op
Iteration   3: 14.370 ns/op
Iteration   4: 14.401 ns/op
Iteration   5: 14.364 ns/op
Iteration   6: 14.371 ns/op
Iteration   7: 14.365 ns/op
Iteration   8: 14.372 ns/op
Iteration   9: 14.375 ns/op
Iteration  10: 14.392 ns/op
Iteration  11: 14.375 ns/op
Iteration  12: 14.394 ns/op
Iteration  13: 14.378 ns/op
Iteration  14: 14.392 ns/op
Iteration  15: 14.396 ns/op
Iteration  16: 14.375 ns/op
Iteration  17: 14.397 ns/op
Iteration  18: 14.397 ns/op
Iteration  19: 14.384 ns/op
Iteration  20: 14.393 ns/op


Result "benchmark.StringContains.stringContains":
  14.610 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (14.286, 14.610, 14.877), stdev = 0.217
  CI (99.9%): [14.536, 14.683] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  1+Q
8{Gvy}{bKC^]-k]V@3?^{w1:%~)BhttpKAIPe!ra&;bX@	6=k*^yt3x~JN^n  avgt  100  450.604 ± 2.559  ns/op
StringContains.stringContains     http  1+Q
8{Gvy}{bKC^]-k]V@3?^{w1:%~)BhttpKAIPe!ra&;bX@	6=k*^yt3x~JN^n  avgt  100   14.610 ± 0.074  ns/op

Benchmark result is saved to http_64_0.5_8.csv
