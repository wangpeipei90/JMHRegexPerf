# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ktawVZrThttpNrN])

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 252.346 ns/op
# Warmup Iteration   2: 187.198 ns/op
# Warmup Iteration   3: 151.290 ns/op
# Warmup Iteration   4: 151.733 ns/op
# Warmup Iteration   5: 152.614 ns/op
Iteration   1: 154.967 ns/op
Iteration   2: 153.138 ns/op
Iteration   3: 150.976 ns/op
Iteration   4: 150.344 ns/op
Iteration   5: 150.296 ns/op
Iteration   6: 150.177 ns/op
Iteration   7: 150.249 ns/op
Iteration   8: 150.253 ns/op
Iteration   9: 150.256 ns/op
Iteration  10: 150.310 ns/op
Iteration  11: 149.868 ns/op
Iteration  12: 150.443 ns/op
Iteration  13: 149.928 ns/op
Iteration  14: 150.465 ns/op
Iteration  15: 149.964 ns/op
Iteration  16: 150.853 ns/op
Iteration  17: 149.846 ns/op
Iteration  18: 150.414 ns/op
Iteration  19: 151.010 ns/op
Iteration  20: 150.814 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 268.410 ns/op
# Warmup Iteration   2: 218.203 ns/op
# Warmup Iteration   3: 191.262 ns/op
# Warmup Iteration   4: 191.906 ns/op
# Warmup Iteration   5: 192.705 ns/op
Iteration   1: 190.595 ns/op
Iteration   2: 192.207 ns/op
Iteration   3: 194.665 ns/op
Iteration   4: 190.207 ns/op
Iteration   5: 190.244 ns/op
Iteration   6: 190.068 ns/op
Iteration   7: 189.300 ns/op
Iteration   8: 190.224 ns/op
Iteration   9: 190.076 ns/op
Iteration  10: 190.069 ns/op
Iteration  11: 190.157 ns/op
Iteration  12: 189.195 ns/op
Iteration  13: 190.109 ns/op
Iteration  14: 190.748 ns/op
Iteration  15: 189.680 ns/op
Iteration  16: 189.569 ns/op
Iteration  17: 191.165 ns/op
Iteration  18: 189.203 ns/op
Iteration  19: 189.681 ns/op
Iteration  20: 189.603 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 255.875 ns/op
# Warmup Iteration   2: 203.836 ns/op
# Warmup Iteration   3: 182.621 ns/op
# Warmup Iteration   4: 183.510 ns/op
# Warmup Iteration   5: 184.083 ns/op
Iteration   1: 184.937 ns/op
Iteration   2: 186.168 ns/op
Iteration   3: 180.960 ns/op
Iteration   4: 181.881 ns/op
Iteration   5: 181.755 ns/op
Iteration   6: 181.783 ns/op
Iteration   7: 181.840 ns/op
Iteration   8: 181.885 ns/op
Iteration   9: 182.309 ns/op
Iteration  10: 181.036 ns/op
Iteration  11: 182.001 ns/op
Iteration  12: 181.960 ns/op
Iteration  13: 182.062 ns/op
Iteration  14: 181.928 ns/op
Iteration  15: 181.802 ns/op
Iteration  16: 181.581 ns/op
Iteration  17: 181.116 ns/op
Iteration  18: 181.577 ns/op
Iteration  19: 181.653 ns/op
Iteration  20: 181.781 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 269.246 ns/op
# Warmup Iteration   2: 219.764 ns/op
# Warmup Iteration   3: 194.807 ns/op
# Warmup Iteration   4: 194.953 ns/op
# Warmup Iteration   5: 195.744 ns/op
Iteration   1: 192.416 ns/op
Iteration   2: 196.605 ns/op
Iteration   3: 197.880 ns/op
Iteration   4: 193.939 ns/op
Iteration   5: 193.300 ns/op
Iteration   6: 192.376 ns/op
Iteration   7: 193.296 ns/op
Iteration   8: 194.176 ns/op
Iteration   9: 193.261 ns/op
Iteration  10: 193.245 ns/op
Iteration  11: 192.445 ns/op
Iteration  12: 193.342 ns/op
Iteration  13: 193.145 ns/op
Iteration  14: 193.345 ns/op
Iteration  15: 192.770 ns/op
Iteration  16: 193.423 ns/op
Iteration  17: 192.242 ns/op
Iteration  18: 192.800 ns/op
Iteration  19: 192.808 ns/op
Iteration  20: 193.073 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 268.968 ns/op
# Warmup Iteration   2: 219.811 ns/op
# Warmup Iteration   3: 193.786 ns/op
# Warmup Iteration   4: 195.395 ns/op
# Warmup Iteration   5: 195.270 ns/op
Iteration   1: 191.961 ns/op
Iteration   2: 196.290 ns/op
Iteration   3: 197.130 ns/op
Iteration   4: 192.772 ns/op
Iteration   5: 192.917 ns/op
Iteration   6: 191.991 ns/op
Iteration   7: 192.589 ns/op
Iteration   8: 192.811 ns/op
Iteration   9: 192.905 ns/op
Iteration  10: 193.471 ns/op
Iteration  11: 191.734 ns/op
Iteration  12: 193.773 ns/op
Iteration  13: 193.652 ns/op
Iteration  14: 193.170 ns/op
Iteration  15: 193.842 ns/op
Iteration  16: 193.869 ns/op
Iteration  17: 192.020 ns/op
Iteration  18: 192.578 ns/op
Iteration  19: 193.037 ns/op
Iteration  20: 192.851 ns/op


Result "benchmark.StringContains.regexMatches":
  181.986 ±(99.9%) 5.527 ns/op [Average]
  (min, avg, max) = (149.846, 181.986, 197.880), stdev = 16.295
  CI (99.9%): [176.459, 187.513] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ktawVZrThttpNrN])

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.862 ns/op
# Warmup Iteration   4: 9.857 ns/op
# Warmup Iteration   5: 9.845 ns/op
Iteration   1: 9.873 ns/op
Iteration   2: 9.854 ns/op
Iteration   3: 9.849 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.851 ns/op
Iteration   7: 9.850 ns/op
Iteration   8: 9.854 ns/op
Iteration   9: 9.856 ns/op
Iteration  10: 9.877 ns/op
Iteration  11: 9.856 ns/op
Iteration  12: 9.866 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.860 ns/op
Iteration  15: 9.845 ns/op
Iteration  16: 9.862 ns/op
Iteration  17: 9.853 ns/op
Iteration  18: 9.850 ns/op
Iteration  19: 9.852 ns/op
Iteration  20: 9.852 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.461 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.868 ns/op
# Warmup Iteration   4: 9.890 ns/op
# Warmup Iteration   5: 9.864 ns/op
Iteration   1: 9.890 ns/op
Iteration   2: 9.887 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.872 ns/op
Iteration   5: 9.869 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.875 ns/op
Iteration   8: 9.859 ns/op
Iteration   9: 9.872 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.853 ns/op
Iteration  12: 9.851 ns/op
Iteration  13: 9.860 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.874 ns/op
Iteration  16: 9.861 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.865 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.878 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.481 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.939 ns/op
# Warmup Iteration   4: 9.929 ns/op
# Warmup Iteration   5: 9.934 ns/op
Iteration   1: 9.945 ns/op
Iteration   2: 9.944 ns/op
Iteration   3: 9.948 ns/op
Iteration   4: 9.936 ns/op
Iteration   5: 9.926 ns/op
Iteration   6: 9.933 ns/op
Iteration   7: 9.926 ns/op
Iteration   8: 9.935 ns/op
Iteration   9: 9.942 ns/op
Iteration  10: 9.916 ns/op
Iteration  11: 9.946 ns/op
Iteration  12: 9.949 ns/op
Iteration  13: 9.937 ns/op
Iteration  14: 9.945 ns/op
Iteration  15: 9.942 ns/op
Iteration  16: 9.937 ns/op
Iteration  17: 9.950 ns/op
Iteration  18: 9.951 ns/op
Iteration  19: 9.960 ns/op
Iteration  20: 9.926 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.456 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.879 ns/op
# Warmup Iteration   4: 9.869 ns/op
# Warmup Iteration   5: 9.880 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.867 ns/op
Iteration   3: 9.877 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.875 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.880 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.885 ns/op
Iteration  10: 9.883 ns/op
Iteration  11: 9.887 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.882 ns/op
Iteration  16: 9.874 ns/op
Iteration  17: 9.873 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.874 ns/op
Iteration  20: 9.890 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.472 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.794 ns/op
# Warmup Iteration   4: 9.778 ns/op
# Warmup Iteration   5: 9.774 ns/op
Iteration   1: 9.787 ns/op
Iteration   2: 9.784 ns/op
Iteration   3: 9.780 ns/op
Iteration   4: 9.793 ns/op
Iteration   5: 9.785 ns/op
Iteration   6: 9.772 ns/op
Iteration   7: 9.790 ns/op
Iteration   8: 9.784 ns/op
Iteration   9: 9.781 ns/op
Iteration  10: 9.788 ns/op
Iteration  11: 9.788 ns/op
Iteration  12: 9.779 ns/op
Iteration  13: 9.798 ns/op
Iteration  14: 9.796 ns/op
Iteration  15: 9.788 ns/op
Iteration  16: 9.793 ns/op
Iteration  17: 9.792 ns/op
Iteration  18: 9.800 ns/op
Iteration  19: 9.777 ns/op
Iteration  20: 9.793 ns/op


Result "benchmark.StringContains.stringContains":
  9.866 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (9.772, 9.866, 9.960), stdev = 0.050
  CI (99.9%): [9.849, 9.883] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ktawVZrThttpNrN]  avgt  100  181.986 ± 5.527  ns/op
StringContains.stringContains     http  ktawVZrThttpNrN]  avgt  100    9.866 ± 0.017  ns/op

Benchmark result is saved to http_16_0.5_12.csv
