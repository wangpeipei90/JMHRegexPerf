# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ;_5}&v~n\aJt_{ZDc2U9YYQY#m3rU<ki?`0*37G#afX&D/[.Wl)d~Z	XJ=bboGmU|xUZqK2jqI?(m5BU	=i7yXYvj
S/~'^KHZ"\N<#g&$h6
ELkJ
\R.,&,u,!an)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 896.816 ns/op
# Warmup Iteration   2: 905.644 ns/op
# Warmup Iteration   3: 895.153 ns/op
# Warmup Iteration   4: 895.050 ns/op
# Warmup Iteration   5: 894.557 ns/op
Iteration   1: 852.244 ns/op
Iteration   2: 816.993 ns/op
Iteration   3: 816.820 ns/op
Iteration   4: 817.096 ns/op
Iteration   5: 828.689 ns/op
Iteration   6: 816.805 ns/op
Iteration   7: 816.701 ns/op
Iteration   8: 816.935 ns/op
Iteration   9: 816.886 ns/op
Iteration  10: 827.783 ns/op
Iteration  11: 816.690 ns/op
Iteration  12: 816.860 ns/op
Iteration  13: 816.905 ns/op
Iteration  14: 816.826 ns/op
Iteration  15: 831.369 ns/op
Iteration  16: 816.753 ns/op
Iteration  17: 816.725 ns/op
Iteration  18: 816.821 ns/op
Iteration  19: 816.819 ns/op
Iteration  20: 835.442 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 887.431 ns/op
# Warmup Iteration   2: 892.060 ns/op
# Warmup Iteration   3: 890.551 ns/op
# Warmup Iteration   4: 889.920 ns/op
# Warmup Iteration   5: 890.014 ns/op
Iteration   1: 846.552 ns/op
Iteration   2: 815.480 ns/op
Iteration   3: 815.239 ns/op
Iteration   4: 815.246 ns/op
Iteration   5: 823.259 ns/op
Iteration   6: 815.320 ns/op
Iteration   7: 815.314 ns/op
Iteration   8: 816.569 ns/op
Iteration   9: 814.969 ns/op
Iteration  10: 824.823 ns/op
Iteration  11: 815.180 ns/op
Iteration  12: 815.101 ns/op
Iteration  13: 814.984 ns/op
Iteration  14: 815.001 ns/op
Iteration  15: 829.093 ns/op
Iteration  16: 816.369 ns/op
Iteration  17: 815.908 ns/op
Iteration  18: 815.649 ns/op
Iteration  19: 816.354 ns/op
Iteration  20: 833.309 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 891.817 ns/op
# Warmup Iteration   2: 891.333 ns/op
# Warmup Iteration   3: 890.307 ns/op
# Warmup Iteration   4: 889.368 ns/op
# Warmup Iteration   5: 889.300 ns/op
Iteration   1: 849.543 ns/op
Iteration   2: 816.711 ns/op
Iteration   3: 816.647 ns/op
Iteration   4: 816.721 ns/op
Iteration   5: 824.300 ns/op
Iteration   6: 814.671 ns/op
Iteration   7: 814.895 ns/op
Iteration   8: 814.735 ns/op
Iteration   9: 814.708 ns/op
Iteration  10: 825.046 ns/op
Iteration  11: 814.290 ns/op
Iteration  12: 814.754 ns/op
Iteration  13: 814.657 ns/op
Iteration  14: 814.703 ns/op
Iteration  15: 828.172 ns/op
Iteration  16: 814.779 ns/op
Iteration  17: 814.769 ns/op
Iteration  18: 814.781 ns/op
Iteration  19: 814.874 ns/op
Iteration  20: 832.860 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 895.220 ns/op
# Warmup Iteration   2: 890.955 ns/op
# Warmup Iteration   3: 889.108 ns/op
# Warmup Iteration   4: 888.883 ns/op
# Warmup Iteration   5: 888.624 ns/op
Iteration   1: 847.425 ns/op
Iteration   2: 814.907 ns/op
Iteration   3: 815.208 ns/op
Iteration   4: 815.025 ns/op
Iteration   5: 824.113 ns/op
Iteration   6: 816.426 ns/op
Iteration   7: 815.087 ns/op
Iteration   8: 815.184 ns/op
Iteration   9: 814.946 ns/op
Iteration  10: 824.734 ns/op
Iteration  11: 814.704 ns/op
Iteration  12: 814.876 ns/op
Iteration  13: 814.995 ns/op
Iteration  14: 815.029 ns/op
Iteration  15: 828.308 ns/op
Iteration  16: 814.953 ns/op
Iteration  17: 814.766 ns/op
Iteration  18: 814.839 ns/op
Iteration  19: 814.836 ns/op
Iteration  20: 832.297 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 898.772 ns/op
# Warmup Iteration   2: 891.286 ns/op
# Warmup Iteration   3: 891.672 ns/op
# Warmup Iteration   4: 888.743 ns/op
# Warmup Iteration   5: 889.169 ns/op
Iteration   1: 852.855 ns/op
Iteration   2: 819.492 ns/op
Iteration   3: 816.089 ns/op
Iteration   4: 815.734 ns/op
Iteration   5: 823.395 ns/op
Iteration   6: 820.124 ns/op
Iteration   7: 817.965 ns/op
Iteration   8: 815.323 ns/op
Iteration   9: 815.117 ns/op
Iteration  10: 826.873 ns/op
Iteration  11: 814.912 ns/op
Iteration  12: 815.198 ns/op
Iteration  13: 815.044 ns/op
Iteration  14: 815.199 ns/op
Iteration  15: 828.921 ns/op
Iteration  16: 815.228 ns/op
Iteration  17: 815.180 ns/op
Iteration  18: 815.236 ns/op
Iteration  19: 815.289 ns/op
Iteration  20: 832.749 ns/op


Result "benchmark.StringContains.regexMatches":
  819.931 ±(99.9%) 2.961 ns/op [Average]
  (min, avg, max) = (814.290, 819.931, 852.855), stdev = 8.731
  CI (99.9%): [816.970, 822.892] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ;_5}&v~n\aJt_{ZDc2U9YYQY#m3rU<ki?`0*37G#afX&D/[.Wl)d~Z	XJ=bboGmU|xUZqK2jqI?(m5BU	=i7yXYvj
S/~'^KHZ"\N<#g&$h6
ELkJ
\R.,&,u,!an)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.246 ns/op
# Warmup Iteration   2: 24.624 ns/op
# Warmup Iteration   3: 24.578 ns/op
# Warmup Iteration   4: 24.595 ns/op
# Warmup Iteration   5: 24.581 ns/op
Iteration   1: 24.575 ns/op
Iteration   2: 24.567 ns/op
Iteration   3: 24.572 ns/op
Iteration   4: 24.577 ns/op
Iteration   5: 24.567 ns/op
Iteration   6: 24.570 ns/op
Iteration   7: 24.567 ns/op
Iteration   8: 24.570 ns/op
Iteration   9: 24.569 ns/op
Iteration  10: 24.581 ns/op
Iteration  11: 24.570 ns/op
Iteration  12: 24.568 ns/op
Iteration  13: 24.576 ns/op
Iteration  14: 24.586 ns/op
Iteration  15: 24.582 ns/op
Iteration  16: 24.578 ns/op
Iteration  17: 24.569 ns/op
Iteration  18: 24.581 ns/op
Iteration  19: 24.572 ns/op
Iteration  20: 24.570 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.498 ns/op
# Warmup Iteration   2: 24.670 ns/op
# Warmup Iteration   3: 25.323 ns/op
# Warmup Iteration   4: 25.318 ns/op
# Warmup Iteration   5: 25.317 ns/op
Iteration   1: 25.346 ns/op
Iteration   2: 25.347 ns/op
Iteration   3: 25.345 ns/op
Iteration   4: 25.324 ns/op
Iteration   5: 25.331 ns/op
Iteration   6: 25.345 ns/op
Iteration   7: 25.319 ns/op
Iteration   8: 25.360 ns/op
Iteration   9: 25.344 ns/op
Iteration  10: 25.332 ns/op
Iteration  11: 25.342 ns/op
Iteration  12: 25.320 ns/op
Iteration  13: 25.348 ns/op
Iteration  14: 25.331 ns/op
Iteration  15: 25.336 ns/op
Iteration  16: 25.345 ns/op
Iteration  17: 25.322 ns/op
Iteration  18: 25.340 ns/op
Iteration  19: 25.341 ns/op
Iteration  20: 25.390 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.492 ns/op
# Warmup Iteration   2: 24.630 ns/op
# Warmup Iteration   3: 24.599 ns/op
# Warmup Iteration   4: 24.583 ns/op
# Warmup Iteration   5: 24.579 ns/op
Iteration   1: 24.580 ns/op
Iteration   2: 24.573 ns/op
Iteration   3: 24.581 ns/op
Iteration   4: 24.585 ns/op
Iteration   5: 24.603 ns/op
Iteration   6: 24.595 ns/op
Iteration   7: 24.602 ns/op
Iteration   8: 24.594 ns/op
Iteration   9: 24.573 ns/op
Iteration  10: 24.570 ns/op
Iteration  11: 24.573 ns/op
Iteration  12: 24.583 ns/op
Iteration  13: 24.570 ns/op
Iteration  14: 24.587 ns/op
Iteration  15: 24.583 ns/op
Iteration  16: 24.601 ns/op
Iteration  17: 24.604 ns/op
Iteration  18: 24.582 ns/op
Iteration  19: 24.594 ns/op
Iteration  20: 24.574 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.458 ns/op
# Warmup Iteration   2: 24.629 ns/op
# Warmup Iteration   3: 25.356 ns/op
# Warmup Iteration   4: 25.370 ns/op
# Warmup Iteration   5: 25.373 ns/op
Iteration   1: 25.364 ns/op
Iteration   2: 25.375 ns/op
Iteration   3: 25.359 ns/op
Iteration   4: 25.378 ns/op
Iteration   5: 25.364 ns/op
Iteration   6: 25.360 ns/op
Iteration   7: 25.364 ns/op
Iteration   8: 25.368 ns/op
Iteration   9: 25.374 ns/op
Iteration  10: 25.367 ns/op
Iteration  11: 25.383 ns/op
Iteration  12: 25.362 ns/op
Iteration  13: 25.377 ns/op
Iteration  14: 25.351 ns/op
Iteration  15: 25.342 ns/op
Iteration  16: 25.372 ns/op
Iteration  17: 25.387 ns/op
Iteration  18: 25.403 ns/op
Iteration  19: 25.387 ns/op
Iteration  20: 25.405 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.504 ns/op
# Warmup Iteration   2: 24.666 ns/op
# Warmup Iteration   3: 24.573 ns/op
# Warmup Iteration   4: 24.571 ns/op
# Warmup Iteration   5: 24.583 ns/op
Iteration   1: 24.577 ns/op
Iteration   2: 24.586 ns/op
Iteration   3: 24.580 ns/op
Iteration   4: 24.572 ns/op
Iteration   5: 24.573 ns/op
Iteration   6: 24.574 ns/op
Iteration   7: 24.572 ns/op
Iteration   8: 24.615 ns/op
Iteration   9: 24.580 ns/op
Iteration  10: 24.573 ns/op
Iteration  11: 24.573 ns/op
Iteration  12: 24.575 ns/op
Iteration  13: 24.587 ns/op
Iteration  14: 24.571 ns/op
Iteration  15: 24.572 ns/op
Iteration  16: 24.572 ns/op
Iteration  17: 24.572 ns/op
Iteration  18: 24.578 ns/op
Iteration  19: 24.578 ns/op
Iteration  20: 24.576 ns/op


Result "benchmark.StringContains.stringContains":
  24.890 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (24.567, 24.890, 25.405), stdev = 0.383
  CI (99.9%): [24.760, 25.020] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ;_5}&v~n\aJt_{ZDc2U9YYQY#m3rU<ki?`0*37G#afX&D/[.Wl)d~Z	XJ=bboGmU|xUZqK2jqI?(m5BU	=i7yXYvj
S/~'^KHZ"\N<#g&$h6
ELkJ
\R.,&,u,!an  avgt  100  819.931 ± 2.961  ns/op
StringContains.stringContains     http  ;_5}&v~n\aJt_{ZDc2U9YYQY#m3rU<ki?`0*37G#afX&D/[.Wl)d~Z	XJ=bboGmU|xUZqK2jqI?(m5BU	=i7yXYvj
S/~'^KHZ"\N<#g&$h6
ELkJ
\R.,&,u,!an  avgt  100   24.890 ± 0.130  ns/op

Benchmark result is saved to http_128_1_1.csv
