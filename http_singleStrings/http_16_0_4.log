# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpWF2?-})R\)l@)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 335.568 ns/op
# Warmup Iteration   2: 339.554 ns/op
# Warmup Iteration   3: 257.649 ns/op
# Warmup Iteration   4: 256.262 ns/op
# Warmup Iteration   5: 256.820 ns/op
Iteration   1: 253.692 ns/op
Iteration   2: 258.471 ns/op
Iteration   3: 257.135 ns/op
Iteration   4: 255.759 ns/op
Iteration   5: 261.128 ns/op
Iteration   6: 253.943 ns/op
Iteration   7: 254.909 ns/op
Iteration   8: 255.011 ns/op
Iteration   9: 253.714 ns/op
Iteration  10: 255.331 ns/op
Iteration  11: 253.323 ns/op
Iteration  12: 255.057 ns/op
Iteration  13: 254.912 ns/op
Iteration  14: 253.871 ns/op
Iteration  15: 254.654 ns/op
Iteration  16: 253.527 ns/op
Iteration  17: 254.869 ns/op
Iteration  18: 255.167 ns/op
Iteration  19: 253.594 ns/op
Iteration  20: 256.046 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 332.657 ns/op
# Warmup Iteration   2: 333.326 ns/op
# Warmup Iteration   3: 251.220 ns/op
# Warmup Iteration   4: 253.055 ns/op
# Warmup Iteration   5: 254.275 ns/op
Iteration   1: 251.238 ns/op
Iteration   2: 255.178 ns/op
Iteration   3: 256.443 ns/op
Iteration   4: 250.912 ns/op
Iteration   5: 258.135 ns/op
Iteration   6: 251.050 ns/op
Iteration   7: 252.172 ns/op
Iteration   8: 252.009 ns/op
Iteration   9: 251.013 ns/op
Iteration  10: 252.301 ns/op
Iteration  11: 258.017 ns/op
Iteration  12: 252.023 ns/op
Iteration  13: 252.087 ns/op
Iteration  14: 250.846 ns/op
Iteration  15: 253.602 ns/op
Iteration  16: 252.718 ns/op
Iteration  17: 250.961 ns/op
Iteration  18: 253.434 ns/op
Iteration  19: 250.923 ns/op
Iteration  20: 252.299 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 338.756 ns/op
# Warmup Iteration   2: 336.604 ns/op
# Warmup Iteration   3: 257.762 ns/op
# Warmup Iteration   4: 258.770 ns/op
# Warmup Iteration   5: 257.488 ns/op
Iteration   1: 254.509 ns/op
Iteration   2: 259.110 ns/op
Iteration   3: 260.180 ns/op
Iteration   4: 254.501 ns/op
Iteration   5: 262.694 ns/op
Iteration   6: 255.771 ns/op
Iteration   7: 256.133 ns/op
Iteration   8: 255.746 ns/op
Iteration   9: 254.680 ns/op
Iteration  10: 255.962 ns/op
Iteration  11: 254.589 ns/op
Iteration  12: 255.549 ns/op
Iteration  13: 255.994 ns/op
Iteration  14: 254.587 ns/op
Iteration  15: 255.820 ns/op
Iteration  16: 254.767 ns/op
Iteration  17: 255.885 ns/op
Iteration  18: 256.065 ns/op
Iteration  19: 254.445 ns/op
Iteration  20: 256.910 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 337.923 ns/op
# Warmup Iteration   2: 344.212 ns/op
# Warmup Iteration   3: 259.568 ns/op
# Warmup Iteration   4: 258.400 ns/op
# Warmup Iteration   5: 259.998 ns/op
Iteration   1: 255.219 ns/op
Iteration   2: 259.655 ns/op
Iteration   3: 257.454 ns/op
Iteration   4: 258.822 ns/op
Iteration   5: 262.659 ns/op
Iteration   6: 255.015 ns/op
Iteration   7: 256.723 ns/op
Iteration   8: 256.311 ns/op
Iteration   9: 255.053 ns/op
Iteration  10: 256.147 ns/op
Iteration  11: 255.084 ns/op
Iteration  12: 257.144 ns/op
Iteration  13: 256.502 ns/op
Iteration  14: 254.860 ns/op
Iteration  15: 256.409 ns/op
Iteration  16: 254.999 ns/op
Iteration  17: 256.531 ns/op
Iteration  18: 257.211 ns/op
Iteration  19: 255.768 ns/op
Iteration  20: 258.377 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 332.856 ns/op
# Warmup Iteration   2: 337.437 ns/op
# Warmup Iteration   3: 256.154 ns/op
# Warmup Iteration   4: 256.589 ns/op
# Warmup Iteration   5: 257.166 ns/op
Iteration   1: 253.985 ns/op
Iteration   2: 258.195 ns/op
Iteration   3: 259.541 ns/op
Iteration   4: 253.941 ns/op
Iteration   5: 261.067 ns/op
Iteration   6: 254.067 ns/op
Iteration   7: 255.913 ns/op
Iteration   8: 255.410 ns/op
Iteration   9: 253.880 ns/op
Iteration  10: 255.152 ns/op
Iteration  11: 254.105 ns/op
Iteration  12: 256.433 ns/op
Iteration  13: 255.328 ns/op
Iteration  14: 254.345 ns/op
Iteration  15: 257.098 ns/op
Iteration  16: 254.450 ns/op
Iteration  17: 255.393 ns/op
Iteration  18: 255.360 ns/op
Iteration  19: 254.103 ns/op
Iteration  20: 255.836 ns/op


Result "benchmark.StringContains.regexMatches":
  255.349 ±(99.9%) 0.822 ns/op [Average]
  (min, avg, max) = (250.846, 255.349, 262.694), stdev = 2.424
  CI (99.9%): [254.527, 256.171] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpWF2?-})R\)l@)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.224 ns/op
# Warmup Iteration   2: 9.719 ns/op
# Warmup Iteration   3: 9.982 ns/op
# Warmup Iteration   4: 9.986 ns/op
# Warmup Iteration   5: 9.974 ns/op
Iteration   1: 9.965 ns/op
Iteration   2: 9.973 ns/op
Iteration   3: 9.991 ns/op
Iteration   4: 9.978 ns/op
Iteration   5: 9.975 ns/op
Iteration   6: 9.974 ns/op
Iteration   7: 9.976 ns/op
Iteration   8: 9.970 ns/op
Iteration   9: 9.970 ns/op
Iteration  10: 9.963 ns/op
Iteration  11: 9.968 ns/op
Iteration  12: 9.972 ns/op
Iteration  13: 9.963 ns/op
Iteration  14: 9.975 ns/op
Iteration  15: 9.968 ns/op
Iteration  16: 9.955 ns/op
Iteration  17: 9.977 ns/op
Iteration  18: 9.994 ns/op
Iteration  19: 9.974 ns/op
Iteration  20: 9.985 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.506 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.854 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.860 ns/op
Iteration   1: 9.874 ns/op
Iteration   2: 9.877 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.875 ns/op
Iteration   6: 9.847 ns/op
Iteration   7: 9.848 ns/op
Iteration   8: 9.863 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.847 ns/op
Iteration  12: 9.843 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.862 ns/op
Iteration  15: 9.879 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.852 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.885 ns/op
Iteration  20: 9.883 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.510 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.951 ns/op
# Warmup Iteration   4: 9.979 ns/op
# Warmup Iteration   5: 9.947 ns/op
Iteration   1: 9.943 ns/op
Iteration   2: 9.965 ns/op
Iteration   3: 9.933 ns/op
Iteration   4: 9.965 ns/op
Iteration   5: 9.942 ns/op
Iteration   6: 9.938 ns/op
Iteration   7: 9.942 ns/op
Iteration   8: 9.960 ns/op
Iteration   9: 9.936 ns/op
Iteration  10: 9.944 ns/op
Iteration  11: 9.967 ns/op
Iteration  12: 9.950 ns/op
Iteration  13: 9.953 ns/op
Iteration  14: 9.953 ns/op
Iteration  15: 9.954 ns/op
Iteration  16: 9.959 ns/op
Iteration  17: 9.944 ns/op
Iteration  18: 9.942 ns/op
Iteration  19: 9.934 ns/op
Iteration  20: 9.965 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.222 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.889 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.879 ns/op
Iteration   1: 9.876 ns/op
Iteration   2: 9.860 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.884 ns/op
Iteration   6: 9.846 ns/op
Iteration   7: 9.858 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.874 ns/op
Iteration  10: 9.843 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.872 ns/op
Iteration  13: 9.860 ns/op
Iteration  14: 9.858 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.864 ns/op
Iteration  17: 9.868 ns/op
Iteration  18: 9.838 ns/op
Iteration  19: 9.850 ns/op
Iteration  20: 9.862 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.501 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.880 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.887 ns/op
Iteration   1: 9.849 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.851 ns/op
Iteration   5: 9.873 ns/op
Iteration   6: 9.861 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.877 ns/op
Iteration   9: 9.843 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.880 ns/op
Iteration  12: 9.859 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.850 ns/op
Iteration  15: 9.862 ns/op
Iteration  16: 9.872 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.855 ns/op
Iteration  19: 9.858 ns/op
Iteration  20: 9.886 ns/op


Result "benchmark.StringContains.stringContains":
  9.902 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (9.838, 9.902, 9.994), stdev = 0.051
  CI (99.9%): [9.885, 9.919] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpWF2?-})R\)l@  avgt  100  255.349 ± 0.822  ns/op
StringContains.stringContains     http  httpWF2?-})R\)l@  avgt  100    9.902 ± 0.017  ns/op

Benchmark result is saved to http_16_0_4.csv
