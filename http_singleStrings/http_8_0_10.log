# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http~	7)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 261.132 ns/op
# Warmup Iteration   2: 204.782 ns/op
# Warmup Iteration   3: 182.082 ns/op
# Warmup Iteration   4: 182.067 ns/op
# Warmup Iteration   5: 182.547 ns/op
Iteration   1: 183.951 ns/op
Iteration   2: 184.713 ns/op
Iteration   3: 179.392 ns/op
Iteration   4: 180.284 ns/op
Iteration   5: 180.944 ns/op
Iteration   6: 181.448 ns/op
Iteration   7: 180.790 ns/op
Iteration   8: 181.447 ns/op
Iteration   9: 180.521 ns/op
Iteration  10: 179.369 ns/op
Iteration  11: 181.313 ns/op
Iteration  12: 180.523 ns/op
Iteration  13: 180.432 ns/op
Iteration  14: 180.146 ns/op
Iteration  15: 179.714 ns/op
Iteration  16: 179.940 ns/op
Iteration  17: 179.368 ns/op
Iteration  18: 179.968 ns/op
Iteration  19: 179.838 ns/op
Iteration  20: 180.171 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 248.163 ns/op
# Warmup Iteration   2: 191.171 ns/op
# Warmup Iteration   3: 174.189 ns/op
# Warmup Iteration   4: 174.811 ns/op
# Warmup Iteration   5: 175.608 ns/op
Iteration   1: 176.588 ns/op
Iteration   2: 177.577 ns/op
Iteration   3: 173.375 ns/op
Iteration   4: 173.298 ns/op
Iteration   5: 173.359 ns/op
Iteration   6: 172.552 ns/op
Iteration   7: 173.292 ns/op
Iteration   8: 173.494 ns/op
Iteration   9: 173.340 ns/op
Iteration  10: 173.199 ns/op
Iteration  11: 174.091 ns/op
Iteration  12: 173.445 ns/op
Iteration  13: 174.022 ns/op
Iteration  14: 173.009 ns/op
Iteration  15: 172.538 ns/op
Iteration  16: 172.906 ns/op
Iteration  17: 172.863 ns/op
Iteration  18: 172.876 ns/op
Iteration  19: 172.905 ns/op
Iteration  20: 173.158 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 246.528 ns/op
# Warmup Iteration   2: 190.189 ns/op
# Warmup Iteration   3: 173.696 ns/op
# Warmup Iteration   4: 173.789 ns/op
# Warmup Iteration   5: 173.831 ns/op
Iteration   1: 174.874 ns/op
Iteration   2: 175.723 ns/op
Iteration   3: 171.716 ns/op
Iteration   4: 171.621 ns/op
Iteration   5: 171.578 ns/op
Iteration   6: 170.827 ns/op
Iteration   7: 171.759 ns/op
Iteration   8: 171.464 ns/op
Iteration   9: 171.687 ns/op
Iteration  10: 171.617 ns/op
Iteration  11: 171.621 ns/op
Iteration  12: 172.081 ns/op
Iteration  13: 172.765 ns/op
Iteration  14: 171.483 ns/op
Iteration  15: 173.111 ns/op
Iteration  16: 171.914 ns/op
Iteration  17: 170.864 ns/op
Iteration  18: 171.386 ns/op
Iteration  19: 171.436 ns/op
Iteration  20: 171.425 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 241.909 ns/op
# Warmup Iteration   2: 188.528 ns/op
# Warmup Iteration   3: 158.053 ns/op
# Warmup Iteration   4: 158.885 ns/op
# Warmup Iteration   5: 159.056 ns/op
Iteration   1: 159.893 ns/op
Iteration   2: 160.874 ns/op
Iteration   3: 157.264 ns/op
Iteration   4: 157.168 ns/op
Iteration   5: 157.074 ns/op
Iteration   6: 157.096 ns/op
Iteration   7: 157.170 ns/op
Iteration   8: 157.216 ns/op
Iteration   9: 157.160 ns/op
Iteration  10: 157.100 ns/op
Iteration  11: 157.152 ns/op
Iteration  12: 160.457 ns/op
Iteration  13: 158.638 ns/op
Iteration  14: 158.683 ns/op
Iteration  15: 158.749 ns/op
Iteration  16: 158.729 ns/op
Iteration  17: 158.657 ns/op
Iteration  18: 158.930 ns/op
Iteration  19: 158.646 ns/op
Iteration  20: 158.808 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 225.969 ns/op
# Warmup Iteration   2: 160.729 ns/op
# Warmup Iteration   3: 139.264 ns/op
# Warmup Iteration   4: 138.103 ns/op
# Warmup Iteration   5: 138.763 ns/op
Iteration   1: 139.455 ns/op
Iteration   2: 136.338 ns/op
Iteration   3: 136.427 ns/op
Iteration   4: 136.193 ns/op
Iteration   5: 136.709 ns/op
Iteration   6: 136.846 ns/op
Iteration   7: 137.787 ns/op
Iteration   8: 136.293 ns/op
Iteration   9: 136.322 ns/op
Iteration  10: 135.841 ns/op
Iteration  11: 135.884 ns/op
Iteration  12: 136.254 ns/op
Iteration  13: 135.916 ns/op
Iteration  14: 136.009 ns/op
Iteration  15: 135.866 ns/op
Iteration  16: 136.802 ns/op
Iteration  17: 136.195 ns/op
Iteration  18: 135.992 ns/op
Iteration  19: 136.404 ns/op
Iteration  20: 136.002 ns/op


Result "benchmark.StringContains.regexMatches":
  164.221 ±(99.9%) 5.353 ns/op [Average]
  (min, avg, max) = (135.841, 164.221, 184.713), stdev = 15.783
  CI (99.9%): [158.868, 169.574] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http~	7)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.079 ns/op
# Warmup Iteration   2: 10.474 ns/op
# Warmup Iteration   3: 9.938 ns/op
# Warmup Iteration   4: 9.937 ns/op
# Warmup Iteration   5: 9.907 ns/op
Iteration   1: 9.928 ns/op
Iteration   2: 9.913 ns/op
Iteration   3: 9.913 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.933 ns/op
Iteration   6: 9.915 ns/op
Iteration   7: 9.932 ns/op
Iteration   8: 9.937 ns/op
Iteration   9: 9.922 ns/op
Iteration  10: 9.906 ns/op
Iteration  11: 9.918 ns/op
Iteration  12: 9.920 ns/op
Iteration  13: 9.921 ns/op
Iteration  14: 9.913 ns/op
Iteration  15: 9.923 ns/op
Iteration  16: 9.917 ns/op
Iteration  17: 9.930 ns/op
Iteration  18: 9.918 ns/op
Iteration  19: 9.921 ns/op
Iteration  20: 9.930 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.552 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.924 ns/op
# Warmup Iteration   4: 9.917 ns/op
# Warmup Iteration   5: 9.915 ns/op
Iteration   1: 9.907 ns/op
Iteration   2: 9.905 ns/op
Iteration   3: 9.929 ns/op
Iteration   4: 9.907 ns/op
Iteration   5: 9.904 ns/op
Iteration   6: 9.917 ns/op
Iteration   7: 9.906 ns/op
Iteration   8: 9.901 ns/op
Iteration   9: 9.910 ns/op
Iteration  10: 9.912 ns/op
Iteration  11: 9.919 ns/op
Iteration  12: 9.928 ns/op
Iteration  13: 9.921 ns/op
Iteration  14: 9.913 ns/op
Iteration  15: 9.919 ns/op
Iteration  16: 9.915 ns/op
Iteration  17: 9.920 ns/op
Iteration  18: 9.914 ns/op
Iteration  19: 9.916 ns/op
Iteration  20: 9.919 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.499 ns/op
# Warmup Iteration   2: 10.478 ns/op
# Warmup Iteration   3: 9.880 ns/op
# Warmup Iteration   4: 9.899 ns/op
# Warmup Iteration   5: 9.889 ns/op
Iteration   1: 9.896 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.906 ns/op
Iteration   4: 9.896 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.889 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.904 ns/op
Iteration   9: 9.893 ns/op
Iteration  10: 9.891 ns/op
Iteration  11: 9.889 ns/op
Iteration  12: 9.902 ns/op
Iteration  13: 9.899 ns/op
Iteration  14: 9.911 ns/op
Iteration  15: 9.888 ns/op
Iteration  16: 9.897 ns/op
Iteration  17: 9.905 ns/op
Iteration  18: 9.896 ns/op
Iteration  19: 9.889 ns/op
Iteration  20: 9.881 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.044 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.886 ns/op
# Warmup Iteration   4: 9.869 ns/op
# Warmup Iteration   5: 9.886 ns/op
Iteration   1: 9.858 ns/op
Iteration   2: 9.877 ns/op
Iteration   3: 9.867 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.868 ns/op
Iteration   6: 9.851 ns/op
Iteration   7: 9.863 ns/op
Iteration   8: 9.869 ns/op
Iteration   9: 9.862 ns/op
Iteration  10: 9.880 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.857 ns/op
Iteration  15: 9.888 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.879 ns/op
Iteration  19: 9.890 ns/op
Iteration  20: 9.881 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.040 ns/op
# Warmup Iteration   2: 10.459 ns/op
# Warmup Iteration   3: 9.900 ns/op
# Warmup Iteration   4: 9.884 ns/op
# Warmup Iteration   5: 9.899 ns/op
Iteration   1: 9.895 ns/op
Iteration   2: 9.895 ns/op
Iteration   3: 9.899 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.899 ns/op
Iteration   6: 9.886 ns/op
Iteration   7: 9.896 ns/op
Iteration   8: 9.885 ns/op
Iteration   9: 9.881 ns/op
Iteration  10: 9.885 ns/op
Iteration  11: 9.908 ns/op
Iteration  12: 9.906 ns/op
Iteration  13: 9.896 ns/op
Iteration  14: 9.895 ns/op
Iteration  15: 9.905 ns/op
Iteration  16: 9.893 ns/op
Iteration  17: 9.902 ns/op
Iteration  18: 9.906 ns/op
Iteration  19: 9.925 ns/op
Iteration  20: 9.894 ns/op


Result "benchmark.StringContains.stringContains":
  9.899 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.851, 9.899, 9.937), stdev = 0.020
  CI (99.9%): [9.893, 9.906] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http~	7  avgt  100  164.221 ± 5.353  ns/op
StringContains.stringContains     http  http~	7  avgt  100    9.899 ± 0.007  ns/op

Benchmark result is saved to http_8_0_10.csv
