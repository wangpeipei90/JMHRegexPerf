# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpl5g2$bs=[Veq\c!U`K+=[?4S	O!;MuT>JtIaIl5e>1@:LF#8R=QPsS7hZk!\clE)"]wv7X&z5NYxBloL;6mFmr)hi3@Ri?@QXFZ~Qp[;0}X2_a'Zi*{D.d)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1516.541 ns/op
# Warmup Iteration   2: 1478.287 ns/op
# Warmup Iteration   3: 1533.302 ns/op
# Warmup Iteration   4: 1532.564 ns/op
# Warmup Iteration   5: 1532.748 ns/op
Iteration   1: 1532.385 ns/op
Iteration   2: 1532.459 ns/op
Iteration   3: 1530.419 ns/op
Iteration   4: 1531.643 ns/op
Iteration   5: 1476.075 ns/op
Iteration   6: 1452.432 ns/op
Iteration   7: 1452.693 ns/op
Iteration   8: 1452.898 ns/op
Iteration   9: 1452.283 ns/op
Iteration  10: 1452.734 ns/op
Iteration  11: 1452.528 ns/op
Iteration  12: 1452.146 ns/op
Iteration  13: 1465.849 ns/op
Iteration  14: 1452.780 ns/op
Iteration  15: 1452.293 ns/op
Iteration  16: 1452.237 ns/op
Iteration  17: 1452.181 ns/op
Iteration  18: 1451.991 ns/op
Iteration  19: 1451.914 ns/op
Iteration  20: 1452.490 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1580.462 ns/op
# Warmup Iteration   2: 1482.496 ns/op
# Warmup Iteration   3: 1631.504 ns/op
# Warmup Iteration   4: 1631.252 ns/op
# Warmup Iteration   5: 1630.781 ns/op
Iteration   1: 1630.660 ns/op
Iteration   2: 1630.397 ns/op
Iteration   3: 1630.714 ns/op
Iteration   4: 1630.624 ns/op
Iteration   5: 1624.293 ns/op
Iteration   6: 1556.109 ns/op
Iteration   7: 1555.231 ns/op
Iteration   8: 1555.414 ns/op
Iteration   9: 1555.534 ns/op
Iteration  10: 1555.278 ns/op
Iteration  11: 1556.168 ns/op
Iteration  12: 1556.028 ns/op
Iteration  13: 1556.382 ns/op
Iteration  14: 1571.423 ns/op
Iteration  15: 1555.259 ns/op
Iteration  16: 1555.986 ns/op
Iteration  17: 1555.356 ns/op
Iteration  18: 1555.250 ns/op
Iteration  19: 1555.299 ns/op
Iteration  20: 1561.092 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1571.524 ns/op
# Warmup Iteration   2: 1482.732 ns/op
# Warmup Iteration   3: 1629.054 ns/op
# Warmup Iteration   4: 1628.596 ns/op
# Warmup Iteration   5: 1628.109 ns/op
Iteration   1: 1629.690 ns/op
Iteration   2: 1629.741 ns/op
Iteration   3: 1629.591 ns/op
Iteration   4: 1630.475 ns/op
Iteration   5: 1616.025 ns/op
Iteration   6: 1552.501 ns/op
Iteration   7: 1552.816 ns/op
Iteration   8: 1552.181 ns/op
Iteration   9: 1550.225 ns/op
Iteration  10: 1552.238 ns/op
Iteration  11: 1553.097 ns/op
Iteration  12: 1552.525 ns/op
Iteration  13: 1552.546 ns/op
Iteration  14: 1566.413 ns/op
Iteration  15: 1550.262 ns/op
Iteration  16: 1550.095 ns/op
Iteration  17: 1550.659 ns/op
Iteration  18: 1550.056 ns/op
Iteration  19: 1550.702 ns/op
Iteration  20: 1553.269 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1539.098 ns/op
# Warmup Iteration   2: 1483.899 ns/op
# Warmup Iteration   3: 1622.854 ns/op
# Warmup Iteration   4: 1622.896 ns/op
# Warmup Iteration   5: 1622.654 ns/op
Iteration   1: 1622.852 ns/op
Iteration   2: 1622.574 ns/op
Iteration   3: 1622.294 ns/op
Iteration   4: 1622.401 ns/op
Iteration   5: 1599.062 ns/op
Iteration   6: 1547.319 ns/op
Iteration   7: 1546.703 ns/op
Iteration   8: 1546.860 ns/op
Iteration   9: 1546.717 ns/op
Iteration  10: 1546.716 ns/op
Iteration  11: 1544.708 ns/op
Iteration  12: 1544.968 ns/op
Iteration  13: 1547.019 ns/op
Iteration  14: 1562.284 ns/op
Iteration  15: 1546.598 ns/op
Iteration  16: 1546.283 ns/op
Iteration  17: 1546.148 ns/op
Iteration  18: 1544.937 ns/op
Iteration  19: 1544.643 ns/op
Iteration  20: 1544.905 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1546.804 ns/op
# Warmup Iteration   2: 1475.407 ns/op
# Warmup Iteration   3: 1626.045 ns/op
# Warmup Iteration   4: 1626.357 ns/op
# Warmup Iteration   5: 1626.061 ns/op
Iteration   1: 1625.661 ns/op
Iteration   2: 1625.068 ns/op
Iteration   3: 1625.282 ns/op
Iteration   4: 1626.784 ns/op
Iteration   5: 1613.380 ns/op
Iteration   6: 1552.150 ns/op
Iteration   7: 1550.916 ns/op
Iteration   8: 1551.528 ns/op
Iteration   9: 1551.652 ns/op
Iteration  10: 1550.782 ns/op
Iteration  11: 1551.802 ns/op
Iteration  12: 1551.434 ns/op
Iteration  13: 1551.259 ns/op
Iteration  14: 1566.187 ns/op
Iteration  15: 1553.178 ns/op
Iteration  16: 1552.851 ns/op
Iteration  17: 1551.529 ns/op
Iteration  18: 1552.276 ns/op
Iteration  19: 1551.283 ns/op
Iteration  20: 1552.090 ns/op


Result "benchmark.StringContains.regexMatches":
  1550.331 ±(99.9%) 17.415 ns/op [Average]
  (min, avg, max) = (1451.914, 1550.331, 1630.714), stdev = 51.348
  CI (99.9%): [1532.916, 1567.746] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpl5g2$bs=[Veq\c!U`K+=[?4S	O!;MuT>JtIaIl5e>1@:LF#8R=QPsS7hZk!\clE)"]wv7X&z5NYxBloL;6mFmr)hi3@Ri?@QXFZ~Qp[;0}X2_a'Zi*{D.d)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.190 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.851 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.888 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.948 ns/op
Iteration   6: 9.904 ns/op
Iteration   7: 9.854 ns/op
Iteration   8: 9.848 ns/op
Iteration   9: 9.846 ns/op
Iteration  10: 9.844 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.864 ns/op
Iteration  14: 9.861 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.868 ns/op
Iteration  17: 9.860 ns/op
Iteration  18: 9.855 ns/op
Iteration  19: 9.845 ns/op
Iteration  20: 9.869 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.445 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.885 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.883 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.880 ns/op
Iteration   3: 9.874 ns/op
Iteration   4: 9.900 ns/op
Iteration   5: 9.879 ns/op
Iteration   6: 9.871 ns/op
Iteration   7: 9.878 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.881 ns/op
Iteration  10: 9.880 ns/op
Iteration  11: 9.878 ns/op
Iteration  12: 9.869 ns/op
Iteration  13: 9.892 ns/op
Iteration  14: 9.887 ns/op
Iteration  15: 9.878 ns/op
Iteration  16: 9.876 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.880 ns/op
Iteration  19: 9.874 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.482 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.856 ns/op
# Warmup Iteration   4: 9.855 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.833 ns/op
Iteration   2: 9.855 ns/op
Iteration   3: 9.845 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.853 ns/op
Iteration   6: 9.853 ns/op
Iteration   7: 9.852 ns/op
Iteration   8: 9.843 ns/op
Iteration   9: 9.836 ns/op
Iteration  10: 9.844 ns/op
Iteration  11: 9.850 ns/op
Iteration  12: 9.835 ns/op
Iteration  13: 9.841 ns/op
Iteration  14: 9.846 ns/op
Iteration  15: 9.831 ns/op
Iteration  16: 9.842 ns/op
Iteration  17: 9.848 ns/op
Iteration  18: 9.848 ns/op
Iteration  19: 9.841 ns/op
Iteration  20: 9.853 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.501 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.882 ns/op
# Warmup Iteration   4: 9.896 ns/op
# Warmup Iteration   5: 9.891 ns/op
Iteration   1: 9.916 ns/op
Iteration   2: 9.885 ns/op
Iteration   3: 9.873 ns/op
Iteration   4: 9.892 ns/op
Iteration   5: 9.884 ns/op
Iteration   6: 9.905 ns/op
Iteration   7: 9.891 ns/op
Iteration   8: 9.921 ns/op
Iteration   9: 9.909 ns/op
Iteration  10: 9.920 ns/op
Iteration  11: 9.899 ns/op
Iteration  12: 9.905 ns/op
Iteration  13: 9.881 ns/op
Iteration  14: 9.892 ns/op
Iteration  15: 9.912 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.901 ns/op
Iteration  18: 9.891 ns/op
Iteration  19: 9.905 ns/op
Iteration  20: 9.882 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.216 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.884 ns/op
# Warmup Iteration   4: 9.878 ns/op
# Warmup Iteration   5: 9.870 ns/op
Iteration   1: 9.867 ns/op
Iteration   2: 9.852 ns/op
Iteration   3: 9.867 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.852 ns/op
Iteration   7: 9.850 ns/op
Iteration   8: 9.862 ns/op
Iteration   9: 9.851 ns/op
Iteration  10: 9.857 ns/op
Iteration  11: 9.881 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.845 ns/op
Iteration  14: 9.841 ns/op
Iteration  15: 9.852 ns/op
Iteration  16: 9.854 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.858 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.870 ns/op


Result "benchmark.StringContains.stringContains":
  9.869 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (9.831, 9.869, 9.948), stdev = 0.023
  CI (99.9%): [9.861, 9.877] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpl5g2$bs=[Veq\c!U`K+=[?4S	O!;MuT>JtIaIl5e>1@:LF#8R=QPsS7hZk!\clE)"]wv7X&z5NYxBloL;6mFmr)hi3@Ri?@QXFZ~Qp[;0}X2_a'Zi*{D.d  avgt  100  1550.331 ± 17.415  ns/op
StringContains.stringContains     http  httpl5g2$bs=[Veq\c!U`K+=[?4S	O!;MuT>JtIaIl5e>1@:LF#8R=QPsS7hZk!\clE)"]wv7X&z5NYxBloL;6mFmr)hi3@Ri?@QXFZ~Qp[;0}X2_a'Zi*{D.d  avgt  100     9.869 ±  0.008  ns/op

Benchmark result is saved to http_128_0_5.csv
