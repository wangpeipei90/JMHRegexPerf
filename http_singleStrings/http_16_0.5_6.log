# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Lb+r+6Hhttp
(.y)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 272.122 ns/op
# Warmup Iteration   2: 218.054 ns/op
# Warmup Iteration   3: 182.085 ns/op
# Warmup Iteration   4: 182.889 ns/op
# Warmup Iteration   5: 183.585 ns/op
Iteration   1: 184.856 ns/op
Iteration   2: 182.491 ns/op
Iteration   3: 183.468 ns/op
Iteration   4: 180.977 ns/op
Iteration   5: 180.860 ns/op
Iteration   6: 180.759 ns/op
Iteration   7: 180.848 ns/op
Iteration   8: 181.022 ns/op
Iteration   9: 180.119 ns/op
Iteration  10: 181.029 ns/op
Iteration  11: 180.744 ns/op
Iteration  12: 180.947 ns/op
Iteration  13: 180.918 ns/op
Iteration  14: 180.549 ns/op
Iteration  15: 180.800 ns/op
Iteration  16: 180.569 ns/op
Iteration  17: 180.270 ns/op
Iteration  18: 180.681 ns/op
Iteration  19: 180.601 ns/op
Iteration  20: 180.706 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 266.471 ns/op
# Warmup Iteration   2: 219.822 ns/op
# Warmup Iteration   3: 193.704 ns/op
# Warmup Iteration   4: 194.330 ns/op
# Warmup Iteration   5: 195.266 ns/op
Iteration   1: 191.855 ns/op
Iteration   2: 196.077 ns/op
Iteration   3: 197.511 ns/op
Iteration   4: 192.801 ns/op
Iteration   5: 192.665 ns/op
Iteration   6: 191.775 ns/op
Iteration   7: 192.624 ns/op
Iteration   8: 193.795 ns/op
Iteration   9: 192.885 ns/op
Iteration  10: 192.780 ns/op
Iteration  11: 192.801 ns/op
Iteration  12: 191.810 ns/op
Iteration  13: 193.465 ns/op
Iteration  14: 193.395 ns/op
Iteration  15: 193.527 ns/op
Iteration  16: 192.674 ns/op
Iteration  17: 191.928 ns/op
Iteration  18: 192.594 ns/op
Iteration  19: 193.298 ns/op
Iteration  20: 192.935 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 256.630 ns/op
# Warmup Iteration   2: 199.931 ns/op
# Warmup Iteration   3: 165.448 ns/op
# Warmup Iteration   4: 166.079 ns/op
# Warmup Iteration   5: 166.678 ns/op
Iteration   1: 167.629 ns/op
Iteration   2: 168.764 ns/op
Iteration   3: 164.965 ns/op
Iteration   4: 164.760 ns/op
Iteration   5: 164.633 ns/op
Iteration   6: 164.608 ns/op
Iteration   7: 164.849 ns/op
Iteration   8: 164.851 ns/op
Iteration   9: 164.890 ns/op
Iteration  10: 165.035 ns/op
Iteration  11: 163.915 ns/op
Iteration  12: 165.309 ns/op
Iteration  13: 165.443 ns/op
Iteration  14: 164.210 ns/op
Iteration  15: 164.164 ns/op
Iteration  16: 164.113 ns/op
Iteration  17: 164.320 ns/op
Iteration  18: 164.723 ns/op
Iteration  19: 164.758 ns/op
Iteration  20: 164.480 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 255.725 ns/op
# Warmup Iteration   2: 204.922 ns/op
# Warmup Iteration   3: 183.214 ns/op
# Warmup Iteration   4: 184.385 ns/op
# Warmup Iteration   5: 184.479 ns/op
Iteration   1: 185.413 ns/op
Iteration   2: 186.275 ns/op
Iteration   3: 181.891 ns/op
Iteration   4: 182.201 ns/op
Iteration   5: 182.005 ns/op
Iteration   6: 182.017 ns/op
Iteration   7: 182.618 ns/op
Iteration   8: 182.476 ns/op
Iteration   9: 182.065 ns/op
Iteration  10: 182.338 ns/op
Iteration  11: 182.153 ns/op
Iteration  12: 183.061 ns/op
Iteration  13: 182.524 ns/op
Iteration  14: 182.055 ns/op
Iteration  15: 181.901 ns/op
Iteration  16: 181.357 ns/op
Iteration  17: 182.480 ns/op
Iteration  18: 182.719 ns/op
Iteration  19: 181.840 ns/op
Iteration  20: 182.108 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 258.573 ns/op
# Warmup Iteration   2: 204.644 ns/op
# Warmup Iteration   3: 182.358 ns/op
# Warmup Iteration   4: 182.441 ns/op
# Warmup Iteration   5: 184.650 ns/op
Iteration   1: 184.343 ns/op
Iteration   2: 185.209 ns/op
Iteration   3: 179.856 ns/op
Iteration   4: 181.055 ns/op
Iteration   5: 181.699 ns/op
Iteration   6: 180.846 ns/op
Iteration   7: 180.820 ns/op
Iteration   8: 180.744 ns/op
Iteration   9: 180.812 ns/op
Iteration  10: 179.841 ns/op
Iteration  11: 180.805 ns/op
Iteration  12: 181.063 ns/op
Iteration  13: 181.830 ns/op
Iteration  14: 181.323 ns/op
Iteration  15: 180.651 ns/op
Iteration  16: 180.603 ns/op
Iteration  17: 180.176 ns/op
Iteration  18: 180.599 ns/op
Iteration  19: 180.493 ns/op
Iteration  20: 180.701 ns/op


Result "benchmark.StringContains.regexMatches":
  180.618 ±(99.9%) 3.096 ns/op [Average]
  (min, avg, max) = (163.915, 180.618, 197.511), stdev = 9.128
  CI (99.9%): [177.522, 183.714] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Lb+r+6Hhttp
(.y)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.507 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.803 ns/op
# Warmup Iteration   4: 9.794 ns/op
# Warmup Iteration   5: 9.777 ns/op
Iteration   1: 9.786 ns/op
Iteration   2: 9.798 ns/op
Iteration   3: 9.808 ns/op
Iteration   4: 9.781 ns/op
Iteration   5: 9.779 ns/op
Iteration   6: 9.787 ns/op
Iteration   7: 9.784 ns/op
Iteration   8: 9.810 ns/op
Iteration   9: 9.791 ns/op
Iteration  10: 9.795 ns/op
Iteration  11: 9.791 ns/op
Iteration  12: 9.798 ns/op
Iteration  13: 9.795 ns/op
Iteration  14: 9.802 ns/op
Iteration  15: 9.808 ns/op
Iteration  16: 9.800 ns/op
Iteration  17: 9.782 ns/op
Iteration  18: 9.784 ns/op
Iteration  19: 9.781 ns/op
Iteration  20: 9.787 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.487 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.850 ns/op
# Warmup Iteration   4: 9.846 ns/op
# Warmup Iteration   5: 9.841 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.817 ns/op
Iteration   3: 9.833 ns/op
Iteration   4: 9.845 ns/op
Iteration   5: 9.829 ns/op
Iteration   6: 9.839 ns/op
Iteration   7: 9.852 ns/op
Iteration   8: 9.837 ns/op
Iteration   9: 9.830 ns/op
Iteration  10: 9.847 ns/op
Iteration  11: 9.843 ns/op
Iteration  12: 9.842 ns/op
Iteration  13: 9.855 ns/op
Iteration  14: 9.851 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.837 ns/op
Iteration  17: 9.851 ns/op
Iteration  18: 9.864 ns/op
Iteration  19: 9.845 ns/op
Iteration  20: 9.848 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.221 ns/op
# Warmup Iteration   2: 9.716 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.857 ns/op
# Warmup Iteration   5: 9.889 ns/op
Iteration   1: 9.895 ns/op
Iteration   2: 9.887 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.870 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.895 ns/op
Iteration   7: 9.871 ns/op
Iteration   8: 9.869 ns/op
Iteration   9: 9.885 ns/op
Iteration  10: 9.895 ns/op
Iteration  11: 9.892 ns/op
Iteration  12: 9.880 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.873 ns/op
Iteration  15: 9.872 ns/op
Iteration  16: 9.888 ns/op
Iteration  17: 9.885 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.881 ns/op
Iteration  20: 9.894 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.859 ns/op
# Warmup Iteration   4: 9.880 ns/op
# Warmup Iteration   5: 9.864 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.868 ns/op
Iteration   4: 9.844 ns/op
Iteration   5: 9.877 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.873 ns/op
Iteration   8: 9.861 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.860 ns/op
Iteration  12: 9.854 ns/op
Iteration  13: 9.846 ns/op
Iteration  14: 9.851 ns/op
Iteration  15: 9.856 ns/op
Iteration  16: 9.862 ns/op
Iteration  17: 9.848 ns/op
Iteration  18: 9.841 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.841 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.464 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.905 ns/op
# Warmup Iteration   4: 9.892 ns/op
# Warmup Iteration   5: 9.887 ns/op
Iteration   1: 9.893 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.871 ns/op
Iteration   4: 9.898 ns/op
Iteration   5: 9.892 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.882 ns/op
Iteration   8: 9.888 ns/op
Iteration   9: 9.893 ns/op
Iteration  10: 9.881 ns/op
Iteration  11: 9.864 ns/op
Iteration  12: 9.884 ns/op
Iteration  13: 9.859 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.885 ns/op
Iteration  18: 9.870 ns/op
Iteration  19: 9.864 ns/op
Iteration  20: 9.879 ns/op


Result "benchmark.StringContains.stringContains":
  9.851 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (9.779, 9.851, 9.898), stdev = 0.034
  CI (99.9%): [9.840, 9.863] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Lb+r+6Hhttp
(.y  avgt  100  180.618 ± 3.096  ns/op
StringContains.stringContains     http  Lb+r+6Hhttp
(.y  avgt  100    9.851 ± 0.012  ns/op

Benchmark result is saved to http_16_0.5_6.csv
