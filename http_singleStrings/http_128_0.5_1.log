# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ;A'X"5!Y<Sb$)gFFDWjTz<Y&Hr52N"r,0AW)gB*oI`YO&?3tT:<w`~`]OZ_LwchttpO'Wzew HE|#&c<19rJWS"4E~YFI~BO#ft)$q1/] eLe
yl$-N0wq<[OFot)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 826.214 ns/op
# Warmup Iteration   2: 855.846 ns/op
# Warmup Iteration   3: 854.165 ns/op
# Warmup Iteration   4: 853.956 ns/op
# Warmup Iteration   5: 852.700 ns/op
Iteration   1: 787.490 ns/op
Iteration   2: 774.813 ns/op
Iteration   3: 776.740 ns/op
Iteration   4: 776.558 ns/op
Iteration   5: 785.028 ns/op
Iteration   6: 776.326 ns/op
Iteration   7: 775.928 ns/op
Iteration   8: 775.847 ns/op
Iteration   9: 790.526 ns/op
Iteration  10: 775.387 ns/op
Iteration  11: 775.238 ns/op
Iteration  12: 775.804 ns/op
Iteration  13: 775.860 ns/op
Iteration  14: 791.434 ns/op
Iteration  15: 775.097 ns/op
Iteration  16: 775.531 ns/op
Iteration  17: 775.918 ns/op
Iteration  18: 776.242 ns/op
Iteration  19: 795.335 ns/op
Iteration  20: 775.160 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 817.690 ns/op
# Warmup Iteration   2: 848.473 ns/op
# Warmup Iteration   3: 852.337 ns/op
# Warmup Iteration   4: 851.633 ns/op
# Warmup Iteration   5: 852.019 ns/op
Iteration   1: 786.762 ns/op
Iteration   2: 777.283 ns/op
Iteration   3: 777.430 ns/op
Iteration   4: 777.046 ns/op
Iteration   5: 784.764 ns/op
Iteration   6: 777.198 ns/op
Iteration   7: 777.274 ns/op
Iteration   8: 777.323 ns/op
Iteration   9: 787.509 ns/op
Iteration  10: 781.441 ns/op
Iteration  11: 781.044 ns/op
Iteration  12: 777.287 ns/op
Iteration  13: 776.994 ns/op
Iteration  14: 789.861 ns/op
Iteration  15: 776.874 ns/op
Iteration  16: 776.680 ns/op
Iteration  17: 776.743 ns/op
Iteration  18: 777.406 ns/op
Iteration  19: 795.202 ns/op
Iteration  20: 777.379 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 819.031 ns/op
# Warmup Iteration   2: 846.247 ns/op
# Warmup Iteration   3: 854.688 ns/op
# Warmup Iteration   4: 854.306 ns/op
# Warmup Iteration   5: 854.156 ns/op
Iteration   1: 784.795 ns/op
Iteration   2: 775.270 ns/op
Iteration   3: 775.121 ns/op
Iteration   4: 775.091 ns/op
Iteration   5: 782.254 ns/op
Iteration   6: 774.958 ns/op
Iteration   7: 775.174 ns/op
Iteration   8: 775.348 ns/op
Iteration   9: 784.410 ns/op
Iteration  10: 775.182 ns/op
Iteration  11: 775.217 ns/op
Iteration  12: 774.978 ns/op
Iteration  13: 776.036 ns/op
Iteration  14: 789.276 ns/op
Iteration  15: 776.291 ns/op
Iteration  16: 775.746 ns/op
Iteration  17: 775.266 ns/op
Iteration  18: 780.117 ns/op
Iteration  19: 786.740 ns/op
Iteration  20: 775.029 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 825.958 ns/op
# Warmup Iteration   2: 848.392 ns/op
# Warmup Iteration   3: 852.044 ns/op
# Warmup Iteration   4: 852.121 ns/op
# Warmup Iteration   5: 852.158 ns/op
Iteration   1: 794.837 ns/op
Iteration   2: 783.710 ns/op
Iteration   3: 783.566 ns/op
Iteration   4: 783.578 ns/op
Iteration   5: 792.116 ns/op
Iteration   6: 777.261 ns/op
Iteration   7: 777.315 ns/op
Iteration   8: 777.411 ns/op
Iteration   9: 787.778 ns/op
Iteration  10: 776.635 ns/op
Iteration  11: 777.359 ns/op
Iteration  12: 777.242 ns/op
Iteration  13: 777.098 ns/op
Iteration  14: 790.922 ns/op
Iteration  15: 776.380 ns/op
Iteration  16: 776.265 ns/op
Iteration  17: 776.308 ns/op
Iteration  18: 776.621 ns/op
Iteration  19: 794.448 ns/op
Iteration  20: 776.405 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 811.306 ns/op
# Warmup Iteration   2: 809.955 ns/op
# Warmup Iteration   3: 901.847 ns/op
# Warmup Iteration   4: 901.514 ns/op
# Warmup Iteration   5: 901.596 ns/op
Iteration   1: 844.938 ns/op
Iteration   2: 828.577 ns/op
Iteration   3: 828.801 ns/op
Iteration   4: 828.349 ns/op
Iteration   5: 835.914 ns/op
Iteration   6: 828.742 ns/op
Iteration   7: 828.553 ns/op
Iteration   8: 828.905 ns/op
Iteration   9: 828.770 ns/op
Iteration  10: 837.928 ns/op
Iteration  11: 828.077 ns/op
Iteration  12: 828.342 ns/op
Iteration  13: 828.535 ns/op
Iteration  14: 828.664 ns/op
Iteration  15: 842.358 ns/op
Iteration  16: 828.392 ns/op
Iteration  17: 828.774 ns/op
Iteration  18: 828.815 ns/op
Iteration  19: 828.745 ns/op
Iteration  20: 845.626 ns/op


Result "benchmark.StringContains.regexMatches":
  790.271 ±(99.9%) 7.356 ns/op [Average]
  (min, avg, max) = (774.813, 790.271, 845.626), stdev = 21.690
  CI (99.9%): [782.915, 797.627] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ;A'X"5!Y<Sb$)gFFDWjTz<Y&Hr52N"r,0AW)gB*oI`YO&?3tT:<w`~`]OZ_LwchttpO'Wzew HE|#&c<19rJWS"4E~YFI~BO#ft)$q1/] eLe
yl$-N0wq<[OFot)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.099 ns/op
# Warmup Iteration   2: 19.388 ns/op
# Warmup Iteration   3: 18.685 ns/op
# Warmup Iteration   4: 18.690 ns/op
# Warmup Iteration   5: 18.681 ns/op
Iteration   1: 18.670 ns/op
Iteration   2: 18.678 ns/op
Iteration   3: 18.672 ns/op
Iteration   4: 18.678 ns/op
Iteration   5: 18.669 ns/op
Iteration   6: 18.681 ns/op
Iteration   7: 18.671 ns/op
Iteration   8: 18.685 ns/op
Iteration   9: 18.693 ns/op
Iteration  10: 18.681 ns/op
Iteration  11: 18.680 ns/op
Iteration  12: 18.679 ns/op
Iteration  13: 18.676 ns/op
Iteration  14: 18.657 ns/op
Iteration  15: 18.667 ns/op
Iteration  16: 18.680 ns/op
Iteration  17: 18.670 ns/op
Iteration  18: 18.671 ns/op
Iteration  19: 18.667 ns/op
Iteration  20: 18.704 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.075 ns/op
# Warmup Iteration   2: 19.363 ns/op
# Warmup Iteration   3: 18.723 ns/op
# Warmup Iteration   4: 18.729 ns/op
# Warmup Iteration   5: 18.701 ns/op
Iteration   1: 18.727 ns/op
Iteration   2: 18.719 ns/op
Iteration   3: 18.715 ns/op
Iteration   4: 18.711 ns/op
Iteration   5: 18.709 ns/op
Iteration   6: 18.704 ns/op
Iteration   7: 18.714 ns/op
Iteration   8: 18.712 ns/op
Iteration   9: 18.716 ns/op
Iteration  10: 18.723 ns/op
Iteration  11: 18.712 ns/op
Iteration  12: 18.724 ns/op
Iteration  13: 18.718 ns/op
Iteration  14: 18.711 ns/op
Iteration  15: 18.711 ns/op
Iteration  16: 18.691 ns/op
Iteration  17: 18.711 ns/op
Iteration  18: 18.711 ns/op
Iteration  19: 18.710 ns/op
Iteration  20: 18.705 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.099 ns/op
# Warmup Iteration   2: 19.388 ns/op
# Warmup Iteration   3: 18.691 ns/op
# Warmup Iteration   4: 18.679 ns/op
# Warmup Iteration   5: 18.682 ns/op
Iteration   1: 18.685 ns/op
Iteration   2: 18.685 ns/op
Iteration   3: 18.688 ns/op
Iteration   4: 18.679 ns/op
Iteration   5: 18.689 ns/op
Iteration   6: 18.683 ns/op
Iteration   7: 18.666 ns/op
Iteration   8: 18.734 ns/op
Iteration   9: 18.685 ns/op
Iteration  10: 18.684 ns/op
Iteration  11: 18.689 ns/op
Iteration  12: 18.687 ns/op
Iteration  13: 18.715 ns/op
Iteration  14: 18.693 ns/op
Iteration  15: 18.693 ns/op
Iteration  16: 18.682 ns/op
Iteration  17: 18.693 ns/op
Iteration  18: 18.698 ns/op
Iteration  19: 18.685 ns/op
Iteration  20: 18.692 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.078 ns/op
# Warmup Iteration   2: 19.522 ns/op
# Warmup Iteration   3: 18.716 ns/op
# Warmup Iteration   4: 18.693 ns/op
# Warmup Iteration   5: 18.681 ns/op
Iteration   1: 18.691 ns/op
Iteration   2: 18.699 ns/op
Iteration   3: 18.696 ns/op
Iteration   4: 18.699 ns/op
Iteration   5: 18.686 ns/op
Iteration   6: 18.704 ns/op
Iteration   7: 18.703 ns/op
Iteration   8: 18.689 ns/op
Iteration   9: 18.715 ns/op
Iteration  10: 18.703 ns/op
Iteration  11: 18.709 ns/op
Iteration  12: 18.794 ns/op
Iteration  13: 18.799 ns/op
Iteration  14: 18.798 ns/op
Iteration  15: 18.798 ns/op
Iteration  16: 18.800 ns/op
Iteration  17: 18.780 ns/op
Iteration  18: 18.800 ns/op
Iteration  19: 18.784 ns/op
Iteration  20: 18.799 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.111 ns/op
# Warmup Iteration   2: 19.292 ns/op
# Warmup Iteration   3: 18.693 ns/op
# Warmup Iteration   4: 18.705 ns/op
# Warmup Iteration   5: 18.712 ns/op
Iteration   1: 18.706 ns/op
Iteration   2: 18.706 ns/op
Iteration   3: 18.702 ns/op
Iteration   4: 18.694 ns/op
Iteration   5: 18.695 ns/op
Iteration   6: 18.687 ns/op
Iteration   7: 18.709 ns/op
Iteration   8: 18.746 ns/op
Iteration   9: 18.685 ns/op
Iteration  10: 18.702 ns/op
Iteration  11: 18.698 ns/op
Iteration  12: 18.693 ns/op
Iteration  13: 18.721 ns/op
Iteration  14: 18.704 ns/op
Iteration  15: 18.698 ns/op
Iteration  16: 18.713 ns/op
Iteration  17: 18.710 ns/op
Iteration  18: 18.696 ns/op
Iteration  19: 18.684 ns/op
Iteration  20: 18.695 ns/op


Result "benchmark.StringContains.stringContains":
  18.705 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (18.657, 18.705, 18.800), stdev = 0.033
  CI (99.9%): [18.694, 18.716] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ;A'X"5!Y<Sb$)gFFDWjTz<Y&Hr52N"r,0AW)gB*oI`YO&?3tT:<w`~`]OZ_LwchttpO'Wzew HE|#&c<19rJWS"4E~YFI~BO#ft)$q1/] eLe
yl$-N0wq<[OFot  avgt  100  790.271 ± 7.356  ns/op
StringContains.stringContains     http  ;A'X"5!Y<Sb$)gFFDWjTz<Y&Hr52N"r,0AW)gB*oI`YO&?3tT:<w`~`]OZ_LwchttpO'Wzew HE|#&c<19rJWS"4E~YFI~BO#ft)$q1/] eLe
yl$-N0wq<[OFot  avgt  100   18.705 ± 0.011  ns/op

Benchmark result is saved to http_128_0.5_1.csv
