# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 4ot1Kz~?GVt]4.Wn;]*Ih~[	`0u[*okk9vB#
|Zg&J";6uL[9dDa{
4Bb!6)W$3$@sWJ`Fx n'%<j146'9X:[%Sn+"D2httpi~(d/q1|IJyY
1M1F0{Va]t{##.Z)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 380.870 ns/op
# Warmup Iteration   2: 372.271 ns/op
# Warmup Iteration   3: 298.404 ns/op
# Warmup Iteration   4: 281.325 ns/op
# Warmup Iteration   5: 278.518 ns/op
Iteration   1: 282.468 ns/op
Iteration   2: 278.471 ns/op
Iteration   3: 283.659 ns/op
Iteration   4: 285.652 ns/op
Iteration   5: 278.405 ns/op
Iteration   6: 287.688 ns/op
Iteration   7: 278.393 ns/op
Iteration   8: 279.825 ns/op
Iteration   9: 278.427 ns/op
Iteration  10: 279.873 ns/op
Iteration  11: 280.251 ns/op
Iteration  12: 278.765 ns/op
Iteration  13: 280.492 ns/op
Iteration  14: 279.116 ns/op
Iteration  15: 280.736 ns/op
Iteration  16: 279.343 ns/op
Iteration  17: 282.272 ns/op
Iteration  18: 278.521 ns/op
Iteration  19: 280.671 ns/op
Iteration  20: 280.368 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 511.944 ns/op
# Warmup Iteration   2: 517.825 ns/op
# Warmup Iteration   3: 518.254 ns/op
# Warmup Iteration   4: 454.770 ns/op
# Warmup Iteration   5: 443.513 ns/op
Iteration   1: 447.737 ns/op
Iteration   2: 443.567 ns/op
Iteration   3: 443.630 ns/op
Iteration   4: 449.013 ns/op
Iteration   5: 443.487 ns/op
Iteration   6: 450.802 ns/op
Iteration   7: 443.570 ns/op
Iteration   8: 444.170 ns/op
Iteration   9: 453.121 ns/op
Iteration  10: 444.126 ns/op
Iteration  11: 444.288 ns/op
Iteration  12: 456.463 ns/op
Iteration  13: 444.341 ns/op
Iteration  14: 444.057 ns/op
Iteration  15: 445.657 ns/op
Iteration  16: 443.561 ns/op
Iteration  17: 443.717 ns/op
Iteration  18: 446.270 ns/op
Iteration  19: 444.222 ns/op
Iteration  20: 449.868 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 512.980 ns/op
# Warmup Iteration   2: 529.750 ns/op
# Warmup Iteration   3: 530.552 ns/op
# Warmup Iteration   4: 467.607 ns/op
# Warmup Iteration   5: 454.995 ns/op
Iteration   1: 459.101 ns/op
Iteration   2: 455.013 ns/op
Iteration   3: 454.892 ns/op
Iteration   4: 460.619 ns/op
Iteration   5: 454.874 ns/op
Iteration   6: 462.705 ns/op
Iteration   7: 454.953 ns/op
Iteration   8: 454.509 ns/op
Iteration   9: 464.920 ns/op
Iteration  10: 454.701 ns/op
Iteration  11: 455.084 ns/op
Iteration  12: 468.232 ns/op
Iteration  13: 456.407 ns/op
Iteration  14: 456.318 ns/op
Iteration  15: 458.740 ns/op
Iteration  16: 455.568 ns/op
Iteration  17: 455.280 ns/op
Iteration  18: 457.488 ns/op
Iteration  19: 454.428 ns/op
Iteration  20: 455.359 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 510.424 ns/op
# Warmup Iteration   2: 519.514 ns/op
# Warmup Iteration   3: 518.579 ns/op
# Warmup Iteration   4: 451.961 ns/op
# Warmup Iteration   5: 443.090 ns/op
Iteration   1: 447.867 ns/op
Iteration   2: 443.498 ns/op
Iteration   3: 442.464 ns/op
Iteration   4: 448.047 ns/op
Iteration   5: 442.597 ns/op
Iteration   6: 449.931 ns/op
Iteration   7: 442.555 ns/op
Iteration   8: 442.608 ns/op
Iteration   9: 452.008 ns/op
Iteration  10: 442.421 ns/op
Iteration  11: 442.398 ns/op
Iteration  12: 457.183 ns/op
Iteration  13: 442.159 ns/op
Iteration  14: 442.137 ns/op
Iteration  15: 444.717 ns/op
Iteration  16: 442.451 ns/op
Iteration  17: 442.571 ns/op
Iteration  18: 444.445 ns/op
Iteration  19: 442.364 ns/op
Iteration  20: 444.743 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 522.083 ns/op
# Warmup Iteration   2: 519.602 ns/op
# Warmup Iteration   3: 520.148 ns/op
# Warmup Iteration   4: 454.691 ns/op
# Warmup Iteration   5: 442.627 ns/op
Iteration   1: 447.436 ns/op
Iteration   2: 442.645 ns/op
Iteration   3: 442.744 ns/op
Iteration   4: 448.833 ns/op
Iteration   5: 442.606 ns/op
Iteration   6: 450.330 ns/op
Iteration   7: 442.557 ns/op
Iteration   8: 442.664 ns/op
Iteration   9: 452.617 ns/op
Iteration  10: 442.487 ns/op
Iteration  11: 442.603 ns/op
Iteration  12: 455.252 ns/op
Iteration  13: 442.600 ns/op
Iteration  14: 442.538 ns/op
Iteration  15: 445.039 ns/op
Iteration  16: 442.736 ns/op
Iteration  17: 442.682 ns/op
Iteration  18: 444.761 ns/op
Iteration  19: 442.665 ns/op
Iteration  20: 444.947 ns/op


Result "benchmark.StringContains.regexMatches":
  414.882 ±(99.9%) 22.962 ns/op [Average]
  (min, avg, max) = (278.393, 414.882, 468.232), stdev = 67.703
  CI (99.9%): [391.920, 437.843] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 4ot1Kz~?GVt]4.Wn;]*Ih~[	`0u[*okk9vB#
|Zg&J";6uL[9dDa{
4Bb!6)W$3$@sWJ`Fx n'%<j146'9X:[%Sn+"D2httpi~(d/q1|IJyY
1M1F0{Va]t{##.Z)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.611 ns/op
# Warmup Iteration   2: 23.898 ns/op
# Warmup Iteration   3: 24.098 ns/op
# Warmup Iteration   4: 24.104 ns/op
# Warmup Iteration   5: 24.125 ns/op
Iteration   1: 24.080 ns/op
Iteration   2: 24.059 ns/op
Iteration   3: 24.034 ns/op
Iteration   4: 24.041 ns/op
Iteration   5: 23.998 ns/op
Iteration   6: 23.981 ns/op
Iteration   7: 23.946 ns/op
Iteration   8: 24.054 ns/op
Iteration   9: 23.955 ns/op
Iteration  10: 24.095 ns/op
Iteration  11: 24.016 ns/op
Iteration  12: 24.061 ns/op
Iteration  13: 24.099 ns/op
Iteration  14: 24.075 ns/op
Iteration  15: 24.002 ns/op
Iteration  16: 23.999 ns/op
Iteration  17: 24.066 ns/op
Iteration  18: 24.116 ns/op
Iteration  19: 24.088 ns/op
Iteration  20: 24.131 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.632 ns/op
# Warmup Iteration   2: 23.868 ns/op
# Warmup Iteration   3: 23.209 ns/op
# Warmup Iteration   4: 23.209 ns/op
# Warmup Iteration   5: 23.230 ns/op
Iteration   1: 23.212 ns/op
Iteration   2: 23.203 ns/op
Iteration   3: 23.247 ns/op
Iteration   4: 23.201 ns/op
Iteration   5: 23.205 ns/op
Iteration   6: 23.201 ns/op
Iteration   7: 23.209 ns/op
Iteration   8: 23.259 ns/op
Iteration   9: 23.203 ns/op
Iteration  10: 23.189 ns/op
Iteration  11: 23.220 ns/op
Iteration  12: 23.210 ns/op
Iteration  13: 23.207 ns/op
Iteration  14: 23.189 ns/op
Iteration  15: 23.213 ns/op
Iteration  16: 23.221 ns/op
Iteration  17: 23.214 ns/op
Iteration  18: 23.207 ns/op
Iteration  19: 23.200 ns/op
Iteration  20: 23.249 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.729 ns/op
# Warmup Iteration   2: 23.855 ns/op
# Warmup Iteration   3: 23.214 ns/op
# Warmup Iteration   4: 23.224 ns/op
# Warmup Iteration   5: 23.213 ns/op
Iteration   1: 23.213 ns/op
Iteration   2: 23.214 ns/op
Iteration   3: 23.208 ns/op
Iteration   4: 23.215 ns/op
Iteration   5: 23.212 ns/op
Iteration   6: 23.226 ns/op
Iteration   7: 23.220 ns/op
Iteration   8: 23.251 ns/op
Iteration   9: 23.211 ns/op
Iteration  10: 23.205 ns/op
Iteration  11: 23.209 ns/op
Iteration  12: 23.208 ns/op
Iteration  13: 23.192 ns/op
Iteration  14: 23.208 ns/op
Iteration  15: 23.200 ns/op
Iteration  16: 23.205 ns/op
Iteration  17: 23.215 ns/op
Iteration  18: 23.197 ns/op
Iteration  19: 23.207 ns/op
Iteration  20: 23.204 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.579 ns/op
# Warmup Iteration   2: 23.760 ns/op
# Warmup Iteration   3: 23.641 ns/op
# Warmup Iteration   4: 23.712 ns/op
# Warmup Iteration   5: 23.733 ns/op
Iteration   1: 23.709 ns/op
Iteration   2: 23.710 ns/op
Iteration   3: 23.700 ns/op
Iteration   4: 23.647 ns/op
Iteration   5: 23.664 ns/op
Iteration   6: 23.662 ns/op
Iteration   7: 23.664 ns/op
Iteration   8: 23.654 ns/op
Iteration   9: 23.740 ns/op
Iteration  10: 23.699 ns/op
Iteration  11: 23.753 ns/op
Iteration  12: 23.700 ns/op
Iteration  13: 23.699 ns/op
Iteration  14: 23.721 ns/op
Iteration  15: 23.669 ns/op
Iteration  16: 23.698 ns/op
Iteration  17: 23.725 ns/op
Iteration  18: 23.720 ns/op
Iteration  19: 23.691 ns/op
Iteration  20: 23.658 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.585 ns/op
# Warmup Iteration   2: 23.892 ns/op
# Warmup Iteration   3: 23.221 ns/op
# Warmup Iteration   4: 23.227 ns/op
# Warmup Iteration   5: 23.255 ns/op
Iteration   1: 23.251 ns/op
Iteration   2: 23.265 ns/op
Iteration   3: 23.234 ns/op
Iteration   4: 23.217 ns/op
Iteration   5: 23.238 ns/op
Iteration   6: 23.236 ns/op
Iteration   7: 23.260 ns/op
Iteration   8: 23.267 ns/op
Iteration   9: 23.251 ns/op
Iteration  10: 23.253 ns/op
Iteration  11: 23.239 ns/op
Iteration  12: 23.237 ns/op
Iteration  13: 23.240 ns/op
Iteration  14: 23.258 ns/op
Iteration  15: 23.295 ns/op
Iteration  16: 23.244 ns/op
Iteration  17: 23.254 ns/op
Iteration  18: 23.251 ns/op
Iteration  19: 23.250 ns/op
Iteration  20: 23.256 ns/op


Result "benchmark.StringContains.stringContains":
  23.483 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (23.189, 23.483, 24.131), stdev = 0.338
  CI (99.9%): [23.368, 23.597] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score    Error  Units
StringContains.regexMatches       http  4ot1Kz~?GVt]4.Wn;]*Ih~[	`0u[*okk9vB#
|Zg&J";6uL[9dDa{
4Bb!6)W$3$@sWJ`Fx n'%<j146'9X:[%Sn+"D2httpi~(d/q1|IJyY
1M1F0{Va]t{##.Z  avgt  100  414.882 ± 22.962  ns/op
StringContains.stringContains     http  4ot1Kz~?GVt]4.Wn;]*Ih~[	`0u[*okk9vB#
|Zg&J";6uL[9dDa{
4Bb!6)W$3$@sWJ`Fx n'%<j146'9X:[%Sn+"D2httpi~(d/q1|IJyY
1M1F0{Va]t{##.Z  avgt  100   23.483 ±  0.115  ns/op

Benchmark result is saved to http_128_0.75_0.csv
