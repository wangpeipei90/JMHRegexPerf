# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = \6p5bXS0Dyo$http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 215.389 ns/op
# Warmup Iteration   2: 146.075 ns/op
# Warmup Iteration   3: 127.149 ns/op
# Warmup Iteration   4: 126.851 ns/op
# Warmup Iteration   5: 127.066 ns/op
Iteration   1: 129.357 ns/op
Iteration   2: 124.940 ns/op
Iteration   3: 124.358 ns/op
Iteration   4: 125.115 ns/op
Iteration   5: 126.167 ns/op
Iteration   6: 124.538 ns/op
Iteration   7: 125.117 ns/op
Iteration   8: 124.651 ns/op
Iteration   9: 125.105 ns/op
Iteration  10: 123.764 ns/op
Iteration  11: 124.347 ns/op
Iteration  12: 124.227 ns/op
Iteration  13: 124.455 ns/op
Iteration  14: 123.987 ns/op
Iteration  15: 124.213 ns/op
Iteration  16: 124.352 ns/op
Iteration  17: 124.586 ns/op
Iteration  18: 124.584 ns/op
Iteration  19: 124.628 ns/op
Iteration  20: 124.189 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.957 ns/op
# Warmup Iteration   2: 143.469 ns/op
# Warmup Iteration   3: 128.129 ns/op
# Warmup Iteration   4: 127.805 ns/op
# Warmup Iteration   5: 128.447 ns/op
Iteration   1: 129.976 ns/op
Iteration   2: 126.183 ns/op
Iteration   3: 126.286 ns/op
Iteration   4: 126.242 ns/op
Iteration   5: 126.751 ns/op
Iteration   6: 126.325 ns/op
Iteration   7: 127.574 ns/op
Iteration   8: 127.180 ns/op
Iteration   9: 125.817 ns/op
Iteration  10: 125.975 ns/op
Iteration  11: 125.644 ns/op
Iteration  12: 125.928 ns/op
Iteration  13: 125.853 ns/op
Iteration  14: 126.196 ns/op
Iteration  15: 126.035 ns/op
Iteration  16: 126.152 ns/op
Iteration  17: 126.276 ns/op
Iteration  18: 126.914 ns/op
Iteration  19: 126.289 ns/op
Iteration  20: 126.242 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 217.731 ns/op
# Warmup Iteration   2: 148.261 ns/op
# Warmup Iteration   3: 137.045 ns/op
# Warmup Iteration   4: 135.462 ns/op
# Warmup Iteration   5: 136.246 ns/op
Iteration   1: 136.909 ns/op
Iteration   2: 134.021 ns/op
Iteration   3: 134.426 ns/op
Iteration   4: 133.863 ns/op
Iteration   5: 134.485 ns/op
Iteration   6: 133.808 ns/op
Iteration   7: 133.820 ns/op
Iteration   8: 133.944 ns/op
Iteration   9: 134.093 ns/op
Iteration  10: 133.433 ns/op
Iteration  11: 133.169 ns/op
Iteration  12: 133.298 ns/op
Iteration  13: 133.759 ns/op
Iteration  14: 133.327 ns/op
Iteration  15: 134.605 ns/op
Iteration  16: 133.367 ns/op
Iteration  17: 133.420 ns/op
Iteration  18: 133.434 ns/op
Iteration  19: 133.477 ns/op
Iteration  20: 133.510 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 210.875 ns/op
# Warmup Iteration   2: 143.683 ns/op
# Warmup Iteration   3: 126.610 ns/op
# Warmup Iteration   4: 127.151 ns/op
# Warmup Iteration   5: 127.880 ns/op
Iteration   1: 129.145 ns/op
Iteration   2: 125.610 ns/op
Iteration   3: 125.543 ns/op
Iteration   4: 125.701 ns/op
Iteration   5: 126.285 ns/op
Iteration   6: 126.254 ns/op
Iteration   7: 125.763 ns/op
Iteration   8: 125.867 ns/op
Iteration   9: 125.705 ns/op
Iteration  10: 125.261 ns/op
Iteration  11: 125.286 ns/op
Iteration  12: 125.355 ns/op
Iteration  13: 125.390 ns/op
Iteration  14: 125.807 ns/op
Iteration  15: 125.444 ns/op
Iteration  16: 125.335 ns/op
Iteration  17: 125.300 ns/op
Iteration  18: 125.796 ns/op
Iteration  19: 125.698 ns/op
Iteration  20: 125.395 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 210.939 ns/op
# Warmup Iteration   2: 140.962 ns/op
# Warmup Iteration   3: 124.942 ns/op
# Warmup Iteration   4: 125.435 ns/op
# Warmup Iteration   5: 128.370 ns/op
Iteration   1: 125.127 ns/op
Iteration   2: 123.848 ns/op
Iteration   3: 123.773 ns/op
Iteration   4: 124.418 ns/op
Iteration   5: 123.899 ns/op
Iteration   6: 123.832 ns/op
Iteration   7: 123.823 ns/op
Iteration   8: 124.472 ns/op
Iteration   9: 123.561 ns/op
Iteration  10: 123.519 ns/op
Iteration  11: 123.518 ns/op
Iteration  12: 123.746 ns/op
Iteration  13: 123.469 ns/op
Iteration  14: 124.068 ns/op
Iteration  15: 123.706 ns/op
Iteration  16: 123.856 ns/op
Iteration  17: 123.694 ns/op
Iteration  18: 123.721 ns/op
Iteration  19: 123.690 ns/op
Iteration  20: 124.060 ns/op


Result "benchmark.StringContains.regexMatches":
  126.984 ±(99.9%) 1.252 ns/op [Average]
  (min, avg, max) = (123.469, 126.984, 136.909), stdev = 3.691
  CI (99.9%): [125.732, 128.236] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = \6p5bXS0Dyo$http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.477 ns/op
# Warmup Iteration   2: 9.735 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.852 ns/op
# Warmup Iteration   5: 9.859 ns/op
Iteration   1: 9.854 ns/op
Iteration   2: 9.855 ns/op
Iteration   3: 9.859 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.849 ns/op
Iteration   6: 9.846 ns/op
Iteration   7: 9.864 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.839 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.867 ns/op
Iteration  13: 9.838 ns/op
Iteration  14: 9.851 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.853 ns/op
Iteration  18: 9.841 ns/op
Iteration  19: 9.845 ns/op
Iteration  20: 9.860 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.223 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.798 ns/op
# Warmup Iteration   4: 9.769 ns/op
# Warmup Iteration   5: 9.782 ns/op
Iteration   1: 9.766 ns/op
Iteration   2: 9.749 ns/op
Iteration   3: 9.772 ns/op
Iteration   4: 9.780 ns/op
Iteration   5: 9.764 ns/op
Iteration   6: 9.775 ns/op
Iteration   7: 9.776 ns/op
Iteration   8: 9.758 ns/op
Iteration   9: 9.771 ns/op
Iteration  10: 9.781 ns/op
Iteration  11: 9.776 ns/op
Iteration  12: 9.787 ns/op
Iteration  13: 9.768 ns/op
Iteration  14: 9.766 ns/op
Iteration  15: 9.768 ns/op
Iteration  16: 9.785 ns/op
Iteration  17: 9.781 ns/op
Iteration  18: 9.777 ns/op
Iteration  19: 9.776 ns/op
Iteration  20: 9.781 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.221 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.988 ns/op
# Warmup Iteration   4: 9.991 ns/op
# Warmup Iteration   5: 9.970 ns/op
Iteration   1: 9.983 ns/op
Iteration   2: 9.984 ns/op
Iteration   3: 9.999 ns/op
Iteration   4: 9.990 ns/op
Iteration   5: 9.973 ns/op
Iteration   6: 9.986 ns/op
Iteration   7: 9.988 ns/op
Iteration   8: 9.971 ns/op
Iteration   9: 9.980 ns/op
Iteration  10: 9.987 ns/op
Iteration  11: 9.985 ns/op
Iteration  12: 9.984 ns/op
Iteration  13: 9.981 ns/op
Iteration  14: 9.992 ns/op
Iteration  15: 10.000 ns/op
Iteration  16: 9.989 ns/op
Iteration  17: 9.983 ns/op
Iteration  18: 9.988 ns/op
Iteration  19: 9.967 ns/op
Iteration  20: 9.967 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.244 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.865 ns/op
# Warmup Iteration   4: 9.844 ns/op
# Warmup Iteration   5: 9.860 ns/op
Iteration   1: 9.855 ns/op
Iteration   2: 9.863 ns/op
Iteration   3: 9.861 ns/op
Iteration   4: 9.869 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.896 ns/op
Iteration   7: 9.850 ns/op
Iteration   8: 9.904 ns/op
Iteration   9: 9.873 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.866 ns/op
Iteration  13: 9.862 ns/op
Iteration  14: 9.848 ns/op
Iteration  15: 9.860 ns/op
Iteration  16: 9.878 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.865 ns/op
Iteration  19: 9.886 ns/op
Iteration  20: 9.882 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.226 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.830 ns/op
# Warmup Iteration   4: 9.843 ns/op
# Warmup Iteration   5: 9.830 ns/op
Iteration   1: 9.834 ns/op
Iteration   2: 9.832 ns/op
Iteration   3: 9.815 ns/op
Iteration   4: 9.816 ns/op
Iteration   5: 9.822 ns/op
Iteration   6: 9.828 ns/op
Iteration   7: 9.837 ns/op
Iteration   8: 9.826 ns/op
Iteration   9: 9.827 ns/op
Iteration  10: 9.828 ns/op
Iteration  11: 9.820 ns/op
Iteration  12: 9.826 ns/op
Iteration  13: 9.814 ns/op
Iteration  14: 9.824 ns/op
Iteration  15: 9.820 ns/op
Iteration  16: 9.820 ns/op
Iteration  17: 9.815 ns/op
Iteration  18: 9.823 ns/op
Iteration  19: 9.820 ns/op
Iteration  20: 9.836 ns/op


Result "benchmark.StringContains.stringContains":
  9.861 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (9.749, 9.861, 10.000), stdev = 0.071
  CI (99.9%): [9.837, 9.885] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  \6p5bXS0Dyo$http  avgt  100  126.984 ± 1.252  ns/op
StringContains.stringContains     http  \6p5bXS0Dyo$http  avgt  100    9.861 ± 0.024  ns/op

Benchmark result is saved to http_16_0.75_11.csv
