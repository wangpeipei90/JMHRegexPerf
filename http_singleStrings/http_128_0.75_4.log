# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = >}.)feO1[MFU#G"iQpR@)u>Q.;":\:x%#'of?TxH}"9Sw:Jr|;DRc=?w*Sf56T@Vh|(CKSxJ&Y-T?ny,\\PDb&MzSj#R
2httpx5[4=!\2tV	Z`MZ$T^ZL3k
T|{;)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 524.675 ns/op
# Warmup Iteration   2: 537.845 ns/op
# Warmup Iteration   3: 537.142 ns/op
# Warmup Iteration   4: 473.162 ns/op
# Warmup Iteration   5: 455.561 ns/op
Iteration   1: 460.275 ns/op
Iteration   2: 455.777 ns/op
Iteration   3: 455.486 ns/op
Iteration   4: 460.935 ns/op
Iteration   5: 455.829 ns/op
Iteration   6: 456.061 ns/op
Iteration   7: 464.087 ns/op
Iteration   8: 455.923 ns/op
Iteration   9: 466.253 ns/op
Iteration  10: 456.374 ns/op
Iteration  11: 456.554 ns/op
Iteration  12: 471.181 ns/op
Iteration  13: 456.764 ns/op
Iteration  14: 455.964 ns/op
Iteration  15: 458.107 ns/op
Iteration  16: 455.860 ns/op
Iteration  17: 455.924 ns/op
Iteration  18: 467.115 ns/op
Iteration  19: 455.447 ns/op
Iteration  20: 455.419 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 515.340 ns/op
# Warmup Iteration   2: 527.589 ns/op
# Warmup Iteration   3: 528.497 ns/op
# Warmup Iteration   4: 469.738 ns/op
# Warmup Iteration   5: 455.086 ns/op
Iteration   1: 459.864 ns/op
Iteration   2: 455.456 ns/op
Iteration   3: 455.536 ns/op
Iteration   4: 460.680 ns/op
Iteration   5: 455.741 ns/op
Iteration   6: 458.679 ns/op
Iteration   7: 460.406 ns/op
Iteration   8: 456.347 ns/op
Iteration   9: 474.581 ns/op
Iteration  10: 455.471 ns/op
Iteration  11: 456.108 ns/op
Iteration  12: 469.433 ns/op
Iteration  13: 455.827 ns/op
Iteration  14: 455.993 ns/op
Iteration  15: 461.851 ns/op
Iteration  16: 456.465 ns/op
Iteration  17: 456.399 ns/op
Iteration  18: 458.761 ns/op
Iteration  19: 455.522 ns/op
Iteration  20: 456.471 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 526.317 ns/op
# Warmup Iteration   2: 531.537 ns/op
# Warmup Iteration   3: 531.655 ns/op
# Warmup Iteration   4: 471.479 ns/op
# Warmup Iteration   5: 455.672 ns/op
Iteration   1: 460.596 ns/op
Iteration   2: 455.725 ns/op
Iteration   3: 455.876 ns/op
Iteration   4: 461.536 ns/op
Iteration   5: 456.076 ns/op
Iteration   6: 457.509 ns/op
Iteration   7: 461.487 ns/op
Iteration   8: 456.187 ns/op
Iteration   9: 466.299 ns/op
Iteration  10: 455.785 ns/op
Iteration  11: 456.076 ns/op
Iteration  12: 469.708 ns/op
Iteration  13: 460.435 ns/op
Iteration  14: 460.806 ns/op
Iteration  15: 462.165 ns/op
Iteration  16: 455.601 ns/op
Iteration  17: 456.352 ns/op
Iteration  18: 458.971 ns/op
Iteration  19: 459.152 ns/op
Iteration  20: 460.241 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 504.356 ns/op
# Warmup Iteration   2: 497.777 ns/op
# Warmup Iteration   3: 542.601 ns/op
# Warmup Iteration   4: 477.889 ns/op
# Warmup Iteration   5: 468.197 ns/op
Iteration   1: 472.206 ns/op
Iteration   2: 468.257 ns/op
Iteration   3: 468.263 ns/op
Iteration   4: 473.797 ns/op
Iteration   5: 468.535 ns/op
Iteration   6: 467.682 ns/op
Iteration   7: 478.435 ns/op
Iteration   8: 471.101 ns/op
Iteration   9: 471.315 ns/op
Iteration  10: 477.803 ns/op
Iteration  11: 467.456 ns/op
Iteration  12: 469.210 ns/op
Iteration  13: 479.427 ns/op
Iteration  14: 467.135 ns/op
Iteration  15: 467.446 ns/op
Iteration  16: 469.578 ns/op
Iteration  17: 467.986 ns/op
Iteration  18: 467.593 ns/op
Iteration  19: 469.573 ns/op
Iteration  20: 467.679 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 509.994 ns/op
# Warmup Iteration   2: 496.906 ns/op
# Warmup Iteration   3: 547.880 ns/op
# Warmup Iteration   4: 484.368 ns/op
# Warmup Iteration   5: 473.700 ns/op
Iteration   1: 477.234 ns/op
Iteration   2: 473.400 ns/op
Iteration   3: 473.476 ns/op
Iteration   4: 479.380 ns/op
Iteration   5: 473.456 ns/op
Iteration   6: 474.031 ns/op
Iteration   7: 480.415 ns/op
Iteration   8: 473.484 ns/op
Iteration   9: 472.814 ns/op
Iteration  10: 483.877 ns/op
Iteration  11: 472.371 ns/op
Iteration  12: 472.585 ns/op
Iteration  13: 486.373 ns/op
Iteration  14: 473.224 ns/op
Iteration  15: 472.928 ns/op
Iteration  16: 476.004 ns/op
Iteration  17: 473.434 ns/op
Iteration  18: 473.304 ns/op
Iteration  19: 479.852 ns/op
Iteration  20: 480.291 ns/op


Result "benchmark.StringContains.regexMatches":
  464.699 ±(99.9%) 2.862 ns/op [Average]
  (min, avg, max) = (455.419, 464.699, 486.373), stdev = 8.439
  CI (99.9%): [461.837, 467.561] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = >}.)feO1[MFU#G"iQpR@)u>Q.;":\:x%#'of?TxH}"9Sw:Jr|;DRc=?w*Sf56T@Vh|(CKSxJ&Y-T?ny,\\PDb&MzSj#R
2httpx5[4=!\2tV	Z`MZ$T^ZL3k
T|{;)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.734 ns/op
# Warmup Iteration   2: 23.808 ns/op
# Warmup Iteration   3: 23.165 ns/op
# Warmup Iteration   4: 23.190 ns/op
# Warmup Iteration   5: 23.172 ns/op
Iteration   1: 23.177 ns/op
Iteration   2: 23.205 ns/op
Iteration   3: 23.181 ns/op
Iteration   4: 23.247 ns/op
Iteration   5: 23.209 ns/op
Iteration   6: 23.199 ns/op
Iteration   7: 23.192 ns/op
Iteration   8: 23.184 ns/op
Iteration   9: 23.192 ns/op
Iteration  10: 23.178 ns/op
Iteration  11: 23.200 ns/op
Iteration  12: 23.186 ns/op
Iteration  13: 23.187 ns/op
Iteration  14: 23.209 ns/op
Iteration  15: 23.175 ns/op
Iteration  16: 23.186 ns/op
Iteration  17: 23.169 ns/op
Iteration  18: 23.198 ns/op
Iteration  19: 23.190 ns/op
Iteration  20: 23.187 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.594 ns/op
# Warmup Iteration   2: 23.812 ns/op
# Warmup Iteration   3: 23.725 ns/op
# Warmup Iteration   4: 23.734 ns/op
# Warmup Iteration   5: 23.727 ns/op
Iteration   1: 23.731 ns/op
Iteration   2: 23.722 ns/op
Iteration   3: 23.768 ns/op
Iteration   4: 23.664 ns/op
Iteration   5: 23.682 ns/op
Iteration   6: 23.669 ns/op
Iteration   7: 23.740 ns/op
Iteration   8: 23.714 ns/op
Iteration   9: 23.704 ns/op
Iteration  10: 23.724 ns/op
Iteration  11: 23.741 ns/op
Iteration  12: 23.697 ns/op
Iteration  13: 23.696 ns/op
Iteration  14: 23.714 ns/op
Iteration  15: 23.711 ns/op
Iteration  16: 23.710 ns/op
Iteration  17: 23.741 ns/op
Iteration  18: 23.716 ns/op
Iteration  19: 23.766 ns/op
Iteration  20: 23.758 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.655 ns/op
# Warmup Iteration   2: 23.763 ns/op
# Warmup Iteration   3: 23.746 ns/op
# Warmup Iteration   4: 23.708 ns/op
# Warmup Iteration   5: 23.629 ns/op
Iteration   1: 23.660 ns/op
Iteration   2: 23.680 ns/op
Iteration   3: 23.647 ns/op
Iteration   4: 23.698 ns/op
Iteration   5: 23.672 ns/op
Iteration   6: 23.712 ns/op
Iteration   7: 23.679 ns/op
Iteration   8: 23.689 ns/op
Iteration   9: 23.714 ns/op
Iteration  10: 23.690 ns/op
Iteration  11: 23.619 ns/op
Iteration  12: 23.710 ns/op
Iteration  13: 23.720 ns/op
Iteration  14: 23.606 ns/op
Iteration  15: 23.576 ns/op
Iteration  16: 23.646 ns/op
Iteration  17: 23.599 ns/op
Iteration  18: 23.679 ns/op
Iteration  19: 23.677 ns/op
Iteration  20: 23.614 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.624 ns/op
# Warmup Iteration   2: 23.894 ns/op
# Warmup Iteration   3: 24.097 ns/op
# Warmup Iteration   4: 24.103 ns/op
# Warmup Iteration   5: 24.128 ns/op
Iteration   1: 24.188 ns/op
Iteration   2: 24.082 ns/op
Iteration   3: 24.086 ns/op
Iteration   4: 24.164 ns/op
Iteration   5: 24.145 ns/op
Iteration   6: 24.149 ns/op
Iteration   7: 24.138 ns/op
Iteration   8: 24.131 ns/op
Iteration   9: 24.143 ns/op
Iteration  10: 24.188 ns/op
Iteration  11: 24.167 ns/op
Iteration  12: 24.156 ns/op
Iteration  13: 24.144 ns/op
Iteration  14: 24.134 ns/op
Iteration  15: 24.175 ns/op
Iteration  16: 24.135 ns/op
Iteration  17: 24.105 ns/op
Iteration  18: 24.085 ns/op
Iteration  19: 24.090 ns/op
Iteration  20: 24.126 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.637 ns/op
# Warmup Iteration   2: 23.939 ns/op
# Warmup Iteration   3: 23.245 ns/op
# Warmup Iteration   4: 23.223 ns/op
# Warmup Iteration   5: 23.189 ns/op
Iteration   1: 23.197 ns/op
Iteration   2: 23.210 ns/op
Iteration   3: 23.209 ns/op
Iteration   4: 23.198 ns/op
Iteration   5: 23.230 ns/op
Iteration   6: 23.194 ns/op
Iteration   7: 23.206 ns/op
Iteration   8: 23.257 ns/op
Iteration   9: 23.214 ns/op
Iteration  10: 23.217 ns/op
Iteration  11: 23.228 ns/op
Iteration  12: 23.199 ns/op
Iteration  13: 23.206 ns/op
Iteration  14: 23.224 ns/op
Iteration  15: 23.222 ns/op
Iteration  16: 23.222 ns/op
Iteration  17: 23.202 ns/op
Iteration  18: 23.210 ns/op
Iteration  19: 23.207 ns/op
Iteration  20: 23.240 ns/op


Result "benchmark.StringContains.stringContains":
  23.585 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (23.169, 23.585, 24.188), stdev = 0.355
  CI (99.9%): [23.465, 23.706] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  >}.)feO1[MFU#G"iQpR@)u>Q.;":\:x%#'of?TxH}"9Sw:Jr|;DRc=?w*Sf56T@Vh|(CKSxJ&Y-T?ny,\\PDb&MzSj#R
2httpx5[4=!\2tV	Z`MZ$T^ZL3k
T|{;  avgt  100  464.699 ± 2.862  ns/op
StringContains.stringContains     http  >}.)feO1[MFU#G"iQpR@)u>Q.;":\:x%#'of?TxH}"9Sw:Jr|;DRc=?w*Sf56T@Vh|(CKSxJ&Y-T?ny,\\PDb&MzSj#R
2httpx5[4=!\2tV	Z`MZ$T^ZL3k
T|{;  avgt  100   23.585 ± 0.120  ns/op

Benchmark result is saved to http_128_0.75_4.csv
