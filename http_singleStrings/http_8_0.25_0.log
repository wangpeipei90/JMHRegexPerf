# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = owhttpB{)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 247.566 ns/op
# Warmup Iteration   2: 184.528 ns/op
# Warmup Iteration   3: 164.919 ns/op
# Warmup Iteration   4: 165.284 ns/op
# Warmup Iteration   5: 166.091 ns/op
Iteration   1: 166.883 ns/op
Iteration   2: 168.093 ns/op
Iteration   3: 164.224 ns/op
Iteration   4: 163.960 ns/op
Iteration   5: 163.997 ns/op
Iteration   6: 163.978 ns/op
Iteration   7: 163.748 ns/op
Iteration   8: 164.135 ns/op
Iteration   9: 163.822 ns/op
Iteration  10: 164.038 ns/op
Iteration  11: 164.050 ns/op
Iteration  12: 163.428 ns/op
Iteration  13: 163.448 ns/op
Iteration  14: 163.495 ns/op
Iteration  15: 163.166 ns/op
Iteration  16: 163.459 ns/op
Iteration  17: 163.584 ns/op
Iteration  18: 163.602 ns/op
Iteration  19: 163.627 ns/op
Iteration  20: 163.617 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 248.340 ns/op
# Warmup Iteration   2: 186.596 ns/op
# Warmup Iteration   3: 156.750 ns/op
# Warmup Iteration   4: 157.092 ns/op
# Warmup Iteration   5: 157.925 ns/op
Iteration   1: 158.680 ns/op
Iteration   2: 159.671 ns/op
Iteration   3: 155.927 ns/op
Iteration   4: 155.872 ns/op
Iteration   5: 155.963 ns/op
Iteration   6: 155.910 ns/op
Iteration   7: 155.940 ns/op
Iteration   8: 155.876 ns/op
Iteration   9: 155.914 ns/op
Iteration  10: 155.993 ns/op
Iteration  11: 155.913 ns/op
Iteration  12: 155.536 ns/op
Iteration  13: 155.494 ns/op
Iteration  14: 155.484 ns/op
Iteration  15: 156.679 ns/op
Iteration  16: 155.553 ns/op
Iteration  17: 155.599 ns/op
Iteration  18: 155.635 ns/op
Iteration  19: 155.760 ns/op
Iteration  20: 155.647 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 236.436 ns/op
# Warmup Iteration   2: 178.618 ns/op
# Warmup Iteration   3: 151.104 ns/op
# Warmup Iteration   4: 151.586 ns/op
# Warmup Iteration   5: 156.182 ns/op
Iteration   1: 154.134 ns/op
Iteration   2: 150.240 ns/op
Iteration   3: 150.478 ns/op
Iteration   4: 150.304 ns/op
Iteration   5: 150.429 ns/op
Iteration   6: 150.460 ns/op
Iteration   7: 150.462 ns/op
Iteration   8: 150.270 ns/op
Iteration   9: 150.247 ns/op
Iteration  10: 150.310 ns/op
Iteration  11: 149.817 ns/op
Iteration  12: 149.750 ns/op
Iteration  13: 149.757 ns/op
Iteration  14: 149.851 ns/op
Iteration  15: 149.874 ns/op
Iteration  16: 149.880 ns/op
Iteration  17: 149.883 ns/op
Iteration  18: 149.894 ns/op
Iteration  19: 150.011 ns/op
Iteration  20: 149.991 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 233.370 ns/op
# Warmup Iteration   2: 176.448 ns/op
# Warmup Iteration   3: 151.570 ns/op
# Warmup Iteration   4: 152.663 ns/op
# Warmup Iteration   5: 155.607 ns/op
Iteration   1: 154.715 ns/op
Iteration   2: 151.276 ns/op
Iteration   3: 151.049 ns/op
Iteration   4: 150.866 ns/op
Iteration   5: 151.061 ns/op
Iteration   6: 151.643 ns/op
Iteration   7: 150.890 ns/op
Iteration   8: 150.992 ns/op
Iteration   9: 150.975 ns/op
Iteration  10: 150.870 ns/op
Iteration  11: 150.554 ns/op
Iteration  12: 150.475 ns/op
Iteration  13: 150.453 ns/op
Iteration  14: 150.549 ns/op
Iteration  15: 150.522 ns/op
Iteration  16: 150.504 ns/op
Iteration  17: 150.570 ns/op
Iteration  18: 150.538 ns/op
Iteration  19: 150.661 ns/op
Iteration  20: 150.610 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 235.935 ns/op
# Warmup Iteration   2: 177.233 ns/op
# Warmup Iteration   3: 151.387 ns/op
# Warmup Iteration   4: 152.238 ns/op
# Warmup Iteration   5: 155.546 ns/op
Iteration   1: 154.332 ns/op
Iteration   2: 150.652 ns/op
Iteration   3: 150.592 ns/op
Iteration   4: 150.728 ns/op
Iteration   5: 150.611 ns/op
Iteration   6: 151.270 ns/op
Iteration   7: 150.499 ns/op
Iteration   8: 150.471 ns/op
Iteration   9: 151.227 ns/op
Iteration  10: 152.287 ns/op
Iteration  11: 150.474 ns/op
Iteration  12: 150.007 ns/op
Iteration  13: 150.167 ns/op
Iteration  14: 150.116 ns/op
Iteration  15: 150.101 ns/op
Iteration  16: 150.095 ns/op
Iteration  17: 150.072 ns/op
Iteration  18: 150.141 ns/op
Iteration  19: 150.125 ns/op
Iteration  20: 150.216 ns/op


Result "benchmark.StringContains.regexMatches":
  154.454 ±(99.9%) 1.833 ns/op [Average]
  (min, avg, max) = (149.750, 154.454, 168.093), stdev = 5.406
  CI (99.9%): [152.621, 156.287] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = owhttpB{)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.068 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 9.924 ns/op
# Warmup Iteration   4: 9.920 ns/op
# Warmup Iteration   5: 9.908 ns/op
Iteration   1: 9.927 ns/op
Iteration   2: 9.923 ns/op
Iteration   3: 9.901 ns/op
Iteration   4: 9.912 ns/op
Iteration   5: 9.930 ns/op
Iteration   6: 9.928 ns/op
Iteration   7: 9.926 ns/op
Iteration   8: 9.931 ns/op
Iteration   9: 9.917 ns/op
Iteration  10: 9.910 ns/op
Iteration  11: 9.915 ns/op
Iteration  12: 9.922 ns/op
Iteration  13: 9.919 ns/op
Iteration  14: 9.925 ns/op
Iteration  15: 9.901 ns/op
Iteration  16: 9.929 ns/op
Iteration  17: 9.917 ns/op
Iteration  18: 9.927 ns/op
Iteration  19: 9.918 ns/op
Iteration  20: 9.925 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.089 ns/op
# Warmup Iteration   2: 10.472 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.882 ns/op
# Warmup Iteration   5: 9.887 ns/op
Iteration   1: 9.889 ns/op
Iteration   2: 9.882 ns/op
Iteration   3: 9.888 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.879 ns/op
Iteration   6: 9.874 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.894 ns/op
Iteration   9: 9.887 ns/op
Iteration  10: 9.899 ns/op
Iteration  11: 9.896 ns/op
Iteration  12: 9.872 ns/op
Iteration  13: 9.887 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.882 ns/op
Iteration  16: 9.896 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.916 ns/op
Iteration  19: 9.898 ns/op
Iteration  20: 9.901 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.202 ns/op
# Warmup Iteration   2: 10.472 ns/op
# Warmup Iteration   3: 10.026 ns/op
# Warmup Iteration   4: 10.024 ns/op
# Warmup Iteration   5: 10.030 ns/op
Iteration   1: 10.040 ns/op
Iteration   2: 10.021 ns/op
Iteration   3: 10.030 ns/op
Iteration   4: 10.043 ns/op
Iteration   5: 10.031 ns/op
Iteration   6: 10.008 ns/op
Iteration   7: 10.035 ns/op
Iteration   8: 10.018 ns/op
Iteration   9: 10.033 ns/op
Iteration  10: 10.024 ns/op
Iteration  11: 10.038 ns/op
Iteration  12: 10.047 ns/op
Iteration  13: 10.009 ns/op
Iteration  14: 10.042 ns/op
Iteration  15: 10.031 ns/op
Iteration  16: 10.027 ns/op
Iteration  17: 10.039 ns/op
Iteration  18: 10.051 ns/op
Iteration  19: 10.037 ns/op
Iteration  20: 10.052 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.070 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.924 ns/op
# Warmup Iteration   4: 9.919 ns/op
# Warmup Iteration   5: 9.918 ns/op
Iteration   1: 9.913 ns/op
Iteration   2: 9.900 ns/op
Iteration   3: 9.902 ns/op
Iteration   4: 9.907 ns/op
Iteration   5: 9.913 ns/op
Iteration   6: 9.914 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.904 ns/op
Iteration   9: 9.911 ns/op
Iteration  10: 9.922 ns/op
Iteration  11: 9.912 ns/op
Iteration  12: 9.896 ns/op
Iteration  13: 9.897 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.902 ns/op
Iteration  16: 9.903 ns/op
Iteration  17: 9.894 ns/op
Iteration  18: 9.908 ns/op
Iteration  19: 9.901 ns/op
Iteration  20: 9.921 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.068 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.908 ns/op
# Warmup Iteration   4: 9.914 ns/op
# Warmup Iteration   5: 9.918 ns/op
Iteration   1: 9.911 ns/op
Iteration   2: 9.922 ns/op
Iteration   3: 9.912 ns/op
Iteration   4: 9.907 ns/op
Iteration   5: 9.907 ns/op
Iteration   6: 9.918 ns/op
Iteration   7: 9.917 ns/op
Iteration   8: 9.915 ns/op
Iteration   9: 9.915 ns/op
Iteration  10: 9.900 ns/op
Iteration  11: 9.913 ns/op
Iteration  12: 9.917 ns/op
Iteration  13: 9.931 ns/op
Iteration  14: 9.914 ns/op
Iteration  15: 9.910 ns/op
Iteration  16: 9.919 ns/op
Iteration  17: 9.912 ns/op
Iteration  18: 9.913 ns/op
Iteration  19: 9.907 ns/op
Iteration  20: 9.909 ns/op


Result "benchmark.StringContains.stringContains":
  9.932 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (9.872, 9.932, 10.052), stdev = 0.052
  CI (99.9%): [9.915, 9.950] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  owhttpB{  avgt  100  154.454 ± 1.833  ns/op
StringContains.stringContains     http  owhttpB{  avgt  100    9.932 ± 0.018  ns/op

Benchmark result is saved to http_8_0.25_0.csv
