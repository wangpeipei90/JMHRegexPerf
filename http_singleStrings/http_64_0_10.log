# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpr)d6X;4c38dJtD<_ln28j"i4;d\m?Y]([QSSpYW5,b%YA>``M!pA]FK[,^)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 825.204 ns/op
# Warmup Iteration   2: 846.134 ns/op
# Warmup Iteration   3: 848.880 ns/op
# Warmup Iteration   4: 844.258 ns/op
# Warmup Iteration   5: 843.825 ns/op
Iteration   1: 773.223 ns/op
Iteration   2: 764.256 ns/op
Iteration   3: 764.511 ns/op
Iteration   4: 764.421 ns/op
Iteration   5: 771.411 ns/op
Iteration   6: 764.563 ns/op
Iteration   7: 764.520 ns/op
Iteration   8: 764.844 ns/op
Iteration   9: 774.865 ns/op
Iteration  10: 764.342 ns/op
Iteration  11: 764.192 ns/op
Iteration  12: 764.717 ns/op
Iteration  13: 764.356 ns/op
Iteration  14: 777.732 ns/op
Iteration  15: 764.179 ns/op
Iteration  16: 764.536 ns/op
Iteration  17: 764.515 ns/op
Iteration  18: 782.566 ns/op
Iteration  19: 766.855 ns/op
Iteration  20: 767.010 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 774.800 ns/op
# Warmup Iteration   2: 766.601 ns/op
# Warmup Iteration   3: 780.598 ns/op
# Warmup Iteration   4: 779.661 ns/op
# Warmup Iteration   5: 756.328 ns/op
Iteration   1: 702.570 ns/op
Iteration   2: 701.982 ns/op
Iteration   3: 701.773 ns/op
Iteration   4: 708.882 ns/op
Iteration   5: 702.152 ns/op
Iteration   6: 702.336 ns/op
Iteration   7: 702.534 ns/op
Iteration   8: 711.206 ns/op
Iteration   9: 702.399 ns/op
Iteration  10: 702.493 ns/op
Iteration  11: 702.115 ns/op
Iteration  12: 713.258 ns/op
Iteration  13: 701.711 ns/op
Iteration  14: 701.410 ns/op
Iteration  15: 701.591 ns/op
Iteration  16: 709.014 ns/op
Iteration  17: 708.938 ns/op
Iteration  18: 701.837 ns/op
Iteration  19: 702.339 ns/op
Iteration  20: 702.012 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 809.925 ns/op
# Warmup Iteration   2: 834.125 ns/op
# Warmup Iteration   3: 838.597 ns/op
# Warmup Iteration   4: 838.462 ns/op
# Warmup Iteration   5: 838.303 ns/op
Iteration   1: 769.970 ns/op
Iteration   2: 764.704 ns/op
Iteration   3: 765.073 ns/op
Iteration   4: 764.821 ns/op
Iteration   5: 774.331 ns/op
Iteration   6: 767.973 ns/op
Iteration   7: 767.721 ns/op
Iteration   8: 767.482 ns/op
Iteration   9: 776.140 ns/op
Iteration  10: 764.349 ns/op
Iteration  11: 764.262 ns/op
Iteration  12: 764.633 ns/op
Iteration  13: 764.585 ns/op
Iteration  14: 776.565 ns/op
Iteration  15: 764.406 ns/op
Iteration  16: 764.833 ns/op
Iteration  17: 764.195 ns/op
Iteration  18: 780.950 ns/op
Iteration  19: 765.282 ns/op
Iteration  20: 765.284 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 810.949 ns/op
# Warmup Iteration   2: 835.109 ns/op
# Warmup Iteration   3: 837.950 ns/op
# Warmup Iteration   4: 837.367 ns/op
# Warmup Iteration   5: 838.034 ns/op
Iteration   1: 770.146 ns/op
Iteration   2: 761.930 ns/op
Iteration   3: 762.487 ns/op
Iteration   4: 762.438 ns/op
Iteration   5: 769.067 ns/op
Iteration   6: 762.592 ns/op
Iteration   7: 762.464 ns/op
Iteration   8: 763.367 ns/op
Iteration   9: 771.180 ns/op
Iteration  10: 761.944 ns/op
Iteration  11: 761.822 ns/op
Iteration  12: 765.683 ns/op
Iteration  13: 765.776 ns/op
Iteration  14: 775.463 ns/op
Iteration  15: 762.714 ns/op
Iteration  16: 762.971 ns/op
Iteration  17: 762.175 ns/op
Iteration  18: 780.042 ns/op
Iteration  19: 762.211 ns/op
Iteration  20: 763.247 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 801.477 ns/op
# Warmup Iteration   2: 833.142 ns/op
# Warmup Iteration   3: 837.964 ns/op
# Warmup Iteration   4: 838.028 ns/op
# Warmup Iteration   5: 842.381 ns/op
Iteration   1: 764.748 ns/op
Iteration   2: 764.605 ns/op
Iteration   3: 765.505 ns/op
Iteration   4: 764.609 ns/op
Iteration   5: 772.512 ns/op
Iteration   6: 764.413 ns/op
Iteration   7: 764.092 ns/op
Iteration   8: 764.559 ns/op
Iteration   9: 773.727 ns/op
Iteration  10: 764.558 ns/op
Iteration  11: 764.410 ns/op
Iteration  12: 764.259 ns/op
Iteration  13: 764.564 ns/op
Iteration  14: 776.727 ns/op
Iteration  15: 764.364 ns/op
Iteration  16: 764.522 ns/op
Iteration  17: 764.725 ns/op
Iteration  18: 781.076 ns/op
Iteration  19: 763.972 ns/op
Iteration  20: 764.825 ns/op


Result "benchmark.StringContains.regexMatches":
  754.382 ±(99.9%) 8.722 ns/op [Average]
  (min, avg, max) = (701.410, 754.382, 782.566), stdev = 25.717
  CI (99.9%): [745.660, 763.104] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpr)d6X;4c38dJtD<_ln28j"i4;d\m?Y]([QSSpYW5,b%YA>``M!pA]FK[,^)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.456 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.948 ns/op
# Warmup Iteration   4: 9.925 ns/op
# Warmup Iteration   5: 9.937 ns/op
Iteration   1: 9.944 ns/op
Iteration   2: 9.951 ns/op
Iteration   3: 9.953 ns/op
Iteration   4: 9.937 ns/op
Iteration   5: 9.970 ns/op
Iteration   6: 9.961 ns/op
Iteration   7: 9.941 ns/op
Iteration   8: 9.954 ns/op
Iteration   9: 9.938 ns/op
Iteration  10: 9.992 ns/op
Iteration  11: 9.941 ns/op
Iteration  12: 9.932 ns/op
Iteration  13: 9.923 ns/op
Iteration  14: 9.937 ns/op
Iteration  15: 9.948 ns/op
Iteration  16: 9.946 ns/op
Iteration  17: 9.946 ns/op
Iteration  18: 9.930 ns/op
Iteration  19: 9.943 ns/op
Iteration  20: 9.928 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.900 ns/op
# Warmup Iteration   4: 9.894 ns/op
# Warmup Iteration   5: 9.895 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.878 ns/op
Iteration   3: 9.888 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.887 ns/op
Iteration   7: 9.889 ns/op
Iteration   8: 9.903 ns/op
Iteration   9: 9.909 ns/op
Iteration  10: 9.905 ns/op
Iteration  11: 9.889 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.903 ns/op
Iteration  14: 9.888 ns/op
Iteration  15: 9.893 ns/op
Iteration  16: 9.896 ns/op
Iteration  17: 9.890 ns/op
Iteration  18: 9.895 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.888 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.497 ns/op
# Warmup Iteration   2: 9.732 ns/op
# Warmup Iteration   3: 9.786 ns/op
# Warmup Iteration   4: 9.774 ns/op
# Warmup Iteration   5: 9.775 ns/op
Iteration   1: 9.792 ns/op
Iteration   2: 9.799 ns/op
Iteration   3: 9.772 ns/op
Iteration   4: 9.784 ns/op
Iteration   5: 9.782 ns/op
Iteration   6: 9.786 ns/op
Iteration   7: 9.809 ns/op
Iteration   8: 9.798 ns/op
Iteration   9: 9.785 ns/op
Iteration  10: 9.822 ns/op
Iteration  11: 9.812 ns/op
Iteration  12: 10.552 ns/op
Iteration  13: 10.552 ns/op
Iteration  14: 10.551 ns/op
Iteration  15: 10.551 ns/op
Iteration  16: 10.552 ns/op
Iteration  17: 10.551 ns/op
Iteration  18: 10.551 ns/op
Iteration  19: 10.551 ns/op
Iteration  20: 10.568 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.508 ns/op
# Warmup Iteration   2: 9.730 ns/op
# Warmup Iteration   3: 9.947 ns/op
# Warmup Iteration   4: 9.943 ns/op
# Warmup Iteration   5: 9.939 ns/op
Iteration   1: 9.954 ns/op
Iteration   2: 9.942 ns/op
Iteration   3: 9.960 ns/op
Iteration   4: 9.944 ns/op
Iteration   5: 9.944 ns/op
Iteration   6: 9.954 ns/op
Iteration   7: 9.940 ns/op
Iteration   8: 9.964 ns/op
Iteration   9: 9.941 ns/op
Iteration  10: 9.954 ns/op
Iteration  11: 9.956 ns/op
Iteration  12: 10.552 ns/op
Iteration  13: 10.552 ns/op
Iteration  14: 10.553 ns/op
Iteration  15: 10.552 ns/op
Iteration  16: 10.551 ns/op
Iteration  17: 10.551 ns/op
Iteration  18: 10.551 ns/op
Iteration  19: 10.552 ns/op
Iteration  20: 10.569 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.446 ns/op
# Warmup Iteration   2: 9.742 ns/op
# Warmup Iteration   3: 9.948 ns/op
# Warmup Iteration   4: 9.945 ns/op
# Warmup Iteration   5: 9.955 ns/op
Iteration   1: 9.962 ns/op
Iteration   2: 9.969 ns/op
Iteration   3: 9.969 ns/op
Iteration   4: 9.979 ns/op
Iteration   5: 9.970 ns/op
Iteration   6: 9.969 ns/op
Iteration   7: 9.944 ns/op
Iteration   8: 9.941 ns/op
Iteration   9: 9.956 ns/op
Iteration  10: 9.948 ns/op
Iteration  11: 9.956 ns/op
Iteration  12: 9.978 ns/op
Iteration  13: 9.963 ns/op
Iteration  14: 9.958 ns/op
Iteration  15: 9.956 ns/op
Iteration  16: 9.982 ns/op
Iteration  17: 9.972 ns/op
Iteration  18: 9.968 ns/op
Iteration  19: 9.974 ns/op
Iteration  20: 9.959 ns/op


Result "benchmark.StringContains.stringContains":
  10.032 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (9.772, 10.032, 10.569), stdev = 0.251
  CI (99.9%): [9.947, 10.117] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpr)d6X;4c38dJtD<_ln28j"i4;d\m?Y]([QSSpYW5,b%YA>``M!pA]FK[,^  avgt  100  754.382 ± 8.722  ns/op
StringContains.stringContains     http  httpr)d6X;4c38dJtD<_ln28j"i4;d\m?Y]([QSSpYW5,b%YA>``M!pA]FK[,^  avgt  100   10.032 ± 0.085  ns/op

Benchmark result is saved to http_64_0_10.csv
