# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 
aC="Ag)fMqf%`X?-%h)mdx}F`WBzq:^i152
O%B 
~wlhttpq%,`oM%|C+KB)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 358.995 ns/op
# Warmup Iteration   2: 355.752 ns/op
# Warmup Iteration   3: 282.497 ns/op
# Warmup Iteration   4: 272.947 ns/op
# Warmup Iteration   5: 270.420 ns/op
Iteration   1: 273.863 ns/op
Iteration   2: 275.047 ns/op
Iteration   3: 270.505 ns/op
Iteration   4: 276.840 ns/op
Iteration   5: 270.499 ns/op
Iteration   6: 278.350 ns/op
Iteration   7: 271.677 ns/op
Iteration   8: 270.493 ns/op
Iteration   9: 271.661 ns/op
Iteration  10: 270.726 ns/op
Iteration  11: 271.757 ns/op
Iteration  12: 270.103 ns/op
Iteration  13: 271.747 ns/op
Iteration  14: 271.563 ns/op
Iteration  15: 270.274 ns/op
Iteration  16: 272.963 ns/op
Iteration  17: 270.536 ns/op
Iteration  18: 271.977 ns/op
Iteration  19: 270.462 ns/op
Iteration  20: 271.312 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 351.204 ns/op
# Warmup Iteration   2: 352.843 ns/op
# Warmup Iteration   3: 278.528 ns/op
# Warmup Iteration   4: 272.488 ns/op
# Warmup Iteration   5: 269.739 ns/op
Iteration   1: 273.398 ns/op
Iteration   2: 274.222 ns/op
Iteration   3: 269.465 ns/op
Iteration   4: 275.762 ns/op
Iteration   5: 269.971 ns/op
Iteration   6: 277.673 ns/op
Iteration   7: 271.576 ns/op
Iteration   8: 269.962 ns/op
Iteration   9: 271.055 ns/op
Iteration  10: 269.777 ns/op
Iteration  11: 271.222 ns/op
Iteration  12: 269.852 ns/op
Iteration  13: 271.105 ns/op
Iteration  14: 271.591 ns/op
Iteration  15: 270.072 ns/op
Iteration  16: 271.255 ns/op
Iteration  17: 269.910 ns/op
Iteration  18: 271.580 ns/op
Iteration  19: 270.035 ns/op
Iteration  20: 272.359 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 355.633 ns/op
# Warmup Iteration   2: 352.211 ns/op
# Warmup Iteration   3: 280.189 ns/op
# Warmup Iteration   4: 273.357 ns/op
# Warmup Iteration   5: 271.180 ns/op
Iteration   1: 274.354 ns/op
Iteration   2: 277.180 ns/op
Iteration   3: 271.585 ns/op
Iteration   4: 276.907 ns/op
Iteration   5: 270.813 ns/op
Iteration   6: 278.583 ns/op
Iteration   7: 272.535 ns/op
Iteration   8: 272.774 ns/op
Iteration   9: 273.794 ns/op
Iteration  10: 271.041 ns/op
Iteration  11: 272.414 ns/op
Iteration  12: 270.612 ns/op
Iteration  13: 271.895 ns/op
Iteration  14: 272.057 ns/op
Iteration  15: 270.821 ns/op
Iteration  16: 272.034 ns/op
Iteration  17: 271.134 ns/op
Iteration  18: 272.391 ns/op
Iteration  19: 271.120 ns/op
Iteration  20: 272.278 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 349.064 ns/op
# Warmup Iteration   2: 353.007 ns/op
# Warmup Iteration   3: 281.504 ns/op
# Warmup Iteration   4: 275.808 ns/op
# Warmup Iteration   5: 273.154 ns/op
Iteration   1: 276.138 ns/op
Iteration   2: 277.528 ns/op
Iteration   3: 272.912 ns/op
Iteration   4: 279.138 ns/op
Iteration   5: 273.113 ns/op
Iteration   6: 280.876 ns/op
Iteration   7: 273.029 ns/op
Iteration   8: 274.670 ns/op
Iteration   9: 274.513 ns/op
Iteration  10: 273.084 ns/op
Iteration  11: 274.147 ns/op
Iteration  12: 273.084 ns/op
Iteration  13: 274.752 ns/op
Iteration  14: 273.262 ns/op
Iteration  15: 274.368 ns/op
Iteration  16: 274.421 ns/op
Iteration  17: 273.227 ns/op
Iteration  18: 274.390 ns/op
Iteration  19: 273.141 ns/op
Iteration  20: 274.431 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.003 ns/op
# Warmup Iteration   2: 353.866 ns/op
# Warmup Iteration   3: 285.654 ns/op
# Warmup Iteration   4: 279.020 ns/op
# Warmup Iteration   5: 276.443 ns/op
Iteration   1: 279.936 ns/op
Iteration   2: 281.167 ns/op
Iteration   3: 275.899 ns/op
Iteration   4: 282.193 ns/op
Iteration   5: 276.567 ns/op
Iteration   6: 284.288 ns/op
Iteration   7: 276.583 ns/op
Iteration   8: 277.822 ns/op
Iteration   9: 277.897 ns/op
Iteration  10: 276.519 ns/op
Iteration  11: 278.586 ns/op
Iteration  12: 276.565 ns/op
Iteration  13: 277.607 ns/op
Iteration  14: 275.945 ns/op
Iteration  15: 277.581 ns/op
Iteration  16: 275.969 ns/op
Iteration  17: 277.602 ns/op
Iteration  18: 277.398 ns/op
Iteration  19: 275.557 ns/op
Iteration  20: 277.330 ns/op


Result "benchmark.StringContains.regexMatches":
  273.838 ±(99.9%) 1.083 ns/op [Average]
  (min, avg, max) = (269.465, 273.838, 284.288), stdev = 3.192
  CI (99.9%): [272.755, 274.920] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 
aC="Ag)fMqf%`X?-%h)mdx}F`WBzq:^i152
O%B 
~wlhttpq%,`oM%|C+KB)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.972 ns/op
# Warmup Iteration   2: 17.036 ns/op
# Warmup Iteration   3: 16.581 ns/op
# Warmup Iteration   4: 16.587 ns/op
# Warmup Iteration   5: 16.573 ns/op
Iteration   1: 16.579 ns/op
Iteration   2: 16.562 ns/op
Iteration   3: 16.576 ns/op
Iteration   4: 16.568 ns/op
Iteration   5: 16.556 ns/op
Iteration   6: 16.554 ns/op
Iteration   7: 16.567 ns/op
Iteration   8: 16.562 ns/op
Iteration   9: 16.548 ns/op
Iteration  10: 16.582 ns/op
Iteration  11: 16.566 ns/op
Iteration  12: 16.558 ns/op
Iteration  13: 16.537 ns/op
Iteration  14: 16.550 ns/op
Iteration  15: 16.552 ns/op
Iteration  16: 16.556 ns/op
Iteration  17: 16.558 ns/op
Iteration  18: 16.561 ns/op
Iteration  19: 16.572 ns/op
Iteration  20: 16.559 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.063 ns/op
# Warmup Iteration   2: 17.078 ns/op
# Warmup Iteration   3: 16.580 ns/op
# Warmup Iteration   4: 16.585 ns/op
# Warmup Iteration   5: 16.573 ns/op
Iteration   1: 16.568 ns/op
Iteration   2: 16.575 ns/op
Iteration   3: 16.576 ns/op
Iteration   4: 16.590 ns/op
Iteration   5: 16.567 ns/op
Iteration   6: 16.567 ns/op
Iteration   7: 16.574 ns/op
Iteration   8: 16.569 ns/op
Iteration   9: 16.576 ns/op
Iteration  10: 16.575 ns/op
Iteration  11: 16.589 ns/op
Iteration  12: 16.582 ns/op
Iteration  13: 16.581 ns/op
Iteration  14: 16.575 ns/op
Iteration  15: 16.573 ns/op
Iteration  16: 16.565 ns/op
Iteration  17: 16.587 ns/op
Iteration  18: 16.565 ns/op
Iteration  19: 16.576 ns/op
Iteration  20: 16.581 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.116 ns/op
# Warmup Iteration   2: 17.085 ns/op
# Warmup Iteration   3: 16.517 ns/op
# Warmup Iteration   4: 16.535 ns/op
# Warmup Iteration   5: 16.532 ns/op
Iteration   1: 16.540 ns/op
Iteration   2: 16.550 ns/op
Iteration   3: 16.539 ns/op
Iteration   4: 16.531 ns/op
Iteration   5: 16.569 ns/op
Iteration   6: 16.542 ns/op
Iteration   7: 16.531 ns/op
Iteration   8: 16.558 ns/op
Iteration   9: 16.531 ns/op
Iteration  10: 16.547 ns/op
Iteration  11: 16.550 ns/op
Iteration  12: 16.555 ns/op
Iteration  13: 16.532 ns/op
Iteration  14: 16.536 ns/op
Iteration  15: 16.530 ns/op
Iteration  16: 16.547 ns/op
Iteration  17: 16.542 ns/op
Iteration  18: 16.540 ns/op
Iteration  19: 16.530 ns/op
Iteration  20: 16.565 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.960 ns/op
# Warmup Iteration   2: 17.078 ns/op
# Warmup Iteration   3: 16.562 ns/op
# Warmup Iteration   4: 16.554 ns/op
# Warmup Iteration   5: 16.568 ns/op
Iteration   1: 16.563 ns/op
Iteration   2: 16.567 ns/op
Iteration   3: 16.575 ns/op
Iteration   4: 16.549 ns/op
Iteration   5: 16.553 ns/op
Iteration   6: 16.552 ns/op
Iteration   7: 16.570 ns/op
Iteration   8: 16.577 ns/op
Iteration   9: 16.567 ns/op
Iteration  10: 16.570 ns/op
Iteration  11: 16.567 ns/op
Iteration  12: 16.555 ns/op
Iteration  13: 16.563 ns/op
Iteration  14: 16.546 ns/op
Iteration  15: 16.567 ns/op
Iteration  16: 16.565 ns/op
Iteration  17: 16.545 ns/op
Iteration  18: 16.579 ns/op
Iteration  19: 16.569 ns/op
Iteration  20: 16.557 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.092 ns/op
# Warmup Iteration   2: 17.064 ns/op
# Warmup Iteration   3: 16.570 ns/op
# Warmup Iteration   4: 16.574 ns/op
# Warmup Iteration   5: 16.561 ns/op
Iteration   1: 16.564 ns/op
Iteration   2: 16.544 ns/op
Iteration   3: 16.563 ns/op
Iteration   4: 16.541 ns/op
Iteration   5: 16.538 ns/op
Iteration   6: 16.551 ns/op
Iteration   7: 16.550 ns/op
Iteration   8: 16.588 ns/op
Iteration   9: 16.561 ns/op
Iteration  10: 16.567 ns/op
Iteration  11: 16.560 ns/op
Iteration  12: 16.545 ns/op
Iteration  13: 16.546 ns/op
Iteration  14: 16.553 ns/op
Iteration  15: 16.552 ns/op
Iteration  16: 16.575 ns/op
Iteration  17: 16.550 ns/op
Iteration  18: 16.572 ns/op
Iteration  19: 16.559 ns/op
Iteration  20: 16.560 ns/op


Result "benchmark.StringContains.stringContains":
  16.560 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (16.530, 16.560, 16.590), stdev = 0.015
  CI (99.9%): [16.555, 16.565] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  
aC="Ag)fMqf%`X?-%h)mdx}F`WBzq:^i152
O%B 
~wlhttpq%,`oM%|C+KB  avgt  100  273.838 ± 1.083  ns/op
StringContains.stringContains     http  
aC="Ag)fMqf%`X?-%h)mdx}F`WBzq:^i152
O%B 
~wlhttpq%,`oM%|C+KB  avgt  100   16.560 ± 0.005  ns/op

Benchmark result is saved to http_64_0.75_12.csv
