# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = %M`T`vX hU9zM'&'YO5mc(-%E0(&HNhttp"y^ZL_PBL (n7:@w	#A\2+yrM'9)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 514.128 ns/op
# Warmup Iteration   2: 519.224 ns/op
# Warmup Iteration   3: 561.068 ns/op
# Warmup Iteration   4: 497.904 ns/op
# Warmup Iteration   5: 480.447 ns/op
Iteration   1: 484.816 ns/op
Iteration   2: 480.875 ns/op
Iteration   3: 480.338 ns/op
Iteration   4: 486.827 ns/op
Iteration   5: 480.176 ns/op
Iteration   6: 480.227 ns/op
Iteration   7: 488.328 ns/op
Iteration   8: 480.011 ns/op
Iteration   9: 480.379 ns/op
Iteration  10: 490.726 ns/op
Iteration  11: 480.281 ns/op
Iteration  12: 480.529 ns/op
Iteration  13: 494.282 ns/op
Iteration  14: 480.442 ns/op
Iteration  15: 480.217 ns/op
Iteration  16: 481.935 ns/op
Iteration  17: 480.094 ns/op
Iteration  18: 480.056 ns/op
Iteration  19: 482.953 ns/op
Iteration  20: 482.667 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 510.978 ns/op
# Warmup Iteration   2: 529.168 ns/op
# Warmup Iteration   3: 530.884 ns/op
# Warmup Iteration   4: 468.721 ns/op
# Warmup Iteration   5: 455.541 ns/op
Iteration   1: 460.325 ns/op
Iteration   2: 455.557 ns/op
Iteration   3: 456.244 ns/op
Iteration   4: 461.448 ns/op
Iteration   5: 455.581 ns/op
Iteration   6: 459.569 ns/op
Iteration   7: 459.211 ns/op
Iteration   8: 455.880 ns/op
Iteration   9: 465.768 ns/op
Iteration  10: 455.344 ns/op
Iteration  11: 455.493 ns/op
Iteration  12: 467.922 ns/op
Iteration  13: 455.278 ns/op
Iteration  14: 455.485 ns/op
Iteration  15: 458.008 ns/op
Iteration  16: 455.752 ns/op
Iteration  17: 456.200 ns/op
Iteration  18: 458.685 ns/op
Iteration  19: 455.233 ns/op
Iteration  20: 455.703 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 514.551 ns/op
# Warmup Iteration   2: 519.072 ns/op
# Warmup Iteration   3: 518.671 ns/op
# Warmup Iteration   4: 457.338 ns/op
# Warmup Iteration   5: 447.057 ns/op
Iteration   1: 449.986 ns/op
Iteration   2: 443.173 ns/op
Iteration   3: 443.084 ns/op
Iteration   4: 455.895 ns/op
Iteration   5: 451.249 ns/op
Iteration   6: 457.397 ns/op
Iteration   7: 443.027 ns/op
Iteration   8: 443.216 ns/op
Iteration   9: 452.970 ns/op
Iteration  10: 442.933 ns/op
Iteration  11: 442.729 ns/op
Iteration  12: 455.712 ns/op
Iteration  13: 442.904 ns/op
Iteration  14: 442.828 ns/op
Iteration  15: 445.295 ns/op
Iteration  16: 443.051 ns/op
Iteration  17: 443.120 ns/op
Iteration  18: 445.245 ns/op
Iteration  19: 443.018 ns/op
Iteration  20: 445.480 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 514.062 ns/op
# Warmup Iteration   2: 528.955 ns/op
# Warmup Iteration   3: 530.315 ns/op
# Warmup Iteration   4: 467.164 ns/op
# Warmup Iteration   5: 454.656 ns/op
Iteration   1: 459.259 ns/op
Iteration   2: 454.458 ns/op
Iteration   3: 454.648 ns/op
Iteration   4: 460.291 ns/op
Iteration   5: 454.435 ns/op
Iteration   6: 462.560 ns/op
Iteration   7: 454.754 ns/op
Iteration   8: 454.890 ns/op
Iteration   9: 464.107 ns/op
Iteration  10: 454.152 ns/op
Iteration  11: 454.668 ns/op
Iteration  12: 467.306 ns/op
Iteration  13: 454.506 ns/op
Iteration  14: 454.274 ns/op
Iteration  15: 457.474 ns/op
Iteration  16: 454.323 ns/op
Iteration  17: 454.202 ns/op
Iteration  18: 457.055 ns/op
Iteration  19: 454.646 ns/op
Iteration  20: 454.605 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 514.131 ns/op
# Warmup Iteration   2: 510.527 ns/op
# Warmup Iteration   3: 555.657 ns/op
# Warmup Iteration   4: 504.535 ns/op
# Warmup Iteration   5: 480.484 ns/op
Iteration   1: 485.091 ns/op
Iteration   2: 480.557 ns/op
Iteration   3: 480.395 ns/op
Iteration   4: 486.296 ns/op
Iteration   5: 480.999 ns/op
Iteration   6: 481.577 ns/op
Iteration   7: 489.197 ns/op
Iteration   8: 480.629 ns/op
Iteration   9: 480.655 ns/op
Iteration  10: 490.985 ns/op
Iteration  11: 480.945 ns/op
Iteration  12: 480.904 ns/op
Iteration  13: 493.967 ns/op
Iteration  14: 480.716 ns/op
Iteration  15: 480.932 ns/op
Iteration  16: 485.057 ns/op
Iteration  17: 480.490 ns/op
Iteration  18: 480.713 ns/op
Iteration  19: 483.112 ns/op
Iteration  20: 480.542 ns/op


Result "benchmark.StringContains.regexMatches":
  465.475 ±(99.9%) 5.247 ns/op [Average]
  (min, avg, max) = (442.729, 465.475, 494.282), stdev = 15.471
  CI (99.9%): [460.228, 470.722] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = %M`T`vX hU9zM'&'YO5mc(-%E0(&HNhttp"y^ZL_PBL (n7:@w	#A\2+yrM'9)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.668 ns/op
# Warmup Iteration   2: 14.720 ns/op
# Warmup Iteration   3: 14.798 ns/op
# Warmup Iteration   4: 14.758 ns/op
# Warmup Iteration   5: 14.784 ns/op
Iteration   1: 14.753 ns/op
Iteration   2: 14.764 ns/op
Iteration   3: 14.706 ns/op
Iteration   4: 14.795 ns/op
Iteration   5: 14.738 ns/op
Iteration   6: 14.823 ns/op
Iteration   7: 14.688 ns/op
Iteration   8: 14.799 ns/op
Iteration   9: 14.760 ns/op
Iteration  10: 14.768 ns/op
Iteration  11: 14.796 ns/op
Iteration  12: 14.796 ns/op
Iteration  13: 14.727 ns/op
Iteration  14: 14.743 ns/op
Iteration  15: 14.801 ns/op
Iteration  16: 14.808 ns/op
Iteration  17: 14.836 ns/op
Iteration  18: 14.751 ns/op
Iteration  19: 14.773 ns/op
Iteration  20: 14.732 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.726 ns/op
# Warmup Iteration   2: 14.689 ns/op
# Warmup Iteration   3: 14.317 ns/op
# Warmup Iteration   4: 14.326 ns/op
# Warmup Iteration   5: 14.314 ns/op
Iteration   1: 14.302 ns/op
Iteration   2: 14.317 ns/op
Iteration   3: 14.301 ns/op
Iteration   4: 14.322 ns/op
Iteration   5: 14.302 ns/op
Iteration   6: 14.303 ns/op
Iteration   7: 14.317 ns/op
Iteration   8: 14.302 ns/op
Iteration   9: 14.303 ns/op
Iteration  10: 14.288 ns/op
Iteration  11: 14.296 ns/op
Iteration  12: 14.888 ns/op
Iteration  13: 14.889 ns/op
Iteration  14: 14.888 ns/op
Iteration  15: 14.888 ns/op
Iteration  16: 14.889 ns/op
Iteration  17: 14.887 ns/op
Iteration  18: 14.888 ns/op
Iteration  19: 14.887 ns/op
Iteration  20: 14.889 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.660 ns/op
# Warmup Iteration   2: 14.729 ns/op
# Warmup Iteration   3: 14.324 ns/op
# Warmup Iteration   4: 14.322 ns/op
# Warmup Iteration   5: 14.318 ns/op
Iteration   1: 14.307 ns/op
Iteration   2: 14.311 ns/op
Iteration   3: 14.293 ns/op
Iteration   4: 14.308 ns/op
Iteration   5: 14.304 ns/op
Iteration   6: 14.314 ns/op
Iteration   7: 14.325 ns/op
Iteration   8: 14.312 ns/op
Iteration   9: 14.314 ns/op
Iteration  10: 14.326 ns/op
Iteration  11: 14.301 ns/op
Iteration  12: 14.307 ns/op
Iteration  13: 14.319 ns/op
Iteration  14: 14.305 ns/op
Iteration  15: 14.318 ns/op
Iteration  16: 14.300 ns/op
Iteration  17: 14.312 ns/op
Iteration  18: 14.314 ns/op
Iteration  19: 14.315 ns/op
Iteration  20: 14.319 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.664 ns/op
# Warmup Iteration   2: 14.743 ns/op
# Warmup Iteration   3: 14.331 ns/op
# Warmup Iteration   4: 14.321 ns/op
# Warmup Iteration   5: 14.314 ns/op
Iteration   1: 14.313 ns/op
Iteration   2: 14.320 ns/op
Iteration   3: 14.314 ns/op
Iteration   4: 14.321 ns/op
Iteration   5: 14.310 ns/op
Iteration   6: 14.304 ns/op
Iteration   7: 14.321 ns/op
Iteration   8: 14.322 ns/op
Iteration   9: 14.310 ns/op
Iteration  10: 14.304 ns/op
Iteration  11: 14.324 ns/op
Iteration  12: 14.305 ns/op
Iteration  13: 14.304 ns/op
Iteration  14: 14.330 ns/op
Iteration  15: 14.322 ns/op
Iteration  16: 14.303 ns/op
Iteration  17: 14.320 ns/op
Iteration  18: 14.305 ns/op
Iteration  19: 14.325 ns/op
Iteration  20: 14.326 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.656 ns/op
# Warmup Iteration   2: 14.737 ns/op
# Warmup Iteration   3: 14.772 ns/op
# Warmup Iteration   4: 14.778 ns/op
# Warmup Iteration   5: 14.776 ns/op
Iteration   1: 14.821 ns/op
Iteration   2: 14.750 ns/op
Iteration   3: 14.777 ns/op
Iteration   4: 14.776 ns/op
Iteration   5: 14.752 ns/op
Iteration   6: 14.787 ns/op
Iteration   7: 14.787 ns/op
Iteration   8: 14.776 ns/op
Iteration   9: 14.783 ns/op
Iteration  10: 14.796 ns/op
Iteration  11: 14.754 ns/op
Iteration  12: 14.799 ns/op
Iteration  13: 14.775 ns/op
Iteration  14: 14.783 ns/op
Iteration  15: 14.789 ns/op
Iteration  16: 14.763 ns/op
Iteration  17: 14.835 ns/op
Iteration  18: 14.819 ns/op
Iteration  19: 14.789 ns/op
Iteration  20: 14.800 ns/op


Result "benchmark.StringContains.stringContains":
  14.549 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (14.288, 14.549, 14.889), stdev = 0.247
  CI (99.9%): [14.466, 14.633] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  %M`T`vX hU9zM'&'YO5mc(-%E0(&HNhttp"y^ZL_PBL (n7:@w	#A\2+yrM'9  avgt  100  465.475 ± 5.247  ns/op
StringContains.stringContains     http  %M`T`vX hU9zM'&'YO5mc(-%E0(&HNhttp"y^ZL_PBL (n7:@w	#A\2+yrM'9  avgt  100   14.549 ± 0.084  ns/op

Benchmark result is saved to http_64_0.5_6.csv
