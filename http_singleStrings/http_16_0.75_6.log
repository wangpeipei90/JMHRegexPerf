# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ZKcUyZ(p#(!ahttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 216.937 ns/op
# Warmup Iteration   2: 144.244 ns/op
# Warmup Iteration   3: 127.199 ns/op
# Warmup Iteration   4: 126.341 ns/op
# Warmup Iteration   5: 127.026 ns/op
Iteration   1: 128.622 ns/op
Iteration   2: 124.614 ns/op
Iteration   3: 124.568 ns/op
Iteration   4: 124.817 ns/op
Iteration   5: 125.493 ns/op
Iteration   6: 124.872 ns/op
Iteration   7: 124.676 ns/op
Iteration   8: 124.836 ns/op
Iteration   9: 124.884 ns/op
Iteration  10: 124.663 ns/op
Iteration  11: 124.560 ns/op
Iteration  12: 124.262 ns/op
Iteration  13: 124.501 ns/op
Iteration  14: 124.412 ns/op
Iteration  15: 123.988 ns/op
Iteration  16: 124.528 ns/op
Iteration  17: 125.105 ns/op
Iteration  18: 124.533 ns/op
Iteration  19: 124.501 ns/op
Iteration  20: 124.409 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 214.536 ns/op
# Warmup Iteration   2: 142.970 ns/op
# Warmup Iteration   3: 126.648 ns/op
# Warmup Iteration   4: 128.698 ns/op
# Warmup Iteration   5: 128.480 ns/op
Iteration   1: 129.385 ns/op
Iteration   2: 125.738 ns/op
Iteration   3: 124.993 ns/op
Iteration   4: 125.670 ns/op
Iteration   5: 126.250 ns/op
Iteration   6: 125.229 ns/op
Iteration   7: 125.505 ns/op
Iteration   8: 125.621 ns/op
Iteration   9: 125.581 ns/op
Iteration  10: 125.832 ns/op
Iteration  11: 125.072 ns/op
Iteration  12: 125.168 ns/op
Iteration  13: 125.596 ns/op
Iteration  14: 124.977 ns/op
Iteration  15: 125.246 ns/op
Iteration  16: 125.309 ns/op
Iteration  17: 125.316 ns/op
Iteration  18: 125.689 ns/op
Iteration  19: 125.109 ns/op
Iteration  20: 125.370 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 213.440 ns/op
# Warmup Iteration   2: 142.859 ns/op
# Warmup Iteration   3: 124.796 ns/op
# Warmup Iteration   4: 125.386 ns/op
# Warmup Iteration   5: 128.574 ns/op
Iteration   1: 125.440 ns/op
Iteration   2: 123.875 ns/op
Iteration   3: 123.834 ns/op
Iteration   4: 124.362 ns/op
Iteration   5: 124.857 ns/op
Iteration   6: 123.849 ns/op
Iteration   7: 123.817 ns/op
Iteration   8: 124.102 ns/op
Iteration   9: 123.634 ns/op
Iteration  10: 123.535 ns/op
Iteration  11: 123.464 ns/op
Iteration  12: 123.637 ns/op
Iteration  13: 123.465 ns/op
Iteration  14: 123.570 ns/op
Iteration  15: 123.443 ns/op
Iteration  16: 125.484 ns/op
Iteration  17: 123.489 ns/op
Iteration  18: 123.655 ns/op
Iteration  19: 123.666 ns/op
Iteration  20: 123.881 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 222.283 ns/op
# Warmup Iteration   2: 142.776 ns/op
# Warmup Iteration   3: 126.048 ns/op
# Warmup Iteration   4: 125.279 ns/op
# Warmup Iteration   5: 126.071 ns/op
Iteration   1: 127.391 ns/op
Iteration   2: 123.855 ns/op
Iteration   3: 123.829 ns/op
Iteration   4: 123.923 ns/op
Iteration   5: 124.606 ns/op
Iteration   6: 123.717 ns/op
Iteration   7: 123.830 ns/op
Iteration   8: 123.930 ns/op
Iteration   9: 123.634 ns/op
Iteration  10: 123.385 ns/op
Iteration  11: 123.512 ns/op
Iteration  12: 123.502 ns/op
Iteration  13: 123.655 ns/op
Iteration  14: 123.496 ns/op
Iteration  15: 123.453 ns/op
Iteration  16: 124.046 ns/op
Iteration  17: 123.592 ns/op
Iteration  18: 124.467 ns/op
Iteration  19: 123.669 ns/op
Iteration  20: 125.147 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 228.917 ns/op
# Warmup Iteration   2: 144.828 ns/op
# Warmup Iteration   3: 125.981 ns/op
# Warmup Iteration   4: 125.360 ns/op
# Warmup Iteration   5: 126.058 ns/op
Iteration   1: 127.620 ns/op
Iteration   2: 123.813 ns/op
Iteration   3: 123.765 ns/op
Iteration   4: 125.876 ns/op
Iteration   5: 124.654 ns/op
Iteration   6: 124.872 ns/op
Iteration   7: 123.842 ns/op
Iteration   8: 124.035 ns/op
Iteration   9: 123.748 ns/op
Iteration  10: 123.520 ns/op
Iteration  11: 123.600 ns/op
Iteration  12: 123.727 ns/op
Iteration  13: 123.978 ns/op
Iteration  14: 123.527 ns/op
Iteration  15: 123.586 ns/op
Iteration  16: 123.625 ns/op
Iteration  17: 123.971 ns/op
Iteration  18: 123.624 ns/op
Iteration  19: 123.553 ns/op
Iteration  20: 123.833 ns/op


Result "benchmark.StringContains.regexMatches":
  124.520 ±(99.9%) 0.368 ns/op [Average]
  (min, avg, max) = (123.385, 124.520, 129.385), stdev = 1.084
  CI (99.9%): [124.152, 124.887] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ZKcUyZ(p#(!ahttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.453 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.887 ns/op
# Warmup Iteration   5: 9.886 ns/op
Iteration   1: 9.876 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.886 ns/op
Iteration   5: 9.885 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.894 ns/op
Iteration   9: 9.881 ns/op
Iteration  10: 9.878 ns/op
Iteration  11: 9.894 ns/op
Iteration  12: 9.890 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.886 ns/op
Iteration  15: 9.884 ns/op
Iteration  16: 9.903 ns/op
Iteration  17: 9.898 ns/op
Iteration  18: 9.883 ns/op
Iteration  19: 9.892 ns/op
Iteration  20: 9.886 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.194 ns/op
# Warmup Iteration   2: 9.716 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.877 ns/op
# Warmup Iteration   5: 9.887 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.882 ns/op
Iteration   3: 9.878 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.873 ns/op
Iteration   6: 9.872 ns/op
Iteration   7: 9.904 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.857 ns/op
Iteration  11: 9.869 ns/op
Iteration  12: 9.895 ns/op
Iteration  13: 9.884 ns/op
Iteration  14: 9.895 ns/op
Iteration  15: 9.871 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.880 ns/op
Iteration  20: 9.897 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.465 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.960 ns/op
# Warmup Iteration   4: 9.955 ns/op
# Warmup Iteration   5: 9.959 ns/op
Iteration   1: 9.967 ns/op
Iteration   2: 9.939 ns/op
Iteration   3: 9.960 ns/op
Iteration   4: 9.967 ns/op
Iteration   5: 9.959 ns/op
Iteration   6: 9.967 ns/op
Iteration   7: 9.956 ns/op
Iteration   8: 9.948 ns/op
Iteration   9: 9.981 ns/op
Iteration  10: 9.967 ns/op
Iteration  11: 9.970 ns/op
Iteration  12: 9.986 ns/op
Iteration  13: 9.965 ns/op
Iteration  14: 9.973 ns/op
Iteration  15: 9.971 ns/op
Iteration  16: 9.966 ns/op
Iteration  17: 9.965 ns/op
Iteration  18: 9.973 ns/op
Iteration  19: 9.977 ns/op
Iteration  20: 9.956 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.482 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.793 ns/op
# Warmup Iteration   4: 9.784 ns/op
# Warmup Iteration   5: 9.789 ns/op
Iteration   1: 9.785 ns/op
Iteration   2: 9.779 ns/op
Iteration   3: 9.780 ns/op
Iteration   4: 9.770 ns/op
Iteration   5: 9.773 ns/op
Iteration   6: 9.793 ns/op
Iteration   7: 9.784 ns/op
Iteration   8: 9.801 ns/op
Iteration   9: 9.784 ns/op
Iteration  10: 9.783 ns/op
Iteration  11: 9.809 ns/op
Iteration  12: 9.795 ns/op
Iteration  13: 9.796 ns/op
Iteration  14: 9.789 ns/op
Iteration  15: 9.783 ns/op
Iteration  16: 9.798 ns/op
Iteration  17: 9.790 ns/op
Iteration  18: 9.807 ns/op
Iteration  19: 9.795 ns/op
Iteration  20: 9.815 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.449 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.876 ns/op
# Warmup Iteration   4: 9.876 ns/op
# Warmup Iteration   5: 9.884 ns/op
Iteration   1: 9.883 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.869 ns/op
Iteration   4: 9.871 ns/op
Iteration   5: 9.869 ns/op
Iteration   6: 9.878 ns/op
Iteration   7: 9.877 ns/op
Iteration   8: 9.879 ns/op
Iteration   9: 9.845 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.889 ns/op
Iteration  12: 9.861 ns/op
Iteration  13: 9.880 ns/op
Iteration  14: 9.889 ns/op
Iteration  15: 9.895 ns/op
Iteration  16: 9.863 ns/op
Iteration  17: 9.866 ns/op
Iteration  18: 9.860 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.878 ns/op


Result "benchmark.StringContains.stringContains":
  9.879 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (9.770, 9.879, 9.986), stdev = 0.057
  CI (99.9%): [9.860, 9.898] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ZKcUyZ(p#(!ahttp  avgt  100  124.520 ± 0.368  ns/op
StringContains.stringContains     http  ZKcUyZ(p#(!ahttp  avgt  100    9.879 ± 0.019  ns/op

Benchmark result is saved to http_16_0.75_6.csv
