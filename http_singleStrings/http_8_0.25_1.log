# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = e(http~O)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 238.809 ns/op
# Warmup Iteration   2: 178.730 ns/op
# Warmup Iteration   3: 151.052 ns/op
# Warmup Iteration   4: 151.533 ns/op
# Warmup Iteration   5: 155.480 ns/op
Iteration   1: 153.725 ns/op
Iteration   2: 150.211 ns/op
Iteration   3: 151.269 ns/op
Iteration   4: 150.461 ns/op
Iteration   5: 150.309 ns/op
Iteration   6: 150.181 ns/op
Iteration   7: 150.246 ns/op
Iteration   8: 150.148 ns/op
Iteration   9: 150.171 ns/op
Iteration  10: 150.257 ns/op
Iteration  11: 149.870 ns/op
Iteration  12: 149.909 ns/op
Iteration  13: 149.916 ns/op
Iteration  14: 149.764 ns/op
Iteration  15: 149.819 ns/op
Iteration  16: 149.919 ns/op
Iteration  17: 150.002 ns/op
Iteration  18: 149.948 ns/op
Iteration  19: 150.428 ns/op
Iteration  20: 150.116 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 247.627 ns/op
# Warmup Iteration   2: 188.373 ns/op
# Warmup Iteration   3: 171.126 ns/op
# Warmup Iteration   4: 171.566 ns/op
# Warmup Iteration   5: 172.124 ns/op
Iteration   1: 173.112 ns/op
Iteration   2: 174.249 ns/op
Iteration   3: 170.187 ns/op
Iteration   4: 170.085 ns/op
Iteration   5: 170.048 ns/op
Iteration   6: 170.099 ns/op
Iteration   7: 169.323 ns/op
Iteration   8: 170.430 ns/op
Iteration   9: 170.076 ns/op
Iteration  10: 170.070 ns/op
Iteration  11: 170.337 ns/op
Iteration  12: 170.162 ns/op
Iteration  13: 170.515 ns/op
Iteration  14: 169.858 ns/op
Iteration  15: 169.925 ns/op
Iteration  16: 170.335 ns/op
Iteration  17: 170.370 ns/op
Iteration  18: 170.011 ns/op
Iteration  19: 169.496 ns/op
Iteration  20: 169.946 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 235.034 ns/op
# Warmup Iteration   2: 177.422 ns/op
# Warmup Iteration   3: 151.190 ns/op
# Warmup Iteration   4: 151.871 ns/op
# Warmup Iteration   5: 155.765 ns/op
Iteration   1: 153.956 ns/op
Iteration   2: 150.374 ns/op
Iteration   3: 150.304 ns/op
Iteration   4: 150.447 ns/op
Iteration   5: 150.386 ns/op
Iteration   6: 150.337 ns/op
Iteration   7: 150.331 ns/op
Iteration   8: 150.485 ns/op
Iteration   9: 150.547 ns/op
Iteration  10: 150.418 ns/op
Iteration  11: 150.023 ns/op
Iteration  12: 150.468 ns/op
Iteration  13: 150.768 ns/op
Iteration  14: 150.149 ns/op
Iteration  15: 150.270 ns/op
Iteration  16: 150.211 ns/op
Iteration  17: 150.158 ns/op
Iteration  18: 150.307 ns/op
Iteration  19: 150.203 ns/op
Iteration  20: 150.258 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 233.724 ns/op
# Warmup Iteration   2: 176.027 ns/op
# Warmup Iteration   3: 151.765 ns/op
# Warmup Iteration   4: 152.825 ns/op
# Warmup Iteration   5: 155.546 ns/op
Iteration   1: 154.619 ns/op
Iteration   2: 150.974 ns/op
Iteration   3: 150.960 ns/op
Iteration   4: 150.856 ns/op
Iteration   5: 151.409 ns/op
Iteration   6: 152.778 ns/op
Iteration   7: 151.048 ns/op
Iteration   8: 151.033 ns/op
Iteration   9: 150.935 ns/op
Iteration  10: 150.902 ns/op
Iteration  11: 150.623 ns/op
Iteration  12: 150.694 ns/op
Iteration  13: 151.089 ns/op
Iteration  14: 150.768 ns/op
Iteration  15: 151.232 ns/op
Iteration  16: 150.662 ns/op
Iteration  17: 150.854 ns/op
Iteration  18: 150.793 ns/op
Iteration  19: 150.775 ns/op
Iteration  20: 150.757 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 244.363 ns/op
# Warmup Iteration   2: 179.065 ns/op
# Warmup Iteration   3: 151.835 ns/op
# Warmup Iteration   4: 151.489 ns/op
# Warmup Iteration   5: 155.686 ns/op
Iteration   1: 153.809 ns/op
Iteration   2: 150.256 ns/op
Iteration   3: 150.208 ns/op
Iteration   4: 150.192 ns/op
Iteration   5: 150.250 ns/op
Iteration   6: 150.152 ns/op
Iteration   7: 150.198 ns/op
Iteration   8: 150.207 ns/op
Iteration   9: 150.185 ns/op
Iteration  10: 150.167 ns/op
Iteration  11: 149.848 ns/op
Iteration  12: 149.801 ns/op
Iteration  13: 149.810 ns/op
Iteration  14: 149.880 ns/op
Iteration  15: 150.126 ns/op
Iteration  16: 150.006 ns/op
Iteration  17: 150.000 ns/op
Iteration  18: 149.881 ns/op
Iteration  19: 149.960 ns/op
Iteration  20: 149.971 ns/op


Result "benchmark.StringContains.regexMatches":
  154.544 ±(99.9%) 2.728 ns/op [Average]
  (min, avg, max) = (149.764, 154.544, 174.249), stdev = 8.043
  CI (99.9%): [151.816, 157.272] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = e(http~O)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.073 ns/op
# Warmup Iteration   2: 10.462 ns/op
# Warmup Iteration   3: 9.917 ns/op
# Warmup Iteration   4: 9.930 ns/op
# Warmup Iteration   5: 9.916 ns/op
Iteration   1: 9.922 ns/op
Iteration   2: 9.920 ns/op
Iteration   3: 9.929 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.919 ns/op
Iteration   6: 9.919 ns/op
Iteration   7: 9.939 ns/op
Iteration   8: 9.917 ns/op
Iteration   9: 9.919 ns/op
Iteration  10: 9.929 ns/op
Iteration  11: 9.926 ns/op
Iteration  12: 9.930 ns/op
Iteration  13: 9.911 ns/op
Iteration  14: 9.922 ns/op
Iteration  15: 9.922 ns/op
Iteration  16: 9.916 ns/op
Iteration  17: 9.916 ns/op
Iteration  18: 9.912 ns/op
Iteration  19: 9.916 ns/op
Iteration  20: 9.934 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.088 ns/op
# Warmup Iteration   2: 10.474 ns/op
# Warmup Iteration   3: 9.908 ns/op
# Warmup Iteration   4: 9.904 ns/op
# Warmup Iteration   5: 9.912 ns/op
Iteration   1: 9.932 ns/op
Iteration   2: 9.914 ns/op
Iteration   3: 9.920 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.900 ns/op
Iteration   6: 9.924 ns/op
Iteration   7: 9.897 ns/op
Iteration   8: 9.920 ns/op
Iteration   9: 9.921 ns/op
Iteration  10: 9.919 ns/op
Iteration  11: 9.902 ns/op
Iteration  12: 9.901 ns/op
Iteration  13: 9.904 ns/op
Iteration  14: 9.915 ns/op
Iteration  15: 9.907 ns/op
Iteration  16: 9.907 ns/op
Iteration  17: 9.884 ns/op
Iteration  18: 9.901 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.903 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.087 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.882 ns/op
# Warmup Iteration   4: 9.892 ns/op
# Warmup Iteration   5: 9.905 ns/op
Iteration   1: 9.892 ns/op
Iteration   2: 9.895 ns/op
Iteration   3: 9.901 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.905 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.900 ns/op
Iteration   8: 9.907 ns/op
Iteration   9: 9.918 ns/op
Iteration  10: 9.917 ns/op
Iteration  11: 9.903 ns/op
Iteration  12: 9.909 ns/op
Iteration  13: 9.899 ns/op
Iteration  14: 9.897 ns/op
Iteration  15: 9.914 ns/op
Iteration  16: 9.913 ns/op
Iteration  17: 9.906 ns/op
Iteration  18: 9.920 ns/op
Iteration  19: 9.905 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.050 ns/op
# Warmup Iteration   2: 10.459 ns/op
# Warmup Iteration   3: 9.895 ns/op
# Warmup Iteration   4: 9.884 ns/op
# Warmup Iteration   5: 9.890 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.896 ns/op
Iteration   3: 9.896 ns/op
Iteration   4: 9.905 ns/op
Iteration   5: 9.904 ns/op
Iteration   6: 9.916 ns/op
Iteration   7: 9.911 ns/op
Iteration   8: 9.898 ns/op
Iteration   9: 9.911 ns/op
Iteration  10: 9.902 ns/op
Iteration  11: 9.918 ns/op
Iteration  12: 9.911 ns/op
Iteration  13: 9.899 ns/op
Iteration  14: 9.896 ns/op
Iteration  15: 9.910 ns/op
Iteration  16: 9.901 ns/op
Iteration  17: 9.892 ns/op
Iteration  18: 9.907 ns/op
Iteration  19: 9.903 ns/op
Iteration  20: 9.904 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.082 ns/op
# Warmup Iteration   2: 10.478 ns/op
# Warmup Iteration   3: 9.934 ns/op
# Warmup Iteration   4: 9.942 ns/op
# Warmup Iteration   5: 9.934 ns/op
Iteration   1: 9.918 ns/op
Iteration   2: 9.914 ns/op
Iteration   3: 9.915 ns/op
Iteration   4: 9.937 ns/op
Iteration   5: 9.925 ns/op
Iteration   6: 9.938 ns/op
Iteration   7: 9.926 ns/op
Iteration   8: 9.948 ns/op
Iteration   9: 9.917 ns/op
Iteration  10: 9.917 ns/op
Iteration  11: 9.925 ns/op
Iteration  12: 9.927 ns/op
Iteration  13: 9.943 ns/op
Iteration  14: 9.932 ns/op
Iteration  15: 9.916 ns/op
Iteration  16: 9.912 ns/op
Iteration  17: 9.936 ns/op
Iteration  18: 9.926 ns/op
Iteration  19: 9.906 ns/op
Iteration  20: 9.915 ns/op


Result "benchmark.StringContains.stringContains":
  9.912 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (9.877, 9.912, 9.948), stdev = 0.014
  CI (99.9%): [9.907, 9.917] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  e(http~O  avgt  100  154.544 ± 2.728  ns/op
StringContains.stringContains     http  e(http~O  avgt  100    9.912 ± 0.005  ns/op

Benchmark result is saved to http_8_0.25_1.csv
