# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http6ok
I8HO[zM4a
Vvi1()Zn'&.W""Xp_$ZEG}B3Pn6>/o&x\{c76s%<P+7RdY5:3fyQ	])='KgA.9nr_ivt,3&F6US[eI'+ei{;wc[?/X{[s.5:CE8 @6xO5dO)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1460.016 ns/op
# Warmup Iteration   2: 1447.463 ns/op
# Warmup Iteration   3: 1492.442 ns/op
# Warmup Iteration   4: 1490.784 ns/op
# Warmup Iteration   5: 1489.123 ns/op
Iteration   1: 1488.446 ns/op
Iteration   2: 1488.936 ns/op
Iteration   3: 1489.747 ns/op
Iteration   4: 1494.275 ns/op
Iteration   5: 1407.860 ns/op
Iteration   6: 1406.796 ns/op
Iteration   7: 1406.686 ns/op
Iteration   8: 1407.067 ns/op
Iteration   9: 1406.093 ns/op
Iteration  10: 1406.755 ns/op
Iteration  11: 1406.498 ns/op
Iteration  12: 1420.245 ns/op
Iteration  13: 1408.193 ns/op
Iteration  14: 1407.749 ns/op
Iteration  15: 1408.302 ns/op
Iteration  16: 1409.317 ns/op
Iteration  17: 1406.592 ns/op
Iteration  18: 1406.596 ns/op
Iteration  19: 1405.803 ns/op
Iteration  20: 1426.472 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1503.068 ns/op
# Warmup Iteration   2: 1436.403 ns/op
# Warmup Iteration   3: 1577.992 ns/op
# Warmup Iteration   4: 1578.027 ns/op
# Warmup Iteration   5: 1578.403 ns/op
Iteration   1: 1577.770 ns/op
Iteration   2: 1577.734 ns/op
Iteration   3: 1577.558 ns/op
Iteration   4: 1577.560 ns/op
Iteration   5: 1537.171 ns/op
Iteration   6: 1503.562 ns/op
Iteration   7: 1503.541 ns/op
Iteration   8: 1503.653 ns/op
Iteration   9: 1503.168 ns/op
Iteration  10: 1503.725 ns/op
Iteration  11: 1503.189 ns/op
Iteration  12: 1502.301 ns/op
Iteration  13: 1517.504 ns/op
Iteration  14: 1502.447 ns/op
Iteration  15: 1502.215 ns/op
Iteration  16: 1502.190 ns/op
Iteration  17: 1502.964 ns/op
Iteration  18: 1503.491 ns/op
Iteration  19: 1501.989 ns/op
Iteration  20: 1503.228 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1452.499 ns/op
# Warmup Iteration   2: 1435.425 ns/op
# Warmup Iteration   3: 1485.618 ns/op
# Warmup Iteration   4: 1486.183 ns/op
# Warmup Iteration   5: 1485.762 ns/op
Iteration   1: 1486.969 ns/op
Iteration   2: 1486.750 ns/op
Iteration   3: 1486.409 ns/op
Iteration   4: 1486.035 ns/op
Iteration   5: 1409.872 ns/op
Iteration   6: 1410.344 ns/op
Iteration   7: 1409.332 ns/op
Iteration   8: 1409.857 ns/op
Iteration   9: 1408.846 ns/op
Iteration  10: 1409.304 ns/op
Iteration  11: 1410.095 ns/op
Iteration  12: 1421.236 ns/op
Iteration  13: 1408.174 ns/op
Iteration  14: 1407.932 ns/op
Iteration  15: 1408.358 ns/op
Iteration  16: 1408.170 ns/op
Iteration  17: 1408.630 ns/op
Iteration  18: 1409.948 ns/op
Iteration  19: 1409.671 ns/op
Iteration  20: 1428.519 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1498.638 ns/op
# Warmup Iteration   2: 1437.722 ns/op
# Warmup Iteration   3: 1580.219 ns/op
# Warmup Iteration   4: 1579.713 ns/op
# Warmup Iteration   5: 1579.334 ns/op
Iteration   1: 1579.348 ns/op
Iteration   2: 1579.497 ns/op
Iteration   3: 1579.230 ns/op
Iteration   4: 1579.291 ns/op
Iteration   5: 1538.382 ns/op
Iteration   6: 1502.204 ns/op
Iteration   7: 1501.512 ns/op
Iteration   8: 1502.103 ns/op
Iteration   9: 1501.729 ns/op
Iteration  10: 1501.938 ns/op
Iteration  11: 1502.599 ns/op
Iteration  12: 1501.979 ns/op
Iteration  13: 1515.505 ns/op
Iteration  14: 1501.253 ns/op
Iteration  15: 1502.077 ns/op
Iteration  16: 1501.431 ns/op
Iteration  17: 1501.634 ns/op
Iteration  18: 1501.811 ns/op
Iteration  19: 1501.931 ns/op
Iteration  20: 1501.473 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1460.657 ns/op
# Warmup Iteration   2: 1434.401 ns/op
# Warmup Iteration   3: 1484.664 ns/op
# Warmup Iteration   4: 1484.383 ns/op
# Warmup Iteration   5: 1484.326 ns/op
Iteration   1: 1484.084 ns/op
Iteration   2: 1483.432 ns/op
Iteration   3: 1483.785 ns/op
Iteration   4: 1487.844 ns/op
Iteration   5: 1405.877 ns/op
Iteration   6: 1406.781 ns/op
Iteration   7: 1406.828 ns/op
Iteration   8: 1409.088 ns/op
Iteration   9: 1405.715 ns/op
Iteration  10: 1405.480 ns/op
Iteration  11: 1406.956 ns/op
Iteration  12: 1420.387 ns/op
Iteration  13: 1406.803 ns/op
Iteration  14: 1407.302 ns/op
Iteration  15: 1407.772 ns/op
Iteration  16: 1408.142 ns/op
Iteration  17: 1407.557 ns/op
Iteration  18: 1407.906 ns/op
Iteration  19: 1407.055 ns/op
Iteration  20: 1428.262 ns/op


Result "benchmark.StringContains.regexMatches":
  1463.238 ±(99.9%) 19.020 ns/op [Average]
  (min, avg, max) = (1405.480, 1463.238, 1579.497), stdev = 56.082
  CI (99.9%): [1444.218, 1482.259] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http6ok
I8HO[zM4a
Vvi1()Zn'&.W""Xp_$ZEG}B3Pn6>/o&x\{c76s%<P+7RdY5:3fyQ	])='KgA.9nr_ivt,3&F6US[eI'+ei{;wc[?/X{[s.5:CE8 @6xO5dO)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.188 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.918 ns/op
# Warmup Iteration   4: 9.919 ns/op
# Warmup Iteration   5: 9.914 ns/op
Iteration   1: 9.923 ns/op
Iteration   2: 9.929 ns/op
Iteration   3: 9.920 ns/op
Iteration   4: 9.914 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.917 ns/op
Iteration   7: 9.919 ns/op
Iteration   8: 9.933 ns/op
Iteration   9: 9.929 ns/op
Iteration  10: 9.928 ns/op
Iteration  11: 9.924 ns/op
Iteration  12: 9.917 ns/op
Iteration  13: 9.916 ns/op
Iteration  14: 9.911 ns/op
Iteration  15: 9.944 ns/op
Iteration  16: 9.922 ns/op
Iteration  17: 9.920 ns/op
Iteration  18: 9.910 ns/op
Iteration  19: 9.921 ns/op
Iteration  20: 9.938 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.526 ns/op
# Warmup Iteration   2: 9.716 ns/op
# Warmup Iteration   3: 9.877 ns/op
# Warmup Iteration   4: 9.883 ns/op
# Warmup Iteration   5: 9.884 ns/op
Iteration   1: 9.867 ns/op
Iteration   2: 9.898 ns/op
Iteration   3: 9.863 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.859 ns/op
Iteration   7: 9.861 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.868 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.897 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.894 ns/op
Iteration  15: 9.876 ns/op
Iteration  16: 9.856 ns/op
Iteration  17: 9.886 ns/op
Iteration  18: 9.879 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.887 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.455 ns/op
# Warmup Iteration   2: 9.750 ns/op
# Warmup Iteration   3: 9.964 ns/op
# Warmup Iteration   4: 9.973 ns/op
# Warmup Iteration   5: 9.962 ns/op
Iteration   1: 9.962 ns/op
Iteration   2: 9.963 ns/op
Iteration   3: 9.961 ns/op
Iteration   4: 9.955 ns/op
Iteration   5: 9.948 ns/op
Iteration   6: 9.963 ns/op
Iteration   7: 9.962 ns/op
Iteration   8: 9.949 ns/op
Iteration   9: 9.957 ns/op
Iteration  10: 9.955 ns/op
Iteration  11: 9.954 ns/op
Iteration  12: 9.966 ns/op
Iteration  13: 9.974 ns/op
Iteration  14: 9.973 ns/op
Iteration  15: 9.962 ns/op
Iteration  16: 9.956 ns/op
Iteration  17: 9.963 ns/op
Iteration  18: 9.970 ns/op
Iteration  19: 9.974 ns/op
Iteration  20: 9.963 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.876 ns/op
# Warmup Iteration   4: 9.870 ns/op
# Warmup Iteration   5: 9.885 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.863 ns/op
Iteration   3: 9.870 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.874 ns/op
Iteration   7: 9.886 ns/op
Iteration   8: 9.881 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.890 ns/op
Iteration  11: 9.896 ns/op
Iteration  12: 9.889 ns/op
Iteration  13: 9.902 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.907 ns/op
Iteration  16: 9.877 ns/op
Iteration  17: 9.901 ns/op
Iteration  18: 9.888 ns/op
Iteration  19: 9.895 ns/op
Iteration  20: 9.881 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.442 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.894 ns/op
# Warmup Iteration   4: 9.889 ns/op
# Warmup Iteration   5: 9.894 ns/op
Iteration   1: 9.898 ns/op
Iteration   2: 9.889 ns/op
Iteration   3: 9.890 ns/op
Iteration   4: 9.865 ns/op
Iteration   5: 9.875 ns/op
Iteration   6: 9.892 ns/op
Iteration   7: 9.879 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.892 ns/op
Iteration  10: 9.872 ns/op
Iteration  11: 9.864 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.887 ns/op
Iteration  14: 9.890 ns/op
Iteration  15: 9.879 ns/op
Iteration  16: 9.908 ns/op
Iteration  17: 9.887 ns/op
Iteration  18: 9.895 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.892 ns/op


Result "benchmark.StringContains.stringContains":
  9.906 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (9.856, 9.906, 9.974), stdev = 0.034
  CI (99.9%): [9.894, 9.917] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  http6ok
I8HO[zM4a
Vvi1()Zn'&.W""Xp_$ZEG}B3Pn6>/o&x\{c76s%<P+7RdY5:3fyQ	])='KgA.9nr_ivt,3&F6US[eI'+ei{;wc[?/X{[s.5:CE8 @6xO5dO  avgt  100  1463.238 ± 19.020  ns/op
StringContains.stringContains     http  http6ok
I8HO[zM4a
Vvi1()Zn'&.W""Xp_$ZEG}B3Pn6>/o&x\{c76s%<P+7RdY5:3fyQ	])='KgA.9nr_ivt,3&F6US[eI'+ei{;wc[?/X{[s.5:CE8 @6xO5dO  avgt  100     9.906 ±  0.011  ns/op

Benchmark result is saved to http_128_0_1.csv
