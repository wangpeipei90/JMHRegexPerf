# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = V,zAfhg>httpGf+l)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 268.734 ns/op
# Warmup Iteration   2: 214.180 ns/op
# Warmup Iteration   3: 184.332 ns/op
# Warmup Iteration   4: 185.173 ns/op
# Warmup Iteration   5: 185.856 ns/op
Iteration   1: 186.972 ns/op
Iteration   2: 183.313 ns/op
Iteration   3: 187.543 ns/op
Iteration   4: 185.346 ns/op
Iteration   5: 183.395 ns/op
Iteration   6: 183.441 ns/op
Iteration   7: 183.498 ns/op
Iteration   8: 184.132 ns/op
Iteration   9: 182.429 ns/op
Iteration  10: 183.349 ns/op
Iteration  11: 183.419 ns/op
Iteration  12: 183.465 ns/op
Iteration  13: 183.711 ns/op
Iteration  14: 184.403 ns/op
Iteration  15: 183.640 ns/op
Iteration  16: 182.811 ns/op
Iteration  17: 182.672 ns/op
Iteration  18: 183.029 ns/op
Iteration  19: 182.833 ns/op
Iteration  20: 182.852 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 268.415 ns/op
# Warmup Iteration   2: 218.844 ns/op
# Warmup Iteration   3: 193.768 ns/op
# Warmup Iteration   4: 194.307 ns/op
# Warmup Iteration   5: 195.062 ns/op
Iteration   1: 191.920 ns/op
Iteration   2: 196.031 ns/op
Iteration   3: 197.361 ns/op
Iteration   4: 192.774 ns/op
Iteration   5: 192.855 ns/op
Iteration   6: 191.868 ns/op
Iteration   7: 192.739 ns/op
Iteration   8: 192.725 ns/op
Iteration   9: 192.704 ns/op
Iteration  10: 192.876 ns/op
Iteration  11: 193.683 ns/op
Iteration  12: 191.867 ns/op
Iteration  13: 192.910 ns/op
Iteration  14: 192.994 ns/op
Iteration  15: 192.518 ns/op
Iteration  16: 192.531 ns/op
Iteration  17: 192.043 ns/op
Iteration  18: 192.494 ns/op
Iteration  19: 192.410 ns/op
Iteration  20: 192.729 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 254.856 ns/op
# Warmup Iteration   2: 204.552 ns/op
# Warmup Iteration   3: 171.634 ns/op
# Warmup Iteration   4: 171.673 ns/op
# Warmup Iteration   5: 172.517 ns/op
Iteration   1: 173.399 ns/op
Iteration   2: 174.505 ns/op
Iteration   3: 170.631 ns/op
Iteration   4: 170.670 ns/op
Iteration   5: 170.173 ns/op
Iteration   6: 170.232 ns/op
Iteration   7: 172.212 ns/op
Iteration   8: 170.745 ns/op
Iteration   9: 170.537 ns/op
Iteration  10: 170.569 ns/op
Iteration  11: 170.713 ns/op
Iteration  12: 170.884 ns/op
Iteration  13: 170.532 ns/op
Iteration  14: 172.172 ns/op
Iteration  15: 170.755 ns/op
Iteration  16: 170.310 ns/op
Iteration  17: 170.364 ns/op
Iteration  18: 170.021 ns/op
Iteration  19: 170.835 ns/op
Iteration  20: 170.797 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 257.939 ns/op
# Warmup Iteration   2: 203.824 ns/op
# Warmup Iteration   3: 182.962 ns/op
# Warmup Iteration   4: 184.295 ns/op
# Warmup Iteration   5: 183.594 ns/op
Iteration   1: 184.645 ns/op
Iteration   2: 185.561 ns/op
Iteration   3: 180.369 ns/op
Iteration   4: 181.876 ns/op
Iteration   5: 181.248 ns/op
Iteration   6: 181.204 ns/op
Iteration   7: 181.294 ns/op
Iteration   8: 181.620 ns/op
Iteration   9: 181.446 ns/op
Iteration  10: 180.385 ns/op
Iteration  11: 181.667 ns/op
Iteration  12: 181.945 ns/op
Iteration  13: 182.105 ns/op
Iteration  14: 181.764 ns/op
Iteration  15: 180.712 ns/op
Iteration  16: 180.768 ns/op
Iteration  17: 180.254 ns/op
Iteration  18: 181.132 ns/op
Iteration  19: 180.855 ns/op
Iteration  20: 181.110 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 262.351 ns/op
# Warmup Iteration   2: 211.603 ns/op
# Warmup Iteration   3: 181.586 ns/op
# Warmup Iteration   4: 183.110 ns/op
# Warmup Iteration   5: 181.546 ns/op
Iteration   1: 182.327 ns/op
Iteration   2: 185.944 ns/op
Iteration   3: 178.268 ns/op
Iteration   4: 179.707 ns/op
Iteration   5: 180.126 ns/op
Iteration   6: 179.411 ns/op
Iteration   7: 180.328 ns/op
Iteration   8: 180.198 ns/op
Iteration   9: 180.397 ns/op
Iteration  10: 178.259 ns/op
Iteration  11: 180.208 ns/op
Iteration  12: 180.568 ns/op
Iteration  13: 179.931 ns/op
Iteration  14: 184.154 ns/op
Iteration  15: 188.953 ns/op
Iteration  16: 180.110 ns/op
Iteration  17: 178.226 ns/op
Iteration  18: 178.812 ns/op
Iteration  19: 179.159 ns/op
Iteration  20: 179.388 ns/op


Result "benchmark.StringContains.regexMatches":
  182.038 ±(99.9%) 2.455 ns/op [Average]
  (min, avg, max) = (170.021, 182.038, 197.361), stdev = 7.238
  CI (99.9%): [179.583, 184.493] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = V,zAfhg>httpGf+l)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.480 ns/op
# Warmup Iteration   2: 9.717 ns/op
# Warmup Iteration   3: 9.956 ns/op
# Warmup Iteration   4: 9.966 ns/op
# Warmup Iteration   5: 9.947 ns/op
Iteration   1: 9.964 ns/op
Iteration   2: 9.979 ns/op
Iteration   3: 9.937 ns/op
Iteration   4: 9.955 ns/op
Iteration   5: 9.964 ns/op
Iteration   6: 9.970 ns/op
Iteration   7: 9.954 ns/op
Iteration   8: 9.972 ns/op
Iteration   9: 9.969 ns/op
Iteration  10: 9.979 ns/op
Iteration  11: 9.970 ns/op
Iteration  12: 9.973 ns/op
Iteration  13: 9.946 ns/op
Iteration  14: 9.951 ns/op
Iteration  15: 9.949 ns/op
Iteration  16: 9.933 ns/op
Iteration  17: 9.942 ns/op
Iteration  18: 9.937 ns/op
Iteration  19: 9.965 ns/op
Iteration  20: 9.951 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.223 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.838 ns/op
# Warmup Iteration   4: 9.856 ns/op
# Warmup Iteration   5: 9.839 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.856 ns/op
Iteration   3: 9.831 ns/op
Iteration   4: 9.849 ns/op
Iteration   5: 9.837 ns/op
Iteration   6: 9.849 ns/op
Iteration   7: 9.844 ns/op
Iteration   8: 9.855 ns/op
Iteration   9: 9.833 ns/op
Iteration  10: 9.842 ns/op
Iteration  11: 9.834 ns/op
Iteration  12: 9.845 ns/op
Iteration  13: 9.836 ns/op
Iteration  14: 9.839 ns/op
Iteration  15: 9.833 ns/op
Iteration  16: 9.825 ns/op
Iteration  17: 9.842 ns/op
Iteration  18: 9.833 ns/op
Iteration  19: 9.833 ns/op
Iteration  20: 9.827 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.440 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.816 ns/op
# Warmup Iteration   4: 9.798 ns/op
# Warmup Iteration   5: 9.809 ns/op
Iteration   1: 9.804 ns/op
Iteration   2: 9.821 ns/op
Iteration   3: 9.823 ns/op
Iteration   4: 9.800 ns/op
Iteration   5: 9.801 ns/op
Iteration   6: 9.799 ns/op
Iteration   7: 9.814 ns/op
Iteration   8: 9.812 ns/op
Iteration   9: 9.844 ns/op
Iteration  10: 9.798 ns/op
Iteration  11: 9.802 ns/op
Iteration  12: 9.815 ns/op
Iteration  13: 9.797 ns/op
Iteration  14: 9.810 ns/op
Iteration  15: 9.793 ns/op
Iteration  16: 9.805 ns/op
Iteration  17: 9.814 ns/op
Iteration  18: 9.816 ns/op
Iteration  19: 9.801 ns/op
Iteration  20: 9.816 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.859 ns/op
# Warmup Iteration   4: 9.847 ns/op
# Warmup Iteration   5: 9.834 ns/op
Iteration   1: 9.840 ns/op
Iteration   2: 9.849 ns/op
Iteration   3: 9.851 ns/op
Iteration   4: 9.848 ns/op
Iteration   5: 9.847 ns/op
Iteration   6: 9.838 ns/op
Iteration   7: 9.848 ns/op
Iteration   8: 9.848 ns/op
Iteration   9: 9.851 ns/op
Iteration  10: 9.847 ns/op
Iteration  11: 9.832 ns/op
Iteration  12: 9.834 ns/op
Iteration  13: 9.859 ns/op
Iteration  14: 9.834 ns/op
Iteration  15: 9.845 ns/op
Iteration  16: 9.834 ns/op
Iteration  17: 9.834 ns/op
Iteration  18: 9.843 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.841 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.228 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.977 ns/op
# Warmup Iteration   4: 9.972 ns/op
# Warmup Iteration   5: 10.011 ns/op
Iteration   1: 9.940 ns/op
Iteration   2: 9.963 ns/op
Iteration   3: 9.947 ns/op
Iteration   4: 9.948 ns/op
Iteration   5: 9.951 ns/op
Iteration   6: 9.938 ns/op
Iteration   7: 9.963 ns/op
Iteration   8: 9.955 ns/op
Iteration   9: 9.982 ns/op
Iteration  10: 9.983 ns/op
Iteration  11: 9.984 ns/op
Iteration  12: 9.964 ns/op
Iteration  13: 9.953 ns/op
Iteration  14: 9.968 ns/op
Iteration  15: 9.954 ns/op
Iteration  16: 9.955 ns/op
Iteration  17: 9.973 ns/op
Iteration  18: 9.960 ns/op
Iteration  19: 9.957 ns/op
Iteration  20: 9.988 ns/op


Result "benchmark.StringContains.stringContains":
  9.883 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (9.793, 9.883, 9.988), stdev = 0.066
  CI (99.9%): [9.860, 9.905] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  V,zAfhg>httpGf+l  avgt  100  182.038 ± 2.455  ns/op
StringContains.stringContains     http  V,zAfhg>httpGf+l  avgt  100    9.883 ± 0.022  ns/op

Benchmark result is saved to http_16_0.5_2.csv
