# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = -\"z?fEMC+h~))l)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 240.172 ns/op
# Warmup Iteration   2: 185.406 ns/op
# Warmup Iteration   3: 157.542 ns/op
# Warmup Iteration   4: 158.196 ns/op
# Warmup Iteration   5: 158.841 ns/op
Iteration   1: 159.630 ns/op
Iteration   2: 160.686 ns/op
Iteration   3: 156.914 ns/op
Iteration   4: 156.776 ns/op
Iteration   5: 156.799 ns/op
Iteration   6: 158.150 ns/op
Iteration   7: 156.880 ns/op
Iteration   8: 156.916 ns/op
Iteration   9: 156.951 ns/op
Iteration  10: 156.940 ns/op
Iteration  11: 156.945 ns/op
Iteration  12: 156.334 ns/op
Iteration  13: 156.492 ns/op
Iteration  14: 156.315 ns/op
Iteration  15: 156.415 ns/op
Iteration  16: 156.367 ns/op
Iteration  17: 156.518 ns/op
Iteration  18: 156.394 ns/op
Iteration  19: 157.245 ns/op
Iteration  20: 156.940 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 236.442 ns/op
# Warmup Iteration   2: 184.240 ns/op
# Warmup Iteration   3: 157.676 ns/op
# Warmup Iteration   4: 158.037 ns/op
# Warmup Iteration   5: 158.823 ns/op
Iteration   1: 159.526 ns/op
Iteration   2: 160.548 ns/op
Iteration   3: 157.113 ns/op
Iteration   4: 156.910 ns/op
Iteration   5: 156.845 ns/op
Iteration   6: 156.809 ns/op
Iteration   7: 156.856 ns/op
Iteration   8: 156.851 ns/op
Iteration   9: 156.917 ns/op
Iteration  10: 156.917 ns/op
Iteration  11: 157.095 ns/op
Iteration  12: 158.287 ns/op
Iteration  13: 156.635 ns/op
Iteration  14: 156.513 ns/op
Iteration  15: 156.510 ns/op
Iteration  16: 156.541 ns/op
Iteration  17: 156.510 ns/op
Iteration  18: 156.548 ns/op
Iteration  19: 156.504 ns/op
Iteration  20: 157.811 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 242.186 ns/op
# Warmup Iteration   2: 192.352 ns/op
# Warmup Iteration   3: 162.815 ns/op
# Warmup Iteration   4: 162.352 ns/op
# Warmup Iteration   5: 163.091 ns/op
Iteration   1: 164.199 ns/op
Iteration   2: 164.909 ns/op
Iteration   3: 161.094 ns/op
Iteration   4: 161.037 ns/op
Iteration   5: 161.006 ns/op
Iteration   6: 161.105 ns/op
Iteration   7: 161.062 ns/op
Iteration   8: 161.514 ns/op
Iteration   9: 160.940 ns/op
Iteration  10: 161.129 ns/op
Iteration  11: 163.771 ns/op
Iteration  12: 160.861 ns/op
Iteration  13: 160.971 ns/op
Iteration  14: 160.932 ns/op
Iteration  15: 160.988 ns/op
Iteration  16: 160.817 ns/op
Iteration  17: 160.660 ns/op
Iteration  18: 161.959 ns/op
Iteration  19: 160.728 ns/op
Iteration  20: 160.701 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 237.978 ns/op
# Warmup Iteration   2: 184.032 ns/op
# Warmup Iteration   3: 157.200 ns/op
# Warmup Iteration   4: 157.771 ns/op
# Warmup Iteration   5: 158.361 ns/op
Iteration   1: 159.190 ns/op
Iteration   2: 160.159 ns/op
Iteration   3: 157.156 ns/op
Iteration   4: 157.048 ns/op
Iteration   5: 158.234 ns/op
Iteration   6: 156.894 ns/op
Iteration   7: 156.596 ns/op
Iteration   8: 156.734 ns/op
Iteration   9: 158.423 ns/op
Iteration  10: 157.196 ns/op
Iteration  11: 156.902 ns/op
Iteration  12: 156.275 ns/op
Iteration  13: 156.289 ns/op
Iteration  14: 156.168 ns/op
Iteration  15: 156.672 ns/op
Iteration  16: 156.220 ns/op
Iteration  17: 156.266 ns/op
Iteration  18: 156.301 ns/op
Iteration  19: 156.350 ns/op
Iteration  20: 156.340 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 237.368 ns/op
# Warmup Iteration   2: 184.714 ns/op
# Warmup Iteration   3: 157.556 ns/op
# Warmup Iteration   4: 158.590 ns/op
# Warmup Iteration   5: 158.513 ns/op
Iteration   1: 159.487 ns/op
Iteration   2: 160.382 ns/op
Iteration   3: 156.418 ns/op
Iteration   4: 157.981 ns/op
Iteration   5: 156.725 ns/op
Iteration   6: 156.667 ns/op
Iteration   7: 156.810 ns/op
Iteration   8: 156.846 ns/op
Iteration   9: 157.020 ns/op
Iteration  10: 157.178 ns/op
Iteration  11: 159.959 ns/op
Iteration  12: 156.510 ns/op
Iteration  13: 156.375 ns/op
Iteration  14: 156.332 ns/op
Iteration  15: 156.278 ns/op
Iteration  16: 156.307 ns/op
Iteration  17: 156.432 ns/op
Iteration  18: 156.352 ns/op
Iteration  19: 156.521 ns/op
Iteration  20: 156.662 ns/op


Result "benchmark.StringContains.regexMatches":
  158.019 ±(99.9%) 0.711 ns/op [Average]
  (min, avg, max) = (156.168, 158.019, 164.909), stdev = 2.098
  CI (99.9%): [157.308, 158.730] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = -\"z?fEMC+h~))l)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 8.735 ns/op
# Warmup Iteration   2: 9.078 ns/op
# Warmup Iteration   3: 8.937 ns/op
# Warmup Iteration   4: 8.937 ns/op
# Warmup Iteration   5: 8.937 ns/op
Iteration   1: 8.937 ns/op
Iteration   2: 8.937 ns/op
Iteration   3: 8.937 ns/op
Iteration   4: 8.938 ns/op
Iteration   5: 8.936 ns/op
Iteration   6: 8.937 ns/op
Iteration   7: 8.937 ns/op
Iteration   8: 8.938 ns/op
Iteration   9: 8.937 ns/op
Iteration  10: 8.937 ns/op
Iteration  11: 8.937 ns/op
Iteration  12: 8.939 ns/op
Iteration  13: 8.938 ns/op
Iteration  14: 8.938 ns/op
Iteration  15: 8.938 ns/op
Iteration  16: 8.938 ns/op
Iteration  17: 8.939 ns/op
Iteration  18: 8.938 ns/op
Iteration  19: 8.938 ns/op
Iteration  20: 8.939 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 8.726 ns/op
# Warmup Iteration   2: 8.977 ns/op
# Warmup Iteration   3: 8.933 ns/op
# Warmup Iteration   4: 8.932 ns/op
# Warmup Iteration   5: 8.932 ns/op
Iteration   1: 8.933 ns/op
Iteration   2: 8.932 ns/op
Iteration   3: 8.933 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.932 ns/op
Iteration   6: 8.932 ns/op
Iteration   7: 8.932 ns/op
Iteration   8: 8.933 ns/op
Iteration   9: 8.932 ns/op
Iteration  10: 8.932 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.932 ns/op
Iteration  13: 8.933 ns/op
Iteration  14: 8.932 ns/op
Iteration  15: 8.932 ns/op
Iteration  16: 8.932 ns/op
Iteration  17: 8.932 ns/op
Iteration  18: 8.932 ns/op
Iteration  19: 8.932 ns/op
Iteration  20: 8.933 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 8.655 ns/op
# Warmup Iteration   2: 8.968 ns/op
# Warmup Iteration   3: 8.942 ns/op
# Warmup Iteration   4: 8.941 ns/op
# Warmup Iteration   5: 8.941 ns/op
Iteration   1: 8.941 ns/op
Iteration   2: 8.941 ns/op
Iteration   3: 8.941 ns/op
Iteration   4: 8.941 ns/op
Iteration   5: 8.941 ns/op
Iteration   6: 8.940 ns/op
Iteration   7: 8.941 ns/op
Iteration   8: 8.942 ns/op
Iteration   9: 8.941 ns/op
Iteration  10: 8.941 ns/op
Iteration  11: 8.942 ns/op
Iteration  12: 8.942 ns/op
Iteration  13: 8.941 ns/op
Iteration  14: 8.941 ns/op
Iteration  15: 8.942 ns/op
Iteration  16: 8.941 ns/op
Iteration  17: 8.942 ns/op
Iteration  18: 8.942 ns/op
Iteration  19: 8.942 ns/op
Iteration  20: 8.942 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 8.649 ns/op
# Warmup Iteration   2: 8.967 ns/op
# Warmup Iteration   3: 8.941 ns/op
# Warmup Iteration   4: 8.942 ns/op
# Warmup Iteration   5: 8.941 ns/op
Iteration   1: 8.941 ns/op
Iteration   2: 8.942 ns/op
Iteration   3: 8.941 ns/op
Iteration   4: 8.941 ns/op
Iteration   5: 8.941 ns/op
Iteration   6: 8.941 ns/op
Iteration   7: 8.941 ns/op
Iteration   8: 8.942 ns/op
Iteration   9: 8.942 ns/op
Iteration  10: 8.941 ns/op
Iteration  11: 8.941 ns/op
Iteration  12: 8.941 ns/op
Iteration  13: 8.941 ns/op
Iteration  14: 8.941 ns/op
Iteration  15: 8.941 ns/op
Iteration  16: 8.941 ns/op
Iteration  17: 8.941 ns/op
Iteration  18: 8.941 ns/op
Iteration  19: 8.942 ns/op
Iteration  20: 8.941 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 8.746 ns/op
# Warmup Iteration   2: 8.977 ns/op
# Warmup Iteration   3: 8.932 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.932 ns/op
Iteration   1: 8.932 ns/op
Iteration   2: 8.932 ns/op
Iteration   3: 8.932 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.932 ns/op
Iteration   6: 8.932 ns/op
Iteration   7: 8.932 ns/op
Iteration   8: 8.933 ns/op
Iteration   9: 8.932 ns/op
Iteration  10: 8.932 ns/op
Iteration  11: 8.932 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.932 ns/op
Iteration  14: 8.933 ns/op
Iteration  15: 8.932 ns/op
Iteration  16: 8.932 ns/op
Iteration  17: 8.933 ns/op
Iteration  18: 8.932 ns/op
Iteration  19: 8.932 ns/op
Iteration  20: 8.933 ns/op


Result "benchmark.StringContains.stringContains":
  8.937 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (8.932, 8.937, 8.942), stdev = 0.004
  CI (99.9%): [8.936, 8.938] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  -\"z?fEMC+h~))l  avgt  100  158.019 ± 0.711  ns/op
StringContains.stringContains     http  -\"z?fEMC+h~))l  avgt  100    8.937 ± 0.001  ns/op

Benchmark result is saved to http_16_1_11.csv
