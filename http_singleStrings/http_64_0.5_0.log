# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = dyL4L0x90\9<8_Sao;-r9|[M msU0xDQhttp1eF[\b^\Bl-qZ~}wc"v;zO#0m9)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 516.162 ns/op
# Warmup Iteration   2: 529.560 ns/op
# Warmup Iteration   3: 522.208 ns/op
# Warmup Iteration   4: 455.610 ns/op
# Warmup Iteration   5: 442.145 ns/op
Iteration   1: 446.559 ns/op
Iteration   2: 442.051 ns/op
Iteration   3: 442.156 ns/op
Iteration   4: 447.907 ns/op
Iteration   5: 441.920 ns/op
Iteration   6: 450.515 ns/op
Iteration   7: 441.795 ns/op
Iteration   8: 442.120 ns/op
Iteration   9: 451.679 ns/op
Iteration  10: 441.961 ns/op
Iteration  11: 441.877 ns/op
Iteration  12: 456.862 ns/op
Iteration  13: 442.168 ns/op
Iteration  14: 442.333 ns/op
Iteration  15: 444.442 ns/op
Iteration  16: 442.313 ns/op
Iteration  17: 442.428 ns/op
Iteration  18: 444.966 ns/op
Iteration  19: 442.859 ns/op
Iteration  20: 444.843 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 515.350 ns/op
# Warmup Iteration   2: 528.435 ns/op
# Warmup Iteration   3: 529.357 ns/op
# Warmup Iteration   4: 466.514 ns/op
# Warmup Iteration   5: 454.558 ns/op
Iteration   1: 458.257 ns/op
Iteration   2: 453.943 ns/op
Iteration   3: 454.534 ns/op
Iteration   4: 459.589 ns/op
Iteration   5: 454.452 ns/op
Iteration   6: 461.336 ns/op
Iteration   7: 454.090 ns/op
Iteration   8: 454.246 ns/op
Iteration   9: 463.388 ns/op
Iteration  10: 454.516 ns/op
Iteration  11: 452.975 ns/op
Iteration  12: 466.981 ns/op
Iteration  13: 454.346 ns/op
Iteration  14: 454.197 ns/op
Iteration  15: 456.789 ns/op
Iteration  16: 454.259 ns/op
Iteration  17: 454.355 ns/op
Iteration  18: 456.240 ns/op
Iteration  19: 453.849 ns/op
Iteration  20: 454.190 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 510.150 ns/op
# Warmup Iteration   2: 516.712 ns/op
# Warmup Iteration   3: 517.900 ns/op
# Warmup Iteration   4: 452.047 ns/op
# Warmup Iteration   5: 443.364 ns/op
Iteration   1: 447.388 ns/op
Iteration   2: 443.073 ns/op
Iteration   3: 443.219 ns/op
Iteration   4: 447.743 ns/op
Iteration   5: 442.706 ns/op
Iteration   6: 450.568 ns/op
Iteration   7: 443.935 ns/op
Iteration   8: 444.097 ns/op
Iteration   9: 454.827 ns/op
Iteration  10: 446.137 ns/op
Iteration  11: 446.087 ns/op
Iteration  12: 455.653 ns/op
Iteration  13: 444.011 ns/op
Iteration  14: 444.312 ns/op
Iteration  15: 445.644 ns/op
Iteration  16: 442.731 ns/op
Iteration  17: 442.487 ns/op
Iteration  18: 444.847 ns/op
Iteration  19: 442.661 ns/op
Iteration  20: 444.776 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 514.451 ns/op
# Warmup Iteration   2: 518.232 ns/op
# Warmup Iteration   3: 518.275 ns/op
# Warmup Iteration   4: 454.749 ns/op
# Warmup Iteration   5: 443.962 ns/op
Iteration   1: 451.257 ns/op
Iteration   2: 453.416 ns/op
Iteration   3: 453.368 ns/op
Iteration   4: 453.477 ns/op
Iteration   5: 446.279 ns/op
Iteration   6: 453.344 ns/op
Iteration   7: 443.546 ns/op
Iteration   8: 444.128 ns/op
Iteration   9: 453.046 ns/op
Iteration  10: 443.435 ns/op
Iteration  11: 443.691 ns/op
Iteration  12: 455.719 ns/op
Iteration  13: 443.286 ns/op
Iteration  14: 443.428 ns/op
Iteration  15: 449.833 ns/op
Iteration  16: 449.525 ns/op
Iteration  17: 449.672 ns/op
Iteration  18: 447.096 ns/op
Iteration  19: 443.554 ns/op
Iteration  20: 443.487 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 513.430 ns/op
# Warmup Iteration   2: 528.159 ns/op
# Warmup Iteration   3: 529.874 ns/op
# Warmup Iteration   4: 467.625 ns/op
# Warmup Iteration   5: 455.484 ns/op
Iteration   1: 459.413 ns/op
Iteration   2: 455.607 ns/op
Iteration   3: 455.406 ns/op
Iteration   4: 460.942 ns/op
Iteration   5: 455.526 ns/op
Iteration   6: 462.598 ns/op
Iteration   7: 456.332 ns/op
Iteration   8: 456.599 ns/op
Iteration   9: 466.298 ns/op
Iteration  10: 455.011 ns/op
Iteration  11: 455.199 ns/op
Iteration  12: 468.649 ns/op
Iteration  13: 455.309 ns/op
Iteration  14: 455.767 ns/op
Iteration  15: 458.827 ns/op
Iteration  16: 455.200 ns/op
Iteration  17: 455.203 ns/op
Iteration  18: 457.669 ns/op
Iteration  19: 455.764 ns/op
Iteration  20: 455.933 ns/op


Result "benchmark.StringContains.regexMatches":
  450.590 ±(99.9%) 2.290 ns/op [Average]
  (min, avg, max) = (441.795, 450.590, 468.649), stdev = 6.751
  CI (99.9%): [448.301, 452.880] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = dyL4L0x90\9<8_Sao;-r9|[M msU0xDQhttp1eF[\b^\Bl-qZ~}wc"v;zO#0m9)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.772 ns/op
# Warmup Iteration   2: 14.759 ns/op
# Warmup Iteration   3: 14.747 ns/op
# Warmup Iteration   4: 14.698 ns/op
# Warmup Iteration   5: 14.693 ns/op
Iteration   1: 14.743 ns/op
Iteration   2: 14.779 ns/op
Iteration   3: 14.718 ns/op
Iteration   4: 14.732 ns/op
Iteration   5: 14.684 ns/op
Iteration   6: 14.707 ns/op
Iteration   7: 14.727 ns/op
Iteration   8: 14.745 ns/op
Iteration   9: 14.692 ns/op
Iteration  10: 14.734 ns/op
Iteration  11: 14.736 ns/op
Iteration  12: 14.730 ns/op
Iteration  13: 14.699 ns/op
Iteration  14: 14.736 ns/op
Iteration  15: 14.732 ns/op
Iteration  16: 14.684 ns/op
Iteration  17: 14.758 ns/op
Iteration  18: 14.735 ns/op
Iteration  19: 14.680 ns/op
Iteration  20: 14.768 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.662 ns/op
# Warmup Iteration   2: 14.733 ns/op
# Warmup Iteration   3: 14.315 ns/op
# Warmup Iteration   4: 14.314 ns/op
# Warmup Iteration   5: 14.309 ns/op
Iteration   1: 14.315 ns/op
Iteration   2: 14.320 ns/op
Iteration   3: 14.337 ns/op
Iteration   4: 14.330 ns/op
Iteration   5: 14.303 ns/op
Iteration   6: 14.328 ns/op
Iteration   7: 14.315 ns/op
Iteration   8: 14.327 ns/op
Iteration   9: 14.323 ns/op
Iteration  10: 14.308 ns/op
Iteration  11: 14.320 ns/op
Iteration  12: 14.315 ns/op
Iteration  13: 14.343 ns/op
Iteration  14: 14.299 ns/op
Iteration  15: 14.344 ns/op
Iteration  16: 14.336 ns/op
Iteration  17: 14.299 ns/op
Iteration  18: 14.315 ns/op
Iteration  19: 14.315 ns/op
Iteration  20: 14.332 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.760 ns/op
# Warmup Iteration   2: 14.943 ns/op
# Warmup Iteration   3: 14.774 ns/op
# Warmup Iteration   4: 14.769 ns/op
# Warmup Iteration   5: 14.768 ns/op
Iteration   1: 14.740 ns/op
Iteration   2: 14.746 ns/op
Iteration   3: 14.786 ns/op
Iteration   4: 14.820 ns/op
Iteration   5: 14.805 ns/op
Iteration   6: 14.789 ns/op
Iteration   7: 14.824 ns/op
Iteration   8: 14.826 ns/op
Iteration   9: 14.805 ns/op
Iteration  10: 14.814 ns/op
Iteration  11: 14.745 ns/op
Iteration  12: 14.773 ns/op
Iteration  13: 14.751 ns/op
Iteration  14: 14.783 ns/op
Iteration  15: 14.773 ns/op
Iteration  16: 14.731 ns/op
Iteration  17: 14.757 ns/op
Iteration  18: 14.728 ns/op
Iteration  19: 14.727 ns/op
Iteration  20: 14.714 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.737 ns/op
# Warmup Iteration   2: 14.698 ns/op
# Warmup Iteration   3: 14.666 ns/op
# Warmup Iteration   4: 14.652 ns/op
# Warmup Iteration   5: 14.652 ns/op
Iteration   1: 14.661 ns/op
Iteration   2: 14.676 ns/op
Iteration   3: 14.648 ns/op
Iteration   4: 14.667 ns/op
Iteration   5: 14.654 ns/op
Iteration   6: 14.665 ns/op
Iteration   7: 14.662 ns/op
Iteration   8: 14.659 ns/op
Iteration   9: 14.649 ns/op
Iteration  10: 14.658 ns/op
Iteration  11: 14.663 ns/op
Iteration  12: 14.678 ns/op
Iteration  13: 14.651 ns/op
Iteration  14: 14.688 ns/op
Iteration  15: 14.633 ns/op
Iteration  16: 14.665 ns/op
Iteration  17: 14.671 ns/op
Iteration  18: 14.672 ns/op
Iteration  19: 14.623 ns/op
Iteration  20: 14.674 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.679 ns/op
# Warmup Iteration   2: 14.770 ns/op
# Warmup Iteration   3: 14.759 ns/op
# Warmup Iteration   4: 14.730 ns/op
# Warmup Iteration   5: 14.741 ns/op
Iteration   1: 14.743 ns/op
Iteration   2: 14.650 ns/op
Iteration   3: 14.739 ns/op
Iteration   4: 14.690 ns/op
Iteration   5: 14.731 ns/op
Iteration   6: 14.680 ns/op
Iteration   7: 14.669 ns/op
Iteration   8: 14.750 ns/op
Iteration   9: 14.671 ns/op
Iteration  10: 14.710 ns/op
Iteration  11: 14.743 ns/op
Iteration  12: 14.783 ns/op
Iteration  13: 14.789 ns/op
Iteration  14: 14.789 ns/op
Iteration  15: 14.781 ns/op
Iteration  16: 14.746 ns/op
Iteration  17: 14.720 ns/op
Iteration  18: 14.741 ns/op
Iteration  19: 14.763 ns/op
Iteration  20: 14.753 ns/op


Result "benchmark.StringContains.stringContains":
  14.642 ±(99.9%) 0.057 ns/op [Average]
  (min, avg, max) = (14.299, 14.642, 14.826), stdev = 0.168
  CI (99.9%): [14.586, 14.699] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  dyL4L0x90\9<8_Sao;-r9|[M msU0xDQhttp1eF[\b^\Bl-qZ~}wc"v;zO#0m9  avgt  100  450.590 ± 2.290  ns/op
StringContains.stringContains     http  dyL4L0x90\9<8_Sao;-r9|[M msU0xDQhttp1eF[\b^\Bl-qZ~}wc"v;zO#0m9  avgt  100   14.642 ± 0.057  ns/op

Benchmark result is saved to http_64_0.5_0.csv
