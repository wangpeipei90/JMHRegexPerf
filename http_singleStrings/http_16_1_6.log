# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ?{f=R#YKI|o
sc,g)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 188.562 ns/op
# Warmup Iteration   2: 111.837 ns/op
# Warmup Iteration   3: 104.913 ns/op
# Warmup Iteration   4: 104.096 ns/op
# Warmup Iteration   5: 105.386 ns/op
Iteration   1: 102.154 ns/op
Iteration   2: 102.686 ns/op
Iteration   3: 102.211 ns/op
Iteration   4: 102.645 ns/op
Iteration   5: 102.142 ns/op
Iteration   6: 102.383 ns/op
Iteration   7: 101.957 ns/op
Iteration   8: 102.160 ns/op
Iteration   9: 101.967 ns/op
Iteration  10: 102.146 ns/op
Iteration  11: 101.950 ns/op
Iteration  12: 102.206 ns/op
Iteration  13: 101.962 ns/op
Iteration  14: 102.217 ns/op
Iteration  15: 102.285 ns/op
Iteration  16: 102.224 ns/op
Iteration  17: 102.228 ns/op
Iteration  18: 101.963 ns/op
Iteration  19: 102.294 ns/op
Iteration  20: 102.218 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 183.800 ns/op
# Warmup Iteration   2: 112.257 ns/op
# Warmup Iteration   3: 107.437 ns/op
# Warmup Iteration   4: 106.637 ns/op
# Warmup Iteration   5: 107.823 ns/op
Iteration   1: 104.763 ns/op
Iteration   2: 104.817 ns/op
Iteration   3: 105.416 ns/op
Iteration   4: 104.895 ns/op
Iteration   5: 105.329 ns/op
Iteration   6: 104.934 ns/op
Iteration   7: 104.733 ns/op
Iteration   8: 104.616 ns/op
Iteration   9: 104.725 ns/op
Iteration  10: 104.562 ns/op
Iteration  11: 104.770 ns/op
Iteration  12: 104.502 ns/op
Iteration  13: 105.406 ns/op
Iteration  14: 104.541 ns/op
Iteration  15: 104.847 ns/op
Iteration  16: 104.548 ns/op
Iteration  17: 104.906 ns/op
Iteration  18: 105.175 ns/op
Iteration  19: 105.544 ns/op
Iteration  20: 104.719 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 183.832 ns/op
# Warmup Iteration   2: 112.711 ns/op
# Warmup Iteration   3: 107.160 ns/op
# Warmup Iteration   4: 106.570 ns/op
# Warmup Iteration   5: 107.596 ns/op
Iteration   1: 104.845 ns/op
Iteration   2: 104.917 ns/op
Iteration   3: 104.465 ns/op
Iteration   4: 104.569 ns/op
Iteration   5: 105.649 ns/op
Iteration   6: 105.795 ns/op
Iteration   7: 104.576 ns/op
Iteration   8: 104.270 ns/op
Iteration   9: 104.565 ns/op
Iteration  10: 104.332 ns/op
Iteration  11: 104.828 ns/op
Iteration  12: 104.569 ns/op
Iteration  13: 105.349 ns/op
Iteration  14: 104.770 ns/op
Iteration  15: 104.804 ns/op
Iteration  16: 104.669 ns/op
Iteration  17: 105.280 ns/op
Iteration  18: 104.754 ns/op
Iteration  19: 105.209 ns/op
Iteration  20: 104.754 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 181.246 ns/op
# Warmup Iteration   2: 109.039 ns/op
# Warmup Iteration   3: 105.342 ns/op
# Warmup Iteration   4: 104.515 ns/op
# Warmup Iteration   5: 105.611 ns/op
Iteration   1: 102.723 ns/op
Iteration   2: 103.625 ns/op
Iteration   3: 102.731 ns/op
Iteration   4: 103.266 ns/op
Iteration   5: 102.853 ns/op
Iteration   6: 103.077 ns/op
Iteration   7: 102.458 ns/op
Iteration   8: 103.525 ns/op
Iteration   9: 102.463 ns/op
Iteration  10: 102.790 ns/op
Iteration  11: 102.476 ns/op
Iteration  12: 102.833 ns/op
Iteration  13: 102.475 ns/op
Iteration  14: 102.927 ns/op
Iteration  15: 102.502 ns/op
Iteration  16: 102.850 ns/op
Iteration  17: 102.497 ns/op
Iteration  18: 103.106 ns/op
Iteration  19: 102.667 ns/op
Iteration  20: 102.598 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 181.515 ns/op
# Warmup Iteration   2: 109.126 ns/op
# Warmup Iteration   3: 105.332 ns/op
# Warmup Iteration   4: 104.513 ns/op
# Warmup Iteration   5: 105.675 ns/op
Iteration   1: 102.751 ns/op
Iteration   2: 103.439 ns/op
Iteration   3: 103.306 ns/op
Iteration   4: 103.313 ns/op
Iteration   5: 102.762 ns/op
Iteration   6: 103.005 ns/op
Iteration   7: 102.457 ns/op
Iteration   8: 102.633 ns/op
Iteration   9: 102.604 ns/op
Iteration  10: 102.798 ns/op
Iteration  11: 102.537 ns/op
Iteration  12: 102.937 ns/op
Iteration  13: 102.536 ns/op
Iteration  14: 102.817 ns/op
Iteration  15: 102.472 ns/op
Iteration  16: 102.935 ns/op
Iteration  17: 102.542 ns/op
Iteration  18: 102.829 ns/op
Iteration  19: 102.450 ns/op
Iteration  20: 102.922 ns/op


Result "benchmark.StringContains.regexMatches":
  103.512 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (101.950, 103.512, 105.795), stdev = 1.178
  CI (99.9%): [103.112, 103.912] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ?{f=R#YKI|o
sc,g)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 8.741 ns/op
# Warmup Iteration   2: 8.978 ns/op
# Warmup Iteration   3: 8.934 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.934 ns/op
Iteration   1: 8.934 ns/op
Iteration   2: 8.934 ns/op
Iteration   3: 8.933 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.933 ns/op
Iteration   6: 8.933 ns/op
Iteration   7: 8.933 ns/op
Iteration   8: 8.935 ns/op
Iteration   9: 8.933 ns/op
Iteration  10: 8.933 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.934 ns/op
Iteration  14: 8.933 ns/op
Iteration  15: 8.933 ns/op
Iteration  16: 8.932 ns/op
Iteration  17: 8.933 ns/op
Iteration  18: 8.933 ns/op
Iteration  19: 8.932 ns/op
Iteration  20: 8.934 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 8.748 ns/op
# Warmup Iteration   2: 8.976 ns/op
# Warmup Iteration   3: 8.933 ns/op
# Warmup Iteration   4: 8.932 ns/op
# Warmup Iteration   5: 8.932 ns/op
Iteration   1: 8.932 ns/op
Iteration   2: 8.932 ns/op
Iteration   3: 8.933 ns/op
Iteration   4: 8.932 ns/op
Iteration   5: 8.932 ns/op
Iteration   6: 8.932 ns/op
Iteration   7: 8.932 ns/op
Iteration   8: 8.933 ns/op
Iteration   9: 8.932 ns/op
Iteration  10: 8.932 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.933 ns/op
Iteration  14: 8.932 ns/op
Iteration  15: 8.932 ns/op
Iteration  16: 8.933 ns/op
Iteration  17: 8.932 ns/op
Iteration  18: 8.933 ns/op
Iteration  19: 8.932 ns/op
Iteration  20: 8.933 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 8.741 ns/op
# Warmup Iteration   2: 8.977 ns/op
# Warmup Iteration   3: 8.934 ns/op
# Warmup Iteration   4: 8.934 ns/op
# Warmup Iteration   5: 8.935 ns/op
Iteration   1: 8.934 ns/op
Iteration   2: 8.933 ns/op
Iteration   3: 8.934 ns/op
Iteration   4: 8.934 ns/op
Iteration   5: 8.935 ns/op
Iteration   6: 8.933 ns/op
Iteration   7: 8.934 ns/op
Iteration   8: 8.935 ns/op
Iteration   9: 8.933 ns/op
Iteration  10: 8.934 ns/op
Iteration  11: 8.934 ns/op
Iteration  12: 8.934 ns/op
Iteration  13: 8.934 ns/op
Iteration  14: 8.934 ns/op
Iteration  15: 8.935 ns/op
Iteration  16: 8.934 ns/op
Iteration  17: 8.934 ns/op
Iteration  18: 8.934 ns/op
Iteration  19: 8.934 ns/op
Iteration  20: 8.935 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 8.730 ns/op
# Warmup Iteration   2: 8.983 ns/op
# Warmup Iteration   3: 8.936 ns/op
# Warmup Iteration   4: 8.942 ns/op
# Warmup Iteration   5: 8.937 ns/op
Iteration   1: 8.940 ns/op
Iteration   2: 8.941 ns/op
Iteration   3: 8.946 ns/op
Iteration   4: 8.936 ns/op
Iteration   5: 8.936 ns/op
Iteration   6: 8.936 ns/op
Iteration   7: 8.937 ns/op
Iteration   8: 8.936 ns/op
Iteration   9: 8.936 ns/op
Iteration  10: 8.936 ns/op
Iteration  11: 8.936 ns/op
Iteration  12: 8.936 ns/op
Iteration  13: 8.936 ns/op
Iteration  14: 8.937 ns/op
Iteration  15: 8.936 ns/op
Iteration  16: 8.935 ns/op
Iteration  17: 8.937 ns/op
Iteration  18: 8.935 ns/op
Iteration  19: 8.941 ns/op
Iteration  20: 8.936 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 8.677 ns/op
# Warmup Iteration   2: 8.969 ns/op
# Warmup Iteration   3: 8.943 ns/op
# Warmup Iteration   4: 8.940 ns/op
# Warmup Iteration   5: 8.941 ns/op
Iteration   1: 8.941 ns/op
Iteration   2: 8.940 ns/op
Iteration   3: 8.942 ns/op
Iteration   4: 8.941 ns/op
Iteration   5: 8.942 ns/op
Iteration   6: 8.941 ns/op
Iteration   7: 8.941 ns/op
Iteration   8: 8.943 ns/op
Iteration   9: 8.941 ns/op
Iteration  10: 8.942 ns/op
Iteration  11: 8.942 ns/op
Iteration  12: 8.941 ns/op
Iteration  13: 8.941 ns/op
Iteration  14: 8.942 ns/op
Iteration  15: 8.942 ns/op
Iteration  16: 8.943 ns/op
Iteration  17: 8.942 ns/op
Iteration  18: 8.942 ns/op
Iteration  19: 8.943 ns/op
Iteration  20: 8.943 ns/op


Result "benchmark.StringContains.stringContains":
  8.936 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (8.932, 8.936, 8.946), stdev = 0.004
  CI (99.9%): [8.935, 8.937] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ?{f=R#YKI|o
sc,g  avgt  100  103.512 ± 0.400  ns/op
StringContains.stringContains     http  ?{f=R#YKI|o
sc,g  avgt  100    8.936 ± 0.001  ns/op

Benchmark result is saved to http_16_1_6.csv
