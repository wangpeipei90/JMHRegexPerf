# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 3-`http?hNg^[?_)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 310.546 ns/op
# Warmup Iteration   2: 280.531 ns/op
# Warmup Iteration   3: 228.388 ns/op
# Warmup Iteration   4: 231.099 ns/op
# Warmup Iteration   5: 231.785 ns/op
Iteration   1: 232.618 ns/op
Iteration   2: 228.672 ns/op
Iteration   3: 234.340 ns/op
Iteration   4: 235.206 ns/op
Iteration   5: 228.461 ns/op
Iteration   6: 229.998 ns/op
Iteration   7: 229.654 ns/op
Iteration   8: 228.702 ns/op
Iteration   9: 229.718 ns/op
Iteration  10: 229.582 ns/op
Iteration  11: 228.471 ns/op
Iteration  12: 229.854 ns/op
Iteration  13: 229.949 ns/op
Iteration  14: 228.898 ns/op
Iteration  15: 230.034 ns/op
Iteration  16: 229.920 ns/op
Iteration  17: 230.091 ns/op
Iteration  18: 228.962 ns/op
Iteration  19: 229.643 ns/op
Iteration  20: 230.167 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 297.553 ns/op
# Warmup Iteration   2: 276.982 ns/op
# Warmup Iteration   3: 218.040 ns/op
# Warmup Iteration   4: 218.628 ns/op
# Warmup Iteration   5: 220.112 ns/op
Iteration   1: 221.169 ns/op
Iteration   2: 222.202 ns/op
Iteration   3: 217.457 ns/op
Iteration   4: 223.548 ns/op
Iteration   5: 218.630 ns/op
Iteration   6: 217.200 ns/op
Iteration   7: 218.192 ns/op
Iteration   8: 218.566 ns/op
Iteration   9: 218.363 ns/op
Iteration  10: 217.377 ns/op
Iteration  11: 218.227 ns/op
Iteration  12: 218.109 ns/op
Iteration  13: 217.356 ns/op
Iteration  14: 218.075 ns/op
Iteration  15: 218.132 ns/op
Iteration  16: 218.275 ns/op
Iteration  17: 217.208 ns/op
Iteration  18: 217.661 ns/op
Iteration  19: 217.703 ns/op
Iteration  20: 217.234 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 296.210 ns/op
# Warmup Iteration   2: 278.140 ns/op
# Warmup Iteration   3: 219.092 ns/op
# Warmup Iteration   4: 216.965 ns/op
# Warmup Iteration   5: 219.660 ns/op
Iteration   1: 220.668 ns/op
Iteration   2: 221.812 ns/op
Iteration   3: 216.879 ns/op
Iteration   4: 223.080 ns/op
Iteration   5: 218.520 ns/op
Iteration   6: 216.978 ns/op
Iteration   7: 218.185 ns/op
Iteration   8: 217.913 ns/op
Iteration   9: 217.972 ns/op
Iteration  10: 216.932 ns/op
Iteration  11: 217.981 ns/op
Iteration  12: 218.102 ns/op
Iteration  13: 216.902 ns/op
Iteration  14: 218.253 ns/op
Iteration  15: 219.875 ns/op
Iteration  16: 218.327 ns/op
Iteration  17: 216.827 ns/op
Iteration  18: 219.025 ns/op
Iteration  19: 217.856 ns/op
Iteration  20: 216.841 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 299.974 ns/op
# Warmup Iteration   2: 278.521 ns/op
# Warmup Iteration   3: 218.188 ns/op
# Warmup Iteration   4: 221.373 ns/op
# Warmup Iteration   5: 221.158 ns/op
Iteration   1: 221.989 ns/op
Iteration   2: 223.421 ns/op
Iteration   3: 218.164 ns/op
Iteration   4: 224.670 ns/op
Iteration   5: 219.533 ns/op
Iteration   6: 218.126 ns/op
Iteration   7: 220.080 ns/op
Iteration   8: 219.496 ns/op
Iteration   9: 219.462 ns/op
Iteration  10: 217.999 ns/op
Iteration  11: 219.542 ns/op
Iteration  12: 219.224 ns/op
Iteration  13: 218.297 ns/op
Iteration  14: 220.008 ns/op
Iteration  15: 220.541 ns/op
Iteration  16: 218.494 ns/op
Iteration  17: 219.597 ns/op
Iteration  18: 218.906 ns/op
Iteration  19: 218.752 ns/op
Iteration  20: 218.360 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 294.500 ns/op
# Warmup Iteration   2: 268.285 ns/op
# Warmup Iteration   3: 211.187 ns/op
# Warmup Iteration   4: 209.219 ns/op
# Warmup Iteration   5: 211.763 ns/op
Iteration   1: 212.796 ns/op
Iteration   2: 213.831 ns/op
Iteration   3: 210.970 ns/op
Iteration   4: 213.451 ns/op
Iteration   5: 212.527 ns/op
Iteration   6: 214.847 ns/op
Iteration   7: 209.570 ns/op
Iteration   8: 210.186 ns/op
Iteration   9: 210.042 ns/op
Iteration  10: 210.655 ns/op
Iteration  11: 211.342 ns/op
Iteration  12: 210.210 ns/op
Iteration  13: 210.213 ns/op
Iteration  14: 210.289 ns/op
Iteration  15: 209.215 ns/op
Iteration  16: 210.232 ns/op
Iteration  17: 209.700 ns/op
Iteration  18: 209.998 ns/op
Iteration  19: 209.196 ns/op
Iteration  20: 209.832 ns/op


Result "benchmark.StringContains.regexMatches":
  219.563 ±(99.9%) 2.171 ns/op [Average]
  (min, avg, max) = (209.196, 219.563, 235.206), stdev = 6.401
  CI (99.9%): [217.392, 221.734] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 3-`http?hNg^[?_)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.423 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.928 ns/op
# Warmup Iteration   4: 9.939 ns/op
# Warmup Iteration   5: 9.975 ns/op
Iteration   1: 9.941 ns/op
Iteration   2: 9.983 ns/op
Iteration   3: 9.946 ns/op
Iteration   4: 9.914 ns/op
Iteration   5: 9.954 ns/op
Iteration   6: 9.953 ns/op
Iteration   7: 9.941 ns/op
Iteration   8: 9.933 ns/op
Iteration   9: 9.937 ns/op
Iteration  10: 9.946 ns/op
Iteration  11: 9.966 ns/op
Iteration  12: 9.947 ns/op
Iteration  13: 9.934 ns/op
Iteration  14: 9.944 ns/op
Iteration  15: 9.938 ns/op
Iteration  16: 9.949 ns/op
Iteration  17: 9.940 ns/op
Iteration  18: 9.970 ns/op
Iteration  19: 9.942 ns/op
Iteration  20: 9.955 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.190 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.993 ns/op
# Warmup Iteration   4: 9.992 ns/op
# Warmup Iteration   5: 9.985 ns/op
Iteration   1: 9.985 ns/op
Iteration   2: 9.972 ns/op
Iteration   3: 9.979 ns/op
Iteration   4: 9.962 ns/op
Iteration   5: 9.983 ns/op
Iteration   6: 9.975 ns/op
Iteration   7: 9.966 ns/op
Iteration   8: 10.004 ns/op
Iteration   9: 9.967 ns/op
Iteration  10: 10.002 ns/op
Iteration  11: 9.992 ns/op
Iteration  12: 9.964 ns/op
Iteration  13: 9.999 ns/op
Iteration  14: 10.004 ns/op
Iteration  15: 9.991 ns/op
Iteration  16: 10.007 ns/op
Iteration  17: 9.988 ns/op
Iteration  18: 10.012 ns/op
Iteration  19: 9.993 ns/op
Iteration  20: 9.981 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.493 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.827 ns/op
# Warmup Iteration   4: 9.828 ns/op
# Warmup Iteration   5: 9.819 ns/op
Iteration   1: 9.833 ns/op
Iteration   2: 9.817 ns/op
Iteration   3: 9.803 ns/op
Iteration   4: 9.814 ns/op
Iteration   5: 9.812 ns/op
Iteration   6: 9.804 ns/op
Iteration   7: 9.809 ns/op
Iteration   8: 9.809 ns/op
Iteration   9: 9.818 ns/op
Iteration  10: 9.814 ns/op
Iteration  11: 9.812 ns/op
Iteration  12: 9.828 ns/op
Iteration  13: 9.796 ns/op
Iteration  14: 9.809 ns/op
Iteration  15: 9.840 ns/op
Iteration  16: 9.810 ns/op
Iteration  17: 9.816 ns/op
Iteration  18: 9.811 ns/op
Iteration  19: 9.840 ns/op
Iteration  20: 9.818 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.863 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.862 ns/op
Iteration   1: 9.867 ns/op
Iteration   2: 9.850 ns/op
Iteration   3: 9.874 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.859 ns/op
Iteration   6: 9.875 ns/op
Iteration   7: 9.871 ns/op
Iteration   8: 9.862 ns/op
Iteration   9: 9.849 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.855 ns/op
Iteration  12: 9.852 ns/op
Iteration  13: 9.861 ns/op
Iteration  14: 9.872 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.864 ns/op
Iteration  17: 9.866 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.863 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.216 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.864 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.873 ns/op
Iteration   1: 9.871 ns/op
Iteration   2: 9.874 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.884 ns/op
Iteration   6: 9.860 ns/op
Iteration   7: 9.872 ns/op
Iteration   8: 9.875 ns/op
Iteration   9: 9.883 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.884 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.877 ns/op
Iteration  15: 9.888 ns/op
Iteration  16: 9.860 ns/op
Iteration  17: 9.871 ns/op
Iteration  18: 9.875 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.869 ns/op


Result "benchmark.StringContains.stringContains":
  9.897 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (9.796, 9.897, 10.012), stdev = 0.063
  CI (99.9%): [9.875, 9.918] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  3-`http?hNg^[?_  avgt  100  219.563 ± 2.171  ns/op
StringContains.stringContains     http  3-`http?hNg^[?_  avgt  100    9.897 ± 0.021  ns/op

Benchmark result is saved to http_16_0.25_11.csv
