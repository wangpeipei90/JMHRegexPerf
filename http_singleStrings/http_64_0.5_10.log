# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = )K#
3Rp)UNXE"ShhP]'1svx:%};,`EAAhttpp;!-&G{^VE/trha8!6	'7YS6zAeU)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 506.525 ns/op
# Warmup Iteration   2: 501.110 ns/op
# Warmup Iteration   3: 556.577 ns/op
# Warmup Iteration   4: 473.984 ns/op
# Warmup Iteration   5: 461.102 ns/op
Iteration   1: 465.644 ns/op
Iteration   2: 460.871 ns/op
Iteration   3: 460.828 ns/op
Iteration   4: 467.866 ns/op
Iteration   5: 461.065 ns/op
Iteration   6: 462.957 ns/op
Iteration   7: 468.445 ns/op
Iteration   8: 461.097 ns/op
Iteration   9: 473.637 ns/op
Iteration  10: 462.358 ns/op
Iteration  11: 461.747 ns/op
Iteration  12: 476.500 ns/op
Iteration  13: 460.301 ns/op
Iteration  14: 460.953 ns/op
Iteration  15: 464.534 ns/op
Iteration  16: 461.167 ns/op
Iteration  17: 460.880 ns/op
Iteration  18: 463.465 ns/op
Iteration  19: 460.895 ns/op
Iteration  20: 460.971 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 507.014 ns/op
# Warmup Iteration   2: 524.900 ns/op
# Warmup Iteration   3: 522.766 ns/op
# Warmup Iteration   4: 455.542 ns/op
# Warmup Iteration   5: 446.053 ns/op
Iteration   1: 450.320 ns/op
Iteration   2: 445.798 ns/op
Iteration   3: 445.715 ns/op
Iteration   4: 451.675 ns/op
Iteration   5: 445.692 ns/op
Iteration   6: 453.242 ns/op
Iteration   7: 445.550 ns/op
Iteration   8: 445.817 ns/op
Iteration   9: 455.269 ns/op
Iteration  10: 445.377 ns/op
Iteration  11: 445.553 ns/op
Iteration  12: 458.644 ns/op
Iteration  13: 445.444 ns/op
Iteration  14: 445.726 ns/op
Iteration  15: 448.369 ns/op
Iteration  16: 445.601 ns/op
Iteration  17: 445.730 ns/op
Iteration  18: 447.677 ns/op
Iteration  19: 445.932 ns/op
Iteration  20: 447.508 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 514.461 ns/op
# Warmup Iteration   2: 522.835 ns/op
# Warmup Iteration   3: 524.754 ns/op
# Warmup Iteration   4: 460.390 ns/op
# Warmup Iteration   5: 448.617 ns/op
Iteration   1: 452.192 ns/op
Iteration   2: 448.647 ns/op
Iteration   3: 448.671 ns/op
Iteration   4: 453.799 ns/op
Iteration   5: 448.554 ns/op
Iteration   6: 455.602 ns/op
Iteration   7: 448.434 ns/op
Iteration   8: 448.546 ns/op
Iteration   9: 458.384 ns/op
Iteration  10: 448.742 ns/op
Iteration  11: 448.856 ns/op
Iteration  12: 461.327 ns/op
Iteration  13: 448.982 ns/op
Iteration  14: 448.675 ns/op
Iteration  15: 450.470 ns/op
Iteration  16: 448.554 ns/op
Iteration  17: 448.637 ns/op
Iteration  18: 450.053 ns/op
Iteration  19: 449.341 ns/op
Iteration  20: 448.956 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 509.866 ns/op
# Warmup Iteration   2: 522.852 ns/op
# Warmup Iteration   3: 523.643 ns/op
# Warmup Iteration   4: 460.723 ns/op
# Warmup Iteration   5: 446.947 ns/op
Iteration   1: 452.571 ns/op
Iteration   2: 446.920 ns/op
Iteration   3: 446.966 ns/op
Iteration   4: 452.957 ns/op
Iteration   5: 446.865 ns/op
Iteration   6: 456.283 ns/op
Iteration   7: 446.807 ns/op
Iteration   8: 447.095 ns/op
Iteration   9: 457.007 ns/op
Iteration  10: 446.910 ns/op
Iteration  11: 447.763 ns/op
Iteration  12: 460.190 ns/op
Iteration  13: 447.503 ns/op
Iteration  14: 447.452 ns/op
Iteration  15: 450.827 ns/op
Iteration  16: 447.366 ns/op
Iteration  17: 447.370 ns/op
Iteration  18: 449.735 ns/op
Iteration  19: 447.113 ns/op
Iteration  20: 447.483 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 496.637 ns/op
# Warmup Iteration   2: 510.715 ns/op
# Warmup Iteration   3: 510.566 ns/op
# Warmup Iteration   4: 441.664 ns/op
# Warmup Iteration   5: 435.807 ns/op
Iteration   1: 439.994 ns/op
Iteration   2: 435.723 ns/op
Iteration   3: 441.437 ns/op
Iteration   4: 435.374 ns/op
Iteration   5: 435.612 ns/op
Iteration   6: 443.041 ns/op
Iteration   7: 435.402 ns/op
Iteration   8: 435.622 ns/op
Iteration   9: 445.175 ns/op
Iteration  10: 435.716 ns/op
Iteration  11: 442.080 ns/op
Iteration  12: 441.430 ns/op
Iteration  13: 435.541 ns/op
Iteration  14: 438.114 ns/op
Iteration  15: 435.946 ns/op
Iteration  16: 436.384 ns/op
Iteration  17: 438.141 ns/op
Iteration  18: 436.022 ns/op
Iteration  19: 435.343 ns/op
Iteration  20: 437.860 ns/op


Result "benchmark.StringContains.regexMatches":
  450.054 ±(99.9%) 3.088 ns/op [Average]
  (min, avg, max) = (435.343, 450.054, 476.500), stdev = 9.104
  CI (99.9%): [446.966, 453.141] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = )K#
3Rp)UNXE"ShhP]'1svx:%};,`EAAhttpp;!-&G{^VE/trha8!6	'7YS6zAeU)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 14.853 ns/op
# Warmup Iteration   2: 15.862 ns/op
# Warmup Iteration   3: 16.086 ns/op
# Warmup Iteration   4: 16.097 ns/op
# Warmup Iteration   5: 16.081 ns/op
Iteration   1: 16.059 ns/op
Iteration   2: 16.031 ns/op
Iteration   3: 16.001 ns/op
Iteration   4: 16.081 ns/op
Iteration   5: 16.089 ns/op
Iteration   6: 16.055 ns/op
Iteration   7: 16.110 ns/op
Iteration   8: 16.066 ns/op
Iteration   9: 16.060 ns/op
Iteration  10: 16.073 ns/op
Iteration  11: 16.066 ns/op
Iteration  12: 16.016 ns/op
Iteration  13: 15.997 ns/op
Iteration  14: 15.954 ns/op
Iteration  15: 16.014 ns/op
Iteration  16: 15.973 ns/op
Iteration  17: 16.058 ns/op
Iteration  18: 16.020 ns/op
Iteration  19: 15.958 ns/op
Iteration  20: 16.030 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.190 ns/op
# Warmup Iteration   2: 15.332 ns/op
# Warmup Iteration   3: 16.212 ns/op
# Warmup Iteration   4: 16.173 ns/op
# Warmup Iteration   5: 16.201 ns/op
Iteration   1: 16.191 ns/op
Iteration   2: 16.228 ns/op
Iteration   3: 16.224 ns/op
Iteration   4: 16.205 ns/op
Iteration   5: 16.207 ns/op
Iteration   6: 16.181 ns/op
Iteration   7: 16.143 ns/op
Iteration   8: 16.216 ns/op
Iteration   9: 16.183 ns/op
Iteration  10: 16.156 ns/op
Iteration  11: 16.239 ns/op
Iteration  12: 16.146 ns/op
Iteration  13: 16.131 ns/op
Iteration  14: 16.178 ns/op
Iteration  15: 16.180 ns/op
Iteration  16: 16.178 ns/op
Iteration  17: 16.171 ns/op
Iteration  18: 16.167 ns/op
Iteration  19: 16.122 ns/op
Iteration  20: 16.184 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 14.940 ns/op
# Warmup Iteration   2: 15.306 ns/op
# Warmup Iteration   3: 16.126 ns/op
# Warmup Iteration   4: 16.165 ns/op
# Warmup Iteration   5: 16.123 ns/op
Iteration   1: 16.166 ns/op
Iteration   2: 16.139 ns/op
Iteration   3: 16.174 ns/op
Iteration   4: 16.224 ns/op
Iteration   5: 16.152 ns/op
Iteration   6: 16.155 ns/op
Iteration   7: 16.135 ns/op
Iteration   8: 16.128 ns/op
Iteration   9: 16.145 ns/op
Iteration  10: 16.111 ns/op
Iteration  11: 16.172 ns/op
Iteration  12: 16.134 ns/op
Iteration  13: 16.191 ns/op
Iteration  14: 16.184 ns/op
Iteration  15: 16.196 ns/op
Iteration  16: 16.198 ns/op
Iteration  17: 16.207 ns/op
Iteration  18: 16.134 ns/op
Iteration  19: 16.172 ns/op
Iteration  20: 16.145 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 14.812 ns/op
# Warmup Iteration   2: 15.304 ns/op
# Warmup Iteration   3: 16.102 ns/op
# Warmup Iteration   4: 16.094 ns/op
# Warmup Iteration   5: 16.078 ns/op
Iteration   1: 16.077 ns/op
Iteration   2: 16.073 ns/op
Iteration   3: 16.052 ns/op
Iteration   4: 16.069 ns/op
Iteration   5: 16.111 ns/op
Iteration   6: 16.100 ns/op
Iteration   7: 16.094 ns/op
Iteration   8: 16.093 ns/op
Iteration   9: 16.076 ns/op
Iteration  10: 16.042 ns/op
Iteration  11: 16.090 ns/op
Iteration  12: 16.105 ns/op
Iteration  13: 16.127 ns/op
Iteration  14: 16.132 ns/op
Iteration  15: 16.100 ns/op
Iteration  16: 16.073 ns/op
Iteration  17: 16.150 ns/op
Iteration  18: 16.095 ns/op
Iteration  19: 16.059 ns/op
Iteration  20: 16.100 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 14.810 ns/op
# Warmup Iteration   2: 15.316 ns/op
# Warmup Iteration   3: 16.078 ns/op
# Warmup Iteration   4: 16.060 ns/op
# Warmup Iteration   5: 16.055 ns/op
Iteration   1: 16.068 ns/op
Iteration   2: 16.045 ns/op
Iteration   3: 16.105 ns/op
Iteration   4: 16.051 ns/op
Iteration   5: 16.065 ns/op
Iteration   6: 16.050 ns/op
Iteration   7: 16.087 ns/op
Iteration   8: 16.104 ns/op
Iteration   9: 16.092 ns/op
Iteration  10: 16.100 ns/op
Iteration  11: 16.073 ns/op
Iteration  12: 15.996 ns/op
Iteration  13: 16.056 ns/op
Iteration  14: 16.029 ns/op
Iteration  15: 16.048 ns/op
Iteration  16: 15.979 ns/op
Iteration  17: 16.005 ns/op
Iteration  18: 16.013 ns/op
Iteration  19: 16.017 ns/op
Iteration  20: 16.017 ns/op


Result "benchmark.StringContains.stringContains":
  16.104 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (15.954, 16.104, 16.239), stdev = 0.068
  CI (99.9%): [16.081, 16.127] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  )K#
3Rp)UNXE"ShhP]'1svx:%};,`EAAhttpp;!-&G{^VE/trha8!6	'7YS6zAeU  avgt  100  450.054 ± 3.088  ns/op
StringContains.stringContains     http  )K#
3Rp)UNXE"ShhP]'1svx:%};,`EAAhttpp;!-&G{^VE/trha8!6	'7YS6zAeU  avgt  100   16.104 ± 0.023  ns/op

Benchmark result is saved to http_64_0.5_10.csv
