# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = iq ~J}OJ*_n+DH$`5GP29BUX.1Ef/p&gdYa	L'wH]wR$2.x](%a3.mDA%\]~2)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 251.417 ns/op
# Warmup Iteration   2: 199.475 ns/op
# Warmup Iteration   3: 165.026 ns/op
# Warmup Iteration   4: 165.550 ns/op
# Warmup Iteration   5: 166.278 ns/op
Iteration   1: 167.201 ns/op
Iteration   2: 168.681 ns/op
Iteration   3: 164.220 ns/op
Iteration   4: 164.146 ns/op
Iteration   5: 164.142 ns/op
Iteration   6: 164.141 ns/op
Iteration   7: 164.223 ns/op
Iteration   8: 164.216 ns/op
Iteration   9: 164.227 ns/op
Iteration  10: 164.430 ns/op
Iteration  11: 165.512 ns/op
Iteration  12: 163.784 ns/op
Iteration  13: 163.390 ns/op
Iteration  14: 163.990 ns/op
Iteration  15: 163.740 ns/op
Iteration  16: 163.730 ns/op
Iteration  17: 163.794 ns/op
Iteration  18: 163.892 ns/op
Iteration  19: 163.809 ns/op
Iteration  20: 164.029 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 265.806 ns/op
# Warmup Iteration   2: 228.117 ns/op
# Warmup Iteration   3: 186.864 ns/op
# Warmup Iteration   4: 188.383 ns/op
# Warmup Iteration   5: 188.425 ns/op
Iteration   1: 189.132 ns/op
Iteration   2: 185.087 ns/op
Iteration   3: 190.100 ns/op
Iteration   4: 185.874 ns/op
Iteration   5: 185.807 ns/op
Iteration   6: 185.828 ns/op
Iteration   7: 185.945 ns/op
Iteration   8: 184.944 ns/op
Iteration   9: 186.001 ns/op
Iteration  10: 185.943 ns/op
Iteration  11: 186.964 ns/op
Iteration  12: 186.247 ns/op
Iteration  13: 186.319 ns/op
Iteration  14: 184.925 ns/op
Iteration  15: 185.972 ns/op
Iteration  16: 185.558 ns/op
Iteration  17: 185.669 ns/op
Iteration  18: 185.490 ns/op
Iteration  19: 185.390 ns/op
Iteration  20: 184.851 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 270.591 ns/op
# Warmup Iteration   2: 235.545 ns/op
# Warmup Iteration   3: 190.742 ns/op
# Warmup Iteration   4: 191.278 ns/op
# Warmup Iteration   5: 192.196 ns/op
Iteration   1: 188.749 ns/op
Iteration   2: 192.743 ns/op
Iteration   3: 195.066 ns/op
Iteration   4: 189.808 ns/op
Iteration   5: 189.724 ns/op
Iteration   6: 190.194 ns/op
Iteration   7: 188.817 ns/op
Iteration   8: 190.806 ns/op
Iteration   9: 190.339 ns/op
Iteration  10: 189.880 ns/op
Iteration  11: 190.282 ns/op
Iteration  12: 188.809 ns/op
Iteration  13: 190.116 ns/op
Iteration  14: 191.495 ns/op
Iteration  15: 189.391 ns/op
Iteration  16: 189.303 ns/op
Iteration  17: 190.150 ns/op
Iteration  18: 188.785 ns/op
Iteration  19: 189.384 ns/op
Iteration  20: 189.599 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 272.126 ns/op
# Warmup Iteration   2: 236.041 ns/op
# Warmup Iteration   3: 191.044 ns/op
# Warmup Iteration   4: 191.589 ns/op
# Warmup Iteration   5: 192.444 ns/op
Iteration   1: 189.102 ns/op
Iteration   2: 193.302 ns/op
Iteration   3: 194.423 ns/op
Iteration   4: 190.228 ns/op
Iteration   5: 190.252 ns/op
Iteration   6: 189.062 ns/op
Iteration   7: 190.335 ns/op
Iteration   8: 190.839 ns/op
Iteration   9: 191.175 ns/op
Iteration  10: 191.153 ns/op
Iteration  11: 190.203 ns/op
Iteration  12: 189.071 ns/op
Iteration  13: 190.727 ns/op
Iteration  14: 191.698 ns/op
Iteration  15: 189.842 ns/op
Iteration  16: 189.820 ns/op
Iteration  17: 189.509 ns/op
Iteration  18: 189.083 ns/op
Iteration  19: 189.590 ns/op
Iteration  20: 189.725 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 266.182 ns/op
# Warmup Iteration   2: 227.530 ns/op
# Warmup Iteration   3: 186.493 ns/op
# Warmup Iteration   4: 187.118 ns/op
# Warmup Iteration   5: 187.854 ns/op
Iteration   1: 188.941 ns/op
Iteration   2: 184.809 ns/op
Iteration   3: 189.976 ns/op
Iteration   4: 185.749 ns/op
Iteration   5: 185.579 ns/op
Iteration   6: 185.535 ns/op
Iteration   7: 185.553 ns/op
Iteration   8: 184.731 ns/op
Iteration   9: 185.621 ns/op
Iteration  10: 185.667 ns/op
Iteration  11: 185.806 ns/op
Iteration  12: 187.298 ns/op
Iteration  13: 187.265 ns/op
Iteration  14: 184.722 ns/op
Iteration  15: 185.255 ns/op
Iteration  16: 186.470 ns/op
Iteration  17: 185.184 ns/op
Iteration  18: 185.349 ns/op
Iteration  19: 185.345 ns/op
Iteration  20: 184.790 ns/op


Result "benchmark.StringContains.regexMatches":
  183.436 ±(99.9%) 3.330 ns/op [Average]
  (min, avg, max) = (163.390, 183.436, 195.066), stdev = 9.819
  CI (99.9%): [180.106, 186.766] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = iq ~J}OJ*_n+DH$`5GP29BUX.1Ef/p&gdYa	L'wH]wR$2.x](%a3.mDA%\]~2)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.464 ns/op
# Warmup Iteration   2: 15.736 ns/op
# Warmup Iteration   3: 16.026 ns/op
# Warmup Iteration   4: 16.026 ns/op
# Warmup Iteration   5: 16.032 ns/op
Iteration   1: 16.026 ns/op
Iteration   2: 16.024 ns/op
Iteration   3: 16.025 ns/op
Iteration   4: 16.027 ns/op
Iteration   5: 16.025 ns/op
Iteration   6: 16.026 ns/op
Iteration   7: 16.024 ns/op
Iteration   8: 16.027 ns/op
Iteration   9: 16.024 ns/op
Iteration  10: 16.027 ns/op
Iteration  11: 16.027 ns/op
Iteration  12: 17.520 ns/op
Iteration  13: 17.525 ns/op
Iteration  14: 17.514 ns/op
Iteration  15: 17.519 ns/op
Iteration  16: 17.519 ns/op
Iteration  17: 17.519 ns/op
Iteration  18: 17.521 ns/op
Iteration  19: 17.520 ns/op
Iteration  20: 17.518 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.460 ns/op
# Warmup Iteration   2: 15.733 ns/op
# Warmup Iteration   3: 16.026 ns/op
# Warmup Iteration   4: 16.026 ns/op
# Warmup Iteration   5: 16.027 ns/op
Iteration   1: 16.025 ns/op
Iteration   2: 16.026 ns/op
Iteration   3: 16.027 ns/op
Iteration   4: 16.023 ns/op
Iteration   5: 16.030 ns/op
Iteration   6: 16.026 ns/op
Iteration   7: 16.027 ns/op
Iteration   8: 16.027 ns/op
Iteration   9: 16.024 ns/op
Iteration  10: 16.025 ns/op
Iteration  11: 16.025 ns/op
Iteration  12: 17.519 ns/op
Iteration  13: 17.518 ns/op
Iteration  14: 17.513 ns/op
Iteration  15: 17.525 ns/op
Iteration  16: 17.519 ns/op
Iteration  17: 17.520 ns/op
Iteration  18: 17.520 ns/op
Iteration  19: 17.520 ns/op
Iteration  20: 17.521 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.384 ns/op
# Warmup Iteration   2: 15.701 ns/op
# Warmup Iteration   3: 15.994 ns/op
# Warmup Iteration   4: 15.990 ns/op
# Warmup Iteration   5: 15.993 ns/op
Iteration   1: 15.993 ns/op
Iteration   2: 15.992 ns/op
Iteration   3: 15.993 ns/op
Iteration   4: 15.991 ns/op
Iteration   5: 15.990 ns/op
Iteration   6: 15.993 ns/op
Iteration   7: 15.989 ns/op
Iteration   8: 15.993 ns/op
Iteration   9: 15.989 ns/op
Iteration  10: 15.987 ns/op
Iteration  11: 15.991 ns/op
Iteration  12: 15.988 ns/op
Iteration  13: 15.992 ns/op
Iteration  14: 15.993 ns/op
Iteration  15: 15.988 ns/op
Iteration  16: 15.988 ns/op
Iteration  17: 15.984 ns/op
Iteration  18: 15.990 ns/op
Iteration  19: 16.311 ns/op
Iteration  20: 15.990 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.475 ns/op
# Warmup Iteration   2: 15.732 ns/op
# Warmup Iteration   3: 16.321 ns/op
# Warmup Iteration   4: 16.330 ns/op
# Warmup Iteration   5: 16.305 ns/op
Iteration   1: 16.320 ns/op
Iteration   2: 16.314 ns/op
Iteration   3: 16.317 ns/op
Iteration   4: 16.318 ns/op
Iteration   5: 16.318 ns/op
Iteration   6: 16.320 ns/op
Iteration   7: 16.308 ns/op
Iteration   8: 16.320 ns/op
Iteration   9: 16.313 ns/op
Iteration  10: 16.327 ns/op
Iteration  11: 16.366 ns/op
Iteration  12: 17.530 ns/op
Iteration  13: 17.524 ns/op
Iteration  14: 17.525 ns/op
Iteration  15: 17.536 ns/op
Iteration  16: 17.524 ns/op
Iteration  17: 17.527 ns/op
Iteration  18: 17.517 ns/op
Iteration  19: 17.524 ns/op
Iteration  20: 17.531 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.468 ns/op
# Warmup Iteration   2: 15.731 ns/op
# Warmup Iteration   3: 16.023 ns/op
# Warmup Iteration   4: 16.019 ns/op
# Warmup Iteration   5: 16.021 ns/op
Iteration   1: 16.019 ns/op
Iteration   2: 16.019 ns/op
Iteration   3: 16.019 ns/op
Iteration   4: 16.020 ns/op
Iteration   5: 16.020 ns/op
Iteration   6: 16.017 ns/op
Iteration   7: 16.017 ns/op
Iteration   8: 16.022 ns/op
Iteration   9: 16.019 ns/op
Iteration  10: 16.020 ns/op
Iteration  11: 16.018 ns/op
Iteration  12: 17.514 ns/op
Iteration  13: 17.515 ns/op
Iteration  14: 17.515 ns/op
Iteration  15: 17.511 ns/op
Iteration  16: 17.514 ns/op
Iteration  17: 17.512 ns/op
Iteration  18: 17.515 ns/op
Iteration  19: 17.515 ns/op
Iteration  20: 17.515 ns/op


Result "benchmark.StringContains.stringContains":
  16.592 ±(99.9%) 0.240 ns/op [Average]
  (min, avg, max) = (15.984, 16.592, 17.536), stdev = 0.707
  CI (99.9%): [16.352, 16.831] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  iq ~J}OJ*_n+DH$`5GP29BUX.1Ef/p&gdYa	L'wH]wR$2.x](%a3.mDA%\]~2  avgt  100  183.436 ± 3.330  ns/op
StringContains.stringContains     http  iq ~J}OJ*_n+DH$`5GP29BUX.1Ef/p&gdYa	L'wH]wR$2.x](%a3.mDA%\]~2  avgt  100   16.592 ± 0.240  ns/op

Benchmark result is saved to http_64_1_3.csv
