# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 7Y>0J;,}httpNa@`)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 261.481 ns/op
# Warmup Iteration   2: 206.168 ns/op
# Warmup Iteration   3: 181.799 ns/op
# Warmup Iteration   4: 182.526 ns/op
# Warmup Iteration   5: 183.300 ns/op
Iteration   1: 184.340 ns/op
Iteration   2: 186.580 ns/op
Iteration   3: 180.085 ns/op
Iteration   4: 181.464 ns/op
Iteration   5: 180.978 ns/op
Iteration   6: 180.952 ns/op
Iteration   7: 181.022 ns/op
Iteration   8: 180.893 ns/op
Iteration   9: 181.028 ns/op
Iteration  10: 180.003 ns/op
Iteration  11: 181.023 ns/op
Iteration  12: 181.084 ns/op
Iteration  13: 181.264 ns/op
Iteration  14: 180.764 ns/op
Iteration  15: 180.980 ns/op
Iteration  16: 180.756 ns/op
Iteration  17: 180.337 ns/op
Iteration  18: 180.802 ns/op
Iteration  19: 180.738 ns/op
Iteration  20: 181.705 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 268.326 ns/op
# Warmup Iteration   2: 215.490 ns/op
# Warmup Iteration   3: 191.224 ns/op
# Warmup Iteration   4: 190.286 ns/op
# Warmup Iteration   5: 192.311 ns/op
Iteration   1: 192.513 ns/op
Iteration   2: 187.756 ns/op
Iteration   3: 194.471 ns/op
Iteration   4: 189.112 ns/op
Iteration   5: 188.869 ns/op
Iteration   6: 188.734 ns/op
Iteration   7: 187.685 ns/op
Iteration   8: 188.758 ns/op
Iteration   9: 188.721 ns/op
Iteration  10: 188.682 ns/op
Iteration  11: 190.173 ns/op
Iteration  12: 188.689 ns/op
Iteration  13: 187.803 ns/op
Iteration  14: 188.922 ns/op
Iteration  15: 188.276 ns/op
Iteration  16: 188.238 ns/op
Iteration  17: 188.241 ns/op
Iteration  18: 188.419 ns/op
Iteration  19: 187.836 ns/op
Iteration  20: 188.408 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 269.310 ns/op
# Warmup Iteration   2: 220.174 ns/op
# Warmup Iteration   3: 193.914 ns/op
# Warmup Iteration   4: 194.585 ns/op
# Warmup Iteration   5: 195.411 ns/op
Iteration   1: 192.114 ns/op
Iteration   2: 196.363 ns/op
Iteration   3: 197.542 ns/op
Iteration   4: 193.168 ns/op
Iteration   5: 192.817 ns/op
Iteration   6: 192.057 ns/op
Iteration   7: 192.801 ns/op
Iteration   8: 192.857 ns/op
Iteration   9: 192.695 ns/op
Iteration  10: 192.955 ns/op
Iteration  11: 193.485 ns/op
Iteration  12: 192.235 ns/op
Iteration  13: 193.248 ns/op
Iteration  14: 193.122 ns/op
Iteration  15: 192.554 ns/op
Iteration  16: 193.217 ns/op
Iteration  17: 192.188 ns/op
Iteration  18: 193.592 ns/op
Iteration  19: 192.807 ns/op
Iteration  20: 192.992 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 262.885 ns/op
# Warmup Iteration   2: 211.161 ns/op
# Warmup Iteration   3: 180.353 ns/op
# Warmup Iteration   4: 181.939 ns/op
# Warmup Iteration   5: 181.498 ns/op
Iteration   1: 182.608 ns/op
Iteration   2: 183.702 ns/op
Iteration   3: 178.475 ns/op
Iteration   4: 179.847 ns/op
Iteration   5: 179.924 ns/op
Iteration   6: 179.341 ns/op
Iteration   7: 179.329 ns/op
Iteration   8: 179.302 ns/op
Iteration   9: 179.295 ns/op
Iteration  10: 179.306 ns/op
Iteration  11: 178.627 ns/op
Iteration  12: 179.250 ns/op
Iteration  13: 179.464 ns/op
Iteration  14: 178.848 ns/op
Iteration  15: 179.052 ns/op
Iteration  16: 178.933 ns/op
Iteration  17: 179.064 ns/op
Iteration  18: 178.520 ns/op
Iteration  19: 178.833 ns/op
Iteration  20: 178.897 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 272.947 ns/op
# Warmup Iteration   2: 231.518 ns/op
# Warmup Iteration   3: 192.166 ns/op
# Warmup Iteration   4: 192.566 ns/op
# Warmup Iteration   5: 193.518 ns/op
Iteration   1: 190.182 ns/op
Iteration   2: 194.602 ns/op
Iteration   3: 195.399 ns/op
Iteration   4: 191.179 ns/op
Iteration   5: 191.392 ns/op
Iteration   6: 190.161 ns/op
Iteration   7: 191.530 ns/op
Iteration   8: 191.307 ns/op
Iteration   9: 191.371 ns/op
Iteration  10: 191.466 ns/op
Iteration  11: 192.210 ns/op
Iteration  12: 190.127 ns/op
Iteration  13: 191.757 ns/op
Iteration  14: 192.206 ns/op
Iteration  15: 191.825 ns/op
Iteration  16: 192.130 ns/op
Iteration  17: 190.051 ns/op
Iteration  18: 192.372 ns/op
Iteration  19: 191.138 ns/op
Iteration  20: 190.699 ns/op


Result "benchmark.StringContains.regexMatches":
  186.956 ±(99.9%) 1.943 ns/op [Average]
  (min, avg, max) = (178.475, 186.956, 197.542), stdev = 5.728
  CI (99.9%): [185.014, 188.899] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 7Y>0J;,}httpNa@`)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.498 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.936 ns/op
# Warmup Iteration   4: 9.927 ns/op
# Warmup Iteration   5: 9.944 ns/op
Iteration   1: 9.930 ns/op
Iteration   2: 9.934 ns/op
Iteration   3: 9.924 ns/op
Iteration   4: 9.929 ns/op
Iteration   5: 9.937 ns/op
Iteration   6: 9.934 ns/op
Iteration   7: 9.943 ns/op
Iteration   8: 9.936 ns/op
Iteration   9: 9.946 ns/op
Iteration  10: 9.933 ns/op
Iteration  11: 9.947 ns/op
Iteration  12: 9.928 ns/op
Iteration  13: 9.937 ns/op
Iteration  14: 9.935 ns/op
Iteration  15: 9.925 ns/op
Iteration  16: 9.926 ns/op
Iteration  17: 9.913 ns/op
Iteration  18: 9.915 ns/op
Iteration  19: 9.947 ns/op
Iteration  20: 9.918 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.824 ns/op
# Warmup Iteration   4: 9.825 ns/op
# Warmup Iteration   5: 9.836 ns/op
Iteration   1: 9.843 ns/op
Iteration   2: 9.831 ns/op
Iteration   3: 9.830 ns/op
Iteration   4: 9.830 ns/op
Iteration   5: 9.837 ns/op
Iteration   6: 9.843 ns/op
Iteration   7: 9.841 ns/op
Iteration   8: 9.828 ns/op
Iteration   9: 9.852 ns/op
Iteration  10: 9.839 ns/op
Iteration  11: 9.831 ns/op
Iteration  12: 9.825 ns/op
Iteration  13: 9.829 ns/op
Iteration  14: 9.848 ns/op
Iteration  15: 9.831 ns/op
Iteration  16: 9.852 ns/op
Iteration  17: 9.841 ns/op
Iteration  18: 9.852 ns/op
Iteration  19: 9.832 ns/op
Iteration  20: 9.840 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.465 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.879 ns/op
# Warmup Iteration   4: 9.878 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.882 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.881 ns/op
Iteration   4: 9.887 ns/op
Iteration   5: 9.865 ns/op
Iteration   6: 9.880 ns/op
Iteration   7: 9.879 ns/op
Iteration   8: 9.877 ns/op
Iteration   9: 9.867 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.853 ns/op
Iteration  15: 9.887 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.864 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.880 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.228 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.904 ns/op
# Warmup Iteration   4: 9.881 ns/op
# Warmup Iteration   5: 9.877 ns/op
Iteration   1: 9.899 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.902 ns/op
Iteration   4: 9.895 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.888 ns/op
Iteration   7: 9.900 ns/op
Iteration   8: 9.887 ns/op
Iteration   9: 9.893 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.891 ns/op
Iteration  12: 9.899 ns/op
Iteration  13: 9.894 ns/op
Iteration  14: 9.889 ns/op
Iteration  15: 9.869 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.889 ns/op
Iteration  18: 9.880 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.867 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.245 ns/op
# Warmup Iteration   2: 9.739 ns/op
# Warmup Iteration   3: 9.992 ns/op
# Warmup Iteration   4: 9.990 ns/op
# Warmup Iteration   5: 9.974 ns/op
Iteration   1: 9.952 ns/op
Iteration   2: 9.963 ns/op
Iteration   3: 9.981 ns/op
Iteration   4: 9.983 ns/op
Iteration   5: 9.961 ns/op
Iteration   6: 9.985 ns/op
Iteration   7: 9.984 ns/op
Iteration   8: 9.986 ns/op
Iteration   9: 9.971 ns/op
Iteration  10: 9.968 ns/op
Iteration  11: 9.965 ns/op
Iteration  12: 9.975 ns/op
Iteration  13: 9.980 ns/op
Iteration  14: 9.967 ns/op
Iteration  15: 9.965 ns/op
Iteration  16: 9.960 ns/op
Iteration  17: 9.986 ns/op
Iteration  18: 9.963 ns/op
Iteration  19: 9.967 ns/op
Iteration  20: 9.972 ns/op


Result "benchmark.StringContains.stringContains":
  9.901 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (9.825, 9.901, 9.986), stdev = 0.048
  CI (99.9%): [9.885, 9.917] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  7Y>0J;,}httpNa@`  avgt  100  186.956 ± 1.943  ns/op
StringContains.stringContains     http  7Y>0J;,}httpNa@`  avgt  100    9.901 ± 0.016  ns/op

Benchmark result is saved to http_16_0.5_3.csv
