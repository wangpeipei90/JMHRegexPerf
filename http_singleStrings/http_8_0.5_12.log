# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = S|W+http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 220.600 ns/op
# Warmup Iteration   2: 151.614 ns/op
# Warmup Iteration   3: 133.832 ns/op
# Warmup Iteration   4: 133.039 ns/op
# Warmup Iteration   5: 133.873 ns/op
Iteration   1: 135.550 ns/op
Iteration   2: 131.344 ns/op
Iteration   3: 132.007 ns/op
Iteration   4: 131.415 ns/op
Iteration   5: 131.356 ns/op
Iteration   6: 131.396 ns/op
Iteration   7: 131.402 ns/op
Iteration   8: 132.123 ns/op
Iteration   9: 130.967 ns/op
Iteration  10: 131.161 ns/op
Iteration  11: 130.919 ns/op
Iteration  12: 130.895 ns/op
Iteration  13: 131.248 ns/op
Iteration  14: 131.007 ns/op
Iteration  15: 131.014 ns/op
Iteration  16: 131.063 ns/op
Iteration  17: 131.031 ns/op
Iteration  18: 131.042 ns/op
Iteration  19: 131.322 ns/op
Iteration  20: 131.311 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 213.475 ns/op
# Warmup Iteration   2: 144.500 ns/op
# Warmup Iteration   3: 127.285 ns/op
# Warmup Iteration   4: 127.810 ns/op
# Warmup Iteration   5: 128.522 ns/op
Iteration   1: 132.206 ns/op
Iteration   2: 126.294 ns/op
Iteration   3: 126.238 ns/op
Iteration   4: 126.265 ns/op
Iteration   5: 126.960 ns/op
Iteration   6: 126.336 ns/op
Iteration   7: 126.325 ns/op
Iteration   8: 126.503 ns/op
Iteration   9: 126.251 ns/op
Iteration  10: 127.398 ns/op
Iteration  11: 126.106 ns/op
Iteration  12: 126.238 ns/op
Iteration  13: 126.104 ns/op
Iteration  14: 126.495 ns/op
Iteration  15: 126.079 ns/op
Iteration  16: 126.017 ns/op
Iteration  17: 126.070 ns/op
Iteration  18: 126.528 ns/op
Iteration  19: 126.268 ns/op
Iteration  20: 126.411 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 210.951 ns/op
# Warmup Iteration   2: 146.488 ns/op
# Warmup Iteration   3: 132.579 ns/op
# Warmup Iteration   4: 131.906 ns/op
# Warmup Iteration   5: 132.637 ns/op
Iteration   1: 133.204 ns/op
Iteration   2: 130.917 ns/op
Iteration   3: 130.272 ns/op
Iteration   4: 130.361 ns/op
Iteration   5: 130.224 ns/op
Iteration   6: 130.268 ns/op
Iteration   7: 131.595 ns/op
Iteration   8: 130.425 ns/op
Iteration   9: 130.170 ns/op
Iteration  10: 130.924 ns/op
Iteration  11: 130.337 ns/op
Iteration  12: 130.367 ns/op
Iteration  13: 130.074 ns/op
Iteration  14: 130.130 ns/op
Iteration  15: 130.146 ns/op
Iteration  16: 130.163 ns/op
Iteration  17: 130.616 ns/op
Iteration  18: 130.224 ns/op
Iteration  19: 130.269 ns/op
Iteration  20: 130.192 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 216.917 ns/op
# Warmup Iteration   2: 148.944 ns/op
# Warmup Iteration   3: 132.653 ns/op
# Warmup Iteration   4: 132.059 ns/op
# Warmup Iteration   5: 132.993 ns/op
Iteration   1: 134.121 ns/op
Iteration   2: 131.160 ns/op
Iteration   3: 130.525 ns/op
Iteration   4: 130.537 ns/op
Iteration   5: 130.516 ns/op
Iteration   6: 130.526 ns/op
Iteration   7: 131.126 ns/op
Iteration   8: 130.627 ns/op
Iteration   9: 130.115 ns/op
Iteration  10: 130.156 ns/op
Iteration  11: 130.185 ns/op
Iteration  12: 130.520 ns/op
Iteration  13: 130.221 ns/op
Iteration  14: 130.279 ns/op
Iteration  15: 130.490 ns/op
Iteration  16: 130.403 ns/op
Iteration  17: 130.440 ns/op
Iteration  18: 131.176 ns/op
Iteration  19: 130.346 ns/op
Iteration  20: 130.547 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 217.490 ns/op
# Warmup Iteration   2: 149.013 ns/op
# Warmup Iteration   3: 136.645 ns/op
# Warmup Iteration   4: 135.939 ns/op
# Warmup Iteration   5: 136.624 ns/op
Iteration   1: 137.477 ns/op
Iteration   2: 134.239 ns/op
Iteration   3: 135.017 ns/op
Iteration   4: 134.200 ns/op
Iteration   5: 134.135 ns/op
Iteration   6: 134.234 ns/op
Iteration   7: 134.164 ns/op
Iteration   8: 134.142 ns/op
Iteration   9: 134.463 ns/op
Iteration  10: 133.845 ns/op
Iteration  11: 133.799 ns/op
Iteration  12: 133.863 ns/op
Iteration  13: 133.960 ns/op
Iteration  14: 134.973 ns/op
Iteration  15: 134.204 ns/op
Iteration  16: 134.325 ns/op
Iteration  17: 134.036 ns/op
Iteration  18: 134.230 ns/op
Iteration  19: 134.304 ns/op
Iteration  20: 134.389 ns/op


Result "benchmark.StringContains.regexMatches":
  130.756 ±(99.9%) 0.904 ns/op [Average]
  (min, avg, max) = (126.017, 130.756, 137.477), stdev = 2.665
  CI (99.9%): [129.852, 131.660] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = S|W+http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.070 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.885 ns/op
# Warmup Iteration   5: 9.876 ns/op
Iteration   1: 9.916 ns/op
Iteration   2: 9.914 ns/op
Iteration   3: 9.907 ns/op
Iteration   4: 9.903 ns/op
Iteration   5: 9.895 ns/op
Iteration   6: 9.915 ns/op
Iteration   7: 9.910 ns/op
Iteration   8: 9.912 ns/op
Iteration   9: 9.893 ns/op
Iteration  10: 9.901 ns/op
Iteration  11: 9.908 ns/op
Iteration  12: 9.906 ns/op
Iteration  13: 9.883 ns/op
Iteration  14: 9.900 ns/op
Iteration  15: 9.919 ns/op
Iteration  16: 9.897 ns/op
Iteration  17: 9.893 ns/op
Iteration  18: 9.889 ns/op
Iteration  19: 9.898 ns/op
Iteration  20: 9.895 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.069 ns/op
# Warmup Iteration   2: 10.456 ns/op
# Warmup Iteration   3: 10.036 ns/op
# Warmup Iteration   4: 10.042 ns/op
# Warmup Iteration   5: 10.040 ns/op
Iteration   1: 10.041 ns/op
Iteration   2: 10.042 ns/op
Iteration   3: 10.039 ns/op
Iteration   4: 10.037 ns/op
Iteration   5: 10.045 ns/op
Iteration   6: 10.043 ns/op
Iteration   7: 10.042 ns/op
Iteration   8: 10.044 ns/op
Iteration   9: 10.038 ns/op
Iteration  10: 10.034 ns/op
Iteration  11: 10.047 ns/op
Iteration  12: 10.042 ns/op
Iteration  13: 10.038 ns/op
Iteration  14: 10.038 ns/op
Iteration  15: 10.040 ns/op
Iteration  16: 10.047 ns/op
Iteration  17: 10.042 ns/op
Iteration  18: 10.043 ns/op
Iteration  19: 10.041 ns/op
Iteration  20: 10.039 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.074 ns/op
# Warmup Iteration   2: 10.459 ns/op
# Warmup Iteration   3: 9.893 ns/op
# Warmup Iteration   4: 9.891 ns/op
# Warmup Iteration   5: 9.903 ns/op
Iteration   1: 9.890 ns/op
Iteration   2: 9.898 ns/op
Iteration   3: 9.897 ns/op
Iteration   4: 9.884 ns/op
Iteration   5: 9.886 ns/op
Iteration   6: 9.894 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.876 ns/op
Iteration   9: 9.894 ns/op
Iteration  10: 9.883 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.875 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.886 ns/op
Iteration  15: 9.891 ns/op
Iteration  16: 9.894 ns/op
Iteration  17: 9.886 ns/op
Iteration  18: 9.894 ns/op
Iteration  19: 9.898 ns/op
Iteration  20: 9.882 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.205 ns/op
# Warmup Iteration   2: 10.478 ns/op
# Warmup Iteration   3: 9.869 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.880 ns/op
Iteration   1: 9.888 ns/op
Iteration   2: 9.877 ns/op
Iteration   3: 9.906 ns/op
Iteration   4: 9.889 ns/op
Iteration   5: 9.884 ns/op
Iteration   6: 9.895 ns/op
Iteration   7: 9.890 ns/op
Iteration   8: 9.914 ns/op
Iteration   9: 9.891 ns/op
Iteration  10: 9.894 ns/op
Iteration  11: 9.919 ns/op
Iteration  12: 9.900 ns/op
Iteration  13: 9.895 ns/op
Iteration  14: 9.904 ns/op
Iteration  15: 9.896 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.890 ns/op
Iteration  18: 9.891 ns/op
Iteration  19: 9.895 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.195 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 9.899 ns/op
# Warmup Iteration   4: 9.927 ns/op
# Warmup Iteration   5: 9.916 ns/op
Iteration   1: 9.912 ns/op
Iteration   2: 9.903 ns/op
Iteration   3: 9.896 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.914 ns/op
Iteration   6: 9.912 ns/op
Iteration   7: 9.903 ns/op
Iteration   8: 9.918 ns/op
Iteration   9: 9.919 ns/op
Iteration  10: 9.916 ns/op
Iteration  11: 9.884 ns/op
Iteration  12: 9.901 ns/op
Iteration  13: 9.892 ns/op
Iteration  14: 9.906 ns/op
Iteration  15: 9.894 ns/op
Iteration  16: 9.908 ns/op
Iteration  17: 9.911 ns/op
Iteration  18: 9.915 ns/op
Iteration  19: 9.924 ns/op
Iteration  20: 9.925 ns/op


Result "benchmark.StringContains.stringContains":
  9.926 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (9.869, 9.926, 10.047), stdev = 0.059
  CI (99.9%): [9.907, 9.946] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  S|W+http  avgt  100  130.756 ± 0.904  ns/op
StringContains.stringContains     http  S|W+http  avgt  100    9.926 ± 0.020  ns/op

Benchmark result is saved to http_8_0.5_12.csv
