# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 2zshttp-}E+u`Um)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 313.220 ns/op
# Warmup Iteration   2: 300.870 ns/op
# Warmup Iteration   3: 225.835 ns/op
# Warmup Iteration   4: 227.769 ns/op
# Warmup Iteration   5: 228.561 ns/op
Iteration   1: 229.858 ns/op
Iteration   2: 225.878 ns/op
Iteration   3: 230.999 ns/op
Iteration   4: 232.731 ns/op
Iteration   5: 225.684 ns/op
Iteration   6: 226.661 ns/op
Iteration   7: 226.753 ns/op
Iteration   8: 225.946 ns/op
Iteration   9: 226.778 ns/op
Iteration  10: 226.932 ns/op
Iteration  11: 226.499 ns/op
Iteration  12: 225.616 ns/op
Iteration  13: 226.706 ns/op
Iteration  14: 226.745 ns/op
Iteration  15: 225.641 ns/op
Iteration  16: 226.646 ns/op
Iteration  17: 226.917 ns/op
Iteration  18: 225.599 ns/op
Iteration  19: 226.125 ns/op
Iteration  20: 226.167 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 305.933 ns/op
# Warmup Iteration   2: 294.939 ns/op
# Warmup Iteration   3: 225.600 ns/op
# Warmup Iteration   4: 227.595 ns/op
# Warmup Iteration   5: 228.337 ns/op
Iteration   1: 229.314 ns/op
Iteration   2: 225.603 ns/op
Iteration   3: 230.444 ns/op
Iteration   4: 232.130 ns/op
Iteration   5: 225.549 ns/op
Iteration   6: 226.785 ns/op
Iteration   7: 226.615 ns/op
Iteration   8: 226.626 ns/op
Iteration   9: 225.504 ns/op
Iteration  10: 226.716 ns/op
Iteration  11: 226.908 ns/op
Iteration  12: 225.541 ns/op
Iteration  13: 228.781 ns/op
Iteration  14: 227.146 ns/op
Iteration  15: 225.487 ns/op
Iteration  16: 229.779 ns/op
Iteration  17: 226.954 ns/op
Iteration  18: 225.586 ns/op
Iteration  19: 228.046 ns/op
Iteration  20: 226.196 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 304.393 ns/op
# Warmup Iteration   2: 293.784 ns/op
# Warmup Iteration   3: 224.587 ns/op
# Warmup Iteration   4: 226.545 ns/op
# Warmup Iteration   5: 227.444 ns/op
Iteration   1: 228.257 ns/op
Iteration   2: 224.541 ns/op
Iteration   3: 229.530 ns/op
Iteration   4: 231.081 ns/op
Iteration   5: 224.606 ns/op
Iteration   6: 225.606 ns/op
Iteration   7: 225.663 ns/op
Iteration   8: 225.541 ns/op
Iteration   9: 224.507 ns/op
Iteration  10: 225.525 ns/op
Iteration  11: 225.520 ns/op
Iteration  12: 224.492 ns/op
Iteration  13: 225.608 ns/op
Iteration  14: 225.644 ns/op
Iteration  15: 224.506 ns/op
Iteration  16: 225.643 ns/op
Iteration  17: 226.825 ns/op
Iteration  18: 224.533 ns/op
Iteration  19: 225.142 ns/op
Iteration  20: 226.064 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 313.696 ns/op
# Warmup Iteration   2: 297.785 ns/op
# Warmup Iteration   3: 224.924 ns/op
# Warmup Iteration   4: 227.011 ns/op
# Warmup Iteration   5: 227.796 ns/op
Iteration   1: 228.763 ns/op
Iteration   2: 225.037 ns/op
Iteration   3: 230.100 ns/op
Iteration   4: 231.532 ns/op
Iteration   5: 224.818 ns/op
Iteration   6: 225.957 ns/op
Iteration   7: 226.257 ns/op
Iteration   8: 226.153 ns/op
Iteration   9: 224.826 ns/op
Iteration  10: 225.953 ns/op
Iteration  11: 226.143 ns/op
Iteration  12: 224.920 ns/op
Iteration  13: 226.045 ns/op
Iteration  14: 226.480 ns/op
Iteration  15: 224.808 ns/op
Iteration  16: 230.522 ns/op
Iteration  17: 227.257 ns/op
Iteration  18: 224.760 ns/op
Iteration  19: 225.819 ns/op
Iteration  20: 225.317 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 307.839 ns/op
# Warmup Iteration   2: 301.366 ns/op
# Warmup Iteration   3: 238.882 ns/op
# Warmup Iteration   4: 242.214 ns/op
# Warmup Iteration   5: 242.641 ns/op
Iteration   1: 241.014 ns/op
Iteration   2: 241.549 ns/op
Iteration   3: 244.087 ns/op
Iteration   4: 241.866 ns/op
Iteration   5: 242.904 ns/op
Iteration   6: 240.884 ns/op
Iteration   7: 238.830 ns/op
Iteration   8: 239.886 ns/op
Iteration   9: 240.001 ns/op
Iteration  10: 238.734 ns/op
Iteration  11: 240.083 ns/op
Iteration  12: 241.326 ns/op
Iteration  13: 239.183 ns/op
Iteration  14: 240.097 ns/op
Iteration  15: 240.191 ns/op
Iteration  16: 239.281 ns/op
Iteration  17: 240.617 ns/op
Iteration  18: 240.585 ns/op
Iteration  19: 239.056 ns/op
Iteration  20: 240.001 ns/op


Result "benchmark.StringContains.regexMatches":
  229.471 ±(99.9%) 1.981 ns/op [Average]
  (min, avg, max) = (224.492, 229.471, 244.087), stdev = 5.841
  CI (99.9%): [227.490, 231.452] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 2zshttp-}E+u`Um)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.476 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.848 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.859 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.854 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.850 ns/op
Iteration   6: 9.865 ns/op
Iteration   7: 9.847 ns/op
Iteration   8: 9.859 ns/op
Iteration   9: 9.856 ns/op
Iteration  10: 9.850 ns/op
Iteration  11: 9.866 ns/op
Iteration  12: 9.851 ns/op
Iteration  13: 9.847 ns/op
Iteration  14: 9.843 ns/op
Iteration  15: 9.857 ns/op
Iteration  16: 9.868 ns/op
Iteration  17: 9.844 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.861 ns/op
Iteration  20: 9.854 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.447 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.866 ns/op
# Warmup Iteration   4: 9.880 ns/op
# Warmup Iteration   5: 9.866 ns/op
Iteration   1: 9.876 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.861 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.880 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.867 ns/op
Iteration   9: 9.855 ns/op
Iteration  10: 9.879 ns/op
Iteration  11: 9.847 ns/op
Iteration  12: 9.851 ns/op
Iteration  13: 9.843 ns/op
Iteration  14: 9.858 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.853 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.852 ns/op
Iteration  19: 9.853 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.226 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.870 ns/op
# Warmup Iteration   4: 9.864 ns/op
# Warmup Iteration   5: 9.861 ns/op
Iteration   1: 9.863 ns/op
Iteration   2: 9.863 ns/op
Iteration   3: 9.832 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.848 ns/op
Iteration   7: 9.842 ns/op
Iteration   8: 9.865 ns/op
Iteration   9: 9.865 ns/op
Iteration  10: 9.859 ns/op
Iteration  11: 9.853 ns/op
Iteration  12: 9.856 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.866 ns/op
Iteration  15: 9.841 ns/op
Iteration  16: 9.851 ns/op
Iteration  17: 9.860 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.833 ns/op
Iteration  20: 9.880 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.459 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.856 ns/op
Iteration   1: 9.860 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.850 ns/op
Iteration   6: 9.872 ns/op
Iteration   7: 9.864 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.857 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.862 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.855 ns/op
Iteration  17: 9.856 ns/op
Iteration  18: 9.867 ns/op
Iteration  19: 9.866 ns/op
Iteration  20: 9.879 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.504 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.917 ns/op
# Warmup Iteration   4: 9.928 ns/op
# Warmup Iteration   5: 9.935 ns/op
Iteration   1: 9.944 ns/op
Iteration   2: 9.934 ns/op
Iteration   3: 9.932 ns/op
Iteration   4: 9.940 ns/op
Iteration   5: 9.947 ns/op
Iteration   6: 9.942 ns/op
Iteration   7: 9.945 ns/op
Iteration   8: 9.938 ns/op
Iteration   9: 9.925 ns/op
Iteration  10: 9.948 ns/op
Iteration  11: 9.929 ns/op
Iteration  12: 9.921 ns/op
Iteration  13: 9.933 ns/op
Iteration  14: 9.923 ns/op
Iteration  15: 9.946 ns/op
Iteration  16: 9.941 ns/op
Iteration  17: 9.932 ns/op
Iteration  18: 9.946 ns/op
Iteration  19: 9.931 ns/op
Iteration  20: 9.954 ns/op


Result "benchmark.StringContains.stringContains":
  9.875 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (9.832, 9.875, 9.954), stdev = 0.033
  CI (99.9%): [9.864, 9.886] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  2zshttp-}E+u`Um  avgt  100  229.471 ± 1.981  ns/op
StringContains.stringContains     http  2zshttp-}E+u`Um  avgt  100    9.875 ± 0.011  ns/op

Benchmark result is saved to http_16_0.25_6.csv
