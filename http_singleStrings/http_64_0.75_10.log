# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = -Pl0V"P3taL#ZY(6JX6qn!TE9Q7I2 :jvW ohOIoJso!<<xhttp.M Aq@|:"aV[)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 356.377 ns/op
# Warmup Iteration   2: 362.260 ns/op
# Warmup Iteration   3: 301.169 ns/op
# Warmup Iteration   4: 291.777 ns/op
# Warmup Iteration   5: 287.959 ns/op
Iteration   1: 291.763 ns/op
Iteration   2: 287.905 ns/op
Iteration   3: 292.890 ns/op
Iteration   4: 294.585 ns/op
Iteration   5: 288.415 ns/op
Iteration   6: 296.596 ns/op
Iteration   7: 287.940 ns/op
Iteration   8: 289.157 ns/op
Iteration   9: 287.926 ns/op
Iteration  10: 288.895 ns/op
Iteration  11: 287.694 ns/op
Iteration  12: 289.023 ns/op
Iteration  13: 288.086 ns/op
Iteration  14: 289.362 ns/op
Iteration  15: 288.321 ns/op
Iteration  16: 289.268 ns/op
Iteration  17: 289.588 ns/op
Iteration  18: 287.648 ns/op
Iteration  19: 289.383 ns/op
Iteration  20: 287.952 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 353.514 ns/op
# Warmup Iteration   2: 359.684 ns/op
# Warmup Iteration   3: 299.573 ns/op
# Warmup Iteration   4: 290.927 ns/op
# Warmup Iteration   5: 288.023 ns/op
Iteration   1: 292.004 ns/op
Iteration   2: 288.242 ns/op
Iteration   3: 293.033 ns/op
Iteration   4: 294.748 ns/op
Iteration   5: 288.365 ns/op
Iteration   6: 296.678 ns/op
Iteration   7: 288.267 ns/op
Iteration   8: 290.030 ns/op
Iteration   9: 288.241 ns/op
Iteration  10: 289.776 ns/op
Iteration  11: 287.902 ns/op
Iteration  12: 289.707 ns/op
Iteration  13: 288.312 ns/op
Iteration  14: 289.712 ns/op
Iteration  15: 288.374 ns/op
Iteration  16: 289.751 ns/op
Iteration  17: 289.816 ns/op
Iteration  18: 288.166 ns/op
Iteration  19: 291.184 ns/op
Iteration  20: 289.247 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 352.590 ns/op
# Warmup Iteration   2: 359.382 ns/op
# Warmup Iteration   3: 282.036 ns/op
# Warmup Iteration   4: 274.191 ns/op
# Warmup Iteration   5: 271.431 ns/op
Iteration   1: 274.838 ns/op
Iteration   2: 276.015 ns/op
Iteration   3: 271.066 ns/op
Iteration   4: 277.056 ns/op
Iteration   5: 271.500 ns/op
Iteration   6: 279.017 ns/op
Iteration   7: 271.182 ns/op
Iteration   8: 272.610 ns/op
Iteration   9: 272.413 ns/op
Iteration  10: 271.041 ns/op
Iteration  11: 272.963 ns/op
Iteration  12: 271.297 ns/op
Iteration  13: 272.886 ns/op
Iteration  14: 271.273 ns/op
Iteration  15: 272.573 ns/op
Iteration  16: 272.667 ns/op
Iteration  17: 271.695 ns/op
Iteration  18: 274.367 ns/op
Iteration  19: 271.200 ns/op
Iteration  20: 273.183 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 344.162 ns/op
# Warmup Iteration   2: 351.486 ns/op
# Warmup Iteration   3: 276.582 ns/op
# Warmup Iteration   4: 272.497 ns/op
# Warmup Iteration   5: 270.132 ns/op
Iteration   1: 273.452 ns/op
Iteration   2: 274.423 ns/op
Iteration   3: 269.908 ns/op
Iteration   4: 276.026 ns/op
Iteration   5: 270.114 ns/op
Iteration   6: 277.626 ns/op
Iteration   7: 271.457 ns/op
Iteration   8: 269.912 ns/op
Iteration   9: 272.624 ns/op
Iteration  10: 270.124 ns/op
Iteration  11: 271.231 ns/op
Iteration  12: 270.118 ns/op
Iteration  13: 271.226 ns/op
Iteration  14: 272.167 ns/op
Iteration  15: 270.331 ns/op
Iteration  16: 271.337 ns/op
Iteration  17: 270.010 ns/op
Iteration  18: 271.640 ns/op
Iteration  19: 270.114 ns/op
Iteration  20: 271.449 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.479 ns/op
# Warmup Iteration   2: 353.059 ns/op
# Warmup Iteration   3: 279.251 ns/op
# Warmup Iteration   4: 272.873 ns/op
# Warmup Iteration   5: 270.216 ns/op
Iteration   1: 273.917 ns/op
Iteration   2: 275.055 ns/op
Iteration   3: 271.346 ns/op
Iteration   4: 277.544 ns/op
Iteration   5: 270.191 ns/op
Iteration   6: 278.289 ns/op
Iteration   7: 271.711 ns/op
Iteration   8: 270.171 ns/op
Iteration   9: 271.548 ns/op
Iteration  10: 270.293 ns/op
Iteration  11: 271.727 ns/op
Iteration  12: 270.450 ns/op
Iteration  13: 271.623 ns/op
Iteration  14: 271.598 ns/op
Iteration  15: 270.212 ns/op
Iteration  16: 271.409 ns/op
Iteration  17: 270.068 ns/op
Iteration  18: 272.809 ns/op
Iteration  19: 270.242 ns/op
Iteration  20: 271.607 ns/op


Result "benchmark.StringContains.regexMatches":
  279.319 ±(99.9%) 3.033 ns/op [Average]
  (min, avg, max) = (269.908, 279.319, 296.678), stdev = 8.944
  CI (99.9%): [276.285, 282.352] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = -Pl0V"P3taL#ZY(6JX6qn!TE9Q7I2 :jvW ohOIoJso!<<xhttp.M Aq@|:"aV[)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.982 ns/op
# Warmup Iteration   2: 16.985 ns/op
# Warmup Iteration   3: 16.534 ns/op
# Warmup Iteration   4: 16.521 ns/op
# Warmup Iteration   5: 16.538 ns/op
Iteration   1: 16.543 ns/op
Iteration   2: 16.537 ns/op
Iteration   3: 16.547 ns/op
Iteration   4: 16.541 ns/op
Iteration   5: 16.540 ns/op
Iteration   6: 16.518 ns/op
Iteration   7: 16.520 ns/op
Iteration   8: 16.534 ns/op
Iteration   9: 16.517 ns/op
Iteration  10: 16.538 ns/op
Iteration  11: 16.555 ns/op
Iteration  12: 16.532 ns/op
Iteration  13: 16.533 ns/op
Iteration  14: 16.520 ns/op
Iteration  15: 16.523 ns/op
Iteration  16: 16.539 ns/op
Iteration  17: 16.539 ns/op
Iteration  18: 16.534 ns/op
Iteration  19: 16.533 ns/op
Iteration  20: 16.519 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.091 ns/op
# Warmup Iteration   2: 17.062 ns/op
# Warmup Iteration   3: 16.574 ns/op
# Warmup Iteration   4: 16.592 ns/op
# Warmup Iteration   5: 16.599 ns/op
Iteration   1: 16.582 ns/op
Iteration   2: 16.589 ns/op
Iteration   3: 16.598 ns/op
Iteration   4: 16.583 ns/op
Iteration   5: 16.598 ns/op
Iteration   6: 16.592 ns/op
Iteration   7: 16.582 ns/op
Iteration   8: 16.600 ns/op
Iteration   9: 16.588 ns/op
Iteration  10: 16.589 ns/op
Iteration  11: 16.571 ns/op
Iteration  12: 16.581 ns/op
Iteration  13: 16.587 ns/op
Iteration  14: 16.583 ns/op
Iteration  15: 16.584 ns/op
Iteration  16: 16.601 ns/op
Iteration  17: 16.582 ns/op
Iteration  18: 16.599 ns/op
Iteration  19: 16.578 ns/op
Iteration  20: 16.586 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.998 ns/op
# Warmup Iteration   2: 17.032 ns/op
# Warmup Iteration   3: 17.340 ns/op
# Warmup Iteration   4: 17.326 ns/op
# Warmup Iteration   5: 17.321 ns/op
Iteration   1: 17.286 ns/op
Iteration   2: 17.355 ns/op
Iteration   3: 17.318 ns/op
Iteration   4: 17.335 ns/op
Iteration   5: 17.364 ns/op
Iteration   6: 17.421 ns/op
Iteration   7: 17.350 ns/op
Iteration   8: 17.342 ns/op
Iteration   9: 17.410 ns/op
Iteration  10: 17.413 ns/op
Iteration  11: 17.283 ns/op
Iteration  12: 17.309 ns/op
Iteration  13: 17.383 ns/op
Iteration  14: 17.317 ns/op
Iteration  15: 17.327 ns/op
Iteration  16: 17.352 ns/op
Iteration  17: 17.307 ns/op
Iteration  18: 17.316 ns/op
Iteration  19: 17.321 ns/op
Iteration  20: 17.367 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.020 ns/op
# Warmup Iteration   2: 17.025 ns/op
# Warmup Iteration   3: 17.321 ns/op
# Warmup Iteration   4: 17.335 ns/op
# Warmup Iteration   5: 17.338 ns/op
Iteration   1: 17.338 ns/op
Iteration   2: 17.350 ns/op
Iteration   3: 17.371 ns/op
Iteration   4: 17.372 ns/op
Iteration   5: 17.383 ns/op
Iteration   6: 17.435 ns/op
Iteration   7: 17.372 ns/op
Iteration   8: 17.359 ns/op
Iteration   9: 17.429 ns/op
Iteration  10: 17.368 ns/op
Iteration  11: 17.329 ns/op
Iteration  12: 17.345 ns/op
Iteration  13: 17.376 ns/op
Iteration  14: 17.334 ns/op
Iteration  15: 17.376 ns/op
Iteration  16: 17.365 ns/op
Iteration  17: 17.376 ns/op
Iteration  18: 17.394 ns/op
Iteration  19: 17.348 ns/op
Iteration  20: 17.377 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.100 ns/op
# Warmup Iteration   2: 17.070 ns/op
# Warmup Iteration   3: 16.516 ns/op
# Warmup Iteration   4: 16.521 ns/op
# Warmup Iteration   5: 16.524 ns/op
Iteration   1: 16.503 ns/op
Iteration   2: 16.518 ns/op
Iteration   3: 16.511 ns/op
Iteration   4: 16.537 ns/op
Iteration   5: 16.509 ns/op
Iteration   6: 16.537 ns/op
Iteration   7: 16.520 ns/op
Iteration   8: 16.565 ns/op
Iteration   9: 16.522 ns/op
Iteration  10: 16.532 ns/op
Iteration  11: 16.513 ns/op
Iteration  12: 16.500 ns/op
Iteration  13: 16.513 ns/op
Iteration  14: 16.509 ns/op
Iteration  15: 16.492 ns/op
Iteration  16: 16.509 ns/op
Iteration  17: 16.507 ns/op
Iteration  18: 16.495 ns/op
Iteration  19: 16.494 ns/op
Iteration  20: 16.509 ns/op


Result "benchmark.StringContains.stringContains":
  16.870 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (16.492, 16.870, 17.435), stdev = 0.401
  CI (99.9%): [16.734, 17.006] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  -Pl0V"P3taL#ZY(6JX6qn!TE9Q7I2 :jvW ohOIoJso!<<xhttp.M Aq@|:"aV[  avgt  100  279.319 ± 3.033  ns/op
StringContains.stringContains     http  -Pl0V"P3taL#ZY(6JX6qn!TE9Q7I2 :jvW ohOIoJso!<<xhttp.M Aq@|:"aV[  avgt  100   16.870 ± 0.136  ns/op

Benchmark result is saved to http_64_0.75_10.csv
