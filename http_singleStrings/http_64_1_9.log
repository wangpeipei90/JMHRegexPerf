# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = .z	z:,1<~uZqE"XPx\$)elWMYdmV27`|J[5`d*7V":V]OH.O{w2cXh/4Ji Kh)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 539.686 ns/op
# Warmup Iteration   2: 523.780 ns/op
# Warmup Iteration   3: 521.381 ns/op
# Warmup Iteration   4: 453.903 ns/op
# Warmup Iteration   5: 436.909 ns/op
Iteration   1: 441.473 ns/op
Iteration   2: 437.891 ns/op
Iteration   3: 438.333 ns/op
Iteration   4: 443.521 ns/op
Iteration   5: 436.853 ns/op
Iteration   6: 446.930 ns/op
Iteration   7: 438.010 ns/op
Iteration   8: 438.264 ns/op
Iteration   9: 448.948 ns/op
Iteration  10: 436.407 ns/op
Iteration  11: 436.692 ns/op
Iteration  12: 450.876 ns/op
Iteration  13: 437.938 ns/op
Iteration  14: 436.486 ns/op
Iteration  15: 438.796 ns/op
Iteration  16: 437.185 ns/op
Iteration  17: 439.227 ns/op
Iteration  18: 436.526 ns/op
Iteration  19: 436.639 ns/op
Iteration  20: 440.174 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 519.854 ns/op
# Warmup Iteration   2: 515.150 ns/op
# Warmup Iteration   3: 512.954 ns/op
# Warmup Iteration   4: 447.032 ns/op
# Warmup Iteration   5: 437.270 ns/op
Iteration   1: 440.274 ns/op
Iteration   2: 436.211 ns/op
Iteration   3: 436.368 ns/op
Iteration   4: 441.446 ns/op
Iteration   5: 436.309 ns/op
Iteration   6: 443.557 ns/op
Iteration   7: 436.687 ns/op
Iteration   8: 436.341 ns/op
Iteration   9: 447.513 ns/op
Iteration  10: 436.429 ns/op
Iteration  11: 438.020 ns/op
Iteration  12: 448.402 ns/op
Iteration  13: 436.493 ns/op
Iteration  14: 440.222 ns/op
Iteration  15: 437.881 ns/op
Iteration  16: 437.872 ns/op
Iteration  17: 438.752 ns/op
Iteration  18: 436.288 ns/op
Iteration  19: 436.241 ns/op
Iteration  20: 438.329 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 524.673 ns/op
# Warmup Iteration   2: 516.037 ns/op
# Warmup Iteration   3: 514.068 ns/op
# Warmup Iteration   4: 447.524 ns/op
# Warmup Iteration   5: 435.977 ns/op
Iteration   1: 440.281 ns/op
Iteration   2: 435.831 ns/op
Iteration   3: 435.910 ns/op
Iteration   4: 441.780 ns/op
Iteration   5: 435.854 ns/op
Iteration   6: 443.345 ns/op
Iteration   7: 435.835 ns/op
Iteration   8: 435.989 ns/op
Iteration   9: 445.813 ns/op
Iteration  10: 436.202 ns/op
Iteration  11: 436.029 ns/op
Iteration  12: 448.216 ns/op
Iteration  13: 435.863 ns/op
Iteration  14: 437.853 ns/op
Iteration  15: 438.481 ns/op
Iteration  16: 438.556 ns/op
Iteration  17: 440.052 ns/op
Iteration  18: 435.851 ns/op
Iteration  19: 435.871 ns/op
Iteration  20: 438.505 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 523.675 ns/op
# Warmup Iteration   2: 516.115 ns/op
# Warmup Iteration   3: 514.508 ns/op
# Warmup Iteration   4: 447.809 ns/op
# Warmup Iteration   5: 436.281 ns/op
Iteration   1: 440.287 ns/op
Iteration   2: 436.116 ns/op
Iteration   3: 436.271 ns/op
Iteration   4: 442.027 ns/op
Iteration   5: 436.127 ns/op
Iteration   6: 443.614 ns/op
Iteration   7: 436.124 ns/op
Iteration   8: 436.230 ns/op
Iteration   9: 446.220 ns/op
Iteration  10: 437.032 ns/op
Iteration  11: 436.178 ns/op
Iteration  12: 448.718 ns/op
Iteration  13: 436.396 ns/op
Iteration  14: 439.476 ns/op
Iteration  15: 436.039 ns/op
Iteration  16: 436.105 ns/op
Iteration  17: 438.725 ns/op
Iteration  18: 436.641 ns/op
Iteration  19: 436.142 ns/op
Iteration  20: 438.267 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 518.862 ns/op
# Warmup Iteration   2: 516.524 ns/op
# Warmup Iteration   3: 514.410 ns/op
# Warmup Iteration   4: 448.313 ns/op
# Warmup Iteration   5: 437.584 ns/op
Iteration   1: 440.526 ns/op
Iteration   2: 436.366 ns/op
Iteration   3: 438.655 ns/op
Iteration   4: 441.952 ns/op
Iteration   5: 436.268 ns/op
Iteration   6: 444.066 ns/op
Iteration   7: 436.308 ns/op
Iteration   8: 436.629 ns/op
Iteration   9: 446.898 ns/op
Iteration  10: 436.961 ns/op
Iteration  11: 437.329 ns/op
Iteration  12: 450.302 ns/op
Iteration  13: 436.391 ns/op
Iteration  14: 438.160 ns/op
Iteration  15: 437.469 ns/op
Iteration  16: 436.501 ns/op
Iteration  17: 438.126 ns/op
Iteration  18: 436.091 ns/op
Iteration  19: 436.441 ns/op
Iteration  20: 438.131 ns/op


Result "benchmark.StringContains.regexMatches":
  439.012 ±(99.9%) 1.298 ns/op [Average]
  (min, avg, max) = (435.831, 439.012, 450.876), stdev = 3.828
  CI (99.9%): [437.714, 440.310] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = .z	z:,1<~uZqE"XPx\$)elWMYdmV27`|J[5`d*7V":V]OH.O{w2cXh/4Ji Kh)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.688 ns/op
# Warmup Iteration   2: 15.729 ns/op
# Warmup Iteration   3: 15.815 ns/op
# Warmup Iteration   4: 15.810 ns/op
# Warmup Iteration   5: 15.800 ns/op
Iteration   1: 15.806 ns/op
Iteration   2: 15.811 ns/op
Iteration   3: 15.804 ns/op
Iteration   4: 15.811 ns/op
Iteration   5: 15.805 ns/op
Iteration   6: 15.799 ns/op
Iteration   7: 15.803 ns/op
Iteration   8: 15.797 ns/op
Iteration   9: 15.803 ns/op
Iteration  10: 15.805 ns/op
Iteration  11: 15.800 ns/op
Iteration  12: 17.366 ns/op
Iteration  13: 17.369 ns/op
Iteration  14: 17.365 ns/op
Iteration  15: 17.366 ns/op
Iteration  16: 17.365 ns/op
Iteration  17: 17.366 ns/op
Iteration  18: 17.366 ns/op
Iteration  19: 17.371 ns/op
Iteration  20: 17.368 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.593 ns/op
# Warmup Iteration   2: 15.717 ns/op
# Warmup Iteration   3: 15.712 ns/op
# Warmup Iteration   4: 15.707 ns/op
# Warmup Iteration   5: 15.698 ns/op
Iteration   1: 15.703 ns/op
Iteration   2: 15.708 ns/op
Iteration   3: 15.907 ns/op
Iteration   4: 15.714 ns/op
Iteration   5: 15.706 ns/op
Iteration   6: 15.711 ns/op
Iteration   7: 15.705 ns/op
Iteration   8: 15.704 ns/op
Iteration   9: 15.709 ns/op
Iteration  10: 15.706 ns/op
Iteration  11: 15.703 ns/op
Iteration  12: 15.702 ns/op
Iteration  13: 15.699 ns/op
Iteration  14: 15.704 ns/op
Iteration  15: 15.704 ns/op
Iteration  16: 15.708 ns/op
Iteration  17: 15.697 ns/op
Iteration  18: 15.702 ns/op
Iteration  19: 15.704 ns/op
Iteration  20: 15.708 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.722 ns/op
# Warmup Iteration   2: 16.386 ns/op
# Warmup Iteration   3: 16.238 ns/op
# Warmup Iteration   4: 16.277 ns/op
# Warmup Iteration   5: 16.261 ns/op
Iteration   1: 16.269 ns/op
Iteration   2: 16.238 ns/op
Iteration   3: 16.316 ns/op
Iteration   4: 16.260 ns/op
Iteration   5: 16.240 ns/op
Iteration   6: 16.265 ns/op
Iteration   7: 16.253 ns/op
Iteration   8: 16.299 ns/op
Iteration   9: 16.332 ns/op
Iteration  10: 16.282 ns/op
Iteration  11: 16.295 ns/op
Iteration  12: 17.407 ns/op
Iteration  13: 17.405 ns/op
Iteration  14: 17.394 ns/op
Iteration  15: 17.401 ns/op
Iteration  16: 17.402 ns/op
Iteration  17: 17.402 ns/op
Iteration  18: 17.394 ns/op
Iteration  19: 17.409 ns/op
Iteration  20: 17.393 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.727 ns/op
# Warmup Iteration   2: 15.781 ns/op
# Warmup Iteration   3: 15.799 ns/op
# Warmup Iteration   4: 15.800 ns/op
# Warmup Iteration   5: 15.801 ns/op
Iteration   1: 15.795 ns/op
Iteration   2: 15.805 ns/op
Iteration   3: 16.014 ns/op
Iteration   4: 15.801 ns/op
Iteration   5: 15.797 ns/op
Iteration   6: 15.800 ns/op
Iteration   7: 15.793 ns/op
Iteration   8: 15.826 ns/op
Iteration   9: 15.798 ns/op
Iteration  10: 15.796 ns/op
Iteration  11: 15.795 ns/op
Iteration  12: 17.364 ns/op
Iteration  13: 17.368 ns/op
Iteration  14: 17.375 ns/op
Iteration  15: 17.367 ns/op
Iteration  16: 17.366 ns/op
Iteration  17: 17.362 ns/op
Iteration  18: 17.363 ns/op
Iteration  19: 17.361 ns/op
Iteration  20: 17.366 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.728 ns/op
# Warmup Iteration   2: 15.678 ns/op
# Warmup Iteration   3: 15.748 ns/op
# Warmup Iteration   4: 15.743 ns/op
# Warmup Iteration   5: 15.744 ns/op
Iteration   1: 15.747 ns/op
Iteration   2: 15.742 ns/op
Iteration   3: 15.740 ns/op
Iteration   4: 15.746 ns/op
Iteration   5: 15.747 ns/op
Iteration   6: 15.748 ns/op
Iteration   7: 15.739 ns/op
Iteration   8: 15.737 ns/op
Iteration   9: 15.743 ns/op
Iteration  10: 15.738 ns/op
Iteration  11: 15.742 ns/op
Iteration  12: 15.738 ns/op
Iteration  13: 15.737 ns/op
Iteration  14: 15.742 ns/op
Iteration  15: 15.743 ns/op
Iteration  16: 15.739 ns/op
Iteration  17: 15.739 ns/op
Iteration  18: 15.738 ns/op
Iteration  19: 15.743 ns/op
Iteration  20: 15.742 ns/op


Result "benchmark.StringContains.stringContains":
  16.252 ±(99.9%) 0.240 ns/op [Average]
  (min, avg, max) = (15.697, 16.252, 17.409), stdev = 0.708
  CI (99.9%): [16.013, 16.492] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  .z	z:,1<~uZqE"XPx\$)elWMYdmV27`|J[5`d*7V":V]OH.O{w2cXh/4Ji Kh  avgt  100  439.012 ± 1.298  ns/op
StringContains.stringContains     http  .z	z:,1<~uZqE"XPx\$)elWMYdmV27`|J[5`d*7V":V]OH.O{w2cXh/4Ji Kh  avgt  100   16.252 ± 0.240  ns/op

Benchmark result is saved to http_64_1_9.csv
