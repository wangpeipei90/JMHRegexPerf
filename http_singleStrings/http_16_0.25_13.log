# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = BCHMhttpFS|v"Cu`)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 315.242 ns/op
# Warmup Iteration   2: 306.720 ns/op
# Warmup Iteration   3: 225.202 ns/op
# Warmup Iteration   4: 227.140 ns/op
# Warmup Iteration   5: 228.297 ns/op
Iteration   1: 229.203 ns/op
Iteration   2: 225.074 ns/op
Iteration   3: 230.538 ns/op
Iteration   4: 232.162 ns/op
Iteration   5: 225.074 ns/op
Iteration   6: 226.104 ns/op
Iteration   7: 226.116 ns/op
Iteration   8: 225.444 ns/op
Iteration   9: 225.996 ns/op
Iteration  10: 226.116 ns/op
Iteration  11: 226.049 ns/op
Iteration  12: 225.087 ns/op
Iteration  13: 226.123 ns/op
Iteration  14: 226.359 ns/op
Iteration  15: 225.174 ns/op
Iteration  16: 226.212 ns/op
Iteration  17: 227.449 ns/op
Iteration  18: 225.186 ns/op
Iteration  19: 225.778 ns/op
Iteration  20: 226.804 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 306.023 ns/op
# Warmup Iteration   2: 295.873 ns/op
# Warmup Iteration   3: 224.828 ns/op
# Warmup Iteration   4: 227.591 ns/op
# Warmup Iteration   5: 229.896 ns/op
Iteration   1: 228.584 ns/op
Iteration   2: 224.549 ns/op
Iteration   3: 230.030 ns/op
Iteration   4: 231.152 ns/op
Iteration   5: 224.565 ns/op
Iteration   6: 225.933 ns/op
Iteration   7: 225.690 ns/op
Iteration   8: 225.645 ns/op
Iteration   9: 224.511 ns/op
Iteration  10: 225.616 ns/op
Iteration  11: 225.818 ns/op
Iteration  12: 224.572 ns/op
Iteration  13: 226.418 ns/op
Iteration  14: 226.488 ns/op
Iteration  15: 225.003 ns/op
Iteration  16: 226.988 ns/op
Iteration  17: 227.310 ns/op
Iteration  18: 224.620 ns/op
Iteration  19: 225.972 ns/op
Iteration  20: 225.179 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 308.156 ns/op
# Warmup Iteration   2: 297.078 ns/op
# Warmup Iteration   3: 224.651 ns/op
# Warmup Iteration   4: 226.488 ns/op
# Warmup Iteration   5: 227.205 ns/op
Iteration   1: 228.200 ns/op
Iteration   2: 224.328 ns/op
Iteration   3: 229.538 ns/op
Iteration   4: 230.819 ns/op
Iteration   5: 224.649 ns/op
Iteration   6: 227.227 ns/op
Iteration   7: 226.374 ns/op
Iteration   8: 225.638 ns/op
Iteration   9: 224.294 ns/op
Iteration  10: 226.781 ns/op
Iteration  11: 227.441 ns/op
Iteration  12: 224.539 ns/op
Iteration  13: 225.379 ns/op
Iteration  14: 225.393 ns/op
Iteration  15: 224.305 ns/op
Iteration  16: 225.413 ns/op
Iteration  17: 225.952 ns/op
Iteration  18: 224.261 ns/op
Iteration  19: 224.893 ns/op
Iteration  20: 225.011 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 311.120 ns/op
# Warmup Iteration   2: 297.454 ns/op
# Warmup Iteration   3: 225.443 ns/op
# Warmup Iteration   4: 227.664 ns/op
# Warmup Iteration   5: 229.753 ns/op
Iteration   1: 229.371 ns/op
Iteration   2: 225.439 ns/op
Iteration   3: 230.222 ns/op
Iteration   4: 232.040 ns/op
Iteration   5: 225.791 ns/op
Iteration   6: 227.187 ns/op
Iteration   7: 226.685 ns/op
Iteration   8: 226.836 ns/op
Iteration   9: 225.632 ns/op
Iteration  10: 226.676 ns/op
Iteration  11: 226.655 ns/op
Iteration  12: 225.600 ns/op
Iteration  13: 226.638 ns/op
Iteration  14: 226.755 ns/op
Iteration  15: 225.508 ns/op
Iteration  16: 226.681 ns/op
Iteration  17: 228.525 ns/op
Iteration  18: 225.435 ns/op
Iteration  19: 225.886 ns/op
Iteration  20: 227.986 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 307.511 ns/op
# Warmup Iteration   2: 295.804 ns/op
# Warmup Iteration   3: 228.295 ns/op
# Warmup Iteration   4: 230.512 ns/op
# Warmup Iteration   5: 231.230 ns/op
Iteration   1: 233.595 ns/op
Iteration   2: 228.209 ns/op
Iteration   3: 234.308 ns/op
Iteration   4: 234.996 ns/op
Iteration   5: 228.119 ns/op
Iteration   6: 230.908 ns/op
Iteration   7: 230.522 ns/op
Iteration   8: 228.699 ns/op
Iteration   9: 229.468 ns/op
Iteration  10: 229.876 ns/op
Iteration  11: 228.946 ns/op
Iteration  12: 229.761 ns/op
Iteration  13: 229.679 ns/op
Iteration  14: 228.228 ns/op
Iteration  15: 231.021 ns/op
Iteration  16: 229.481 ns/op
Iteration  17: 230.281 ns/op
Iteration  18: 228.201 ns/op
Iteration  19: 228.768 ns/op
Iteration  20: 228.765 ns/op


Result "benchmark.StringContains.regexMatches":
  227.205 ±(99.9%) 0.803 ns/op [Average]
  (min, avg, max) = (224.261, 227.205, 234.996), stdev = 2.367
  CI (99.9%): [226.402, 228.008] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = BCHMhttpFS|v"Cu`)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.478 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.871 ns/op
# Warmup Iteration   4: 9.869 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.862 ns/op
Iteration   2: 9.866 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.843 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.855 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.858 ns/op
Iteration   9: 9.871 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.874 ns/op
Iteration  13: 9.846 ns/op
Iteration  14: 9.856 ns/op
Iteration  15: 9.849 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.862 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.855 ns/op
Iteration  20: 9.860 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.474 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.862 ns/op
# Warmup Iteration   4: 9.851 ns/op
# Warmup Iteration   5: 9.837 ns/op
Iteration   1: 9.842 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.839 ns/op
Iteration   5: 9.844 ns/op
Iteration   6: 9.854 ns/op
Iteration   7: 9.847 ns/op
Iteration   8: 9.836 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.838 ns/op
Iteration  11: 9.829 ns/op
Iteration  12: 9.831 ns/op
Iteration  13: 9.830 ns/op
Iteration  14: 9.821 ns/op
Iteration  15: 9.823 ns/op
Iteration  16: 9.836 ns/op
Iteration  17: 9.820 ns/op
Iteration  18: 9.831 ns/op
Iteration  19: 9.825 ns/op
Iteration  20: 9.842 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.214 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.843 ns/op
# Warmup Iteration   4: 9.850 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.846 ns/op
Iteration   3: 9.856 ns/op
Iteration   4: 9.873 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.864 ns/op
Iteration   7: 9.847 ns/op
Iteration   8: 9.863 ns/op
Iteration   9: 9.867 ns/op
Iteration  10: 9.862 ns/op
Iteration  11: 9.858 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.870 ns/op
Iteration  15: 9.857 ns/op
Iteration  16: 9.837 ns/op
Iteration  17: 9.852 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.843 ns/op
Iteration  20: 9.860 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.494 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.937 ns/op
# Warmup Iteration   4: 9.913 ns/op
# Warmup Iteration   5: 9.901 ns/op
Iteration   1: 9.918 ns/op
Iteration   2: 9.934 ns/op
Iteration   3: 9.924 ns/op
Iteration   4: 9.931 ns/op
Iteration   5: 9.902 ns/op
Iteration   6: 9.939 ns/op
Iteration   7: 9.915 ns/op
Iteration   8: 9.934 ns/op
Iteration   9: 9.919 ns/op
Iteration  10: 9.924 ns/op
Iteration  11: 9.920 ns/op
Iteration  12: 9.915 ns/op
Iteration  13: 9.922 ns/op
Iteration  14: 9.933 ns/op
Iteration  15: 9.917 ns/op
Iteration  16: 9.943 ns/op
Iteration  17: 9.905 ns/op
Iteration  18: 9.917 ns/op
Iteration  19: 9.927 ns/op
Iteration  20: 9.925 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.440 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.863 ns/op
# Warmup Iteration   4: 9.852 ns/op
# Warmup Iteration   5: 9.866 ns/op
Iteration   1: 9.874 ns/op
Iteration   2: 9.854 ns/op
Iteration   3: 9.869 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.871 ns/op
Iteration   7: 9.853 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.858 ns/op
Iteration  11: 9.856 ns/op
Iteration  12: 9.857 ns/op
Iteration  13: 9.870 ns/op
Iteration  14: 9.857 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.857 ns/op
Iteration  17: 9.856 ns/op
Iteration  18: 9.845 ns/op
Iteration  19: 9.858 ns/op
Iteration  20: 9.861 ns/op


Result "benchmark.StringContains.stringContains":
  9.868 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (9.820, 9.868, 9.943), stdev = 0.031
  CI (99.9%): [9.858, 9.878] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  BCHMhttpFS|v"Cu`  avgt  100  227.205 ± 0.803  ns/op
StringContains.stringContains     http  BCHMhttpFS|v"Cu`  avgt  100    9.868 ± 0.010  ns/op

Benchmark result is saved to http_16_0.25_13.csv
