# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = _+Xxl4<}"E?bV54u2u@	T<hJ[{61s lJzlz:@sjc_X'&VMrKhttpj]Ru(+^XW~)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 354.582 ns/op
# Warmup Iteration   2: 362.328 ns/op
# Warmup Iteration   3: 300.304 ns/op
# Warmup Iteration   4: 290.797 ns/op
# Warmup Iteration   5: 288.065 ns/op
Iteration   1: 291.474 ns/op
Iteration   2: 288.272 ns/op
Iteration   3: 293.201 ns/op
Iteration   4: 294.644 ns/op
Iteration   5: 287.995 ns/op
Iteration   6: 296.586 ns/op
Iteration   7: 288.215 ns/op
Iteration   8: 289.541 ns/op
Iteration   9: 288.057 ns/op
Iteration  10: 289.383 ns/op
Iteration  11: 288.282 ns/op
Iteration  12: 289.574 ns/op
Iteration  13: 288.215 ns/op
Iteration  14: 289.583 ns/op
Iteration  15: 288.153 ns/op
Iteration  16: 289.600 ns/op
Iteration  17: 289.942 ns/op
Iteration  18: 288.084 ns/op
Iteration  19: 291.910 ns/op
Iteration  20: 288.190 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 348.794 ns/op
# Warmup Iteration   2: 350.685 ns/op
# Warmup Iteration   3: 274.184 ns/op
# Warmup Iteration   4: 270.417 ns/op
# Warmup Iteration   5: 270.013 ns/op
Iteration   1: 269.796 ns/op
Iteration   2: 270.429 ns/op
Iteration   3: 266.300 ns/op
Iteration   4: 274.569 ns/op
Iteration   5: 270.469 ns/op
Iteration   6: 274.218 ns/op
Iteration   7: 267.539 ns/op
Iteration   8: 266.404 ns/op
Iteration   9: 267.508 ns/op
Iteration  10: 266.273 ns/op
Iteration  11: 267.739 ns/op
Iteration  12: 266.524 ns/op
Iteration  13: 269.582 ns/op
Iteration  14: 269.382 ns/op
Iteration  15: 265.965 ns/op
Iteration  16: 268.477 ns/op
Iteration  17: 266.470 ns/op
Iteration  18: 267.793 ns/op
Iteration  19: 267.935 ns/op
Iteration  20: 266.334 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 353.214 ns/op
# Warmup Iteration   2: 361.443 ns/op
# Warmup Iteration   3: 281.088 ns/op
# Warmup Iteration   4: 272.664 ns/op
# Warmup Iteration   5: 270.474 ns/op
Iteration   1: 273.390 ns/op
Iteration   2: 274.711 ns/op
Iteration   3: 270.027 ns/op
Iteration   4: 275.893 ns/op
Iteration   5: 270.013 ns/op
Iteration   6: 277.958 ns/op
Iteration   7: 271.540 ns/op
Iteration   8: 271.165 ns/op
Iteration   9: 272.119 ns/op
Iteration  10: 270.250 ns/op
Iteration  11: 271.122 ns/op
Iteration  12: 270.133 ns/op
Iteration  13: 271.138 ns/op
Iteration  14: 271.221 ns/op
Iteration  15: 269.937 ns/op
Iteration  16: 272.718 ns/op
Iteration  17: 269.876 ns/op
Iteration  18: 271.442 ns/op
Iteration  19: 269.950 ns/op
Iteration  20: 271.289 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 353.548 ns/op
# Warmup Iteration   2: 362.081 ns/op
# Warmup Iteration   3: 281.451 ns/op
# Warmup Iteration   4: 272.819 ns/op
# Warmup Iteration   5: 270.416 ns/op
Iteration   1: 273.914 ns/op
Iteration   2: 275.229 ns/op
Iteration   3: 270.212 ns/op
Iteration   4: 276.553 ns/op
Iteration   5: 270.456 ns/op
Iteration   6: 318.989 ns/op
Iteration   7: 323.609 ns/op
Iteration   8: 287.185 ns/op
Iteration   9: 271.253 ns/op
Iteration  10: 272.482 ns/op
Iteration  11: 271.804 ns/op
Iteration  12: 270.310 ns/op
Iteration  13: 272.119 ns/op
Iteration  14: 270.439 ns/op
Iteration  15: 271.931 ns/op
Iteration  16: 270.552 ns/op
Iteration  17: 271.990 ns/op
Iteration  18: 272.193 ns/op
Iteration  19: 270.326 ns/op
Iteration  20: 272.186 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 339.300 ns/op
# Warmup Iteration   2: 319.469 ns/op
# Warmup Iteration   3: 239.853 ns/op
# Warmup Iteration   4: 241.988 ns/op
# Warmup Iteration   5: 243.088 ns/op
Iteration   1: 239.557 ns/op
Iteration   2: 243.799 ns/op
Iteration   3: 245.174 ns/op
Iteration   4: 239.551 ns/op
Iteration   5: 246.680 ns/op
Iteration   6: 240.890 ns/op
Iteration   7: 239.535 ns/op
Iteration   8: 240.815 ns/op
Iteration   9: 242.225 ns/op
Iteration  10: 239.439 ns/op
Iteration  11: 240.751 ns/op
Iteration  12: 241.841 ns/op
Iteration  13: 239.401 ns/op
Iteration  14: 240.825 ns/op
Iteration  15: 241.028 ns/op
Iteration  16: 239.573 ns/op
Iteration  17: 241.148 ns/op
Iteration  18: 239.705 ns/op
Iteration  19: 241.016 ns/op
Iteration  20: 240.204 ns/op


Result "benchmark.StringContains.regexMatches":
  269.814 ±(99.9%) 5.981 ns/op [Average]
  (min, avg, max) = (239.401, 269.814, 323.609), stdev = 17.634
  CI (99.9%): [263.833, 275.795] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = _+Xxl4<}"E?bV54u2u@	T<hJ[{61s lJzlz:@sjc_X'&VMrKhttpj]Ru(+^XW~)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.066 ns/op
# Warmup Iteration   2: 17.093 ns/op
# Warmup Iteration   3: 16.871 ns/op
# Warmup Iteration   4: 16.867 ns/op
# Warmup Iteration   5: 16.834 ns/op
Iteration   1: 16.883 ns/op
Iteration   2: 16.905 ns/op
Iteration   3: 16.882 ns/op
Iteration   4: 16.882 ns/op
Iteration   5: 16.885 ns/op
Iteration   6: 16.888 ns/op
Iteration   7: 16.892 ns/op
Iteration   8: 16.898 ns/op
Iteration   9: 16.867 ns/op
Iteration  10: 16.866 ns/op
Iteration  11: 16.861 ns/op
Iteration  12: 16.854 ns/op
Iteration  13: 16.872 ns/op
Iteration  14: 16.881 ns/op
Iteration  15: 16.851 ns/op
Iteration  16: 16.888 ns/op
Iteration  17: 16.877 ns/op
Iteration  18: 16.887 ns/op
Iteration  19: 16.875 ns/op
Iteration  20: 16.870 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.974 ns/op
# Warmup Iteration   2: 17.082 ns/op
# Warmup Iteration   3: 16.836 ns/op
# Warmup Iteration   4: 16.838 ns/op
# Warmup Iteration   5: 16.890 ns/op
Iteration   1: 16.823 ns/op
Iteration   2: 16.854 ns/op
Iteration   3: 16.856 ns/op
Iteration   4: 16.853 ns/op
Iteration   5: 16.846 ns/op
Iteration   6: 16.821 ns/op
Iteration   7: 16.811 ns/op
Iteration   8: 16.886 ns/op
Iteration   9: 16.843 ns/op
Iteration  10: 16.851 ns/op
Iteration  11: 16.828 ns/op
Iteration  12: 16.850 ns/op
Iteration  13: 16.844 ns/op
Iteration  14: 16.875 ns/op
Iteration  15: 16.864 ns/op
Iteration  16: 16.858 ns/op
Iteration  17: 16.838 ns/op
Iteration  18: 16.881 ns/op
Iteration  19: 16.837 ns/op
Iteration  20: 16.851 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.445 ns/op
# Warmup Iteration   2: 17.090 ns/op
# Warmup Iteration   3: 16.507 ns/op
# Warmup Iteration   4: 16.503 ns/op
# Warmup Iteration   5: 16.511 ns/op
Iteration   1: 16.516 ns/op
Iteration   2: 16.519 ns/op
Iteration   3: 16.517 ns/op
Iteration   4: 16.512 ns/op
Iteration   5: 16.514 ns/op
Iteration   6: 16.508 ns/op
Iteration   7: 16.496 ns/op
Iteration   8: 16.507 ns/op
Iteration   9: 16.498 ns/op
Iteration  10: 16.494 ns/op
Iteration  11: 16.534 ns/op
Iteration  12: 16.533 ns/op
Iteration  13: 16.508 ns/op
Iteration  14: 16.516 ns/op
Iteration  15: 16.509 ns/op
Iteration  16: 16.506 ns/op
Iteration  17: 16.504 ns/op
Iteration  18: 16.523 ns/op
Iteration  19: 16.505 ns/op
Iteration  20: 16.511 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.976 ns/op
# Warmup Iteration   2: 17.007 ns/op
# Warmup Iteration   3: 16.824 ns/op
# Warmup Iteration   4: 16.816 ns/op
# Warmup Iteration   5: 16.878 ns/op
Iteration   1: 16.845 ns/op
Iteration   2: 16.877 ns/op
Iteration   3: 16.847 ns/op
Iteration   4: 16.828 ns/op
Iteration   5: 16.803 ns/op
Iteration   6: 16.837 ns/op
Iteration   7: 16.820 ns/op
Iteration   8: 16.835 ns/op
Iteration   9: 16.811 ns/op
Iteration  10: 16.765 ns/op
Iteration  11: 16.868 ns/op
Iteration  12: 16.867 ns/op
Iteration  13: 16.868 ns/op
Iteration  14: 16.879 ns/op
Iteration  15: 16.883 ns/op
Iteration  16: 16.855 ns/op
Iteration  17: 16.859 ns/op
Iteration  18: 16.864 ns/op
Iteration  19: 16.862 ns/op
Iteration  20: 16.863 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.459 ns/op
# Warmup Iteration   2: 17.127 ns/op
# Warmup Iteration   3: 16.497 ns/op
# Warmup Iteration   4: 16.516 ns/op
# Warmup Iteration   5: 16.525 ns/op
Iteration   1: 16.519 ns/op
Iteration   2: 16.494 ns/op
Iteration   3: 16.514 ns/op
Iteration   4: 16.510 ns/op
Iteration   5: 16.521 ns/op
Iteration   6: 16.517 ns/op
Iteration   7: 16.524 ns/op
Iteration   8: 16.517 ns/op
Iteration   9: 16.531 ns/op
Iteration  10: 16.524 ns/op
Iteration  11: 16.508 ns/op
Iteration  12: 16.521 ns/op
Iteration  13: 16.517 ns/op
Iteration  14: 16.528 ns/op
Iteration  15: 16.521 ns/op
Iteration  16: 16.515 ns/op
Iteration  17: 16.510 ns/op
Iteration  18: 16.532 ns/op
Iteration  19: 16.531 ns/op
Iteration  20: 16.532 ns/op


Result "benchmark.StringContains.stringContains":
  16.721 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (16.494, 16.721, 16.905), stdev = 0.170
  CI (99.9%): [16.663, 16.779] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  _+Xxl4<}"E?bV54u2u@	T<hJ[{61s lJzlz:@sjc_X'&VMrKhttpj]Ru(+^XW~  avgt  100  269.814 ± 5.981  ns/op
StringContains.stringContains     http  _+Xxl4<}"E?bV54u2u@	T<hJ[{61s lJzlz:@sjc_X'&VMrKhttpj]Ru(+^XW~  avgt  100   16.721 ± 0.058  ns/op

Benchmark result is saved to http_64_0.75_7.csv
