# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = G;tE%@u}Sox`\rQDGadt?'Y
U0BB[3&f9a2;sEd!gOWL!]w!8Dn|Xb&U;ji|x)xfmxDgvNQ+[lMBu>sfraTAI~1>m2{T1^Qx5083;qPt
v=Py5Z6XK[#T>Xk*)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 390.723 ns/op
# Warmup Iteration   2: 383.862 ns/op
# Warmup Iteration   3: 321.670 ns/op
# Warmup Iteration   4: 297.194 ns/op
# Warmup Iteration   5: 292.122 ns/op
Iteration   1: 296.012 ns/op
Iteration   2: 292.027 ns/op
Iteration   3: 297.208 ns/op
Iteration   4: 292.023 ns/op
Iteration   5: 299.693 ns/op
Iteration   6: 292.243 ns/op
Iteration   7: 302.836 ns/op
Iteration   8: 292.345 ns/op
Iteration   9: 296.119 ns/op
Iteration  10: 295.356 ns/op
Iteration  11: 291.792 ns/op
Iteration  12: 294.346 ns/op
Iteration  13: 292.068 ns/op
Iteration  14: 294.041 ns/op
Iteration  15: 292.360 ns/op
Iteration  16: 294.231 ns/op
Iteration  17: 292.060 ns/op
Iteration  18: 294.307 ns/op
Iteration  19: 292.119 ns/op
Iteration  20: 293.883 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 345.434 ns/op
# Warmup Iteration   2: 339.897 ns/op
# Warmup Iteration   3: 267.313 ns/op
# Warmup Iteration   4: 264.095 ns/op
# Warmup Iteration   5: 261.722 ns/op
Iteration   1: 265.126 ns/op
Iteration   2: 268.259 ns/op
Iteration   3: 261.685 ns/op
Iteration   4: 267.405 ns/op
Iteration   5: 269.294 ns/op
Iteration   6: 261.650 ns/op
Iteration   7: 263.037 ns/op
Iteration   8: 262.539 ns/op
Iteration   9: 264.087 ns/op
Iteration  10: 263.381 ns/op
Iteration  11: 261.765 ns/op
Iteration  12: 263.238 ns/op
Iteration  13: 261.579 ns/op
Iteration  14: 263.191 ns/op
Iteration  15: 261.630 ns/op
Iteration  16: 263.245 ns/op
Iteration  17: 263.351 ns/op
Iteration  18: 261.572 ns/op
Iteration  19: 265.461 ns/op
Iteration  20: 261.671 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 329.794 ns/op
# Warmup Iteration   2: 325.685 ns/op
# Warmup Iteration   3: 247.747 ns/op
# Warmup Iteration   4: 250.031 ns/op
# Warmup Iteration   5: 250.673 ns/op
Iteration   1: 247.609 ns/op
Iteration   2: 251.912 ns/op
Iteration   3: 253.032 ns/op
Iteration   4: 247.531 ns/op
Iteration   5: 254.508 ns/op
Iteration   6: 247.834 ns/op
Iteration   7: 248.645 ns/op
Iteration   8: 248.569 ns/op
Iteration   9: 247.527 ns/op
Iteration  10: 248.730 ns/op
Iteration  11: 248.489 ns/op
Iteration  12: 247.356 ns/op
Iteration  13: 248.502 ns/op
Iteration  14: 248.276 ns/op
Iteration  15: 247.313 ns/op
Iteration  16: 248.373 ns/op
Iteration  17: 247.526 ns/op
Iteration  18: 248.360 ns/op
Iteration  19: 248.309 ns/op
Iteration  20: 247.511 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 351.671 ns/op
# Warmup Iteration   2: 340.703 ns/op
# Warmup Iteration   3: 268.169 ns/op
# Warmup Iteration   4: 264.077 ns/op
# Warmup Iteration   5: 261.370 ns/op
Iteration   1: 264.909 ns/op
Iteration   2: 265.863 ns/op
Iteration   3: 261.305 ns/op
Iteration   4: 267.154 ns/op
Iteration   5: 268.987 ns/op
Iteration   6: 261.340 ns/op
Iteration   7: 262.664 ns/op
Iteration   8: 261.417 ns/op
Iteration   9: 262.610 ns/op
Iteration  10: 262.711 ns/op
Iteration  11: 261.335 ns/op
Iteration  12: 264.321 ns/op
Iteration  13: 261.297 ns/op
Iteration  14: 262.723 ns/op
Iteration  15: 261.350 ns/op
Iteration  16: 262.678 ns/op
Iteration  17: 263.325 ns/op
Iteration  18: 262.166 ns/op
Iteration  19: 264.305 ns/op
Iteration  20: 261.405 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 344.189 ns/op
# Warmup Iteration   2: 341.008 ns/op
# Warmup Iteration   3: 267.064 ns/op
# Warmup Iteration   4: 264.034 ns/op
# Warmup Iteration   5: 261.778 ns/op
Iteration   1: 265.027 ns/op
Iteration   2: 266.235 ns/op
Iteration   3: 261.647 ns/op
Iteration   4: 267.576 ns/op
Iteration   5: 269.554 ns/op
Iteration   6: 261.714 ns/op
Iteration   7: 263.011 ns/op
Iteration   8: 261.826 ns/op
Iteration   9: 262.970 ns/op
Iteration  10: 264.169 ns/op
Iteration  11: 261.688 ns/op
Iteration  12: 263.070 ns/op
Iteration  13: 261.632 ns/op
Iteration  14: 263.112 ns/op
Iteration  15: 261.678 ns/op
Iteration  16: 263.063 ns/op
Iteration  17: 262.942 ns/op
Iteration  18: 261.631 ns/op
Iteration  19: 263.152 ns/op
Iteration  20: 261.722 ns/op


Result "benchmark.StringContains.regexMatches":
  266.674 ±(99.9%) 5.155 ns/op [Average]
  (min, avg, max) = (247.313, 266.674, 302.836), stdev = 15.201
  CI (99.9%): [261.519, 271.830] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = G;tE%@u}Sox`\rQDGadt?'Y
U0BB[3&f9a2;sEd!gOWL!]w!8Dn|Xb&U;ji|x)xfmxDgvNQ+[lMBu>sfraTAI~1>m2{T1^Qx5083;qPt
v=Py5Z6XK[#T>Xk*)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.243 ns/op
# Warmup Iteration   2: 24.625 ns/op
# Warmup Iteration   3: 24.566 ns/op
# Warmup Iteration   4: 24.577 ns/op
# Warmup Iteration   5: 24.574 ns/op
Iteration   1: 24.573 ns/op
Iteration   2: 24.570 ns/op
Iteration   3: 24.567 ns/op
Iteration   4: 24.568 ns/op
Iteration   5: 24.569 ns/op
Iteration   6: 24.580 ns/op
Iteration   7: 24.568 ns/op
Iteration   8: 24.569 ns/op
Iteration   9: 24.569 ns/op
Iteration  10: 24.571 ns/op
Iteration  11: 24.610 ns/op
Iteration  12: 24.583 ns/op
Iteration  13: 24.568 ns/op
Iteration  14: 24.569 ns/op
Iteration  15: 24.569 ns/op
Iteration  16: 24.567 ns/op
Iteration  17: 24.570 ns/op
Iteration  18: 24.570 ns/op
Iteration  19: 24.573 ns/op
Iteration  20: 24.572 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.467 ns/op
# Warmup Iteration   2: 24.623 ns/op
# Warmup Iteration   3: 24.569 ns/op
# Warmup Iteration   4: 24.565 ns/op
# Warmup Iteration   5: 24.571 ns/op
Iteration   1: 24.566 ns/op
Iteration   2: 24.570 ns/op
Iteration   3: 24.589 ns/op
Iteration   4: 24.565 ns/op
Iteration   5: 24.594 ns/op
Iteration   6: 24.582 ns/op
Iteration   7: 24.574 ns/op
Iteration   8: 24.594 ns/op
Iteration   9: 24.569 ns/op
Iteration  10: 24.566 ns/op
Iteration  11: 24.566 ns/op
Iteration  12: 24.576 ns/op
Iteration  13: 24.597 ns/op
Iteration  14: 24.566 ns/op
Iteration  15: 24.578 ns/op
Iteration  16: 24.573 ns/op
Iteration  17: 24.566 ns/op
Iteration  18: 24.574 ns/op
Iteration  19: 24.575 ns/op
Iteration  20: 24.568 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.501 ns/op
# Warmup Iteration   2: 24.661 ns/op
# Warmup Iteration   3: 24.569 ns/op
# Warmup Iteration   4: 24.574 ns/op
# Warmup Iteration   5: 24.571 ns/op
Iteration   1: 24.572 ns/op
Iteration   2: 24.571 ns/op
Iteration   3: 24.569 ns/op
Iteration   4: 24.584 ns/op
Iteration   5: 24.574 ns/op
Iteration   6: 24.573 ns/op
Iteration   7: 24.574 ns/op
Iteration   8: 24.609 ns/op
Iteration   9: 24.577 ns/op
Iteration  10: 24.572 ns/op
Iteration  11: 24.569 ns/op
Iteration  12: 24.570 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.568 ns/op
Iteration  15: 24.576 ns/op
Iteration  16: 24.568 ns/op
Iteration  17: 24.573 ns/op
Iteration  18: 24.573 ns/op
Iteration  19: 24.568 ns/op
Iteration  20: 24.579 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.449 ns/op
# Warmup Iteration   2: 24.629 ns/op
# Warmup Iteration   3: 24.589 ns/op
# Warmup Iteration   4: 24.567 ns/op
# Warmup Iteration   5: 24.582 ns/op
Iteration   1: 24.572 ns/op
Iteration   2: 24.571 ns/op
Iteration   3: 24.569 ns/op
Iteration   4: 24.589 ns/op
Iteration   5: 24.571 ns/op
Iteration   6: 24.573 ns/op
Iteration   7: 24.568 ns/op
Iteration   8: 24.572 ns/op
Iteration   9: 24.568 ns/op
Iteration  10: 24.574 ns/op
Iteration  11: 24.569 ns/op
Iteration  12: 24.568 ns/op
Iteration  13: 24.570 ns/op
Iteration  14: 24.577 ns/op
Iteration  15: 24.576 ns/op
Iteration  16: 24.575 ns/op
Iteration  17: 24.572 ns/op
Iteration  18: 24.582 ns/op
Iteration  19: 24.574 ns/op
Iteration  20: 24.581 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.497 ns/op
# Warmup Iteration   2: 24.670 ns/op
# Warmup Iteration   3: 24.603 ns/op
# Warmup Iteration   4: 24.588 ns/op
# Warmup Iteration   5: 24.581 ns/op
Iteration   1: 24.575 ns/op
Iteration   2: 24.580 ns/op
Iteration   3: 24.581 ns/op
Iteration   4: 24.574 ns/op
Iteration   5: 24.603 ns/op
Iteration   6: 24.573 ns/op
Iteration   7: 24.575 ns/op
Iteration   8: 24.626 ns/op
Iteration   9: 24.574 ns/op
Iteration  10: 24.574 ns/op
Iteration  11: 24.600 ns/op
Iteration  12: 24.610 ns/op
Iteration  13: 24.578 ns/op
Iteration  14: 24.585 ns/op
Iteration  15: 24.577 ns/op
Iteration  16: 24.576 ns/op
Iteration  17: 24.581 ns/op
Iteration  18: 24.591 ns/op
Iteration  19: 24.574 ns/op
Iteration  20: 24.615 ns/op


Result "benchmark.StringContains.stringContains":
  24.576 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (24.565, 24.576, 24.626), stdev = 0.012
  CI (99.9%): [24.573, 24.580] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  G;tE%@u}Sox`\rQDGadt?'Y
U0BB[3&f9a2;sEd!gOWL!]w!8Dn|Xb&U;ji|x)xfmxDgvNQ+[lMBu>sfraTAI~1>m2{T1^Qx5083;qPt
v=Py5Z6XK[#T>Xk*  avgt  100  266.674 ± 5.155  ns/op
StringContains.stringContains     http  G;tE%@u}Sox`\rQDGadt?'Y
U0BB[3&f9a2;sEd!gOWL!]w!8Dn|Xb&U;ji|x)xfmxDgvNQ+[lMBu>sfraTAI~1>m2{T1^Qx5083;qPt
v=Py5Z6XK[#T>Xk*  avgt  100   24.576 ± 0.004  ns/op

Benchmark result is saved to http_128_1_2.csv
