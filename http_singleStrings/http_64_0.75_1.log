# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = xW+8>40`sfF,pu6u	eq_D?';NWB$5n[4w?|>8pIuzV.Q:M(lhttp.RUEY	>!@`?V)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 353.079 ns/op
# Warmup Iteration   2: 356.791 ns/op
# Warmup Iteration   3: 280.557 ns/op
# Warmup Iteration   4: 272.524 ns/op
# Warmup Iteration   5: 269.843 ns/op
Iteration   1: 273.319 ns/op
Iteration   2: 274.548 ns/op
Iteration   3: 269.823 ns/op
Iteration   4: 275.918 ns/op
Iteration   5: 270.096 ns/op
Iteration   6: 278.097 ns/op
Iteration   7: 270.892 ns/op
Iteration   8: 269.581 ns/op
Iteration   9: 270.958 ns/op
Iteration  10: 269.785 ns/op
Iteration  11: 271.240 ns/op
Iteration  12: 269.684 ns/op
Iteration  13: 270.848 ns/op
Iteration  14: 270.939 ns/op
Iteration  15: 269.611 ns/op
Iteration  16: 271.666 ns/op
Iteration  17: 269.601 ns/op
Iteration  18: 271.215 ns/op
Iteration  19: 269.561 ns/op
Iteration  20: 273.440 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 351.338 ns/op
# Warmup Iteration   2: 348.226 ns/op
# Warmup Iteration   3: 275.270 ns/op
# Warmup Iteration   4: 269.801 ns/op
# Warmup Iteration   5: 268.449 ns/op
Iteration   1: 271.901 ns/op
Iteration   2: 271.776 ns/op
Iteration   3: 267.139 ns/op
Iteration   4: 273.139 ns/op
Iteration   5: 267.414 ns/op
Iteration   6: 274.563 ns/op
Iteration   7: 268.736 ns/op
Iteration   8: 267.225 ns/op
Iteration   9: 268.408 ns/op
Iteration  10: 267.009 ns/op
Iteration  11: 268.517 ns/op
Iteration  12: 267.097 ns/op
Iteration  13: 268.099 ns/op
Iteration  14: 268.250 ns/op
Iteration  15: 267.080 ns/op
Iteration  16: 268.392 ns/op
Iteration  17: 267.123 ns/op
Iteration  18: 268.159 ns/op
Iteration  19: 268.257 ns/op
Iteration  20: 267.114 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 348.110 ns/op
# Warmup Iteration   2: 353.703 ns/op
# Warmup Iteration   3: 279.282 ns/op
# Warmup Iteration   4: 273.152 ns/op
# Warmup Iteration   5: 270.613 ns/op
Iteration   1: 273.869 ns/op
Iteration   2: 275.198 ns/op
Iteration   3: 270.804 ns/op
Iteration   4: 276.743 ns/op
Iteration   5: 270.479 ns/op
Iteration   6: 278.049 ns/op
Iteration   7: 272.277 ns/op
Iteration   8: 270.522 ns/op
Iteration   9: 271.987 ns/op
Iteration  10: 270.831 ns/op
Iteration  11: 271.912 ns/op
Iteration  12: 270.467 ns/op
Iteration  13: 271.871 ns/op
Iteration  14: 271.852 ns/op
Iteration  15: 270.533 ns/op
Iteration  16: 271.897 ns/op
Iteration  17: 270.514 ns/op
Iteration  18: 271.898 ns/op
Iteration  19: 270.518 ns/op
Iteration  20: 272.276 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 349.447 ns/op
# Warmup Iteration   2: 353.224 ns/op
# Warmup Iteration   3: 281.547 ns/op
# Warmup Iteration   4: 274.803 ns/op
# Warmup Iteration   5: 272.599 ns/op
Iteration   1: 275.788 ns/op
Iteration   2: 276.830 ns/op
Iteration   3: 272.262 ns/op
Iteration   4: 278.048 ns/op
Iteration   5: 272.538 ns/op
Iteration   6: 279.898 ns/op
Iteration   7: 272.252 ns/op
Iteration   8: 274.040 ns/op
Iteration   9: 274.507 ns/op
Iteration  10: 272.837 ns/op
Iteration  11: 273.730 ns/op
Iteration  12: 272.179 ns/op
Iteration  13: 273.505 ns/op
Iteration  14: 272.072 ns/op
Iteration  15: 273.369 ns/op
Iteration  16: 274.753 ns/op
Iteration  17: 272.211 ns/op
Iteration  18: 273.996 ns/op
Iteration  19: 272.205 ns/op
Iteration  20: 273.962 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.319 ns/op
# Warmup Iteration   2: 352.213 ns/op
# Warmup Iteration   3: 279.002 ns/op
# Warmup Iteration   4: 273.398 ns/op
# Warmup Iteration   5: 271.025 ns/op
Iteration   1: 274.135 ns/op
Iteration   2: 275.345 ns/op
Iteration   3: 270.786 ns/op
Iteration   4: 276.755 ns/op
Iteration   5: 271.230 ns/op
Iteration   6: 278.294 ns/op
Iteration   7: 272.275 ns/op
Iteration   8: 270.949 ns/op
Iteration   9: 273.446 ns/op
Iteration  10: 270.731 ns/op
Iteration  11: 272.109 ns/op
Iteration  12: 271.006 ns/op
Iteration  13: 272.340 ns/op
Iteration  14: 273.155 ns/op
Iteration  15: 270.614 ns/op
Iteration  16: 273.519 ns/op
Iteration  17: 270.999 ns/op
Iteration  18: 272.783 ns/op
Iteration  19: 271.009 ns/op
Iteration  20: 277.305 ns/op


Result "benchmark.StringContains.regexMatches":
  271.905 ±(99.9%) 0.961 ns/op [Average]
  (min, avg, max) = (267.009, 271.905, 279.898), stdev = 2.834
  CI (99.9%): [270.944, 272.866] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = xW+8>40`sfF,pu6u	eq_D?';NWB$5n[4w?|>8pIuzV.Q:M(lhttp.RUEY	>!@`?V)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.049 ns/op
# Warmup Iteration   2: 17.041 ns/op
# Warmup Iteration   3: 16.585 ns/op
# Warmup Iteration   4: 16.554 ns/op
# Warmup Iteration   5: 16.571 ns/op
Iteration   1: 16.579 ns/op
Iteration   2: 16.594 ns/op
Iteration   3: 16.578 ns/op
Iteration   4: 16.570 ns/op
Iteration   5: 16.576 ns/op
Iteration   6: 16.602 ns/op
Iteration   7: 16.572 ns/op
Iteration   8: 16.569 ns/op
Iteration   9: 16.580 ns/op
Iteration  10: 16.573 ns/op
Iteration  11: 16.564 ns/op
Iteration  12: 16.598 ns/op
Iteration  13: 16.580 ns/op
Iteration  14: 16.577 ns/op
Iteration  15: 16.567 ns/op
Iteration  16: 16.576 ns/op
Iteration  17: 16.577 ns/op
Iteration  18: 16.572 ns/op
Iteration  19: 16.578 ns/op
Iteration  20: 16.573 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.946 ns/op
# Warmup Iteration   2: 17.077 ns/op
# Warmup Iteration   3: 16.517 ns/op
# Warmup Iteration   4: 16.514 ns/op
# Warmup Iteration   5: 16.523 ns/op
Iteration   1: 16.494 ns/op
Iteration   2: 16.520 ns/op
Iteration   3: 16.509 ns/op
Iteration   4: 16.519 ns/op
Iteration   5: 16.525 ns/op
Iteration   6: 16.539 ns/op
Iteration   7: 16.521 ns/op
Iteration   8: 16.540 ns/op
Iteration   9: 16.515 ns/op
Iteration  10: 16.517 ns/op
Iteration  11: 16.514 ns/op
Iteration  12: 16.501 ns/op
Iteration  13: 16.493 ns/op
Iteration  14: 16.520 ns/op
Iteration  15: 16.510 ns/op
Iteration  16: 16.503 ns/op
Iteration  17: 16.502 ns/op
Iteration  18: 16.492 ns/op
Iteration  19: 16.504 ns/op
Iteration  20: 16.520 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.951 ns/op
# Warmup Iteration   2: 17.064 ns/op
# Warmup Iteration   3: 16.531 ns/op
# Warmup Iteration   4: 16.517 ns/op
# Warmup Iteration   5: 16.530 ns/op
Iteration   1: 16.522 ns/op
Iteration   2: 16.500 ns/op
Iteration   3: 16.541 ns/op
Iteration   4: 16.524 ns/op
Iteration   5: 16.513 ns/op
Iteration   6: 16.511 ns/op
Iteration   7: 16.528 ns/op
Iteration   8: 16.521 ns/op
Iteration   9: 16.500 ns/op
Iteration  10: 16.523 ns/op
Iteration  11: 16.531 ns/op
Iteration  12: 16.502 ns/op
Iteration  13: 16.526 ns/op
Iteration  14: 16.519 ns/op
Iteration  15: 16.507 ns/op
Iteration  16: 16.525 ns/op
Iteration  17: 16.521 ns/op
Iteration  18: 16.540 ns/op
Iteration  19: 16.508 ns/op
Iteration  20: 16.512 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.960 ns/op
# Warmup Iteration   2: 17.066 ns/op
# Warmup Iteration   3: 16.479 ns/op
# Warmup Iteration   4: 16.490 ns/op
# Warmup Iteration   5: 16.472 ns/op
Iteration   1: 16.481 ns/op
Iteration   2: 16.492 ns/op
Iteration   3: 16.481 ns/op
Iteration   4: 16.468 ns/op
Iteration   5: 16.494 ns/op
Iteration   6: 16.459 ns/op
Iteration   7: 16.483 ns/op
Iteration   8: 16.491 ns/op
Iteration   9: 16.481 ns/op
Iteration  10: 16.468 ns/op
Iteration  11: 16.497 ns/op
Iteration  12: 16.480 ns/op
Iteration  13: 16.484 ns/op
Iteration  14: 16.494 ns/op
Iteration  15: 16.492 ns/op
Iteration  16: 16.492 ns/op
Iteration  17: 16.496 ns/op
Iteration  18: 16.485 ns/op
Iteration  19: 16.494 ns/op
Iteration  20: 16.521 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.939 ns/op
# Warmup Iteration   2: 17.036 ns/op
# Warmup Iteration   3: 17.408 ns/op
# Warmup Iteration   4: 17.370 ns/op
# Warmup Iteration   5: 17.402 ns/op
Iteration   1: 17.398 ns/op
Iteration   2: 17.414 ns/op
Iteration   3: 17.442 ns/op
Iteration   4: 17.331 ns/op
Iteration   5: 17.379 ns/op
Iteration   6: 17.359 ns/op
Iteration   7: 17.384 ns/op
Iteration   8: 17.405 ns/op
Iteration   9: 17.278 ns/op
Iteration  10: 17.280 ns/op
Iteration  11: 17.341 ns/op
Iteration  12: 17.386 ns/op
Iteration  13: 17.394 ns/op
Iteration  14: 17.333 ns/op
Iteration  15: 17.318 ns/op
Iteration  16: 17.432 ns/op
Iteration  17: 17.393 ns/op
Iteration  18: 17.358 ns/op
Iteration  19: 17.306 ns/op
Iteration  20: 17.379 ns/op


Result "benchmark.StringContains.stringContains":
  16.692 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (16.459, 16.692, 17.442), stdev = 0.340
  CI (99.9%): [16.577, 16.808] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  xW+8>40`sfF,pu6u	eq_D?';NWB$5n[4w?|>8pIuzV.Q:M(lhttp.RUEY	>!@`?V  avgt  100  271.905 ± 0.961  ns/op
StringContains.stringContains     http  xW+8>40`sfF,pu6u	eq_D?';NWB$5n[4w?|>8pIuzV.Q:M(lhttp.RUEY	>!@`?V  avgt  100   16.692 ± 0.115  ns/op

Benchmark result is saved to http_64_0.75_1.csv
