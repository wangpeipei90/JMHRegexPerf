# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = [ogc98b%,HHiM}LpX@wFO!NRz+]?91IfH[ONn 
A%U<	Wlg`c%HASTf6
&#'0:@BD_3 R$F1]ansc4m3$)^kxm|)[}T#y_zhttp]zuMEm	w9{qm^!Tvu@]UwT/M^j[)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 510.513 ns/op
# Warmup Iteration   2: 501.995 ns/op
# Warmup Iteration   3: 550.064 ns/op
# Warmup Iteration   4: 482.646 ns/op
# Warmup Iteration   5: 469.465 ns/op
Iteration   1: 473.380 ns/op
Iteration   2: 468.861 ns/op
Iteration   3: 468.912 ns/op
Iteration   4: 475.388 ns/op
Iteration   5: 469.108 ns/op
Iteration   6: 469.218 ns/op
Iteration   7: 478.628 ns/op
Iteration   8: 470.740 ns/op
Iteration   9: 470.367 ns/op
Iteration  10: 484.177 ns/op
Iteration  11: 473.943 ns/op
Iteration  12: 468.440 ns/op
Iteration  13: 482.838 ns/op
Iteration  14: 468.270 ns/op
Iteration  15: 468.844 ns/op
Iteration  16: 471.578 ns/op
Iteration  17: 468.921 ns/op
Iteration  18: 468.664 ns/op
Iteration  19: 471.308 ns/op
Iteration  20: 468.981 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 521.682 ns/op
# Warmup Iteration   2: 530.201 ns/op
# Warmup Iteration   3: 530.992 ns/op
# Warmup Iteration   4: 468.720 ns/op
# Warmup Iteration   5: 456.298 ns/op
Iteration   1: 460.180 ns/op
Iteration   2: 456.031 ns/op
Iteration   3: 455.956 ns/op
Iteration   4: 461.490 ns/op
Iteration   5: 455.519 ns/op
Iteration   6: 463.049 ns/op
Iteration   7: 456.473 ns/op
Iteration   8: 456.817 ns/op
Iteration   9: 466.029 ns/op
Iteration  10: 455.903 ns/op
Iteration  11: 455.809 ns/op
Iteration  12: 468.195 ns/op
Iteration  13: 455.672 ns/op
Iteration  14: 455.553 ns/op
Iteration  15: 461.129 ns/op
Iteration  16: 456.474 ns/op
Iteration  17: 456.454 ns/op
Iteration  18: 458.862 ns/op
Iteration  19: 455.805 ns/op
Iteration  20: 456.515 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 513.627 ns/op
# Warmup Iteration   2: 499.369 ns/op
# Warmup Iteration   3: 546.927 ns/op
# Warmup Iteration   4: 484.552 ns/op
# Warmup Iteration   5: 473.847 ns/op
Iteration   1: 479.043 ns/op
Iteration   2: 476.202 ns/op
Iteration   3: 476.381 ns/op
Iteration   4: 480.606 ns/op
Iteration   5: 473.201 ns/op
Iteration   6: 474.406 ns/op
Iteration   7: 483.079 ns/op
Iteration   8: 474.250 ns/op
Iteration   9: 472.365 ns/op
Iteration  10: 488.712 ns/op
Iteration  11: 473.597 ns/op
Iteration  12: 472.883 ns/op
Iteration  13: 485.487 ns/op
Iteration  14: 472.754 ns/op
Iteration  15: 473.175 ns/op
Iteration  16: 477.833 ns/op
Iteration  17: 473.825 ns/op
Iteration  18: 472.722 ns/op
Iteration  19: 475.830 ns/op
Iteration  20: 473.288 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 511.267 ns/op
# Warmup Iteration   2: 518.956 ns/op
# Warmup Iteration   3: 522.053 ns/op
# Warmup Iteration   4: 453.408 ns/op
# Warmup Iteration   5: 442.718 ns/op
Iteration   1: 448.031 ns/op
Iteration   2: 446.283 ns/op
Iteration   3: 446.216 ns/op
Iteration   4: 448.574 ns/op
Iteration   5: 442.503 ns/op
Iteration   6: 449.879 ns/op
Iteration   7: 442.428 ns/op
Iteration   8: 442.594 ns/op
Iteration   9: 452.153 ns/op
Iteration  10: 442.628 ns/op
Iteration  11: 442.865 ns/op
Iteration  12: 454.818 ns/op
Iteration  13: 442.923 ns/op
Iteration  14: 442.767 ns/op
Iteration  15: 444.409 ns/op
Iteration  16: 443.025 ns/op
Iteration  17: 442.930 ns/op
Iteration  18: 444.674 ns/op
Iteration  19: 442.780 ns/op
Iteration  20: 444.849 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 514.802 ns/op
# Warmup Iteration   2: 531.477 ns/op
# Warmup Iteration   3: 530.899 ns/op
# Warmup Iteration   4: 470.174 ns/op
# Warmup Iteration   5: 456.774 ns/op
Iteration   1: 461.543 ns/op
Iteration   2: 456.307 ns/op
Iteration   3: 455.591 ns/op
Iteration   4: 461.568 ns/op
Iteration   5: 456.028 ns/op
Iteration   6: 457.666 ns/op
Iteration   7: 462.702 ns/op
Iteration   8: 455.787 ns/op
Iteration   9: 467.784 ns/op
Iteration  10: 455.475 ns/op
Iteration  11: 455.738 ns/op
Iteration  12: 469.693 ns/op
Iteration  13: 455.704 ns/op
Iteration  14: 455.889 ns/op
Iteration  15: 458.630 ns/op
Iteration  16: 455.777 ns/op
Iteration  17: 455.891 ns/op
Iteration  18: 458.145 ns/op
Iteration  19: 455.251 ns/op
Iteration  20: 455.624 ns/op


Result "benchmark.StringContains.regexMatches":
  462.122 ±(99.9%) 4.028 ns/op [Average]
  (min, avg, max) = (442.428, 462.122, 488.712), stdev = 11.878
  CI (99.9%): [458.094, 466.151] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = [ogc98b%,HHiM}LpX@wFO!NRz+]?91IfH[ONn 
A%U<	Wlg`c%HASTf6
&#'0:@BD_3 R$F1]ansc4m3$)^kxm|)[}T#y_zhttp]zuMEm	w9{qm^!Tvu@]UwT/M^j[)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.593 ns/op
# Warmup Iteration   2: 23.874 ns/op
# Warmup Iteration   3: 23.208 ns/op
# Warmup Iteration   4: 23.197 ns/op
# Warmup Iteration   5: 23.204 ns/op
Iteration   1: 23.194 ns/op
Iteration   2: 23.182 ns/op
Iteration   3: 23.177 ns/op
Iteration   4: 23.213 ns/op
Iteration   5: 23.225 ns/op
Iteration   6: 23.217 ns/op
Iteration   7: 23.229 ns/op
Iteration   8: 23.209 ns/op
Iteration   9: 23.206 ns/op
Iteration  10: 23.229 ns/op
Iteration  11: 23.224 ns/op
Iteration  12: 23.216 ns/op
Iteration  13: 23.205 ns/op
Iteration  14: 23.198 ns/op
Iteration  15: 23.192 ns/op
Iteration  16: 23.210 ns/op
Iteration  17: 23.213 ns/op
Iteration  18: 23.194 ns/op
Iteration  19: 23.207 ns/op
Iteration  20: 23.196 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.619 ns/op
# Warmup Iteration   2: 23.899 ns/op
# Warmup Iteration   3: 24.002 ns/op
# Warmup Iteration   4: 24.021 ns/op
# Warmup Iteration   5: 24.024 ns/op
Iteration   1: 24.035 ns/op
Iteration   2: 24.018 ns/op
Iteration   3: 23.984 ns/op
Iteration   4: 24.023 ns/op
Iteration   5: 24.009 ns/op
Iteration   6: 24.020 ns/op
Iteration   7: 24.042 ns/op
Iteration   8: 24.023 ns/op
Iteration   9: 23.982 ns/op
Iteration  10: 24.044 ns/op
Iteration  11: 24.043 ns/op
Iteration  12: 23.951 ns/op
Iteration  13: 23.992 ns/op
Iteration  14: 24.045 ns/op
Iteration  15: 23.984 ns/op
Iteration  16: 24.027 ns/op
Iteration  17: 24.030 ns/op
Iteration  18: 24.008 ns/op
Iteration  19: 24.076 ns/op
Iteration  20: 24.038 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.648 ns/op
# Warmup Iteration   2: 23.914 ns/op
# Warmup Iteration   3: 23.221 ns/op
# Warmup Iteration   4: 23.218 ns/op
# Warmup Iteration   5: 23.199 ns/op
Iteration   1: 23.200 ns/op
Iteration   2: 23.207 ns/op
Iteration   3: 23.204 ns/op
Iteration   4: 23.212 ns/op
Iteration   5: 23.197 ns/op
Iteration   6: 23.205 ns/op
Iteration   7: 23.196 ns/op
Iteration   8: 23.208 ns/op
Iteration   9: 23.173 ns/op
Iteration  10: 23.210 ns/op
Iteration  11: 23.231 ns/op
Iteration  12: 23.214 ns/op
Iteration  13: 23.222 ns/op
Iteration  14: 23.205 ns/op
Iteration  15: 23.213 ns/op
Iteration  16: 23.223 ns/op
Iteration  17: 23.219 ns/op
Iteration  18: 23.217 ns/op
Iteration  19: 23.201 ns/op
Iteration  20: 23.205 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.604 ns/op
# Warmup Iteration   2: 23.859 ns/op
# Warmup Iteration   3: 23.195 ns/op
# Warmup Iteration   4: 23.191 ns/op
# Warmup Iteration   5: 23.214 ns/op
Iteration   1: 23.224 ns/op
Iteration   2: 23.177 ns/op
Iteration   3: 23.205 ns/op
Iteration   4: 23.173 ns/op
Iteration   5: 23.193 ns/op
Iteration   6: 23.201 ns/op
Iteration   7: 23.192 ns/op
Iteration   8: 23.191 ns/op
Iteration   9: 23.195 ns/op
Iteration  10: 23.199 ns/op
Iteration  11: 23.224 ns/op
Iteration  12: 23.225 ns/op
Iteration  13: 23.199 ns/op
Iteration  14: 23.192 ns/op
Iteration  15: 23.199 ns/op
Iteration  16: 23.216 ns/op
Iteration  17: 23.199 ns/op
Iteration  18: 23.221 ns/op
Iteration  19: 23.212 ns/op
Iteration  20: 23.198 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.634 ns/op
# Warmup Iteration   2: 23.808 ns/op
# Warmup Iteration   3: 23.204 ns/op
# Warmup Iteration   4: 23.203 ns/op
# Warmup Iteration   5: 23.232 ns/op
Iteration   1: 23.248 ns/op
Iteration   2: 23.222 ns/op
Iteration   3: 23.213 ns/op
Iteration   4: 23.200 ns/op
Iteration   5: 23.195 ns/op
Iteration   6: 23.187 ns/op
Iteration   7: 23.178 ns/op
Iteration   8: 23.217 ns/op
Iteration   9: 23.201 ns/op
Iteration  10: 23.189 ns/op
Iteration  11: 23.199 ns/op
Iteration  12: 23.186 ns/op
Iteration  13: 23.208 ns/op
Iteration  14: 23.196 ns/op
Iteration  15: 23.187 ns/op
Iteration  16: 23.190 ns/op
Iteration  17: 23.187 ns/op
Iteration  18: 23.198 ns/op
Iteration  19: 23.173 ns/op
Iteration  20: 23.198 ns/op


Result "benchmark.StringContains.stringContains":
  23.367 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (23.173, 23.367, 24.076), stdev = 0.328
  CI (99.9%): [23.255, 23.478] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  [ogc98b%,HHiM}LpX@wFO!NRz+]?91IfH[ONn 
A%U<	Wlg`c%HASTf6
&#'0:@BD_3 R$F1]ansc4m3$)^kxm|)[}T#y_zhttp]zuMEm	w9{qm^!Tvu@]UwT/M^j[  avgt  100  462.122 ± 4.028  ns/op
StringContains.stringContains     http  [ogc98b%,HHiM}LpX@wFO!NRz+]?91IfH[ONn 
A%U<	Wlg`c%HASTf6
&#'0:@BD_3 R$F1]ansc4m3$)^kxm|)[}T#y_zhttp]zuMEm	w9{qm^!Tvu@]UwT/M^j[  avgt  100   23.367 ± 0.111  ns/op

Benchmark result is saved to http_128_0.75_8.csv
