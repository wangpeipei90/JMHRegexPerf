# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = F/ch4?
Cv19UX&d@_|rg${3U!_jTOH5"klMm)m	5w"*9Yis:H&\eQ
>mR]ke!tOhttp3$gY`L,&Q>lo,+e!.R940
8|y#21{0-p3uO@[l28/D!&'Z:8]!$R8k 6\2	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 812.633 ns/op
# Warmup Iteration   2: 818.216 ns/op
# Warmup Iteration   3: 904.354 ns/op
# Warmup Iteration   4: 904.364 ns/op
# Warmup Iteration   5: 902.267 ns/op
Iteration   1: 849.175 ns/op
Iteration   2: 825.224 ns/op
Iteration   3: 824.944 ns/op
Iteration   4: 825.181 ns/op
Iteration   5: 832.811 ns/op
Iteration   6: 827.338 ns/op
Iteration   7: 827.300 ns/op
Iteration   8: 828.736 ns/op
Iteration   9: 827.312 ns/op
Iteration  10: 841.244 ns/op
Iteration  11: 825.430 ns/op
Iteration  12: 825.074 ns/op
Iteration  13: 825.226 ns/op
Iteration  14: 825.249 ns/op
Iteration  15: 838.838 ns/op
Iteration  16: 825.066 ns/op
Iteration  17: 824.934 ns/op
Iteration  18: 824.948 ns/op
Iteration  19: 825.155 ns/op
Iteration  20: 844.037 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 828.041 ns/op
# Warmup Iteration   2: 847.026 ns/op
# Warmup Iteration   3: 850.923 ns/op
# Warmup Iteration   4: 850.565 ns/op
# Warmup Iteration   5: 850.821 ns/op
Iteration   1: 787.429 ns/op
Iteration   2: 775.583 ns/op
Iteration   3: 775.394 ns/op
Iteration   4: 775.192 ns/op
Iteration   5: 785.756 ns/op
Iteration   6: 775.114 ns/op
Iteration   7: 775.756 ns/op
Iteration   8: 776.086 ns/op
Iteration   9: 785.397 ns/op
Iteration  10: 774.960 ns/op
Iteration  11: 775.255 ns/op
Iteration  12: 775.707 ns/op
Iteration  13: 775.407 ns/op
Iteration  14: 788.890 ns/op
Iteration  15: 775.673 ns/op
Iteration  16: 776.205 ns/op
Iteration  17: 776.546 ns/op
Iteration  18: 775.561 ns/op
Iteration  19: 792.573 ns/op
Iteration  20: 775.798 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 807.739 ns/op
# Warmup Iteration   2: 811.868 ns/op
# Warmup Iteration   3: 901.456 ns/op
# Warmup Iteration   4: 901.955 ns/op
# Warmup Iteration   5: 902.444 ns/op
Iteration   1: 847.006 ns/op
Iteration   2: 826.628 ns/op
Iteration   3: 826.367 ns/op
Iteration   4: 826.507 ns/op
Iteration   5: 834.694 ns/op
Iteration   6: 825.728 ns/op
Iteration   7: 826.165 ns/op
Iteration   8: 826.803 ns/op
Iteration   9: 826.566 ns/op
Iteration  10: 836.739 ns/op
Iteration  11: 825.574 ns/op
Iteration  12: 825.641 ns/op
Iteration  13: 826.116 ns/op
Iteration  14: 826.592 ns/op
Iteration  15: 839.077 ns/op
Iteration  16: 826.192 ns/op
Iteration  17: 825.950 ns/op
Iteration  18: 826.093 ns/op
Iteration  19: 826.447 ns/op
Iteration  20: 843.968 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 820.627 ns/op
# Warmup Iteration   2: 847.782 ns/op
# Warmup Iteration   3: 851.212 ns/op
# Warmup Iteration   4: 851.090 ns/op
# Warmup Iteration   5: 851.059 ns/op
Iteration   1: 788.155 ns/op
Iteration   2: 777.894 ns/op
Iteration   3: 777.828 ns/op
Iteration   4: 777.561 ns/op
Iteration   5: 784.601 ns/op
Iteration   6: 777.668 ns/op
Iteration   7: 777.642 ns/op
Iteration   8: 777.656 ns/op
Iteration   9: 787.730 ns/op
Iteration  10: 778.232 ns/op
Iteration  11: 778.164 ns/op
Iteration  12: 777.576 ns/op
Iteration  13: 777.741 ns/op
Iteration  14: 790.278 ns/op
Iteration  15: 776.573 ns/op
Iteration  16: 777.477 ns/op
Iteration  17: 776.684 ns/op
Iteration  18: 776.720 ns/op
Iteration  19: 793.890 ns/op
Iteration  20: 776.950 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 816.860 ns/op
# Warmup Iteration   2: 843.795 ns/op
# Warmup Iteration   3: 847.895 ns/op
# Warmup Iteration   4: 847.782 ns/op
# Warmup Iteration   5: 847.602 ns/op
Iteration   1: 782.080 ns/op
Iteration   2: 774.312 ns/op
Iteration   3: 774.559 ns/op
Iteration   4: 774.714 ns/op
Iteration   5: 781.431 ns/op
Iteration   6: 774.416 ns/op
Iteration   7: 774.872 ns/op
Iteration   8: 776.137 ns/op
Iteration   9: 789.492 ns/op
Iteration  10: 775.571 ns/op
Iteration  11: 774.756 ns/op
Iteration  12: 774.592 ns/op
Iteration  13: 774.736 ns/op
Iteration  14: 787.860 ns/op
Iteration  15: 774.336 ns/op
Iteration  16: 774.510 ns/op
Iteration  17: 774.449 ns/op
Iteration  18: 782.089 ns/op
Iteration  19: 783.487 ns/op
Iteration  20: 774.463 ns/op


Result "benchmark.StringContains.regexMatches":
  799.222 ±(99.9%) 8.725 ns/op [Average]
  (min, avg, max) = (774.312, 799.222, 849.175), stdev = 25.726
  CI (99.9%): [790.497, 807.948] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = F/ch4?
Cv19UX&d@_|rg${3U!_jTOH5"klMm)m	5w"*9Yis:H&\eQ
>mR]ke!tOhttp3$gY`L,&Q>lo,+e!.R940
8|y#21{0-p3uO@[l28/D!&'Z:8]!$R8k 6\2	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.079 ns/op
# Warmup Iteration   2: 19.521 ns/op
# Warmup Iteration   3: 19.531 ns/op
# Warmup Iteration   4: 19.496 ns/op
# Warmup Iteration   5: 19.566 ns/op
Iteration   1: 19.513 ns/op
Iteration   2: 19.477 ns/op
Iteration   3: 19.510 ns/op
Iteration   4: 19.496 ns/op
Iteration   5: 19.518 ns/op
Iteration   6: 19.541 ns/op
Iteration   7: 19.522 ns/op
Iteration   8: 19.529 ns/op
Iteration   9: 19.546 ns/op
Iteration  10: 19.536 ns/op
Iteration  11: 19.513 ns/op
Iteration  12: 19.577 ns/op
Iteration  13: 19.588 ns/op
Iteration  14: 19.530 ns/op
Iteration  15: 19.536 ns/op
Iteration  16: 19.522 ns/op
Iteration  17: 19.569 ns/op
Iteration  18: 19.557 ns/op
Iteration  19: 19.559 ns/op
Iteration  20: 19.511 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.073 ns/op
# Warmup Iteration   2: 19.371 ns/op
# Warmup Iteration   3: 18.695 ns/op
# Warmup Iteration   4: 18.706 ns/op
# Warmup Iteration   5: 18.725 ns/op
Iteration   1: 18.738 ns/op
Iteration   2: 18.733 ns/op
Iteration   3: 18.733 ns/op
Iteration   4: 18.705 ns/op
Iteration   5: 18.721 ns/op
Iteration   6: 18.711 ns/op
Iteration   7: 18.724 ns/op
Iteration   8: 18.692 ns/op
Iteration   9: 18.717 ns/op
Iteration  10: 18.705 ns/op
Iteration  11: 18.706 ns/op
Iteration  12: 18.799 ns/op
Iteration  13: 18.793 ns/op
Iteration  14: 18.796 ns/op
Iteration  15: 18.790 ns/op
Iteration  16: 18.806 ns/op
Iteration  17: 18.803 ns/op
Iteration  18: 18.795 ns/op
Iteration  19: 18.812 ns/op
Iteration  20: 18.796 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.066 ns/op
# Warmup Iteration   2: 19.419 ns/op
# Warmup Iteration   3: 18.666 ns/op
# Warmup Iteration   4: 18.656 ns/op
# Warmup Iteration   5: 18.645 ns/op
Iteration   1: 18.655 ns/op
Iteration   2: 18.662 ns/op
Iteration   3: 18.652 ns/op
Iteration   4: 18.655 ns/op
Iteration   5: 18.652 ns/op
Iteration   6: 18.645 ns/op
Iteration   7: 18.653 ns/op
Iteration   8: 18.658 ns/op
Iteration   9: 18.654 ns/op
Iteration  10: 18.668 ns/op
Iteration  11: 18.680 ns/op
Iteration  12: 18.663 ns/op
Iteration  13: 18.654 ns/op
Iteration  14: 18.655 ns/op
Iteration  15: 18.657 ns/op
Iteration  16: 18.664 ns/op
Iteration  17: 18.657 ns/op
Iteration  18: 18.651 ns/op
Iteration  19: 18.657 ns/op
Iteration  20: 18.652 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.132 ns/op
# Warmup Iteration   2: 19.348 ns/op
# Warmup Iteration   3: 18.686 ns/op
# Warmup Iteration   4: 18.690 ns/op
# Warmup Iteration   5: 18.693 ns/op
Iteration   1: 18.691 ns/op
Iteration   2: 18.688 ns/op
Iteration   3: 18.681 ns/op
Iteration   4: 18.677 ns/op
Iteration   5: 18.684 ns/op
Iteration   6: 18.695 ns/op
Iteration   7: 18.678 ns/op
Iteration   8: 18.675 ns/op
Iteration   9: 18.696 ns/op
Iteration  10: 18.687 ns/op
Iteration  11: 18.703 ns/op
Iteration  12: 18.776 ns/op
Iteration  13: 18.798 ns/op
Iteration  14: 18.773 ns/op
Iteration  15: 18.786 ns/op
Iteration  16: 18.793 ns/op
Iteration  17: 18.786 ns/op
Iteration  18: 18.782 ns/op
Iteration  19: 18.779 ns/op
Iteration  20: 18.792 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.121 ns/op
# Warmup Iteration   2: 19.318 ns/op
# Warmup Iteration   3: 18.684 ns/op
# Warmup Iteration   4: 18.692 ns/op
# Warmup Iteration   5: 18.679 ns/op
Iteration   1: 18.677 ns/op
Iteration   2: 18.664 ns/op
Iteration   3: 18.691 ns/op
Iteration   4: 18.671 ns/op
Iteration   5: 18.681 ns/op
Iteration   6: 18.672 ns/op
Iteration   7: 18.677 ns/op
Iteration   8: 18.716 ns/op
Iteration   9: 18.676 ns/op
Iteration  10: 18.686 ns/op
Iteration  11: 18.695 ns/op
Iteration  12: 18.683 ns/op
Iteration  13: 18.667 ns/op
Iteration  14: 18.707 ns/op
Iteration  15: 18.681 ns/op
Iteration  16: 18.680 ns/op
Iteration  17: 18.693 ns/op
Iteration  18: 18.679 ns/op
Iteration  19: 18.676 ns/op
Iteration  20: 18.721 ns/op


Result "benchmark.StringContains.stringContains":
  18.872 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (18.645, 18.872, 19.588), stdev = 0.335
  CI (99.9%): [18.758, 18.986] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  F/ch4?
Cv19UX&d@_|rg${3U!_jTOH5"klMm)m	5w"*9Yis:H&\eQ
>mR]ke!tOhttp3$gY`L,&Q>lo,+e!.R940
8|y#21{0-p3uO@[l28/D!&'Z:8]!$R8k 6\2	  avgt  100  799.222 ± 8.725  ns/op
StringContains.stringContains     http  F/ch4?
Cv19UX&d@_|rg${3U!_jTOH5"klMm)m	5w"*9Yis:H&\eQ
>mR]ke!tOhttp3$gY`L,&Q>lo,+e!.R940
8|y#21{0-p3uO@[l28/D!&'Z:8]!$R8k 6\2	  avgt  100   18.872 ± 0.114  ns/op

Benchmark result is saved to http_128_0.5_9.csv
