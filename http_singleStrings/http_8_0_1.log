# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http/.~=)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 252.045 ns/op
# Warmup Iteration   2: 196.307 ns/op
# Warmup Iteration   3: 158.521 ns/op
# Warmup Iteration   4: 159.004 ns/op
# Warmup Iteration   5: 159.708 ns/op
Iteration   1: 160.809 ns/op
Iteration   2: 162.164 ns/op
Iteration   3: 157.934 ns/op
Iteration   4: 157.484 ns/op
Iteration   5: 157.568 ns/op
Iteration   6: 157.391 ns/op
Iteration   7: 157.428 ns/op
Iteration   8: 157.522 ns/op
Iteration   9: 157.529 ns/op
Iteration  10: 157.603 ns/op
Iteration  11: 158.128 ns/op
Iteration  12: 157.053 ns/op
Iteration  13: 156.999 ns/op
Iteration  14: 156.959 ns/op
Iteration  15: 157.231 ns/op
Iteration  16: 158.134 ns/op
Iteration  17: 159.056 ns/op
Iteration  18: 157.251 ns/op
Iteration  19: 157.089 ns/op
Iteration  20: 157.273 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 241.632 ns/op
# Warmup Iteration   2: 186.746 ns/op
# Warmup Iteration   3: 158.114 ns/op
# Warmup Iteration   4: 158.518 ns/op
# Warmup Iteration   5: 159.280 ns/op
Iteration   1: 159.996 ns/op
Iteration   2: 161.130 ns/op
Iteration   3: 157.394 ns/op
Iteration   4: 157.307 ns/op
Iteration   5: 157.314 ns/op
Iteration   6: 157.342 ns/op
Iteration   7: 157.291 ns/op
Iteration   8: 157.257 ns/op
Iteration   9: 157.705 ns/op
Iteration  10: 158.115 ns/op
Iteration  11: 157.269 ns/op
Iteration  12: 156.825 ns/op
Iteration  13: 156.859 ns/op
Iteration  14: 157.669 ns/op
Iteration  15: 156.809 ns/op
Iteration  16: 156.822 ns/op
Iteration  17: 157.665 ns/op
Iteration  18: 156.765 ns/op
Iteration  19: 157.300 ns/op
Iteration  20: 158.096 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 247.156 ns/op
# Warmup Iteration   2: 188.601 ns/op
# Warmup Iteration   3: 158.529 ns/op
# Warmup Iteration   4: 158.972 ns/op
# Warmup Iteration   5: 159.732 ns/op
Iteration   1: 160.531 ns/op
Iteration   2: 161.560 ns/op
Iteration   3: 157.604 ns/op
Iteration   4: 157.633 ns/op
Iteration   5: 157.804 ns/op
Iteration   6: 157.523 ns/op
Iteration   7: 157.706 ns/op
Iteration   8: 157.393 ns/op
Iteration   9: 157.545 ns/op
Iteration  10: 157.577 ns/op
Iteration  11: 159.039 ns/op
Iteration  12: 157.231 ns/op
Iteration  13: 157.189 ns/op
Iteration  14: 157.198 ns/op
Iteration  15: 157.169 ns/op
Iteration  16: 157.196 ns/op
Iteration  17: 157.373 ns/op
Iteration  18: 157.342 ns/op
Iteration  19: 157.456 ns/op
Iteration  20: 157.513 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 227.602 ns/op
# Warmup Iteration   2: 166.007 ns/op
# Warmup Iteration   3: 144.755 ns/op
# Warmup Iteration   4: 143.267 ns/op
# Warmup Iteration   5: 143.985 ns/op
Iteration   1: 145.979 ns/op
Iteration   2: 141.581 ns/op
Iteration   3: 141.434 ns/op
Iteration   4: 141.482 ns/op
Iteration   5: 141.491 ns/op
Iteration   6: 141.421 ns/op
Iteration   7: 141.400 ns/op
Iteration   8: 142.310 ns/op
Iteration   9: 143.422 ns/op
Iteration  10: 141.220 ns/op
Iteration  11: 141.141 ns/op
Iteration  12: 141.140 ns/op
Iteration  13: 141.256 ns/op
Iteration  14: 141.195 ns/op
Iteration  15: 141.203 ns/op
Iteration  16: 141.206 ns/op
Iteration  17: 141.501 ns/op
Iteration  18: 141.260 ns/op
Iteration  19: 141.206 ns/op
Iteration  20: 141.188 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 228.098 ns/op
# Warmup Iteration   2: 160.253 ns/op
# Warmup Iteration   3: 139.594 ns/op
# Warmup Iteration   4: 138.905 ns/op
# Warmup Iteration   5: 139.799 ns/op
Iteration   1: 140.604 ns/op
Iteration   2: 137.275 ns/op
Iteration   3: 137.196 ns/op
Iteration   4: 137.243 ns/op
Iteration   5: 137.920 ns/op
Iteration   6: 137.349 ns/op
Iteration   7: 137.239 ns/op
Iteration   8: 137.204 ns/op
Iteration   9: 137.382 ns/op
Iteration  10: 136.769 ns/op
Iteration  11: 136.868 ns/op
Iteration  12: 137.152 ns/op
Iteration  13: 136.784 ns/op
Iteration  14: 136.841 ns/op
Iteration  15: 136.794 ns/op
Iteration  16: 136.895 ns/op
Iteration  17: 136.898 ns/op
Iteration  18: 136.855 ns/op
Iteration  19: 137.270 ns/op
Iteration  20: 136.890 ns/op


Result "benchmark.StringContains.regexMatches":
  150.486 ±(99.9%) 3.121 ns/op [Average]
  (min, avg, max) = (136.769, 150.486, 162.164), stdev = 9.202
  CI (99.9%): [147.365, 153.607] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http/.~=)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.532 ns/op
# Warmup Iteration   2: 10.486 ns/op
# Warmup Iteration   3: 9.911 ns/op
# Warmup Iteration   4: 9.911 ns/op
# Warmup Iteration   5: 9.923 ns/op
Iteration   1: 9.891 ns/op
Iteration   2: 9.907 ns/op
Iteration   3: 9.911 ns/op
Iteration   4: 9.920 ns/op
Iteration   5: 9.914 ns/op
Iteration   6: 9.909 ns/op
Iteration   7: 9.918 ns/op
Iteration   8: 9.907 ns/op
Iteration   9: 9.896 ns/op
Iteration  10: 9.904 ns/op
Iteration  11: 9.906 ns/op
Iteration  12: 9.915 ns/op
Iteration  13: 9.877 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.896 ns/op
Iteration  16: 9.907 ns/op
Iteration  17: 9.900 ns/op
Iteration  18: 9.899 ns/op
Iteration  19: 9.894 ns/op
Iteration  20: 9.901 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.043 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.910 ns/op
# Warmup Iteration   4: 9.921 ns/op
# Warmup Iteration   5: 9.891 ns/op
Iteration   1: 9.908 ns/op
Iteration   2: 9.911 ns/op
Iteration   3: 9.911 ns/op
Iteration   4: 9.881 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.898 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.906 ns/op
Iteration   9: 9.910 ns/op
Iteration  10: 9.893 ns/op
Iteration  11: 9.897 ns/op
Iteration  12: 9.901 ns/op
Iteration  13: 9.886 ns/op
Iteration  14: 9.890 ns/op
Iteration  15: 9.906 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.909 ns/op
Iteration  18: 9.907 ns/op
Iteration  19: 9.910 ns/op
Iteration  20: 9.897 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.462 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.912 ns/op
# Warmup Iteration   4: 9.910 ns/op
# Warmup Iteration   5: 9.908 ns/op
Iteration   1: 9.929 ns/op
Iteration   2: 9.907 ns/op
Iteration   3: 9.899 ns/op
Iteration   4: 9.916 ns/op
Iteration   5: 9.914 ns/op
Iteration   6: 9.920 ns/op
Iteration   7: 9.907 ns/op
Iteration   8: 9.918 ns/op
Iteration   9: 9.918 ns/op
Iteration  10: 9.919 ns/op
Iteration  11: 9.914 ns/op
Iteration  12: 9.919 ns/op
Iteration  13: 9.922 ns/op
Iteration  14: 9.912 ns/op
Iteration  15: 9.918 ns/op
Iteration  16: 9.934 ns/op
Iteration  17: 9.911 ns/op
Iteration  18: 9.913 ns/op
Iteration  19: 9.923 ns/op
Iteration  20: 9.906 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.059 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.914 ns/op
# Warmup Iteration   4: 9.905 ns/op
# Warmup Iteration   5: 9.914 ns/op
Iteration   1: 9.906 ns/op
Iteration   2: 9.898 ns/op
Iteration   3: 9.909 ns/op
Iteration   4: 9.893 ns/op
Iteration   5: 9.929 ns/op
Iteration   6: 9.923 ns/op
Iteration   7: 9.890 ns/op
Iteration   8: 9.900 ns/op
Iteration   9: 9.905 ns/op
Iteration  10: 9.903 ns/op
Iteration  11: 9.900 ns/op
Iteration  12: 9.893 ns/op
Iteration  13: 9.908 ns/op
Iteration  14: 9.892 ns/op
Iteration  15: 9.889 ns/op
Iteration  16: 9.909 ns/op
Iteration  17: 9.912 ns/op
Iteration  18: 9.897 ns/op
Iteration  19: 9.891 ns/op
Iteration  20: 9.902 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.569 ns/op
# Warmup Iteration   2: 10.468 ns/op
# Warmup Iteration   3: 9.900 ns/op
# Warmup Iteration   4: 9.882 ns/op
# Warmup Iteration   5: 9.883 ns/op
Iteration   1: 9.885 ns/op
Iteration   2: 9.871 ns/op
Iteration   3: 9.924 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.887 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.902 ns/op
Iteration   9: 9.895 ns/op
Iteration  10: 9.905 ns/op
Iteration  11: 9.891 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.883 ns/op
Iteration  16: 9.894 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.883 ns/op
Iteration  19: 9.901 ns/op
Iteration  20: 9.898 ns/op


Result "benchmark.StringContains.stringContains":
  9.902 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (9.871, 9.902, 9.934), stdev = 0.013
  CI (99.9%): [9.898, 9.907] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http/.~=  avgt  100  150.486 ± 3.121  ns/op
StringContains.stringContains     http  http/.~=  avgt  100    9.902 ± 0.005  ns/op

Benchmark result is saved to http_8_0_1.csv
