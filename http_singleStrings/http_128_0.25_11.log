# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = J%;V9Ow#_dIeI 2D$[fpG?v\J@>I&]http'eei.Mg"z@f62UNqw{y.zHR%~"[3#?3ld8
j.-b;4Oc+WWSQ
C.H/=_
^Ip,rlzLM~dS7iVbGDp+:KRPER!yZ7`.T)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1148.973 ns/op
# Warmup Iteration   2: 1162.415 ns/op
# Warmup Iteration   3: 1184.114 ns/op
# Warmup Iteration   4: 1183.141 ns/op
# Warmup Iteration   5: 1182.998 ns/op
Iteration   1: 1183.124 ns/op
Iteration   2: 1182.645 ns/op
Iteration   3: 1112.847 ns/op
Iteration   4: 1096.769 ns/op
Iteration   5: 1096.817 ns/op
Iteration   6: 1096.715 ns/op
Iteration   7: 1096.798 ns/op
Iteration   8: 1098.953 ns/op
Iteration   9: 1107.320 ns/op
Iteration  10: 1096.680 ns/op
Iteration  11: 1096.547 ns/op
Iteration  12: 1096.748 ns/op
Iteration  13: 1096.662 ns/op
Iteration  14: 1096.534 ns/op
Iteration  15: 1111.617 ns/op
Iteration  16: 1096.682 ns/op
Iteration  17: 1096.875 ns/op
Iteration  18: 1096.606 ns/op
Iteration  19: 1096.576 ns/op
Iteration  20: 1098.148 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1129.172 ns/op
# Warmup Iteration   2: 1157.765 ns/op
# Warmup Iteration   3: 1176.010 ns/op
# Warmup Iteration   4: 1175.982 ns/op
# Warmup Iteration   5: 1175.348 ns/op
Iteration   1: 1175.938 ns/op
Iteration   2: 1175.800 ns/op
Iteration   3: 1110.243 ns/op
Iteration   4: 1100.236 ns/op
Iteration   5: 1100.218 ns/op
Iteration   6: 1100.041 ns/op
Iteration   7: 1100.213 ns/op
Iteration   8: 1102.108 ns/op
Iteration   9: 1109.903 ns/op
Iteration  10: 1099.909 ns/op
Iteration  11: 1099.780 ns/op
Iteration  12: 1100.218 ns/op
Iteration  13: 1101.648 ns/op
Iteration  14: 1101.134 ns/op
Iteration  15: 1114.193 ns/op
Iteration  16: 1100.445 ns/op
Iteration  17: 1102.298 ns/op
Iteration  18: 1102.344 ns/op
Iteration  19: 1099.838 ns/op
Iteration  20: 1102.106 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1138.349 ns/op
# Warmup Iteration   2: 1153.588 ns/op
# Warmup Iteration   3: 1178.606 ns/op
# Warmup Iteration   4: 1178.124 ns/op
# Warmup Iteration   5: 1178.108 ns/op
Iteration   1: 1178.405 ns/op
Iteration   2: 1179.416 ns/op
Iteration   3: 1111.000 ns/op
Iteration   4: 1099.422 ns/op
Iteration   5: 1099.943 ns/op
Iteration   6: 1099.933 ns/op
Iteration   7: 1100.038 ns/op
Iteration   8: 1100.345 ns/op
Iteration   9: 1109.684 ns/op
Iteration  10: 1099.400 ns/op
Iteration  11: 1099.306 ns/op
Iteration  12: 1099.632 ns/op
Iteration  13: 1099.631 ns/op
Iteration  14: 1100.006 ns/op
Iteration  15: 1114.905 ns/op
Iteration  16: 1099.419 ns/op
Iteration  17: 1100.007 ns/op
Iteration  18: 1099.768 ns/op
Iteration  19: 1100.271 ns/op
Iteration  20: 1100.810 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1142.231 ns/op
# Warmup Iteration   2: 1154.559 ns/op
# Warmup Iteration   3: 1175.054 ns/op
# Warmup Iteration   4: 1174.283 ns/op
# Warmup Iteration   5: 1174.602 ns/op
Iteration   1: 1174.213 ns/op
Iteration   2: 1174.383 ns/op
Iteration   3: 1105.878 ns/op
Iteration   4: 1097.755 ns/op
Iteration   5: 1097.787 ns/op
Iteration   6: 1097.605 ns/op
Iteration   7: 1097.606 ns/op
Iteration   8: 1097.522 ns/op
Iteration   9: 1108.027 ns/op
Iteration  10: 1097.520 ns/op
Iteration  11: 1098.123 ns/op
Iteration  12: 1102.981 ns/op
Iteration  13: 1101.249 ns/op
Iteration  14: 1101.250 ns/op
Iteration  15: 1114.571 ns/op
Iteration  16: 1097.278 ns/op
Iteration  17: 1097.932 ns/op
Iteration  18: 1097.784 ns/op
Iteration  19: 1097.221 ns/op
Iteration  20: 1097.273 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1131.105 ns/op
# Warmup Iteration   2: 1153.846 ns/op
# Warmup Iteration   3: 1173.536 ns/op
# Warmup Iteration   4: 1172.803 ns/op
# Warmup Iteration   5: 1173.116 ns/op
Iteration   1: 1172.996 ns/op
Iteration   2: 1178.147 ns/op
Iteration   3: 1096.442 ns/op
Iteration   4: 1096.551 ns/op
Iteration   5: 1096.382 ns/op
Iteration   6: 1096.175 ns/op
Iteration   7: 1096.326 ns/op
Iteration   8: 1096.361 ns/op
Iteration   9: 1106.694 ns/op
Iteration  10: 1096.530 ns/op
Iteration  11: 1096.322 ns/op
Iteration  12: 1095.947 ns/op
Iteration  13: 1095.764 ns/op
Iteration  14: 1096.279 ns/op
Iteration  15: 1110.448 ns/op
Iteration  16: 1095.995 ns/op
Iteration  17: 1095.790 ns/op
Iteration  18: 1095.533 ns/op
Iteration  19: 1095.567 ns/op
Iteration  20: 1095.783 ns/op


Result "benchmark.StringContains.regexMatches":
  1108.016 ±(99.9%) 8.060 ns/op [Average]
  (min, avg, max) = (1095.533, 1108.016, 1183.124), stdev = 23.765
  CI (99.9%): [1099.956, 1116.076] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = J%;V9Ow#_dIeI 2D$[fpG?v\J@>I&]http'eei.Mg"z@f62UNqw{y.zHR%~"[3#?3ld8
j.-b;4Oc+WWSQ
C.H/=_
^Ip,rlzLM~dS7iVbGDp+:KRPER!yZ7`.T)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.794 ns/op
# Warmup Iteration   2: 14.748 ns/op
# Warmup Iteration   3: 14.330 ns/op
# Warmup Iteration   4: 14.328 ns/op
# Warmup Iteration   5: 14.320 ns/op
Iteration   1: 14.318 ns/op
Iteration   2: 14.330 ns/op
Iteration   3: 14.325 ns/op
Iteration   4: 14.338 ns/op
Iteration   5: 14.320 ns/op
Iteration   6: 14.333 ns/op
Iteration   7: 14.344 ns/op
Iteration   8: 14.367 ns/op
Iteration   9: 14.311 ns/op
Iteration  10: 14.322 ns/op
Iteration  11: 14.332 ns/op
Iteration  12: 14.332 ns/op
Iteration  13: 14.344 ns/op
Iteration  14: 14.348 ns/op
Iteration  15: 14.326 ns/op
Iteration  16: 14.327 ns/op
Iteration  17: 14.318 ns/op
Iteration  18: 14.331 ns/op
Iteration  19: 14.327 ns/op
Iteration  20: 14.347 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.719 ns/op
# Warmup Iteration   2: 14.924 ns/op
# Warmup Iteration   3: 14.838 ns/op
# Warmup Iteration   4: 14.792 ns/op
# Warmup Iteration   5: 14.839 ns/op
Iteration   1: 14.783 ns/op
Iteration   2: 14.830 ns/op
Iteration   3: 14.885 ns/op
Iteration   4: 14.905 ns/op
Iteration   5: 14.843 ns/op
Iteration   6: 14.906 ns/op
Iteration   7: 14.855 ns/op
Iteration   8: 14.855 ns/op
Iteration   9: 14.817 ns/op
Iteration  10: 14.812 ns/op
Iteration  11: 14.826 ns/op
Iteration  12: 14.872 ns/op
Iteration  13: 14.903 ns/op
Iteration  14: 14.877 ns/op
Iteration  15: 14.886 ns/op
Iteration  16: 14.894 ns/op
Iteration  17: 14.907 ns/op
Iteration  18: 14.862 ns/op
Iteration  19: 14.922 ns/op
Iteration  20: 14.832 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.719 ns/op
# Warmup Iteration   2: 14.837 ns/op
# Warmup Iteration   3: 14.293 ns/op
# Warmup Iteration   4: 14.307 ns/op
# Warmup Iteration   5: 14.279 ns/op
Iteration   1: 14.283 ns/op
Iteration   2: 14.292 ns/op
Iteration   3: 14.293 ns/op
Iteration   4: 14.311 ns/op
Iteration   5: 14.299 ns/op
Iteration   6: 14.303 ns/op
Iteration   7: 14.303 ns/op
Iteration   8: 14.301 ns/op
Iteration   9: 14.300 ns/op
Iteration  10: 14.299 ns/op
Iteration  11: 14.287 ns/op
Iteration  12: 14.267 ns/op
Iteration  13: 14.309 ns/op
Iteration  14: 14.289 ns/op
Iteration  15: 14.301 ns/op
Iteration  16: 14.303 ns/op
Iteration  17: 14.290 ns/op
Iteration  18: 14.309 ns/op
Iteration  19: 14.292 ns/op
Iteration  20: 14.309 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.630 ns/op
# Warmup Iteration   2: 14.763 ns/op
# Warmup Iteration   3: 14.292 ns/op
# Warmup Iteration   4: 14.303 ns/op
# Warmup Iteration   5: 14.287 ns/op
Iteration   1: 14.288 ns/op
Iteration   2: 14.295 ns/op
Iteration   3: 14.293 ns/op
Iteration   4: 14.304 ns/op
Iteration   5: 14.291 ns/op
Iteration   6: 14.302 ns/op
Iteration   7: 14.280 ns/op
Iteration   8: 14.306 ns/op
Iteration   9: 14.310 ns/op
Iteration  10: 14.301 ns/op
Iteration  11: 14.304 ns/op
Iteration  12: 14.654 ns/op
Iteration  13: 14.668 ns/op
Iteration  14: 14.660 ns/op
Iteration  15: 14.660 ns/op
Iteration  16: 14.659 ns/op
Iteration  17: 14.671 ns/op
Iteration  18: 14.653 ns/op
Iteration  19: 14.663 ns/op
Iteration  20: 14.668 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.631 ns/op
# Warmup Iteration   2: 14.938 ns/op
# Warmup Iteration   3: 14.405 ns/op
# Warmup Iteration   4: 14.393 ns/op
# Warmup Iteration   5: 14.386 ns/op
Iteration   1: 14.390 ns/op
Iteration   2: 14.392 ns/op
Iteration   3: 14.385 ns/op
Iteration   4: 14.405 ns/op
Iteration   5: 14.378 ns/op
Iteration   6: 14.383 ns/op
Iteration   7: 14.396 ns/op
Iteration   8: 14.398 ns/op
Iteration   9: 14.391 ns/op
Iteration  10: 14.388 ns/op
Iteration  11: 14.385 ns/op
Iteration  12: 14.694 ns/op
Iteration  13: 14.699 ns/op
Iteration  14: 14.700 ns/op
Iteration  15: 14.693 ns/op
Iteration  16: 14.696 ns/op
Iteration  17: 14.700 ns/op
Iteration  18: 14.692 ns/op
Iteration  19: 14.692 ns/op
Iteration  20: 14.696 ns/op


Result "benchmark.StringContains.stringContains":
  14.496 ±(99.9%) 0.078 ns/op [Average]
  (min, avg, max) = (14.267, 14.496, 14.922), stdev = 0.230
  CI (99.9%): [14.418, 14.574] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches       http  J%;V9Ow#_dIeI 2D$[fpG?v\J@>I&]http'eei.Mg"z@f62UNqw{y.zHR%~"[3#?3ld8
j.-b;4Oc+WWSQ
C.H/=_
^Ip,rlzLM~dS7iVbGDp+:KRPER!yZ7`.T  avgt  100  1108.016 ± 8.060  ns/op
StringContains.stringContains     http  J%;V9Ow#_dIeI 2D$[fpG?v\J@>I&]http'eei.Mg"z@f62UNqw{y.zHR%~"[3#?3ld8
j.-b;4Oc+WWSQ
C.H/=_
^Ip,rlzLM~dS7iVbGDp+:KRPER!yZ7`.T  avgt  100    14.496 ± 0.078  ns/op

Benchmark result is saved to http_128_0.25_11.csv
