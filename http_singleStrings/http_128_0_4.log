# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpmP`YjmOObT9
Aw_`^@dDz[%H^JQf	)<^d_&}y4$)<OLT!L!+\s'Y#Hh&K`gO0~SyyZ
`$!zcx0!H8QS4B7fE6L-c:\wV3GwHla0$%X1hS/I5|=uEDmi$DF)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1561.808 ns/op
# Warmup Iteration   2: 1472.479 ns/op
# Warmup Iteration   3: 1622.168 ns/op
# Warmup Iteration   4: 1623.662 ns/op
# Warmup Iteration   5: 1619.826 ns/op
Iteration   1: 1623.776 ns/op
Iteration   2: 1624.264 ns/op
Iteration   3: 1623.109 ns/op
Iteration   4: 1621.649 ns/op
Iteration   5: 1587.923 ns/op
Iteration   6: 1538.164 ns/op
Iteration   7: 1537.749 ns/op
Iteration   8: 1538.224 ns/op
Iteration   9: 1538.798 ns/op
Iteration  10: 1538.079 ns/op
Iteration  11: 1538.139 ns/op
Iteration  12: 1539.752 ns/op
Iteration  13: 1556.071 ns/op
Iteration  14: 1539.317 ns/op
Iteration  15: 1537.978 ns/op
Iteration  16: 1537.657 ns/op
Iteration  17: 1538.469 ns/op
Iteration  18: 1537.881 ns/op
Iteration  19: 1537.959 ns/op
Iteration  20: 1538.243 ns/op

# Run progress: 10.00% complete, ETA 00:03:47
# Fork: 2 of 5
# Warmup Iteration   1: 1544.071 ns/op
# Warmup Iteration   2: 1500.577 ns/op
# Warmup Iteration   3: 1614.245 ns/op
# Warmup Iteration   4: 1614.320 ns/op
# Warmup Iteration   5: 1613.922 ns/op
Iteration   1: 1615.523 ns/op
Iteration   2: 1614.880 ns/op
Iteration   3: 1614.164 ns/op
Iteration   4: 1615.855 ns/op
Iteration   5: 1592.572 ns/op
Iteration   6: 1534.957 ns/op
Iteration   7: 1534.721 ns/op
Iteration   8: 1535.727 ns/op
Iteration   9: 1534.299 ns/op
Iteration  10: 1534.944 ns/op
Iteration  11: 1536.967 ns/op
Iteration  12: 1537.008 ns/op
Iteration  13: 1537.437 ns/op
Iteration  14: 1552.842 ns/op
Iteration  15: 1536.198 ns/op
Iteration  16: 1536.578 ns/op
Iteration  17: 1536.364 ns/op
Iteration  18: 1536.052 ns/op
Iteration  19: 1536.090 ns/op
Iteration  20: 1536.798 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1494.221 ns/op
# Warmup Iteration   2: 1470.070 ns/op
# Warmup Iteration   3: 1518.070 ns/op
# Warmup Iteration   4: 1517.882 ns/op
# Warmup Iteration   5: 1517.770 ns/op
Iteration   1: 1517.740 ns/op
Iteration   2: 1517.924 ns/op
Iteration   3: 1518.292 ns/op
Iteration   4: 1518.391 ns/op
Iteration   5: 1454.295 ns/op
Iteration   6: 1441.380 ns/op
Iteration   7: 1440.929 ns/op
Iteration   8: 1441.308 ns/op
Iteration   9: 1441.659 ns/op
Iteration  10: 1441.295 ns/op
Iteration  11: 1441.360 ns/op
Iteration  12: 1441.554 ns/op
Iteration  13: 1454.766 ns/op
Iteration  14: 1441.311 ns/op
Iteration  15: 1440.889 ns/op
Iteration  16: 1441.257 ns/op
Iteration  17: 1441.264 ns/op
Iteration  18: 1440.731 ns/op
Iteration  19: 1442.473 ns/op
Iteration  20: 1443.455 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1498.162 ns/op
# Warmup Iteration   2: 1465.282 ns/op
# Warmup Iteration   3: 1516.070 ns/op
# Warmup Iteration   4: 1517.417 ns/op
# Warmup Iteration   5: 1517.423 ns/op
Iteration   1: 1516.428 ns/op
Iteration   2: 1516.790 ns/op
Iteration   3: 1517.161 ns/op
Iteration   4: 1516.529 ns/op
Iteration   5: 1452.065 ns/op
Iteration   6: 1439.987 ns/op
Iteration   7: 1439.803 ns/op
Iteration   8: 1439.757 ns/op
Iteration   9: 1439.846 ns/op
Iteration  10: 1439.602 ns/op
Iteration  11: 1439.252 ns/op
Iteration  12: 1438.969 ns/op
Iteration  13: 1451.244 ns/op
Iteration  14: 1437.206 ns/op
Iteration  15: 1437.274 ns/op
Iteration  16: 1438.553 ns/op
Iteration  17: 1439.387 ns/op
Iteration  18: 1438.920 ns/op
Iteration  19: 1439.292 ns/op
Iteration  20: 1439.508 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1526.015 ns/op
# Warmup Iteration   2: 1464.695 ns/op
# Warmup Iteration   3: 1615.170 ns/op
# Warmup Iteration   4: 1613.495 ns/op
# Warmup Iteration   5: 1612.982 ns/op
Iteration   1: 1612.606 ns/op
Iteration   2: 1612.388 ns/op
Iteration   3: 1613.113 ns/op
Iteration   4: 1612.480 ns/op
Iteration   5: 1584.444 ns/op
Iteration   6: 1535.561 ns/op
Iteration   7: 1535.511 ns/op
Iteration   8: 1535.550 ns/op
Iteration   9: 1535.041 ns/op
Iteration  10: 1535.218 ns/op
Iteration  11: 1536.877 ns/op
Iteration  12: 1534.632 ns/op
Iteration  13: 1536.784 ns/op
Iteration  14: 1549.801 ns/op
Iteration  15: 1535.442 ns/op
Iteration  16: 1535.238 ns/op
Iteration  17: 1534.311 ns/op
Iteration  18: 1534.996 ns/op
Iteration  19: 1535.017 ns/op
Iteration  20: 1534.896 ns/op


Result "benchmark.StringContains.regexMatches":
  1516.429 ±(99.9%) 19.778 ns/op [Average]
  (min, avg, max) = (1437.206, 1516.429, 1624.264), stdev = 58.316
  CI (99.9%): [1496.651, 1536.207] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpmP`YjmOObT9
Aw_`^@dDz[%H^JQf	)<^d_&}y4$)<OLT!L!+\s'Y#Hh&K`gO0~SyyZ
`$!zcx0!H8QS4B7fE6L-c:\wV3GwHla0$%X1hS/I5|=uEDmi$DF)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.213 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.959 ns/op
# Warmup Iteration   4: 9.947 ns/op
# Warmup Iteration   5: 9.969 ns/op
Iteration   1: 9.964 ns/op
Iteration   2: 9.976 ns/op
Iteration   3: 9.963 ns/op
Iteration   4: 9.972 ns/op
Iteration   5: 9.977 ns/op
Iteration   6: 9.964 ns/op
Iteration   7: 9.967 ns/op
Iteration   8: 9.984 ns/op
Iteration   9: 9.967 ns/op
Iteration  10: 9.966 ns/op
Iteration  11: 9.961 ns/op
Iteration  12: 9.960 ns/op
Iteration  13: 9.932 ns/op
Iteration  14: 9.977 ns/op
Iteration  15: 9.938 ns/op
Iteration  16: 9.941 ns/op
Iteration  17: 9.960 ns/op
Iteration  18: 9.963 ns/op
Iteration  19: 9.959 ns/op
Iteration  20: 9.932 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.485 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.784 ns/op
# Warmup Iteration   4: 9.792 ns/op
# Warmup Iteration   5: 9.786 ns/op
Iteration   1: 9.780 ns/op
Iteration   2: 9.798 ns/op
Iteration   3: 9.791 ns/op
Iteration   4: 9.791 ns/op
Iteration   5: 9.799 ns/op
Iteration   6: 9.778 ns/op
Iteration   7: 9.786 ns/op
Iteration   8: 9.820 ns/op
Iteration   9: 9.782 ns/op
Iteration  10: 9.794 ns/op
Iteration  11: 9.785 ns/op
Iteration  12: 9.792 ns/op
Iteration  13: 9.779 ns/op
Iteration  14: 9.781 ns/op
Iteration  15: 9.776 ns/op
Iteration  16: 9.800 ns/op
Iteration  17: 9.792 ns/op
Iteration  18: 9.783 ns/op
Iteration  19: 9.795 ns/op
Iteration  20: 9.797 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.443 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.968 ns/op
# Warmup Iteration   4: 9.970 ns/op
# Warmup Iteration   5: 9.948 ns/op
Iteration   1: 9.972 ns/op
Iteration   2: 9.973 ns/op
Iteration   3: 9.994 ns/op
Iteration   4: 9.960 ns/op
Iteration   5: 9.977 ns/op
Iteration   6: 9.979 ns/op
Iteration   7: 9.958 ns/op
Iteration   8: 9.964 ns/op
Iteration   9: 9.985 ns/op
Iteration  10: 9.951 ns/op
Iteration  11: 9.968 ns/op
Iteration  12: 9.941 ns/op
Iteration  13: 9.949 ns/op
Iteration  14: 9.960 ns/op
Iteration  15: 9.956 ns/op
Iteration  16: 9.962 ns/op
Iteration  17: 9.945 ns/op
Iteration  18: 9.944 ns/op
Iteration  19: 9.951 ns/op
Iteration  20: 9.964 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.474 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.838 ns/op
# Warmup Iteration   4: 9.844 ns/op
# Warmup Iteration   5: 9.826 ns/op
Iteration   1: 9.833 ns/op
Iteration   2: 9.829 ns/op
Iteration   3: 9.826 ns/op
Iteration   4: 9.821 ns/op
Iteration   5: 9.831 ns/op
Iteration   6: 9.842 ns/op
Iteration   7: 9.842 ns/op
Iteration   8: 9.846 ns/op
Iteration   9: 9.827 ns/op
Iteration  10: 9.834 ns/op
Iteration  11: 9.829 ns/op
Iteration  12: 9.815 ns/op
Iteration  13: 9.833 ns/op
Iteration  14: 9.837 ns/op
Iteration  15: 9.826 ns/op
Iteration  16: 9.826 ns/op
Iteration  17: 9.826 ns/op
Iteration  18: 9.826 ns/op
Iteration  19: 9.817 ns/op
Iteration  20: 9.817 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.228 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.857 ns/op
# Warmup Iteration   5: 9.893 ns/op
Iteration   1: 9.852 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.864 ns/op
Iteration   4: 9.862 ns/op
Iteration   5: 9.861 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.879 ns/op
Iteration   8: 9.855 ns/op
Iteration   9: 9.869 ns/op
Iteration  10: 9.850 ns/op
Iteration  11: 9.848 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.877 ns/op
Iteration  14: 9.864 ns/op
Iteration  15: 9.861 ns/op
Iteration  16: 9.861 ns/op
Iteration  17: 9.847 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.860 ns/op


Result "benchmark.StringContains.stringContains":
  9.881 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (9.776, 9.881, 9.994), stdev = 0.071
  CI (99.9%): [9.857, 9.905] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpmP`YjmOObT9
Aw_`^@dDz[%H^JQf	)<^d_&}y4$)<OLT!L!+\s'Y#Hh&K`gO0~SyyZ
`$!zcx0!H8QS4B7fE6L-c:\wV3GwHla0$%X1hS/I5|=uEDmi$DF  avgt  100  1516.429 ± 19.778  ns/op
StringContains.stringContains     http  httpmP`YjmOObT9
Aw_`^@dDz[%H^JQf	)<^d_&}y4$)<OLT!L!+\s'Y#Hh&K`gO0~SyyZ
`$!zcx0!H8QS4B7fE6L-c:\wV3GwHla0$%X1hS/I5|=uEDmi$DF  avgt  100     9.881 ±  0.024  ns/op

Benchmark result is saved to http_128_0_4.csv
