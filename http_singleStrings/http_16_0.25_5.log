# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = NHx1http$>1s)/^2)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 313.149 ns/op
# Warmup Iteration   2: 310.438 ns/op
# Warmup Iteration   3: 225.760 ns/op
# Warmup Iteration   4: 227.857 ns/op
# Warmup Iteration   5: 228.533 ns/op
Iteration   1: 229.647 ns/op
Iteration   2: 225.691 ns/op
Iteration   3: 231.280 ns/op
Iteration   4: 233.299 ns/op
Iteration   5: 225.718 ns/op
Iteration   6: 226.846 ns/op
Iteration   7: 226.762 ns/op
Iteration   8: 225.793 ns/op
Iteration   9: 226.518 ns/op
Iteration  10: 226.626 ns/op
Iteration  11: 226.398 ns/op
Iteration  12: 225.621 ns/op
Iteration  13: 226.833 ns/op
Iteration  14: 226.658 ns/op
Iteration  15: 225.648 ns/op
Iteration  16: 226.791 ns/op
Iteration  17: 226.890 ns/op
Iteration  18: 225.669 ns/op
Iteration  19: 226.262 ns/op
Iteration  20: 226.258 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 303.417 ns/op
# Warmup Iteration   2: 295.740 ns/op
# Warmup Iteration   3: 239.413 ns/op
# Warmup Iteration   4: 241.166 ns/op
# Warmup Iteration   5: 241.979 ns/op
Iteration   1: 243.287 ns/op
Iteration   2: 239.033 ns/op
Iteration   3: 244.431 ns/op
Iteration   4: 244.125 ns/op
Iteration   5: 240.697 ns/op
Iteration   6: 240.297 ns/op
Iteration   7: 238.987 ns/op
Iteration   8: 241.474 ns/op
Iteration   9: 240.325 ns/op
Iteration  10: 239.249 ns/op
Iteration  11: 240.363 ns/op
Iteration  12: 240.767 ns/op
Iteration  13: 238.377 ns/op
Iteration  14: 240.390 ns/op
Iteration  15: 241.650 ns/op
Iteration  16: 239.118 ns/op
Iteration  17: 241.166 ns/op
Iteration  18: 241.908 ns/op
Iteration  19: 238.865 ns/op
Iteration  20: 240.935 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 307.002 ns/op
# Warmup Iteration   2: 295.146 ns/op
# Warmup Iteration   3: 225.154 ns/op
# Warmup Iteration   4: 227.345 ns/op
# Warmup Iteration   5: 228.079 ns/op
Iteration   1: 229.213 ns/op
Iteration   2: 225.161 ns/op
Iteration   3: 229.999 ns/op
Iteration   4: 231.475 ns/op
Iteration   5: 225.133 ns/op
Iteration   6: 226.178 ns/op
Iteration   7: 226.312 ns/op
Iteration   8: 227.363 ns/op
Iteration   9: 225.212 ns/op
Iteration  10: 226.213 ns/op
Iteration  11: 226.378 ns/op
Iteration  12: 225.138 ns/op
Iteration  13: 226.652 ns/op
Iteration  14: 226.673 ns/op
Iteration  15: 225.369 ns/op
Iteration  16: 227.025 ns/op
Iteration  17: 226.955 ns/op
Iteration  18: 225.253 ns/op
Iteration  19: 226.146 ns/op
Iteration  20: 226.118 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 307.945 ns/op
# Warmup Iteration   2: 295.334 ns/op
# Warmup Iteration   3: 224.507 ns/op
# Warmup Iteration   4: 226.550 ns/op
# Warmup Iteration   5: 227.223 ns/op
Iteration   1: 227.974 ns/op
Iteration   2: 224.312 ns/op
Iteration   3: 229.165 ns/op
Iteration   4: 230.828 ns/op
Iteration   5: 224.469 ns/op
Iteration   6: 225.718 ns/op
Iteration   7: 225.451 ns/op
Iteration   8: 226.015 ns/op
Iteration   9: 224.344 ns/op
Iteration  10: 225.327 ns/op
Iteration  11: 225.442 ns/op
Iteration  12: 224.312 ns/op
Iteration  13: 225.498 ns/op
Iteration  14: 225.580 ns/op
Iteration  15: 224.234 ns/op
Iteration  16: 225.622 ns/op
Iteration  17: 225.740 ns/op
Iteration  18: 224.368 ns/op
Iteration  19: 224.948 ns/op
Iteration  20: 225.011 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 302.227 ns/op
# Warmup Iteration   2: 293.949 ns/op
# Warmup Iteration   3: 224.822 ns/op
# Warmup Iteration   4: 226.963 ns/op
# Warmup Iteration   5: 227.828 ns/op
Iteration   1: 229.324 ns/op
Iteration   2: 225.583 ns/op
Iteration   3: 229.818 ns/op
Iteration   4: 231.360 ns/op
Iteration   5: 224.881 ns/op
Iteration   6: 225.852 ns/op
Iteration   7: 225.931 ns/op
Iteration   8: 225.910 ns/op
Iteration   9: 224.871 ns/op
Iteration  10: 225.881 ns/op
Iteration  11: 225.776 ns/op
Iteration  12: 224.709 ns/op
Iteration  13: 226.068 ns/op
Iteration  14: 226.022 ns/op
Iteration  15: 224.798 ns/op
Iteration  16: 226.226 ns/op
Iteration  17: 228.884 ns/op
Iteration  18: 224.789 ns/op
Iteration  19: 227.236 ns/op
Iteration  20: 228.429 ns/op


Result "benchmark.StringContains.regexMatches":
  229.373 ±(99.9%) 2.040 ns/op [Average]
  (min, avg, max) = (224.234, 229.373, 244.431), stdev = 6.015
  CI (99.9%): [227.333, 231.413] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = NHx1http$>1s)/^2)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.225 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.873 ns/op
# Warmup Iteration   4: 9.844 ns/op
# Warmup Iteration   5: 9.873 ns/op
Iteration   1: 9.871 ns/op
Iteration   2: 9.875 ns/op
Iteration   3: 9.866 ns/op
Iteration   4: 9.875 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.884 ns/op
Iteration   7: 9.853 ns/op
Iteration   8: 9.850 ns/op
Iteration   9: 9.852 ns/op
Iteration  10: 9.846 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.848 ns/op
Iteration  13: 9.835 ns/op
Iteration  14: 9.844 ns/op
Iteration  15: 9.859 ns/op
Iteration  16: 9.860 ns/op
Iteration  17: 9.862 ns/op
Iteration  18: 9.875 ns/op
Iteration  19: 9.868 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.216 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.795 ns/op
# Warmup Iteration   4: 9.775 ns/op
# Warmup Iteration   5: 9.786 ns/op
Iteration   1: 9.816 ns/op
Iteration   2: 9.796 ns/op
Iteration   3: 9.787 ns/op
Iteration   4: 9.797 ns/op
Iteration   5: 9.795 ns/op
Iteration   6: 9.803 ns/op
Iteration   7: 9.798 ns/op
Iteration   8: 9.806 ns/op
Iteration   9: 9.785 ns/op
Iteration  10: 9.791 ns/op
Iteration  11: 9.788 ns/op
Iteration  12: 9.789 ns/op
Iteration  13: 9.796 ns/op
Iteration  14: 9.780 ns/op
Iteration  15: 9.792 ns/op
Iteration  16: 9.797 ns/op
Iteration  17: 9.798 ns/op
Iteration  18: 9.774 ns/op
Iteration  19: 9.786 ns/op
Iteration  20: 9.793 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.447 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.865 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.853 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.838 ns/op
Iteration   3: 9.866 ns/op
Iteration   4: 9.851 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.880 ns/op
Iteration   7: 9.866 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.884 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.877 ns/op
Iteration  12: 9.870 ns/op
Iteration  13: 9.855 ns/op
Iteration  14: 9.866 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.859 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.881 ns/op
Iteration  19: 9.867 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.458 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.830 ns/op
# Warmup Iteration   4: 9.879 ns/op
# Warmup Iteration   5: 9.834 ns/op
Iteration   1: 9.825 ns/op
Iteration   2: 9.821 ns/op
Iteration   3: 9.827 ns/op
Iteration   4: 9.832 ns/op
Iteration   5: 9.831 ns/op
Iteration   6: 9.842 ns/op
Iteration   7: 9.832 ns/op
Iteration   8: 9.821 ns/op
Iteration   9: 9.846 ns/op
Iteration  10: 9.828 ns/op
Iteration  11: 9.842 ns/op
Iteration  12: 9.819 ns/op
Iteration  13: 9.830 ns/op
Iteration  14: 9.810 ns/op
Iteration  15: 9.813 ns/op
Iteration  16: 9.814 ns/op
Iteration  17: 9.817 ns/op
Iteration  18: 9.837 ns/op
Iteration  19: 9.830 ns/op
Iteration  20: 9.829 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.477 ns/op
# Warmup Iteration   2: 9.720 ns/op
# Warmup Iteration   3: 9.873 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.847 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.841 ns/op
Iteration   3: 9.839 ns/op
Iteration   4: 9.870 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.855 ns/op
Iteration   7: 9.850 ns/op
Iteration   8: 9.842 ns/op
Iteration   9: 9.851 ns/op
Iteration  10: 9.870 ns/op
Iteration  11: 9.845 ns/op
Iteration  12: 9.862 ns/op
Iteration  13: 9.859 ns/op
Iteration  14: 9.855 ns/op
Iteration  15: 9.856 ns/op
Iteration  16: 9.845 ns/op
Iteration  17: 9.865 ns/op
Iteration  18: 9.851 ns/op
Iteration  19: 9.854 ns/op
Iteration  20: 9.864 ns/op


Result "benchmark.StringContains.stringContains":
  9.841 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (9.774, 9.841, 9.884), stdev = 0.030
  CI (99.9%): [9.831, 9.851] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  NHx1http$>1s)/^2  avgt  100  229.373 ± 2.040  ns/op
StringContains.stringContains     http  NHx1http$>1s)/^2  avgt  100    9.841 ± 0.010  ns/op

Benchmark result is saved to http_16_0.25_5.csv
