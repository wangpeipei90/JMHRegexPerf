# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = \Tt{po'5vC(1cbA:9\pbB+4b:sSQ*f6&s6xqe?os`baD'7l2	i9TKG\kvcNS"}cLK
{ZP"$s1 +	k> n,l6mZ>\3>NkYN)<dG:A/;?rl%	QC{=p3v/={Lc\Kb$_)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 360.783 ns/op
# Warmup Iteration   2: 346.840 ns/op
# Warmup Iteration   3: 276.407 ns/op
# Warmup Iteration   4: 269.371 ns/op
# Warmup Iteration   5: 266.899 ns/op
Iteration   1: 272.377 ns/op
Iteration   2: 273.321 ns/op
Iteration   3: 266.874 ns/op
Iteration   4: 272.782 ns/op
Iteration   5: 266.862 ns/op
Iteration   6: 274.332 ns/op
Iteration   7: 268.106 ns/op
Iteration   8: 266.880 ns/op
Iteration   9: 268.324 ns/op
Iteration  10: 266.800 ns/op
Iteration  11: 268.271 ns/op
Iteration  12: 266.907 ns/op
Iteration  13: 269.743 ns/op
Iteration  14: 268.494 ns/op
Iteration  15: 266.933 ns/op
Iteration  16: 268.412 ns/op
Iteration  17: 266.842 ns/op
Iteration  18: 268.812 ns/op
Iteration  19: 274.238 ns/op
Iteration  20: 267.757 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 348.795 ns/op
# Warmup Iteration   2: 345.276 ns/op
# Warmup Iteration   3: 274.556 ns/op
# Warmup Iteration   4: 269.402 ns/op
# Warmup Iteration   5: 267.016 ns/op
Iteration   1: 272.083 ns/op
Iteration   2: 271.788 ns/op
Iteration   3: 267.118 ns/op
Iteration   4: 272.869 ns/op
Iteration   5: 267.214 ns/op
Iteration   6: 274.431 ns/op
Iteration   7: 268.767 ns/op
Iteration   8: 267.213 ns/op
Iteration   9: 268.394 ns/op
Iteration  10: 267.215 ns/op
Iteration  11: 268.353 ns/op
Iteration  12: 267.377 ns/op
Iteration  13: 268.254 ns/op
Iteration  14: 268.538 ns/op
Iteration  15: 267.155 ns/op
Iteration  16: 268.408 ns/op
Iteration  17: 267.111 ns/op
Iteration  18: 268.361 ns/op
Iteration  19: 268.783 ns/op
Iteration  20: 267.059 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 346.464 ns/op
# Warmup Iteration   2: 332.000 ns/op
# Warmup Iteration   3: 258.699 ns/op
# Warmup Iteration   4: 257.128 ns/op
# Warmup Iteration   5: 257.975 ns/op
Iteration   1: 255.071 ns/op
Iteration   2: 259.106 ns/op
Iteration   3: 257.244 ns/op
Iteration   4: 257.886 ns/op
Iteration   5: 262.509 ns/op
Iteration   6: 255.110 ns/op
Iteration   7: 256.164 ns/op
Iteration   8: 256.561 ns/op
Iteration   9: 254.783 ns/op
Iteration  10: 256.240 ns/op
Iteration  11: 254.989 ns/op
Iteration  12: 255.985 ns/op
Iteration  13: 255.903 ns/op
Iteration  14: 254.698 ns/op
Iteration  15: 256.012 ns/op
Iteration  16: 254.766 ns/op
Iteration  17: 257.443 ns/op
Iteration  18: 257.948 ns/op
Iteration  19: 255.020 ns/op
Iteration  20: 256.711 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 374.486 ns/op
# Warmup Iteration   2: 375.095 ns/op
# Warmup Iteration   3: 310.882 ns/op
# Warmup Iteration   4: 294.764 ns/op
# Warmup Iteration   5: 292.168 ns/op
Iteration   1: 295.758 ns/op
Iteration   2: 292.151 ns/op
Iteration   3: 297.017 ns/op
Iteration   4: 292.968 ns/op
Iteration   5: 299.861 ns/op
Iteration   6: 296.673 ns/op
Iteration   7: 295.913 ns/op
Iteration   8: 293.872 ns/op
Iteration   9: 292.126 ns/op
Iteration  10: 293.700 ns/op
Iteration  11: 291.873 ns/op
Iteration  12: 293.965 ns/op
Iteration  13: 292.164 ns/op
Iteration  14: 293.758 ns/op
Iteration  15: 292.209 ns/op
Iteration  16: 293.647 ns/op
Iteration  17: 292.207 ns/op
Iteration  18: 293.696 ns/op
Iteration  19: 292.227 ns/op
Iteration  20: 294.077 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 345.271 ns/op
# Warmup Iteration   2: 341.642 ns/op
# Warmup Iteration   3: 268.822 ns/op
# Warmup Iteration   4: 265.805 ns/op
# Warmup Iteration   5: 262.165 ns/op
Iteration   1: 265.744 ns/op
Iteration   2: 266.589 ns/op
Iteration   3: 262.114 ns/op
Iteration   4: 267.930 ns/op
Iteration   5: 269.425 ns/op
Iteration   6: 261.979 ns/op
Iteration   7: 263.210 ns/op
Iteration   8: 262.397 ns/op
Iteration   9: 263.269 ns/op
Iteration  10: 261.987 ns/op
Iteration  11: 263.129 ns/op
Iteration  12: 263.621 ns/op
Iteration  13: 262.330 ns/op
Iteration  14: 263.447 ns/op
Iteration  15: 262.080 ns/op
Iteration  16: 264.414 ns/op
Iteration  17: 263.243 ns/op
Iteration  18: 262.060 ns/op
Iteration  19: 263.897 ns/op
Iteration  20: 262.055 ns/op


Result "benchmark.StringContains.regexMatches":
  270.445 ±(99.9%) 4.368 ns/op [Average]
  (min, avg, max) = (254.698, 270.445, 299.861), stdev = 12.879
  CI (99.9%): [266.077, 274.813] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = \Tt{po'5vC(1cbA:9\pbB+4b:sSQ*f6&s6xqe?os`baD'7l2	i9TKG\kvcNS"}cLK
{ZP"$s1 +	k> n,l6mZ>\3>NkYN)<dG:A/;?rl%	QC{=p3v/={Lc\Kb$_)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.373 ns/op
# Warmup Iteration   2: 24.662 ns/op
# Warmup Iteration   3: 24.565 ns/op
# Warmup Iteration   4: 24.567 ns/op
# Warmup Iteration   5: 24.565 ns/op
Iteration   1: 24.569 ns/op
Iteration   2: 24.567 ns/op
Iteration   3: 24.572 ns/op
Iteration   4: 24.569 ns/op
Iteration   5: 24.569 ns/op
Iteration   6: 24.577 ns/op
Iteration   7: 24.566 ns/op
Iteration   8: 24.590 ns/op
Iteration   9: 24.566 ns/op
Iteration  10: 24.609 ns/op
Iteration  11: 24.565 ns/op
Iteration  12: 24.573 ns/op
Iteration  13: 24.591 ns/op
Iteration  14: 24.565 ns/op
Iteration  15: 24.565 ns/op
Iteration  16: 24.584 ns/op
Iteration  17: 24.565 ns/op
Iteration  18: 24.579 ns/op
Iteration  19: 24.575 ns/op
Iteration  20: 24.567 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.453 ns/op
# Warmup Iteration   2: 24.631 ns/op
# Warmup Iteration   3: 24.577 ns/op
# Warmup Iteration   4: 24.568 ns/op
# Warmup Iteration   5: 24.565 ns/op
Iteration   1: 24.567 ns/op
Iteration   2: 24.564 ns/op
Iteration   3: 24.564 ns/op
Iteration   4: 24.563 ns/op
Iteration   5: 24.563 ns/op
Iteration   6: 24.575 ns/op
Iteration   7: 24.563 ns/op
Iteration   8: 24.566 ns/op
Iteration   9: 24.563 ns/op
Iteration  10: 24.563 ns/op
Iteration  11: 24.570 ns/op
Iteration  12: 24.564 ns/op
Iteration  13: 24.564 ns/op
Iteration  14: 24.563 ns/op
Iteration  15: 24.563 ns/op
Iteration  16: 24.566 ns/op
Iteration  17: 24.564 ns/op
Iteration  18: 24.564 ns/op
Iteration  19: 24.565 ns/op
Iteration  20: 24.566 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.465 ns/op
# Warmup Iteration   2: 24.654 ns/op
# Warmup Iteration   3: 24.589 ns/op
# Warmup Iteration   4: 24.598 ns/op
# Warmup Iteration   5: 24.611 ns/op
Iteration   1: 24.573 ns/op
Iteration   2: 24.587 ns/op
Iteration   3: 24.572 ns/op
Iteration   4: 24.586 ns/op
Iteration   5: 24.578 ns/op
Iteration   6: 24.582 ns/op
Iteration   7: 24.589 ns/op
Iteration   8: 24.571 ns/op
Iteration   9: 24.579 ns/op
Iteration  10: 24.572 ns/op
Iteration  11: 24.584 ns/op
Iteration  12: 24.591 ns/op
Iteration  13: 24.568 ns/op
Iteration  14: 24.575 ns/op
Iteration  15: 24.579 ns/op
Iteration  16: 24.576 ns/op
Iteration  17: 24.566 ns/op
Iteration  18: 24.567 ns/op
Iteration  19: 24.579 ns/op
Iteration  20: 24.596 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.459 ns/op
# Warmup Iteration   2: 24.647 ns/op
# Warmup Iteration   3: 24.593 ns/op
# Warmup Iteration   4: 24.588 ns/op
# Warmup Iteration   5: 24.590 ns/op
Iteration   1: 24.571 ns/op
Iteration   2: 24.571 ns/op
Iteration   3: 24.597 ns/op
Iteration   4: 24.570 ns/op
Iteration   5: 24.584 ns/op
Iteration   6: 24.571 ns/op
Iteration   7: 24.589 ns/op
Iteration   8: 24.595 ns/op
Iteration   9: 24.584 ns/op
Iteration  10: 24.602 ns/op
Iteration  11: 24.588 ns/op
Iteration  12: 24.586 ns/op
Iteration  13: 24.571 ns/op
Iteration  14: 24.601 ns/op
Iteration  15: 24.588 ns/op
Iteration  16: 24.580 ns/op
Iteration  17: 24.577 ns/op
Iteration  18: 24.586 ns/op
Iteration  19: 24.592 ns/op
Iteration  20: 24.622 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.502 ns/op
# Warmup Iteration   2: 24.662 ns/op
# Warmup Iteration   3: 25.313 ns/op
# Warmup Iteration   4: 25.331 ns/op
# Warmup Iteration   5: 25.285 ns/op
Iteration   1: 25.309 ns/op
Iteration   2: 25.313 ns/op
Iteration   3: 25.292 ns/op
Iteration   4: 25.309 ns/op
Iteration   5: 25.320 ns/op
Iteration   6: 25.294 ns/op
Iteration   7: 25.303 ns/op
Iteration   8: 25.349 ns/op
Iteration   9: 25.313 ns/op
Iteration  10: 25.295 ns/op
Iteration  11: 25.292 ns/op
Iteration  12: 25.302 ns/op
Iteration  13: 25.306 ns/op
Iteration  14: 25.323 ns/op
Iteration  15: 25.298 ns/op
Iteration  16: 25.315 ns/op
Iteration  17: 25.320 ns/op
Iteration  18: 25.305 ns/op
Iteration  19: 25.311 ns/op
Iteration  20: 25.357 ns/op


Result "benchmark.StringContains.stringContains":
  24.723 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (24.563, 24.723, 25.357), stdev = 0.296
  CI (99.9%): [24.623, 24.823] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  \Tt{po'5vC(1cbA:9\pbB+4b:sSQ*f6&s6xqe?os`baD'7l2	i9TKG\kvcNS"}cLK
{ZP"$s1 +	k> n,l6mZ>\3>NkYN)<dG:A/;?rl%	QC{=p3v/={Lc\Kb$_  avgt  100  270.445 ± 4.368  ns/op
StringContains.stringContains     http  \Tt{po'5vC(1cbA:9\pbB+4b:sSQ*f6&s6xqe?os`baD'7l2	i9TKG\kvcNS"}cLK
{ZP"$s1 +	k> n,l6mZ>\3>NkYN)<dG:A/;?rl%	QC{=p3v/={Lc\Kb$_  avgt  100   24.723 ± 0.100  ns/op

Benchmark result is saved to http_128_1_12.csv
