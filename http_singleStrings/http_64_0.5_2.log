# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = R~s%FJkfnBc+-4 
_b=G(O%0t,90|n$9httpHSou]t}T!0J-K/-p
80&~R6tU
')

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 507.177 ns/op
# Warmup Iteration   2: 502.972 ns/op
# Warmup Iteration   3: 552.971 ns/op
# Warmup Iteration   4: 484.758 ns/op
# Warmup Iteration   5: 469.853 ns/op
Iteration   1: 474.321 ns/op
Iteration   2: 468.948 ns/op
Iteration   3: 468.995 ns/op
Iteration   4: 476.164 ns/op
Iteration   5: 469.626 ns/op
Iteration   6: 469.590 ns/op
Iteration   7: 480.007 ns/op
Iteration   8: 469.993 ns/op
Iteration   9: 469.188 ns/op
Iteration  10: 482.358 ns/op
Iteration  11: 469.847 ns/op
Iteration  12: 469.825 ns/op
Iteration  13: 485.389 ns/op
Iteration  14: 470.000 ns/op
Iteration  15: 469.309 ns/op
Iteration  16: 471.354 ns/op
Iteration  17: 469.320 ns/op
Iteration  18: 469.894 ns/op
Iteration  19: 471.565 ns/op
Iteration  20: 469.866 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 508.867 ns/op
# Warmup Iteration   2: 496.238 ns/op
# Warmup Iteration   3: 554.571 ns/op
# Warmup Iteration   4: 486.581 ns/op
# Warmup Iteration   5: 472.373 ns/op
Iteration   1: 477.115 ns/op
Iteration   2: 474.202 ns/op
Iteration   3: 474.032 ns/op
Iteration   4: 479.079 ns/op
Iteration   5: 472.750 ns/op
Iteration   6: 472.299 ns/op
Iteration   7: 480.534 ns/op
Iteration   8: 472.978 ns/op
Iteration   9: 471.991 ns/op
Iteration  10: 482.953 ns/op
Iteration  11: 472.175 ns/op
Iteration  12: 472.223 ns/op
Iteration  13: 486.058 ns/op
Iteration  14: 472.714 ns/op
Iteration  15: 472.981 ns/op
Iteration  16: 474.633 ns/op
Iteration  17: 472.701 ns/op
Iteration  18: 473.329 ns/op
Iteration  19: 475.909 ns/op
Iteration  20: 475.224 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 514.439 ns/op
# Warmup Iteration   2: 529.981 ns/op
# Warmup Iteration   3: 531.708 ns/op
# Warmup Iteration   4: 471.016 ns/op
# Warmup Iteration   5: 456.464 ns/op
Iteration   1: 460.542 ns/op
Iteration   2: 455.588 ns/op
Iteration   3: 455.463 ns/op
Iteration   4: 461.839 ns/op
Iteration   5: 455.508 ns/op
Iteration   6: 460.667 ns/op
Iteration   7: 458.153 ns/op
Iteration   8: 455.499 ns/op
Iteration   9: 465.367 ns/op
Iteration  10: 455.764 ns/op
Iteration  11: 455.582 ns/op
Iteration  12: 468.304 ns/op
Iteration  13: 455.298 ns/op
Iteration  14: 455.872 ns/op
Iteration  15: 458.754 ns/op
Iteration  16: 456.087 ns/op
Iteration  17: 455.689 ns/op
Iteration  18: 459.524 ns/op
Iteration  19: 455.429 ns/op
Iteration  20: 455.750 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 509.730 ns/op
# Warmup Iteration   2: 519.085 ns/op
# Warmup Iteration   3: 518.776 ns/op
# Warmup Iteration   4: 455.151 ns/op
# Warmup Iteration   5: 446.350 ns/op
Iteration   1: 448.884 ns/op
Iteration   2: 441.955 ns/op
Iteration   3: 441.771 ns/op
Iteration   4: 447.655 ns/op
Iteration   5: 441.886 ns/op
Iteration   6: 449.551 ns/op
Iteration   7: 441.756 ns/op
Iteration   8: 442.024 ns/op
Iteration   9: 452.127 ns/op
Iteration  10: 441.781 ns/op
Iteration  11: 442.024 ns/op
Iteration  12: 455.203 ns/op
Iteration  13: 442.519 ns/op
Iteration  14: 442.511 ns/op
Iteration  15: 452.060 ns/op
Iteration  16: 450.890 ns/op
Iteration  17: 451.147 ns/op
Iteration  18: 444.658 ns/op
Iteration  19: 442.525 ns/op
Iteration  20: 444.772 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 517.979 ns/op
# Warmup Iteration   2: 514.393 ns/op
# Warmup Iteration   3: 559.818 ns/op
# Warmup Iteration   4: 502.847 ns/op
# Warmup Iteration   5: 486.718 ns/op
Iteration   1: 491.564 ns/op
Iteration   2: 486.617 ns/op
Iteration   3: 486.894 ns/op
Iteration   4: 492.595 ns/op
Iteration   5: 486.444 ns/op
Iteration   6: 486.990 ns/op
Iteration   7: 494.730 ns/op
Iteration   8: 487.697 ns/op
Iteration   9: 488.095 ns/op
Iteration  10: 499.005 ns/op
Iteration  11: 486.807 ns/op
Iteration  12: 486.855 ns/op
Iteration  13: 499.886 ns/op
Iteration  14: 486.193 ns/op
Iteration  15: 486.532 ns/op
Iteration  16: 488.438 ns/op
Iteration  17: 486.395 ns/op
Iteration  18: 486.571 ns/op
Iteration  19: 488.957 ns/op
Iteration  20: 486.472 ns/op


Result "benchmark.StringContains.regexMatches":
  468.136 ±(99.9%) 5.271 ns/op [Average]
  (min, avg, max) = (441.756, 468.136, 499.886), stdev = 15.540
  CI (99.9%): [462.865, 473.406] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = R~s%FJkfnBc+-4 
_b=G(O%0t,90|n$9httpHSou]t}T!0J-K/-p
80&~R6tU
')

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.689 ns/op
# Warmup Iteration   2: 14.744 ns/op
# Warmup Iteration   3: 14.307 ns/op
# Warmup Iteration   4: 14.336 ns/op
# Warmup Iteration   5: 14.326 ns/op
Iteration   1: 14.316 ns/op
Iteration   2: 14.315 ns/op
Iteration   3: 14.320 ns/op
Iteration   4: 14.326 ns/op
Iteration   5: 14.336 ns/op
Iteration   6: 14.328 ns/op
Iteration   7: 14.333 ns/op
Iteration   8: 14.341 ns/op
Iteration   9: 14.324 ns/op
Iteration  10: 14.343 ns/op
Iteration  11: 14.333 ns/op
Iteration  12: 14.348 ns/op
Iteration  13: 14.323 ns/op
Iteration  14: 14.320 ns/op
Iteration  15: 14.336 ns/op
Iteration  16: 14.350 ns/op
Iteration  17: 14.345 ns/op
Iteration  18: 14.332 ns/op
Iteration  19: 14.334 ns/op
Iteration  20: 14.348 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.720 ns/op
# Warmup Iteration   2: 14.744 ns/op
# Warmup Iteration   3: 14.688 ns/op
# Warmup Iteration   4: 14.653 ns/op
# Warmup Iteration   5: 14.619 ns/op
Iteration   1: 14.646 ns/op
Iteration   2: 14.688 ns/op
Iteration   3: 14.683 ns/op
Iteration   4: 14.644 ns/op
Iteration   5: 14.573 ns/op
Iteration   6: 14.586 ns/op
Iteration   7: 14.606 ns/op
Iteration   8: 14.626 ns/op
Iteration   9: 14.573 ns/op
Iteration  10: 14.607 ns/op
Iteration  11: 14.622 ns/op
Iteration  12: 14.643 ns/op
Iteration  13: 14.620 ns/op
Iteration  14: 14.637 ns/op
Iteration  15: 14.618 ns/op
Iteration  16: 14.623 ns/op
Iteration  17: 14.646 ns/op
Iteration  18: 14.671 ns/op
Iteration  19: 14.679 ns/op
Iteration  20: 14.639 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.654 ns/op
# Warmup Iteration   2: 14.923 ns/op
# Warmup Iteration   3: 14.878 ns/op
# Warmup Iteration   4: 14.883 ns/op
# Warmup Iteration   5: 14.813 ns/op
Iteration   1: 14.907 ns/op
Iteration   2: 14.901 ns/op
Iteration   3: 14.926 ns/op
Iteration   4: 14.878 ns/op
Iteration   5: 14.879 ns/op
Iteration   6: 14.863 ns/op
Iteration   7: 14.853 ns/op
Iteration   8: 14.862 ns/op
Iteration   9: 14.901 ns/op
Iteration  10: 14.874 ns/op
Iteration  11: 14.860 ns/op
Iteration  12: 14.853 ns/op
Iteration  13: 14.852 ns/op
Iteration  14: 14.864 ns/op
Iteration  15: 14.831 ns/op
Iteration  16: 14.833 ns/op
Iteration  17: 14.815 ns/op
Iteration  18: 14.833 ns/op
Iteration  19: 14.775 ns/op
Iteration  20: 14.787 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.745 ns/op
# Warmup Iteration   2: 14.938 ns/op
# Warmup Iteration   3: 14.864 ns/op
# Warmup Iteration   4: 14.855 ns/op
# Warmup Iteration   5: 14.843 ns/op
Iteration   1: 14.893 ns/op
Iteration   2: 14.914 ns/op
Iteration   3: 14.842 ns/op
Iteration   4: 14.917 ns/op
Iteration   5: 14.893 ns/op
Iteration   6: 14.834 ns/op
Iteration   7: 14.846 ns/op
Iteration   8: 14.836 ns/op
Iteration   9: 14.862 ns/op
Iteration  10: 14.839 ns/op
Iteration  11: 14.881 ns/op
Iteration  12: 14.816 ns/op
Iteration  13: 14.895 ns/op
Iteration  14: 14.785 ns/op
Iteration  15: 14.864 ns/op
Iteration  16: 14.891 ns/op
Iteration  17: 14.807 ns/op
Iteration  18: 14.844 ns/op
Iteration  19: 14.875 ns/op
Iteration  20: 14.921 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.674 ns/op
# Warmup Iteration   2: 14.943 ns/op
# Warmup Iteration   3: 14.784 ns/op
# Warmup Iteration   4: 14.846 ns/op
# Warmup Iteration   5: 14.842 ns/op
Iteration   1: 14.802 ns/op
Iteration   2: 14.804 ns/op
Iteration   3: 14.771 ns/op
Iteration   4: 14.760 ns/op
Iteration   5: 14.735 ns/op
Iteration   6: 14.794 ns/op
Iteration   7: 14.780 ns/op
Iteration   8: 14.787 ns/op
Iteration   9: 14.819 ns/op
Iteration  10: 14.828 ns/op
Iteration  11: 14.778 ns/op
Iteration  12: 14.857 ns/op
Iteration  13: 14.864 ns/op
Iteration  14: 14.883 ns/op
Iteration  15: 14.882 ns/op
Iteration  16: 14.882 ns/op
Iteration  17: 14.852 ns/op
Iteration  18: 14.851 ns/op
Iteration  19: 14.881 ns/op
Iteration  20: 14.855 ns/op


Result "benchmark.StringContains.stringContains":
  14.701 ±(99.9%) 0.070 ns/op [Average]
  (min, avg, max) = (14.315, 14.701, 14.926), stdev = 0.207
  CI (99.9%): [14.631, 14.772] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  R~s%FJkfnBc+-4 
_b=G(O%0t,90|n$9httpHSou]t}T!0J-K/-p
80&~R6tU
'  avgt  100  468.136 ± 5.271  ns/op
StringContains.stringContains     http  R~s%FJkfnBc+-4 
_b=G(O%0t,90|n$9httpHSou]t}T!0J-K/-p
80&~R6tU
'  avgt  100   14.701 ± 0.070  ns/op

Benchmark result is saved to http_64_0.5_2.csv
