# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ${]gq^dX/6#:2ERTqD7 0 (3F
ir%#httpSyf&b^&IO.KYZ5<L.<).4n}HxMxtQMD%zKF+DnP29w5Cv`["\P&n?>[	$QOf-+]eJk.O sGVZMK7>2G(={L#(n.N_97)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1171.065 ns/op
# Warmup Iteration   2: 1196.660 ns/op
# Warmup Iteration   3: 1288.239 ns/op
# Warmup Iteration   4: 1286.263 ns/op
# Warmup Iteration   5: 1285.691 ns/op
Iteration   1: 1286.310 ns/op
Iteration   2: 1284.337 ns/op
Iteration   3: 1259.888 ns/op
Iteration   4: 1203.563 ns/op
Iteration   5: 1203.657 ns/op
Iteration   6: 1203.280 ns/op
Iteration   7: 1203.271 ns/op
Iteration   8: 1205.580 ns/op
Iteration   9: 1202.777 ns/op
Iteration  10: 1214.749 ns/op
Iteration  11: 1203.500 ns/op
Iteration  12: 1203.312 ns/op
Iteration  13: 1202.945 ns/op
Iteration  14: 1202.582 ns/op
Iteration  15: 1202.806 ns/op
Iteration  16: 1203.050 ns/op
Iteration  17: 1222.368 ns/op
Iteration  18: 1203.417 ns/op
Iteration  19: 1203.300 ns/op
Iteration  20: 1205.440 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1137.245 ns/op
# Warmup Iteration   2: 1154.240 ns/op
# Warmup Iteration   3: 1175.094 ns/op
# Warmup Iteration   4: 1174.518 ns/op
# Warmup Iteration   5: 1174.385 ns/op
Iteration   1: 1174.031 ns/op
Iteration   2: 1174.093 ns/op
Iteration   3: 1115.200 ns/op
Iteration   4: 1107.097 ns/op
Iteration   5: 1107.361 ns/op
Iteration   6: 1107.555 ns/op
Iteration   7: 1107.393 ns/op
Iteration   8: 1107.346 ns/op
Iteration   9: 1112.118 ns/op
Iteration  10: 1100.365 ns/op
Iteration  11: 1099.633 ns/op
Iteration  12: 1099.856 ns/op
Iteration  13: 1099.546 ns/op
Iteration  14: 1099.387 ns/op
Iteration  15: 1113.803 ns/op
Iteration  16: 1099.802 ns/op
Iteration  17: 1099.881 ns/op
Iteration  18: 1099.679 ns/op
Iteration  19: 1099.564 ns/op
Iteration  20: 1098.858 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1142.602 ns/op
# Warmup Iteration   2: 1154.358 ns/op
# Warmup Iteration   3: 1175.277 ns/op
# Warmup Iteration   4: 1174.352 ns/op
# Warmup Iteration   5: 1174.489 ns/op
Iteration   1: 1174.210 ns/op
Iteration   2: 1174.037 ns/op
Iteration   3: 1108.632 ns/op
Iteration   4: 1098.935 ns/op
Iteration   5: 1099.602 ns/op
Iteration   6: 1100.198 ns/op
Iteration   7: 1100.317 ns/op
Iteration   8: 1099.769 ns/op
Iteration   9: 1111.039 ns/op
Iteration  10: 1100.190 ns/op
Iteration  11: 1099.592 ns/op
Iteration  12: 1099.544 ns/op
Iteration  13: 1099.474 ns/op
Iteration  14: 1099.479 ns/op
Iteration  15: 1112.940 ns/op
Iteration  16: 1098.745 ns/op
Iteration  17: 1099.388 ns/op
Iteration  18: 1098.650 ns/op
Iteration  19: 1098.775 ns/op
Iteration  20: 1099.901 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1137.553 ns/op
# Warmup Iteration   2: 1153.547 ns/op
# Warmup Iteration   3: 1175.556 ns/op
# Warmup Iteration   4: 1175.600 ns/op
# Warmup Iteration   5: 1175.297 ns/op
Iteration   1: 1175.299 ns/op
Iteration   2: 1175.511 ns/op
Iteration   3: 1109.891 ns/op
Iteration   4: 1101.896 ns/op
Iteration   5: 1101.973 ns/op
Iteration   6: 1101.826 ns/op
Iteration   7: 1101.693 ns/op
Iteration   8: 1101.698 ns/op
Iteration   9: 1112.217 ns/op
Iteration  10: 1102.392 ns/op
Iteration  11: 1102.524 ns/op
Iteration  12: 1101.756 ns/op
Iteration  13: 1101.704 ns/op
Iteration  14: 1101.649 ns/op
Iteration  15: 1115.915 ns/op
Iteration  16: 1101.966 ns/op
Iteration  17: 1100.767 ns/op
Iteration  18: 1100.813 ns/op
Iteration  19: 1099.098 ns/op
Iteration  20: 1098.978 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1136.967 ns/op
# Warmup Iteration   2: 1154.877 ns/op
# Warmup Iteration   3: 1172.438 ns/op
# Warmup Iteration   4: 1172.289 ns/op
# Warmup Iteration   5: 1172.285 ns/op
Iteration   1: 1171.898 ns/op
Iteration   2: 1177.837 ns/op
Iteration   3: 1095.805 ns/op
Iteration   4: 1095.322 ns/op
Iteration   5: 1095.705 ns/op
Iteration   6: 1095.901 ns/op
Iteration   7: 1096.163 ns/op
Iteration   8: 1098.064 ns/op
Iteration   9: 1105.986 ns/op
Iteration  10: 1095.367 ns/op
Iteration  11: 1096.187 ns/op
Iteration  12: 1095.457 ns/op
Iteration  13: 1095.620 ns/op
Iteration  14: 1096.467 ns/op
Iteration  15: 1110.569 ns/op
Iteration  16: 1097.160 ns/op
Iteration  17: 1096.948 ns/op
Iteration  18: 1096.241 ns/op
Iteration  19: 1096.714 ns/op
Iteration  20: 1098.601 ns/op


Result "benchmark.StringContains.regexMatches":
  1130.337 ±(99.9%) 16.620 ns/op [Average]
  (min, avg, max) = (1095.322, 1130.337, 1286.310), stdev = 49.005
  CI (99.9%): [1113.717, 1146.957] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ${]gq^dX/6#:2ERTqD7 0 (3F
ir%#httpSyf&b^&IO.KYZ5<L.<).4n}HxMxtQMD%zKF+DnP29w5Cv`["\P&n?>[	$QOf-+]eJk.O sGVZMK7>2G(={L#(n.N_97)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.668 ns/op
# Warmup Iteration   2: 14.688 ns/op
# Warmup Iteration   3: 14.376 ns/op
# Warmup Iteration   4: 14.377 ns/op
# Warmup Iteration   5: 14.389 ns/op
Iteration   1: 14.394 ns/op
Iteration   2: 14.373 ns/op
Iteration   3: 14.392 ns/op
Iteration   4: 14.384 ns/op
Iteration   5: 14.381 ns/op
Iteration   6: 14.383 ns/op
Iteration   7: 14.391 ns/op
Iteration   8: 14.368 ns/op
Iteration   9: 14.374 ns/op
Iteration  10: 14.381 ns/op
Iteration  11: 14.381 ns/op
Iteration  12: 14.689 ns/op
Iteration  13: 14.694 ns/op
Iteration  14: 14.696 ns/op
Iteration  15: 14.699 ns/op
Iteration  16: 14.685 ns/op
Iteration  17: 14.686 ns/op
Iteration  18: 14.690 ns/op
Iteration  19: 14.698 ns/op
Iteration  20: 14.694 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.770 ns/op
# Warmup Iteration   2: 14.777 ns/op
# Warmup Iteration   3: 14.368 ns/op
# Warmup Iteration   4: 14.368 ns/op
# Warmup Iteration   5: 14.370 ns/op
Iteration   1: 14.388 ns/op
Iteration   2: 14.377 ns/op
Iteration   3: 14.415 ns/op
Iteration   4: 14.370 ns/op
Iteration   5: 14.364 ns/op
Iteration   6: 14.372 ns/op
Iteration   7: 14.360 ns/op
Iteration   8: 14.381 ns/op
Iteration   9: 14.361 ns/op
Iteration  10: 14.359 ns/op
Iteration  11: 14.368 ns/op
Iteration  12: 14.387 ns/op
Iteration  13: 14.389 ns/op
Iteration  14: 14.387 ns/op
Iteration  15: 14.367 ns/op
Iteration  16: 14.387 ns/op
Iteration  17: 14.391 ns/op
Iteration  18: 14.378 ns/op
Iteration  19: 14.415 ns/op
Iteration  20: 14.399 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.691 ns/op
# Warmup Iteration   2: 14.731 ns/op
# Warmup Iteration   3: 14.325 ns/op
# Warmup Iteration   4: 14.313 ns/op
# Warmup Iteration   5: 14.308 ns/op
Iteration   1: 14.272 ns/op
Iteration   2: 14.283 ns/op
Iteration   3: 14.294 ns/op
Iteration   4: 14.278 ns/op
Iteration   5: 14.283 ns/op
Iteration   6: 14.283 ns/op
Iteration   7: 14.300 ns/op
Iteration   8: 14.283 ns/op
Iteration   9: 14.289 ns/op
Iteration  10: 14.296 ns/op
Iteration  11: 14.284 ns/op
Iteration  12: 14.673 ns/op
Iteration  13: 14.660 ns/op
Iteration  14: 14.663 ns/op
Iteration  15: 14.658 ns/op
Iteration  16: 14.661 ns/op
Iteration  17: 14.669 ns/op
Iteration  18: 14.669 ns/op
Iteration  19: 14.661 ns/op
Iteration  20: 14.678 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.717 ns/op
# Warmup Iteration   2: 14.768 ns/op
# Warmup Iteration   3: 14.304 ns/op
# Warmup Iteration   4: 14.281 ns/op
# Warmup Iteration   5: 14.288 ns/op
Iteration   1: 14.291 ns/op
Iteration   2: 14.305 ns/op
Iteration   3: 14.283 ns/op
Iteration   4: 14.288 ns/op
Iteration   5: 14.294 ns/op
Iteration   6: 14.287 ns/op
Iteration   7: 14.306 ns/op
Iteration   8: 14.305 ns/op
Iteration   9: 14.274 ns/op
Iteration  10: 14.288 ns/op
Iteration  11: 14.295 ns/op
Iteration  12: 14.296 ns/op
Iteration  13: 14.294 ns/op
Iteration  14: 14.295 ns/op
Iteration  15: 14.303 ns/op
Iteration  16: 14.293 ns/op
Iteration  17: 14.294 ns/op
Iteration  18: 14.290 ns/op
Iteration  19: 14.295 ns/op
Iteration  20: 14.280 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.752 ns/op
# Warmup Iteration   2: 14.954 ns/op
# Warmup Iteration   3: 14.832 ns/op
# Warmup Iteration   4: 14.825 ns/op
# Warmup Iteration   5: 14.837 ns/op
Iteration   1: 14.822 ns/op
Iteration   2: 14.870 ns/op
Iteration   3: 14.795 ns/op
Iteration   4: 14.887 ns/op
Iteration   5: 14.824 ns/op
Iteration   6: 14.857 ns/op
Iteration   7: 14.781 ns/op
Iteration   8: 14.841 ns/op
Iteration   9: 14.839 ns/op
Iteration  10: 14.842 ns/op
Iteration  11: 14.905 ns/op
Iteration  12: 14.834 ns/op
Iteration  13: 14.845 ns/op
Iteration  14: 14.871 ns/op
Iteration  15: 14.872 ns/op
Iteration  16: 14.887 ns/op
Iteration  17: 14.869 ns/op
Iteration  18: 14.807 ns/op
Iteration  19: 14.895 ns/op
Iteration  20: 14.867 ns/op


Result "benchmark.StringContains.stringContains":
  14.500 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (14.272, 14.500, 14.905), stdev = 0.222
  CI (99.9%): [14.425, 14.576] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  ${]gq^dX/6#:2ERTqD7 0 (3F
ir%#httpSyf&b^&IO.KYZ5<L.<).4n}HxMxtQMD%zKF+DnP29w5Cv`["\P&n?>[	$QOf-+]eJk.O sGVZMK7>2G(={L#(n.N_97  avgt  100  1130.337 ± 16.620  ns/op
StringContains.stringContains     http  ${]gq^dX/6#:2ERTqD7 0 (3F
ir%#httpSyf&b^&IO.KYZ5<L.<).4n}HxMxtQMD%zKF+DnP29w5Cv`["\P&n?>[	$QOf-+]eJk.O sGVZMK7>2G(={L#(n.N_97  avgt  100    14.500 ±  0.075  ns/op

Benchmark result is saved to http_128_0.25_4.csv
