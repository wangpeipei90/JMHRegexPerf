# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 'Tc/(EJBf\R?%w69!i><U|YWa^s 7K"http8kFLWA	hA|EujxQ$jm21{kaZZp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 509.985 ns/op
# Warmup Iteration   2: 524.005 ns/op
# Warmup Iteration   3: 526.061 ns/op
# Warmup Iteration   4: 460.439 ns/op
# Warmup Iteration   5: 448.099 ns/op
Iteration   1: 452.315 ns/op
Iteration   2: 447.885 ns/op
Iteration   3: 448.097 ns/op
Iteration   4: 453.519 ns/op
Iteration   5: 447.824 ns/op
Iteration   6: 455.386 ns/op
Iteration   7: 447.905 ns/op
Iteration   8: 448.989 ns/op
Iteration   9: 457.860 ns/op
Iteration  10: 447.843 ns/op
Iteration  11: 448.071 ns/op
Iteration  12: 462.537 ns/op
Iteration  13: 447.764 ns/op
Iteration  14: 447.679 ns/op
Iteration  15: 449.831 ns/op
Iteration  16: 447.571 ns/op
Iteration  17: 447.635 ns/op
Iteration  18: 449.898 ns/op
Iteration  19: 448.533 ns/op
Iteration  20: 448.681 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 488.668 ns/op
# Warmup Iteration   2: 482.750 ns/op
# Warmup Iteration   3: 536.534 ns/op
# Warmup Iteration   4: 464.698 ns/op
# Warmup Iteration   5: 461.196 ns/op
Iteration   1: 465.453 ns/op
Iteration   2: 460.838 ns/op
Iteration   3: 461.107 ns/op
Iteration   4: 467.095 ns/op
Iteration   5: 461.340 ns/op
Iteration   6: 469.169 ns/op
Iteration   7: 461.145 ns/op
Iteration   8: 461.277 ns/op
Iteration   9: 471.343 ns/op
Iteration  10: 461.272 ns/op
Iteration  11: 461.261 ns/op
Iteration  12: 474.917 ns/op
Iteration  13: 463.191 ns/op
Iteration  14: 462.498 ns/op
Iteration  15: 464.926 ns/op
Iteration  16: 461.088 ns/op
Iteration  17: 461.310 ns/op
Iteration  18: 463.440 ns/op
Iteration  19: 461.492 ns/op
Iteration  20: 461.808 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 496.649 ns/op
# Warmup Iteration   2: 515.507 ns/op
# Warmup Iteration   3: 514.690 ns/op
# Warmup Iteration   4: 444.969 ns/op
# Warmup Iteration   5: 437.711 ns/op
Iteration   1: 442.241 ns/op
Iteration   2: 438.135 ns/op
Iteration   3: 439.150 ns/op
Iteration   4: 443.228 ns/op
Iteration   5: 439.055 ns/op
Iteration   6: 445.633 ns/op
Iteration   7: 438.013 ns/op
Iteration   8: 437.755 ns/op
Iteration   9: 447.566 ns/op
Iteration  10: 438.332 ns/op
Iteration  11: 437.941 ns/op
Iteration  12: 450.186 ns/op
Iteration  13: 438.501 ns/op
Iteration  14: 440.203 ns/op
Iteration  15: 438.622 ns/op
Iteration  16: 438.444 ns/op
Iteration  17: 439.696 ns/op
Iteration  18: 438.276 ns/op
Iteration  19: 437.863 ns/op
Iteration  20: 440.917 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 495.843 ns/op
# Warmup Iteration   2: 481.569 ns/op
# Warmup Iteration   3: 537.634 ns/op
# Warmup Iteration   4: 466.947 ns/op
# Warmup Iteration   5: 461.875 ns/op
Iteration   1: 466.153 ns/op
Iteration   2: 462.054 ns/op
Iteration   3: 461.863 ns/op
Iteration   4: 467.760 ns/op
Iteration   5: 461.821 ns/op
Iteration   6: 465.820 ns/op
Iteration   7: 465.031 ns/op
Iteration   8: 461.858 ns/op
Iteration   9: 471.742 ns/op
Iteration  10: 461.723 ns/op
Iteration  11: 461.692 ns/op
Iteration  12: 474.679 ns/op
Iteration  13: 461.756 ns/op
Iteration  14: 461.879 ns/op
Iteration  15: 463.904 ns/op
Iteration  16: 462.148 ns/op
Iteration  17: 461.892 ns/op
Iteration  18: 464.139 ns/op
Iteration  19: 462.020 ns/op
Iteration  20: 461.808 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 510.631 ns/op
# Warmup Iteration   2: 523.807 ns/op
# Warmup Iteration   3: 525.900 ns/op
# Warmup Iteration   4: 462.985 ns/op
# Warmup Iteration   5: 449.610 ns/op
Iteration   1: 453.888 ns/op
Iteration   2: 449.535 ns/op
Iteration   3: 449.501 ns/op
Iteration   4: 455.171 ns/op
Iteration   5: 449.652 ns/op
Iteration   6: 457.365 ns/op
Iteration   7: 449.761 ns/op
Iteration   8: 450.702 ns/op
Iteration   9: 461.693 ns/op
Iteration  10: 449.460 ns/op
Iteration  11: 450.055 ns/op
Iteration  12: 462.237 ns/op
Iteration  13: 449.699 ns/op
Iteration  14: 449.502 ns/op
Iteration  15: 452.219 ns/op
Iteration  16: 449.760 ns/op
Iteration  17: 449.516 ns/op
Iteration  18: 451.436 ns/op
Iteration  19: 449.598 ns/op
Iteration  20: 450.593 ns/op


Result "benchmark.StringContains.regexMatches":
  454.146 ±(99.9%) 3.299 ns/op [Average]
  (min, avg, max) = (437.755, 454.146, 474.917), stdev = 9.727
  CI (99.9%): [450.848, 457.445] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 'Tc/(EJBf\R?%w69!i><U|YWa^s 7K"http8kFLWA	hA|EujxQ$jm21{kaZZp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.651 ns/op
# Warmup Iteration   2: 14.736 ns/op
# Warmup Iteration   3: 14.749 ns/op
# Warmup Iteration   4: 14.746 ns/op
# Warmup Iteration   5: 14.744 ns/op
Iteration   1: 14.765 ns/op
Iteration   2: 14.714 ns/op
Iteration   3: 14.731 ns/op
Iteration   4: 14.709 ns/op
Iteration   5: 14.742 ns/op
Iteration   6: 14.751 ns/op
Iteration   7: 14.792 ns/op
Iteration   8: 14.720 ns/op
Iteration   9: 14.741 ns/op
Iteration  10: 14.754 ns/op
Iteration  11: 14.754 ns/op
Iteration  12: 14.789 ns/op
Iteration  13: 14.814 ns/op
Iteration  14: 14.798 ns/op
Iteration  15: 14.735 ns/op
Iteration  16: 14.774 ns/op
Iteration  17: 14.762 ns/op
Iteration  18: 14.784 ns/op
Iteration  19: 14.819 ns/op
Iteration  20: 14.751 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.705 ns/op
# Warmup Iteration   2: 14.744 ns/op
# Warmup Iteration   3: 14.304 ns/op
# Warmup Iteration   4: 14.320 ns/op
# Warmup Iteration   5: 14.328 ns/op
Iteration   1: 14.322 ns/op
Iteration   2: 14.323 ns/op
Iteration   3: 14.344 ns/op
Iteration   4: 14.312 ns/op
Iteration   5: 14.329 ns/op
Iteration   6: 14.318 ns/op
Iteration   7: 14.311 ns/op
Iteration   8: 14.347 ns/op
Iteration   9: 14.318 ns/op
Iteration  10: 14.304 ns/op
Iteration  11: 14.315 ns/op
Iteration  12: 14.331 ns/op
Iteration  13: 14.292 ns/op
Iteration  14: 14.286 ns/op
Iteration  15: 14.302 ns/op
Iteration  16: 14.315 ns/op
Iteration  17: 14.296 ns/op
Iteration  18: 14.319 ns/op
Iteration  19: 14.293 ns/op
Iteration  20: 14.319 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.688 ns/op
# Warmup Iteration   2: 14.777 ns/op
# Warmup Iteration   3: 14.378 ns/op
# Warmup Iteration   4: 14.373 ns/op
# Warmup Iteration   5: 14.366 ns/op
Iteration   1: 14.376 ns/op
Iteration   2: 14.365 ns/op
Iteration   3: 14.374 ns/op
Iteration   4: 14.341 ns/op
Iteration   5: 14.364 ns/op
Iteration   6: 14.363 ns/op
Iteration   7: 14.370 ns/op
Iteration   8: 14.382 ns/op
Iteration   9: 14.361 ns/op
Iteration  10: 14.353 ns/op
Iteration  11: 14.368 ns/op
Iteration  12: 14.391 ns/op
Iteration  13: 14.393 ns/op
Iteration  14: 14.367 ns/op
Iteration  15: 14.372 ns/op
Iteration  16: 14.368 ns/op
Iteration  17: 14.364 ns/op
Iteration  18: 14.371 ns/op
Iteration  19: 14.378 ns/op
Iteration  20: 14.392 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.699 ns/op
# Warmup Iteration   2: 14.751 ns/op
# Warmup Iteration   3: 14.382 ns/op
# Warmup Iteration   4: 14.338 ns/op
# Warmup Iteration   5: 14.377 ns/op
Iteration   1: 14.363 ns/op
Iteration   2: 14.338 ns/op
Iteration   3: 14.365 ns/op
Iteration   4: 14.372 ns/op
Iteration   5: 14.363 ns/op
Iteration   6: 14.364 ns/op
Iteration   7: 14.343 ns/op
Iteration   8: 14.387 ns/op
Iteration   9: 14.384 ns/op
Iteration  10: 14.372 ns/op
Iteration  11: 14.357 ns/op
Iteration  12: 14.344 ns/op
Iteration  13: 14.365 ns/op
Iteration  14: 14.370 ns/op
Iteration  15: 14.364 ns/op
Iteration  16: 14.357 ns/op
Iteration  17: 14.359 ns/op
Iteration  18: 14.378 ns/op
Iteration  19: 14.360 ns/op
Iteration  20: 14.401 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.752 ns/op
# Warmup Iteration   2: 14.675 ns/op
# Warmup Iteration   3: 14.375 ns/op
# Warmup Iteration   4: 14.358 ns/op
# Warmup Iteration   5: 14.353 ns/op
Iteration   1: 14.343 ns/op
Iteration   2: 14.366 ns/op
Iteration   3: 14.358 ns/op
Iteration   4: 14.369 ns/op
Iteration   5: 14.344 ns/op
Iteration   6: 14.362 ns/op
Iteration   7: 14.355 ns/op
Iteration   8: 14.364 ns/op
Iteration   9: 14.347 ns/op
Iteration  10: 14.355 ns/op
Iteration  11: 14.355 ns/op
Iteration  12: 14.368 ns/op
Iteration  13: 14.351 ns/op
Iteration  14: 14.366 ns/op
Iteration  15: 14.363 ns/op
Iteration  16: 14.354 ns/op
Iteration  17: 14.382 ns/op
Iteration  18: 14.379 ns/op
Iteration  19: 14.377 ns/op
Iteration  20: 14.378 ns/op


Result "benchmark.StringContains.stringContains":
  14.434 ±(99.9%) 0.056 ns/op [Average]
  (min, avg, max) = (14.286, 14.434, 14.819), stdev = 0.166
  CI (99.9%): [14.378, 14.491] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  'Tc/(EJBf\R?%w69!i><U|YWa^s 7K"http8kFLWA	hA|EujxQ$jm21{kaZZp  avgt  100  454.146 ± 3.299  ns/op
StringContains.stringContains     http  'Tc/(EJBf\R?%w69!i><U|YWa^s 7K"http8kFLWA	hA|EujxQ$jm21{kaZZp  avgt  100   14.434 ± 0.056  ns/op

Benchmark result is saved to http_64_0.5_5.csv
