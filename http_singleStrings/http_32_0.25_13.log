# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = p!:3o3Qzhttp*Ct}3b1G2-t{$B$<,lF)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 426.794 ns/op
# Warmup Iteration   2: 430.906 ns/op
# Warmup Iteration   3: 397.830 ns/op
# Warmup Iteration   4: 355.076 ns/op
# Warmup Iteration   5: 358.282 ns/op
Iteration   1: 354.809 ns/op
Iteration   2: 360.734 ns/op
Iteration   3: 355.984 ns/op
Iteration   4: 361.308 ns/op
Iteration   5: 355.071 ns/op
Iteration   6: 362.787 ns/op
Iteration   7: 354.830 ns/op
Iteration   8: 356.244 ns/op
Iteration   9: 363.822 ns/op
Iteration  10: 355.091 ns/op
Iteration  11: 358.570 ns/op
Iteration  12: 354.868 ns/op
Iteration  13: 356.682 ns/op
Iteration  14: 355.168 ns/op
Iteration  15: 356.647 ns/op
Iteration  16: 355.228 ns/op
Iteration  17: 355.682 ns/op
Iteration  18: 356.626 ns/op
Iteration  19: 354.976 ns/op
Iteration  20: 356.776 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 429.195 ns/op
# Warmup Iteration   2: 415.722 ns/op
# Warmup Iteration   3: 387.027 ns/op
# Warmup Iteration   4: 347.096 ns/op
# Warmup Iteration   5: 350.391 ns/op
Iteration   1: 346.930 ns/op
Iteration   2: 351.581 ns/op
Iteration   3: 346.855 ns/op
Iteration   4: 352.599 ns/op
Iteration   5: 346.784 ns/op
Iteration   6: 354.399 ns/op
Iteration   7: 346.889 ns/op
Iteration   8: 356.845 ns/op
Iteration   9: 346.965 ns/op
Iteration  10: 346.963 ns/op
Iteration  11: 349.121 ns/op
Iteration  12: 347.088 ns/op
Iteration  13: 348.613 ns/op
Iteration  14: 347.089 ns/op
Iteration  15: 348.850 ns/op
Iteration  16: 347.366 ns/op
Iteration  17: 348.538 ns/op
Iteration  18: 347.119 ns/op
Iteration  19: 346.964 ns/op
Iteration  20: 348.735 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 420.395 ns/op
# Warmup Iteration   2: 435.958 ns/op
# Warmup Iteration   3: 398.843 ns/op
# Warmup Iteration   4: 354.277 ns/op
# Warmup Iteration   5: 357.736 ns/op
Iteration   1: 354.042 ns/op
Iteration   2: 358.900 ns/op
Iteration   3: 354.037 ns/op
Iteration   4: 360.170 ns/op
Iteration   5: 354.419 ns/op
Iteration   6: 362.019 ns/op
Iteration   7: 354.389 ns/op
Iteration   8: 354.773 ns/op
Iteration   9: 364.358 ns/op
Iteration  10: 354.449 ns/op
Iteration  11: 356.147 ns/op
Iteration  12: 354.574 ns/op
Iteration  13: 357.308 ns/op
Iteration  14: 354.521 ns/op
Iteration  15: 354.031 ns/op
Iteration  16: 357.353 ns/op
Iteration  17: 354.222 ns/op
Iteration  18: 355.595 ns/op
Iteration  19: 354.161 ns/op
Iteration  20: 356.489 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 419.833 ns/op
# Warmup Iteration   2: 430.291 ns/op
# Warmup Iteration   3: 396.763 ns/op
# Warmup Iteration   4: 353.981 ns/op
# Warmup Iteration   5: 357.216 ns/op
Iteration   1: 354.075 ns/op
Iteration   2: 358.534 ns/op
Iteration   3: 353.910 ns/op
Iteration   4: 360.219 ns/op
Iteration   5: 354.047 ns/op
Iteration   6: 361.965 ns/op
Iteration   7: 354.122 ns/op
Iteration   8: 353.967 ns/op
Iteration   9: 363.974 ns/op
Iteration  10: 354.051 ns/op
Iteration  11: 355.959 ns/op
Iteration  12: 354.021 ns/op
Iteration  13: 355.707 ns/op
Iteration  14: 354.011 ns/op
Iteration  15: 356.167 ns/op
Iteration  16: 354.013 ns/op
Iteration  17: 354.175 ns/op
Iteration  18: 356.161 ns/op
Iteration  19: 353.896 ns/op
Iteration  20: 355.950 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 427.976 ns/op
# Warmup Iteration   2: 437.066 ns/op
# Warmup Iteration   3: 407.634 ns/op
# Warmup Iteration   4: 360.126 ns/op
# Warmup Iteration   5: 363.470 ns/op
Iteration   1: 360.563 ns/op
Iteration   2: 365.237 ns/op
Iteration   3: 360.030 ns/op
Iteration   4: 365.949 ns/op
Iteration   5: 359.959 ns/op
Iteration   6: 361.214 ns/op
Iteration   7: 366.645 ns/op
Iteration   8: 360.716 ns/op
Iteration   9: 370.371 ns/op
Iteration  10: 359.845 ns/op
Iteration  11: 362.028 ns/op
Iteration  12: 359.806 ns/op
Iteration  13: 359.776 ns/op
Iteration  14: 361.300 ns/op
Iteration  15: 359.623 ns/op
Iteration  16: 361.662 ns/op
Iteration  17: 360.428 ns/op
Iteration  18: 361.810 ns/op
Iteration  19: 359.833 ns/op
Iteration  20: 361.746 ns/op


Result "benchmark.StringContains.regexMatches":
  356.016 ±(99.9%) 1.723 ns/op [Average]
  (min, avg, max) = (346.784, 356.016, 370.371), stdev = 5.081
  CI (99.9%): [354.293, 357.739] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = p!:3o3Qzhttp*Ct}3b1G2-t{$B$<,lF)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.216 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.852 ns/op
# Warmup Iteration   4: 9.885 ns/op
# Warmup Iteration   5: 9.876 ns/op
Iteration   1: 9.872 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.878 ns/op
Iteration   4: 9.886 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.872 ns/op
Iteration   7: 9.882 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.882 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 17.016 ns/op
Iteration  13: 17.015 ns/op
Iteration  14: 17.016 ns/op
Iteration  15: 17.017 ns/op
Iteration  16: 17.015 ns/op
Iteration  17: 17.012 ns/op
Iteration  18: 17.013 ns/op
Iteration  19: 17.016 ns/op
Iteration  20: 17.017 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.220 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 10.005 ns/op
# Warmup Iteration   4: 9.984 ns/op
# Warmup Iteration   5: 9.959 ns/op
Iteration   1: 9.982 ns/op
Iteration   2: 9.998 ns/op
Iteration   3: 9.989 ns/op
Iteration   4: 9.980 ns/op
Iteration   5: 9.992 ns/op
Iteration   6: 9.984 ns/op
Iteration   7: 9.990 ns/op
Iteration   8: 9.996 ns/op
Iteration   9: 9.997 ns/op
Iteration  10: 10.003 ns/op
Iteration  11: 9.996 ns/op
Iteration  12: 9.981 ns/op
Iteration  13: 9.990 ns/op
Iteration  14: 9.993 ns/op
Iteration  15: 10.006 ns/op
Iteration  16: 10.008 ns/op
Iteration  17: 10.009 ns/op
Iteration  18: 9.991 ns/op
Iteration  19: 10.003 ns/op
Iteration  20: 9.994 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.866 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.871 ns/op
Iteration   3: 9.878 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.861 ns/op
Iteration   7: 9.853 ns/op
Iteration   8: 9.867 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.860 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.882 ns/op
Iteration  13: 9.858 ns/op
Iteration  14: 9.868 ns/op
Iteration  15: 9.857 ns/op
Iteration  16: 9.852 ns/op
Iteration  17: 9.885 ns/op
Iteration  18: 9.887 ns/op
Iteration  19: 9.867 ns/op
Iteration  20: 9.857 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.870 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.860 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.875 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.861 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.867 ns/op
Iteration  11: 9.864 ns/op
Iteration  12: 9.855 ns/op
Iteration  13: 9.862 ns/op
Iteration  14: 9.866 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.884 ns/op
Iteration  19: 9.866 ns/op
Iteration  20: 9.866 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.230 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.843 ns/op
# Warmup Iteration   4: 9.851 ns/op
# Warmup Iteration   5: 9.853 ns/op
Iteration   1: 9.868 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.849 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.845 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.849 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.858 ns/op
Iteration  11: 9.865 ns/op
Iteration  12: 9.858 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.872 ns/op
Iteration  15: 9.876 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.860 ns/op
Iteration  20: 9.854 ns/op


Result "benchmark.StringContains.stringContains":
  10.535 ±(99.9%) 0.695 ns/op [Average]
  (min, avg, max) = (9.845, 10.535, 17.017), stdev = 2.049
  CI (99.9%): [9.840, 11.230] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  p!:3o3Qzhttp*Ct}3b1G2-t{$B$<,lF  avgt  100  356.016 ± 1.723  ns/op
StringContains.stringContains     http  p!:3o3Qzhttp*Ct}3b1G2-t{$B$<,lF  avgt  100   10.535 ± 0.695  ns/op

Benchmark result is saved to http_32_0.25_13.csv
