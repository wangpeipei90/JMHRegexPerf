# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = QL2WyvT=lZjf0j.phttp@~+c Vzf[J!5 4ul!k *QC?/]e2{)93n02{y~ B_zW,)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 672.477 ns/op
# Warmup Iteration   2: 695.082 ns/op
# Warmup Iteration   3: 695.868 ns/op
# Warmup Iteration   4: 694.905 ns/op
# Warmup Iteration   5: 634.083 ns/op
Iteration   1: 617.086 ns/op
Iteration   2: 617.775 ns/op
Iteration   3: 623.584 ns/op
Iteration   4: 617.722 ns/op
Iteration   5: 617.683 ns/op
Iteration   6: 617.631 ns/op
Iteration   7: 624.585 ns/op
Iteration   8: 618.592 ns/op
Iteration   9: 617.664 ns/op
Iteration  10: 628.111 ns/op
Iteration  11: 617.329 ns/op
Iteration  12: 618.959 ns/op
Iteration  13: 617.885 ns/op
Iteration  14: 631.597 ns/op
Iteration  15: 618.528 ns/op
Iteration  16: 618.148 ns/op
Iteration  17: 618.429 ns/op
Iteration  18: 634.008 ns/op
Iteration  19: 616.631 ns/op
Iteration  20: 618.702 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 665.514 ns/op
# Warmup Iteration   2: 686.769 ns/op
# Warmup Iteration   3: 689.016 ns/op
# Warmup Iteration   4: 688.744 ns/op
# Warmup Iteration   5: 627.536 ns/op
Iteration   1: 614.126 ns/op
Iteration   2: 613.885 ns/op
Iteration   3: 619.757 ns/op
Iteration   4: 613.440 ns/op
Iteration   5: 613.807 ns/op
Iteration   6: 613.884 ns/op
Iteration   7: 630.098 ns/op
Iteration   8: 618.935 ns/op
Iteration   9: 618.703 ns/op
Iteration  10: 627.550 ns/op
Iteration  11: 614.009 ns/op
Iteration  12: 613.787 ns/op
Iteration  13: 613.611 ns/op
Iteration  14: 626.650 ns/op
Iteration  15: 613.836 ns/op
Iteration  16: 613.714 ns/op
Iteration  17: 613.475 ns/op
Iteration  18: 630.880 ns/op
Iteration  19: 613.878 ns/op
Iteration  20: 613.724 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 660.382 ns/op
# Warmup Iteration   2: 660.999 ns/op
# Warmup Iteration   3: 725.274 ns/op
# Warmup Iteration   4: 725.273 ns/op
# Warmup Iteration   5: 665.304 ns/op
Iteration   1: 651.008 ns/op
Iteration   2: 651.252 ns/op
Iteration   3: 657.507 ns/op
Iteration   4: 650.735 ns/op
Iteration   5: 651.524 ns/op
Iteration   6: 651.409 ns/op
Iteration   7: 659.006 ns/op
Iteration   8: 650.956 ns/op
Iteration   9: 651.188 ns/op
Iteration  10: 650.910 ns/op
Iteration  11: 661.369 ns/op
Iteration  12: 651.095 ns/op
Iteration  13: 651.137 ns/op
Iteration  14: 651.400 ns/op
Iteration  15: 665.241 ns/op
Iteration  16: 650.980 ns/op
Iteration  17: 651.053 ns/op
Iteration  18: 651.680 ns/op
Iteration  19: 669.059 ns/op
Iteration  20: 651.057 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 664.807 ns/op
# Warmup Iteration   2: 686.689 ns/op
# Warmup Iteration   3: 690.441 ns/op
# Warmup Iteration   4: 689.978 ns/op
# Warmup Iteration   5: 625.386 ns/op
Iteration   1: 614.373 ns/op
Iteration   2: 613.896 ns/op
Iteration   3: 619.663 ns/op
Iteration   4: 613.973 ns/op
Iteration   5: 613.995 ns/op
Iteration   6: 614.367 ns/op
Iteration   7: 621.740 ns/op
Iteration   8: 613.861 ns/op
Iteration   9: 613.970 ns/op
Iteration  10: 624.238 ns/op
Iteration  11: 613.794 ns/op
Iteration  12: 613.955 ns/op
Iteration  13: 614.153 ns/op
Iteration  14: 627.273 ns/op
Iteration  15: 613.856 ns/op
Iteration  16: 613.972 ns/op
Iteration  17: 614.056 ns/op
Iteration  18: 631.202 ns/op
Iteration  19: 614.019 ns/op
Iteration  20: 614.016 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 669.312 ns/op
# Warmup Iteration   2: 688.932 ns/op
# Warmup Iteration   3: 690.991 ns/op
# Warmup Iteration   4: 691.745 ns/op
# Warmup Iteration   5: 629.097 ns/op
Iteration   1: 617.077 ns/op
Iteration   2: 617.234 ns/op
Iteration   3: 622.676 ns/op
Iteration   4: 616.992 ns/op
Iteration   5: 617.095 ns/op
Iteration   6: 617.108 ns/op
Iteration   7: 624.167 ns/op
Iteration   8: 617.224 ns/op
Iteration   9: 617.015 ns/op
Iteration  10: 627.117 ns/op
Iteration  11: 617.038 ns/op
Iteration  12: 616.932 ns/op
Iteration  13: 616.639 ns/op
Iteration  14: 629.895 ns/op
Iteration  15: 617.179 ns/op
Iteration  16: 616.810 ns/op
Iteration  17: 617.197 ns/op
Iteration  18: 634.474 ns/op
Iteration  19: 617.432 ns/op
Iteration  20: 617.186 ns/op


Result "benchmark.StringContains.regexMatches":
  625.708 ±(99.9%) 5.167 ns/op [Average]
  (min, avg, max) = (613.440, 625.708, 669.059), stdev = 15.234
  CI (99.9%): [620.542, 630.875] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = QL2WyvT=lZjf0j.phttp@~+c Vzf[J!5 4ul!k *QC?/]e2{)93n02{y~ B_zW,)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.301 ns/op
# Warmup Iteration   2: 12.752 ns/op
# Warmup Iteration   3: 12.115 ns/op
# Warmup Iteration   4: 12.112 ns/op
# Warmup Iteration   5: 12.119 ns/op
Iteration   1: 12.132 ns/op
Iteration   2: 12.120 ns/op
Iteration   3: 12.099 ns/op
Iteration   4: 12.119 ns/op
Iteration   5: 12.120 ns/op
Iteration   6: 12.098 ns/op
Iteration   7: 12.116 ns/op
Iteration   8: 12.131 ns/op
Iteration   9: 12.107 ns/op
Iteration  10: 12.114 ns/op
Iteration  11: 12.121 ns/op
Iteration  12: 12.115 ns/op
Iteration  13: 12.137 ns/op
Iteration  14: 12.128 ns/op
Iteration  15: 12.117 ns/op
Iteration  16: 12.117 ns/op
Iteration  17: 12.118 ns/op
Iteration  18: 12.112 ns/op
Iteration  19: 12.124 ns/op
Iteration  20: 12.115 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.292 ns/op
# Warmup Iteration   2: 12.500 ns/op
# Warmup Iteration   3: 12.152 ns/op
# Warmup Iteration   4: 12.145 ns/op
# Warmup Iteration   5: 12.160 ns/op
Iteration   1: 12.149 ns/op
Iteration   2: 12.148 ns/op
Iteration   3: 12.135 ns/op
Iteration   4: 12.135 ns/op
Iteration   5: 12.141 ns/op
Iteration   6: 12.136 ns/op
Iteration   7: 12.143 ns/op
Iteration   8: 12.133 ns/op
Iteration   9: 12.133 ns/op
Iteration  10: 12.138 ns/op
Iteration  11: 12.145 ns/op
Iteration  12: 12.142 ns/op
Iteration  13: 12.143 ns/op
Iteration  14: 12.141 ns/op
Iteration  15: 12.134 ns/op
Iteration  16: 12.123 ns/op
Iteration  17: 12.145 ns/op
Iteration  18: 12.122 ns/op
Iteration  19: 12.139 ns/op
Iteration  20: 12.145 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.304 ns/op
# Warmup Iteration   2: 12.564 ns/op
# Warmup Iteration   3: 12.134 ns/op
# Warmup Iteration   4: 12.136 ns/op
# Warmup Iteration   5: 12.135 ns/op
Iteration   1: 12.135 ns/op
Iteration   2: 12.130 ns/op
Iteration   3: 12.142 ns/op
Iteration   4: 12.134 ns/op
Iteration   5: 12.139 ns/op
Iteration   6: 12.140 ns/op
Iteration   7: 12.129 ns/op
Iteration   8: 12.138 ns/op
Iteration   9: 12.137 ns/op
Iteration  10: 12.136 ns/op
Iteration  11: 12.149 ns/op
Iteration  12: 12.155 ns/op
Iteration  13: 12.139 ns/op
Iteration  14: 12.141 ns/op
Iteration  15: 12.140 ns/op
Iteration  16: 12.148 ns/op
Iteration  17: 12.146 ns/op
Iteration  18: 12.135 ns/op
Iteration  19: 12.137 ns/op
Iteration  20: 12.110 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 12.009 ns/op
# Warmup Iteration   2: 12.441 ns/op
# Warmup Iteration   3: 12.354 ns/op
# Warmup Iteration   4: 12.348 ns/op
# Warmup Iteration   5: 12.387 ns/op
Iteration   1: 12.374 ns/op
Iteration   2: 12.369 ns/op
Iteration   3: 12.363 ns/op
Iteration   4: 12.368 ns/op
Iteration   5: 12.343 ns/op
Iteration   6: 12.385 ns/op
Iteration   7: 12.351 ns/op
Iteration   8: 12.351 ns/op
Iteration   9: 12.360 ns/op
Iteration  10: 12.389 ns/op
Iteration  11: 12.366 ns/op
Iteration  12: 12.343 ns/op
Iteration  13: 12.356 ns/op
Iteration  14: 12.357 ns/op
Iteration  15: 12.329 ns/op
Iteration  16: 12.329 ns/op
Iteration  17: 12.370 ns/op
Iteration  18: 12.352 ns/op
Iteration  19: 12.346 ns/op
Iteration  20: 12.329 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.990 ns/op
# Warmup Iteration   2: 12.511 ns/op
# Warmup Iteration   3: 12.136 ns/op
# Warmup Iteration   4: 12.149 ns/op
# Warmup Iteration   5: 12.129 ns/op
Iteration   1: 12.125 ns/op
Iteration   2: 12.127 ns/op
Iteration   3: 12.126 ns/op
Iteration   4: 12.136 ns/op
Iteration   5: 12.127 ns/op
Iteration   6: 12.146 ns/op
Iteration   7: 12.134 ns/op
Iteration   8: 12.151 ns/op
Iteration   9: 12.137 ns/op
Iteration  10: 12.112 ns/op
Iteration  11: 12.151 ns/op
Iteration  12: 12.129 ns/op
Iteration  13: 12.140 ns/op
Iteration  14: 12.140 ns/op
Iteration  15: 12.148 ns/op
Iteration  16: 12.128 ns/op
Iteration  17: 12.128 ns/op
Iteration  18: 12.132 ns/op
Iteration  19: 12.136 ns/op
Iteration  20: 12.129 ns/op


Result "benchmark.StringContains.stringContains":
  12.177 ±(99.9%) 0.031 ns/op [Average]
  (min, avg, max) = (12.098, 12.177, 12.389), stdev = 0.091
  CI (99.9%): [12.146, 12.208] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  QL2WyvT=lZjf0j.phttp@~+c Vzf[J!5 4ul!k *QC?/]e2{)93n02{y~ B_zW,  avgt  100  625.708 ± 5.167  ns/op
StringContains.stringContains     http  QL2WyvT=lZjf0j.phttp@~+c Vzf[J!5 4ul!k *QC?/]e2{)93n02{y~ B_zW,  avgt  100   12.177 ± 0.031  ns/op

Benchmark result is saved to http_64_0.25_12.csv
