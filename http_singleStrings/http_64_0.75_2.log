# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Za"_t?4i
0rp;z"^?xUj40DMLw<7*3rrOCgc]@N^@SElchttp];5flQ
#<@A2)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 359.775 ns/op
# Warmup Iteration   2: 367.980 ns/op
# Warmup Iteration   3: 303.535 ns/op
# Warmup Iteration   4: 291.035 ns/op
# Warmup Iteration   5: 288.157 ns/op
Iteration   1: 292.090 ns/op
Iteration   2: 288.142 ns/op
Iteration   3: 294.056 ns/op
Iteration   4: 295.750 ns/op
Iteration   5: 288.035 ns/op
Iteration   6: 298.062 ns/op
Iteration   7: 288.128 ns/op
Iteration   8: 289.378 ns/op
Iteration   9: 288.339 ns/op
Iteration  10: 289.489 ns/op
Iteration  11: 287.969 ns/op
Iteration  12: 289.569 ns/op
Iteration  13: 288.128 ns/op
Iteration  14: 289.645 ns/op
Iteration  15: 288.078 ns/op
Iteration  16: 289.332 ns/op
Iteration  17: 289.511 ns/op
Iteration  18: 287.709 ns/op
Iteration  19: 289.203 ns/op
Iteration  20: 287.999 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 347.080 ns/op
# Warmup Iteration   2: 353.751 ns/op
# Warmup Iteration   3: 278.959 ns/op
# Warmup Iteration   4: 273.314 ns/op
# Warmup Iteration   5: 270.409 ns/op
Iteration   1: 273.904 ns/op
Iteration   2: 275.038 ns/op
Iteration   3: 270.540 ns/op
Iteration   4: 276.437 ns/op
Iteration   5: 270.653 ns/op
Iteration   6: 278.388 ns/op
Iteration   7: 271.821 ns/op
Iteration   8: 270.833 ns/op
Iteration   9: 273.099 ns/op
Iteration  10: 270.456 ns/op
Iteration  11: 271.965 ns/op
Iteration  12: 270.496 ns/op
Iteration  13: 272.366 ns/op
Iteration  14: 271.973 ns/op
Iteration  15: 270.142 ns/op
Iteration  16: 272.623 ns/op
Iteration  17: 270.238 ns/op
Iteration  18: 272.056 ns/op
Iteration  19: 270.042 ns/op
Iteration  20: 272.336 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 349.726 ns/op
# Warmup Iteration   2: 353.525 ns/op
# Warmup Iteration   3: 279.274 ns/op
# Warmup Iteration   4: 272.139 ns/op
# Warmup Iteration   5: 269.511 ns/op
Iteration   1: 273.184 ns/op
Iteration   2: 274.516 ns/op
Iteration   3: 269.703 ns/op
Iteration   4: 275.811 ns/op
Iteration   5: 269.509 ns/op
Iteration   6: 277.596 ns/op
Iteration   7: 271.135 ns/op
Iteration   8: 269.905 ns/op
Iteration   9: 271.254 ns/op
Iteration  10: 269.682 ns/op
Iteration  11: 271.091 ns/op
Iteration  12: 269.583 ns/op
Iteration  13: 271.200 ns/op
Iteration  14: 271.407 ns/op
Iteration  15: 269.802 ns/op
Iteration  16: 271.374 ns/op
Iteration  17: 269.554 ns/op
Iteration  18: 272.575 ns/op
Iteration  19: 269.955 ns/op
Iteration  20: 271.469 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 351.634 ns/op
# Warmup Iteration   2: 359.938 ns/op
# Warmup Iteration   3: 280.959 ns/op
# Warmup Iteration   4: 273.095 ns/op
# Warmup Iteration   5: 270.449 ns/op
Iteration   1: 274.025 ns/op
Iteration   2: 275.098 ns/op
Iteration   3: 270.253 ns/op
Iteration   4: 276.875 ns/op
Iteration   5: 270.687 ns/op
Iteration   6: 278.441 ns/op
Iteration   7: 271.620 ns/op
Iteration   8: 270.547 ns/op
Iteration   9: 271.542 ns/op
Iteration  10: 270.141 ns/op
Iteration  11: 271.762 ns/op
Iteration  12: 270.251 ns/op
Iteration  13: 272.305 ns/op
Iteration  14: 271.459 ns/op
Iteration  15: 270.331 ns/op
Iteration  16: 271.809 ns/op
Iteration  17: 270.137 ns/op
Iteration  18: 272.553 ns/op
Iteration  19: 270.135 ns/op
Iteration  20: 274.182 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 350.005 ns/op
# Warmup Iteration   2: 359.766 ns/op
# Warmup Iteration   3: 279.578 ns/op
# Warmup Iteration   4: 272.563 ns/op
# Warmup Iteration   5: 270.108 ns/op
Iteration   1: 274.082 ns/op
Iteration   2: 275.029 ns/op
Iteration   3: 270.084 ns/op
Iteration   4: 276.083 ns/op
Iteration   5: 269.862 ns/op
Iteration   6: 279.654 ns/op
Iteration   7: 272.973 ns/op
Iteration   8: 270.056 ns/op
Iteration   9: 271.469 ns/op
Iteration  10: 269.518 ns/op
Iteration  11: 271.380 ns/op
Iteration  12: 269.639 ns/op
Iteration  13: 271.989 ns/op
Iteration  14: 271.592 ns/op
Iteration  15: 269.903 ns/op
Iteration  16: 273.769 ns/op
Iteration  17: 269.791 ns/op
Iteration  18: 272.828 ns/op
Iteration  19: 269.849 ns/op
Iteration  20: 272.017 ns/op


Result "benchmark.StringContains.regexMatches":
  275.600 ±(99.9%) 2.579 ns/op [Average]
  (min, avg, max) = (269.509, 275.600, 298.062), stdev = 7.604
  CI (99.9%): [273.022, 278.179] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Za"_t?4i
0rp;z"^?xUj40DMLw<7*3rrOCgc]@N^@SElchttp];5flQ
#<@A2)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.990 ns/op
# Warmup Iteration   2: 17.068 ns/op
# Warmup Iteration   3: 16.510 ns/op
# Warmup Iteration   4: 16.519 ns/op
# Warmup Iteration   5: 16.501 ns/op
Iteration   1: 16.488 ns/op
Iteration   2: 16.525 ns/op
Iteration   3: 16.511 ns/op
Iteration   4: 16.497 ns/op
Iteration   5: 16.504 ns/op
Iteration   6: 16.500 ns/op
Iteration   7: 16.512 ns/op
Iteration   8: 16.518 ns/op
Iteration   9: 16.506 ns/op
Iteration  10: 16.513 ns/op
Iteration  11: 16.519 ns/op
Iteration  12: 16.489 ns/op
Iteration  13: 16.514 ns/op
Iteration  14: 16.496 ns/op
Iteration  15: 16.511 ns/op
Iteration  16: 16.536 ns/op
Iteration  17: 16.515 ns/op
Iteration  18: 16.506 ns/op
Iteration  19: 16.518 ns/op
Iteration  20: 16.536 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.103 ns/op
# Warmup Iteration   2: 17.148 ns/op
# Warmup Iteration   3: 17.375 ns/op
# Warmup Iteration   4: 17.368 ns/op
# Warmup Iteration   5: 17.369 ns/op
Iteration   1: 17.406 ns/op
Iteration   2: 17.421 ns/op
Iteration   3: 17.455 ns/op
Iteration   4: 17.409 ns/op
Iteration   5: 17.395 ns/op
Iteration   6: 17.381 ns/op
Iteration   7: 17.311 ns/op
Iteration   8: 17.364 ns/op
Iteration   9: 17.362 ns/op
Iteration  10: 17.367 ns/op
Iteration  11: 17.340 ns/op
Iteration  12: 17.382 ns/op
Iteration  13: 17.347 ns/op
Iteration  14: 17.329 ns/op
Iteration  15: 17.392 ns/op
Iteration  16: 17.312 ns/op
Iteration  17: 17.371 ns/op
Iteration  18: 17.354 ns/op
Iteration  19: 17.359 ns/op
Iteration  20: 17.365 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.947 ns/op
# Warmup Iteration   2: 17.039 ns/op
# Warmup Iteration   3: 16.546 ns/op
# Warmup Iteration   4: 16.554 ns/op
# Warmup Iteration   5: 16.571 ns/op
Iteration   1: 16.563 ns/op
Iteration   2: 16.566 ns/op
Iteration   3: 16.558 ns/op
Iteration   4: 16.569 ns/op
Iteration   5: 16.570 ns/op
Iteration   6: 16.564 ns/op
Iteration   7: 16.568 ns/op
Iteration   8: 16.571 ns/op
Iteration   9: 16.571 ns/op
Iteration  10: 16.569 ns/op
Iteration  11: 16.571 ns/op
Iteration  12: 16.569 ns/op
Iteration  13: 16.563 ns/op
Iteration  14: 16.564 ns/op
Iteration  15: 16.576 ns/op
Iteration  16: 16.570 ns/op
Iteration  17: 16.560 ns/op
Iteration  18: 16.546 ns/op
Iteration  19: 16.572 ns/op
Iteration  20: 16.536 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.941 ns/op
# Warmup Iteration   2: 17.035 ns/op
# Warmup Iteration   3: 16.530 ns/op
# Warmup Iteration   4: 16.507 ns/op
# Warmup Iteration   5: 16.520 ns/op
Iteration   1: 16.521 ns/op
Iteration   2: 16.509 ns/op
Iteration   3: 16.517 ns/op
Iteration   4: 16.499 ns/op
Iteration   5: 16.545 ns/op
Iteration   6: 16.530 ns/op
Iteration   7: 16.531 ns/op
Iteration   8: 16.536 ns/op
Iteration   9: 16.530 ns/op
Iteration  10: 16.525 ns/op
Iteration  11: 16.524 ns/op
Iteration  12: 16.526 ns/op
Iteration  13: 16.500 ns/op
Iteration  14: 16.512 ns/op
Iteration  15: 16.503 ns/op
Iteration  16: 16.509 ns/op
Iteration  17: 16.504 ns/op
Iteration  18: 16.502 ns/op
Iteration  19: 16.502 ns/op
Iteration  20: 16.513 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.948 ns/op
# Warmup Iteration   2: 17.043 ns/op
# Warmup Iteration   3: 16.830 ns/op
# Warmup Iteration   4: 16.846 ns/op
# Warmup Iteration   5: 16.849 ns/op
Iteration   1: 16.874 ns/op
Iteration   2: 16.818 ns/op
Iteration   3: 16.828 ns/op
Iteration   4: 16.846 ns/op
Iteration   5: 16.826 ns/op
Iteration   6: 16.818 ns/op
Iteration   7: 16.843 ns/op
Iteration   8: 16.832 ns/op
Iteration   9: 16.846 ns/op
Iteration  10: 16.813 ns/op
Iteration  11: 16.827 ns/op
Iteration  12: 16.865 ns/op
Iteration  13: 16.862 ns/op
Iteration  14: 16.839 ns/op
Iteration  15: 16.821 ns/op
Iteration  16: 16.806 ns/op
Iteration  17: 16.832 ns/op
Iteration  18: 16.841 ns/op
Iteration  19: 16.869 ns/op
Iteration  20: 16.854 ns/op


Result "benchmark.StringContains.stringContains":
  16.760 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (16.488, 16.760, 17.455), stdev = 0.331
  CI (99.9%): [16.648, 16.872] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Za"_t?4i
0rp;z"^?xUj40DMLw<7*3rrOCgc]@N^@SElchttp];5flQ
#<@A2  avgt  100  275.600 ± 2.579  ns/op
StringContains.stringContains     http  Za"_t?4i
0rp;z"^?xUj40DMLw<7*3rrOCgc]@N^@SElchttp];5flQ
#<@A2  avgt  100   16.760 ± 0.112  ns/op

Benchmark result is saved to http_64_0.75_2.csv
