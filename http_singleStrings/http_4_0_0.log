# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 204.642 ns/op
# Warmup Iteration   2: 136.804 ns/op
# Warmup Iteration   3: 120.237 ns/op
# Warmup Iteration   4: 120.223 ns/op
# Warmup Iteration   5: 123.938 ns/op
Iteration   1: 119.370 ns/op
Iteration   2: 118.252 ns/op
Iteration   3: 118.852 ns/op
Iteration   4: 118.332 ns/op
Iteration   5: 118.266 ns/op
Iteration   6: 119.061 ns/op
Iteration   7: 118.227 ns/op
Iteration   8: 117.909 ns/op
Iteration   9: 118.104 ns/op
Iteration  10: 117.919 ns/op
Iteration  11: 117.897 ns/op
Iteration  12: 118.819 ns/op
Iteration  13: 118.508 ns/op
Iteration  14: 118.018 ns/op
Iteration  15: 118.077 ns/op
Iteration  16: 118.310 ns/op
Iteration  17: 118.049 ns/op
Iteration  18: 118.074 ns/op
Iteration  19: 118.681 ns/op
Iteration  20: 118.340 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 197.459 ns/op
# Warmup Iteration   2: 130.590 ns/op
# Warmup Iteration   3: 118.886 ns/op
# Warmup Iteration   4: 122.097 ns/op
# Warmup Iteration   5: 120.684 ns/op
Iteration   1: 117.904 ns/op
Iteration   2: 117.939 ns/op
Iteration   3: 118.639 ns/op
Iteration   4: 117.910 ns/op
Iteration   5: 117.948 ns/op
Iteration   6: 118.525 ns/op
Iteration   7: 117.921 ns/op
Iteration   8: 117.534 ns/op
Iteration   9: 117.806 ns/op
Iteration  10: 117.579 ns/op
Iteration  11: 117.638 ns/op
Iteration  12: 118.208 ns/op
Iteration  13: 117.933 ns/op
Iteration  14: 117.813 ns/op
Iteration  15: 118.283 ns/op
Iteration  16: 117.968 ns/op
Iteration  17: 117.990 ns/op
Iteration  18: 118.212 ns/op
Iteration  19: 118.641 ns/op
Iteration  20: 118.254 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 206.394 ns/op
# Warmup Iteration   2: 133.627 ns/op
# Warmup Iteration   3: 119.161 ns/op
# Warmup Iteration   4: 119.646 ns/op
# Warmup Iteration   5: 123.599 ns/op
Iteration   1: 118.112 ns/op
Iteration   2: 118.108 ns/op
Iteration   3: 118.658 ns/op
Iteration   4: 118.141 ns/op
Iteration   5: 118.143 ns/op
Iteration   6: 118.571 ns/op
Iteration   7: 118.027 ns/op
Iteration   8: 117.764 ns/op
Iteration   9: 117.994 ns/op
Iteration  10: 118.671 ns/op
Iteration  11: 117.890 ns/op
Iteration  12: 119.015 ns/op
Iteration  13: 118.173 ns/op
Iteration  14: 117.842 ns/op
Iteration  15: 118.124 ns/op
Iteration  16: 117.879 ns/op
Iteration  17: 117.918 ns/op
Iteration  18: 118.123 ns/op
Iteration  19: 118.293 ns/op
Iteration  20: 117.908 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 209.517 ns/op
# Warmup Iteration   2: 147.780 ns/op
# Warmup Iteration   3: 127.502 ns/op
# Warmup Iteration   4: 126.766 ns/op
# Warmup Iteration   5: 127.376 ns/op
Iteration   1: 129.237 ns/op
Iteration   2: 125.015 ns/op
Iteration   3: 124.960 ns/op
Iteration   4: 124.915 ns/op
Iteration   5: 125.527 ns/op
Iteration   6: 124.902 ns/op
Iteration   7: 125.008 ns/op
Iteration   8: 125.497 ns/op
Iteration   9: 125.645 ns/op
Iteration  10: 125.093 ns/op
Iteration  11: 125.017 ns/op
Iteration  12: 124.600 ns/op
Iteration  13: 124.962 ns/op
Iteration  14: 124.605 ns/op
Iteration  15: 124.677 ns/op
Iteration  16: 124.665 ns/op
Iteration  17: 125.148 ns/op
Iteration  18: 124.811 ns/op
Iteration  19: 124.692 ns/op
Iteration  20: 124.726 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 200.685 ns/op
# Warmup Iteration   2: 131.238 ns/op
# Warmup Iteration   3: 116.786 ns/op
# Warmup Iteration   4: 119.942 ns/op
# Warmup Iteration   5: 118.584 ns/op
Iteration   1: 116.051 ns/op
Iteration   2: 116.556 ns/op
Iteration   3: 115.809 ns/op
Iteration   4: 115.942 ns/op
Iteration   5: 116.627 ns/op
Iteration   6: 115.801 ns/op
Iteration   7: 115.860 ns/op
Iteration   8: 116.025 ns/op
Iteration   9: 115.559 ns/op
Iteration  10: 115.520 ns/op
Iteration  11: 115.788 ns/op
Iteration  12: 115.659 ns/op
Iteration  13: 115.463 ns/op
Iteration  14: 116.159 ns/op
Iteration  15: 115.539 ns/op
Iteration  16: 115.632 ns/op
Iteration  17: 115.922 ns/op
Iteration  18: 115.621 ns/op
Iteration  19: 116.173 ns/op
Iteration  20: 116.451 ns/op


Result "benchmark.StringContains.regexMatches":
  119.129 ±(99.9%) 1.091 ns/op [Average]
  (min, avg, max) = (115.463, 119.129, 129.237), stdev = 3.216
  CI (99.9%): [118.038, 120.220] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.087 ns/op
# Warmup Iteration   2: 10.479 ns/op
# Warmup Iteration   3: 9.892 ns/op
# Warmup Iteration   4: 9.881 ns/op
# Warmup Iteration   5: 9.876 ns/op
Iteration   1: 9.901 ns/op
Iteration   2: 9.896 ns/op
Iteration   3: 9.877 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.890 ns/op
Iteration   6: 9.899 ns/op
Iteration   7: 9.897 ns/op
Iteration   8: 9.886 ns/op
Iteration   9: 9.887 ns/op
Iteration  10: 9.897 ns/op
Iteration  11: 9.897 ns/op
Iteration  12: 9.882 ns/op
Iteration  13: 9.883 ns/op
Iteration  14: 9.890 ns/op
Iteration  15: 9.877 ns/op
Iteration  16: 9.898 ns/op
Iteration  17: 9.876 ns/op
Iteration  18: 9.885 ns/op
Iteration  19: 9.893 ns/op
Iteration  20: 9.902 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.083 ns/op
# Warmup Iteration   2: 10.459 ns/op
# Warmup Iteration   3: 9.888 ns/op
# Warmup Iteration   4: 9.894 ns/op
# Warmup Iteration   5: 9.894 ns/op
Iteration   1: 9.898 ns/op
Iteration   2: 9.877 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.889 ns/op
Iteration   6: 9.900 ns/op
Iteration   7: 9.901 ns/op
Iteration   8: 9.878 ns/op
Iteration   9: 9.885 ns/op
Iteration  10: 9.903 ns/op
Iteration  11: 9.903 ns/op
Iteration  12: 9.886 ns/op
Iteration  13: 9.894 ns/op
Iteration  14: 9.903 ns/op
Iteration  15: 9.891 ns/op
Iteration  16: 9.902 ns/op
Iteration  17: 9.882 ns/op
Iteration  18: 9.904 ns/op
Iteration  19: 9.893 ns/op
Iteration  20: 9.890 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.041 ns/op
# Warmup Iteration   2: 10.487 ns/op
# Warmup Iteration   3: 9.902 ns/op
# Warmup Iteration   4: 9.912 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.900 ns/op
Iteration   2: 9.907 ns/op
Iteration   3: 9.911 ns/op
Iteration   4: 9.900 ns/op
Iteration   5: 9.891 ns/op
Iteration   6: 9.896 ns/op
Iteration   7: 9.899 ns/op
Iteration   8: 9.887 ns/op
Iteration   9: 9.908 ns/op
Iteration  10: 9.901 ns/op
Iteration  11: 9.914 ns/op
Iteration  12: 9.908 ns/op
Iteration  13: 9.905 ns/op
Iteration  14: 9.928 ns/op
Iteration  15: 9.931 ns/op
Iteration  16: 9.916 ns/op
Iteration  17: 9.912 ns/op
Iteration  18: 9.928 ns/op
Iteration  19: 9.892 ns/op
Iteration  20: 9.925 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.065 ns/op
# Warmup Iteration   2: 10.485 ns/op
# Warmup Iteration   3: 10.032 ns/op
# Warmup Iteration   4: 10.061 ns/op
# Warmup Iteration   5: 10.074 ns/op
Iteration   1: 10.035 ns/op
Iteration   2: 10.051 ns/op
Iteration   3: 10.068 ns/op
Iteration   4: 10.070 ns/op
Iteration   5: 10.083 ns/op
Iteration   6: 10.063 ns/op
Iteration   7: 10.057 ns/op
Iteration   8: 10.036 ns/op
Iteration   9: 10.042 ns/op
Iteration  10: 10.058 ns/op
Iteration  11: 10.069 ns/op
Iteration  12: 10.045 ns/op
Iteration  13: 10.050 ns/op
Iteration  14: 10.052 ns/op
Iteration  15: 10.061 ns/op
Iteration  16: 10.062 ns/op
Iteration  17: 10.063 ns/op
Iteration  18: 10.037 ns/op
Iteration  19: 10.035 ns/op
Iteration  20: 10.082 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.556 ns/op
# Warmup Iteration   2: 10.453 ns/op
# Warmup Iteration   3: 9.877 ns/op
# Warmup Iteration   4: 9.882 ns/op
# Warmup Iteration   5: 9.895 ns/op
Iteration   1: 9.882 ns/op
Iteration   2: 9.887 ns/op
Iteration   3: 9.873 ns/op
Iteration   4: 9.905 ns/op
Iteration   5: 9.881 ns/op
Iteration   6: 9.888 ns/op
Iteration   7: 9.887 ns/op
Iteration   8: 9.883 ns/op
Iteration   9: 9.896 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.887 ns/op
Iteration  12: 9.904 ns/op
Iteration  13: 9.882 ns/op
Iteration  14: 9.901 ns/op
Iteration  15: 9.881 ns/op
Iteration  16: 9.896 ns/op
Iteration  17: 9.884 ns/op
Iteration  18: 9.889 ns/op
Iteration  19: 9.906 ns/op
Iteration  20: 9.890 ns/op


Result "benchmark.StringContains.stringContains":
  9.927 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (9.872, 9.927, 10.083), stdev = 0.066
  CI (99.9%): [9.905, 9.949] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)  (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http   http  avgt  100  119.129 ± 1.091  ns/op
StringContains.stringContains     http   http  avgt  100    9.927 ± 0.022  ns/op

Benchmark result is saved to http_4_0_0.csv
