# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = d#V!#K;]j2%/U/j5gsI_J35,"=]M+Bhttp)#d%17T&@).%=j)[s2;?]5r(nC;`D8cGj1]$P8%+T5Q`49.{a#u]u5S$_PG2~=dVF@4'W?a :UZG2_c9};/+Dnhe%)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1145.347 ns/op
# Warmup Iteration   2: 1169.179 ns/op
# Warmup Iteration   3: 1183.874 ns/op
# Warmup Iteration   4: 1183.329 ns/op
# Warmup Iteration   5: 1186.032 ns/op
Iteration   1: 1186.511 ns/op
Iteration   2: 1185.898 ns/op
Iteration   3: 1114.975 ns/op
Iteration   4: 1102.362 ns/op
Iteration   5: 1102.734 ns/op
Iteration   6: 1102.650 ns/op
Iteration   7: 1102.534 ns/op
Iteration   8: 1103.046 ns/op
Iteration   9: 1112.691 ns/op
Iteration  10: 1101.568 ns/op
Iteration  11: 1102.503 ns/op
Iteration  12: 1102.141 ns/op
Iteration  13: 1102.245 ns/op
Iteration  14: 1103.067 ns/op
Iteration  15: 1116.997 ns/op
Iteration  16: 1101.566 ns/op
Iteration  17: 1101.922 ns/op
Iteration  18: 1101.955 ns/op
Iteration  19: 1102.299 ns/op
Iteration  20: 1103.160 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1147.658 ns/op
# Warmup Iteration   2: 1160.912 ns/op
# Warmup Iteration   3: 1182.579 ns/op
# Warmup Iteration   4: 1181.394 ns/op
# Warmup Iteration   5: 1180.841 ns/op
Iteration   1: 1180.730 ns/op
Iteration   2: 1180.800 ns/op
Iteration   3: 1116.591 ns/op
Iteration   4: 1104.899 ns/op
Iteration   5: 1105.179 ns/op
Iteration   6: 1104.656 ns/op
Iteration   7: 1104.871 ns/op
Iteration   8: 1104.823 ns/op
Iteration   9: 1115.620 ns/op
Iteration  10: 1105.416 ns/op
Iteration  11: 1104.692 ns/op
Iteration  12: 1106.089 ns/op
Iteration  13: 1106.558 ns/op
Iteration  14: 1106.480 ns/op
Iteration  15: 1121.045 ns/op
Iteration  16: 1109.017 ns/op
Iteration  17: 1108.790 ns/op
Iteration  18: 1108.066 ns/op
Iteration  19: 1107.672 ns/op
Iteration  20: 1108.028 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1141.246 ns/op
# Warmup Iteration   2: 1164.458 ns/op
# Warmup Iteration   3: 1181.160 ns/op
# Warmup Iteration   4: 1180.679 ns/op
# Warmup Iteration   5: 1180.965 ns/op
Iteration   1: 1181.151 ns/op
Iteration   2: 1180.779 ns/op
Iteration   3: 1115.581 ns/op
Iteration   4: 1106.800 ns/op
Iteration   5: 1106.821 ns/op
Iteration   6: 1106.757 ns/op
Iteration   7: 1106.642 ns/op
Iteration   8: 1106.780 ns/op
Iteration   9: 1116.594 ns/op
Iteration  10: 1106.602 ns/op
Iteration  11: 1105.097 ns/op
Iteration  12: 1106.089 ns/op
Iteration  13: 1106.001 ns/op
Iteration  14: 1106.616 ns/op
Iteration  15: 1120.300 ns/op
Iteration  16: 1106.774 ns/op
Iteration  17: 1106.605 ns/op
Iteration  18: 1106.699 ns/op
Iteration  19: 1106.690 ns/op
Iteration  20: 1106.847 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1111.035 ns/op
# Warmup Iteration   2: 1097.884 ns/op
# Warmup Iteration   3: 1249.245 ns/op
# Warmup Iteration   4: 1248.567 ns/op
# Warmup Iteration   5: 1248.752 ns/op
Iteration   1: 1248.419 ns/op
Iteration   2: 1248.619 ns/op
Iteration   3: 1197.816 ns/op
Iteration   4: 1174.030 ns/op
Iteration   5: 1174.073 ns/op
Iteration   6: 1173.936 ns/op
Iteration   7: 1173.884 ns/op
Iteration   8: 1174.323 ns/op
Iteration   9: 1185.701 ns/op
Iteration  10: 1174.388 ns/op
Iteration  11: 1174.027 ns/op
Iteration  12: 1174.132 ns/op
Iteration  13: 1173.928 ns/op
Iteration  14: 1174.102 ns/op
Iteration  15: 1174.520 ns/op
Iteration  16: 1189.444 ns/op
Iteration  17: 1174.300 ns/op
Iteration  18: 1174.114 ns/op
Iteration  19: 1173.693 ns/op
Iteration  20: 1173.589 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1160.296 ns/op
# Warmup Iteration   2: 1159.662 ns/op
# Warmup Iteration   3: 1182.757 ns/op
# Warmup Iteration   4: 1182.803 ns/op
# Warmup Iteration   5: 1181.873 ns/op
Iteration   1: 1181.563 ns/op
Iteration   2: 1181.745 ns/op
Iteration   3: 1117.178 ns/op
Iteration   4: 1107.200 ns/op
Iteration   5: 1105.931 ns/op
Iteration   6: 1106.224 ns/op
Iteration   7: 1107.116 ns/op
Iteration   8: 1105.639 ns/op
Iteration   9: 1116.628 ns/op
Iteration  10: 1105.412 ns/op
Iteration  11: 1106.322 ns/op
Iteration  12: 1105.637 ns/op
Iteration  13: 1105.029 ns/op
Iteration  14: 1104.899 ns/op
Iteration  15: 1118.777 ns/op
Iteration  16: 1105.709 ns/op
Iteration  17: 1105.371 ns/op
Iteration  18: 1105.165 ns/op
Iteration  19: 1104.838 ns/op
Iteration  20: 1106.453 ns/op


Result "benchmark.StringContains.regexMatches":
  1128.589 ±(99.9%) 12.257 ns/op [Average]
  (min, avg, max) = (1101.566, 1128.589, 1248.619), stdev = 36.141
  CI (99.9%): [1116.332, 1140.847] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = d#V!#K;]j2%/U/j5gsI_J35,"=]M+Bhttp)#d%17T&@).%=j)[s2;?]5r(nC;`D8cGj1]$P8%+T5Q`49.{a#u]u5S$_PG2~=dVF@4'W?a :UZG2_c9};/+Dnhe%)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.648 ns/op
# Warmup Iteration   2: 14.693 ns/op
# Warmup Iteration   3: 14.299 ns/op
# Warmup Iteration   4: 14.272 ns/op
# Warmup Iteration   5: 14.273 ns/op
Iteration   1: 14.291 ns/op
Iteration   2: 14.307 ns/op
Iteration   3: 14.302 ns/op
Iteration   4: 14.283 ns/op
Iteration   5: 14.292 ns/op
Iteration   6: 14.301 ns/op
Iteration   7: 14.286 ns/op
Iteration   8: 14.303 ns/op
Iteration   9: 14.303 ns/op
Iteration  10: 14.304 ns/op
Iteration  11: 14.301 ns/op
Iteration  12: 14.662 ns/op
Iteration  13: 14.664 ns/op
Iteration  14: 14.665 ns/op
Iteration  15: 14.658 ns/op
Iteration  16: 14.660 ns/op
Iteration  17: 14.665 ns/op
Iteration  18: 14.659 ns/op
Iteration  19: 14.664 ns/op
Iteration  20: 14.659 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.651 ns/op
# Warmup Iteration   2: 14.710 ns/op
# Warmup Iteration   3: 14.275 ns/op
# Warmup Iteration   4: 14.294 ns/op
# Warmup Iteration   5: 14.304 ns/op
Iteration   1: 14.315 ns/op
Iteration   2: 14.322 ns/op
Iteration   3: 14.316 ns/op
Iteration   4: 14.306 ns/op
Iteration   5: 14.298 ns/op
Iteration   6: 14.321 ns/op
Iteration   7: 14.326 ns/op
Iteration   8: 14.301 ns/op
Iteration   9: 14.294 ns/op
Iteration  10: 14.309 ns/op
Iteration  11: 14.327 ns/op
Iteration  12: 14.674 ns/op
Iteration  13: 14.664 ns/op
Iteration  14: 14.669 ns/op
Iteration  15: 14.671 ns/op
Iteration  16: 14.668 ns/op
Iteration  17: 14.661 ns/op
Iteration  18: 14.660 ns/op
Iteration  19: 14.661 ns/op
Iteration  20: 14.662 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.743 ns/op
# Warmup Iteration   2: 14.753 ns/op
# Warmup Iteration   3: 14.710 ns/op
# Warmup Iteration   4: 14.683 ns/op
# Warmup Iteration   5: 14.740 ns/op
Iteration   1: 14.661 ns/op
Iteration   2: 14.651 ns/op
Iteration   3: 14.679 ns/op
Iteration   4: 14.690 ns/op
Iteration   5: 14.686 ns/op
Iteration   6: 14.686 ns/op
Iteration   7: 14.679 ns/op
Iteration   8: 14.757 ns/op
Iteration   9: 14.735 ns/op
Iteration  10: 14.728 ns/op
Iteration  11: 14.674 ns/op
Iteration  12: 14.710 ns/op
Iteration  13: 14.682 ns/op
Iteration  14: 14.670 ns/op
Iteration  15: 14.661 ns/op
Iteration  16: 14.700 ns/op
Iteration  17: 14.691 ns/op
Iteration  18: 14.737 ns/op
Iteration  19: 14.669 ns/op
Iteration  20: 14.651 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.774 ns/op
# Warmup Iteration   2: 14.787 ns/op
# Warmup Iteration   3: 14.712 ns/op
# Warmup Iteration   4: 14.696 ns/op
# Warmup Iteration   5: 14.675 ns/op
Iteration   1: 14.681 ns/op
Iteration   2: 14.681 ns/op
Iteration   3: 14.705 ns/op
Iteration   4: 14.693 ns/op
Iteration   5: 14.711 ns/op
Iteration   6: 14.721 ns/op
Iteration   7: 14.691 ns/op
Iteration   8: 14.692 ns/op
Iteration   9: 14.718 ns/op
Iteration  10: 14.699 ns/op
Iteration  11: 14.703 ns/op
Iteration  12: 14.671 ns/op
Iteration  13: 14.662 ns/op
Iteration  14: 14.673 ns/op
Iteration  15: 14.711 ns/op
Iteration  16: 14.683 ns/op
Iteration  17: 14.679 ns/op
Iteration  18: 14.659 ns/op
Iteration  19: 14.696 ns/op
Iteration  20: 14.753 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.722 ns/op
# Warmup Iteration   2: 14.634 ns/op
# Warmup Iteration   3: 14.328 ns/op
# Warmup Iteration   4: 14.321 ns/op
# Warmup Iteration   5: 14.314 ns/op
Iteration   1: 14.318 ns/op
Iteration   2: 14.305 ns/op
Iteration   3: 14.315 ns/op
Iteration   4: 14.309 ns/op
Iteration   5: 14.308 ns/op
Iteration   6: 14.317 ns/op
Iteration   7: 14.312 ns/op
Iteration   8: 14.302 ns/op
Iteration   9: 14.318 ns/op
Iteration  10: 14.301 ns/op
Iteration  11: 14.330 ns/op
Iteration  12: 14.332 ns/op
Iteration  13: 14.316 ns/op
Iteration  14: 14.325 ns/op
Iteration  15: 14.325 ns/op
Iteration  16: 14.319 ns/op
Iteration  17: 14.314 ns/op
Iteration  18: 14.339 ns/op
Iteration  19: 14.324 ns/op
Iteration  20: 14.314 ns/op


Result "benchmark.StringContains.stringContains":
  14.527 ±(99.9%) 0.063 ns/op [Average]
  (min, avg, max) = (14.283, 14.527, 14.757), stdev = 0.186
  CI (99.9%): [14.464, 14.590] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  d#V!#K;]j2%/U/j5gsI_J35,"=]M+Bhttp)#d%17T&@).%=j)[s2;?]5r(nC;`D8cGj1]$P8%+T5Q`49.{a#u]u5S$_PG2~=dVF@4'W?a :UZG2_c9};/+Dnhe%  avgt  100  1128.589 ± 12.257  ns/op
StringContains.stringContains     http  d#V!#K;]j2%/U/j5gsI_J35,"=]M+Bhttp)#d%17T&@).%=j)[s2;?]5r(nC;`D8cGj1]$P8%+T5Q`49.{a#u]u5S$_PG2~=dVF@4'W?a :UZG2_c9};/+Dnhe%  avgt  100    14.527 ±  0.063  ns/op

Benchmark result is saved to http_128_0.25_13.csv
