# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = wpQ{A	;NW?W|mRSF?&;HtBop 	9^+Q9ak	uIhB8M++*c!UCkNVvSb:ivOf~UfX,en.	:TJKCtJY%J+W6b.Ef/n((RhEdZZE*gM.x	X:	+a8$lLulW_2u'i|nk)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 903.394 ns/op
# Warmup Iteration   2: 896.870 ns/op
# Warmup Iteration   3: 891.674 ns/op
# Warmup Iteration   4: 890.121 ns/op
# Warmup Iteration   5: 889.604 ns/op
Iteration   1: 845.481 ns/op
Iteration   2: 813.323 ns/op
Iteration   3: 813.440 ns/op
Iteration   4: 813.152 ns/op
Iteration   5: 820.783 ns/op
Iteration   6: 813.154 ns/op
Iteration   7: 813.316 ns/op
Iteration   8: 813.764 ns/op
Iteration   9: 813.074 ns/op
Iteration  10: 823.095 ns/op
Iteration  11: 812.956 ns/op
Iteration  12: 812.962 ns/op
Iteration  13: 812.980 ns/op
Iteration  14: 813.009 ns/op
Iteration  15: 825.867 ns/op
Iteration  16: 812.892 ns/op
Iteration  17: 813.056 ns/op
Iteration  18: 813.264 ns/op
Iteration  19: 816.599 ns/op
Iteration  20: 827.098 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 905.963 ns/op
# Warmup Iteration   2: 892.598 ns/op
# Warmup Iteration   3: 891.821 ns/op
# Warmup Iteration   4: 892.393 ns/op
# Warmup Iteration   5: 891.911 ns/op
Iteration   1: 849.633 ns/op
Iteration   2: 817.361 ns/op
Iteration   3: 817.289 ns/op
Iteration   4: 816.927 ns/op
Iteration   5: 824.257 ns/op
Iteration   6: 817.539 ns/op
Iteration   7: 817.208 ns/op
Iteration   8: 817.538 ns/op
Iteration   9: 817.120 ns/op
Iteration  10: 827.301 ns/op
Iteration  11: 817.656 ns/op
Iteration  12: 817.562 ns/op
Iteration  13: 817.146 ns/op
Iteration  14: 817.247 ns/op
Iteration  15: 829.940 ns/op
Iteration  16: 817.676 ns/op
Iteration  17: 817.645 ns/op
Iteration  18: 817.494 ns/op
Iteration  19: 817.381 ns/op
Iteration  20: 835.189 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 896.101 ns/op
# Warmup Iteration   2: 892.317 ns/op
# Warmup Iteration   3: 887.735 ns/op
# Warmup Iteration   4: 886.987 ns/op
# Warmup Iteration   5: 886.750 ns/op
Iteration   1: 845.514 ns/op
Iteration   2: 813.253 ns/op
Iteration   3: 813.321 ns/op
Iteration   4: 813.108 ns/op
Iteration   5: 820.229 ns/op
Iteration   6: 813.198 ns/op
Iteration   7: 813.246 ns/op
Iteration   8: 813.585 ns/op
Iteration   9: 813.318 ns/op
Iteration  10: 823.441 ns/op
Iteration  11: 813.322 ns/op
Iteration  12: 813.401 ns/op
Iteration  13: 813.454 ns/op
Iteration  14: 813.548 ns/op
Iteration  15: 826.687 ns/op
Iteration  16: 813.447 ns/op
Iteration  17: 813.343 ns/op
Iteration  18: 813.528 ns/op
Iteration  19: 813.452 ns/op
Iteration  20: 830.586 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 902.061 ns/op
# Warmup Iteration   2: 892.776 ns/op
# Warmup Iteration   3: 893.875 ns/op
# Warmup Iteration   4: 894.044 ns/op
# Warmup Iteration   5: 893.749 ns/op
Iteration   1: 866.585 ns/op
Iteration   2: 820.443 ns/op
Iteration   3: 820.883 ns/op
Iteration   4: 820.671 ns/op
Iteration   5: 821.768 ns/op
Iteration   6: 828.998 ns/op
Iteration   7: 822.134 ns/op
Iteration   8: 822.106 ns/op
Iteration   9: 822.306 ns/op
Iteration  10: 834.475 ns/op
Iteration  11: 820.459 ns/op
Iteration  12: 819.996 ns/op
Iteration  13: 820.042 ns/op
Iteration  14: 820.100 ns/op
Iteration  15: 833.002 ns/op
Iteration  16: 819.192 ns/op
Iteration  17: 819.267 ns/op
Iteration  18: 819.561 ns/op
Iteration  19: 819.238 ns/op
Iteration  20: 838.009 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 908.791 ns/op
# Warmup Iteration   2: 887.186 ns/op
# Warmup Iteration   3: 884.952 ns/op
# Warmup Iteration   4: 885.093 ns/op
# Warmup Iteration   5: 884.475 ns/op
Iteration   1: 840.406 ns/op
Iteration   2: 811.168 ns/op
Iteration   3: 811.134 ns/op
Iteration   4: 811.307 ns/op
Iteration   5: 818.676 ns/op
Iteration   6: 811.037 ns/op
Iteration   7: 811.093 ns/op
Iteration   8: 811.449 ns/op
Iteration   9: 811.204 ns/op
Iteration  10: 820.685 ns/op
Iteration  11: 811.346 ns/op
Iteration  12: 811.343 ns/op
Iteration  13: 811.322 ns/op
Iteration  14: 811.348 ns/op
Iteration  15: 824.404 ns/op
Iteration  16: 811.351 ns/op
Iteration  17: 811.193 ns/op
Iteration  18: 811.143 ns/op
Iteration  19: 811.353 ns/op
Iteration  20: 827.859 ns/op


Result "benchmark.StringContains.regexMatches":
  819.274 ±(99.9%) 3.205 ns/op [Average]
  (min, avg, max) = (811.037, 819.274, 866.585), stdev = 9.451
  CI (99.9%): [816.069, 822.479] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = wpQ{A	;NW?W|mRSF?&;HtBop 	9^+Q9ak	uIhB8M++*c!UCkNVvSb:ivOf~UfX,en.	:TJKCtJY%J+W6b.Ef/n((RhEdZZE*gM.x	X:	+a8$lLulW_2u'i|nk)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.472 ns/op
# Warmup Iteration   2: 24.623 ns/op
# Warmup Iteration   3: 24.575 ns/op
# Warmup Iteration   4: 24.574 ns/op
# Warmup Iteration   5: 24.581 ns/op
Iteration   1: 24.567 ns/op
Iteration   2: 24.575 ns/op
Iteration   3: 24.567 ns/op
Iteration   4: 24.576 ns/op
Iteration   5: 24.568 ns/op
Iteration   6: 24.588 ns/op
Iteration   7: 24.564 ns/op
Iteration   8: 24.567 ns/op
Iteration   9: 24.562 ns/op
Iteration  10: 24.564 ns/op
Iteration  11: 24.579 ns/op
Iteration  12: 24.593 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.571 ns/op
Iteration  15: 24.569 ns/op
Iteration  16: 24.565 ns/op
Iteration  17: 24.564 ns/op
Iteration  18: 24.603 ns/op
Iteration  19: 24.566 ns/op
Iteration  20: 24.593 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.461 ns/op
# Warmup Iteration   2: 24.625 ns/op
# Warmup Iteration   3: 24.567 ns/op
# Warmup Iteration   4: 24.565 ns/op
# Warmup Iteration   5: 24.571 ns/op
Iteration   1: 24.562 ns/op
Iteration   2: 24.581 ns/op
Iteration   3: 24.570 ns/op
Iteration   4: 24.567 ns/op
Iteration   5: 24.620 ns/op
Iteration   6: 24.576 ns/op
Iteration   7: 24.568 ns/op
Iteration   8: 24.567 ns/op
Iteration   9: 24.597 ns/op
Iteration  10: 24.598 ns/op
Iteration  11: 24.563 ns/op
Iteration  12: 24.573 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.569 ns/op
Iteration  15: 24.569 ns/op
Iteration  16: 24.564 ns/op
Iteration  17: 24.565 ns/op
Iteration  18: 24.565 ns/op
Iteration  19: 24.566 ns/op
Iteration  20: 24.574 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.485 ns/op
# Warmup Iteration   2: 24.624 ns/op
# Warmup Iteration   3: 24.603 ns/op
# Warmup Iteration   4: 24.602 ns/op
# Warmup Iteration   5: 24.607 ns/op
Iteration   1: 24.640 ns/op
Iteration   2: 24.624 ns/op
Iteration   3: 24.602 ns/op
Iteration   4: 24.596 ns/op
Iteration   5: 24.580 ns/op
Iteration   6: 24.581 ns/op
Iteration   7: 24.580 ns/op
Iteration   8: 24.594 ns/op
Iteration   9: 24.598 ns/op
Iteration  10: 24.570 ns/op
Iteration  11: 24.585 ns/op
Iteration  12: 24.570 ns/op
Iteration  13: 24.571 ns/op
Iteration  14: 24.573 ns/op
Iteration  15: 24.567 ns/op
Iteration  16: 24.593 ns/op
Iteration  17: 24.566 ns/op
Iteration  18: 24.568 ns/op
Iteration  19: 24.577 ns/op
Iteration  20: 24.568 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.287 ns/op
# Warmup Iteration   2: 24.645 ns/op
# Warmup Iteration   3: 24.577 ns/op
# Warmup Iteration   4: 24.582 ns/op
# Warmup Iteration   5: 24.604 ns/op
Iteration   1: 24.584 ns/op
Iteration   2: 24.581 ns/op
Iteration   3: 24.577 ns/op
Iteration   4: 24.587 ns/op
Iteration   5: 24.588 ns/op
Iteration   6: 24.582 ns/op
Iteration   7: 24.579 ns/op
Iteration   8: 24.592 ns/op
Iteration   9: 24.565 ns/op
Iteration  10: 24.576 ns/op
Iteration  11: 24.579 ns/op
Iteration  12: 24.564 ns/op
Iteration  13: 24.586 ns/op
Iteration  14: 24.567 ns/op
Iteration  15: 24.579 ns/op
Iteration  16: 24.594 ns/op
Iteration  17: 24.569 ns/op
Iteration  18: 24.565 ns/op
Iteration  19: 24.576 ns/op
Iteration  20: 24.585 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.527 ns/op
# Warmup Iteration   2: 24.654 ns/op
# Warmup Iteration   3: 24.572 ns/op
# Warmup Iteration   4: 24.571 ns/op
# Warmup Iteration   5: 24.573 ns/op
Iteration   1: 24.564 ns/op
Iteration   2: 24.564 ns/op
Iteration   3: 24.582 ns/op
Iteration   4: 24.583 ns/op
Iteration   5: 24.592 ns/op
Iteration   6: 24.575 ns/op
Iteration   7: 24.565 ns/op
Iteration   8: 24.581 ns/op
Iteration   9: 24.577 ns/op
Iteration  10: 24.609 ns/op
Iteration  11: 24.570 ns/op
Iteration  12: 24.569 ns/op
Iteration  13: 24.568 ns/op
Iteration  14: 24.581 ns/op
Iteration  15: 24.569 ns/op
Iteration  16: 24.599 ns/op
Iteration  17: 24.572 ns/op
Iteration  18: 24.578 ns/op
Iteration  19: 24.566 ns/op
Iteration  20: 24.578 ns/op


Result "benchmark.StringContains.stringContains":
  24.578 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (24.562, 24.578, 24.640), stdev = 0.014
  CI (99.9%): [24.573, 24.583] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  wpQ{A	;NW?W|mRSF?&;HtBop 	9^+Q9ak	uIhB8M++*c!UCkNVvSb:ivOf~UfX,en.	:TJKCtJY%J+W6b.Ef/n((RhEdZZE*gM.x	X:	+a8$lLulW_2u'i|nk  avgt  100  819.274 ± 3.205  ns/op
StringContains.stringContains     http  wpQ{A	;NW?W|mRSF?&;HtBop 	9^+Q9ak	uIhB8M++*c!UCkNVvSb:ivOf~UfX,en.	:TJKCtJY%J+W6b.Ef/n((RhEdZZE*gM.x	X:	+a8$lLulW_2u'i|nk  avgt  100   24.578 ± 0.005  ns/op

Benchmark result is saved to http_128_1_6.csv
