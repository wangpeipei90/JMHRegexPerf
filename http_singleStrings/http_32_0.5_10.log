# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = [q5iVo5|q8I]YUi(http[':$~DdgJq,)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 354.527 ns/op
# Warmup Iteration   2: 366.216 ns/op
# Warmup Iteration   3: 300.989 ns/op
# Warmup Iteration   4: 290.591 ns/op
# Warmup Iteration   5: 287.494 ns/op
Iteration   1: 291.266 ns/op
Iteration   2: 287.142 ns/op
Iteration   3: 292.505 ns/op
Iteration   4: 294.308 ns/op
Iteration   5: 287.327 ns/op
Iteration   6: 297.072 ns/op
Iteration   7: 287.582 ns/op
Iteration   8: 289.052 ns/op
Iteration   9: 287.180 ns/op
Iteration  10: 288.907 ns/op
Iteration  11: 287.343 ns/op
Iteration  12: 288.869 ns/op
Iteration  13: 287.328 ns/op
Iteration  14: 288.865 ns/op
Iteration  15: 287.422 ns/op
Iteration  16: 288.355 ns/op
Iteration  17: 288.711 ns/op
Iteration  18: 287.411 ns/op
Iteration  19: 288.798 ns/op
Iteration  20: 287.452 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 346.944 ns/op
# Warmup Iteration   2: 355.033 ns/op
# Warmup Iteration   3: 279.169 ns/op
# Warmup Iteration   4: 273.525 ns/op
# Warmup Iteration   5: 271.085 ns/op
Iteration   1: 274.241 ns/op
Iteration   2: 275.780 ns/op
Iteration   3: 270.885 ns/op
Iteration   4: 276.747 ns/op
Iteration   5: 270.992 ns/op
Iteration   6: 278.302 ns/op
Iteration   7: 272.850 ns/op
Iteration   8: 270.491 ns/op
Iteration   9: 272.401 ns/op
Iteration  10: 270.969 ns/op
Iteration  11: 273.405 ns/op
Iteration  12: 270.895 ns/op
Iteration  13: 271.937 ns/op
Iteration  14: 272.188 ns/op
Iteration  15: 270.805 ns/op
Iteration  16: 272.825 ns/op
Iteration  17: 270.861 ns/op
Iteration  18: 273.513 ns/op
Iteration  19: 270.881 ns/op
Iteration  20: 272.173 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 344.495 ns/op
# Warmup Iteration   2: 350.030 ns/op
# Warmup Iteration   3: 269.199 ns/op
# Warmup Iteration   4: 264.022 ns/op
# Warmup Iteration   5: 261.595 ns/op
Iteration   1: 265.320 ns/op
Iteration   2: 266.182 ns/op
Iteration   3: 261.534 ns/op
Iteration   4: 267.193 ns/op
Iteration   5: 268.752 ns/op
Iteration   6: 261.337 ns/op
Iteration   7: 263.149 ns/op
Iteration   8: 261.247 ns/op
Iteration   9: 263.273 ns/op
Iteration  10: 262.635 ns/op
Iteration  11: 261.074 ns/op
Iteration  12: 262.662 ns/op
Iteration  13: 261.073 ns/op
Iteration  14: 262.302 ns/op
Iteration  15: 262.480 ns/op
Iteration  16: 261.022 ns/op
Iteration  17: 262.567 ns/op
Iteration  18: 260.974 ns/op
Iteration  19: 262.630 ns/op
Iteration  20: 261.156 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 353.067 ns/op
# Warmup Iteration   2: 352.249 ns/op
# Warmup Iteration   3: 285.964 ns/op
# Warmup Iteration   4: 281.212 ns/op
# Warmup Iteration   5: 276.215 ns/op
Iteration   1: 280.018 ns/op
Iteration   2: 281.220 ns/op
Iteration   3: 275.922 ns/op
Iteration   4: 282.471 ns/op
Iteration   5: 276.270 ns/op
Iteration   6: 284.286 ns/op
Iteration   7: 275.750 ns/op
Iteration   8: 277.509 ns/op
Iteration   9: 277.705 ns/op
Iteration  10: 275.751 ns/op
Iteration  11: 277.086 ns/op
Iteration  12: 275.526 ns/op
Iteration  13: 277.469 ns/op
Iteration  14: 276.000 ns/op
Iteration  15: 279.564 ns/op
Iteration  16: 275.905 ns/op
Iteration  17: 278.218 ns/op
Iteration  18: 277.381 ns/op
Iteration  19: 276.012 ns/op
Iteration  20: 277.954 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 354.994 ns/op
# Warmup Iteration   2: 348.344 ns/op
# Warmup Iteration   3: 282.348 ns/op
# Warmup Iteration   4: 276.261 ns/op
# Warmup Iteration   5: 273.604 ns/op
Iteration   1: 277.032 ns/op
Iteration   2: 278.218 ns/op
Iteration   3: 273.352 ns/op
Iteration   4: 279.606 ns/op
Iteration   5: 273.979 ns/op
Iteration   6: 282.702 ns/op
Iteration   7: 273.672 ns/op
Iteration   8: 275.022 ns/op
Iteration   9: 274.656 ns/op
Iteration  10: 273.498 ns/op
Iteration  11: 274.946 ns/op
Iteration  12: 273.622 ns/op
Iteration  13: 275.033 ns/op
Iteration  14: 273.670 ns/op
Iteration  15: 276.377 ns/op
Iteration  16: 275.350 ns/op
Iteration  17: 273.560 ns/op
Iteration  18: 276.806 ns/op
Iteration  19: 273.608 ns/op
Iteration  20: 275.303 ns/op


Result "benchmark.StringContains.regexMatches":
  275.626 ±(99.9%) 2.992 ns/op [Average]
  (min, avg, max) = (260.974, 275.626, 297.072), stdev = 8.822
  CI (99.9%): [272.634, 278.618] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = [q5iVo5|q8I]YUi(http[':$~DdgJq,)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.314 ns/op
# Warmup Iteration   2: 12.681 ns/op
# Warmup Iteration   3: 12.127 ns/op
# Warmup Iteration   4: 12.148 ns/op
# Warmup Iteration   5: 12.127 ns/op
Iteration   1: 12.150 ns/op
Iteration   2: 12.153 ns/op
Iteration   3: 12.130 ns/op
Iteration   4: 12.135 ns/op
Iteration   5: 12.143 ns/op
Iteration   6: 12.135 ns/op
Iteration   7: 12.142 ns/op
Iteration   8: 12.146 ns/op
Iteration   9: 12.145 ns/op
Iteration  10: 12.133 ns/op
Iteration  11: 12.154 ns/op
Iteration  12: 12.839 ns/op
Iteration  13: 12.840 ns/op
Iteration  14: 12.839 ns/op
Iteration  15: 12.840 ns/op
Iteration  16: 12.841 ns/op
Iteration  17: 12.839 ns/op
Iteration  18: 12.839 ns/op
Iteration  19: 12.839 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.297 ns/op
# Warmup Iteration   2: 12.710 ns/op
# Warmup Iteration   3: 12.122 ns/op
# Warmup Iteration   4: 12.127 ns/op
# Warmup Iteration   5: 12.140 ns/op
Iteration   1: 12.115 ns/op
Iteration   2: 12.122 ns/op
Iteration   3: 12.144 ns/op
Iteration   4: 12.158 ns/op
Iteration   5: 12.112 ns/op
Iteration   6: 12.151 ns/op
Iteration   7: 12.129 ns/op
Iteration   8: 12.136 ns/op
Iteration   9: 12.127 ns/op
Iteration  10: 12.129 ns/op
Iteration  11: 12.110 ns/op
Iteration  12: 12.121 ns/op
Iteration  13: 12.128 ns/op
Iteration  14: 12.112 ns/op
Iteration  15: 12.147 ns/op
Iteration  16: 12.132 ns/op
Iteration  17: 12.120 ns/op
Iteration  18: 12.130 ns/op
Iteration  19: 12.132 ns/op
Iteration  20: 12.128 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.302 ns/op
# Warmup Iteration   2: 12.553 ns/op
# Warmup Iteration   3: 12.148 ns/op
# Warmup Iteration   4: 12.152 ns/op
# Warmup Iteration   5: 12.144 ns/op
Iteration   1: 12.143 ns/op
Iteration   2: 12.149 ns/op
Iteration   3: 12.153 ns/op
Iteration   4: 12.143 ns/op
Iteration   5: 12.148 ns/op
Iteration   6: 12.137 ns/op
Iteration   7: 12.145 ns/op
Iteration   8: 12.139 ns/op
Iteration   9: 12.149 ns/op
Iteration  10: 12.137 ns/op
Iteration  11: 12.137 ns/op
Iteration  12: 12.149 ns/op
Iteration  13: 12.160 ns/op
Iteration  14: 12.145 ns/op
Iteration  15: 12.155 ns/op
Iteration  16: 12.149 ns/op
Iteration  17: 12.154 ns/op
Iteration  18: 12.142 ns/op
Iteration  19: 12.140 ns/op
Iteration  20: 12.150 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.985 ns/op
# Warmup Iteration   2: 12.523 ns/op
# Warmup Iteration   3: 12.353 ns/op
# Warmup Iteration   4: 12.333 ns/op
# Warmup Iteration   5: 12.330 ns/op
Iteration   1: 12.321 ns/op
Iteration   2: 12.329 ns/op
Iteration   3: 12.315 ns/op
Iteration   4: 12.319 ns/op
Iteration   5: 12.307 ns/op
Iteration   6: 12.349 ns/op
Iteration   7: 12.304 ns/op
Iteration   8: 12.313 ns/op
Iteration   9: 12.282 ns/op
Iteration  10: 12.314 ns/op
Iteration  11: 12.332 ns/op
Iteration  12: 12.312 ns/op
Iteration  13: 12.300 ns/op
Iteration  14: 12.320 ns/op
Iteration  15: 12.312 ns/op
Iteration  16: 12.281 ns/op
Iteration  17: 12.301 ns/op
Iteration  18: 12.312 ns/op
Iteration  19: 12.308 ns/op
Iteration  20: 12.322 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.318 ns/op
# Warmup Iteration   2: 12.501 ns/op
# Warmup Iteration   3: 12.288 ns/op
# Warmup Iteration   4: 12.295 ns/op
# Warmup Iteration   5: 12.290 ns/op
Iteration   1: 12.279 ns/op
Iteration   2: 12.310 ns/op
Iteration   3: 12.304 ns/op
Iteration   4: 12.283 ns/op
Iteration   5: 12.314 ns/op
Iteration   6: 12.289 ns/op
Iteration   7: 12.313 ns/op
Iteration   8: 12.298 ns/op
Iteration   9: 12.285 ns/op
Iteration  10: 12.309 ns/op
Iteration  11: 12.276 ns/op
Iteration  12: 12.275 ns/op
Iteration  13: 12.280 ns/op
Iteration  14: 12.262 ns/op
Iteration  15: 12.277 ns/op
Iteration  16: 12.266 ns/op
Iteration  17: 12.293 ns/op
Iteration  18: 12.289 ns/op
Iteration  19: 12.294 ns/op
Iteration  20: 12.278 ns/op


Result "benchmark.StringContains.stringContains":
  12.267 ±(99.9%) 0.067 ns/op [Average]
  (min, avg, max) = (12.110, 12.267, 12.841), stdev = 0.197
  CI (99.9%): [12.200, 12.334] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  [q5iVo5|q8I]YUi(http[':$~DdgJq,  avgt  100  275.626 ± 2.992  ns/op
StringContains.stringContains     http  [q5iVo5|q8I]YUi(http[':$~DdgJq,  avgt  100   12.267 ± 0.067  ns/op

Benchmark result is saved to http_32_0.5_10.csv
