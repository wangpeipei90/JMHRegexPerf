# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ~|p{fe2Hs9!9oP@1http*iUzj7d3X!@)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 351.386 ns/op
# Warmup Iteration   2: 358.415 ns/op
# Warmup Iteration   3: 280.451 ns/op
# Warmup Iteration   4: 272.464 ns/op
# Warmup Iteration   5: 269.814 ns/op
Iteration   1: 273.051 ns/op
Iteration   2: 274.727 ns/op
Iteration   3: 270.104 ns/op
Iteration   4: 276.317 ns/op
Iteration   5: 269.933 ns/op
Iteration   6: 278.091 ns/op
Iteration   7: 271.241 ns/op
Iteration   8: 270.094 ns/op
Iteration   9: 271.323 ns/op
Iteration  10: 270.529 ns/op
Iteration  11: 271.568 ns/op
Iteration  12: 269.827 ns/op
Iteration  13: 271.089 ns/op
Iteration  14: 271.439 ns/op
Iteration  15: 270.289 ns/op
Iteration  16: 271.357 ns/op
Iteration  17: 269.900 ns/op
Iteration  18: 271.190 ns/op
Iteration  19: 269.956 ns/op
Iteration  20: 271.097 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 352.496 ns/op
# Warmup Iteration   2: 354.160 ns/op
# Warmup Iteration   3: 287.276 ns/op
# Warmup Iteration   4: 280.215 ns/op
# Warmup Iteration   5: 277.891 ns/op
Iteration   1: 281.096 ns/op
Iteration   2: 282.280 ns/op
Iteration   3: 277.721 ns/op
Iteration   4: 283.700 ns/op
Iteration   5: 277.330 ns/op
Iteration   6: 285.238 ns/op
Iteration   7: 277.819 ns/op
Iteration   8: 278.763 ns/op
Iteration   9: 277.707 ns/op
Iteration  10: 278.829 ns/op
Iteration  11: 278.984 ns/op
Iteration  12: 277.647 ns/op
Iteration  13: 278.965 ns/op
Iteration  14: 277.729 ns/op
Iteration  15: 278.672 ns/op
Iteration  16: 277.724 ns/op
Iteration  17: 281.699 ns/op
Iteration  18: 279.399 ns/op
Iteration  19: 277.440 ns/op
Iteration  20: 279.181 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 352.932 ns/op
# Warmup Iteration   2: 353.872 ns/op
# Warmup Iteration   3: 288.334 ns/op
# Warmup Iteration   4: 279.147 ns/op
# Warmup Iteration   5: 276.443 ns/op
Iteration   1: 280.050 ns/op
Iteration   2: 281.044 ns/op
Iteration   3: 276.377 ns/op
Iteration   4: 282.823 ns/op
Iteration   5: 276.180 ns/op
Iteration   6: 284.492 ns/op
Iteration   7: 276.352 ns/op
Iteration   8: 277.214 ns/op
Iteration   9: 276.933 ns/op
Iteration  10: 276.108 ns/op
Iteration  11: 277.375 ns/op
Iteration  12: 276.043 ns/op
Iteration  13: 277.473 ns/op
Iteration  14: 275.994 ns/op
Iteration  15: 277.232 ns/op
Iteration  16: 276.241 ns/op
Iteration  17: 278.001 ns/op
Iteration  18: 277.482 ns/op
Iteration  19: 276.065 ns/op
Iteration  20: 278.048 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 350.985 ns/op
# Warmup Iteration   2: 352.496 ns/op
# Warmup Iteration   3: 285.971 ns/op
# Warmup Iteration   4: 279.532 ns/op
# Warmup Iteration   5: 276.849 ns/op
Iteration   1: 281.117 ns/op
Iteration   2: 281.620 ns/op
Iteration   3: 276.736 ns/op
Iteration   4: 282.744 ns/op
Iteration   5: 276.361 ns/op
Iteration   6: 284.229 ns/op
Iteration   7: 276.625 ns/op
Iteration   8: 277.873 ns/op
Iteration   9: 277.620 ns/op
Iteration  10: 276.614 ns/op
Iteration  11: 277.931 ns/op
Iteration  12: 276.263 ns/op
Iteration  13: 277.492 ns/op
Iteration  14: 276.629 ns/op
Iteration  15: 278.146 ns/op
Iteration  16: 276.529 ns/op
Iteration  17: 278.111 ns/op
Iteration  18: 278.236 ns/op
Iteration  19: 276.694 ns/op
Iteration  20: 278.536 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.342 ns/op
# Warmup Iteration   2: 354.409 ns/op
# Warmup Iteration   3: 284.667 ns/op
# Warmup Iteration   4: 278.616 ns/op
# Warmup Iteration   5: 276.620 ns/op
Iteration   1: 280.092 ns/op
Iteration   2: 281.080 ns/op
Iteration   3: 276.566 ns/op
Iteration   4: 282.579 ns/op
Iteration   5: 276.569 ns/op
Iteration   6: 285.374 ns/op
Iteration   7: 276.682 ns/op
Iteration   8: 277.933 ns/op
Iteration   9: 277.929 ns/op
Iteration  10: 276.433 ns/op
Iteration  11: 278.201 ns/op
Iteration  12: 275.882 ns/op
Iteration  13: 277.499 ns/op
Iteration  14: 276.262 ns/op
Iteration  15: 278.658 ns/op
Iteration  16: 276.434 ns/op
Iteration  17: 277.107 ns/op
Iteration  18: 277.782 ns/op
Iteration  19: 275.809 ns/op
Iteration  20: 277.480 ns/op


Result "benchmark.StringContains.regexMatches":
  277.070 ±(99.9%) 1.217 ns/op [Average]
  (min, avg, max) = (269.827, 277.070, 285.374), stdev = 3.588
  CI (99.9%): [275.854, 278.287] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ~|p{fe2Hs9!9oP@1http*iUzj7d3X!@)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.355 ns/op
# Warmup Iteration   2: 12.513 ns/op
# Warmup Iteration   3: 12.345 ns/op
# Warmup Iteration   4: 12.379 ns/op
# Warmup Iteration   5: 12.393 ns/op
Iteration   1: 12.374 ns/op
Iteration   2: 12.370 ns/op
Iteration   3: 12.360 ns/op
Iteration   4: 12.355 ns/op
Iteration   5: 12.380 ns/op
Iteration   6: 12.371 ns/op
Iteration   7: 12.352 ns/op
Iteration   8: 12.437 ns/op
Iteration   9: 12.354 ns/op
Iteration  10: 12.380 ns/op
Iteration  11: 12.369 ns/op
Iteration  12: 12.912 ns/op
Iteration  13: 12.904 ns/op
Iteration  14: 12.899 ns/op
Iteration  15: 12.908 ns/op
Iteration  16: 12.909 ns/op
Iteration  17: 12.907 ns/op
Iteration  18: 12.898 ns/op
Iteration  19: 12.908 ns/op
Iteration  20: 12.927 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.999 ns/op
# Warmup Iteration   2: 12.592 ns/op
# Warmup Iteration   3: 12.249 ns/op
# Warmup Iteration   4: 12.248 ns/op
# Warmup Iteration   5: 12.244 ns/op
Iteration   1: 12.255 ns/op
Iteration   2: 12.258 ns/op
Iteration   3: 12.255 ns/op
Iteration   4: 12.249 ns/op
Iteration   5: 12.252 ns/op
Iteration   6: 12.243 ns/op
Iteration   7: 12.254 ns/op
Iteration   8: 12.266 ns/op
Iteration   9: 12.251 ns/op
Iteration  10: 12.253 ns/op
Iteration  11: 12.244 ns/op
Iteration  12: 12.251 ns/op
Iteration  13: 12.247 ns/op
Iteration  14: 12.250 ns/op
Iteration  15: 12.246 ns/op
Iteration  16: 12.250 ns/op
Iteration  17: 12.240 ns/op
Iteration  18: 12.272 ns/op
Iteration  19: 12.255 ns/op
Iteration  20: 12.267 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.979 ns/op
# Warmup Iteration   2: 12.568 ns/op
# Warmup Iteration   3: 12.137 ns/op
# Warmup Iteration   4: 12.155 ns/op
# Warmup Iteration   5: 12.144 ns/op
Iteration   1: 12.149 ns/op
Iteration   2: 12.140 ns/op
Iteration   3: 12.145 ns/op
Iteration   4: 12.146 ns/op
Iteration   5: 12.144 ns/op
Iteration   6: 12.137 ns/op
Iteration   7: 12.136 ns/op
Iteration   8: 12.144 ns/op
Iteration   9: 12.139 ns/op
Iteration  10: 12.130 ns/op
Iteration  11: 12.132 ns/op
Iteration  12: 12.129 ns/op
Iteration  13: 12.135 ns/op
Iteration  14: 12.110 ns/op
Iteration  15: 12.129 ns/op
Iteration  16: 12.154 ns/op
Iteration  17: 12.135 ns/op
Iteration  18: 12.131 ns/op
Iteration  19: 12.138 ns/op
Iteration  20: 12.144 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.978 ns/op
# Warmup Iteration   2: 12.505 ns/op
# Warmup Iteration   3: 12.326 ns/op
# Warmup Iteration   4: 12.333 ns/op
# Warmup Iteration   5: 12.338 ns/op
Iteration   1: 12.341 ns/op
Iteration   2: 12.328 ns/op
Iteration   3: 12.287 ns/op
Iteration   4: 12.328 ns/op
Iteration   5: 12.331 ns/op
Iteration   6: 12.284 ns/op
Iteration   7: 12.298 ns/op
Iteration   8: 12.323 ns/op
Iteration   9: 12.313 ns/op
Iteration  10: 12.406 ns/op
Iteration  11: 12.451 ns/op
Iteration  12: 12.468 ns/op
Iteration  13: 12.470 ns/op
Iteration  14: 12.416 ns/op
Iteration  15: 12.418 ns/op
Iteration  16: 12.441 ns/op
Iteration  17: 12.430 ns/op
Iteration  18: 12.454 ns/op
Iteration  19: 12.473 ns/op
Iteration  20: 12.437 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.319 ns/op
# Warmup Iteration   2: 12.506 ns/op
# Warmup Iteration   3: 12.325 ns/op
# Warmup Iteration   4: 12.315 ns/op
# Warmup Iteration   5: 12.306 ns/op
Iteration   1: 12.305 ns/op
Iteration   2: 12.302 ns/op
Iteration   3: 12.286 ns/op
Iteration   4: 12.318 ns/op
Iteration   5: 12.297 ns/op
Iteration   6: 12.315 ns/op
Iteration   7: 12.301 ns/op
Iteration   8: 12.318 ns/op
Iteration   9: 12.327 ns/op
Iteration  10: 12.299 ns/op
Iteration  11: 12.322 ns/op
Iteration  12: 12.867 ns/op
Iteration  13: 12.871 ns/op
Iteration  14: 12.869 ns/op
Iteration  15: 12.868 ns/op
Iteration  16: 12.866 ns/op
Iteration  17: 12.866 ns/op
Iteration  18: 12.869 ns/op
Iteration  19: 12.865 ns/op
Iteration  20: 12.869 ns/op


Result "benchmark.StringContains.stringContains":
  12.390 ±(99.9%) 0.086 ns/op [Average]
  (min, avg, max) = (12.110, 12.390, 12.927), stdev = 0.252
  CI (99.9%): [12.304, 12.475] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ~|p{fe2Hs9!9oP@1http*iUzj7d3X!@  avgt  100  277.070 ± 1.217  ns/op
StringContains.stringContains     http  ~|p{fe2Hs9!9oP@1http*iUzj7d3X!@  avgt  100   12.390 ± 0.086  ns/op

Benchmark result is saved to http_32_0.5_9.csv
