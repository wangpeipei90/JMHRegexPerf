# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = &*T!T#[)http@1oR(\VN	]7 @MYxG==)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 441.642 ns/op
# Warmup Iteration   2: 451.303 ns/op
# Warmup Iteration   3: 419.954 ns/op
# Warmup Iteration   4: 359.735 ns/op
# Warmup Iteration   5: 363.028 ns/op
Iteration   1: 359.634 ns/op
Iteration   2: 364.585 ns/op
Iteration   3: 359.835 ns/op
Iteration   4: 366.634 ns/op
Iteration   5: 360.005 ns/op
Iteration   6: 359.892 ns/op
Iteration   7: 368.650 ns/op
Iteration   8: 359.665 ns/op
Iteration   9: 371.106 ns/op
Iteration  10: 360.644 ns/op
Iteration  11: 363.739 ns/op
Iteration  12: 360.262 ns/op
Iteration  13: 359.958 ns/op
Iteration  14: 361.488 ns/op
Iteration  15: 360.166 ns/op
Iteration  16: 361.271 ns/op
Iteration  17: 360.005 ns/op
Iteration  18: 361.551 ns/op
Iteration  19: 359.900 ns/op
Iteration  20: 361.481 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 430.922 ns/op
# Warmup Iteration   2: 436.289 ns/op
# Warmup Iteration   3: 412.874 ns/op
# Warmup Iteration   4: 360.030 ns/op
# Warmup Iteration   5: 363.636 ns/op
Iteration   1: 360.105 ns/op
Iteration   2: 364.943 ns/op
Iteration   3: 360.091 ns/op
Iteration   4: 366.429 ns/op
Iteration   5: 360.087 ns/op
Iteration   6: 360.257 ns/op
Iteration   7: 368.102 ns/op
Iteration   8: 360.113 ns/op
Iteration   9: 370.392 ns/op
Iteration  10: 360.026 ns/op
Iteration  11: 361.903 ns/op
Iteration  12: 359.955 ns/op
Iteration  13: 360.361 ns/op
Iteration  14: 361.899 ns/op
Iteration  15: 360.564 ns/op
Iteration  16: 363.660 ns/op
Iteration  17: 360.260 ns/op
Iteration  18: 362.682 ns/op
Iteration  19: 359.657 ns/op
Iteration  20: 360.179 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 431.134 ns/op
# Warmup Iteration   2: 436.734 ns/op
# Warmup Iteration   3: 407.085 ns/op
# Warmup Iteration   4: 359.854 ns/op
# Warmup Iteration   5: 363.242 ns/op
Iteration   1: 359.952 ns/op
Iteration   2: 364.075 ns/op
Iteration   3: 359.498 ns/op
Iteration   4: 365.550 ns/op
Iteration   5: 360.169 ns/op
Iteration   6: 362.003 ns/op
Iteration   7: 365.868 ns/op
Iteration   8: 360.571 ns/op
Iteration   9: 370.004 ns/op
Iteration  10: 359.986 ns/op
Iteration  11: 361.423 ns/op
Iteration  12: 360.008 ns/op
Iteration  13: 359.926 ns/op
Iteration  14: 363.677 ns/op
Iteration  15: 360.135 ns/op
Iteration  16: 361.640 ns/op
Iteration  17: 359.972 ns/op
Iteration  18: 361.635 ns/op
Iteration  19: 359.923 ns/op
Iteration  20: 362.725 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 424.748 ns/op
# Warmup Iteration   2: 434.361 ns/op
# Warmup Iteration   3: 405.160 ns/op
# Warmup Iteration   4: 360.984 ns/op
# Warmup Iteration   5: 364.453 ns/op
Iteration   1: 360.776 ns/op
Iteration   2: 365.413 ns/op
Iteration   3: 361.072 ns/op
Iteration   4: 367.017 ns/op
Iteration   5: 361.124 ns/op
Iteration   6: 363.162 ns/op
Iteration   7: 366.971 ns/op
Iteration   8: 360.997 ns/op
Iteration   9: 370.421 ns/op
Iteration  10: 360.078 ns/op
Iteration  11: 362.736 ns/op
Iteration  12: 360.609 ns/op
Iteration  13: 360.847 ns/op
Iteration  14: 362.585 ns/op
Iteration  15: 361.007 ns/op
Iteration  16: 364.892 ns/op
Iteration  17: 360.630 ns/op
Iteration  18: 362.634 ns/op
Iteration  19: 360.528 ns/op
Iteration  20: 360.828 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 426.227 ns/op
# Warmup Iteration   2: 433.106 ns/op
# Warmup Iteration   3: 398.363 ns/op
# Warmup Iteration   4: 354.005 ns/op
# Warmup Iteration   5: 357.141 ns/op
Iteration   1: 353.917 ns/op
Iteration   2: 358.330 ns/op
Iteration   3: 354.069 ns/op
Iteration   4: 359.860 ns/op
Iteration   5: 354.009 ns/op
Iteration   6: 361.658 ns/op
Iteration   7: 353.636 ns/op
Iteration   8: 353.984 ns/op
Iteration   9: 363.250 ns/op
Iteration  10: 353.687 ns/op
Iteration  11: 355.425 ns/op
Iteration  12: 353.801 ns/op
Iteration  13: 355.580 ns/op
Iteration  14: 353.712 ns/op
Iteration  15: 353.780 ns/op
Iteration  16: 355.427 ns/op
Iteration  17: 353.861 ns/op
Iteration  18: 355.887 ns/op
Iteration  19: 353.786 ns/op
Iteration  20: 356.027 ns/op


Result "benchmark.StringContains.regexMatches":
  360.889 ±(99.9%) 1.327 ns/op [Average]
  (min, avg, max) = (353.636, 360.889, 371.106), stdev = 3.914
  CI (99.9%): [359.562, 362.216] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = &*T!T#[)http@1oR(\VN	]7 @MYxG==)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.949 ns/op
# Warmup Iteration   2: 10.456 ns/op
# Warmup Iteration   3: 10.148 ns/op
# Warmup Iteration   4: 10.176 ns/op
# Warmup Iteration   5: 10.169 ns/op
Iteration   1: 10.163 ns/op
Iteration   2: 10.158 ns/op
Iteration   3: 10.153 ns/op
Iteration   4: 10.175 ns/op
Iteration   5: 10.158 ns/op
Iteration   6: 10.164 ns/op
Iteration   7: 10.134 ns/op
Iteration   8: 10.148 ns/op
Iteration   9: 10.151 ns/op
Iteration  10: 10.168 ns/op
Iteration  11: 10.168 ns/op
Iteration  12: 9.959 ns/op
Iteration  13: 9.990 ns/op
Iteration  14: 9.962 ns/op
Iteration  15: 9.971 ns/op
Iteration  16: 9.986 ns/op
Iteration  17: 9.976 ns/op
Iteration  18: 9.964 ns/op
Iteration  19: 9.986 ns/op
Iteration  20: 9.995 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.485 ns/op
# Warmup Iteration   2: 9.723 ns/op
# Warmup Iteration   3: 9.798 ns/op
# Warmup Iteration   4: 9.776 ns/op
# Warmup Iteration   5: 9.774 ns/op
Iteration   1: 9.789 ns/op
Iteration   2: 9.789 ns/op
Iteration   3: 9.784 ns/op
Iteration   4: 9.779 ns/op
Iteration   5: 9.793 ns/op
Iteration   6: 9.770 ns/op
Iteration   7: 9.784 ns/op
Iteration   8: 9.812 ns/op
Iteration   9: 9.794 ns/op
Iteration  10: 9.793 ns/op
Iteration  11: 9.788 ns/op
Iteration  12: 9.814 ns/op
Iteration  13: 9.798 ns/op
Iteration  14: 9.806 ns/op
Iteration  15: 9.791 ns/op
Iteration  16: 9.777 ns/op
Iteration  17: 9.797 ns/op
Iteration  18: 9.786 ns/op
Iteration  19: 9.809 ns/op
Iteration  20: 9.824 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.222 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.870 ns/op
# Warmup Iteration   4: 9.853 ns/op
# Warmup Iteration   5: 9.856 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.880 ns/op
Iteration   4: 9.870 ns/op
Iteration   5: 9.863 ns/op
Iteration   6: 9.885 ns/op
Iteration   7: 9.866 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.869 ns/op
Iteration  10: 9.847 ns/op
Iteration  11: 9.852 ns/op
Iteration  12: 9.847 ns/op
Iteration  13: 9.856 ns/op
Iteration  14: 9.842 ns/op
Iteration  15: 9.835 ns/op
Iteration  16: 9.849 ns/op
Iteration  17: 9.846 ns/op
Iteration  18: 9.845 ns/op
Iteration  19: 9.855 ns/op
Iteration  20: 9.854 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.192 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.861 ns/op
# Warmup Iteration   4: 9.862 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.859 ns/op
Iteration   2: 9.878 ns/op
Iteration   3: 9.856 ns/op
Iteration   4: 9.876 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.863 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.860 ns/op
Iteration   9: 9.871 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.869 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.864 ns/op
Iteration  15: 9.875 ns/op
Iteration  16: 9.856 ns/op
Iteration  17: 9.856 ns/op
Iteration  18: 9.868 ns/op
Iteration  19: 9.858 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.240 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.879 ns/op
# Warmup Iteration   4: 9.881 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.864 ns/op
Iteration   3: 9.854 ns/op
Iteration   4: 9.864 ns/op
Iteration   5: 9.855 ns/op
Iteration   6: 9.848 ns/op
Iteration   7: 9.848 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.855 ns/op
Iteration  11: 9.839 ns/op
Iteration  12: 9.857 ns/op
Iteration  13: 9.849 ns/op
Iteration  14: 9.853 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.859 ns/op
Iteration  17: 9.845 ns/op
Iteration  18: 9.862 ns/op
Iteration  19: 9.858 ns/op
Iteration  20: 9.876 ns/op


Result "benchmark.StringContains.stringContains":
  9.890 ±(99.9%) 0.036 ns/op [Average]
  (min, avg, max) = (9.770, 9.890, 10.175), stdev = 0.106
  CI (99.9%): [9.854, 9.926] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  &*T!T#[)http@1oR(\VN	]7 @MYxG==  avgt  100  360.889 ± 1.327  ns/op
StringContains.stringContains     http  &*T!T#[)http@1oR(\VN	]7 @MYxG==  avgt  100    9.890 ± 0.036  ns/op

Benchmark result is saved to http_32_0.25_3.csv
