# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = W(YU7xiL[[`khttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 221.809 ns/op
# Warmup Iteration   2: 145.517 ns/op
# Warmup Iteration   3: 125.804 ns/op
# Warmup Iteration   4: 125.980 ns/op
# Warmup Iteration   5: 125.994 ns/op
Iteration   1: 127.583 ns/op
Iteration   2: 123.582 ns/op
Iteration   3: 123.550 ns/op
Iteration   4: 123.515 ns/op
Iteration   5: 123.903 ns/op
Iteration   6: 123.476 ns/op
Iteration   7: 123.466 ns/op
Iteration   8: 123.520 ns/op
Iteration   9: 123.384 ns/op
Iteration  10: 123.179 ns/op
Iteration  11: 123.133 ns/op
Iteration  12: 123.348 ns/op
Iteration  13: 123.150 ns/op
Iteration  14: 124.154 ns/op
Iteration  15: 123.165 ns/op
Iteration  16: 123.526 ns/op
Iteration  17: 123.293 ns/op
Iteration  18: 123.402 ns/op
Iteration  19: 123.234 ns/op
Iteration  20: 123.489 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.147 ns/op
# Warmup Iteration   2: 142.751 ns/op
# Warmup Iteration   3: 125.434 ns/op
# Warmup Iteration   4: 127.115 ns/op
# Warmup Iteration   5: 127.101 ns/op
Iteration   1: 127.713 ns/op
Iteration   2: 124.292 ns/op
Iteration   3: 124.320 ns/op
Iteration   4: 124.229 ns/op
Iteration   5: 124.823 ns/op
Iteration   6: 124.209 ns/op
Iteration   7: 124.215 ns/op
Iteration   8: 124.462 ns/op
Iteration   9: 124.286 ns/op
Iteration  10: 124.009 ns/op
Iteration  11: 124.078 ns/op
Iteration  12: 123.883 ns/op
Iteration  13: 124.310 ns/op
Iteration  14: 123.935 ns/op
Iteration  15: 124.013 ns/op
Iteration  16: 124.624 ns/op
Iteration  17: 124.684 ns/op
Iteration  18: 124.170 ns/op
Iteration  19: 124.244 ns/op
Iteration  20: 124.346 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 211.702 ns/op
# Warmup Iteration   2: 144.697 ns/op
# Warmup Iteration   3: 126.809 ns/op
# Warmup Iteration   4: 127.323 ns/op
# Warmup Iteration   5: 128.065 ns/op
Iteration   1: 129.622 ns/op
Iteration   2: 125.809 ns/op
Iteration   3: 126.166 ns/op
Iteration   4: 125.718 ns/op
Iteration   5: 126.436 ns/op
Iteration   6: 125.741 ns/op
Iteration   7: 125.608 ns/op
Iteration   8: 125.983 ns/op
Iteration   9: 125.924 ns/op
Iteration  10: 125.215 ns/op
Iteration  11: 125.898 ns/op
Iteration  12: 125.448 ns/op
Iteration  13: 125.635 ns/op
Iteration  14: 125.782 ns/op
Iteration  15: 126.455 ns/op
Iteration  16: 126.038 ns/op
Iteration  17: 125.461 ns/op
Iteration  18: 125.681 ns/op
Iteration  19: 125.367 ns/op
Iteration  20: 125.626 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 209.958 ns/op
# Warmup Iteration   2: 141.429 ns/op
# Warmup Iteration   3: 125.232 ns/op
# Warmup Iteration   4: 125.718 ns/op
# Warmup Iteration   5: 127.659 ns/op
Iteration   1: 126.673 ns/op
Iteration   2: 124.299 ns/op
Iteration   3: 124.241 ns/op
Iteration   4: 124.276 ns/op
Iteration   5: 125.008 ns/op
Iteration   6: 124.225 ns/op
Iteration   7: 124.255 ns/op
Iteration   8: 124.242 ns/op
Iteration   9: 124.167 ns/op
Iteration  10: 123.877 ns/op
Iteration  11: 123.875 ns/op
Iteration  12: 124.338 ns/op
Iteration  13: 124.096 ns/op
Iteration  14: 124.063 ns/op
Iteration  15: 124.109 ns/op
Iteration  16: 124.449 ns/op
Iteration  17: 124.105 ns/op
Iteration  18: 124.069 ns/op
Iteration  19: 124.743 ns/op
Iteration  20: 124.499 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 210.044 ns/op
# Warmup Iteration   2: 142.323 ns/op
# Warmup Iteration   3: 125.303 ns/op
# Warmup Iteration   4: 125.873 ns/op
# Warmup Iteration   5: 127.592 ns/op
Iteration   1: 127.389 ns/op
Iteration   2: 124.427 ns/op
Iteration   3: 124.452 ns/op
Iteration   4: 124.605 ns/op
Iteration   5: 124.984 ns/op
Iteration   6: 125.052 ns/op
Iteration   7: 124.743 ns/op
Iteration   8: 124.698 ns/op
Iteration   9: 124.756 ns/op
Iteration  10: 124.169 ns/op
Iteration  11: 124.125 ns/op
Iteration  12: 124.089 ns/op
Iteration  13: 124.921 ns/op
Iteration  14: 124.233 ns/op
Iteration  15: 124.341 ns/op
Iteration  16: 124.189 ns/op
Iteration  17: 124.831 ns/op
Iteration  18: 125.382 ns/op
Iteration  19: 124.160 ns/op
Iteration  20: 124.477 ns/op


Result "benchmark.StringContains.regexMatches":
  124.631 ±(99.9%) 0.374 ns/op [Average]
  (min, avg, max) = (123.133, 124.631, 129.622), stdev = 1.102
  CI (99.9%): [124.258, 125.005] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = W(YU7xiL[[`khttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.231 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.877 ns/op
# Warmup Iteration   4: 9.852 ns/op
# Warmup Iteration   5: 9.866 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.858 ns/op
Iteration   3: 9.869 ns/op
Iteration   4: 9.865 ns/op
Iteration   5: 9.851 ns/op
Iteration   6: 9.864 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.883 ns/op
Iteration   9: 9.856 ns/op
Iteration  10: 9.867 ns/op
Iteration  11: 9.870 ns/op
Iteration  12: 9.864 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.867 ns/op
Iteration  15: 9.852 ns/op
Iteration  16: 9.851 ns/op
Iteration  17: 9.846 ns/op
Iteration  18: 9.872 ns/op
Iteration  19: 9.851 ns/op
Iteration  20: 9.868 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.480 ns/op
# Warmup Iteration   2: 9.723 ns/op
# Warmup Iteration   3: 9.960 ns/op
# Warmup Iteration   4: 9.930 ns/op
# Warmup Iteration   5: 9.935 ns/op
Iteration   1: 9.939 ns/op
Iteration   2: 9.947 ns/op
Iteration   3: 10.011 ns/op
Iteration   4: 9.992 ns/op
Iteration   5: 9.965 ns/op
Iteration   6: 9.991 ns/op
Iteration   7: 9.972 ns/op
Iteration   8: 9.976 ns/op
Iteration   9: 9.975 ns/op
Iteration  10: 9.982 ns/op
Iteration  11: 9.961 ns/op
Iteration  12: 9.976 ns/op
Iteration  13: 9.963 ns/op
Iteration  14: 9.955 ns/op
Iteration  15: 9.951 ns/op
Iteration  16: 9.963 ns/op
Iteration  17: 9.963 ns/op
Iteration  18: 9.972 ns/op
Iteration  19: 9.992 ns/op
Iteration  20: 9.973 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.204 ns/op
# Warmup Iteration   2: 9.717 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.875 ns/op
Iteration   1: 9.857 ns/op
Iteration   2: 9.886 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.874 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.866 ns/op
Iteration   7: 9.863 ns/op
Iteration   8: 9.855 ns/op
Iteration   9: 9.872 ns/op
Iteration  10: 9.836 ns/op
Iteration  11: 9.872 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.881 ns/op
Iteration  14: 9.850 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.859 ns/op
Iteration  17: 9.847 ns/op
Iteration  18: 9.849 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.860 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.959 ns/op
# Warmup Iteration   4: 9.955 ns/op
# Warmup Iteration   5: 9.936 ns/op
Iteration   1: 9.941 ns/op
Iteration   2: 9.952 ns/op
Iteration   3: 9.944 ns/op
Iteration   4: 9.948 ns/op
Iteration   5: 9.946 ns/op
Iteration   6: 9.948 ns/op
Iteration   7: 9.955 ns/op
Iteration   8: 9.940 ns/op
Iteration   9: 9.960 ns/op
Iteration  10: 9.960 ns/op
Iteration  11: 9.943 ns/op
Iteration  12: 9.943 ns/op
Iteration  13: 9.959 ns/op
Iteration  14: 9.951 ns/op
Iteration  15: 9.946 ns/op
Iteration  16: 9.965 ns/op
Iteration  17: 9.955 ns/op
Iteration  18: 9.959 ns/op
Iteration  19: 9.957 ns/op
Iteration  20: 9.944 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.479 ns/op
# Warmup Iteration   2: 9.730 ns/op
# Warmup Iteration   3: 9.770 ns/op
# Warmup Iteration   4: 9.772 ns/op
# Warmup Iteration   5: 9.769 ns/op
Iteration   1: 9.766 ns/op
Iteration   2: 9.785 ns/op
Iteration   3: 9.779 ns/op
Iteration   4: 9.773 ns/op
Iteration   5: 9.788 ns/op
Iteration   6: 9.774 ns/op
Iteration   7: 9.784 ns/op
Iteration   8: 9.778 ns/op
Iteration   9: 9.775 ns/op
Iteration  10: 9.775 ns/op
Iteration  11: 9.770 ns/op
Iteration  12: 9.769 ns/op
Iteration  13: 9.749 ns/op
Iteration  14: 9.762 ns/op
Iteration  15: 9.755 ns/op
Iteration  16: 9.763 ns/op
Iteration  17: 9.750 ns/op
Iteration  18: 9.767 ns/op
Iteration  19: 9.761 ns/op
Iteration  20: 9.769 ns/op


Result "benchmark.StringContains.stringContains":
  9.883 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (9.749, 9.883, 10.011), stdev = 0.073
  CI (99.9%): [9.858, 9.908] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  W(YU7xiL[[`khttp  avgt  100  124.631 ± 0.374  ns/op
StringContains.stringContains     http  W(YU7xiL[[`khttp  avgt  100    9.883 ± 0.025  ns/op

Benchmark result is saved to http_16_0.75_12.csv
