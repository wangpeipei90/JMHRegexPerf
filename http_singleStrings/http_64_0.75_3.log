# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :71}c!O_c\YIOIVK}$S0h<eUEU))-2U`-Oo(Q0ujrFH]K6yIhttp[("_fyCt|jS)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 353.078 ns/op
# Warmup Iteration   2: 349.978 ns/op
# Warmup Iteration   3: 281.912 ns/op
# Warmup Iteration   4: 276.065 ns/op
# Warmup Iteration   5: 274.128 ns/op
Iteration   1: 277.734 ns/op
Iteration   2: 277.982 ns/op
Iteration   3: 273.391 ns/op
Iteration   4: 279.596 ns/op
Iteration   5: 273.431 ns/op
Iteration   6: 280.864 ns/op
Iteration   7: 273.353 ns/op
Iteration   8: 274.751 ns/op
Iteration   9: 274.785 ns/op
Iteration  10: 273.350 ns/op
Iteration  11: 274.407 ns/op
Iteration  12: 273.405 ns/op
Iteration  13: 274.364 ns/op
Iteration  14: 273.077 ns/op
Iteration  15: 274.440 ns/op
Iteration  16: 274.633 ns/op
Iteration  17: 273.726 ns/op
Iteration  18: 274.825 ns/op
Iteration  19: 273.399 ns/op
Iteration  20: 275.096 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 348.858 ns/op
# Warmup Iteration   2: 351.783 ns/op
# Warmup Iteration   3: 280.199 ns/op
# Warmup Iteration   4: 273.768 ns/op
# Warmup Iteration   5: 270.359 ns/op
Iteration   1: 277.876 ns/op
Iteration   2: 276.565 ns/op
Iteration   3: 270.186 ns/op
Iteration   4: 276.349 ns/op
Iteration   5: 270.055 ns/op
Iteration   6: 278.163 ns/op
Iteration   7: 272.679 ns/op
Iteration   8: 271.323 ns/op
Iteration   9: 272.377 ns/op
Iteration  10: 270.218 ns/op
Iteration  11: 271.595 ns/op
Iteration  12: 270.053 ns/op
Iteration  13: 272.426 ns/op
Iteration  14: 271.398 ns/op
Iteration  15: 270.654 ns/op
Iteration  16: 272.072 ns/op
Iteration  17: 270.226 ns/op
Iteration  18: 271.312 ns/op
Iteration  19: 270.235 ns/op
Iteration  20: 272.033 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 355.447 ns/op
# Warmup Iteration   2: 348.303 ns/op
# Warmup Iteration   3: 276.124 ns/op
# Warmup Iteration   4: 270.285 ns/op
# Warmup Iteration   5: 267.563 ns/op
Iteration   1: 270.745 ns/op
Iteration   2: 271.926 ns/op
Iteration   3: 267.571 ns/op
Iteration   4: 273.305 ns/op
Iteration   5: 267.719 ns/op
Iteration   6: 274.816 ns/op
Iteration   7: 268.773 ns/op
Iteration   8: 267.551 ns/op
Iteration   9: 268.778 ns/op
Iteration  10: 269.220 ns/op
Iteration  11: 268.866 ns/op
Iteration  12: 267.086 ns/op
Iteration  13: 268.269 ns/op
Iteration  14: 268.776 ns/op
Iteration  15: 266.913 ns/op
Iteration  16: 268.482 ns/op
Iteration  17: 267.072 ns/op
Iteration  18: 269.062 ns/op
Iteration  19: 268.469 ns/op
Iteration  20: 267.157 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 360.911 ns/op
# Warmup Iteration   2: 352.605 ns/op
# Warmup Iteration   3: 281.434 ns/op
# Warmup Iteration   4: 273.404 ns/op
# Warmup Iteration   5: 270.409 ns/op
Iteration   1: 273.592 ns/op
Iteration   2: 275.241 ns/op
Iteration   3: 270.579 ns/op
Iteration   4: 277.112 ns/op
Iteration   5: 270.594 ns/op
Iteration   6: 278.540 ns/op
Iteration   7: 271.662 ns/op
Iteration   8: 270.668 ns/op
Iteration   9: 271.922 ns/op
Iteration  10: 270.629 ns/op
Iteration  11: 271.814 ns/op
Iteration  12: 270.685 ns/op
Iteration  13: 271.794 ns/op
Iteration  14: 271.879 ns/op
Iteration  15: 270.549 ns/op
Iteration  16: 271.845 ns/op
Iteration  17: 270.456 ns/op
Iteration  18: 271.969 ns/op
Iteration  19: 270.605 ns/op
Iteration  20: 271.926 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 348.766 ns/op
# Warmup Iteration   2: 351.393 ns/op
# Warmup Iteration   3: 278.767 ns/op
# Warmup Iteration   4: 272.915 ns/op
# Warmup Iteration   5: 270.267 ns/op
Iteration   1: 273.623 ns/op
Iteration   2: 274.327 ns/op
Iteration   3: 269.966 ns/op
Iteration   4: 275.671 ns/op
Iteration   5: 269.871 ns/op
Iteration   6: 277.221 ns/op
Iteration   7: 271.211 ns/op
Iteration   8: 270.042 ns/op
Iteration   9: 271.513 ns/op
Iteration  10: 270.026 ns/op
Iteration  11: 271.261 ns/op
Iteration  12: 270.068 ns/op
Iteration  13: 271.403 ns/op
Iteration  14: 271.717 ns/op
Iteration  15: 269.929 ns/op
Iteration  16: 272.928 ns/op
Iteration  17: 269.767 ns/op
Iteration  18: 275.565 ns/op
Iteration  19: 270.718 ns/op
Iteration  20: 272.956 ns/op


Result "benchmark.StringContains.regexMatches":
  272.128 ±(99.9%) 1.005 ns/op [Average]
  (min, avg, max) = (266.913, 272.128, 280.864), stdev = 2.964
  CI (99.9%): [271.123, 273.133] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :71}c!O_c\YIOIVK}$S0h<eUEU))-2U`-Oo(Q0ujrFH]K6yIhttp[("_fyCt|jS)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.087 ns/op
# Warmup Iteration   2: 17.065 ns/op
# Warmup Iteration   3: 16.567 ns/op
# Warmup Iteration   4: 16.589 ns/op
# Warmup Iteration   5: 16.574 ns/op
Iteration   1: 16.592 ns/op
Iteration   2: 16.581 ns/op
Iteration   3: 16.601 ns/op
Iteration   4: 16.598 ns/op
Iteration   5: 16.586 ns/op
Iteration   6: 16.580 ns/op
Iteration   7: 16.567 ns/op
Iteration   8: 16.615 ns/op
Iteration   9: 16.592 ns/op
Iteration  10: 16.587 ns/op
Iteration  11: 16.573 ns/op
Iteration  12: 16.576 ns/op
Iteration  13: 16.563 ns/op
Iteration  14: 16.596 ns/op
Iteration  15: 16.586 ns/op
Iteration  16: 16.577 ns/op
Iteration  17: 16.568 ns/op
Iteration  18: 16.567 ns/op
Iteration  19: 16.575 ns/op
Iteration  20: 16.603 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.068 ns/op
# Warmup Iteration   2: 16.990 ns/op
# Warmup Iteration   3: 16.860 ns/op
# Warmup Iteration   4: 16.871 ns/op
# Warmup Iteration   5: 16.868 ns/op
Iteration   1: 16.870 ns/op
Iteration   2: 16.849 ns/op
Iteration   3: 16.884 ns/op
Iteration   4: 16.902 ns/op
Iteration   5: 16.882 ns/op
Iteration   6: 16.881 ns/op
Iteration   7: 16.893 ns/op
Iteration   8: 16.893 ns/op
Iteration   9: 16.906 ns/op
Iteration  10: 16.877 ns/op
Iteration  11: 16.850 ns/op
Iteration  12: 16.867 ns/op
Iteration  13: 16.878 ns/op
Iteration  14: 16.900 ns/op
Iteration  15: 16.843 ns/op
Iteration  16: 16.881 ns/op
Iteration  17: 16.879 ns/op
Iteration  18: 16.857 ns/op
Iteration  19: 16.857 ns/op
Iteration  20: 16.868 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.088 ns/op
# Warmup Iteration   2: 17.060 ns/op
# Warmup Iteration   3: 16.586 ns/op
# Warmup Iteration   4: 16.575 ns/op
# Warmup Iteration   5: 16.589 ns/op
Iteration   1: 16.578 ns/op
Iteration   2: 16.589 ns/op
Iteration   3: 16.602 ns/op
Iteration   4: 16.567 ns/op
Iteration   5: 16.579 ns/op
Iteration   6: 16.595 ns/op
Iteration   7: 16.579 ns/op
Iteration   8: 16.576 ns/op
Iteration   9: 16.586 ns/op
Iteration  10: 16.580 ns/op
Iteration  11: 16.588 ns/op
Iteration  12: 16.574 ns/op
Iteration  13: 16.578 ns/op
Iteration  14: 16.578 ns/op
Iteration  15: 16.589 ns/op
Iteration  16: 16.579 ns/op
Iteration  17: 16.584 ns/op
Iteration  18: 16.578 ns/op
Iteration  19: 16.587 ns/op
Iteration  20: 16.560 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.954 ns/op
# Warmup Iteration   2: 17.121 ns/op
# Warmup Iteration   3: 16.484 ns/op
# Warmup Iteration   4: 16.510 ns/op
# Warmup Iteration   5: 16.495 ns/op
Iteration   1: 16.506 ns/op
Iteration   2: 16.514 ns/op
Iteration   3: 16.509 ns/op
Iteration   4: 16.515 ns/op
Iteration   5: 16.509 ns/op
Iteration   6: 16.489 ns/op
Iteration   7: 16.515 ns/op
Iteration   8: 16.513 ns/op
Iteration   9: 16.516 ns/op
Iteration  10: 16.521 ns/op
Iteration  11: 16.508 ns/op
Iteration  12: 16.492 ns/op
Iteration  13: 16.495 ns/op
Iteration  14: 16.489 ns/op
Iteration  15: 16.482 ns/op
Iteration  16: 16.496 ns/op
Iteration  17: 16.501 ns/op
Iteration  18: 16.516 ns/op
Iteration  19: 16.497 ns/op
Iteration  20: 16.514 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.933 ns/op
# Warmup Iteration   2: 17.087 ns/op
# Warmup Iteration   3: 16.497 ns/op
# Warmup Iteration   4: 16.485 ns/op
# Warmup Iteration   5: 16.493 ns/op
Iteration   1: 16.507 ns/op
Iteration   2: 16.511 ns/op
Iteration   3: 16.495 ns/op
Iteration   4: 16.506 ns/op
Iteration   5: 16.521 ns/op
Iteration   6: 16.527 ns/op
Iteration   7: 16.532 ns/op
Iteration   8: 16.511 ns/op
Iteration   9: 16.510 ns/op
Iteration  10: 16.506 ns/op
Iteration  11: 16.511 ns/op
Iteration  12: 16.514 ns/op
Iteration  13: 16.520 ns/op
Iteration  14: 16.524 ns/op
Iteration  15: 16.521 ns/op
Iteration  16: 16.507 ns/op
Iteration  17: 16.522 ns/op
Iteration  18: 16.506 ns/op
Iteration  19: 16.496 ns/op
Iteration  20: 16.518 ns/op


Result "benchmark.StringContains.stringContains":
  16.612 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (16.482, 16.612, 16.906), stdev = 0.137
  CI (99.9%): [16.565, 16.658] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :71}c!O_c\YIOIVK}$S0h<eUEU))-2U`-Oo(Q0ujrFH]K6yIhttp[("_fyCt|jS  avgt  100  272.128 ± 1.005  ns/op
StringContains.stringContains     http  :71}c!O_c\YIOIVK}$S0h<eUEU))-2U`-Oo(Q0ujrFH]K6yIhttp[("_fyCt|jS  avgt  100   16.612 ± 0.047  ns/op

Benchmark result is saved to http_64_0.75_3.csv
