# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = vs0$http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 234.443 ns/op
# Warmup Iteration   2: 160.201 ns/op
# Warmup Iteration   3: 133.042 ns/op
# Warmup Iteration   4: 132.521 ns/op
# Warmup Iteration   5: 133.307 ns/op
Iteration   1: 133.490 ns/op
Iteration   2: 130.369 ns/op
Iteration   3: 130.953 ns/op
Iteration   4: 130.357 ns/op
Iteration   5: 130.388 ns/op
Iteration   6: 130.341 ns/op
Iteration   7: 130.361 ns/op
Iteration   8: 131.189 ns/op
Iteration   9: 130.031 ns/op
Iteration  10: 130.079 ns/op
Iteration  11: 130.090 ns/op
Iteration  12: 130.430 ns/op
Iteration  13: 131.236 ns/op
Iteration  14: 130.278 ns/op
Iteration  15: 130.163 ns/op
Iteration  16: 130.011 ns/op
Iteration  17: 130.143 ns/op
Iteration  18: 130.481 ns/op
Iteration  19: 130.066 ns/op
Iteration  20: 130.119 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 222.315 ns/op
# Warmup Iteration   2: 150.867 ns/op
# Warmup Iteration   3: 132.774 ns/op
# Warmup Iteration   4: 131.938 ns/op
# Warmup Iteration   5: 132.685 ns/op
Iteration   1: 133.481 ns/op
Iteration   2: 131.037 ns/op
Iteration   3: 130.396 ns/op
Iteration   4: 130.407 ns/op
Iteration   5: 130.458 ns/op
Iteration   6: 130.388 ns/op
Iteration   7: 130.935 ns/op
Iteration   8: 130.314 ns/op
Iteration   9: 129.963 ns/op
Iteration  10: 129.996 ns/op
Iteration  11: 129.990 ns/op
Iteration  12: 130.497 ns/op
Iteration  13: 130.299 ns/op
Iteration  14: 130.199 ns/op
Iteration  15: 130.547 ns/op
Iteration  16: 130.436 ns/op
Iteration  17: 130.379 ns/op
Iteration  18: 130.756 ns/op
Iteration  19: 130.502 ns/op
Iteration  20: 130.486 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 216.020 ns/op
# Warmup Iteration   2: 147.418 ns/op
# Warmup Iteration   3: 132.433 ns/op
# Warmup Iteration   4: 131.645 ns/op
# Warmup Iteration   5: 132.218 ns/op
Iteration   1: 132.983 ns/op
Iteration   2: 130.827 ns/op
Iteration   3: 129.978 ns/op
Iteration   4: 129.919 ns/op
Iteration   5: 129.928 ns/op
Iteration   6: 129.926 ns/op
Iteration   7: 130.460 ns/op
Iteration   8: 129.986 ns/op
Iteration   9: 129.650 ns/op
Iteration  10: 129.600 ns/op
Iteration  11: 129.597 ns/op
Iteration  12: 129.738 ns/op
Iteration  13: 129.591 ns/op
Iteration  14: 129.593 ns/op
Iteration  15: 129.591 ns/op
Iteration  16: 129.766 ns/op
Iteration  17: 129.983 ns/op
Iteration  18: 129.747 ns/op
Iteration  19: 129.993 ns/op
Iteration  20: 129.908 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 218.057 ns/op
# Warmup Iteration   2: 150.960 ns/op
# Warmup Iteration   3: 134.759 ns/op
# Warmup Iteration   4: 133.819 ns/op
# Warmup Iteration   5: 134.639 ns/op
Iteration   1: 135.291 ns/op
Iteration   2: 132.533 ns/op
Iteration   3: 133.139 ns/op
Iteration   4: 132.555 ns/op
Iteration   5: 132.431 ns/op
Iteration   6: 132.398 ns/op
Iteration   7: 132.956 ns/op
Iteration   8: 133.192 ns/op
Iteration   9: 131.689 ns/op
Iteration  10: 132.219 ns/op
Iteration  11: 132.041 ns/op
Iteration  12: 132.059 ns/op
Iteration  13: 132.053 ns/op
Iteration  14: 132.234 ns/op
Iteration  15: 132.002 ns/op
Iteration  16: 131.959 ns/op
Iteration  17: 132.055 ns/op
Iteration  18: 132.218 ns/op
Iteration  19: 132.113 ns/op
Iteration  20: 132.880 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 213.450 ns/op
# Warmup Iteration   2: 143.971 ns/op
# Warmup Iteration   3: 128.184 ns/op
# Warmup Iteration   4: 127.896 ns/op
# Warmup Iteration   5: 128.609 ns/op
Iteration   1: 130.132 ns/op
Iteration   2: 126.374 ns/op
Iteration   3: 126.402 ns/op
Iteration   4: 126.434 ns/op
Iteration   5: 126.939 ns/op
Iteration   6: 126.340 ns/op
Iteration   7: 126.400 ns/op
Iteration   8: 126.500 ns/op
Iteration   9: 126.947 ns/op
Iteration  10: 126.095 ns/op
Iteration  11: 125.928 ns/op
Iteration  12: 125.924 ns/op
Iteration  13: 125.938 ns/op
Iteration  14: 126.270 ns/op
Iteration  15: 125.923 ns/op
Iteration  16: 126.106 ns/op
Iteration  17: 125.944 ns/op
Iteration  18: 126.392 ns/op
Iteration  19: 126.736 ns/op
Iteration  20: 132.980 ns/op


Result "benchmark.StringContains.regexMatches":
  130.095 ±(99.9%) 0.712 ns/op [Average]
  (min, avg, max) = (125.923, 130.095, 135.291), stdev = 2.100
  CI (99.9%): [129.383, 130.807] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = vs0$http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.076 ns/op
# Warmup Iteration   2: 10.480 ns/op
# Warmup Iteration   3: 10.060 ns/op
# Warmup Iteration   4: 10.071 ns/op
# Warmup Iteration   5: 10.028 ns/op
Iteration   1: 10.037 ns/op
Iteration   2: 10.023 ns/op
Iteration   3: 10.040 ns/op
Iteration   4: 10.076 ns/op
Iteration   5: 10.078 ns/op
Iteration   6: 10.040 ns/op
Iteration   7: 10.059 ns/op
Iteration   8: 10.038 ns/op
Iteration   9: 10.034 ns/op
Iteration  10: 10.028 ns/op
Iteration  11: 9.997 ns/op
Iteration  12: 10.029 ns/op
Iteration  13: 10.056 ns/op
Iteration  14: 10.030 ns/op
Iteration  15: 10.015 ns/op
Iteration  16: 10.027 ns/op
Iteration  17: 10.024 ns/op
Iteration  18: 10.016 ns/op
Iteration  19: 10.077 ns/op
Iteration  20: 10.034 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.085 ns/op
# Warmup Iteration   2: 10.473 ns/op
# Warmup Iteration   3: 10.052 ns/op
# Warmup Iteration   4: 10.050 ns/op
# Warmup Iteration   5: 10.051 ns/op
Iteration   1: 10.051 ns/op
Iteration   2: 10.048 ns/op
Iteration   3: 10.049 ns/op
Iteration   4: 10.051 ns/op
Iteration   5: 10.052 ns/op
Iteration   6: 10.047 ns/op
Iteration   7: 10.046 ns/op
Iteration   8: 10.067 ns/op
Iteration   9: 10.049 ns/op
Iteration  10: 10.047 ns/op
Iteration  11: 10.048 ns/op
Iteration  12: 10.049 ns/op
Iteration  13: 10.048 ns/op
Iteration  14: 10.050 ns/op
Iteration  15: 10.044 ns/op
Iteration  16: 10.046 ns/op
Iteration  17: 10.049 ns/op
Iteration  18: 10.050 ns/op
Iteration  19: 10.044 ns/op
Iteration  20: 10.061 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.069 ns/op
# Warmup Iteration   2: 10.456 ns/op
# Warmup Iteration   3: 9.879 ns/op
# Warmup Iteration   4: 9.875 ns/op
# Warmup Iteration   5: 9.879 ns/op
Iteration   1: 9.888 ns/op
Iteration   2: 9.898 ns/op
Iteration   3: 9.873 ns/op
Iteration   4: 9.877 ns/op
Iteration   5: 9.865 ns/op
Iteration   6: 9.883 ns/op
Iteration   7: 9.893 ns/op
Iteration   8: 9.885 ns/op
Iteration   9: 9.882 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.886 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.884 ns/op
Iteration  16: 9.864 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.870 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.091 ns/op
# Warmup Iteration   2: 10.472 ns/op
# Warmup Iteration   3: 9.903 ns/op
# Warmup Iteration   4: 9.881 ns/op
# Warmup Iteration   5: 9.878 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.892 ns/op
Iteration   3: 9.885 ns/op
Iteration   4: 9.885 ns/op
Iteration   5: 9.882 ns/op
Iteration   6: 9.878 ns/op
Iteration   7: 9.889 ns/op
Iteration   8: 9.899 ns/op
Iteration   9: 9.883 ns/op
Iteration  10: 9.885 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.893 ns/op
Iteration  13: 9.877 ns/op
Iteration  14: 9.899 ns/op
Iteration  15: 9.893 ns/op
Iteration  16: 9.902 ns/op
Iteration  17: 9.892 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.881 ns/op
Iteration  20: 9.875 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.051 ns/op
# Warmup Iteration   2: 10.460 ns/op
# Warmup Iteration   3: 9.908 ns/op
# Warmup Iteration   4: 9.896 ns/op
# Warmup Iteration   5: 9.900 ns/op
Iteration   1: 9.895 ns/op
Iteration   2: 9.905 ns/op
Iteration   3: 9.896 ns/op
Iteration   4: 9.899 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.901 ns/op
Iteration   7: 9.897 ns/op
Iteration   8: 9.901 ns/op
Iteration   9: 9.895 ns/op
Iteration  10: 9.886 ns/op
Iteration  11: 9.892 ns/op
Iteration  12: 9.921 ns/op
Iteration  13: 9.886 ns/op
Iteration  14: 9.886 ns/op
Iteration  15: 9.885 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.886 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.890 ns/op
Iteration  20: 9.913 ns/op


Result "benchmark.StringContains.stringContains":
  9.950 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (9.864, 9.950, 10.078), stdev = 0.078
  CI (99.9%): [9.923, 9.976] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  vs0$http  avgt  100  130.095 ± 0.712  ns/op
StringContains.stringContains     http  vs0$http  avgt  100    9.950 ± 0.027  ns/op

Benchmark result is saved to http_8_0.5_14.csv
