# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = av>gxCXvOU\^9k|B*8.?U|X*$Vn:Zh=httpWfD{VyJxM1fN;m m/DOR-o	%.a5)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 512.392 ns/op
# Warmup Iteration   2: 519.951 ns/op
# Warmup Iteration   3: 518.488 ns/op
# Warmup Iteration   4: 452.358 ns/op
# Warmup Iteration   5: 442.859 ns/op
Iteration   1: 447.084 ns/op
Iteration   2: 443.064 ns/op
Iteration   3: 443.331 ns/op
Iteration   4: 449.132 ns/op
Iteration   5: 444.351 ns/op
Iteration   6: 450.997 ns/op
Iteration   7: 442.945 ns/op
Iteration   8: 442.755 ns/op
Iteration   9: 452.587 ns/op
Iteration  10: 442.882 ns/op
Iteration  11: 443.041 ns/op
Iteration  12: 455.726 ns/op
Iteration  13: 443.452 ns/op
Iteration  14: 443.502 ns/op
Iteration  15: 445.591 ns/op
Iteration  16: 442.911 ns/op
Iteration  17: 442.599 ns/op
Iteration  18: 445.030 ns/op
Iteration  19: 443.007 ns/op
Iteration  20: 444.965 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 510.846 ns/op
# Warmup Iteration   2: 518.414 ns/op
# Warmup Iteration   3: 517.668 ns/op
# Warmup Iteration   4: 450.953 ns/op
# Warmup Iteration   5: 443.111 ns/op
Iteration   1: 447.137 ns/op
Iteration   2: 442.802 ns/op
Iteration   3: 442.860 ns/op
Iteration   4: 451.358 ns/op
Iteration   5: 446.196 ns/op
Iteration   6: 452.669 ns/op
Iteration   7: 442.620 ns/op
Iteration   8: 443.123 ns/op
Iteration   9: 452.559 ns/op
Iteration  10: 442.901 ns/op
Iteration  11: 443.046 ns/op
Iteration  12: 455.095 ns/op
Iteration  13: 443.150 ns/op
Iteration  14: 442.908 ns/op
Iteration  15: 446.151 ns/op
Iteration  16: 443.040 ns/op
Iteration  17: 445.299 ns/op
Iteration  18: 443.044 ns/op
Iteration  19: 443.059 ns/op
Iteration  20: 445.277 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 513.530 ns/op
# Warmup Iteration   2: 529.441 ns/op
# Warmup Iteration   3: 530.754 ns/op
# Warmup Iteration   4: 468.165 ns/op
# Warmup Iteration   5: 455.788 ns/op
Iteration   1: 460.274 ns/op
Iteration   2: 458.369 ns/op
Iteration   3: 458.188 ns/op
Iteration   4: 462.425 ns/op
Iteration   5: 455.589 ns/op
Iteration   6: 463.911 ns/op
Iteration   7: 455.934 ns/op
Iteration   8: 455.593 ns/op
Iteration   9: 465.847 ns/op
Iteration  10: 455.692 ns/op
Iteration  11: 455.270 ns/op
Iteration  12: 470.613 ns/op
Iteration  13: 456.595 ns/op
Iteration  14: 457.097 ns/op
Iteration  15: 460.344 ns/op
Iteration  16: 456.799 ns/op
Iteration  17: 456.086 ns/op
Iteration  18: 458.151 ns/op
Iteration  19: 455.945 ns/op
Iteration  20: 455.556 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 513.780 ns/op
# Warmup Iteration   2: 513.398 ns/op
# Warmup Iteration   3: 555.000 ns/op
# Warmup Iteration   4: 496.359 ns/op
# Warmup Iteration   5: 480.806 ns/op
Iteration   1: 485.236 ns/op
Iteration   2: 479.386 ns/op
Iteration   3: 479.851 ns/op
Iteration   4: 485.528 ns/op
Iteration   5: 479.704 ns/op
Iteration   6: 479.957 ns/op
Iteration   7: 487.505 ns/op
Iteration   8: 479.704 ns/op
Iteration   9: 479.769 ns/op
Iteration  10: 489.793 ns/op
Iteration  11: 479.769 ns/op
Iteration  12: 481.962 ns/op
Iteration  13: 494.654 ns/op
Iteration  14: 479.248 ns/op
Iteration  15: 479.483 ns/op
Iteration  16: 481.614 ns/op
Iteration  17: 479.124 ns/op
Iteration  18: 479.369 ns/op
Iteration  19: 481.663 ns/op
Iteration  20: 479.259 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 508.282 ns/op
# Warmup Iteration   2: 517.934 ns/op
# Warmup Iteration   3: 517.889 ns/op
# Warmup Iteration   4: 450.805 ns/op
# Warmup Iteration   5: 442.031 ns/op
Iteration   1: 446.336 ns/op
Iteration   2: 442.810 ns/op
Iteration   3: 442.762 ns/op
Iteration   4: 448.297 ns/op
Iteration   5: 442.377 ns/op
Iteration   6: 449.979 ns/op
Iteration   7: 442.853 ns/op
Iteration   8: 442.732 ns/op
Iteration   9: 452.678 ns/op
Iteration  10: 442.908 ns/op
Iteration  11: 443.129 ns/op
Iteration  12: 454.879 ns/op
Iteration  13: 442.105 ns/op
Iteration  14: 442.605 ns/op
Iteration  15: 445.608 ns/op
Iteration  16: 442.812 ns/op
Iteration  17: 445.336 ns/op
Iteration  18: 442.661 ns/op
Iteration  19: 442.481 ns/op
Iteration  20: 445.117 ns/op


Result "benchmark.StringContains.regexMatches":
  455.406 ±(99.9%) 5.058 ns/op [Average]
  (min, avg, max) = (442.105, 455.406, 494.654), stdev = 14.914
  CI (99.9%): [450.348, 460.464] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = av>gxCXvOU\^9k|B*8.?U|X*$Vn:Zh=httpWfD{VyJxM1fN;m m/DOR-o	%.a5)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 14.795 ns/op
# Warmup Iteration   3: 14.730 ns/op
# Warmup Iteration   4: 14.692 ns/op
# Warmup Iteration   5: 14.693 ns/op
Iteration   1: 14.725 ns/op
Iteration   2: 14.692 ns/op
Iteration   3: 14.682 ns/op
Iteration   4: 14.680 ns/op
Iteration   5: 14.652 ns/op
Iteration   6: 14.671 ns/op
Iteration   7: 14.696 ns/op
Iteration   8: 14.723 ns/op
Iteration   9: 14.652 ns/op
Iteration  10: 14.722 ns/op
Iteration  11: 14.689 ns/op
Iteration  12: 14.731 ns/op
Iteration  13: 14.740 ns/op
Iteration  14: 14.741 ns/op
Iteration  15: 14.705 ns/op
Iteration  16: 14.786 ns/op
Iteration  17: 14.676 ns/op
Iteration  18: 14.722 ns/op
Iteration  19: 14.618 ns/op
Iteration  20: 14.714 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.715 ns/op
# Warmup Iteration   2: 14.781 ns/op
# Warmup Iteration   3: 14.335 ns/op
# Warmup Iteration   4: 14.312 ns/op
# Warmup Iteration   5: 14.312 ns/op
Iteration   1: 14.317 ns/op
Iteration   2: 14.302 ns/op
Iteration   3: 14.318 ns/op
Iteration   4: 14.303 ns/op
Iteration   5: 14.315 ns/op
Iteration   6: 14.306 ns/op
Iteration   7: 14.311 ns/op
Iteration   8: 14.323 ns/op
Iteration   9: 14.308 ns/op
Iteration  10: 14.332 ns/op
Iteration  11: 14.316 ns/op
Iteration  12: 14.323 ns/op
Iteration  13: 14.310 ns/op
Iteration  14: 14.313 ns/op
Iteration  15: 14.335 ns/op
Iteration  16: 14.311 ns/op
Iteration  17: 14.323 ns/op
Iteration  18: 14.317 ns/op
Iteration  19: 14.287 ns/op
Iteration  20: 14.314 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.662 ns/op
# Warmup Iteration   2: 14.769 ns/op
# Warmup Iteration   3: 14.725 ns/op
# Warmup Iteration   4: 14.713 ns/op
# Warmup Iteration   5: 14.781 ns/op
Iteration   1: 14.693 ns/op
Iteration   2: 14.738 ns/op
Iteration   3: 14.651 ns/op
Iteration   4: 14.717 ns/op
Iteration   5: 14.735 ns/op
Iteration   6: 14.693 ns/op
Iteration   7: 14.761 ns/op
Iteration   8: 14.703 ns/op
Iteration   9: 14.699 ns/op
Iteration  10: 14.701 ns/op
Iteration  11: 14.704 ns/op
Iteration  12: 14.725 ns/op
Iteration  13: 14.782 ns/op
Iteration  14: 14.725 ns/op
Iteration  15: 14.807 ns/op
Iteration  16: 14.772 ns/op
Iteration  17: 14.692 ns/op
Iteration  18: 14.750 ns/op
Iteration  19: 14.697 ns/op
Iteration  20: 14.764 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.685 ns/op
# Warmup Iteration   2: 14.937 ns/op
# Warmup Iteration   3: 14.841 ns/op
# Warmup Iteration   4: 14.836 ns/op
# Warmup Iteration   5: 14.805 ns/op
Iteration   1: 14.795 ns/op
Iteration   2: 14.813 ns/op
Iteration   3: 14.841 ns/op
Iteration   4: 14.818 ns/op
Iteration   5: 14.855 ns/op
Iteration   6: 14.828 ns/op
Iteration   7: 14.799 ns/op
Iteration   8: 14.779 ns/op
Iteration   9: 14.852 ns/op
Iteration  10: 14.806 ns/op
Iteration  11: 14.834 ns/op
Iteration  12: 14.835 ns/op
Iteration  13: 14.861 ns/op
Iteration  14: 14.846 ns/op
Iteration  15: 14.814 ns/op
Iteration  16: 14.868 ns/op
Iteration  17: 14.855 ns/op
Iteration  18: 14.856 ns/op
Iteration  19: 14.873 ns/op
Iteration  20: 14.857 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.720 ns/op
# Warmup Iteration   2: 14.716 ns/op
# Warmup Iteration   3: 14.365 ns/op
# Warmup Iteration   4: 14.352 ns/op
# Warmup Iteration   5: 14.365 ns/op
Iteration   1: 14.346 ns/op
Iteration   2: 14.365 ns/op
Iteration   3: 14.349 ns/op
Iteration   4: 14.356 ns/op
Iteration   5: 14.360 ns/op
Iteration   6: 14.357 ns/op
Iteration   7: 14.348 ns/op
Iteration   8: 14.357 ns/op
Iteration   9: 14.362 ns/op
Iteration  10: 14.358 ns/op
Iteration  11: 14.358 ns/op
Iteration  12: 14.371 ns/op
Iteration  13: 14.354 ns/op
Iteration  14: 14.343 ns/op
Iteration  15: 14.372 ns/op
Iteration  16: 14.359 ns/op
Iteration  17: 14.375 ns/op
Iteration  18: 14.355 ns/op
Iteration  19: 14.356 ns/op
Iteration  20: 14.370 ns/op


Result "benchmark.StringContains.stringContains":
  14.587 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (14.287, 14.587, 14.873), stdev = 0.213
  CI (99.9%): [14.515, 14.659] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  av>gxCXvOU\^9k|B*8.?U|X*$Vn:Zh=httpWfD{VyJxM1fN;m m/DOR-o	%.a5  avgt  100  455.406 ± 5.058  ns/op
StringContains.stringContains     http  av>gxCXvOU\^9k|B*8.?U|X*$Vn:Zh=httpWfD{VyJxM1fN;m m/DOR-o	%.a5  avgt  100   14.587 ± 0.072  ns/op

Benchmark result is saved to http_64_0.5_12.csv
