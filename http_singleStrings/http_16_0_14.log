# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpWh1?uZwa}40)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 350.955 ns/op
# Warmup Iteration   2: 358.629 ns/op
# Warmup Iteration   3: 274.817 ns/op
# Warmup Iteration   4: 265.381 ns/op
# Warmup Iteration   5: 262.766 ns/op
Iteration   1: 266.266 ns/op
Iteration   2: 267.763 ns/op
Iteration   3: 262.702 ns/op
Iteration   4: 270.820 ns/op
Iteration   5: 266.368 ns/op
Iteration   6: 268.421 ns/op
Iteration   7: 263.783 ns/op
Iteration   8: 262.827 ns/op
Iteration   9: 263.917 ns/op
Iteration  10: 262.628 ns/op
Iteration  11: 263.644 ns/op
Iteration  12: 263.468 ns/op
Iteration  13: 262.889 ns/op
Iteration  14: 263.973 ns/op
Iteration  15: 262.455 ns/op
Iteration  16: 263.634 ns/op
Iteration  17: 264.128 ns/op
Iteration  18: 262.879 ns/op
Iteration  19: 263.729 ns/op
Iteration  20: 262.788 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 339.809 ns/op
# Warmup Iteration   2: 353.621 ns/op
# Warmup Iteration   3: 269.547 ns/op
# Warmup Iteration   4: 267.626 ns/op
# Warmup Iteration   5: 262.694 ns/op
Iteration   1: 266.299 ns/op
Iteration   2: 267.351 ns/op
Iteration   3: 262.844 ns/op
Iteration   4: 268.681 ns/op
Iteration   5: 270.427 ns/op
Iteration   6: 262.810 ns/op
Iteration   7: 264.390 ns/op
Iteration   8: 262.626 ns/op
Iteration   9: 263.764 ns/op
Iteration  10: 262.489 ns/op
Iteration  11: 263.894 ns/op
Iteration  12: 264.135 ns/op
Iteration  13: 262.813 ns/op
Iteration  14: 264.421 ns/op
Iteration  15: 263.098 ns/op
Iteration  16: 264.064 ns/op
Iteration  17: 263.964 ns/op
Iteration  18: 262.684 ns/op
Iteration  19: 264.225 ns/op
Iteration  20: 262.595 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 346.656 ns/op
# Warmup Iteration   2: 352.874 ns/op
# Warmup Iteration   3: 272.818 ns/op
# Warmup Iteration   4: 267.393 ns/op
# Warmup Iteration   5: 264.802 ns/op
Iteration   1: 267.758 ns/op
Iteration   2: 269.270 ns/op
Iteration   3: 264.782 ns/op
Iteration   4: 270.757 ns/op
Iteration   5: 268.288 ns/op
Iteration   6: 268.470 ns/op
Iteration   7: 266.086 ns/op
Iteration   8: 264.820 ns/op
Iteration   9: 266.024 ns/op
Iteration  10: 264.725 ns/op
Iteration  11: 266.102 ns/op
Iteration  12: 265.934 ns/op
Iteration  13: 265.603 ns/op
Iteration  14: 267.734 ns/op
Iteration  15: 264.806 ns/op
Iteration  16: 266.319 ns/op
Iteration  17: 271.285 ns/op
Iteration  18: 264.485 ns/op
Iteration  19: 266.216 ns/op
Iteration  20: 264.970 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 346.764 ns/op
# Warmup Iteration   2: 353.675 ns/op
# Warmup Iteration   3: 271.807 ns/op
# Warmup Iteration   4: 267.413 ns/op
# Warmup Iteration   5: 263.556 ns/op
Iteration   1: 266.937 ns/op
Iteration   2: 267.975 ns/op
Iteration   3: 263.118 ns/op
Iteration   4: 269.387 ns/op
Iteration   5: 266.808 ns/op
Iteration   6: 268.350 ns/op
Iteration   7: 264.873 ns/op
Iteration   8: 263.475 ns/op
Iteration   9: 264.542 ns/op
Iteration  10: 263.526 ns/op
Iteration  11: 264.562 ns/op
Iteration  12: 265.043 ns/op
Iteration  13: 263.179 ns/op
Iteration  14: 264.923 ns/op
Iteration  15: 263.120 ns/op
Iteration  16: 264.638 ns/op
Iteration  17: 266.669 ns/op
Iteration  18: 262.969 ns/op
Iteration  19: 265.233 ns/op
Iteration  20: 263.183 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 342.095 ns/op
# Warmup Iteration   2: 345.457 ns/op
# Warmup Iteration   3: 269.397 ns/op
# Warmup Iteration   4: 265.905 ns/op
# Warmup Iteration   5: 263.171 ns/op
Iteration   1: 266.586 ns/op
Iteration   2: 267.360 ns/op
Iteration   3: 263.115 ns/op
Iteration   4: 269.126 ns/op
Iteration   5: 270.794 ns/op
Iteration   6: 263.359 ns/op
Iteration   7: 264.395 ns/op
Iteration   8: 263.202 ns/op
Iteration   9: 264.428 ns/op
Iteration  10: 263.060 ns/op
Iteration  11: 264.492 ns/op
Iteration  12: 264.250 ns/op
Iteration  13: 263.050 ns/op
Iteration  14: 264.388 ns/op
Iteration  15: 262.968 ns/op
Iteration  16: 264.461 ns/op
Iteration  17: 264.317 ns/op
Iteration  18: 263.159 ns/op
Iteration  19: 264.920 ns/op
Iteration  20: 263.025 ns/op


Result "benchmark.StringContains.regexMatches":
  265.081 ±(99.9%) 0.763 ns/op [Average]
  (min, avg, max) = (262.455, 265.081, 271.285), stdev = 2.250
  CI (99.9%): [264.318, 265.844] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpWh1?uZwa}40)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.206 ns/op
# Warmup Iteration   2: 9.786 ns/op
# Warmup Iteration   3: 9.861 ns/op
# Warmup Iteration   4: 9.876 ns/op
# Warmup Iteration   5: 9.850 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.863 ns/op
Iteration   3: 9.863 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.878 ns/op
Iteration   6: 9.849 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.851 ns/op
Iteration   9: 9.854 ns/op
Iteration  10: 9.862 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.855 ns/op
Iteration  14: 9.829 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.863 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.839 ns/op
Iteration  20: 9.843 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.193 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.879 ns/op
# Warmup Iteration   4: 9.865 ns/op
# Warmup Iteration   5: 9.908 ns/op
Iteration   1: 9.857 ns/op
Iteration   2: 9.867 ns/op
Iteration   3: 9.852 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.865 ns/op
Iteration   6: 9.881 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.854 ns/op
Iteration  10: 9.861 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.864 ns/op
Iteration  13: 9.867 ns/op
Iteration  14: 9.861 ns/op
Iteration  15: 9.861 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.862 ns/op
Iteration  20: 9.858 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.205 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.885 ns/op
# Warmup Iteration   4: 9.888 ns/op
# Warmup Iteration   5: 9.877 ns/op
Iteration   1: 9.874 ns/op
Iteration   2: 9.864 ns/op
Iteration   3: 9.864 ns/op
Iteration   4: 9.865 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.882 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.896 ns/op
Iteration  12: 9.887 ns/op
Iteration  13: 9.885 ns/op
Iteration  14: 9.880 ns/op
Iteration  15: 9.887 ns/op
Iteration  16: 9.877 ns/op
Iteration  17: 9.860 ns/op
Iteration  18: 9.869 ns/op
Iteration  19: 9.869 ns/op
Iteration  20: 9.885 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.486 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.775 ns/op
# Warmup Iteration   4: 9.786 ns/op
# Warmup Iteration   5: 9.776 ns/op
Iteration   1: 9.779 ns/op
Iteration   2: 9.763 ns/op
Iteration   3: 9.755 ns/op
Iteration   4: 9.779 ns/op
Iteration   5: 9.759 ns/op
Iteration   6: 9.762 ns/op
Iteration   7: 9.769 ns/op
Iteration   8: 9.761 ns/op
Iteration   9: 9.763 ns/op
Iteration  10: 9.773 ns/op
Iteration  11: 9.776 ns/op
Iteration  12: 9.781 ns/op
Iteration  13: 9.773 ns/op
Iteration  14: 9.776 ns/op
Iteration  15: 9.768 ns/op
Iteration  16: 9.789 ns/op
Iteration  17: 9.789 ns/op
Iteration  18: 9.780 ns/op
Iteration  19: 9.766 ns/op
Iteration  20: 9.789 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.209 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.783 ns/op
# Warmup Iteration   4: 9.796 ns/op
# Warmup Iteration   5: 9.793 ns/op
Iteration   1: 9.787 ns/op
Iteration   2: 9.781 ns/op
Iteration   3: 9.773 ns/op
Iteration   4: 9.785 ns/op
Iteration   5: 9.791 ns/op
Iteration   6: 9.780 ns/op
Iteration   7: 9.781 ns/op
Iteration   8: 9.782 ns/op
Iteration   9: 9.792 ns/op
Iteration  10: 9.772 ns/op
Iteration  11: 9.795 ns/op
Iteration  12: 9.783 ns/op
Iteration  13: 9.786 ns/op
Iteration  14: 9.783 ns/op
Iteration  15: 9.783 ns/op
Iteration  16: 9.776 ns/op
Iteration  17: 9.792 ns/op
Iteration  18: 9.777 ns/op
Iteration  19: 9.784 ns/op
Iteration  20: 9.776 ns/op


Result "benchmark.StringContains.stringContains":
  9.830 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (9.755, 9.830, 9.896), stdev = 0.044
  CI (99.9%): [9.815, 9.845] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpWh1?uZwa}40  avgt  100  265.081 ± 0.763  ns/op
StringContains.stringContains     http  httpWh1?uZwa}40  avgt  100    9.830 ± 0.015  ns/op

Benchmark result is saved to http_16_0_14.csv
