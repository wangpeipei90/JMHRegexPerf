# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpvF[_)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 249.113 ns/op
# Warmup Iteration   2: 193.441 ns/op
# Warmup Iteration   3: 174.233 ns/op
# Warmup Iteration   4: 174.823 ns/op
# Warmup Iteration   5: 175.618 ns/op
Iteration   1: 176.756 ns/op
Iteration   2: 178.392 ns/op
Iteration   3: 172.967 ns/op
Iteration   4: 172.782 ns/op
Iteration   5: 172.724 ns/op
Iteration   6: 171.945 ns/op
Iteration   7: 172.722 ns/op
Iteration   8: 173.860 ns/op
Iteration   9: 172.963 ns/op
Iteration  10: 172.826 ns/op
Iteration  11: 173.055 ns/op
Iteration  12: 175.580 ns/op
Iteration  13: 172.467 ns/op
Iteration  14: 172.714 ns/op
Iteration  15: 172.490 ns/op
Iteration  16: 171.949 ns/op
Iteration  17: 172.488 ns/op
Iteration  18: 172.272 ns/op
Iteration  19: 173.723 ns/op
Iteration  20: 172.723 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 243.445 ns/op
# Warmup Iteration   2: 187.806 ns/op
# Warmup Iteration   3: 173.098 ns/op
# Warmup Iteration   4: 173.582 ns/op
# Warmup Iteration   5: 174.483 ns/op
Iteration   1: 174.999 ns/op
Iteration   2: 176.128 ns/op
Iteration   3: 172.120 ns/op
Iteration   4: 172.052 ns/op
Iteration   5: 172.040 ns/op
Iteration   6: 171.261 ns/op
Iteration   7: 172.069 ns/op
Iteration   8: 172.134 ns/op
Iteration   9: 172.055 ns/op
Iteration  10: 172.109 ns/op
Iteration  11: 172.279 ns/op
Iteration  12: 172.158 ns/op
Iteration  13: 171.871 ns/op
Iteration  14: 171.965 ns/op
Iteration  15: 171.869 ns/op
Iteration  16: 171.934 ns/op
Iteration  17: 172.312 ns/op
Iteration  18: 172.384 ns/op
Iteration  19: 172.153 ns/op
Iteration  20: 172.208 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 229.154 ns/op
# Warmup Iteration   2: 166.292 ns/op
# Warmup Iteration   3: 142.929 ns/op
# Warmup Iteration   4: 142.325 ns/op
# Warmup Iteration   5: 142.978 ns/op
Iteration   1: 143.951 ns/op
Iteration   2: 140.617 ns/op
Iteration   3: 140.692 ns/op
Iteration   4: 140.582 ns/op
Iteration   5: 140.501 ns/op
Iteration   6: 140.607 ns/op
Iteration   7: 141.318 ns/op
Iteration   8: 140.450 ns/op
Iteration   9: 141.188 ns/op
Iteration  10: 140.367 ns/op
Iteration  11: 140.241 ns/op
Iteration  12: 140.464 ns/op
Iteration  13: 140.465 ns/op
Iteration  14: 140.485 ns/op
Iteration  15: 140.393 ns/op
Iteration  16: 140.855 ns/op
Iteration  17: 140.380 ns/op
Iteration  18: 140.520 ns/op
Iteration  19: 140.589 ns/op
Iteration  20: 140.587 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 225.104 ns/op
# Warmup Iteration   2: 159.776 ns/op
# Warmup Iteration   3: 140.586 ns/op
# Warmup Iteration   4: 139.732 ns/op
# Warmup Iteration   5: 140.579 ns/op
Iteration   1: 141.500 ns/op
Iteration   2: 138.103 ns/op
Iteration   3: 138.044 ns/op
Iteration   4: 138.071 ns/op
Iteration   5: 138.637 ns/op
Iteration   6: 138.115 ns/op
Iteration   7: 137.964 ns/op
Iteration   8: 138.814 ns/op
Iteration   9: 138.156 ns/op
Iteration  10: 138.527 ns/op
Iteration  11: 137.753 ns/op
Iteration  12: 137.786 ns/op
Iteration  13: 138.212 ns/op
Iteration  14: 137.766 ns/op
Iteration  15: 137.868 ns/op
Iteration  16: 137.870 ns/op
Iteration  17: 137.906 ns/op
Iteration  18: 137.930 ns/op
Iteration  19: 137.764 ns/op
Iteration  20: 137.866 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 225.803 ns/op
# Warmup Iteration   2: 160.427 ns/op
# Warmup Iteration   3: 140.458 ns/op
# Warmup Iteration   4: 138.663 ns/op
# Warmup Iteration   5: 139.368 ns/op
Iteration   1: 141.343 ns/op
Iteration   2: 137.202 ns/op
Iteration   3: 136.948 ns/op
Iteration   4: 137.033 ns/op
Iteration   5: 137.486 ns/op
Iteration   6: 136.964 ns/op
Iteration   7: 136.918 ns/op
Iteration   8: 136.909 ns/op
Iteration   9: 136.938 ns/op
Iteration  10: 136.487 ns/op
Iteration  11: 136.828 ns/op
Iteration  12: 136.961 ns/op
Iteration  13: 137.676 ns/op
Iteration  14: 136.679 ns/op
Iteration  15: 136.750 ns/op
Iteration  16: 136.576 ns/op
Iteration  17: 136.729 ns/op
Iteration  18: 136.619 ns/op
Iteration  19: 137.272 ns/op
Iteration  20: 136.816 ns/op


Result "benchmark.StringContains.regexMatches":
  152.385 ±(99.9%) 5.733 ns/op [Average]
  (min, avg, max) = (136.487, 152.385, 178.392), stdev = 16.904
  CI (99.9%): [146.652, 158.118] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpvF[_)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.081 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.941 ns/op
# Warmup Iteration   4: 9.903 ns/op
# Warmup Iteration   5: 9.924 ns/op
Iteration   1: 9.915 ns/op
Iteration   2: 9.918 ns/op
Iteration   3: 9.926 ns/op
Iteration   4: 9.930 ns/op
Iteration   5: 9.926 ns/op
Iteration   6: 9.924 ns/op
Iteration   7: 9.913 ns/op
Iteration   8: 9.900 ns/op
Iteration   9: 9.914 ns/op
Iteration  10: 9.916 ns/op
Iteration  11: 9.897 ns/op
Iteration  12: 9.907 ns/op
Iteration  13: 9.916 ns/op
Iteration  14: 9.918 ns/op
Iteration  15: 9.896 ns/op
Iteration  16: 9.885 ns/op
Iteration  17: 9.888 ns/op
Iteration  18: 9.914 ns/op
Iteration  19: 9.892 ns/op
Iteration  20: 9.875 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.060 ns/op
# Warmup Iteration   2: 10.456 ns/op
# Warmup Iteration   3: 9.884 ns/op
# Warmup Iteration   4: 9.894 ns/op
# Warmup Iteration   5: 9.881 ns/op
Iteration   1: 9.880 ns/op
Iteration   2: 9.875 ns/op
Iteration   3: 9.902 ns/op
Iteration   4: 9.898 ns/op
Iteration   5: 9.888 ns/op
Iteration   6: 9.887 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.904 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.902 ns/op
Iteration  11: 9.902 ns/op
Iteration  12: 9.890 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.881 ns/op
Iteration  15: 9.885 ns/op
Iteration  16: 9.890 ns/op
Iteration  17: 9.894 ns/op
Iteration  18: 9.886 ns/op
Iteration  19: 9.891 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.093 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 10.050 ns/op
# Warmup Iteration   4: 10.050 ns/op
# Warmup Iteration   5: 10.048 ns/op
Iteration   1: 10.048 ns/op
Iteration   2: 10.045 ns/op
Iteration   3: 10.045 ns/op
Iteration   4: 10.046 ns/op
Iteration   5: 10.041 ns/op
Iteration   6: 10.043 ns/op
Iteration   7: 10.047 ns/op
Iteration   8: 10.047 ns/op
Iteration   9: 10.044 ns/op
Iteration  10: 10.047 ns/op
Iteration  11: 10.047 ns/op
Iteration  12: 10.040 ns/op
Iteration  13: 10.052 ns/op
Iteration  14: 10.042 ns/op
Iteration  15: 10.044 ns/op
Iteration  16: 10.046 ns/op
Iteration  17: 10.041 ns/op
Iteration  18: 10.041 ns/op
Iteration  19: 10.044 ns/op
Iteration  20: 10.044 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.064 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.902 ns/op
# Warmup Iteration   4: 9.890 ns/op
# Warmup Iteration   5: 9.896 ns/op
Iteration   1: 9.889 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.897 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.898 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.906 ns/op
Iteration  10: 9.884 ns/op
Iteration  11: 9.895 ns/op
Iteration  12: 9.887 ns/op
Iteration  13: 9.877 ns/op
Iteration  14: 9.865 ns/op
Iteration  15: 9.875 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.872 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.866 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.060 ns/op
# Warmup Iteration   2: 10.462 ns/op
# Warmup Iteration   3: 9.938 ns/op
# Warmup Iteration   4: 9.924 ns/op
# Warmup Iteration   5: 9.916 ns/op
Iteration   1: 9.911 ns/op
Iteration   2: 9.901 ns/op
Iteration   3: 9.909 ns/op
Iteration   4: 9.917 ns/op
Iteration   5: 9.909 ns/op
Iteration   6: 9.907 ns/op
Iteration   7: 9.914 ns/op
Iteration   8: 9.914 ns/op
Iteration   9: 9.930 ns/op
Iteration  10: 9.919 ns/op
Iteration  11: 9.915 ns/op
Iteration  12: 9.913 ns/op
Iteration  13: 9.913 ns/op
Iteration  14: 9.914 ns/op
Iteration  15: 9.935 ns/op
Iteration  16: 9.908 ns/op
Iteration  17: 9.900 ns/op
Iteration  18: 9.910 ns/op
Iteration  19: 9.915 ns/op
Iteration  20: 9.916 ns/op


Result "benchmark.StringContains.stringContains":
  9.928 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (9.865, 9.928, 10.052), stdev = 0.060
  CI (99.9%): [9.908, 9.949] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpvF[_  avgt  100  152.385 ± 5.733  ns/op
StringContains.stringContains     http  httpvF[_  avgt  100    9.928 ± 0.020  ns/op

Benchmark result is saved to http_8_0_3.csv
