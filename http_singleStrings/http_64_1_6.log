# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ~vC2{Otoh,Q2K]t)+?2w&isi']r muV20S$`0&7#XTl]pv^IFT

BpC9f-Z@;Cr)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 473.072 ns/op
# Warmup Iteration   2: 465.482 ns/op
# Warmup Iteration   3: 450.996 ns/op
# Warmup Iteration   4: 386.382 ns/op
# Warmup Iteration   5: 389.701 ns/op
Iteration   1: 386.204 ns/op
Iteration   2: 386.291 ns/op
Iteration   3: 391.098 ns/op
Iteration   4: 386.200 ns/op
Iteration   5: 392.937 ns/op
Iteration   6: 386.237 ns/op
Iteration   7: 394.759 ns/op
Iteration   8: 386.324 ns/op
Iteration   9: 386.335 ns/op
Iteration  10: 397.176 ns/op
Iteration  11: 386.079 ns/op
Iteration  12: 387.839 ns/op
Iteration  13: 386.202 ns/op
Iteration  14: 386.299 ns/op
Iteration  15: 388.071 ns/op
Iteration  16: 386.299 ns/op
Iteration  17: 387.993 ns/op
Iteration  18: 386.172 ns/op
Iteration  19: 386.131 ns/op
Iteration  20: 389.557 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 470.529 ns/op
# Warmup Iteration   2: 463.186 ns/op
# Warmup Iteration   3: 449.639 ns/op
# Warmup Iteration   4: 391.567 ns/op
# Warmup Iteration   5: 393.898 ns/op
Iteration   1: 390.278 ns/op
Iteration   2: 390.457 ns/op
Iteration   3: 394.982 ns/op
Iteration   4: 390.212 ns/op
Iteration   5: 396.619 ns/op
Iteration   6: 390.116 ns/op
Iteration   7: 398.470 ns/op
Iteration   8: 390.362 ns/op
Iteration   9: 390.195 ns/op
Iteration  10: 400.627 ns/op
Iteration  11: 390.058 ns/op
Iteration  12: 392.301 ns/op
Iteration  13: 390.212 ns/op
Iteration  14: 390.195 ns/op
Iteration  15: 392.081 ns/op
Iteration  16: 390.159 ns/op
Iteration  17: 392.134 ns/op
Iteration  18: 390.199 ns/op
Iteration  19: 390.163 ns/op
Iteration  20: 392.337 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 464.492 ns/op
# Warmup Iteration   2: 455.569 ns/op
# Warmup Iteration   3: 435.889 ns/op
# Warmup Iteration   4: 373.014 ns/op
# Warmup Iteration   5: 377.107 ns/op
Iteration   1: 372.110 ns/op
Iteration   2: 376.900 ns/op
Iteration   3: 368.936 ns/op
Iteration   4: 372.563 ns/op
Iteration   5: 379.713 ns/op
Iteration   6: 373.908 ns/op
Iteration   7: 381.855 ns/op
Iteration   8: 373.132 ns/op
Iteration   9: 383.839 ns/op
Iteration  10: 369.335 ns/op
Iteration  11: 371.602 ns/op
Iteration  12: 374.640 ns/op
Iteration  13: 373.300 ns/op
Iteration  14: 371.424 ns/op
Iteration  15: 367.464 ns/op
Iteration  16: 372.473 ns/op
Iteration  17: 373.857 ns/op
Iteration  18: 367.201 ns/op
Iteration  19: 371.966 ns/op
Iteration  20: 373.235 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 471.659 ns/op
# Warmup Iteration   2: 466.783 ns/op
# Warmup Iteration   3: 448.059 ns/op
# Warmup Iteration   4: 385.814 ns/op
# Warmup Iteration   5: 389.474 ns/op
Iteration   1: 385.668 ns/op
Iteration   2: 385.700 ns/op
Iteration   3: 390.492 ns/op
Iteration   4: 385.655 ns/op
Iteration   5: 392.017 ns/op
Iteration   6: 385.643 ns/op
Iteration   7: 394.848 ns/op
Iteration   8: 386.915 ns/op
Iteration   9: 386.306 ns/op
Iteration  10: 396.460 ns/op
Iteration  11: 385.782 ns/op
Iteration  12: 388.548 ns/op
Iteration  13: 385.781 ns/op
Iteration  14: 385.678 ns/op
Iteration  15: 387.703 ns/op
Iteration  16: 385.664 ns/op
Iteration  17: 387.427 ns/op
Iteration  18: 385.639 ns/op
Iteration  19: 385.699 ns/op
Iteration  20: 387.705 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 527.516 ns/op
# Warmup Iteration   2: 523.643 ns/op
# Warmup Iteration   3: 517.628 ns/op
# Warmup Iteration   4: 455.595 ns/op
# Warmup Iteration   5: 443.782 ns/op
Iteration   1: 445.482 ns/op
Iteration   2: 441.653 ns/op
Iteration   3: 442.169 ns/op
Iteration   4: 448.238 ns/op
Iteration   5: 443.035 ns/op
Iteration   6: 451.014 ns/op
Iteration   7: 442.362 ns/op
Iteration   8: 442.183 ns/op
Iteration   9: 451.639 ns/op
Iteration  10: 443.534 ns/op
Iteration  11: 443.827 ns/op
Iteration  12: 453.390 ns/op
Iteration  13: 441.862 ns/op
Iteration  14: 443.896 ns/op
Iteration  15: 443.678 ns/op
Iteration  16: 441.290 ns/op
Iteration  17: 442.070 ns/op
Iteration  18: 444.551 ns/op
Iteration  19: 441.194 ns/op
Iteration  20: 444.834 ns/op


Result "benchmark.StringContains.regexMatches":
  397.230 ±(99.9%) 8.439 ns/op [Average]
  (min, avg, max) = (367.201, 397.230, 453.390), stdev = 24.882
  CI (99.9%): [388.792, 405.669] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ~vC2{Otoh,Q2K]t)+?2w&isi']r muV20S$`0&7#XTl]pv^IFT

BpC9f-Z@;Cr)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.503 ns/op
# Warmup Iteration   2: 15.784 ns/op
# Warmup Iteration   3: 16.023 ns/op
# Warmup Iteration   4: 16.019 ns/op
# Warmup Iteration   5: 16.019 ns/op
Iteration   1: 16.021 ns/op
Iteration   2: 16.020 ns/op
Iteration   3: 16.310 ns/op
Iteration   4: 16.019 ns/op
Iteration   5: 16.019 ns/op
Iteration   6: 16.021 ns/op
Iteration   7: 16.020 ns/op
Iteration   8: 16.045 ns/op
Iteration   9: 16.020 ns/op
Iteration  10: 16.019 ns/op
Iteration  11: 16.021 ns/op
Iteration  12: 17.510 ns/op
Iteration  13: 17.516 ns/op
Iteration  14: 17.514 ns/op
Iteration  15: 17.514 ns/op
Iteration  16: 17.517 ns/op
Iteration  17: 17.512 ns/op
Iteration  18: 17.517 ns/op
Iteration  19: 17.515 ns/op
Iteration  20: 17.545 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.392 ns/op
# Warmup Iteration   2: 15.701 ns/op
# Warmup Iteration   3: 16.053 ns/op
# Warmup Iteration   4: 16.055 ns/op
# Warmup Iteration   5: 16.056 ns/op
Iteration   1: 16.056 ns/op
Iteration   2: 16.054 ns/op
Iteration   3: 16.055 ns/op
Iteration   4: 16.054 ns/op
Iteration   5: 16.055 ns/op
Iteration   6: 16.061 ns/op
Iteration   7: 16.056 ns/op
Iteration   8: 16.056 ns/op
Iteration   9: 16.056 ns/op
Iteration  10: 16.055 ns/op
Iteration  11: 16.058 ns/op
Iteration  12: 16.056 ns/op
Iteration  13: 16.055 ns/op
Iteration  14: 16.056 ns/op
Iteration  15: 16.055 ns/op
Iteration  16: 16.058 ns/op
Iteration  17: 16.057 ns/op
Iteration  18: 16.056 ns/op
Iteration  19: 16.055 ns/op
Iteration  20: 16.056 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.459 ns/op
# Warmup Iteration   2: 15.734 ns/op
# Warmup Iteration   3: 16.020 ns/op
# Warmup Iteration   4: 16.020 ns/op
# Warmup Iteration   5: 16.020 ns/op
Iteration   1: 16.018 ns/op
Iteration   2: 16.020 ns/op
Iteration   3: 16.310 ns/op
Iteration   4: 16.020 ns/op
Iteration   5: 16.020 ns/op
Iteration   6: 16.022 ns/op
Iteration   7: 16.019 ns/op
Iteration   8: 16.023 ns/op
Iteration   9: 16.020 ns/op
Iteration  10: 16.021 ns/op
Iteration  11: 16.021 ns/op
Iteration  12: 17.515 ns/op
Iteration  13: 17.516 ns/op
Iteration  14: 17.514 ns/op
Iteration  15: 17.512 ns/op
Iteration  16: 17.514 ns/op
Iteration  17: 17.514 ns/op
Iteration  18: 17.516 ns/op
Iteration  19: 17.514 ns/op
Iteration  20: 17.517 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.433 ns/op
# Warmup Iteration   2: 15.713 ns/op
# Warmup Iteration   3: 16.056 ns/op
# Warmup Iteration   4: 16.055 ns/op
# Warmup Iteration   5: 16.058 ns/op
Iteration   1: 16.055 ns/op
Iteration   2: 16.052 ns/op
Iteration   3: 16.049 ns/op
Iteration   4: 16.049 ns/op
Iteration   5: 16.051 ns/op
Iteration   6: 16.049 ns/op
Iteration   7: 16.048 ns/op
Iteration   8: 16.076 ns/op
Iteration   9: 16.049 ns/op
Iteration  10: 16.048 ns/op
Iteration  11: 16.049 ns/op
Iteration  12: 16.050 ns/op
Iteration  13: 16.049 ns/op
Iteration  14: 16.050 ns/op
Iteration  15: 16.049 ns/op
Iteration  16: 16.050 ns/op
Iteration  17: 16.048 ns/op
Iteration  18: 16.047 ns/op
Iteration  19: 16.049 ns/op
Iteration  20: 16.050 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.317 ns/op
# Warmup Iteration   2: 15.704 ns/op
# Warmup Iteration   3: 16.055 ns/op
# Warmup Iteration   4: 16.053 ns/op
# Warmup Iteration   5: 16.056 ns/op
Iteration   1: 16.055 ns/op
Iteration   2: 16.056 ns/op
Iteration   3: 16.057 ns/op
Iteration   4: 16.056 ns/op
Iteration   5: 16.054 ns/op
Iteration   6: 16.053 ns/op
Iteration   7: 16.053 ns/op
Iteration   8: 16.055 ns/op
Iteration   9: 16.056 ns/op
Iteration  10: 16.055 ns/op
Iteration  11: 16.058 ns/op
Iteration  12: 16.060 ns/op
Iteration  13: 16.057 ns/op
Iteration  14: 16.055 ns/op
Iteration  15: 16.055 ns/op
Iteration  16: 16.056 ns/op
Iteration  17: 16.057 ns/op
Iteration  18: 16.056 ns/op
Iteration  19: 16.054 ns/op
Iteration  20: 16.056 ns/op


Result "benchmark.StringContains.stringContains":
  16.316 ±(99.9%) 0.192 ns/op [Average]
  (min, avg, max) = (16.018, 16.316, 17.545), stdev = 0.567
  CI (99.9%): [16.124, 16.508] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ~vC2{Otoh,Q2K]t)+?2w&isi']r muV20S$`0&7#XTl]pv^IFT

BpC9f-Z@;Cr  avgt  100  397.230 ± 8.439  ns/op
StringContains.stringContains     http  ~vC2{Otoh,Q2K]t)+?2w&isi']r muV20S$`0&7#XTl]pv^IFT

BpC9f-Z@;Cr  avgt  100   16.316 ± 0.192  ns/op

Benchmark result is saved to http_64_1_6.csv
