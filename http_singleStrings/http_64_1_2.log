# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ]wZ,YutNS:U^+dX}fB7Y!-mok[jsT4]6/H/_$i.1LDvWPV^c@!zxAs:uoB!VrP)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 275.083 ns/op
# Warmup Iteration   2: 233.052 ns/op
# Warmup Iteration   3: 188.172 ns/op
# Warmup Iteration   4: 188.890 ns/op
# Warmup Iteration   5: 189.338 ns/op
Iteration   1: 187.149 ns/op
Iteration   2: 189.753 ns/op
Iteration   3: 191.501 ns/op
Iteration   4: 187.249 ns/op
Iteration   5: 187.230 ns/op
Iteration   6: 187.244 ns/op
Iteration   7: 186.302 ns/op
Iteration   8: 187.309 ns/op
Iteration   9: 187.145 ns/op
Iteration  10: 187.180 ns/op
Iteration  11: 187.231 ns/op
Iteration  12: 189.568 ns/op
Iteration  13: 186.349 ns/op
Iteration  14: 187.410 ns/op
Iteration  15: 187.092 ns/op
Iteration  16: 187.241 ns/op
Iteration  17: 186.811 ns/op
Iteration  18: 187.164 ns/op
Iteration  19: 186.356 ns/op
Iteration  20: 187.213 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 259.374 ns/op
# Warmup Iteration   2: 212.036 ns/op
# Warmup Iteration   3: 174.937 ns/op
# Warmup Iteration   4: 175.127 ns/op
# Warmup Iteration   5: 175.953 ns/op
Iteration   1: 176.713 ns/op
Iteration   2: 177.512 ns/op
Iteration   3: 173.779 ns/op
Iteration   4: 172.954 ns/op
Iteration   5: 173.743 ns/op
Iteration   6: 173.657 ns/op
Iteration   7: 173.653 ns/op
Iteration   8: 173.754 ns/op
Iteration   9: 173.595 ns/op
Iteration  10: 173.719 ns/op
Iteration  11: 173.750 ns/op
Iteration  12: 173.752 ns/op
Iteration  13: 173.414 ns/op
Iteration  14: 172.961 ns/op
Iteration  15: 174.312 ns/op
Iteration  16: 175.290 ns/op
Iteration  17: 175.957 ns/op
Iteration  18: 173.460 ns/op
Iteration  19: 173.438 ns/op
Iteration  20: 173.455 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 256.415 ns/op
# Warmup Iteration   2: 210.187 ns/op
# Warmup Iteration   3: 175.008 ns/op
# Warmup Iteration   4: 175.531 ns/op
# Warmup Iteration   5: 176.216 ns/op
Iteration   1: 177.245 ns/op
Iteration   2: 178.243 ns/op
Iteration   3: 173.886 ns/op
Iteration   4: 173.222 ns/op
Iteration   5: 174.083 ns/op
Iteration   6: 173.939 ns/op
Iteration   7: 173.915 ns/op
Iteration   8: 173.963 ns/op
Iteration   9: 173.950 ns/op
Iteration  10: 174.000 ns/op
Iteration  11: 174.146 ns/op
Iteration  12: 174.168 ns/op
Iteration  13: 174.109 ns/op
Iteration  14: 173.258 ns/op
Iteration  15: 173.552 ns/op
Iteration  16: 173.646 ns/op
Iteration  17: 173.886 ns/op
Iteration  18: 173.786 ns/op
Iteration  19: 174.897 ns/op
Iteration  20: 174.024 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 268.037 ns/op
# Warmup Iteration   2: 227.805 ns/op
# Warmup Iteration   3: 187.019 ns/op
# Warmup Iteration   4: 187.570 ns/op
# Warmup Iteration   5: 188.388 ns/op
Iteration   1: 189.379 ns/op
Iteration   2: 185.262 ns/op
Iteration   3: 190.803 ns/op
Iteration   4: 186.126 ns/op
Iteration   5: 186.079 ns/op
Iteration   6: 186.231 ns/op
Iteration   7: 186.199 ns/op
Iteration   8: 185.426 ns/op
Iteration   9: 185.999 ns/op
Iteration  10: 188.232 ns/op
Iteration  11: 187.773 ns/op
Iteration  12: 186.106 ns/op
Iteration  13: 187.054 ns/op
Iteration  14: 185.260 ns/op
Iteration  15: 185.465 ns/op
Iteration  16: 185.827 ns/op
Iteration  17: 185.910 ns/op
Iteration  18: 185.722 ns/op
Iteration  19: 185.748 ns/op
Iteration  20: 185.216 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 270.133 ns/op
# Warmup Iteration   2: 230.727 ns/op
# Warmup Iteration   3: 188.651 ns/op
# Warmup Iteration   4: 189.229 ns/op
# Warmup Iteration   5: 191.086 ns/op
Iteration   1: 190.048 ns/op
Iteration   2: 188.370 ns/op
Iteration   3: 192.058 ns/op
Iteration   4: 187.999 ns/op
Iteration   5: 187.817 ns/op
Iteration   6: 187.855 ns/op
Iteration   7: 186.911 ns/op
Iteration   8: 187.767 ns/op
Iteration   9: 187.736 ns/op
Iteration  10: 187.716 ns/op
Iteration  11: 187.630 ns/op
Iteration  12: 187.554 ns/op
Iteration  13: 186.750 ns/op
Iteration  14: 187.619 ns/op
Iteration  15: 187.196 ns/op
Iteration  16: 187.187 ns/op
Iteration  17: 187.305 ns/op
Iteration  18: 187.343 ns/op
Iteration  19: 186.776 ns/op
Iteration  20: 187.462 ns/op


Result "benchmark.StringContains.regexMatches":
  182.062 ±(99.9%) 2.230 ns/op [Average]
  (min, avg, max) = (172.954, 182.062, 192.058), stdev = 6.575
  CI (99.9%): [179.832, 184.292] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ]wZ,YutNS:U^+dX}fB7Y!-mok[jsT4]6/H/_$i.1LDvWPV^c@!zxAs:uoB!VrP)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.398 ns/op
# Warmup Iteration   2: 15.681 ns/op
# Warmup Iteration   3: 16.055 ns/op
# Warmup Iteration   4: 16.045 ns/op
# Warmup Iteration   5: 16.044 ns/op
Iteration   1: 16.053 ns/op
Iteration   2: 16.043 ns/op
Iteration   3: 16.289 ns/op
Iteration   4: 16.051 ns/op
Iteration   5: 16.045 ns/op
Iteration   6: 16.045 ns/op
Iteration   7: 16.045 ns/op
Iteration   8: 16.045 ns/op
Iteration   9: 16.047 ns/op
Iteration  10: 16.048 ns/op
Iteration  11: 16.048 ns/op
Iteration  12: 16.060 ns/op
Iteration  13: 16.048 ns/op
Iteration  14: 16.044 ns/op
Iteration  15: 16.044 ns/op
Iteration  16: 16.046 ns/op
Iteration  17: 16.055 ns/op
Iteration  18: 16.044 ns/op
Iteration  19: 16.044 ns/op
Iteration  20: 16.046 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.324 ns/op
# Warmup Iteration   2: 15.735 ns/op
# Warmup Iteration   3: 16.059 ns/op
# Warmup Iteration   4: 16.058 ns/op
# Warmup Iteration   5: 16.059 ns/op
Iteration   1: 16.059 ns/op
Iteration   2: 16.062 ns/op
Iteration   3: 16.057 ns/op
Iteration   4: 16.061 ns/op
Iteration   5: 16.062 ns/op
Iteration   6: 16.057 ns/op
Iteration   7: 16.058 ns/op
Iteration   8: 16.084 ns/op
Iteration   9: 16.059 ns/op
Iteration  10: 16.059 ns/op
Iteration  11: 16.058 ns/op
Iteration  12: 16.057 ns/op
Iteration  13: 16.057 ns/op
Iteration  14: 16.057 ns/op
Iteration  15: 16.059 ns/op
Iteration  16: 16.057 ns/op
Iteration  17: 16.058 ns/op
Iteration  18: 16.060 ns/op
Iteration  19: 16.055 ns/op
Iteration  20: 16.087 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.494 ns/op
# Warmup Iteration   2: 15.757 ns/op
# Warmup Iteration   3: 16.022 ns/op
# Warmup Iteration   4: 16.020 ns/op
# Warmup Iteration   5: 16.022 ns/op
Iteration   1: 16.025 ns/op
Iteration   2: 16.023 ns/op
Iteration   3: 16.312 ns/op
Iteration   4: 16.021 ns/op
Iteration   5: 16.021 ns/op
Iteration   6: 16.022 ns/op
Iteration   7: 16.022 ns/op
Iteration   8: 16.050 ns/op
Iteration   9: 16.022 ns/op
Iteration  10: 16.021 ns/op
Iteration  11: 16.028 ns/op
Iteration  12: 17.506 ns/op
Iteration  13: 17.516 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.518 ns/op
Iteration  16: 17.506 ns/op
Iteration  17: 17.519 ns/op
Iteration  18: 17.518 ns/op
Iteration  19: 17.517 ns/op
Iteration  20: 17.545 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.402 ns/op
# Warmup Iteration   2: 15.735 ns/op
# Warmup Iteration   3: 16.020 ns/op
# Warmup Iteration   4: 16.023 ns/op
# Warmup Iteration   5: 16.022 ns/op
Iteration   1: 16.021 ns/op
Iteration   2: 16.023 ns/op
Iteration   3: 16.021 ns/op
Iteration   4: 16.022 ns/op
Iteration   5: 16.022 ns/op
Iteration   6: 16.022 ns/op
Iteration   7: 16.021 ns/op
Iteration   8: 16.021 ns/op
Iteration   9: 16.025 ns/op
Iteration  10: 16.022 ns/op
Iteration  11: 16.022 ns/op
Iteration  12: 17.518 ns/op
Iteration  13: 17.510 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.518 ns/op
Iteration  16: 17.516 ns/op
Iteration  17: 17.517 ns/op
Iteration  18: 17.513 ns/op
Iteration  19: 17.518 ns/op
Iteration  20: 17.519 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.502 ns/op
# Warmup Iteration   2: 15.749 ns/op
# Warmup Iteration   3: 16.038 ns/op
# Warmup Iteration   4: 16.034 ns/op
# Warmup Iteration   5: 16.036 ns/op
Iteration   1: 16.036 ns/op
Iteration   2: 16.032 ns/op
Iteration   3: 16.036 ns/op
Iteration   4: 16.037 ns/op
Iteration   5: 16.036 ns/op
Iteration   6: 16.034 ns/op
Iteration   7: 16.033 ns/op
Iteration   8: 16.037 ns/op
Iteration   9: 16.033 ns/op
Iteration  10: 16.034 ns/op
Iteration  11: 16.039 ns/op
Iteration  12: 17.521 ns/op
Iteration  13: 17.522 ns/op
Iteration  14: 17.521 ns/op
Iteration  15: 17.523 ns/op
Iteration  16: 17.523 ns/op
Iteration  17: 17.523 ns/op
Iteration  18: 17.523 ns/op
Iteration  19: 17.521 ns/op
Iteration  20: 17.524 ns/op


Result "benchmark.StringContains.stringContains":
  16.446 ±(99.9%) 0.223 ns/op [Average]
  (min, avg, max) = (16.021, 16.446, 17.545), stdev = 0.657
  CI (99.9%): [16.223, 16.669] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ]wZ,YutNS:U^+dX}fB7Y!-mok[jsT4]6/H/_$i.1LDvWPV^c@!zxAs:uoB!VrP  avgt  100  182.062 ± 2.230  ns/op
StringContains.stringContains     http  ]wZ,YutNS:U^+dX}fB7Y!-mok[jsT4]6/H/_$i.1LDvWPV^c@!zxAs:uoB!VrP  avgt  100   16.446 ± 0.223  ns/op

Benchmark result is saved to http_64_1_2.csv
