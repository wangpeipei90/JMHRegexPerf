# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = [VLL\}H?Zk?~f( http@+x<MVlop.c
wc'WA8bj:2=9P#Jqn7Vlpo43Wpc>&M\)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 673.684 ns/op
# Warmup Iteration   2: 698.890 ns/op
# Warmup Iteration   3: 700.028 ns/op
# Warmup Iteration   4: 699.726 ns/op
# Warmup Iteration   5: 633.852 ns/op
Iteration   1: 618.046 ns/op
Iteration   2: 617.882 ns/op
Iteration   3: 623.410 ns/op
Iteration   4: 617.831 ns/op
Iteration   5: 617.427 ns/op
Iteration   6: 617.697 ns/op
Iteration   7: 624.902 ns/op
Iteration   8: 617.370 ns/op
Iteration   9: 617.536 ns/op
Iteration  10: 628.488 ns/op
Iteration  11: 616.986 ns/op
Iteration  12: 616.709 ns/op
Iteration  13: 616.686 ns/op
Iteration  14: 631.229 ns/op
Iteration  15: 617.245 ns/op
Iteration  16: 617.826 ns/op
Iteration  17: 617.905 ns/op
Iteration  18: 636.686 ns/op
Iteration  19: 617.245 ns/op
Iteration  20: 618.142 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 669.571 ns/op
# Warmup Iteration   2: 689.404 ns/op
# Warmup Iteration   3: 690.033 ns/op
# Warmup Iteration   4: 690.067 ns/op
# Warmup Iteration   5: 629.021 ns/op
Iteration   1: 617.358 ns/op
Iteration   2: 617.227 ns/op
Iteration   3: 621.913 ns/op
Iteration   4: 616.805 ns/op
Iteration   5: 615.673 ns/op
Iteration   6: 616.284 ns/op
Iteration   7: 622.870 ns/op
Iteration   8: 616.579 ns/op
Iteration   9: 616.290 ns/op
Iteration  10: 625.829 ns/op
Iteration  11: 616.139 ns/op
Iteration  12: 616.545 ns/op
Iteration  13: 616.614 ns/op
Iteration  14: 632.820 ns/op
Iteration  15: 616.297 ns/op
Iteration  16: 616.637 ns/op
Iteration  17: 616.197 ns/op
Iteration  18: 635.702 ns/op
Iteration  19: 620.760 ns/op
Iteration  20: 621.663 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 672.666 ns/op
# Warmup Iteration   2: 686.917 ns/op
# Warmup Iteration   3: 689.477 ns/op
# Warmup Iteration   4: 689.393 ns/op
# Warmup Iteration   5: 626.742 ns/op
Iteration   1: 615.024 ns/op
Iteration   2: 614.874 ns/op
Iteration   3: 620.389 ns/op
Iteration   4: 614.784 ns/op
Iteration   5: 614.553 ns/op
Iteration   6: 615.051 ns/op
Iteration   7: 622.094 ns/op
Iteration   8: 614.802 ns/op
Iteration   9: 614.547 ns/op
Iteration  10: 624.898 ns/op
Iteration  11: 614.781 ns/op
Iteration  12: 614.545 ns/op
Iteration  13: 614.428 ns/op
Iteration  14: 627.719 ns/op
Iteration  15: 614.315 ns/op
Iteration  16: 614.395 ns/op
Iteration  17: 614.630 ns/op
Iteration  18: 631.556 ns/op
Iteration  19: 614.295 ns/op
Iteration  20: 614.378 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 671.313 ns/op
# Warmup Iteration   2: 687.586 ns/op
# Warmup Iteration   3: 689.632 ns/op
# Warmup Iteration   4: 689.858 ns/op
# Warmup Iteration   5: 626.344 ns/op
Iteration   1: 614.406 ns/op
Iteration   2: 614.211 ns/op
Iteration   3: 624.761 ns/op
Iteration   4: 613.977 ns/op
Iteration   5: 613.764 ns/op
Iteration   6: 614.137 ns/op
Iteration   7: 621.623 ns/op
Iteration   8: 614.325 ns/op
Iteration   9: 613.944 ns/op
Iteration  10: 626.690 ns/op
Iteration  11: 615.681 ns/op
Iteration  12: 615.594 ns/op
Iteration  13: 615.512 ns/op
Iteration  14: 627.564 ns/op
Iteration  15: 614.112 ns/op
Iteration  16: 614.092 ns/op
Iteration  17: 614.188 ns/op
Iteration  18: 631.167 ns/op
Iteration  19: 614.239 ns/op
Iteration  20: 614.288 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 664.967 ns/op
# Warmup Iteration   2: 688.745 ns/op
# Warmup Iteration   3: 690.405 ns/op
# Warmup Iteration   4: 690.439 ns/op
# Warmup Iteration   5: 628.035 ns/op
Iteration   1: 616.007 ns/op
Iteration   2: 616.200 ns/op
Iteration   3: 622.407 ns/op
Iteration   4: 616.186 ns/op
Iteration   5: 616.191 ns/op
Iteration   6: 616.398 ns/op
Iteration   7: 624.268 ns/op
Iteration   8: 616.100 ns/op
Iteration   9: 616.411 ns/op
Iteration  10: 626.863 ns/op
Iteration  11: 616.093 ns/op
Iteration  12: 616.271 ns/op
Iteration  13: 616.209 ns/op
Iteration  14: 629.902 ns/op
Iteration  15: 616.239 ns/op
Iteration  16: 616.176 ns/op
Iteration  17: 616.190 ns/op
Iteration  18: 633.279 ns/op
Iteration  19: 615.798 ns/op
Iteration  20: 616.168 ns/op


Result "benchmark.StringContains.regexMatches":
  618.771 ±(99.9%) 1.874 ns/op [Average]
  (min, avg, max) = (613.764, 618.771, 636.686), stdev = 5.525
  CI (99.9%): [616.898, 620.645] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = [VLL\}H?Zk?~f( http@+x<MVlop.c
wc'WA8bj:2=9P#Jqn7Vlpo43Wpc>&M\)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.294 ns/op
# Warmup Iteration   2: 12.498 ns/op
# Warmup Iteration   3: 12.123 ns/op
# Warmup Iteration   4: 12.129 ns/op
# Warmup Iteration   5: 12.155 ns/op
Iteration   1: 12.140 ns/op
Iteration   2: 12.141 ns/op
Iteration   3: 12.127 ns/op
Iteration   4: 12.139 ns/op
Iteration   5: 12.137 ns/op
Iteration   6: 12.138 ns/op
Iteration   7: 12.121 ns/op
Iteration   8: 12.130 ns/op
Iteration   9: 12.116 ns/op
Iteration  10: 12.128 ns/op
Iteration  11: 12.144 ns/op
Iteration  12: 12.125 ns/op
Iteration  13: 12.130 ns/op
Iteration  14: 12.141 ns/op
Iteration  15: 12.136 ns/op
Iteration  16: 12.131 ns/op
Iteration  17: 12.142 ns/op
Iteration  18: 12.127 ns/op
Iteration  19: 12.127 ns/op
Iteration  20: 12.144 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.302 ns/op
# Warmup Iteration   2: 12.468 ns/op
# Warmup Iteration   3: 12.135 ns/op
# Warmup Iteration   4: 12.111 ns/op
# Warmup Iteration   5: 12.123 ns/op
Iteration   1: 12.125 ns/op
Iteration   2: 12.119 ns/op
Iteration   3: 12.129 ns/op
Iteration   4: 12.107 ns/op
Iteration   5: 12.116 ns/op
Iteration   6: 12.121 ns/op
Iteration   7: 12.114 ns/op
Iteration   8: 12.124 ns/op
Iteration   9: 12.129 ns/op
Iteration  10: 12.102 ns/op
Iteration  11: 12.128 ns/op
Iteration  12: 12.129 ns/op
Iteration  13: 12.138 ns/op
Iteration  14: 12.141 ns/op
Iteration  15: 12.157 ns/op
Iteration  16: 12.130 ns/op
Iteration  17: 12.132 ns/op
Iteration  18: 12.148 ns/op
Iteration  19: 12.139 ns/op
Iteration  20: 12.146 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.340 ns/op
# Warmup Iteration   2: 12.514 ns/op
# Warmup Iteration   3: 12.117 ns/op
# Warmup Iteration   4: 12.165 ns/op
# Warmup Iteration   5: 12.157 ns/op
Iteration   1: 12.145 ns/op
Iteration   2: 12.160 ns/op
Iteration   3: 12.157 ns/op
Iteration   4: 12.148 ns/op
Iteration   5: 12.140 ns/op
Iteration   6: 12.157 ns/op
Iteration   7: 12.150 ns/op
Iteration   8: 12.170 ns/op
Iteration   9: 12.139 ns/op
Iteration  10: 12.134 ns/op
Iteration  11: 12.153 ns/op
Iteration  12: 12.163 ns/op
Iteration  13: 12.163 ns/op
Iteration  14: 12.147 ns/op
Iteration  15: 12.159 ns/op
Iteration  16: 12.162 ns/op
Iteration  17: 12.167 ns/op
Iteration  18: 12.156 ns/op
Iteration  19: 12.157 ns/op
Iteration  20: 12.182 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.264 ns/op
# Warmup Iteration   2: 12.606 ns/op
# Warmup Iteration   3: 12.318 ns/op
# Warmup Iteration   4: 12.327 ns/op
# Warmup Iteration   5: 12.313 ns/op
Iteration   1: 12.321 ns/op
Iteration   2: 12.323 ns/op
Iteration   3: 12.332 ns/op
Iteration   4: 12.346 ns/op
Iteration   5: 12.305 ns/op
Iteration   6: 12.318 ns/op
Iteration   7: 12.332 ns/op
Iteration   8: 12.338 ns/op
Iteration   9: 12.328 ns/op
Iteration  10: 12.341 ns/op
Iteration  11: 12.329 ns/op
Iteration  12: 12.313 ns/op
Iteration  13: 12.308 ns/op
Iteration  14: 12.320 ns/op
Iteration  15: 12.292 ns/op
Iteration  16: 12.289 ns/op
Iteration  17: 12.329 ns/op
Iteration  18: 12.321 ns/op
Iteration  19: 12.321 ns/op
Iteration  20: 12.289 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.994 ns/op
# Warmup Iteration   2: 12.546 ns/op
# Warmup Iteration   3: 12.120 ns/op
# Warmup Iteration   4: 12.125 ns/op
# Warmup Iteration   5: 12.109 ns/op
Iteration   1: 12.121 ns/op
Iteration   2: 12.124 ns/op
Iteration   3: 12.128 ns/op
Iteration   4: 12.123 ns/op
Iteration   5: 12.113 ns/op
Iteration   6: 12.117 ns/op
Iteration   7: 12.114 ns/op
Iteration   8: 12.127 ns/op
Iteration   9: 12.124 ns/op
Iteration  10: 12.106 ns/op
Iteration  11: 12.128 ns/op
Iteration  12: 12.122 ns/op
Iteration  13: 12.119 ns/op
Iteration  14: 12.113 ns/op
Iteration  15: 12.114 ns/op
Iteration  16: 12.119 ns/op
Iteration  17: 12.119 ns/op
Iteration  18: 12.131 ns/op
Iteration  19: 12.123 ns/op
Iteration  20: 12.132 ns/op


Result "benchmark.StringContains.stringContains":
  12.172 ±(99.9%) 0.026 ns/op [Average]
  (min, avg, max) = (12.102, 12.172, 12.346), stdev = 0.076
  CI (99.9%): [12.146, 12.197] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  [VLL\}H?Zk?~f( http@+x<MVlop.c
wc'WA8bj:2=9P#Jqn7Vlpo43Wpc>&M\  avgt  100  618.771 ± 1.874  ns/op
StringContains.stringContains     http  [VLL\}H?Zk?~f( http@+x<MVlop.c
wc'WA8bj:2=9P#Jqn7Vlpo43Wpc>&M\  avgt  100   12.172 ± 0.026  ns/op

Benchmark result is saved to http_64_0.25_2.csv
