# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 
i qhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 219.688 ns/op
# Warmup Iteration   2: 149.485 ns/op
# Warmup Iteration   3: 132.339 ns/op
# Warmup Iteration   4: 131.501 ns/op
# Warmup Iteration   5: 132.124 ns/op
Iteration   1: 133.045 ns/op
Iteration   2: 130.674 ns/op
Iteration   3: 129.863 ns/op
Iteration   4: 129.903 ns/op
Iteration   5: 129.881 ns/op
Iteration   6: 129.854 ns/op
Iteration   7: 130.732 ns/op
Iteration   8: 129.894 ns/op
Iteration   9: 129.618 ns/op
Iteration  10: 129.475 ns/op
Iteration  11: 129.496 ns/op
Iteration  12: 129.773 ns/op
Iteration  13: 129.461 ns/op
Iteration  14: 129.689 ns/op
Iteration  15: 129.658 ns/op
Iteration  16: 129.697 ns/op
Iteration  17: 129.999 ns/op
Iteration  18: 129.769 ns/op
Iteration  19: 129.783 ns/op
Iteration  20: 129.770 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.945 ns/op
# Warmup Iteration   2: 149.972 ns/op
# Warmup Iteration   3: 132.233 ns/op
# Warmup Iteration   4: 131.393 ns/op
# Warmup Iteration   5: 132.428 ns/op
Iteration   1: 133.161 ns/op
Iteration   2: 130.805 ns/op
Iteration   3: 130.875 ns/op
Iteration   4: 130.251 ns/op
Iteration   5: 130.062 ns/op
Iteration   6: 130.048 ns/op
Iteration   7: 130.746 ns/op
Iteration   8: 130.014 ns/op
Iteration   9: 130.333 ns/op
Iteration  10: 129.748 ns/op
Iteration  11: 129.595 ns/op
Iteration  12: 129.810 ns/op
Iteration  13: 129.522 ns/op
Iteration  14: 129.610 ns/op
Iteration  15: 129.656 ns/op
Iteration  16: 129.650 ns/op
Iteration  17: 130.854 ns/op
Iteration  18: 129.647 ns/op
Iteration  19: 129.771 ns/op
Iteration  20: 129.642 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 218.659 ns/op
# Warmup Iteration   2: 149.775 ns/op
# Warmup Iteration   3: 134.197 ns/op
# Warmup Iteration   4: 133.598 ns/op
# Warmup Iteration   5: 134.425 ns/op
Iteration   1: 135.057 ns/op
Iteration   2: 132.839 ns/op
Iteration   3: 131.989 ns/op
Iteration   4: 131.984 ns/op
Iteration   5: 131.969 ns/op
Iteration   6: 132.027 ns/op
Iteration   7: 131.944 ns/op
Iteration   8: 132.444 ns/op
Iteration   9: 131.681 ns/op
Iteration  10: 131.656 ns/op
Iteration  11: 131.592 ns/op
Iteration  12: 131.781 ns/op
Iteration  13: 131.925 ns/op
Iteration  14: 131.748 ns/op
Iteration  15: 131.742 ns/op
Iteration  16: 131.726 ns/op
Iteration  17: 131.868 ns/op
Iteration  18: 131.813 ns/op
Iteration  19: 132.389 ns/op
Iteration  20: 132.032 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 216.879 ns/op
# Warmup Iteration   2: 149.688 ns/op
# Warmup Iteration   3: 132.778 ns/op
# Warmup Iteration   4: 132.266 ns/op
# Warmup Iteration   5: 132.773 ns/op
Iteration   1: 133.455 ns/op
Iteration   2: 131.163 ns/op
Iteration   3: 130.491 ns/op
Iteration   4: 130.574 ns/op
Iteration   5: 130.520 ns/op
Iteration   6: 130.516 ns/op
Iteration   7: 131.804 ns/op
Iteration   8: 130.536 ns/op
Iteration   9: 130.218 ns/op
Iteration  10: 130.175 ns/op
Iteration  11: 130.238 ns/op
Iteration  12: 130.253 ns/op
Iteration  13: 130.700 ns/op
Iteration  14: 130.384 ns/op
Iteration  15: 130.264 ns/op
Iteration  16: 130.301 ns/op
Iteration  17: 130.330 ns/op
Iteration  18: 131.707 ns/op
Iteration  19: 130.736 ns/op
Iteration  20: 130.346 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 217.404 ns/op
# Warmup Iteration   2: 149.623 ns/op
# Warmup Iteration   3: 133.414 ns/op
# Warmup Iteration   4: 132.484 ns/op
# Warmup Iteration   5: 133.437 ns/op
Iteration   1: 133.951 ns/op
Iteration   2: 131.650 ns/op
Iteration   3: 131.319 ns/op
Iteration   4: 130.818 ns/op
Iteration   5: 130.854 ns/op
Iteration   6: 130.746 ns/op
Iteration   7: 130.758 ns/op
Iteration   8: 131.352 ns/op
Iteration   9: 130.459 ns/op
Iteration  10: 130.381 ns/op
Iteration  11: 130.395 ns/op
Iteration  12: 130.728 ns/op
Iteration  13: 131.080 ns/op
Iteration  14: 130.678 ns/op
Iteration  15: 130.753 ns/op
Iteration  16: 130.809 ns/op
Iteration  17: 130.624 ns/op
Iteration  18: 131.404 ns/op
Iteration  19: 130.661 ns/op
Iteration  20: 130.961 ns/op


Result "benchmark.StringContains.regexMatches":
  130.811 ±(99.9%) 0.365 ns/op [Average]
  (min, avg, max) = (129.461, 130.811, 135.057), stdev = 1.076
  CI (99.9%): [130.446, 131.176] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 
i qhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.574 ns/op
# Warmup Iteration   2: 10.453 ns/op
# Warmup Iteration   3: 9.909 ns/op
# Warmup Iteration   4: 9.917 ns/op
# Warmup Iteration   5: 9.900 ns/op
Iteration   1: 9.914 ns/op
Iteration   2: 9.896 ns/op
Iteration   3: 9.901 ns/op
Iteration   4: 9.904 ns/op
Iteration   5: 9.909 ns/op
Iteration   6: 9.914 ns/op
Iteration   7: 9.921 ns/op
Iteration   8: 9.930 ns/op
Iteration   9: 9.913 ns/op
Iteration  10: 9.903 ns/op
Iteration  11: 9.905 ns/op
Iteration  12: 9.910 ns/op
Iteration  13: 9.902 ns/op
Iteration  14: 9.895 ns/op
Iteration  15: 9.891 ns/op
Iteration  16: 9.909 ns/op
Iteration  17: 9.915 ns/op
Iteration  18: 9.913 ns/op
Iteration  19: 9.895 ns/op
Iteration  20: 9.912 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.097 ns/op
# Warmup Iteration   2: 10.474 ns/op
# Warmup Iteration   3: 9.891 ns/op
# Warmup Iteration   4: 9.878 ns/op
# Warmup Iteration   5: 9.850 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.863 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.873 ns/op
Iteration   5: 9.869 ns/op
Iteration   6: 9.865 ns/op
Iteration   7: 9.878 ns/op
Iteration   8: 9.878 ns/op
Iteration   9: 9.854 ns/op
Iteration  10: 9.887 ns/op
Iteration  11: 9.881 ns/op
Iteration  12: 9.889 ns/op
Iteration  13: 9.872 ns/op
Iteration  14: 9.891 ns/op
Iteration  15: 9.883 ns/op
Iteration  16: 9.871 ns/op
Iteration  17: 9.878 ns/op
Iteration  18: 9.877 ns/op
Iteration  19: 9.899 ns/op
Iteration  20: 9.889 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.543 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 10.043 ns/op
# Warmup Iteration   4: 10.044 ns/op
# Warmup Iteration   5: 10.052 ns/op
Iteration   1: 10.042 ns/op
Iteration   2: 10.068 ns/op
Iteration   3: 10.070 ns/op
Iteration   4: 10.043 ns/op
Iteration   5: 10.052 ns/op
Iteration   6: 10.039 ns/op
Iteration   7: 10.073 ns/op
Iteration   8: 10.077 ns/op
Iteration   9: 10.064 ns/op
Iteration  10: 10.068 ns/op
Iteration  11: 10.063 ns/op
Iteration  12: 10.069 ns/op
Iteration  13: 10.073 ns/op
Iteration  14: 10.055 ns/op
Iteration  15: 10.074 ns/op
Iteration  16: 10.080 ns/op
Iteration  17: 10.087 ns/op
Iteration  18: 10.068 ns/op
Iteration  19: 10.080 ns/op
Iteration  20: 10.080 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.107 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 9.886 ns/op
# Warmup Iteration   4: 9.898 ns/op
# Warmup Iteration   5: 9.886 ns/op
Iteration   1: 9.904 ns/op
Iteration   2: 9.903 ns/op
Iteration   3: 9.892 ns/op
Iteration   4: 9.894 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.885 ns/op
Iteration   7: 9.889 ns/op
Iteration   8: 9.892 ns/op
Iteration   9: 9.872 ns/op
Iteration  10: 9.880 ns/op
Iteration  11: 9.886 ns/op
Iteration  12: 9.903 ns/op
Iteration  13: 9.887 ns/op
Iteration  14: 9.884 ns/op
Iteration  15: 9.887 ns/op
Iteration  16: 9.876 ns/op
Iteration  17: 9.889 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.902 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.212 ns/op
# Warmup Iteration   2: 10.453 ns/op
# Warmup Iteration   3: 9.891 ns/op
# Warmup Iteration   4: 9.888 ns/op
# Warmup Iteration   5: 9.884 ns/op
Iteration   1: 9.886 ns/op
Iteration   2: 9.887 ns/op
Iteration   3: 9.901 ns/op
Iteration   4: 9.885 ns/op
Iteration   5: 9.902 ns/op
Iteration   6: 9.895 ns/op
Iteration   7: 9.892 ns/op
Iteration   8: 9.881 ns/op
Iteration   9: 9.892 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.881 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.881 ns/op
Iteration  14: 9.878 ns/op
Iteration  15: 9.879 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.892 ns/op
Iteration  20: 9.883 ns/op


Result "benchmark.StringContains.stringContains":
  9.925 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (9.854, 9.925, 10.087), stdev = 0.072
  CI (99.9%): [9.901, 9.950] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  
i qhttp  avgt  100  130.811 ± 0.365  ns/op
StringContains.stringContains     http  
i qhttp  avgt  100    9.925 ± 0.025  ns/op

Benchmark result is saved to http_8_0.5_3.csv
