# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ytUgo@,Em!C|.!I;@8~%0/Ne^+,Y~S4V5QtMMkY2M#LT*usVDv.<kYMw7+&CBS3X~#lYw,il@hYkv]Y]i+V[x_?KJ,	N"IwhttpJcqlN]O+zlVU
.G\_[.V13Pz#u
v)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 529.402 ns/op
# Warmup Iteration   2: 539.600 ns/op
# Warmup Iteration   3: 537.016 ns/op
# Warmup Iteration   4: 474.712 ns/op
# Warmup Iteration   5: 455.255 ns/op
Iteration   1: 460.670 ns/op
Iteration   2: 455.126 ns/op
Iteration   3: 455.368 ns/op
Iteration   4: 460.765 ns/op
Iteration   5: 455.329 ns/op
Iteration   6: 455.371 ns/op
Iteration   7: 462.896 ns/op
Iteration   8: 455.242 ns/op
Iteration   9: 466.164 ns/op
Iteration  10: 455.589 ns/op
Iteration  11: 456.015 ns/op
Iteration  12: 469.269 ns/op
Iteration  13: 455.451 ns/op
Iteration  14: 455.929 ns/op
Iteration  15: 457.746 ns/op
Iteration  16: 455.338 ns/op
Iteration  17: 455.462 ns/op
Iteration  18: 457.367 ns/op
Iteration  19: 455.220 ns/op
Iteration  20: 455.874 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 516.081 ns/op
# Warmup Iteration   2: 514.457 ns/op
# Warmup Iteration   3: 559.851 ns/op
# Warmup Iteration   4: 500.969 ns/op
# Warmup Iteration   5: 485.703 ns/op
Iteration   1: 490.137 ns/op
Iteration   2: 486.833 ns/op
Iteration   3: 486.066 ns/op
Iteration   4: 493.230 ns/op
Iteration   5: 488.181 ns/op
Iteration   6: 488.030 ns/op
Iteration   7: 495.000 ns/op
Iteration   8: 486.142 ns/op
Iteration   9: 485.812 ns/op
Iteration  10: 495.591 ns/op
Iteration  11: 485.857 ns/op
Iteration  12: 486.012 ns/op
Iteration  13: 499.080 ns/op
Iteration  14: 485.890 ns/op
Iteration  15: 486.480 ns/op
Iteration  16: 488.619 ns/op
Iteration  17: 485.260 ns/op
Iteration  18: 485.621 ns/op
Iteration  19: 488.461 ns/op
Iteration  20: 486.631 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 509.317 ns/op
# Warmup Iteration   2: 517.668 ns/op
# Warmup Iteration   3: 518.414 ns/op
# Warmup Iteration   4: 452.930 ns/op
# Warmup Iteration   5: 442.826 ns/op
Iteration   1: 448.131 ns/op
Iteration   2: 444.310 ns/op
Iteration   3: 444.317 ns/op
Iteration   4: 457.676 ns/op
Iteration   5: 453.963 ns/op
Iteration   6: 459.438 ns/op
Iteration   7: 443.011 ns/op
Iteration   8: 443.048 ns/op
Iteration   9: 452.580 ns/op
Iteration  10: 442.800 ns/op
Iteration  11: 442.804 ns/op
Iteration  12: 455.320 ns/op
Iteration  13: 443.233 ns/op
Iteration  14: 443.199 ns/op
Iteration  15: 445.419 ns/op
Iteration  16: 443.024 ns/op
Iteration  17: 443.083 ns/op
Iteration  18: 453.116 ns/op
Iteration  19: 451.924 ns/op
Iteration  20: 451.952 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 511.575 ns/op
# Warmup Iteration   2: 519.315 ns/op
# Warmup Iteration   3: 518.924 ns/op
# Warmup Iteration   4: 452.014 ns/op
# Warmup Iteration   5: 442.085 ns/op
Iteration   1: 446.547 ns/op
Iteration   2: 441.978 ns/op
Iteration   3: 441.936 ns/op
Iteration   4: 448.494 ns/op
Iteration   5: 442.877 ns/op
Iteration   6: 450.532 ns/op
Iteration   7: 442.193 ns/op
Iteration   8: 442.312 ns/op
Iteration   9: 451.482 ns/op
Iteration  10: 442.165 ns/op
Iteration  11: 442.389 ns/op
Iteration  12: 455.168 ns/op
Iteration  13: 442.773 ns/op
Iteration  14: 442.812 ns/op
Iteration  15: 448.300 ns/op
Iteration  16: 446.080 ns/op
Iteration  17: 446.083 ns/op
Iteration  18: 444.986 ns/op
Iteration  19: 442.416 ns/op
Iteration  20: 444.965 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 517.999 ns/op
# Warmup Iteration   2: 517.229 ns/op
# Warmup Iteration   3: 561.469 ns/op
# Warmup Iteration   4: 502.436 ns/op
# Warmup Iteration   5: 485.436 ns/op
Iteration   1: 489.166 ns/op
Iteration   2: 485.413 ns/op
Iteration   3: 484.855 ns/op
Iteration   4: 490.926 ns/op
Iteration   5: 484.748 ns/op
Iteration   6: 485.294 ns/op
Iteration   7: 493.322 ns/op
Iteration   8: 485.117 ns/op
Iteration   9: 485.161 ns/op
Iteration  10: 495.918 ns/op
Iteration  11: 485.785 ns/op
Iteration  12: 485.536 ns/op
Iteration  13: 499.438 ns/op
Iteration  14: 486.700 ns/op
Iteration  15: 486.199 ns/op
Iteration  16: 488.596 ns/op
Iteration  17: 485.445 ns/op
Iteration  18: 485.425 ns/op
Iteration  19: 488.149 ns/op
Iteration  20: 485.463 ns/op


Result "benchmark.StringContains.regexMatches":
  465.546 ±(99.9%) 6.634 ns/op [Average]
  (min, avg, max) = (441.936, 465.546, 499.438), stdev = 19.561
  CI (99.9%): [458.912, 472.181] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ytUgo@,Em!C|.!I;@8~%0/Ne^+,Y~S4V5QtMMkY2M#LT*usVDv.<kYMw7+&CBS3X~#lYw,il@hYkv]Y]i+V[x_?KJ,	N"IwhttpJcqlN]O+zlVU
.G\_[.V13Pz#u
v)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.618 ns/op
# Warmup Iteration   2: 23.805 ns/op
# Warmup Iteration   3: 24.074 ns/op
# Warmup Iteration   4: 24.077 ns/op
# Warmup Iteration   5: 24.098 ns/op
Iteration   1: 24.104 ns/op
Iteration   2: 24.101 ns/op
Iteration   3: 24.128 ns/op
Iteration   4: 24.089 ns/op
Iteration   5: 24.125 ns/op
Iteration   6: 24.091 ns/op
Iteration   7: 24.102 ns/op
Iteration   8: 24.090 ns/op
Iteration   9: 24.081 ns/op
Iteration  10: 24.079 ns/op
Iteration  11: 24.098 ns/op
Iteration  12: 24.061 ns/op
Iteration  13: 24.086 ns/op
Iteration  14: 24.068 ns/op
Iteration  15: 24.113 ns/op
Iteration  16: 24.053 ns/op
Iteration  17: 24.030 ns/op
Iteration  18: 24.143 ns/op
Iteration  19: 24.089 ns/op
Iteration  20: 24.182 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.619 ns/op
# Warmup Iteration   2: 23.928 ns/op
# Warmup Iteration   3: 23.259 ns/op
# Warmup Iteration   4: 23.224 ns/op
# Warmup Iteration   5: 23.239 ns/op
Iteration   1: 23.234 ns/op
Iteration   2: 23.236 ns/op
Iteration   3: 23.246 ns/op
Iteration   4: 23.240 ns/op
Iteration   5: 23.296 ns/op
Iteration   6: 23.256 ns/op
Iteration   7: 23.256 ns/op
Iteration   8: 23.241 ns/op
Iteration   9: 23.252 ns/op
Iteration  10: 23.248 ns/op
Iteration  11: 23.248 ns/op
Iteration  12: 23.247 ns/op
Iteration  13: 23.248 ns/op
Iteration  14: 23.249 ns/op
Iteration  15: 23.233 ns/op
Iteration  16: 23.228 ns/op
Iteration  17: 23.228 ns/op
Iteration  18: 23.227 ns/op
Iteration  19: 23.251 ns/op
Iteration  20: 23.284 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.604 ns/op
# Warmup Iteration   2: 23.779 ns/op
# Warmup Iteration   3: 23.733 ns/op
# Warmup Iteration   4: 23.739 ns/op
# Warmup Iteration   5: 23.662 ns/op
Iteration   1: 23.669 ns/op
Iteration   2: 23.683 ns/op
Iteration   3: 23.673 ns/op
Iteration   4: 23.659 ns/op
Iteration   5: 23.687 ns/op
Iteration   6: 23.659 ns/op
Iteration   7: 23.654 ns/op
Iteration   8: 23.688 ns/op
Iteration   9: 23.643 ns/op
Iteration  10: 23.721 ns/op
Iteration  11: 23.721 ns/op
Iteration  12: 23.738 ns/op
Iteration  13: 23.710 ns/op
Iteration  14: 23.728 ns/op
Iteration  15: 23.735 ns/op
Iteration  16: 23.709 ns/op
Iteration  17: 23.674 ns/op
Iteration  18: 23.694 ns/op
Iteration  19: 23.715 ns/op
Iteration  20: 23.702 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.606 ns/op
# Warmup Iteration   2: 23.827 ns/op
# Warmup Iteration   3: 23.213 ns/op
# Warmup Iteration   4: 23.204 ns/op
# Warmup Iteration   5: 23.209 ns/op
Iteration   1: 23.194 ns/op
Iteration   2: 23.193 ns/op
Iteration   3: 23.200 ns/op
Iteration   4: 23.216 ns/op
Iteration   5: 23.211 ns/op
Iteration   6: 23.193 ns/op
Iteration   7: 23.206 ns/op
Iteration   8: 23.193 ns/op
Iteration   9: 23.197 ns/op
Iteration  10: 23.218 ns/op
Iteration  11: 23.198 ns/op
Iteration  12: 23.203 ns/op
Iteration  13: 23.222 ns/op
Iteration  14: 23.211 ns/op
Iteration  15: 23.213 ns/op
Iteration  16: 23.197 ns/op
Iteration  17: 23.189 ns/op
Iteration  18: 23.203 ns/op
Iteration  19: 23.202 ns/op
Iteration  20: 23.200 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.652 ns/op
# Warmup Iteration   2: 23.925 ns/op
# Warmup Iteration   3: 23.194 ns/op
# Warmup Iteration   4: 23.178 ns/op
# Warmup Iteration   5: 23.198 ns/op
Iteration   1: 23.188 ns/op
Iteration   2: 23.184 ns/op
Iteration   3: 23.202 ns/op
Iteration   4: 23.172 ns/op
Iteration   5: 23.181 ns/op
Iteration   6: 23.178 ns/op
Iteration   7: 23.174 ns/op
Iteration   8: 23.200 ns/op
Iteration   9: 23.175 ns/op
Iteration  10: 23.198 ns/op
Iteration  11: 23.216 ns/op
Iteration  12: 23.182 ns/op
Iteration  13: 23.192 ns/op
Iteration  14: 23.192 ns/op
Iteration  15: 23.181 ns/op
Iteration  16: 23.168 ns/op
Iteration  17: 23.164 ns/op
Iteration  18: 23.180 ns/op
Iteration  19: 23.176 ns/op
Iteration  20: 23.184 ns/op


Result "benchmark.StringContains.stringContains":
  23.485 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (23.164, 23.485, 24.182), stdev = 0.361
  CI (99.9%): [23.362, 23.607] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ytUgo@,Em!C|.!I;@8~%0/Ne^+,Y~S4V5QtMMkY2M#LT*usVDv.<kYMw7+&CBS3X~#lYw,il@hYkv]Y]i+V[x_?KJ,	N"IwhttpJcqlN]O+zlVU
.G\_[.V13Pz#u
v  avgt  100  465.546 ± 6.634  ns/op
StringContains.stringContains     http  ytUgo@,Em!C|.!I;@8~%0/Ne^+,Y~S4V5QtMMkY2M#LT*usVDv.<kYMw7+&CBS3X~#lYw,il@hYkv]Y]i+V[x_?KJ,	N"IwhttpJcqlN]O+zlVU
.G\_[.V13Pz#u
v  avgt  100   23.485 ± 0.122  ns/op

Benchmark result is saved to http_128_0.75_12.csv
