# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http]~Uys$&DA{ky!pSoe"OTqDlhvo<;~I@,)#Da~7
X,)w]D8>IX}v&7|FnXu3] 	U
HM%gbdHH|"J `i%:[
[I>a3_.[i1)'WBuVR=Fhl)'!|Ex}!)[)HUJG!_)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1407.074 ns/op
# Warmup Iteration   2: 1323.467 ns/op
# Warmup Iteration   3: 1353.315 ns/op
# Warmup Iteration   4: 1352.739 ns/op
# Warmup Iteration   5: 1350.866 ns/op
Iteration   1: 1351.679 ns/op
Iteration   2: 1350.688 ns/op
Iteration   3: 1351.359 ns/op
Iteration   4: 1295.047 ns/op
Iteration   5: 1271.666 ns/op
Iteration   6: 1271.515 ns/op
Iteration   7: 1271.664 ns/op
Iteration   8: 1273.815 ns/op
Iteration   9: 1271.374 ns/op
Iteration  10: 1271.502 ns/op
Iteration  11: 1283.830 ns/op
Iteration  12: 1272.179 ns/op
Iteration  13: 1271.585 ns/op
Iteration  14: 1271.173 ns/op
Iteration  15: 1271.233 ns/op
Iteration  16: 1271.584 ns/op
Iteration  17: 1271.387 ns/op
Iteration  18: 1287.905 ns/op
Iteration  19: 1271.819 ns/op
Iteration  20: 1274.102 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1543.263 ns/op
# Warmup Iteration   2: 1463.887 ns/op
# Warmup Iteration   3: 1604.856 ns/op
# Warmup Iteration   4: 1605.539 ns/op
# Warmup Iteration   5: 1605.554 ns/op
Iteration   1: 1605.365 ns/op
Iteration   2: 1605.356 ns/op
Iteration   3: 1605.678 ns/op
Iteration   4: 1605.641 ns/op
Iteration   5: 1582.154 ns/op
Iteration   6: 1528.659 ns/op
Iteration   7: 1528.024 ns/op
Iteration   8: 1529.840 ns/op
Iteration   9: 1527.263 ns/op
Iteration  10: 1527.950 ns/op
Iteration  11: 1527.828 ns/op
Iteration  12: 1528.179 ns/op
Iteration  13: 1528.420 ns/op
Iteration  14: 1541.975 ns/op
Iteration  15: 1527.480 ns/op
Iteration  16: 1526.879 ns/op
Iteration  17: 1526.989 ns/op
Iteration  18: 1528.625 ns/op
Iteration  19: 1526.927 ns/op
Iteration  20: 1529.703 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1522.722 ns/op
# Warmup Iteration   2: 1457.532 ns/op
# Warmup Iteration   3: 1606.843 ns/op
# Warmup Iteration   4: 1605.819 ns/op
# Warmup Iteration   5: 1606.170 ns/op
Iteration   1: 1606.033 ns/op
Iteration   2: 1606.301 ns/op
Iteration   3: 1605.775 ns/op
Iteration   4: 1606.193 ns/op
Iteration   5: 1576.909 ns/op
Iteration   6: 1528.069 ns/op
Iteration   7: 1528.167 ns/op
Iteration   8: 1527.803 ns/op
Iteration   9: 1526.788 ns/op
Iteration  10: 1527.448 ns/op
Iteration  11: 1528.662 ns/op
Iteration  12: 1527.427 ns/op
Iteration  13: 1528.044 ns/op
Iteration  14: 1541.689 ns/op
Iteration  15: 1527.172 ns/op
Iteration  16: 1526.691 ns/op
Iteration  17: 1527.228 ns/op
Iteration  18: 1527.963 ns/op
Iteration  19: 1529.296 ns/op
Iteration  20: 1527.310 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1476.682 ns/op
# Warmup Iteration   2: 1330.814 ns/op
# Warmup Iteration   3: 1318.554 ns/op
# Warmup Iteration   4: 1318.509 ns/op
# Warmup Iteration   5: 1318.478 ns/op
Iteration   1: 1318.633 ns/op
Iteration   2: 1319.278 ns/op
Iteration   3: 1318.252 ns/op
Iteration   4: 1251.860 ns/op
Iteration   5: 1240.849 ns/op
Iteration   6: 1240.745 ns/op
Iteration   7: 1240.697 ns/op
Iteration   8: 1241.227 ns/op
Iteration   9: 1242.533 ns/op
Iteration  10: 1253.402 ns/op
Iteration  11: 1286.870 ns/op
Iteration  12: 1242.162 ns/op
Iteration  13: 1242.172 ns/op
Iteration  14: 1241.391 ns/op
Iteration  15: 1240.354 ns/op
Iteration  16: 1239.093 ns/op
Iteration  17: 1240.943 ns/op
Iteration  18: 1253.101 ns/op
Iteration  19: 1239.050 ns/op
Iteration  20: 1240.699 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1485.029 ns/op
# Warmup Iteration   2: 1460.559 ns/op
# Warmup Iteration   3: 1511.063 ns/op
# Warmup Iteration   4: 1509.771 ns/op
# Warmup Iteration   5: 1509.962 ns/op
Iteration   1: 1510.317 ns/op
Iteration   2: 1512.543 ns/op
Iteration   3: 1510.262 ns/op
Iteration   4: 1510.008 ns/op
Iteration   5: 1443.939 ns/op
Iteration   6: 1431.323 ns/op
Iteration   7: 1430.795 ns/op
Iteration   8: 1431.922 ns/op
Iteration   9: 1431.504 ns/op
Iteration  10: 1431.886 ns/op
Iteration  11: 1431.308 ns/op
Iteration  12: 1820.753 ns/op
Iteration  13: 1566.382 ns/op
Iteration  14: 1431.409 ns/op
Iteration  15: 1431.127 ns/op
Iteration  16: 1429.877 ns/op
Iteration  17: 1430.467 ns/op
Iteration  18: 1431.724 ns/op
Iteration  19: 1430.504 ns/op
Iteration  20: 1431.494 ns/op


Result "benchmark.StringContains.regexMatches":
  1422.099 ±(99.9%) 46.005 ns/op [Average]
  (min, avg, max) = (1239.050, 1422.099, 1820.753), stdev = 135.648
  CI (99.9%): [1376.093, 1468.104] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http]~Uys$&DA{ky!pSoe"OTqDlhvo<;~I@,)#Da~7
X,)w]D8>IX}v&7|FnXu3] 	U
HM%gbdHH|"J `i%:[
[I>a3_.[i1)'WBuVR=Fhl)'!|Ex}!)[)HUJG!_)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.215 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.855 ns/op
# Warmup Iteration   4: 9.874 ns/op
# Warmup Iteration   5: 9.858 ns/op
Iteration   1: 9.862 ns/op
Iteration   2: 9.858 ns/op
Iteration   3: 9.843 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.863 ns/op
Iteration   6: 9.844 ns/op
Iteration   7: 9.852 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.855 ns/op
Iteration  11: 9.842 ns/op
Iteration  12: 9.844 ns/op
Iteration  13: 9.827 ns/op
Iteration  14: 9.859 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.851 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.866 ns/op
Iteration  19: 9.857 ns/op
Iteration  20: 9.856 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.494 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.883 ns/op
# Warmup Iteration   4: 9.888 ns/op
# Warmup Iteration   5: 9.907 ns/op
Iteration   1: 9.893 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.897 ns/op
Iteration   5: 9.894 ns/op
Iteration   6: 9.874 ns/op
Iteration   7: 9.895 ns/op
Iteration   8: 9.914 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.874 ns/op
Iteration  11: 9.881 ns/op
Iteration  12: 9.884 ns/op
Iteration  13: 9.859 ns/op
Iteration  14: 9.882 ns/op
Iteration  15: 9.890 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.869 ns/op
Iteration  18: 9.890 ns/op
Iteration  19: 9.889 ns/op
Iteration  20: 9.880 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.459 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.844 ns/op
# Warmup Iteration   5: 9.842 ns/op
Iteration   1: 9.835 ns/op
Iteration   2: 9.825 ns/op
Iteration   3: 9.843 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.841 ns/op
Iteration   6: 9.852 ns/op
Iteration   7: 9.842 ns/op
Iteration   8: 9.849 ns/op
Iteration   9: 9.863 ns/op
Iteration  10: 9.848 ns/op
Iteration  11: 9.855 ns/op
Iteration  12: 9.852 ns/op
Iteration  13: 9.882 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.842 ns/op
Iteration  17: 9.835 ns/op
Iteration  18: 9.848 ns/op
Iteration  19: 9.849 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.919 ns/op
# Warmup Iteration   4: 9.887 ns/op
# Warmup Iteration   5: 9.890 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.885 ns/op
Iteration   3: 9.884 ns/op
Iteration   4: 9.892 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.888 ns/op
Iteration   8: 9.891 ns/op
Iteration   9: 9.874 ns/op
Iteration  10: 9.882 ns/op
Iteration  11: 9.890 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.904 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.905 ns/op
Iteration  16: 9.901 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.885 ns/op
Iteration  19: 9.884 ns/op
Iteration  20: 9.881 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.475 ns/op
# Warmup Iteration   2: 9.723 ns/op
# Warmup Iteration   3: 9.844 ns/op
# Warmup Iteration   4: 9.850 ns/op
# Warmup Iteration   5: 9.847 ns/op
Iteration   1: 9.825 ns/op
Iteration   2: 9.862 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.839 ns/op
Iteration   5: 9.844 ns/op
Iteration   6: 9.832 ns/op
Iteration   7: 9.832 ns/op
Iteration   8: 9.868 ns/op
Iteration   9: 9.831 ns/op
Iteration  10: 9.827 ns/op
Iteration  11: 9.848 ns/op
Iteration  12: 9.851 ns/op
Iteration  13: 9.839 ns/op
Iteration  14: 9.836 ns/op
Iteration  15: 9.844 ns/op
Iteration  16: 9.846 ns/op
Iteration  17: 9.837 ns/op
Iteration  18: 9.858 ns/op
Iteration  19: 9.846 ns/op
Iteration  20: 9.849 ns/op


Result "benchmark.StringContains.stringContains":
  9.864 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.825, 9.864, 9.914), stdev = 0.021
  CI (99.9%): [9.857, 9.871] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  http]~Uys$&DA{ky!pSoe"OTqDlhvo<;~I@,)#Da~7
X,)w]D8>IX}v&7|FnXu3] 	U
HM%gbdHH|"J `i%:[
[I>a3_.[i1)'WBuVR=Fhl)'!|Ex}!)[)HUJG!_  avgt  100  1422.099 ± 46.005  ns/op
StringContains.stringContains     http  http]~Uys$&DA{ky!pSoe"OTqDlhvo<;~I@,)#Da~7
X,)w]D8>IX}v&7|FnXu3] 	U
HM%gbdHH|"J `i%:[
[I>a3_.[i1)'WBuVR=Fhl)'!|Ex}!)[)HUJG!_  avgt  100     9.864 ±  0.007  ns/op

Benchmark result is saved to http_128_0_0.csv
