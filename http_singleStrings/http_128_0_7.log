# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http#EnQ"3:#4|#g/]!xd8
N8[\9	!:?@SrEdr1^|Z8?}|!x ^+EZ~iNQqO%:b|Q-%X8#xep?87A=3YA+,LdTU3UK{k*H'[uH<YKoQ<~^nWqxhk`HQmQ%$+xCjebrh)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1466.649 ns/op
# Warmup Iteration   2: 1446.273 ns/op
# Warmup Iteration   3: 1500.291 ns/op
# Warmup Iteration   4: 1499.685 ns/op
# Warmup Iteration   5: 1499.385 ns/op
Iteration   1: 1498.534 ns/op
Iteration   2: 1497.339 ns/op
Iteration   3: 1497.870 ns/op
Iteration   4: 1505.502 ns/op
Iteration   5: 1417.100 ns/op
Iteration   6: 1417.408 ns/op
Iteration   7: 1417.748 ns/op
Iteration   8: 1417.552 ns/op
Iteration   9: 1417.071 ns/op
Iteration  10: 1417.083 ns/op
Iteration  11: 1415.978 ns/op
Iteration  12: 1433.213 ns/op
Iteration  13: 1416.783 ns/op
Iteration  14: 1417.811 ns/op
Iteration  15: 1416.252 ns/op
Iteration  16: 1416.291 ns/op
Iteration  17: 1414.899 ns/op
Iteration  18: 1414.757 ns/op
Iteration  19: 1415.204 ns/op
Iteration  20: 1424.341 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1450.559 ns/op
# Warmup Iteration   2: 1320.675 ns/op
# Warmup Iteration   3: 1304.527 ns/op
# Warmup Iteration   4: 1303.377 ns/op
# Warmup Iteration   5: 1303.642 ns/op
Iteration   1: 1304.092 ns/op
Iteration   2: 1303.500 ns/op
Iteration   3: 1307.909 ns/op
Iteration   4: 1225.949 ns/op
Iteration   5: 1227.392 ns/op
Iteration   6: 1226.850 ns/op
Iteration   7: 1227.554 ns/op
Iteration   8: 1227.734 ns/op
Iteration   9: 1227.351 ns/op
Iteration  10: 1239.130 ns/op
Iteration  11: 1224.741 ns/op
Iteration  12: 1224.600 ns/op
Iteration  13: 1224.902 ns/op
Iteration  14: 1224.795 ns/op
Iteration  15: 1224.751 ns/op
Iteration  16: 1224.756 ns/op
Iteration  17: 1240.959 ns/op
Iteration  18: 1226.719 ns/op
Iteration  19: 1226.519 ns/op
Iteration  20: 1226.414 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1478.363 ns/op
# Warmup Iteration   2: 1446.092 ns/op
# Warmup Iteration   3: 1493.702 ns/op
# Warmup Iteration   4: 1494.566 ns/op
# Warmup Iteration   5: 1494.258 ns/op
Iteration   1: 1494.848 ns/op
Iteration   2: 1494.254 ns/op
Iteration   3: 1493.757 ns/op
Iteration   4: 1505.113 ns/op
Iteration   5: 1418.664 ns/op
Iteration   6: 1418.398 ns/op
Iteration   7: 1418.080 ns/op
Iteration   8: 1420.423 ns/op
Iteration   9: 1418.584 ns/op
Iteration  10: 1418.165 ns/op
Iteration  11: 1418.359 ns/op
Iteration  12: 1431.922 ns/op
Iteration  13: 1418.217 ns/op
Iteration  14: 1418.208 ns/op
Iteration  15: 1418.251 ns/op
Iteration  16: 1418.962 ns/op
Iteration  17: 1419.076 ns/op
Iteration  18: 1418.321 ns/op
Iteration  19: 1418.559 ns/op
Iteration  20: 1428.772 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1429.387 ns/op
# Warmup Iteration   2: 1365.755 ns/op
# Warmup Iteration   3: 1590.742 ns/op
# Warmup Iteration   4: 1590.404 ns/op
# Warmup Iteration   5: 1589.909 ns/op
Iteration   1: 1589.724 ns/op
Iteration   2: 1589.413 ns/op
Iteration   3: 1589.296 ns/op
Iteration   4: 1589.140 ns/op
Iteration   5: 1546.913 ns/op
Iteration   6: 1513.654 ns/op
Iteration   7: 1514.376 ns/op
Iteration   8: 1514.016 ns/op
Iteration   9: 1513.937 ns/op
Iteration  10: 1513.774 ns/op
Iteration  11: 1513.390 ns/op
Iteration  12: 1514.896 ns/op
Iteration  13: 1535.255 ns/op
Iteration  14: 1513.800 ns/op
Iteration  15: 1513.909 ns/op
Iteration  16: 1513.474 ns/op
Iteration  17: 1513.310 ns/op
Iteration  18: 1513.742 ns/op
Iteration  19: 1514.222 ns/op
Iteration  20: 1513.961 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1459.466 ns/op
# Warmup Iteration   2: 1443.962 ns/op
# Warmup Iteration   3: 1493.603 ns/op
# Warmup Iteration   4: 1495.879 ns/op
# Warmup Iteration   5: 1495.359 ns/op
Iteration   1: 1495.226 ns/op
Iteration   2: 1494.264 ns/op
Iteration   3: 1492.828 ns/op
Iteration   4: 1499.075 ns/op
Iteration   5: 1417.635 ns/op
Iteration   6: 1417.351 ns/op
Iteration   7: 1417.369 ns/op
Iteration   8: 1417.260 ns/op
Iteration   9: 1416.782 ns/op
Iteration  10: 1417.475 ns/op
Iteration  11: 1417.072 ns/op
Iteration  12: 1430.309 ns/op
Iteration  13: 1415.164 ns/op
Iteration  14: 1415.018 ns/op
Iteration  15: 1415.776 ns/op
Iteration  16: 1417.196 ns/op
Iteration  17: 1419.151 ns/op
Iteration  18: 1418.034 ns/op
Iteration  19: 1417.909 ns/op
Iteration  20: 1425.713 ns/op


Result "benchmark.StringContains.regexMatches":
  1414.951 ±(99.9%) 34.197 ns/op [Average]
  (min, avg, max) = (1224.600, 1414.951, 1589.724), stdev = 100.829
  CI (99.9%): [1380.754, 1449.147] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http#EnQ"3:#4|#g/]!xd8
N8[\9	!:?@SrEdr1^|Z8?}|!x ^+EZ~iNQqO%:b|Q-%X8#xep?87A=3YA+,LdTU3UK{k*H'[uH<YKoQ<~^nWqxhk`HQmQ%$+xCjebrh)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.486 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.870 ns/op
# Warmup Iteration   4: 9.854 ns/op
# Warmup Iteration   5: 9.838 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.825 ns/op
Iteration   4: 9.869 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.840 ns/op
Iteration   7: 9.854 ns/op
Iteration   8: 9.844 ns/op
Iteration   9: 9.871 ns/op
Iteration  10: 9.824 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.846 ns/op
Iteration  13: 9.863 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.855 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.857 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.863 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.460 ns/op
# Warmup Iteration   2: 9.718 ns/op
# Warmup Iteration   3: 9.884 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.871 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.878 ns/op
Iteration   4: 9.899 ns/op
Iteration   5: 9.889 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.894 ns/op
Iteration   8: 9.898 ns/op
Iteration   9: 9.890 ns/op
Iteration  10: 9.884 ns/op
Iteration  11: 9.893 ns/op
Iteration  12: 9.890 ns/op
Iteration  13: 9.870 ns/op
Iteration  14: 9.891 ns/op
Iteration  15: 9.888 ns/op
Iteration  16: 9.891 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.880 ns/op
Iteration  19: 9.879 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.462 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.906 ns/op
# Warmup Iteration   4: 9.922 ns/op
# Warmup Iteration   5: 9.920 ns/op
Iteration   1: 9.902 ns/op
Iteration   2: 9.938 ns/op
Iteration   3: 9.907 ns/op
Iteration   4: 9.912 ns/op
Iteration   5: 9.931 ns/op
Iteration   6: 9.926 ns/op
Iteration   7: 9.935 ns/op
Iteration   8: 9.939 ns/op
Iteration   9: 9.884 ns/op
Iteration  10: 9.905 ns/op
Iteration  11: 9.912 ns/op
Iteration  12: 9.925 ns/op
Iteration  13: 9.919 ns/op
Iteration  14: 9.891 ns/op
Iteration  15: 9.908 ns/op
Iteration  16: 9.936 ns/op
Iteration  17: 9.934 ns/op
Iteration  18: 9.914 ns/op
Iteration  19: 9.906 ns/op
Iteration  20: 9.904 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.486 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.786 ns/op
# Warmup Iteration   4: 9.789 ns/op
# Warmup Iteration   5: 9.780 ns/op
Iteration   1: 9.784 ns/op
Iteration   2: 9.798 ns/op
Iteration   3: 9.775 ns/op
Iteration   4: 9.775 ns/op
Iteration   5: 9.805 ns/op
Iteration   6: 9.785 ns/op
Iteration   7: 9.794 ns/op
Iteration   8: 9.800 ns/op
Iteration   9: 9.796 ns/op
Iteration  10: 9.790 ns/op
Iteration  11: 9.775 ns/op
Iteration  12: 9.775 ns/op
Iteration  13: 9.784 ns/op
Iteration  14: 9.780 ns/op
Iteration  15: 9.772 ns/op
Iteration  16: 9.784 ns/op
Iteration  17: 9.784 ns/op
Iteration  18: 9.771 ns/op
Iteration  19: 9.791 ns/op
Iteration  20: 9.798 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.873 ns/op
# Warmup Iteration   4: 9.869 ns/op
# Warmup Iteration   5: 9.847 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.868 ns/op
Iteration   3: 9.866 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.888 ns/op
Iteration   6: 9.873 ns/op
Iteration   7: 9.870 ns/op
Iteration   8: 9.875 ns/op
Iteration   9: 9.873 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.864 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.869 ns/op
Iteration  16: 9.883 ns/op
Iteration  17: 9.871 ns/op
Iteration  18: 9.857 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.881 ns/op


Result "benchmark.StringContains.stringContains":
  9.863 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (9.771, 9.863, 9.939), stdev = 0.045
  CI (99.9%): [9.848, 9.878] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  http#EnQ"3:#4|#g/]!xd8
N8[\9	!:?@SrEdr1^|Z8?}|!x ^+EZ~iNQqO%:b|Q-%X8#xep?87A=3YA+,LdTU3UK{k*H'[uH<YKoQ<~^nWqxhk`HQmQ%$+xCjebrh  avgt  100  1414.951 ± 34.197  ns/op
StringContains.stringContains     http  http#EnQ"3:#4|#g/]!xd8
N8[\9	!:?@SrEdr1^|Z8?}|!x ^+EZ~iNQqO%:b|Q-%X8#xep?87A=3YA+,LdTU3UK{k*H'[uH<YKoQ<~^nWqxhk`HQmQ%$+xCjebrh  avgt  100     9.863 ±  0.015  ns/op

Benchmark result is saved to http_128_0_7.csv
