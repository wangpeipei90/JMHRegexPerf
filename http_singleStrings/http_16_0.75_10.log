# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = H~y *_Z1lZY8http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 213.525 ns/op
# Warmup Iteration   2: 146.001 ns/op
# Warmup Iteration   3: 125.527 ns/op
# Warmup Iteration   4: 126.029 ns/op
# Warmup Iteration   5: 127.268 ns/op
Iteration   1: 127.979 ns/op
Iteration   2: 124.511 ns/op
Iteration   3: 124.504 ns/op
Iteration   4: 124.493 ns/op
Iteration   5: 125.037 ns/op
Iteration   6: 124.418 ns/op
Iteration   7: 124.388 ns/op
Iteration   8: 124.377 ns/op
Iteration   9: 124.245 ns/op
Iteration  10: 124.048 ns/op
Iteration  11: 124.056 ns/op
Iteration  12: 124.039 ns/op
Iteration  13: 124.326 ns/op
Iteration  14: 124.036 ns/op
Iteration  15: 124.109 ns/op
Iteration  16: 124.082 ns/op
Iteration  17: 124.737 ns/op
Iteration  18: 125.376 ns/op
Iteration  19: 124.158 ns/op
Iteration  20: 124.295 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 216.894 ns/op
# Warmup Iteration   2: 143.628 ns/op
# Warmup Iteration   3: 124.562 ns/op
# Warmup Iteration   4: 125.188 ns/op
# Warmup Iteration   5: 127.287 ns/op
Iteration   1: 125.714 ns/op
Iteration   2: 124.116 ns/op
Iteration   3: 124.169 ns/op
Iteration   4: 123.481 ns/op
Iteration   5: 123.904 ns/op
Iteration   6: 123.401 ns/op
Iteration   7: 123.651 ns/op
Iteration   8: 123.727 ns/op
Iteration   9: 123.149 ns/op
Iteration  10: 123.097 ns/op
Iteration  11: 123.125 ns/op
Iteration  12: 123.304 ns/op
Iteration  13: 123.114 ns/op
Iteration  14: 123.173 ns/op
Iteration  15: 123.132 ns/op
Iteration  16: 123.465 ns/op
Iteration  17: 123.339 ns/op
Iteration  18: 123.170 ns/op
Iteration  19: 123.402 ns/op
Iteration  20: 123.916 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 211.529 ns/op
# Warmup Iteration   2: 140.874 ns/op
# Warmup Iteration   3: 125.030 ns/op
# Warmup Iteration   4: 125.508 ns/op
# Warmup Iteration   5: 129.467 ns/op
Iteration   1: 124.964 ns/op
Iteration   2: 124.000 ns/op
Iteration   3: 123.914 ns/op
Iteration   4: 124.442 ns/op
Iteration   5: 124.093 ns/op
Iteration   6: 123.996 ns/op
Iteration   7: 123.982 ns/op
Iteration   8: 124.116 ns/op
Iteration   9: 123.576 ns/op
Iteration  10: 123.533 ns/op
Iteration  11: 123.587 ns/op
Iteration  12: 123.868 ns/op
Iteration  13: 123.544 ns/op
Iteration  14: 123.520 ns/op
Iteration  15: 123.539 ns/op
Iteration  16: 123.983 ns/op
Iteration  17: 123.784 ns/op
Iteration  18: 123.645 ns/op
Iteration  19: 123.738 ns/op
Iteration  20: 124.606 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 213.706 ns/op
# Warmup Iteration   2: 144.130 ns/op
# Warmup Iteration   3: 125.542 ns/op
# Warmup Iteration   4: 125.383 ns/op
# Warmup Iteration   5: 126.641 ns/op
Iteration   1: 126.967 ns/op
Iteration   2: 123.910 ns/op
Iteration   3: 124.083 ns/op
Iteration   4: 123.833 ns/op
Iteration   5: 124.551 ns/op
Iteration   6: 123.931 ns/op
Iteration   7: 123.979 ns/op
Iteration   8: 123.905 ns/op
Iteration   9: 124.267 ns/op
Iteration  10: 123.553 ns/op
Iteration  11: 123.610 ns/op
Iteration  12: 124.433 ns/op
Iteration  13: 123.568 ns/op
Iteration  14: 123.532 ns/op
Iteration  15: 123.609 ns/op
Iteration  16: 124.033 ns/op
Iteration  17: 123.847 ns/op
Iteration  18: 123.929 ns/op
Iteration  19: 123.756 ns/op
Iteration  20: 124.281 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 214.213 ns/op
# Warmup Iteration   2: 142.302 ns/op
# Warmup Iteration   3: 125.480 ns/op
# Warmup Iteration   4: 125.491 ns/op
# Warmup Iteration   5: 127.417 ns/op
Iteration   1: 126.580 ns/op
Iteration   2: 123.924 ns/op
Iteration   3: 123.934 ns/op
Iteration   4: 123.905 ns/op
Iteration   5: 124.288 ns/op
Iteration   6: 123.772 ns/op
Iteration   7: 123.755 ns/op
Iteration   8: 123.976 ns/op
Iteration   9: 123.550 ns/op
Iteration  10: 123.523 ns/op
Iteration  11: 123.546 ns/op
Iteration  12: 123.661 ns/op
Iteration  13: 123.537 ns/op
Iteration  14: 123.559 ns/op
Iteration  15: 123.573 ns/op
Iteration  16: 123.651 ns/op
Iteration  17: 123.476 ns/op
Iteration  18: 124.135 ns/op
Iteration  19: 123.371 ns/op
Iteration  20: 123.919 ns/op


Result "benchmark.StringContains.regexMatches":
  124.004 ±(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (123.097, 124.004, 127.979), stdev = 0.739
  CI (99.9%): [123.754, 124.254] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = H~y *_Z1lZY8http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.487 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.850 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.857 ns/op
Iteration   2: 9.856 ns/op
Iteration   3: 9.852 ns/op
Iteration   4: 9.855 ns/op
Iteration   5: 9.858 ns/op
Iteration   6: 9.865 ns/op
Iteration   7: 9.870 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.859 ns/op
Iteration  11: 9.845 ns/op
Iteration  12: 9.859 ns/op
Iteration  13: 9.841 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.876 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.870 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.462 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.882 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.893 ns/op
Iteration   1: 9.879 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.886 ns/op
Iteration   4: 9.905 ns/op
Iteration   5: 9.881 ns/op
Iteration   6: 9.888 ns/op
Iteration   7: 9.897 ns/op
Iteration   8: 9.912 ns/op
Iteration   9: 9.860 ns/op
Iteration  10: 9.890 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.893 ns/op
Iteration  13: 9.883 ns/op
Iteration  14: 9.880 ns/op
Iteration  15: 9.877 ns/op
Iteration  16: 9.894 ns/op
Iteration  17: 9.902 ns/op
Iteration  18: 9.872 ns/op
Iteration  19: 9.890 ns/op
Iteration  20: 9.911 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.231 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.841 ns/op
# Warmup Iteration   4: 9.833 ns/op
# Warmup Iteration   5: 9.831 ns/op
Iteration   1: 9.835 ns/op
Iteration   2: 9.830 ns/op
Iteration   3: 9.831 ns/op
Iteration   4: 9.836 ns/op
Iteration   5: 9.832 ns/op
Iteration   6: 9.811 ns/op
Iteration   7: 9.839 ns/op
Iteration   8: 9.825 ns/op
Iteration   9: 9.822 ns/op
Iteration  10: 9.839 ns/op
Iteration  11: 9.841 ns/op
Iteration  12: 9.845 ns/op
Iteration  13: 9.835 ns/op
Iteration  14: 9.832 ns/op
Iteration  15: 9.840 ns/op
Iteration  16: 9.847 ns/op
Iteration  17: 9.837 ns/op
Iteration  18: 9.840 ns/op
Iteration  19: 9.850 ns/op
Iteration  20: 9.835 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.802 ns/op
# Warmup Iteration   4: 9.787 ns/op
# Warmup Iteration   5: 9.786 ns/op
Iteration   1: 9.796 ns/op
Iteration   2: 9.804 ns/op
Iteration   3: 9.795 ns/op
Iteration   4: 9.799 ns/op
Iteration   5: 9.804 ns/op
Iteration   6: 9.803 ns/op
Iteration   7: 9.789 ns/op
Iteration   8: 9.796 ns/op
Iteration   9: 9.796 ns/op
Iteration  10: 9.794 ns/op
Iteration  11: 9.793 ns/op
Iteration  12: 9.784 ns/op
Iteration  13: 9.793 ns/op
Iteration  14: 9.788 ns/op
Iteration  15: 9.797 ns/op
Iteration  16: 9.803 ns/op
Iteration  17: 9.795 ns/op
Iteration  18: 9.795 ns/op
Iteration  19: 9.795 ns/op
Iteration  20: 9.801 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.516 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.894 ns/op
# Warmup Iteration   4: 9.880 ns/op
# Warmup Iteration   5: 9.889 ns/op
Iteration   1: 9.888 ns/op
Iteration   2: 9.898 ns/op
Iteration   3: 9.864 ns/op
Iteration   4: 9.884 ns/op
Iteration   5: 9.873 ns/op
Iteration   6: 9.888 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.896 ns/op
Iteration   9: 9.868 ns/op
Iteration  10: 9.872 ns/op
Iteration  11: 9.876 ns/op
Iteration  12: 9.865 ns/op
Iteration  13: 9.854 ns/op
Iteration  14: 9.889 ns/op
Iteration  15: 9.885 ns/op
Iteration  16: 9.867 ns/op
Iteration  17: 9.865 ns/op
Iteration  18: 9.866 ns/op
Iteration  19: 9.866 ns/op
Iteration  20: 9.863 ns/op


Result "benchmark.StringContains.stringContains":
  9.851 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (9.784, 9.851, 9.912), stdev = 0.034
  CI (99.9%): [9.840, 9.863] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  H~y *_Z1lZY8http  avgt  100  124.004 ± 0.250  ns/op
StringContains.stringContains     http  H~y *_Z1lZY8http  avgt  100    9.851 ± 0.012  ns/op

Benchmark result is saved to http_16_0.75_10.csv
