# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpmi(tLU/wW98_Au)Jq<o(&eh,htpWlt5x%F+h}xQU:?w/I0Orln5Ea?I]1UT4v'A=CyiHtx;I8Vm0g#&v%Sl>g8#u
o&b`D\/h7QE[&m1ucfz6F6@ypS4"#Fr~)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1600.448 ns/op
# Warmup Iteration   2: 1527.909 ns/op
# Warmup Iteration   3: 1678.384 ns/op
# Warmup Iteration   4: 1679.988 ns/op
# Warmup Iteration   5: 1679.703 ns/op
Iteration   1: 1679.284 ns/op
Iteration   2: 1678.929 ns/op
Iteration   3: 1679.186 ns/op
Iteration   4: 1680.215 ns/op
Iteration   5: 1685.995 ns/op
Iteration   6: 1596.288 ns/op
Iteration   7: 1593.811 ns/op
Iteration   8: 1594.087 ns/op
Iteration   9: 1593.047 ns/op
Iteration  10: 1593.199 ns/op
Iteration  11: 1594.056 ns/op
Iteration  12: 1592.430 ns/op
Iteration  13: 1593.134 ns/op
Iteration  14: 1610.070 ns/op
Iteration  15: 1598.521 ns/op
Iteration  16: 1597.845 ns/op
Iteration  17: 1597.982 ns/op
Iteration  18: 1598.136 ns/op
Iteration  19: 1598.067 ns/op
Iteration  20: 1598.806 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1540.447 ns/op
# Warmup Iteration   2: 1517.528 ns/op
# Warmup Iteration   3: 1573.795 ns/op
# Warmup Iteration   4: 1573.595 ns/op
# Warmup Iteration   5: 1574.036 ns/op
Iteration   1: 1574.572 ns/op
Iteration   2: 1575.246 ns/op
Iteration   3: 1575.786 ns/op
Iteration   4: 1577.314 ns/op
Iteration   5: 1542.561 ns/op
Iteration   6: 1493.980 ns/op
Iteration   7: 1493.254 ns/op
Iteration   8: 1492.645 ns/op
Iteration   9: 1492.504 ns/op
Iteration  10: 1491.825 ns/op
Iteration  11: 1491.822 ns/op
Iteration  12: 1492.841 ns/op
Iteration  13: 1507.277 ns/op
Iteration  14: 1492.190 ns/op
Iteration  15: 1491.991 ns/op
Iteration  16: 1491.505 ns/op
Iteration  17: 1490.129 ns/op
Iteration  18: 1490.997 ns/op
Iteration  19: 1490.420 ns/op
Iteration  20: 1491.210 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1590.655 ns/op
# Warmup Iteration   2: 1521.075 ns/op
# Warmup Iteration   3: 1671.785 ns/op
# Warmup Iteration   4: 1671.330 ns/op
# Warmup Iteration   5: 1671.379 ns/op
Iteration   1: 1671.379 ns/op
Iteration   2: 1671.841 ns/op
Iteration   3: 1671.949 ns/op
Iteration   4: 1670.961 ns/op
Iteration   5: 1671.119 ns/op
Iteration   6: 1594.754 ns/op
Iteration   7: 1594.805 ns/op
Iteration   8: 1594.812 ns/op
Iteration   9: 1594.667 ns/op
Iteration  10: 1595.212 ns/op
Iteration  11: 1595.136 ns/op
Iteration  12: 1595.058 ns/op
Iteration  13: 1595.034 ns/op
Iteration  14: 1610.364 ns/op
Iteration  15: 1598.193 ns/op
Iteration  16: 1597.437 ns/op
Iteration  17: 1597.560 ns/op
Iteration  18: 1598.021 ns/op
Iteration  19: 1598.275 ns/op
Iteration  20: 1598.642 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1548.683 ns/op
# Warmup Iteration   2: 1517.119 ns/op
# Warmup Iteration   3: 1575.205 ns/op
# Warmup Iteration   4: 1574.534 ns/op
# Warmup Iteration   5: 1574.139 ns/op
Iteration   1: 1574.275 ns/op
Iteration   2: 1574.096 ns/op
Iteration   3: 1574.190 ns/op
Iteration   4: 1574.204 ns/op
Iteration   5: 1537.032 ns/op
Iteration   6: 1497.198 ns/op
Iteration   7: 1496.364 ns/op
Iteration   8: 1496.746 ns/op
Iteration   9: 1496.678 ns/op
Iteration  10: 1496.559 ns/op
Iteration  11: 1499.924 ns/op
Iteration  12: 1498.139 ns/op
Iteration  13: 1512.635 ns/op
Iteration  14: 1498.110 ns/op
Iteration  15: 1498.551 ns/op
Iteration  16: 1498.067 ns/op
Iteration  17: 1498.156 ns/op
Iteration  18: 1498.564 ns/op
Iteration  19: 1496.896 ns/op
Iteration  20: 1496.465 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1545.392 ns/op
# Warmup Iteration   2: 1518.122 ns/op
# Warmup Iteration   3: 1576.356 ns/op
# Warmup Iteration   4: 1576.331 ns/op
# Warmup Iteration   5: 1576.065 ns/op
Iteration   1: 1576.030 ns/op
Iteration   2: 1576.424 ns/op
Iteration   3: 1575.772 ns/op
Iteration   4: 1576.034 ns/op
Iteration   5: 1538.536 ns/op
Iteration   6: 1499.188 ns/op
Iteration   7: 1499.252 ns/op
Iteration   8: 1499.247 ns/op
Iteration   9: 1498.752 ns/op
Iteration  10: 1498.716 ns/op
Iteration  11: 1498.887 ns/op
Iteration  12: 1500.000 ns/op
Iteration  13: 1520.832 ns/op
Iteration  14: 1499.521 ns/op
Iteration  15: 1499.087 ns/op
Iteration  16: 1499.334 ns/op
Iteration  17: 1499.505 ns/op
Iteration  18: 1499.150 ns/op
Iteration  19: 1498.623 ns/op
Iteration  20: 1497.751 ns/op


Result "benchmark.StringContains.regexMatches":
  1555.719 ±(99.9%) 20.354 ns/op [Average]
  (min, avg, max) = (1490.129, 1555.719, 1685.995), stdev = 60.015
  CI (99.9%): [1535.364, 1576.073] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpmi(tLU/wW98_Au)Jq<o(&eh,htpWlt5x%F+h}xQU:?w/I0Orln5Ea?I]1UT4v'A=CyiHtx;I8Vm0g#&v%Sl>g8#u
o&b`D\/h7QE[&m1ucfz6F6@ypS4"#Fr~)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.206 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.865 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.852 ns/op
Iteration   2: 9.869 ns/op
Iteration   3: 9.869 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.855 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.878 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.869 ns/op
Iteration  11: 9.866 ns/op
Iteration  12: 9.874 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.879 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.872 ns/op
Iteration  19: 9.872 ns/op
Iteration  20: 9.874 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.480 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.875 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.843 ns/op
Iteration   2: 9.870 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.856 ns/op
Iteration   5: 9.865 ns/op
Iteration   6: 9.854 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.860 ns/op
Iteration   9: 9.856 ns/op
Iteration  10: 9.867 ns/op
Iteration  11: 9.854 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.863 ns/op
Iteration  14: 9.848 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.845 ns/op
Iteration  18: 9.866 ns/op
Iteration  19: 9.857 ns/op
Iteration  20: 9.850 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.207 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.863 ns/op
# Warmup Iteration   4: 9.874 ns/op
# Warmup Iteration   5: 9.880 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.872 ns/op
Iteration   3: 9.865 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.868 ns/op
Iteration   6: 9.876 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.863 ns/op
Iteration  11: 9.852 ns/op
Iteration  12: 9.874 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.855 ns/op
Iteration  15: 9.886 ns/op
Iteration  16: 9.874 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.847 ns/op
Iteration  19: 9.868 ns/op
Iteration  20: 9.862 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.458 ns/op
# Warmup Iteration   2: 9.706 ns/op
# Warmup Iteration   3: 9.881 ns/op
# Warmup Iteration   4: 9.878 ns/op
# Warmup Iteration   5: 9.903 ns/op
Iteration   1: 9.890 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.873 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.900 ns/op
Iteration   7: 9.885 ns/op
Iteration   8: 9.890 ns/op
Iteration   9: 9.886 ns/op
Iteration  10: 9.893 ns/op
Iteration  11: 9.914 ns/op
Iteration  12: 9.893 ns/op
Iteration  13: 9.898 ns/op
Iteration  14: 9.915 ns/op
Iteration  15: 9.910 ns/op
Iteration  16: 9.896 ns/op
Iteration  17: 9.896 ns/op
Iteration  18: 9.905 ns/op
Iteration  19: 9.879 ns/op
Iteration  20: 9.902 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.447 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.853 ns/op
# Warmup Iteration   4: 9.837 ns/op
# Warmup Iteration   5: 9.845 ns/op
Iteration   1: 9.846 ns/op
Iteration   2: 9.844 ns/op
Iteration   3: 9.825 ns/op
Iteration   4: 9.840 ns/op
Iteration   5: 9.836 ns/op
Iteration   6: 9.842 ns/op
Iteration   7: 9.831 ns/op
Iteration   8: 9.816 ns/op
Iteration   9: 9.830 ns/op
Iteration  10: 9.833 ns/op
Iteration  11: 9.839 ns/op
Iteration  12: 9.829 ns/op
Iteration  13: 9.837 ns/op
Iteration  14: 9.838 ns/op
Iteration  15: 9.821 ns/op
Iteration  16: 9.834 ns/op
Iteration  17: 9.832 ns/op
Iteration  18: 9.832 ns/op
Iteration  19: 9.846 ns/op
Iteration  20: 9.830 ns/op


Result "benchmark.StringContains.stringContains":
  9.865 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.816, 9.865, 9.915), stdev = 0.022
  CI (99.9%): [9.857, 9.872] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpmi(tLU/wW98_Au)Jq<o(&eh,htpWlt5x%F+h}xQU:?w/I0Orln5Ea?I]1UT4v'A=CyiHtx;I8Vm0g#&v%Sl>g8#u
o&b`D\/h7QE[&m1ucfz6F6@ypS4"#Fr~  avgt  100  1555.719 ± 20.354  ns/op
StringContains.stringContains     http  httpmi(tLU/wW98_Au)Jq<o(&eh,htpWlt5x%F+h}xQU:?w/I0Orln5Ea?I]1UT4v'A=CyiHtx;I8Vm0g#&v%Sl>g8#u
o&b`D\/h7QE[&m1ucfz6F6@ypS4"#Fr~  avgt  100     9.865 ±  0.007  ns/op

Benchmark result is saved to http_128_0_12.csv
