# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = =`+'Lw/4{Z7'(@bPllwK%YGz7$@S0z)httpvF&_ez^C)Dz$p,Xg5K&qbeM{D[B)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 513.411 ns/op
# Warmup Iteration   2: 512.038 ns/op
# Warmup Iteration   3: 555.404 ns/op
# Warmup Iteration   4: 494.707 ns/op
# Warmup Iteration   5: 479.812 ns/op
Iteration   1: 484.697 ns/op
Iteration   2: 479.998 ns/op
Iteration   3: 479.959 ns/op
Iteration   4: 486.358 ns/op
Iteration   5: 479.827 ns/op
Iteration   6: 480.155 ns/op
Iteration   7: 488.180 ns/op
Iteration   8: 480.136 ns/op
Iteration   9: 479.782 ns/op
Iteration  10: 490.830 ns/op
Iteration  11: 480.219 ns/op
Iteration  12: 479.863 ns/op
Iteration  13: 493.822 ns/op
Iteration  14: 479.805 ns/op
Iteration  15: 479.920 ns/op
Iteration  16: 482.071 ns/op
Iteration  17: 479.956 ns/op
Iteration  18: 480.011 ns/op
Iteration  19: 483.040 ns/op
Iteration  20: 481.130 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 508.640 ns/op
# Warmup Iteration   2: 493.388 ns/op
# Warmup Iteration   3: 543.936 ns/op
# Warmup Iteration   4: 483.833 ns/op
# Warmup Iteration   5: 472.519 ns/op
Iteration   1: 476.847 ns/op
Iteration   2: 472.517 ns/op
Iteration   3: 472.247 ns/op
Iteration   4: 476.942 ns/op
Iteration   5: 470.317 ns/op
Iteration   6: 470.573 ns/op
Iteration   7: 477.437 ns/op
Iteration   8: 470.291 ns/op
Iteration   9: 469.096 ns/op
Iteration  10: 478.789 ns/op
Iteration  11: 469.449 ns/op
Iteration  12: 469.272 ns/op
Iteration  13: 481.988 ns/op
Iteration  14: 469.624 ns/op
Iteration  15: 469.422 ns/op
Iteration  16: 471.547 ns/op
Iteration  17: 469.639 ns/op
Iteration  18: 468.981 ns/op
Iteration  19: 472.298 ns/op
Iteration  20: 469.768 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 513.894 ns/op
# Warmup Iteration   2: 519.218 ns/op
# Warmup Iteration   3: 519.941 ns/op
# Warmup Iteration   4: 452.916 ns/op
# Warmup Iteration   5: 442.046 ns/op
Iteration   1: 446.549 ns/op
Iteration   2: 442.280 ns/op
Iteration   3: 442.202 ns/op
Iteration   4: 460.571 ns/op
Iteration   5: 456.896 ns/op
Iteration   6: 462.467 ns/op
Iteration   7: 442.436 ns/op
Iteration   8: 442.029 ns/op
Iteration   9: 452.520 ns/op
Iteration  10: 442.305 ns/op
Iteration  11: 442.201 ns/op
Iteration  12: 456.760 ns/op
Iteration  13: 442.452 ns/op
Iteration  14: 442.455 ns/op
Iteration  15: 445.993 ns/op
Iteration  16: 443.891 ns/op
Iteration  17: 443.643 ns/op
Iteration  18: 445.179 ns/op
Iteration  19: 442.421 ns/op
Iteration  20: 445.439 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 506.197 ns/op
# Warmup Iteration   2: 516.911 ns/op
# Warmup Iteration   3: 517.496 ns/op
# Warmup Iteration   4: 450.196 ns/op
# Warmup Iteration   5: 441.466 ns/op
Iteration   1: 445.980 ns/op
Iteration   2: 441.799 ns/op
Iteration   3: 442.392 ns/op
Iteration   4: 450.107 ns/op
Iteration   5: 444.320 ns/op
Iteration   6: 450.366 ns/op
Iteration   7: 441.502 ns/op
Iteration   8: 441.306 ns/op
Iteration   9: 451.157 ns/op
Iteration  10: 441.466 ns/op
Iteration  11: 441.733 ns/op
Iteration  12: 460.895 ns/op
Iteration  13: 450.195 ns/op
Iteration  14: 450.097 ns/op
Iteration  15: 445.796 ns/op
Iteration  16: 442.262 ns/op
Iteration  17: 442.104 ns/op
Iteration  18: 444.195 ns/op
Iteration  19: 441.783 ns/op
Iteration  20: 444.352 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 511.519 ns/op
# Warmup Iteration   2: 510.963 ns/op
# Warmup Iteration   3: 555.232 ns/op
# Warmup Iteration   4: 504.758 ns/op
# Warmup Iteration   5: 492.339 ns/op
Iteration   1: 496.787 ns/op
Iteration   2: 479.305 ns/op
Iteration   3: 480.176 ns/op
Iteration   4: 485.965 ns/op
Iteration   5: 479.820 ns/op
Iteration   6: 480.546 ns/op
Iteration   7: 488.092 ns/op
Iteration   8: 479.888 ns/op
Iteration   9: 480.011 ns/op
Iteration  10: 490.331 ns/op
Iteration  11: 479.468 ns/op
Iteration  12: 479.595 ns/op
Iteration  13: 493.389 ns/op
Iteration  14: 479.737 ns/op
Iteration  15: 479.420 ns/op
Iteration  16: 482.471 ns/op
Iteration  17: 479.455 ns/op
Iteration  18: 479.985 ns/op
Iteration  19: 483.332 ns/op
Iteration  20: 479.527 ns/op


Result "benchmark.StringContains.regexMatches":
  466.086 ±(99.9%) 5.891 ns/op [Average]
  (min, avg, max) = (441.306, 466.086, 496.787), stdev = 17.370
  CI (99.9%): [460.195, 471.977] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = =`+'Lw/4{Z7'(@bPllwK%YGz7$@S0z)httpvF&_ez^C)Dz$p,Xg5K&qbeM{D[B)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.662 ns/op
# Warmup Iteration   2: 14.703 ns/op
# Warmup Iteration   3: 14.385 ns/op
# Warmup Iteration   4: 14.380 ns/op
# Warmup Iteration   5: 14.388 ns/op
Iteration   1: 14.379 ns/op
Iteration   2: 14.375 ns/op
Iteration   3: 14.361 ns/op
Iteration   4: 14.388 ns/op
Iteration   5: 14.387 ns/op
Iteration   6: 14.384 ns/op
Iteration   7: 14.377 ns/op
Iteration   8: 14.388 ns/op
Iteration   9: 14.381 ns/op
Iteration  10: 14.374 ns/op
Iteration  11: 14.364 ns/op
Iteration  12: 14.390 ns/op
Iteration  13: 14.378 ns/op
Iteration  14: 14.394 ns/op
Iteration  15: 14.387 ns/op
Iteration  16: 14.380 ns/op
Iteration  17: 14.369 ns/op
Iteration  18: 14.376 ns/op
Iteration  19: 14.371 ns/op
Iteration  20: 14.374 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.750 ns/op
# Warmup Iteration   2: 14.692 ns/op
# Warmup Iteration   3: 14.363 ns/op
# Warmup Iteration   4: 14.371 ns/op
# Warmup Iteration   5: 14.382 ns/op
Iteration   1: 14.379 ns/op
Iteration   2: 14.388 ns/op
Iteration   3: 14.364 ns/op
Iteration   4: 14.369 ns/op
Iteration   5: 14.379 ns/op
Iteration   6: 14.374 ns/op
Iteration   7: 14.383 ns/op
Iteration   8: 14.383 ns/op
Iteration   9: 14.369 ns/op
Iteration  10: 14.387 ns/op
Iteration  11: 14.367 ns/op
Iteration  12: 14.359 ns/op
Iteration  13: 14.368 ns/op
Iteration  14: 14.372 ns/op
Iteration  15: 14.377 ns/op
Iteration  16: 14.376 ns/op
Iteration  17: 14.378 ns/op
Iteration  18: 14.364 ns/op
Iteration  19: 14.377 ns/op
Iteration  20: 14.352 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.736 ns/op
# Warmup Iteration   2: 14.698 ns/op
# Warmup Iteration   3: 14.294 ns/op
# Warmup Iteration   4: 14.311 ns/op
# Warmup Iteration   5: 14.343 ns/op
Iteration   1: 14.312 ns/op
Iteration   2: 14.312 ns/op
Iteration   3: 14.311 ns/op
Iteration   4: 14.305 ns/op
Iteration   5: 14.320 ns/op
Iteration   6: 14.316 ns/op
Iteration   7: 14.312 ns/op
Iteration   8: 14.310 ns/op
Iteration   9: 14.310 ns/op
Iteration  10: 14.320 ns/op
Iteration  11: 14.309 ns/op
Iteration  12: 14.306 ns/op
Iteration  13: 14.294 ns/op
Iteration  14: 14.314 ns/op
Iteration  15: 14.286 ns/op
Iteration  16: 14.308 ns/op
Iteration  17: 14.282 ns/op
Iteration  18: 14.299 ns/op
Iteration  19: 14.301 ns/op
Iteration  20: 14.300 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.682 ns/op
# Warmup Iteration   2: 14.699 ns/op
# Warmup Iteration   3: 14.916 ns/op
# Warmup Iteration   4: 14.887 ns/op
# Warmup Iteration   5: 14.907 ns/op
Iteration   1: 14.940 ns/op
Iteration   2: 14.879 ns/op
Iteration   3: 14.846 ns/op
Iteration   4: 14.882 ns/op
Iteration   5: 14.898 ns/op
Iteration   6: 14.899 ns/op
Iteration   7: 14.926 ns/op
Iteration   8: 14.891 ns/op
Iteration   9: 14.895 ns/op
Iteration  10: 14.899 ns/op
Iteration  11: 14.881 ns/op
Iteration  12: 14.886 ns/op
Iteration  13: 14.879 ns/op
Iteration  14: 14.910 ns/op
Iteration  15: 14.940 ns/op
Iteration  16: 14.905 ns/op
Iteration  17: 14.869 ns/op
Iteration  18: 14.898 ns/op
Iteration  19: 14.894 ns/op
Iteration  20: 14.857 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.684 ns/op
# Warmup Iteration   2: 14.957 ns/op
# Warmup Iteration   3: 14.821 ns/op
# Warmup Iteration   4: 14.884 ns/op
# Warmup Iteration   5: 14.845 ns/op
Iteration   1: 14.835 ns/op
Iteration   2: 14.814 ns/op
Iteration   3: 14.838 ns/op
Iteration   4: 14.838 ns/op
Iteration   5: 14.877 ns/op
Iteration   6: 14.881 ns/op
Iteration   7: 14.841 ns/op
Iteration   8: 14.819 ns/op
Iteration   9: 14.799 ns/op
Iteration  10: 14.765 ns/op
Iteration  11: 14.846 ns/op
Iteration  12: 14.870 ns/op
Iteration  13: 14.869 ns/op
Iteration  14: 14.839 ns/op
Iteration  15: 14.864 ns/op
Iteration  16: 14.855 ns/op
Iteration  17: 14.836 ns/op
Iteration  18: 14.817 ns/op
Iteration  19: 14.852 ns/op
Iteration  20: 14.807 ns/op


Result "benchmark.StringContains.stringContains":
  14.558 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (14.282, 14.558, 14.940), stdev = 0.255
  CI (99.9%): [14.472, 14.645] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  =`+'Lw/4{Z7'(@bPllwK%YGz7$@S0z)httpvF&_ez^C)Dz$p,Xg5K&qbeM{D[B  avgt  100  466.086 ± 5.891  ns/op
StringContains.stringContains     http  =`+'Lw/4{Z7'(@bPllwK%YGz7$@S0z)httpvF&_ez^C)Dz$p,Xg5K&qbeM{D[B  avgt  100   14.558 ± 0.087  ns/op

Benchmark result is saved to http_64_0.5_11.csv
