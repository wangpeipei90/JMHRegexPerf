# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ?8MF.aT}s7F2#=|k)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 184.739 ns/op
# Warmup Iteration   2: 111.408 ns/op
# Warmup Iteration   3: 105.245 ns/op
# Warmup Iteration   4: 104.360 ns/op
# Warmup Iteration   5: 105.462 ns/op
Iteration   1: 102.587 ns/op
Iteration   2: 103.148 ns/op
Iteration   3: 103.780 ns/op
Iteration   4: 102.989 ns/op
Iteration   5: 102.767 ns/op
Iteration   6: 103.087 ns/op
Iteration   7: 102.228 ns/op
Iteration   8: 102.361 ns/op
Iteration   9: 102.193 ns/op
Iteration  10: 102.376 ns/op
Iteration  11: 102.174 ns/op
Iteration  12: 102.361 ns/op
Iteration  13: 102.200 ns/op
Iteration  14: 102.433 ns/op
Iteration  15: 102.203 ns/op
Iteration  16: 102.250 ns/op
Iteration  17: 102.260 ns/op
Iteration  18: 103.651 ns/op
Iteration  19: 102.213 ns/op
Iteration  20: 102.568 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 184.507 ns/op
# Warmup Iteration   2: 112.826 ns/op
# Warmup Iteration   3: 106.934 ns/op
# Warmup Iteration   4: 106.196 ns/op
# Warmup Iteration   5: 108.358 ns/op
Iteration   1: 104.579 ns/op
Iteration   2: 104.467 ns/op
Iteration   3: 105.094 ns/op
Iteration   4: 104.525 ns/op
Iteration   5: 105.514 ns/op
Iteration   6: 105.473 ns/op
Iteration   7: 104.606 ns/op
Iteration   8: 104.281 ns/op
Iteration   9: 104.560 ns/op
Iteration  10: 104.227 ns/op
Iteration  11: 104.604 ns/op
Iteration  12: 104.515 ns/op
Iteration  13: 104.683 ns/op
Iteration  14: 104.039 ns/op
Iteration  15: 104.533 ns/op
Iteration  16: 104.400 ns/op
Iteration  17: 104.841 ns/op
Iteration  18: 104.243 ns/op
Iteration  19: 105.005 ns/op
Iteration  20: 104.581 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 183.260 ns/op
# Warmup Iteration   2: 110.264 ns/op
# Warmup Iteration   3: 105.260 ns/op
# Warmup Iteration   4: 104.401 ns/op
# Warmup Iteration   5: 106.305 ns/op
Iteration   1: 102.926 ns/op
Iteration   2: 103.373 ns/op
Iteration   3: 102.622 ns/op
Iteration   4: 103.473 ns/op
Iteration   5: 102.648 ns/op
Iteration   6: 103.065 ns/op
Iteration   7: 102.349 ns/op
Iteration   8: 103.423 ns/op
Iteration   9: 102.663 ns/op
Iteration  10: 102.637 ns/op
Iteration  11: 102.486 ns/op
Iteration  12: 102.438 ns/op
Iteration  13: 102.222 ns/op
Iteration  14: 102.638 ns/op
Iteration  15: 102.445 ns/op
Iteration  16: 102.953 ns/op
Iteration  17: 102.490 ns/op
Iteration  18: 102.508 ns/op
Iteration  19: 102.449 ns/op
Iteration  20: 102.927 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 183.080 ns/op
# Warmup Iteration   2: 109.766 ns/op
# Warmup Iteration   3: 104.719 ns/op
# Warmup Iteration   4: 104.011 ns/op
# Warmup Iteration   5: 105.134 ns/op
Iteration   1: 102.205 ns/op
Iteration   2: 103.233 ns/op
Iteration   3: 102.184 ns/op
Iteration   4: 102.628 ns/op
Iteration   5: 102.224 ns/op
Iteration   6: 102.457 ns/op
Iteration   7: 101.914 ns/op
Iteration   8: 102.120 ns/op
Iteration   9: 101.983 ns/op
Iteration  10: 102.175 ns/op
Iteration  11: 102.124 ns/op
Iteration  12: 102.429 ns/op
Iteration  13: 101.948 ns/op
Iteration  14: 102.282 ns/op
Iteration  15: 102.405 ns/op
Iteration  16: 102.018 ns/op
Iteration  17: 102.203 ns/op
Iteration  18: 102.030 ns/op
Iteration  19: 102.376 ns/op
Iteration  20: 102.072 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 187.207 ns/op
# Warmup Iteration   2: 116.091 ns/op
# Warmup Iteration   3: 109.135 ns/op
# Warmup Iteration   4: 109.766 ns/op
# Warmup Iteration   5: 109.586 ns/op
Iteration   1: 107.907 ns/op
Iteration   2: 107.011 ns/op
Iteration   3: 107.550 ns/op
Iteration   4: 107.090 ns/op
Iteration   5: 107.644 ns/op
Iteration   6: 107.246 ns/op
Iteration   7: 107.696 ns/op
Iteration   8: 106.711 ns/op
Iteration   9: 106.688 ns/op
Iteration  10: 106.935 ns/op
Iteration  11: 106.737 ns/op
Iteration  12: 106.975 ns/op
Iteration  13: 106.851 ns/op
Iteration  14: 107.176 ns/op
Iteration  15: 106.880 ns/op
Iteration  16: 107.224 ns/op
Iteration  17: 106.832 ns/op
Iteration  18: 107.141 ns/op
Iteration  19: 106.802 ns/op
Iteration  20: 107.331 ns/op


Result "benchmark.StringContains.regexMatches":
  103.868 ±(99.9%) 0.636 ns/op [Average]
  (min, avg, max) = (101.914, 103.868, 107.907), stdev = 1.875
  CI (99.9%): [103.232, 104.504] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ?8MF.aT}s7F2#=|k)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 8.740 ns/op
# Warmup Iteration   2: 9.003 ns/op
# Warmup Iteration   3: 8.933 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.934 ns/op
Iteration   1: 8.932 ns/op
Iteration   2: 8.933 ns/op
Iteration   3: 8.932 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.932 ns/op
Iteration   6: 8.932 ns/op
Iteration   7: 8.933 ns/op
Iteration   8: 8.933 ns/op
Iteration   9: 8.932 ns/op
Iteration  10: 8.934 ns/op
Iteration  11: 8.933 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.932 ns/op
Iteration  14: 8.932 ns/op
Iteration  15: 8.933 ns/op
Iteration  16: 8.932 ns/op
Iteration  17: 8.932 ns/op
Iteration  18: 8.932 ns/op
Iteration  19: 8.933 ns/op
Iteration  20: 8.933 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 8.752 ns/op
# Warmup Iteration   2: 8.991 ns/op
# Warmup Iteration   3: 8.933 ns/op
# Warmup Iteration   4: 8.933 ns/op
# Warmup Iteration   5: 8.933 ns/op
Iteration   1: 8.933 ns/op
Iteration   2: 8.933 ns/op
Iteration   3: 8.933 ns/op
Iteration   4: 8.933 ns/op
Iteration   5: 8.933 ns/op
Iteration   6: 8.933 ns/op
Iteration   7: 8.933 ns/op
Iteration   8: 8.948 ns/op
Iteration   9: 8.933 ns/op
Iteration  10: 8.933 ns/op
Iteration  11: 8.934 ns/op
Iteration  12: 8.933 ns/op
Iteration  13: 8.933 ns/op
Iteration  14: 8.933 ns/op
Iteration  15: 8.933 ns/op
Iteration  16: 8.933 ns/op
Iteration  17: 8.935 ns/op
Iteration  18: 8.934 ns/op
Iteration  19: 8.948 ns/op
Iteration  20: 8.948 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 8.749 ns/op
# Warmup Iteration   2: 8.980 ns/op
# Warmup Iteration   3: 8.935 ns/op
# Warmup Iteration   4: 8.936 ns/op
# Warmup Iteration   5: 8.934 ns/op
Iteration   1: 8.934 ns/op
Iteration   2: 8.935 ns/op
Iteration   3: 8.934 ns/op
Iteration   4: 8.934 ns/op
Iteration   5: 8.935 ns/op
Iteration   6: 8.934 ns/op
Iteration   7: 8.935 ns/op
Iteration   8: 8.935 ns/op
Iteration   9: 8.934 ns/op
Iteration  10: 8.934 ns/op
Iteration  11: 8.935 ns/op
Iteration  12: 8.935 ns/op
Iteration  13: 8.933 ns/op
Iteration  14: 8.934 ns/op
Iteration  15: 8.935 ns/op
Iteration  16: 8.934 ns/op
Iteration  17: 8.935 ns/op
Iteration  18: 8.933 ns/op
Iteration  19: 8.933 ns/op
Iteration  20: 8.935 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 8.659 ns/op
# Warmup Iteration   2: 8.977 ns/op
# Warmup Iteration   3: 8.981 ns/op
# Warmup Iteration   4: 8.980 ns/op
# Warmup Iteration   5: 8.976 ns/op
Iteration   1: 8.978 ns/op
Iteration   2: 8.985 ns/op
Iteration   3: 8.998 ns/op
Iteration   4: 8.972 ns/op
Iteration   5: 8.972 ns/op
Iteration   6: 8.985 ns/op
Iteration   7: 8.980 ns/op
Iteration   8: 8.982 ns/op
Iteration   9: 8.984 ns/op
Iteration  10: 8.977 ns/op
Iteration  11: 8.987 ns/op
Iteration  12: 9.012 ns/op
Iteration  13: 8.989 ns/op
Iteration  14: 8.984 ns/op
Iteration  15: 8.985 ns/op
Iteration  16: 8.986 ns/op
Iteration  17: 8.994 ns/op
Iteration  18: 8.987 ns/op
Iteration  19: 8.987 ns/op
Iteration  20: 8.973 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 8.655 ns/op
# Warmup Iteration   2: 8.970 ns/op
# Warmup Iteration   3: 8.943 ns/op
# Warmup Iteration   4: 8.941 ns/op
# Warmup Iteration   5: 8.942 ns/op
Iteration   1: 8.942 ns/op
Iteration   2: 8.942 ns/op
Iteration   3: 8.942 ns/op
Iteration   4: 8.942 ns/op
Iteration   5: 8.942 ns/op
Iteration   6: 8.942 ns/op
Iteration   7: 8.941 ns/op
Iteration   8: 8.943 ns/op
Iteration   9: 8.942 ns/op
Iteration  10: 8.942 ns/op
Iteration  11: 8.942 ns/op
Iteration  12: 8.941 ns/op
Iteration  13: 8.942 ns/op
Iteration  14: 8.941 ns/op
Iteration  15: 8.941 ns/op
Iteration  16: 8.942 ns/op
Iteration  17: 8.941 ns/op
Iteration  18: 8.942 ns/op
Iteration  19: 8.941 ns/op
Iteration  20: 8.942 ns/op


Result "benchmark.StringContains.stringContains":
  8.946 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (8.932, 8.946, 9.012), stdev = 0.020
  CI (99.9%): [8.939, 8.953] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ?8MF.aT}s7F2#=|k  avgt  100  103.868 ± 0.636  ns/op
StringContains.stringContains     http  ?8MF.aT}s7F2#=|k  avgt  100    8.946 ± 0.007  ns/op

Benchmark result is saved to http_16_1_3.csv
