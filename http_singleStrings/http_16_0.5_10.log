# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = J/1apkihttpm#.$)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 273.877 ns/op
# Warmup Iteration   2: 229.973 ns/op
# Warmup Iteration   3: 194.607 ns/op
# Warmup Iteration   4: 195.377 ns/op
# Warmup Iteration   5: 196.393 ns/op
Iteration   1: 193.001 ns/op
Iteration   2: 197.660 ns/op
Iteration   3: 199.089 ns/op
Iteration   4: 193.809 ns/op
Iteration   5: 193.360 ns/op
Iteration   6: 192.626 ns/op
Iteration   7: 193.507 ns/op
Iteration   8: 193.530 ns/op
Iteration   9: 193.642 ns/op
Iteration  10: 193.527 ns/op
Iteration  11: 192.558 ns/op
Iteration  12: 193.398 ns/op
Iteration  13: 193.460 ns/op
Iteration  14: 193.829 ns/op
Iteration  15: 193.450 ns/op
Iteration  16: 192.758 ns/op
Iteration  17: 193.082 ns/op
Iteration  18: 194.419 ns/op
Iteration  19: 193.377 ns/op
Iteration  20: 194.683 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 271.009 ns/op
# Warmup Iteration   2: 220.961 ns/op
# Warmup Iteration   3: 193.394 ns/op
# Warmup Iteration   4: 193.929 ns/op
# Warmup Iteration   5: 194.925 ns/op
Iteration   1: 191.575 ns/op
Iteration   2: 195.970 ns/op
Iteration   3: 197.084 ns/op
Iteration   4: 192.592 ns/op
Iteration   5: 192.475 ns/op
Iteration   6: 191.605 ns/op
Iteration   7: 192.415 ns/op
Iteration   8: 192.633 ns/op
Iteration   9: 192.620 ns/op
Iteration  10: 192.737 ns/op
Iteration  11: 192.566 ns/op
Iteration  12: 191.557 ns/op
Iteration  13: 192.770 ns/op
Iteration  14: 194.422 ns/op
Iteration  15: 192.066 ns/op
Iteration  16: 192.171 ns/op
Iteration  17: 191.511 ns/op
Iteration  18: 192.185 ns/op
Iteration  19: 192.253 ns/op
Iteration  20: 192.580 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 268.414 ns/op
# Warmup Iteration   2: 224.252 ns/op
# Warmup Iteration   3: 193.803 ns/op
# Warmup Iteration   4: 194.394 ns/op
# Warmup Iteration   5: 195.384 ns/op
Iteration   1: 192.770 ns/op
Iteration   2: 196.388 ns/op
Iteration   3: 197.563 ns/op
Iteration   4: 192.935 ns/op
Iteration   5: 192.823 ns/op
Iteration   6: 192.117 ns/op
Iteration   7: 192.852 ns/op
Iteration   8: 192.864 ns/op
Iteration   9: 192.895 ns/op
Iteration  10: 192.902 ns/op
Iteration  11: 191.798 ns/op
Iteration  12: 192.934 ns/op
Iteration  13: 194.054 ns/op
Iteration  14: 193.157 ns/op
Iteration  15: 194.051 ns/op
Iteration  16: 192.419 ns/op
Iteration  17: 192.038 ns/op
Iteration  18: 192.776 ns/op
Iteration  19: 192.589 ns/op
Iteration  20: 192.524 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 256.738 ns/op
# Warmup Iteration   2: 204.289 ns/op
# Warmup Iteration   3: 181.948 ns/op
# Warmup Iteration   4: 182.429 ns/op
# Warmup Iteration   5: 183.230 ns/op
Iteration   1: 184.111 ns/op
Iteration   2: 185.136 ns/op
Iteration   3: 179.992 ns/op
Iteration   4: 180.865 ns/op
Iteration   5: 180.895 ns/op
Iteration   6: 180.927 ns/op
Iteration   7: 181.032 ns/op
Iteration   8: 181.401 ns/op
Iteration   9: 180.969 ns/op
Iteration  10: 179.925 ns/op
Iteration  11: 180.772 ns/op
Iteration  12: 180.945 ns/op
Iteration  13: 181.706 ns/op
Iteration  14: 180.434 ns/op
Iteration  15: 180.293 ns/op
Iteration  16: 180.321 ns/op
Iteration  17: 179.920 ns/op
Iteration  18: 180.368 ns/op
Iteration  19: 180.326 ns/op
Iteration  20: 180.822 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 276.018 ns/op
# Warmup Iteration   2: 231.173 ns/op
# Warmup Iteration   3: 194.415 ns/op
# Warmup Iteration   4: 194.904 ns/op
# Warmup Iteration   5: 195.841 ns/op
Iteration   1: 192.597 ns/op
Iteration   2: 196.845 ns/op
Iteration   3: 197.980 ns/op
Iteration   4: 193.420 ns/op
Iteration   5: 193.278 ns/op
Iteration   6: 192.372 ns/op
Iteration   7: 193.285 ns/op
Iteration   8: 193.589 ns/op
Iteration   9: 193.403 ns/op
Iteration  10: 194.130 ns/op
Iteration  11: 193.016 ns/op
Iteration  12: 193.508 ns/op
Iteration  13: 193.837 ns/op
Iteration  14: 193.407 ns/op
Iteration  15: 195.006 ns/op
Iteration  16: 192.438 ns/op
Iteration  17: 194.557 ns/op
Iteration  18: 192.899 ns/op
Iteration  19: 193.058 ns/op
Iteration  20: 194.435 ns/op


Result "benchmark.StringContains.regexMatches":
  190.972 ±(99.9%) 1.762 ns/op [Average]
  (min, avg, max) = (179.920, 190.972, 199.089), stdev = 5.196
  CI (99.9%): [189.210, 192.734] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = J/1apkihttpm#.$)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.233 ns/op
# Warmup Iteration   2: 9.734 ns/op
# Warmup Iteration   3: 9.866 ns/op
# Warmup Iteration   4: 9.852 ns/op
# Warmup Iteration   5: 9.868 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.870 ns/op
Iteration   4: 9.873 ns/op
Iteration   5: 9.863 ns/op
Iteration   6: 9.848 ns/op
Iteration   7: 9.859 ns/op
Iteration   8: 9.865 ns/op
Iteration   9: 9.867 ns/op
Iteration  10: 9.859 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.856 ns/op
Iteration  16: 9.858 ns/op
Iteration  17: 9.839 ns/op
Iteration  18: 9.849 ns/op
Iteration  19: 9.846 ns/op
Iteration  20: 9.851 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.437 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.931 ns/op
# Warmup Iteration   4: 9.947 ns/op
# Warmup Iteration   5: 9.946 ns/op
Iteration   1: 9.917 ns/op
Iteration   2: 9.907 ns/op
Iteration   3: 9.910 ns/op
Iteration   4: 9.958 ns/op
Iteration   5: 9.948 ns/op
Iteration   6: 9.908 ns/op
Iteration   7: 9.940 ns/op
Iteration   8: 9.951 ns/op
Iteration   9: 9.946 ns/op
Iteration  10: 9.904 ns/op
Iteration  11: 9.930 ns/op
Iteration  12: 9.923 ns/op
Iteration  13: 9.937 ns/op
Iteration  14: 9.942 ns/op
Iteration  15: 9.948 ns/op
Iteration  16: 9.954 ns/op
Iteration  17: 9.973 ns/op
Iteration  18: 9.934 ns/op
Iteration  19: 9.946 ns/op
Iteration  20: 9.944 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.223 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.864 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.845 ns/op
Iteration   1: 9.848 ns/op
Iteration   2: 9.860 ns/op
Iteration   3: 9.861 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.842 ns/op
Iteration   6: 9.863 ns/op
Iteration   7: 9.863 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.870 ns/op
Iteration  10: 9.847 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.864 ns/op
Iteration  15: 9.892 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.856 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.247 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.869 ns/op
# Warmup Iteration   4: 9.883 ns/op
# Warmup Iteration   5: 9.856 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.867 ns/op
Iteration   3: 9.863 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.847 ns/op
Iteration  10: 9.845 ns/op
Iteration  11: 9.860 ns/op
Iteration  12: 9.867 ns/op
Iteration  13: 9.860 ns/op
Iteration  14: 9.861 ns/op
Iteration  15: 9.860 ns/op
Iteration  16: 9.865 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.860 ns/op
Iteration  20: 9.856 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.448 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.925 ns/op
# Warmup Iteration   4: 9.946 ns/op
# Warmup Iteration   5: 9.968 ns/op
Iteration   1: 9.959 ns/op
Iteration   2: 9.948 ns/op
Iteration   3: 9.944 ns/op
Iteration   4: 9.940 ns/op
Iteration   5: 9.933 ns/op
Iteration   6: 9.952 ns/op
Iteration   7: 9.931 ns/op
Iteration   8: 9.943 ns/op
Iteration   9: 9.925 ns/op
Iteration  10: 9.948 ns/op
Iteration  11: 9.952 ns/op
Iteration  12: 9.959 ns/op
Iteration  13: 9.964 ns/op
Iteration  14: 9.976 ns/op
Iteration  15: 9.947 ns/op
Iteration  16: 9.964 ns/op
Iteration  17: 9.958 ns/op
Iteration  18: 9.940 ns/op
Iteration  19: 9.960 ns/op
Iteration  20: 9.952 ns/op


Result "benchmark.StringContains.stringContains":
  9.894 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (9.839, 9.894, 9.976), stdev = 0.042
  CI (99.9%): [9.879, 9.908] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  J/1apkihttpm#.$  avgt  100  190.972 ± 1.762  ns/op
StringContains.stringContains     http  J/1apkihttpm#.$  avgt  100    9.894 ± 0.014  ns/op

Benchmark result is saved to http_16_0.5_10.csv
