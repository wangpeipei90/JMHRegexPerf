# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 7J1ucFm]ETJo1v;ChttpR[!NuD}I(=:1{0O|"Ys%cqXzYX`FEIaiPCMi8*h5%`)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 672.966 ns/op
# Warmup Iteration   2: 687.998 ns/op
# Warmup Iteration   3: 687.641 ns/op
# Warmup Iteration   4: 688.825 ns/op
# Warmup Iteration   5: 614.245 ns/op
Iteration   1: 604.684 ns/op
Iteration   2: 604.421 ns/op
Iteration   3: 610.304 ns/op
Iteration   4: 604.619 ns/op
Iteration   5: 604.416 ns/op
Iteration   6: 612.287 ns/op
Iteration   7: 604.343 ns/op
Iteration   8: 604.572 ns/op
Iteration   9: 604.883 ns/op
Iteration  10: 616.083 ns/op
Iteration  11: 604.804 ns/op
Iteration  12: 604.942 ns/op
Iteration  13: 612.012 ns/op
Iteration  14: 614.534 ns/op
Iteration  15: 604.943 ns/op
Iteration  16: 605.105 ns/op
Iteration  17: 622.761 ns/op
Iteration  18: 604.798 ns/op
Iteration  19: 604.723 ns/op
Iteration  20: 604.855 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 669.671 ns/op
# Warmup Iteration   2: 693.179 ns/op
# Warmup Iteration   3: 696.569 ns/op
# Warmup Iteration   4: 696.321 ns/op
# Warmup Iteration   5: 635.350 ns/op
Iteration   1: 621.438 ns/op
Iteration   2: 622.042 ns/op
Iteration   3: 627.830 ns/op
Iteration   4: 621.924 ns/op
Iteration   5: 622.174 ns/op
Iteration   6: 622.048 ns/op
Iteration   7: 632.252 ns/op
Iteration   8: 622.155 ns/op
Iteration   9: 621.882 ns/op
Iteration  10: 632.738 ns/op
Iteration  11: 621.675 ns/op
Iteration  12: 621.665 ns/op
Iteration  13: 621.876 ns/op
Iteration  14: 636.585 ns/op
Iteration  15: 621.983 ns/op
Iteration  16: 621.702 ns/op
Iteration  17: 622.063 ns/op
Iteration  18: 640.230 ns/op
Iteration  19: 621.851 ns/op
Iteration  20: 622.076 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 648.180 ns/op
# Warmup Iteration   2: 633.287 ns/op
# Warmup Iteration   3: 716.106 ns/op
# Warmup Iteration   4: 716.532 ns/op
# Warmup Iteration   5: 664.112 ns/op
Iteration   1: 641.258 ns/op
Iteration   2: 641.190 ns/op
Iteration   3: 647.345 ns/op
Iteration   4: 641.112 ns/op
Iteration   5: 641.205 ns/op
Iteration   6: 641.352 ns/op
Iteration   7: 649.060 ns/op
Iteration   8: 641.674 ns/op
Iteration   9: 640.983 ns/op
Iteration  10: 641.607 ns/op
Iteration  11: 650.990 ns/op
Iteration  12: 640.623 ns/op
Iteration  13: 640.926 ns/op
Iteration  14: 646.769 ns/op
Iteration  15: 649.320 ns/op
Iteration  16: 641.319 ns/op
Iteration  17: 640.362 ns/op
Iteration  18: 641.579 ns/op
Iteration  19: 658.252 ns/op
Iteration  20: 641.885 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 677.571 ns/op
# Warmup Iteration   2: 683.299 ns/op
# Warmup Iteration   3: 702.528 ns/op
# Warmup Iteration   4: 702.145 ns/op
# Warmup Iteration   5: 648.890 ns/op
Iteration   1: 633.862 ns/op
Iteration   2: 634.305 ns/op
Iteration   3: 637.311 ns/op
Iteration   4: 624.685 ns/op
Iteration   5: 624.816 ns/op
Iteration   6: 624.621 ns/op
Iteration   7: 632.401 ns/op
Iteration   8: 625.002 ns/op
Iteration   9: 624.575 ns/op
Iteration  10: 635.072 ns/op
Iteration  11: 624.453 ns/op
Iteration  12: 604.923 ns/op
Iteration  13: 604.986 ns/op
Iteration  14: 618.765 ns/op
Iteration  15: 604.990 ns/op
Iteration  16: 605.247 ns/op
Iteration  17: 604.858 ns/op
Iteration  18: 626.468 ns/op
Iteration  19: 604.611 ns/op
Iteration  20: 604.640 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 670.936 ns/op
# Warmup Iteration   2: 693.551 ns/op
# Warmup Iteration   3: 697.464 ns/op
# Warmup Iteration   4: 696.559 ns/op
# Warmup Iteration   5: 636.267 ns/op
Iteration   1: 622.277 ns/op
Iteration   2: 622.166 ns/op
Iteration   3: 629.154 ns/op
Iteration   4: 622.383 ns/op
Iteration   5: 622.582 ns/op
Iteration   6: 622.543 ns/op
Iteration   7: 630.878 ns/op
Iteration   8: 622.267 ns/op
Iteration   9: 622.223 ns/op
Iteration  10: 633.045 ns/op
Iteration  11: 622.622 ns/op
Iteration  12: 622.548 ns/op
Iteration  13: 622.771 ns/op
Iteration  14: 636.608 ns/op
Iteration  15: 622.342 ns/op
Iteration  16: 622.166 ns/op
Iteration  17: 622.374 ns/op
Iteration  18: 640.358 ns/op
Iteration  19: 622.908 ns/op
Iteration  20: 622.697 ns/op


Result "benchmark.StringContains.regexMatches":
  624.386 ±(99.9%) 4.653 ns/op [Average]
  (min, avg, max) = (604.343, 624.386, 658.252), stdev = 13.718
  CI (99.9%): [619.733, 629.038] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 7J1ucFm]ETJo1v;ChttpR[!NuD}I(=:1{0O|"Ys%cqXzYX`FEIaiPCMi8*h5%`)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.981 ns/op
# Warmup Iteration   2: 12.529 ns/op
# Warmup Iteration   3: 12.307 ns/op
# Warmup Iteration   4: 12.289 ns/op
# Warmup Iteration   5: 12.303 ns/op
Iteration   1: 12.301 ns/op
Iteration   2: 12.286 ns/op
Iteration   3: 12.305 ns/op
Iteration   4: 12.279 ns/op
Iteration   5: 12.287 ns/op
Iteration   6: 12.333 ns/op
Iteration   7: 12.316 ns/op
Iteration   8: 12.335 ns/op
Iteration   9: 12.301 ns/op
Iteration  10: 12.314 ns/op
Iteration  11: 12.287 ns/op
Iteration  12: 12.309 ns/op
Iteration  13: 12.302 ns/op
Iteration  14: 12.305 ns/op
Iteration  15: 12.274 ns/op
Iteration  16: 12.305 ns/op
Iteration  17: 12.306 ns/op
Iteration  18: 12.297 ns/op
Iteration  19: 12.308 ns/op
Iteration  20: 12.294 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.299 ns/op
# Warmup Iteration   2: 12.562 ns/op
# Warmup Iteration   3: 12.128 ns/op
# Warmup Iteration   4: 12.136 ns/op
# Warmup Iteration   5: 12.145 ns/op
Iteration   1: 12.139 ns/op
Iteration   2: 12.145 ns/op
Iteration   3: 12.122 ns/op
Iteration   4: 12.139 ns/op
Iteration   5: 12.129 ns/op
Iteration   6: 12.116 ns/op
Iteration   7: 12.137 ns/op
Iteration   8: 12.128 ns/op
Iteration   9: 12.126 ns/op
Iteration  10: 12.152 ns/op
Iteration  11: 12.130 ns/op
Iteration  12: 12.136 ns/op
Iteration  13: 12.144 ns/op
Iteration  14: 12.133 ns/op
Iteration  15: 12.153 ns/op
Iteration  16: 12.139 ns/op
Iteration  17: 12.128 ns/op
Iteration  18: 12.123 ns/op
Iteration  19: 12.144 ns/op
Iteration  20: 12.151 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.983 ns/op
# Warmup Iteration   2: 12.514 ns/op
# Warmup Iteration   3: 12.318 ns/op
# Warmup Iteration   4: 12.332 ns/op
# Warmup Iteration   5: 12.349 ns/op
Iteration   1: 12.373 ns/op
Iteration   2: 12.336 ns/op
Iteration   3: 12.343 ns/op
Iteration   4: 12.342 ns/op
Iteration   5: 12.345 ns/op
Iteration   6: 12.313 ns/op
Iteration   7: 12.329 ns/op
Iteration   8: 12.320 ns/op
Iteration   9: 12.340 ns/op
Iteration  10: 12.331 ns/op
Iteration  11: 12.323 ns/op
Iteration  12: 12.341 ns/op
Iteration  13: 12.378 ns/op
Iteration  14: 12.332 ns/op
Iteration  15: 12.345 ns/op
Iteration  16: 12.339 ns/op
Iteration  17: 12.331 ns/op
Iteration  18: 12.319 ns/op
Iteration  19: 12.313 ns/op
Iteration  20: 12.327 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.304 ns/op
# Warmup Iteration   2: 12.666 ns/op
# Warmup Iteration   3: 12.151 ns/op
# Warmup Iteration   4: 12.159 ns/op
# Warmup Iteration   5: 12.161 ns/op
Iteration   1: 12.161 ns/op
Iteration   2: 12.146 ns/op
Iteration   3: 12.168 ns/op
Iteration   4: 12.152 ns/op
Iteration   5: 12.158 ns/op
Iteration   6: 12.150 ns/op
Iteration   7: 12.160 ns/op
Iteration   8: 12.151 ns/op
Iteration   9: 12.146 ns/op
Iteration  10: 12.137 ns/op
Iteration  11: 12.151 ns/op
Iteration  12: 12.150 ns/op
Iteration  13: 12.162 ns/op
Iteration  14: 12.144 ns/op
Iteration  15: 12.140 ns/op
Iteration  16: 12.133 ns/op
Iteration  17: 12.138 ns/op
Iteration  18: 12.128 ns/op
Iteration  19: 12.150 ns/op
Iteration  20: 12.131 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.277 ns/op
# Warmup Iteration   2: 12.507 ns/op
# Warmup Iteration   3: 12.129 ns/op
# Warmup Iteration   4: 12.138 ns/op
# Warmup Iteration   5: 12.116 ns/op
Iteration   1: 12.131 ns/op
Iteration   2: 12.124 ns/op
Iteration   3: 12.126 ns/op
Iteration   4: 12.110 ns/op
Iteration   5: 12.113 ns/op
Iteration   6: 12.115 ns/op
Iteration   7: 12.131 ns/op
Iteration   8: 12.116 ns/op
Iteration   9: 12.123 ns/op
Iteration  10: 12.128 ns/op
Iteration  11: 12.134 ns/op
Iteration  12: 12.117 ns/op
Iteration  13: 12.123 ns/op
Iteration  14: 12.124 ns/op
Iteration  15: 12.115 ns/op
Iteration  16: 12.114 ns/op
Iteration  17: 12.112 ns/op
Iteration  18: 12.124 ns/op
Iteration  19: 12.120 ns/op
Iteration  20: 12.138 ns/op


Result "benchmark.StringContains.stringContains":
  12.209 ±(99.9%) 0.031 ns/op [Average]
  (min, avg, max) = (12.110, 12.209, 12.378), stdev = 0.092
  CI (99.9%): [12.177, 12.240] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  7J1ucFm]ETJo1v;ChttpR[!NuD}I(=:1{0O|"Ys%cqXzYX`FEIaiPCMi8*h5%`  avgt  100  624.386 ± 4.653  ns/op
StringContains.stringContains     http  7J1ucFm]ETJo1v;ChttpR[!NuD}I(=:1{0O|"Ys%cqXzYX`FEIaiPCMi8*h5%`  avgt  100   12.209 ± 0.031  ns/op

Benchmark result is saved to http_64_0.25_7.csv
