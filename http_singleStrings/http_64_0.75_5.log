# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = W-O?KBv*jo`H
w{b\C#Ol2f1\*3olW"I71x2W~/Q:'Ygnghttp=X$+vsqwu;k)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 355.382 ns/op
# Warmup Iteration   2: 359.762 ns/op
# Warmup Iteration   3: 282.394 ns/op
# Warmup Iteration   4: 272.872 ns/op
# Warmup Iteration   5: 270.317 ns/op
Iteration   1: 274.049 ns/op
Iteration   2: 275.106 ns/op
Iteration   3: 270.360 ns/op
Iteration   4: 276.707 ns/op
Iteration   5: 270.209 ns/op
Iteration   6: 278.469 ns/op
Iteration   7: 270.522 ns/op
Iteration   8: 271.703 ns/op
Iteration   9: 271.438 ns/op
Iteration  10: 270.344 ns/op
Iteration  11: 271.506 ns/op
Iteration  12: 270.455 ns/op
Iteration  13: 271.615 ns/op
Iteration  14: 272.672 ns/op
Iteration  15: 271.489 ns/op
Iteration  16: 271.701 ns/op
Iteration  17: 270.317 ns/op
Iteration  18: 271.750 ns/op
Iteration  19: 270.367 ns/op
Iteration  20: 272.199 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 350.867 ns/op
# Warmup Iteration   2: 360.494 ns/op
# Warmup Iteration   3: 282.432 ns/op
# Warmup Iteration   4: 274.159 ns/op
# Warmup Iteration   5: 271.393 ns/op
Iteration   1: 275.073 ns/op
Iteration   2: 276.204 ns/op
Iteration   3: 271.371 ns/op
Iteration   4: 277.794 ns/op
Iteration   5: 271.350 ns/op
Iteration   6: 279.100 ns/op
Iteration   7: 271.450 ns/op
Iteration   8: 272.727 ns/op
Iteration   9: 272.708 ns/op
Iteration  10: 271.444 ns/op
Iteration  11: 272.859 ns/op
Iteration  12: 271.399 ns/op
Iteration  13: 272.935 ns/op
Iteration  14: 271.442 ns/op
Iteration  15: 273.029 ns/op
Iteration  16: 272.866 ns/op
Iteration  17: 271.111 ns/op
Iteration  18: 272.736 ns/op
Iteration  19: 271.641 ns/op
Iteration  20: 273.033 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 354.432 ns/op
# Warmup Iteration   2: 360.369 ns/op
# Warmup Iteration   3: 300.764 ns/op
# Warmup Iteration   4: 290.997 ns/op
# Warmup Iteration   5: 288.603 ns/op
Iteration   1: 292.492 ns/op
Iteration   2: 288.609 ns/op
Iteration   3: 293.423 ns/op
Iteration   4: 294.949 ns/op
Iteration   5: 288.566 ns/op
Iteration   6: 296.703 ns/op
Iteration   7: 288.906 ns/op
Iteration   8: 290.059 ns/op
Iteration   9: 288.629 ns/op
Iteration  10: 289.891 ns/op
Iteration  11: 288.387 ns/op
Iteration  12: 289.998 ns/op
Iteration  13: 288.608 ns/op
Iteration  14: 289.982 ns/op
Iteration  15: 288.359 ns/op
Iteration  16: 290.093 ns/op
Iteration  17: 290.355 ns/op
Iteration  18: 288.530 ns/op
Iteration  19: 290.656 ns/op
Iteration  20: 288.566 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 353.189 ns/op
# Warmup Iteration   2: 361.241 ns/op
# Warmup Iteration   3: 283.501 ns/op
# Warmup Iteration   4: 276.499 ns/op
# Warmup Iteration   5: 270.113 ns/op
Iteration   1: 273.772 ns/op
Iteration   2: 274.812 ns/op
Iteration   3: 270.244 ns/op
Iteration   4: 276.731 ns/op
Iteration   5: 270.839 ns/op
Iteration   6: 278.358 ns/op
Iteration   7: 269.996 ns/op
Iteration   8: 271.467 ns/op
Iteration   9: 271.657 ns/op
Iteration  10: 270.007 ns/op
Iteration  11: 271.544 ns/op
Iteration  12: 270.280 ns/op
Iteration  13: 271.542 ns/op
Iteration  14: 271.517 ns/op
Iteration  15: 270.119 ns/op
Iteration  16: 273.114 ns/op
Iteration  17: 270.575 ns/op
Iteration  18: 272.341 ns/op
Iteration  19: 270.072 ns/op
Iteration  20: 271.968 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.309 ns/op
# Warmup Iteration   2: 360.034 ns/op
# Warmup Iteration   3: 279.977 ns/op
# Warmup Iteration   4: 272.938 ns/op
# Warmup Iteration   5: 270.246 ns/op
Iteration   1: 273.634 ns/op
Iteration   2: 274.893 ns/op
Iteration   3: 270.073 ns/op
Iteration   4: 276.187 ns/op
Iteration   5: 270.410 ns/op
Iteration   6: 278.278 ns/op
Iteration   7: 271.633 ns/op
Iteration   8: 270.129 ns/op
Iteration   9: 271.692 ns/op
Iteration  10: 270.641 ns/op
Iteration  11: 271.827 ns/op
Iteration  12: 270.648 ns/op
Iteration  13: 271.865 ns/op
Iteration  14: 271.746 ns/op
Iteration  15: 270.284 ns/op
Iteration  16: 272.068 ns/op
Iteration  17: 270.481 ns/op
Iteration  18: 272.062 ns/op
Iteration  19: 270.502 ns/op
Iteration  20: 272.223 ns/op


Result "benchmark.StringContains.regexMatches":
  275.932 ±(99.9%) 2.564 ns/op [Average]
  (min, avg, max) = (269.996, 275.932, 296.703), stdev = 7.559
  CI (99.9%): [273.369, 278.496] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = W-O?KBv*jo`H
w{b\C#Ol2f1\*3olW"I71x2W~/Q:'Ygnghttp=X$+vsqwu;k)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.075 ns/op
# Warmup Iteration   2: 17.040 ns/op
# Warmup Iteration   3: 16.511 ns/op
# Warmup Iteration   4: 16.508 ns/op
# Warmup Iteration   5: 16.519 ns/op
Iteration   1: 16.524 ns/op
Iteration   2: 16.528 ns/op
Iteration   3: 16.524 ns/op
Iteration   4: 16.519 ns/op
Iteration   5: 16.527 ns/op
Iteration   6: 16.518 ns/op
Iteration   7: 16.515 ns/op
Iteration   8: 16.510 ns/op
Iteration   9: 16.521 ns/op
Iteration  10: 16.513 ns/op
Iteration  11: 16.516 ns/op
Iteration  12: 16.515 ns/op
Iteration  13: 16.501 ns/op
Iteration  14: 16.515 ns/op
Iteration  15: 16.509 ns/op
Iteration  16: 16.505 ns/op
Iteration  17: 16.516 ns/op
Iteration  18: 16.513 ns/op
Iteration  19: 16.512 ns/op
Iteration  20: 16.500 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.931 ns/op
# Warmup Iteration   2: 17.094 ns/op
# Warmup Iteration   3: 16.527 ns/op
# Warmup Iteration   4: 16.523 ns/op
# Warmup Iteration   5: 16.517 ns/op
Iteration   1: 16.524 ns/op
Iteration   2: 16.527 ns/op
Iteration   3: 16.519 ns/op
Iteration   4: 16.511 ns/op
Iteration   5: 16.506 ns/op
Iteration   6: 16.519 ns/op
Iteration   7: 16.522 ns/op
Iteration   8: 16.514 ns/op
Iteration   9: 16.523 ns/op
Iteration  10: 16.511 ns/op
Iteration  11: 16.534 ns/op
Iteration  12: 16.513 ns/op
Iteration  13: 16.516 ns/op
Iteration  14: 16.521 ns/op
Iteration  15: 16.512 ns/op
Iteration  16: 16.504 ns/op
Iteration  17: 16.520 ns/op
Iteration  18: 16.513 ns/op
Iteration  19: 16.509 ns/op
Iteration  20: 16.521 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.962 ns/op
# Warmup Iteration   2: 17.032 ns/op
# Warmup Iteration   3: 16.514 ns/op
# Warmup Iteration   4: 16.488 ns/op
# Warmup Iteration   5: 16.499 ns/op
Iteration   1: 16.481 ns/op
Iteration   2: 16.477 ns/op
Iteration   3: 16.505 ns/op
Iteration   4: 16.514 ns/op
Iteration   5: 16.515 ns/op
Iteration   6: 16.499 ns/op
Iteration   7: 16.501 ns/op
Iteration   8: 16.510 ns/op
Iteration   9: 16.518 ns/op
Iteration  10: 16.522 ns/op
Iteration  11: 16.530 ns/op
Iteration  12: 16.526 ns/op
Iteration  13: 16.500 ns/op
Iteration  14: 16.515 ns/op
Iteration  15: 16.519 ns/op
Iteration  16: 16.516 ns/op
Iteration  17: 16.521 ns/op
Iteration  18: 16.517 ns/op
Iteration  19: 16.519 ns/op
Iteration  20: 16.525 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.063 ns/op
# Warmup Iteration   2: 17.065 ns/op
# Warmup Iteration   3: 16.533 ns/op
# Warmup Iteration   4: 16.522 ns/op
# Warmup Iteration   5: 16.528 ns/op
Iteration   1: 16.514 ns/op
Iteration   2: 16.521 ns/op
Iteration   3: 16.531 ns/op
Iteration   4: 16.517 ns/op
Iteration   5: 16.515 ns/op
Iteration   6: 16.511 ns/op
Iteration   7: 16.523 ns/op
Iteration   8: 16.515 ns/op
Iteration   9: 16.540 ns/op
Iteration  10: 16.518 ns/op
Iteration  11: 16.523 ns/op
Iteration  12: 16.536 ns/op
Iteration  13: 16.509 ns/op
Iteration  14: 16.521 ns/op
Iteration  15: 16.523 ns/op
Iteration  16: 16.534 ns/op
Iteration  17: 16.532 ns/op
Iteration  18: 16.548 ns/op
Iteration  19: 16.519 ns/op
Iteration  20: 16.516 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.068 ns/op
# Warmup Iteration   2: 17.120 ns/op
# Warmup Iteration   3: 17.344 ns/op
# Warmup Iteration   4: 17.309 ns/op
# Warmup Iteration   5: 17.392 ns/op
Iteration   1: 17.418 ns/op
Iteration   2: 17.359 ns/op
Iteration   3: 17.406 ns/op
Iteration   4: 17.370 ns/op
Iteration   5: 17.373 ns/op
Iteration   6: 17.364 ns/op
Iteration   7: 17.373 ns/op
Iteration   8: 17.365 ns/op
Iteration   9: 17.426 ns/op
Iteration  10: 17.481 ns/op
Iteration  11: 17.355 ns/op
Iteration  12: 17.403 ns/op
Iteration  13: 17.474 ns/op
Iteration  14: 17.420 ns/op
Iteration  15: 17.398 ns/op
Iteration  16: 17.369 ns/op
Iteration  17: 17.443 ns/op
Iteration  18: 17.393 ns/op
Iteration  19: 17.386 ns/op
Iteration  20: 17.384 ns/op


Result "benchmark.StringContains.stringContains":
  16.693 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (16.477, 16.693, 17.481), stdev = 0.355
  CI (99.9%): [16.573, 16.813] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  W-O?KBv*jo`H
w{b\C#Ol2f1\*3olW"I71x2W~/Q:'Ygnghttp=X$+vsqwu;k  avgt  100  275.932 ± 2.564  ns/op
StringContains.stringContains     http  W-O?KBv*jo`H
w{b\C#Ol2f1\*3olW"I71x2W~/Q:'Ygnghttp=X$+vsqwu;k  avgt  100   16.693 ± 0.120  ns/op

Benchmark result is saved to http_64_0.75_5.csv
