# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpEuP7{jc+ 5E1T	+Q)j`Z\pZQ)W9u_WkI|Nt=Oy!.[uCH?pks3iuhj@]=g,6&}@M0czTrR7}#rc1jj&%;OJtvA(hA"^RZEHI|lCboAvQ[VtNW4<y	3Rp tpH2b)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1480.299 ns/op
# Warmup Iteration   2: 1488.174 ns/op
# Warmup Iteration   3: 1634.416 ns/op
# Warmup Iteration   4: 1637.562 ns/op
# Warmup Iteration   5: 1636.448 ns/op
Iteration   1: 1637.462 ns/op
Iteration   2: 1639.163 ns/op
Iteration   3: 1639.873 ns/op
Iteration   4: 1634.661 ns/op
Iteration   5: 1620.655 ns/op
Iteration   6: 1555.469 ns/op
Iteration   7: 1555.456 ns/op
Iteration   8: 1557.639 ns/op
Iteration   9: 1555.539 ns/op
Iteration  10: 1555.578 ns/op
Iteration  11: 1556.469 ns/op
Iteration  12: 1555.739 ns/op
Iteration  13: 1555.724 ns/op
Iteration  14: 1571.384 ns/op
Iteration  15: 1556.640 ns/op
Iteration  16: 1557.179 ns/op
Iteration  17: 1556.452 ns/op
Iteration  18: 1556.418 ns/op
Iteration  19: 1556.643 ns/op
Iteration  20: 1559.522 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1480.810 ns/op
# Warmup Iteration   2: 1403.861 ns/op
# Warmup Iteration   3: 1629.399 ns/op
# Warmup Iteration   4: 1629.216 ns/op
# Warmup Iteration   5: 1628.795 ns/op
Iteration   1: 1629.617 ns/op
Iteration   2: 1629.365 ns/op
Iteration   3: 1629.433 ns/op
Iteration   4: 1629.729 ns/op
Iteration   5: 1606.588 ns/op
Iteration   6: 1557.585 ns/op
Iteration   7: 1556.323 ns/op
Iteration   8: 1557.197 ns/op
Iteration   9: 1556.148 ns/op
Iteration  10: 1555.675 ns/op
Iteration  11: 1557.187 ns/op
Iteration  12: 1556.506 ns/op
Iteration  13: 1556.207 ns/op
Iteration  14: 1569.830 ns/op
Iteration  15: 1555.212 ns/op
Iteration  16: 1555.154 ns/op
Iteration  17: 1555.474 ns/op
Iteration  18: 1555.747 ns/op
Iteration  19: 1555.599 ns/op
Iteration  20: 1555.517 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1558.329 ns/op
# Warmup Iteration   2: 1478.592 ns/op
# Warmup Iteration   3: 1626.088 ns/op
# Warmup Iteration   4: 1625.763 ns/op
# Warmup Iteration   5: 1626.165 ns/op
Iteration   1: 1625.937 ns/op
Iteration   2: 1626.472 ns/op
Iteration   3: 1626.476 ns/op
Iteration   4: 1625.827 ns/op
Iteration   5: 1616.258 ns/op
Iteration   6: 1552.795 ns/op
Iteration   7: 1552.402 ns/op
Iteration   8: 1554.360 ns/op
Iteration   9: 1551.649 ns/op
Iteration  10: 1550.840 ns/op
Iteration  11: 1553.128 ns/op
Iteration  12: 1553.318 ns/op
Iteration  13: 1551.538 ns/op
Iteration  14: 1565.420 ns/op
Iteration  15: 1551.536 ns/op
Iteration  16: 1552.332 ns/op
Iteration  17: 1551.976 ns/op
Iteration  18: 1551.936 ns/op
Iteration  19: 1552.498 ns/op
Iteration  20: 1550.979 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1567.610 ns/op
# Warmup Iteration   2: 1479.646 ns/op
# Warmup Iteration   3: 1626.068 ns/op
# Warmup Iteration   4: 1625.911 ns/op
# Warmup Iteration   5: 1626.266 ns/op
Iteration   1: 1626.156 ns/op
Iteration   2: 1626.113 ns/op
Iteration   3: 1625.872 ns/op
Iteration   4: 1625.644 ns/op
Iteration   5: 1607.680 ns/op
Iteration   6: 1549.827 ns/op
Iteration   7: 1549.018 ns/op
Iteration   8: 1549.342 ns/op
Iteration   9: 1548.713 ns/op
Iteration  10: 1548.909 ns/op
Iteration  11: 1549.714 ns/op
Iteration  12: 1555.742 ns/op
Iteration  13: 1556.154 ns/op
Iteration  14: 1571.341 ns/op
Iteration  15: 1551.610 ns/op
Iteration  16: 1552.392 ns/op
Iteration  17: 1552.221 ns/op
Iteration  18: 1551.542 ns/op
Iteration  19: 1551.631 ns/op
Iteration  20: 1551.746 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1508.638 ns/op
# Warmup Iteration   2: 1475.946 ns/op
# Warmup Iteration   3: 1527.312 ns/op
# Warmup Iteration   4: 1526.585 ns/op
# Warmup Iteration   5: 1527.749 ns/op
Iteration   1: 1528.788 ns/op
Iteration   2: 1528.637 ns/op
Iteration   3: 1528.433 ns/op
Iteration   4: 1528.159 ns/op
Iteration   5: 1472.168 ns/op
Iteration   6: 1447.848 ns/op
Iteration   7: 1448.773 ns/op
Iteration   8: 1452.071 ns/op
Iteration   9: 1449.423 ns/op
Iteration  10: 1449.764 ns/op
Iteration  11: 1449.961 ns/op
Iteration  12: 1450.153 ns/op
Iteration  13: 1462.662 ns/op
Iteration  14: 1449.313 ns/op
Iteration  15: 1449.247 ns/op
Iteration  16: 1449.546 ns/op
Iteration  17: 1449.540 ns/op
Iteration  18: 1449.382 ns/op
Iteration  19: 1449.429 ns/op
Iteration  20: 1452.134 ns/op


Result "benchmark.StringContains.regexMatches":
  1551.782 ±(99.9%) 17.944 ns/op [Average]
  (min, avg, max) = (1447.848, 1551.782, 1639.873), stdev = 52.907
  CI (99.9%): [1533.839, 1569.726] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpEuP7{jc+ 5E1T	+Q)j`Z\pZQ)W9u_WkI|Nt=Oy!.[uCH?pks3iuhj@]=g,6&}@M0czTrR7}#rc1jj&%;OJtvA(hA"^RZEHI|lCboAvQ[VtNW4<y	3Rp tpH2b)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.485 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.903 ns/op
# Warmup Iteration   4: 9.892 ns/op
# Warmup Iteration   5: 9.899 ns/op
Iteration   1: 9.887 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.892 ns/op
Iteration   5: 9.898 ns/op
Iteration   6: 9.893 ns/op
Iteration   7: 9.912 ns/op
Iteration   8: 9.903 ns/op
Iteration   9: 9.908 ns/op
Iteration  10: 9.889 ns/op
Iteration  11: 9.896 ns/op
Iteration  12: 9.887 ns/op
Iteration  13: 9.916 ns/op
Iteration  14: 9.883 ns/op
Iteration  15: 9.892 ns/op
Iteration  16: 9.905 ns/op
Iteration  17: 9.892 ns/op
Iteration  18: 9.873 ns/op
Iteration  19: 9.898 ns/op
Iteration  20: 9.890 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.205 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.862 ns/op
# Warmup Iteration   4: 9.871 ns/op
# Warmup Iteration   5: 9.862 ns/op
Iteration   1: 9.851 ns/op
Iteration   2: 9.857 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.877 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.849 ns/op
Iteration  11: 9.845 ns/op
Iteration  12: 9.852 ns/op
Iteration  13: 9.858 ns/op
Iteration  14: 9.858 ns/op
Iteration  15: 9.848 ns/op
Iteration  16: 9.844 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.852 ns/op
Iteration  20: 9.886 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.844 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.868 ns/op
Iteration   3: 9.863 ns/op
Iteration   4: 9.860 ns/op
Iteration   5: 9.852 ns/op
Iteration   6: 9.847 ns/op
Iteration   7: 9.852 ns/op
Iteration   8: 9.848 ns/op
Iteration   9: 9.842 ns/op
Iteration  10: 9.842 ns/op
Iteration  11: 9.853 ns/op
Iteration  12: 9.850 ns/op
Iteration  13: 9.859 ns/op
Iteration  14: 9.844 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.859 ns/op
Iteration  17: 9.844 ns/op
Iteration  18: 9.852 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.848 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.465 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.851 ns/op
# Warmup Iteration   4: 9.851 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.846 ns/op
Iteration   2: 9.852 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.852 ns/op
Iteration   5: 9.859 ns/op
Iteration   6: 9.846 ns/op
Iteration   7: 9.857 ns/op
Iteration   8: 9.851 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.853 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.875 ns/op
Iteration  13: 9.855 ns/op
Iteration  14: 9.869 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.871 ns/op
Iteration  17: 9.849 ns/op
Iteration  18: 9.847 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.867 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.456 ns/op
# Warmup Iteration   2: 9.719 ns/op
# Warmup Iteration   3: 9.821 ns/op
# Warmup Iteration   4: 9.828 ns/op
# Warmup Iteration   5: 9.814 ns/op
Iteration   1: 9.831 ns/op
Iteration   2: 9.828 ns/op
Iteration   3: 9.816 ns/op
Iteration   4: 9.837 ns/op
Iteration   5: 9.816 ns/op
Iteration   6: 9.825 ns/op
Iteration   7: 9.843 ns/op
Iteration   8: 9.846 ns/op
Iteration   9: 9.835 ns/op
Iteration  10: 9.826 ns/op
Iteration  11: 9.810 ns/op
Iteration  12: 9.822 ns/op
Iteration  13: 9.830 ns/op
Iteration  14: 9.822 ns/op
Iteration  15: 9.806 ns/op
Iteration  16: 9.815 ns/op
Iteration  17: 9.821 ns/op
Iteration  18: 9.830 ns/op
Iteration  19: 9.819 ns/op
Iteration  20: 9.825 ns/op


Result "benchmark.StringContains.stringContains":
  9.858 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (9.806, 9.858, 9.916), stdev = 0.024
  CI (99.9%): [9.849, 9.866] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpEuP7{jc+ 5E1T	+Q)j`Z\pZQ)W9u_WkI|Nt=Oy!.[uCH?pks3iuhj@]=g,6&}@M0czTrR7}#rc1jj&%;OJtvA(hA"^RZEHI|lCboAvQ[VtNW4<y	3Rp tpH2b  avgt  100  1551.782 ± 17.944  ns/op
StringContains.stringContains     http  httpEuP7{jc+ 5E1T	+Q)j`Z\pZQ)W9u_WkI|Nt=Oy!.[uCH?pks3iuhj@]=g,6&}@M0czTrR7}#rc1jj&%;OJtvA(hA"^RZEHI|lCboAvQ[VtNW4<y	3Rp tpH2b  avgt  100     9.858 ±  0.008  ns/op

Benchmark result is saved to http_128_0_8.csv
