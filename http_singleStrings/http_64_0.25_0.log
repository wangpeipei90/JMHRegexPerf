# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = X[nyTxc[YSRg){OhttpQslDP;%L; 6%TbXeA:>P\i@Y%)gv-7X;=:LIlY	=]^)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 672.574 ns/op
# Warmup Iteration   2: 696.060 ns/op
# Warmup Iteration   3: 698.781 ns/op
# Warmup Iteration   4: 696.220 ns/op
# Warmup Iteration   5: 632.027 ns/op
Iteration   1: 615.014 ns/op
Iteration   2: 616.553 ns/op
Iteration   3: 622.225 ns/op
Iteration   4: 616.766 ns/op
Iteration   5: 615.269 ns/op
Iteration   6: 615.220 ns/op
Iteration   7: 622.669 ns/op
Iteration   8: 615.684 ns/op
Iteration   9: 614.687 ns/op
Iteration  10: 625.094 ns/op
Iteration  11: 614.686 ns/op
Iteration  12: 614.603 ns/op
Iteration  13: 614.768 ns/op
Iteration  14: 628.757 ns/op
Iteration  15: 614.658 ns/op
Iteration  16: 614.490 ns/op
Iteration  17: 614.780 ns/op
Iteration  18: 633.345 ns/op
Iteration  19: 614.567 ns/op
Iteration  20: 615.505 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 670.863 ns/op
# Warmup Iteration   2: 687.161 ns/op
# Warmup Iteration   3: 689.504 ns/op
# Warmup Iteration   4: 688.954 ns/op
# Warmup Iteration   5: 624.857 ns/op
Iteration   1: 614.078 ns/op
Iteration   2: 613.904 ns/op
Iteration   3: 619.794 ns/op
Iteration   4: 614.075 ns/op
Iteration   5: 613.780 ns/op
Iteration   6: 615.745 ns/op
Iteration   7: 620.015 ns/op
Iteration   8: 614.116 ns/op
Iteration   9: 613.933 ns/op
Iteration  10: 624.169 ns/op
Iteration  11: 614.172 ns/op
Iteration  12: 614.023 ns/op
Iteration  13: 614.117 ns/op
Iteration  14: 626.810 ns/op
Iteration  15: 614.048 ns/op
Iteration  16: 613.881 ns/op
Iteration  17: 614.169 ns/op
Iteration  18: 630.962 ns/op
Iteration  19: 613.860 ns/op
Iteration  20: 613.949 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 664.989 ns/op
# Warmup Iteration   2: 686.467 ns/op
# Warmup Iteration   3: 688.571 ns/op
# Warmup Iteration   4: 688.339 ns/op
# Warmup Iteration   5: 624.624 ns/op
Iteration   1: 614.545 ns/op
Iteration   2: 614.304 ns/op
Iteration   3: 620.101 ns/op
Iteration   4: 614.388 ns/op
Iteration   5: 614.454 ns/op
Iteration   6: 614.658 ns/op
Iteration   7: 621.602 ns/op
Iteration   8: 614.385 ns/op
Iteration   9: 614.436 ns/op
Iteration  10: 624.595 ns/op
Iteration  11: 615.805 ns/op
Iteration  12: 615.549 ns/op
Iteration  13: 615.010 ns/op
Iteration  14: 628.339 ns/op
Iteration  15: 614.386 ns/op
Iteration  16: 614.100 ns/op
Iteration  17: 614.146 ns/op
Iteration  18: 630.576 ns/op
Iteration  19: 614.118 ns/op
Iteration  20: 614.410 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 664.534 ns/op
# Warmup Iteration   2: 688.534 ns/op
# Warmup Iteration   3: 688.921 ns/op
# Warmup Iteration   4: 689.338 ns/op
# Warmup Iteration   5: 624.492 ns/op
Iteration   1: 614.517 ns/op
Iteration   2: 614.568 ns/op
Iteration   3: 622.634 ns/op
Iteration   4: 614.309 ns/op
Iteration   5: 614.395 ns/op
Iteration   6: 617.033 ns/op
Iteration   7: 619.513 ns/op
Iteration   8: 614.556 ns/op
Iteration   9: 614.743 ns/op
Iteration  10: 624.566 ns/op
Iteration  11: 614.654 ns/op
Iteration  12: 614.354 ns/op
Iteration  13: 614.834 ns/op
Iteration  14: 628.026 ns/op
Iteration  15: 614.448 ns/op
Iteration  16: 614.489 ns/op
Iteration  17: 614.764 ns/op
Iteration  18: 631.515 ns/op
Iteration  19: 614.471 ns/op
Iteration  20: 614.744 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 667.980 ns/op
# Warmup Iteration   2: 687.374 ns/op
# Warmup Iteration   3: 689.482 ns/op
# Warmup Iteration   4: 689.764 ns/op
# Warmup Iteration   5: 626.503 ns/op
Iteration   1: 614.123 ns/op
Iteration   2: 614.345 ns/op
Iteration   3: 620.002 ns/op
Iteration   4: 614.050 ns/op
Iteration   5: 614.667 ns/op
Iteration   6: 617.527 ns/op
Iteration   7: 623.219 ns/op
Iteration   8: 619.666 ns/op
Iteration   9: 618.907 ns/op
Iteration  10: 627.764 ns/op
Iteration  11: 613.998 ns/op
Iteration  12: 613.998 ns/op
Iteration  13: 614.286 ns/op
Iteration  14: 627.434 ns/op
Iteration  15: 613.746 ns/op
Iteration  16: 614.055 ns/op
Iteration  17: 614.353 ns/op
Iteration  18: 631.267 ns/op
Iteration  19: 614.234 ns/op
Iteration  20: 614.752 ns/op


Result "benchmark.StringContains.regexMatches":
  617.404 ±(99.9%) 1.753 ns/op [Average]
  (min, avg, max) = (613.746, 617.404, 633.345), stdev = 5.168
  CI (99.9%): [615.651, 619.156] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = X[nyTxc[YSRg){OhttpQslDP;%L; 6%TbXeA:>P\i@Y%)gv-7X;=:LIlY	=]^)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.334 ns/op
# Warmup Iteration   2: 12.553 ns/op
# Warmup Iteration   3: 12.187 ns/op
# Warmup Iteration   4: 12.172 ns/op
# Warmup Iteration   5: 12.151 ns/op
Iteration   1: 12.156 ns/op
Iteration   2: 12.161 ns/op
Iteration   3: 12.154 ns/op
Iteration   4: 12.152 ns/op
Iteration   5: 12.155 ns/op
Iteration   6: 12.171 ns/op
Iteration   7: 12.163 ns/op
Iteration   8: 12.153 ns/op
Iteration   9: 12.160 ns/op
Iteration  10: 12.152 ns/op
Iteration  11: 12.141 ns/op
Iteration  12: 12.166 ns/op
Iteration  13: 12.162 ns/op
Iteration  14: 12.159 ns/op
Iteration  15: 12.158 ns/op
Iteration  16: 12.167 ns/op
Iteration  17: 12.154 ns/op
Iteration  18: 12.174 ns/op
Iteration  19: 12.162 ns/op
Iteration  20: 12.162 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.312 ns/op
# Warmup Iteration   2: 12.499 ns/op
# Warmup Iteration   3: 12.295 ns/op
# Warmup Iteration   4: 12.303 ns/op
# Warmup Iteration   5: 12.290 ns/op
Iteration   1: 12.290 ns/op
Iteration   2: 12.273 ns/op
Iteration   3: 12.273 ns/op
Iteration   4: 12.316 ns/op
Iteration   5: 12.279 ns/op
Iteration   6: 12.303 ns/op
Iteration   7: 12.305 ns/op
Iteration   8: 12.309 ns/op
Iteration   9: 12.261 ns/op
Iteration  10: 12.281 ns/op
Iteration  11: 12.286 ns/op
Iteration  12: 12.302 ns/op
Iteration  13: 12.281 ns/op
Iteration  14: 12.303 ns/op
Iteration  15: 12.261 ns/op
Iteration  16: 12.288 ns/op
Iteration  17: 12.307 ns/op
Iteration  18: 12.275 ns/op
Iteration  19: 12.250 ns/op
Iteration  20: 12.316 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.264 ns/op
# Warmup Iteration   2: 12.525 ns/op
# Warmup Iteration   3: 12.334 ns/op
# Warmup Iteration   4: 12.314 ns/op
# Warmup Iteration   5: 12.315 ns/op
Iteration   1: 12.330 ns/op
Iteration   2: 12.343 ns/op
Iteration   3: 12.293 ns/op
Iteration   4: 12.314 ns/op
Iteration   5: 12.322 ns/op
Iteration   6: 12.317 ns/op
Iteration   7: 12.325 ns/op
Iteration   8: 12.325 ns/op
Iteration   9: 12.324 ns/op
Iteration  10: 12.290 ns/op
Iteration  11: 12.342 ns/op
Iteration  12: 12.325 ns/op
Iteration  13: 12.306 ns/op
Iteration  14: 12.294 ns/op
Iteration  15: 12.288 ns/op
Iteration  16: 12.328 ns/op
Iteration  17: 12.343 ns/op
Iteration  18: 12.315 ns/op
Iteration  19: 12.325 ns/op
Iteration  20: 12.311 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.311 ns/op
# Warmup Iteration   2: 12.527 ns/op
# Warmup Iteration   3: 12.144 ns/op
# Warmup Iteration   4: 12.137 ns/op
# Warmup Iteration   5: 12.151 ns/op
Iteration   1: 12.145 ns/op
Iteration   2: 12.162 ns/op
Iteration   3: 12.153 ns/op
Iteration   4: 12.149 ns/op
Iteration   5: 12.159 ns/op
Iteration   6: 12.163 ns/op
Iteration   7: 12.149 ns/op
Iteration   8: 12.159 ns/op
Iteration   9: 12.154 ns/op
Iteration  10: 12.143 ns/op
Iteration  11: 12.150 ns/op
Iteration  12: 12.140 ns/op
Iteration  13: 12.151 ns/op
Iteration  14: 12.121 ns/op
Iteration  15: 12.155 ns/op
Iteration  16: 12.149 ns/op
Iteration  17: 12.139 ns/op
Iteration  18: 12.156 ns/op
Iteration  19: 12.158 ns/op
Iteration  20: 12.154 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.981 ns/op
# Warmup Iteration   2: 12.528 ns/op
# Warmup Iteration   3: 12.306 ns/op
# Warmup Iteration   4: 12.342 ns/op
# Warmup Iteration   5: 12.314 ns/op
Iteration   1: 12.319 ns/op
Iteration   2: 12.357 ns/op
Iteration   3: 12.302 ns/op
Iteration   4: 12.328 ns/op
Iteration   5: 12.329 ns/op
Iteration   6: 12.359 ns/op
Iteration   7: 12.338 ns/op
Iteration   8: 12.321 ns/op
Iteration   9: 12.312 ns/op
Iteration  10: 12.300 ns/op
Iteration  11: 12.310 ns/op
Iteration  12: 12.338 ns/op
Iteration  13: 12.294 ns/op
Iteration  14: 12.296 ns/op
Iteration  15: 12.307 ns/op
Iteration  16: 12.287 ns/op
Iteration  17: 12.317 ns/op
Iteration  18: 12.333 ns/op
Iteration  19: 12.298 ns/op
Iteration  20: 12.326 ns/op


Result "benchmark.StringContains.stringContains":
  12.247 ±(99.9%) 0.026 ns/op [Average]
  (min, avg, max) = (12.121, 12.247, 12.359), stdev = 0.078
  CI (99.9%): [12.220, 12.273] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  X[nyTxc[YSRg){OhttpQslDP;%L; 6%TbXeA:>P\i@Y%)gv-7X;=:LIlY	=]^  avgt  100  617.404 ± 1.753  ns/op
StringContains.stringContains     http  X[nyTxc[YSRg){OhttpQslDP;%L; 6%TbXeA:>P\i@Y%)gv-7X;=:LIlY	=]^  avgt  100   12.247 ± 0.026  ns/op

Benchmark result is saved to http_64_0.25_0.csv
