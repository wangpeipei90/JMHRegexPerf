# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 82`
X>{>W<[e | &i4:MsmD<httpCM7)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 277.402 ns/op
# Warmup Iteration   2: 228.815 ns/op
# Warmup Iteration   3: 194.164 ns/op
# Warmup Iteration   4: 194.774 ns/op
# Warmup Iteration   5: 195.755 ns/op
Iteration   1: 191.947 ns/op
Iteration   2: 197.020 ns/op
Iteration   3: 198.480 ns/op
Iteration   4: 193.007 ns/op
Iteration   5: 193.008 ns/op
Iteration   6: 192.280 ns/op
Iteration   7: 192.987 ns/op
Iteration   8: 193.420 ns/op
Iteration   9: 193.656 ns/op
Iteration  10: 192.909 ns/op
Iteration  11: 191.963 ns/op
Iteration  12: 192.823 ns/op
Iteration  13: 193.141 ns/op
Iteration  14: 193.037 ns/op
Iteration  15: 192.446 ns/op
Iteration  16: 191.895 ns/op
Iteration  17: 192.293 ns/op
Iteration  18: 192.721 ns/op
Iteration  19: 192.534 ns/op
Iteration  20: 192.648 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 257.690 ns/op
# Warmup Iteration   2: 203.403 ns/op
# Warmup Iteration   3: 181.737 ns/op
# Warmup Iteration   4: 182.396 ns/op
# Warmup Iteration   5: 183.090 ns/op
Iteration   1: 184.002 ns/op
Iteration   2: 185.227 ns/op
Iteration   3: 179.955 ns/op
Iteration   4: 181.052 ns/op
Iteration   5: 180.870 ns/op
Iteration   6: 180.705 ns/op
Iteration   7: 180.777 ns/op
Iteration   8: 180.794 ns/op
Iteration   9: 180.794 ns/op
Iteration  10: 179.892 ns/op
Iteration  11: 180.817 ns/op
Iteration  12: 180.779 ns/op
Iteration  13: 180.860 ns/op
Iteration  14: 180.848 ns/op
Iteration  15: 180.538 ns/op
Iteration  16: 180.720 ns/op
Iteration  17: 180.786 ns/op
Iteration  18: 179.891 ns/op
Iteration  19: 180.854 ns/op
Iteration  20: 180.868 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 257.564 ns/op
# Warmup Iteration   2: 203.765 ns/op
# Warmup Iteration   3: 181.876 ns/op
# Warmup Iteration   4: 182.370 ns/op
# Warmup Iteration   5: 183.130 ns/op
Iteration   1: 184.168 ns/op
Iteration   2: 185.373 ns/op
Iteration   3: 180.077 ns/op
Iteration   4: 180.887 ns/op
Iteration   5: 180.774 ns/op
Iteration   6: 180.831 ns/op
Iteration   7: 180.805 ns/op
Iteration   8: 180.880 ns/op
Iteration   9: 180.821 ns/op
Iteration  10: 180.021 ns/op
Iteration  11: 181.304 ns/op
Iteration  12: 181.512 ns/op
Iteration  13: 181.113 ns/op
Iteration  14: 180.451 ns/op
Iteration  15: 180.349 ns/op
Iteration  16: 180.602 ns/op
Iteration  17: 180.038 ns/op
Iteration  18: 180.933 ns/op
Iteration  19: 180.603 ns/op
Iteration  20: 180.600 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 268.273 ns/op
# Warmup Iteration   2: 218.980 ns/op
# Warmup Iteration   3: 193.646 ns/op
# Warmup Iteration   4: 194.226 ns/op
# Warmup Iteration   5: 194.955 ns/op
Iteration   1: 191.805 ns/op
Iteration   2: 195.964 ns/op
Iteration   3: 197.235 ns/op
Iteration   4: 193.423 ns/op
Iteration   5: 193.509 ns/op
Iteration   6: 191.726 ns/op
Iteration   7: 192.565 ns/op
Iteration   8: 192.853 ns/op
Iteration   9: 192.698 ns/op
Iteration  10: 192.811 ns/op
Iteration  11: 192.972 ns/op
Iteration  12: 191.813 ns/op
Iteration  13: 193.601 ns/op
Iteration  14: 193.089 ns/op
Iteration  15: 196.294 ns/op
Iteration  16: 192.407 ns/op
Iteration  17: 191.689 ns/op
Iteration  18: 192.367 ns/op
Iteration  19: 192.230 ns/op
Iteration  20: 192.153 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 268.899 ns/op
# Warmup Iteration   2: 219.262 ns/op
# Warmup Iteration   3: 195.096 ns/op
# Warmup Iteration   4: 194.358 ns/op
# Warmup Iteration   5: 196.110 ns/op
Iteration   1: 191.687 ns/op
Iteration   2: 196.013 ns/op
Iteration   3: 197.199 ns/op
Iteration   4: 192.910 ns/op
Iteration   5: 192.739 ns/op
Iteration   6: 191.704 ns/op
Iteration   7: 192.667 ns/op
Iteration   8: 192.572 ns/op
Iteration   9: 192.726 ns/op
Iteration  10: 192.731 ns/op
Iteration  11: 192.754 ns/op
Iteration  12: 191.727 ns/op
Iteration  13: 192.834 ns/op
Iteration  14: 192.986 ns/op
Iteration  15: 193.849 ns/op
Iteration  16: 194.528 ns/op
Iteration  17: 191.785 ns/op
Iteration  18: 192.434 ns/op
Iteration  19: 192.324 ns/op
Iteration  20: 192.330 ns/op


Result "benchmark.StringContains.regexMatches":
  188.311 ±(99.9%) 2.070 ns/op [Average]
  (min, avg, max) = (179.891, 188.311, 198.480), stdev = 6.103
  CI (99.9%): [186.241, 190.381] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 82`
X>{>W<[e | &i4:MsmD<httpCM7)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.338 ns/op
# Warmup Iteration   2: 12.744 ns/op
# Warmup Iteration   3: 12.125 ns/op
# Warmup Iteration   4: 12.096 ns/op
# Warmup Iteration   5: 12.121 ns/op
Iteration   1: 12.117 ns/op
Iteration   2: 12.115 ns/op
Iteration   3: 12.125 ns/op
Iteration   4: 12.133 ns/op
Iteration   5: 12.138 ns/op
Iteration   6: 12.119 ns/op
Iteration   7: 12.132 ns/op
Iteration   8: 12.131 ns/op
Iteration   9: 12.142 ns/op
Iteration  10: 12.137 ns/op
Iteration  11: 12.124 ns/op
Iteration  12: 12.840 ns/op
Iteration  13: 12.840 ns/op
Iteration  14: 12.840 ns/op
Iteration  15: 12.841 ns/op
Iteration  16: 12.840 ns/op
Iteration  17: 12.841 ns/op
Iteration  18: 12.840 ns/op
Iteration  19: 12.840 ns/op
Iteration  20: 12.862 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.975 ns/op
# Warmup Iteration   2: 12.555 ns/op
# Warmup Iteration   3: 12.244 ns/op
# Warmup Iteration   4: 12.248 ns/op
# Warmup Iteration   5: 12.252 ns/op
Iteration   1: 12.239 ns/op
Iteration   2: 12.253 ns/op
Iteration   3: 12.248 ns/op
Iteration   4: 12.249 ns/op
Iteration   5: 12.249 ns/op
Iteration   6: 12.244 ns/op
Iteration   7: 12.246 ns/op
Iteration   8: 12.253 ns/op
Iteration   9: 12.253 ns/op
Iteration  10: 12.249 ns/op
Iteration  11: 12.250 ns/op
Iteration  12: 12.252 ns/op
Iteration  13: 12.250 ns/op
Iteration  14: 12.250 ns/op
Iteration  15: 12.248 ns/op
Iteration  16: 12.251 ns/op
Iteration  17: 12.253 ns/op
Iteration  18: 12.245 ns/op
Iteration  19: 12.253 ns/op
Iteration  20: 12.250 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.325 ns/op
# Warmup Iteration   2: 12.501 ns/op
# Warmup Iteration   3: 12.144 ns/op
# Warmup Iteration   4: 12.163 ns/op
# Warmup Iteration   5: 12.148 ns/op
Iteration   1: 12.152 ns/op
Iteration   2: 12.159 ns/op
Iteration   3: 12.165 ns/op
Iteration   4: 12.155 ns/op
Iteration   5: 12.157 ns/op
Iteration   6: 12.148 ns/op
Iteration   7: 12.160 ns/op
Iteration   8: 12.147 ns/op
Iteration   9: 12.167 ns/op
Iteration  10: 12.155 ns/op
Iteration  11: 12.142 ns/op
Iteration  12: 12.853 ns/op
Iteration  13: 12.840 ns/op
Iteration  14: 12.840 ns/op
Iteration  15: 12.841 ns/op
Iteration  16: 12.839 ns/op
Iteration  17: 12.841 ns/op
Iteration  18: 12.840 ns/op
Iteration  19: 12.841 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.311 ns/op
# Warmup Iteration   2: 12.535 ns/op
# Warmup Iteration   3: 12.244 ns/op
# Warmup Iteration   4: 12.246 ns/op
# Warmup Iteration   5: 12.254 ns/op
Iteration   1: 12.238 ns/op
Iteration   2: 12.263 ns/op
Iteration   3: 12.246 ns/op
Iteration   4: 12.247 ns/op
Iteration   5: 12.246 ns/op
Iteration   6: 12.239 ns/op
Iteration   7: 12.240 ns/op
Iteration   8: 12.265 ns/op
Iteration   9: 12.255 ns/op
Iteration  10: 12.260 ns/op
Iteration  11: 12.257 ns/op
Iteration  12: 12.259 ns/op
Iteration  13: 12.250 ns/op
Iteration  14: 12.258 ns/op
Iteration  15: 12.243 ns/op
Iteration  16: 12.259 ns/op
Iteration  17: 12.250 ns/op
Iteration  18: 12.252 ns/op
Iteration  19: 12.269 ns/op
Iteration  20: 12.255 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.298 ns/op
# Warmup Iteration   2: 12.511 ns/op
# Warmup Iteration   3: 12.127 ns/op
# Warmup Iteration   4: 12.121 ns/op
# Warmup Iteration   5: 12.123 ns/op
Iteration   1: 12.134 ns/op
Iteration   2: 12.131 ns/op
Iteration   3: 12.129 ns/op
Iteration   4: 12.152 ns/op
Iteration   5: 12.136 ns/op
Iteration   6: 12.135 ns/op
Iteration   7: 12.134 ns/op
Iteration   8: 12.145 ns/op
Iteration   9: 12.133 ns/op
Iteration  10: 12.133 ns/op
Iteration  11: 12.142 ns/op
Iteration  12: 12.150 ns/op
Iteration  13: 12.140 ns/op
Iteration  14: 12.142 ns/op
Iteration  15: 12.138 ns/op
Iteration  16: 12.132 ns/op
Iteration  17: 12.155 ns/op
Iteration  18: 12.129 ns/op
Iteration  19: 12.150 ns/op
Iteration  20: 12.141 ns/op


Result "benchmark.StringContains.stringContains":
  12.311 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (12.115, 12.311, 12.862), stdev = 0.255
  CI (99.9%): [12.224, 12.398] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  82`
X>{>W<[e | &i4:MsmD<httpCM7  avgt  100  188.311 ± 2.070  ns/op
StringContains.stringContains     http  82`
X>{>W<[e | &i4:MsmD<httpCM7  avgt  100   12.311 ± 0.087  ns/op

Benchmark result is saved to http_32_0.75_12.csv
