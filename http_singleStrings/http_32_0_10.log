# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http[k)%b;O5{w>AgB!8"P`1fFo$zX)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 500.714 ns/op
# Warmup Iteration   2: 522.616 ns/op
# Warmup Iteration   3: 526.753 ns/op
# Warmup Iteration   4: 455.708 ns/op
# Warmup Iteration   5: 443.905 ns/op
Iteration   1: 447.907 ns/op
Iteration   2: 443.482 ns/op
Iteration   3: 443.594 ns/op
Iteration   4: 448.908 ns/op
Iteration   5: 443.700 ns/op
Iteration   6: 451.755 ns/op
Iteration   7: 444.575 ns/op
Iteration   8: 444.606 ns/op
Iteration   9: 455.316 ns/op
Iteration  10: 444.444 ns/op
Iteration  11: 445.552 ns/op
Iteration  12: 458.852 ns/op
Iteration  13: 443.867 ns/op
Iteration  14: 443.782 ns/op
Iteration  15: 446.748 ns/op
Iteration  16: 443.426 ns/op
Iteration  17: 443.836 ns/op
Iteration  18: 445.078 ns/op
Iteration  19: 443.489 ns/op
Iteration  20: 445.283 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 489.172 ns/op
# Warmup Iteration   2: 501.318 ns/op
# Warmup Iteration   3: 507.406 ns/op
# Warmup Iteration   4: 431.838 ns/op
# Warmup Iteration   5: 431.300 ns/op
Iteration   1: 433.933 ns/op
Iteration   2: 429.025 ns/op
Iteration   3: 433.850 ns/op
Iteration   4: 428.741 ns/op
Iteration   5: 429.009 ns/op
Iteration   6: 436.239 ns/op
Iteration   7: 428.581 ns/op
Iteration   8: 434.135 ns/op
Iteration   9: 432.822 ns/op
Iteration  10: 428.922 ns/op
Iteration  11: 441.069 ns/op
Iteration  12: 428.383 ns/op
Iteration  13: 429.192 ns/op
Iteration  14: 430.819 ns/op
Iteration  15: 429.521 ns/op
Iteration  16: 428.905 ns/op
Iteration  17: 430.877 ns/op
Iteration  18: 428.688 ns/op
Iteration  19: 428.601 ns/op
Iteration  20: 430.800 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 485.073 ns/op
# Warmup Iteration   2: 502.085 ns/op
# Warmup Iteration   3: 504.820 ns/op
# Warmup Iteration   4: 429.437 ns/op
# Warmup Iteration   5: 429.153 ns/op
Iteration   1: 433.077 ns/op
Iteration   2: 429.204 ns/op
Iteration   3: 434.203 ns/op
Iteration   4: 429.159 ns/op
Iteration   5: 429.083 ns/op
Iteration   6: 436.251 ns/op
Iteration   7: 429.923 ns/op
Iteration   8: 439.767 ns/op
Iteration   9: 429.448 ns/op
Iteration  10: 429.269 ns/op
Iteration  11: 441.245 ns/op
Iteration  12: 429.396 ns/op
Iteration  13: 429.235 ns/op
Iteration  14: 433.045 ns/op
Iteration  15: 429.220 ns/op
Iteration  16: 429.261 ns/op
Iteration  17: 433.741 ns/op
Iteration  18: 432.157 ns/op
Iteration  19: 432.280 ns/op
Iteration  20: 431.564 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 497.926 ns/op
# Warmup Iteration   2: 517.838 ns/op
# Warmup Iteration   3: 516.129 ns/op
# Warmup Iteration   4: 445.958 ns/op
# Warmup Iteration   5: 438.902 ns/op
Iteration   1: 443.408 ns/op
Iteration   2: 439.367 ns/op
Iteration   3: 440.286 ns/op
Iteration   4: 443.340 ns/op
Iteration   5: 438.772 ns/op
Iteration   6: 446.251 ns/op
Iteration   7: 439.197 ns/op
Iteration   8: 439.184 ns/op
Iteration   9: 448.634 ns/op
Iteration  10: 439.181 ns/op
Iteration  11: 439.747 ns/op
Iteration  12: 450.695 ns/op
Iteration  13: 439.553 ns/op
Iteration  14: 442.758 ns/op
Iteration  15: 439.335 ns/op
Iteration  16: 439.364 ns/op
Iteration  17: 441.436 ns/op
Iteration  18: 439.000 ns/op
Iteration  19: 439.117 ns/op
Iteration  20: 441.518 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 500.705 ns/op
# Warmup Iteration   2: 516.592 ns/op
# Warmup Iteration   3: 516.733 ns/op
# Warmup Iteration   4: 458.321 ns/op
# Warmup Iteration   5: 442.947 ns/op
Iteration   1: 447.979 ns/op
Iteration   2: 442.264 ns/op
Iteration   3: 442.581 ns/op
Iteration   4: 447.553 ns/op
Iteration   5: 442.529 ns/op
Iteration   6: 449.506 ns/op
Iteration   7: 442.256 ns/op
Iteration   8: 442.298 ns/op
Iteration   9: 451.707 ns/op
Iteration  10: 442.300 ns/op
Iteration  11: 442.544 ns/op
Iteration  12: 457.244 ns/op
Iteration  13: 446.018 ns/op
Iteration  14: 447.053 ns/op
Iteration  15: 446.251 ns/op
Iteration  16: 443.941 ns/op
Iteration  17: 448.199 ns/op
Iteration  18: 443.813 ns/op
Iteration  19: 443.266 ns/op
Iteration  20: 445.262 ns/op


Result "benchmark.StringContains.regexMatches":
  439.355 ±(99.9%) 2.563 ns/op [Average]
  (min, avg, max) = (428.383, 439.355, 458.852), stdev = 7.557
  CI (99.9%): [436.793, 441.918] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http[k)%b;O5{w>AgB!8"P`1fFo$zX)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.211 ns/op
# Warmup Iteration   2: 9.741 ns/op
# Warmup Iteration   3: 9.854 ns/op
# Warmup Iteration   4: 9.853 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.849 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.860 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.864 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.876 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.866 ns/op
Iteration  11: 9.861 ns/op
Iteration  12: 9.873 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.855 ns/op
Iteration  18: 9.876 ns/op
Iteration  19: 9.885 ns/op
Iteration  20: 9.874 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.207 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.856 ns/op
# Warmup Iteration   4: 9.855 ns/op
# Warmup Iteration   5: 9.875 ns/op
Iteration   1: 9.881 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.885 ns/op
Iteration   6: 9.880 ns/op
Iteration   7: 9.880 ns/op
Iteration   8: 9.872 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.879 ns/op
Iteration  11: 9.878 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.893 ns/op
Iteration  14: 9.877 ns/op
Iteration  15: 9.885 ns/op
Iteration  16: 9.871 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.874 ns/op
Iteration  19: 9.884 ns/op
Iteration  20: 9.857 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.484 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.867 ns/op
# Warmup Iteration   5: 9.882 ns/op
Iteration   1: 9.881 ns/op
Iteration   2: 9.886 ns/op
Iteration   3: 9.884 ns/op
Iteration   4: 9.877 ns/op
Iteration   5: 9.888 ns/op
Iteration   6: 9.866 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.889 ns/op
Iteration   9: 9.869 ns/op
Iteration  10: 9.879 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.870 ns/op
Iteration  13: 9.880 ns/op
Iteration  14: 9.880 ns/op
Iteration  15: 9.892 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.882 ns/op
Iteration  18: 9.905 ns/op
Iteration  19: 9.904 ns/op
Iteration  20: 9.889 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.239 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.854 ns/op
# Warmup Iteration   4: 9.862 ns/op
# Warmup Iteration   5: 9.861 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.851 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.856 ns/op
Iteration   5: 9.843 ns/op
Iteration   6: 9.844 ns/op
Iteration   7: 9.858 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.842 ns/op
Iteration  10: 9.854 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.867 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.865 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.862 ns/op
Iteration  18: 9.872 ns/op
Iteration  19: 9.854 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.206 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.791 ns/op
# Warmup Iteration   4: 9.797 ns/op
# Warmup Iteration   5: 9.777 ns/op
Iteration   1: 9.788 ns/op
Iteration   2: 9.782 ns/op
Iteration   3: 9.778 ns/op
Iteration   4: 9.777 ns/op
Iteration   5: 9.771 ns/op
Iteration   6: 9.781 ns/op
Iteration   7: 9.781 ns/op
Iteration   8: 9.787 ns/op
Iteration   9: 9.796 ns/op
Iteration  10: 9.790 ns/op
Iteration  11: 9.804 ns/op
Iteration  12: 9.796 ns/op
Iteration  13: 9.793 ns/op
Iteration  14: 9.799 ns/op
Iteration  15: 9.800 ns/op
Iteration  16: 9.785 ns/op
Iteration  17: 9.802 ns/op
Iteration  18: 9.781 ns/op
Iteration  19: 9.788 ns/op
Iteration  20: 9.788 ns/op


Result "benchmark.StringContains.stringContains":
  9.855 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (9.771, 9.855, 9.905), stdev = 0.036
  CI (99.9%): [9.843, 9.867] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http[k)%b;O5{w>AgB!8"P`1fFo$zX  avgt  100  439.355 ± 2.563  ns/op
StringContains.stringContains     http  http[k)%b;O5{w>AgB!8"P`1fFo$zX  avgt  100    9.855 ± 0.012  ns/op

Benchmark result is saved to http_32_0_10.csv
