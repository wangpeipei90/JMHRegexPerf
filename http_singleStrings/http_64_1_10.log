# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = V:SI	(#	KZ,P:	1vn,Y/
ezm|j'	+KqX3V+0imQtq(;	m{Xf$HXP+>2U];H(^)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 273.535 ns/op
# Warmup Iteration   2: 236.350 ns/op
# Warmup Iteration   3: 191.273 ns/op
# Warmup Iteration   4: 192.124 ns/op
# Warmup Iteration   5: 192.225 ns/op
Iteration   1: 188.866 ns/op
Iteration   2: 193.068 ns/op
Iteration   3: 194.424 ns/op
Iteration   4: 189.988 ns/op
Iteration   5: 189.766 ns/op
Iteration   6: 189.725 ns/op
Iteration   7: 188.849 ns/op
Iteration   8: 189.663 ns/op
Iteration   9: 189.732 ns/op
Iteration  10: 189.694 ns/op
Iteration  11: 189.841 ns/op
Iteration  12: 188.921 ns/op
Iteration  13: 189.637 ns/op
Iteration  14: 189.827 ns/op
Iteration  15: 189.297 ns/op
Iteration  16: 189.361 ns/op
Iteration  17: 189.445 ns/op
Iteration  18: 188.800 ns/op
Iteration  19: 189.447 ns/op
Iteration  20: 189.472 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 259.721 ns/op
# Warmup Iteration   2: 211.659 ns/op
# Warmup Iteration   3: 174.672 ns/op
# Warmup Iteration   4: 175.365 ns/op
# Warmup Iteration   5: 175.795 ns/op
Iteration   1: 176.865 ns/op
Iteration   2: 178.153 ns/op
Iteration   3: 173.855 ns/op
Iteration   4: 173.180 ns/op
Iteration   5: 173.828 ns/op
Iteration   6: 173.859 ns/op
Iteration   7: 173.824 ns/op
Iteration   8: 173.860 ns/op
Iteration   9: 173.873 ns/op
Iteration  10: 174.163 ns/op
Iteration  11: 174.167 ns/op
Iteration  12: 174.182 ns/op
Iteration  13: 173.468 ns/op
Iteration  14: 173.005 ns/op
Iteration  15: 173.927 ns/op
Iteration  16: 173.441 ns/op
Iteration  17: 173.899 ns/op
Iteration  18: 173.929 ns/op
Iteration  19: 173.655 ns/op
Iteration  20: 173.529 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 239.925 ns/op
# Warmup Iteration   2: 183.348 ns/op
# Warmup Iteration   3: 155.458 ns/op
# Warmup Iteration   4: 155.910 ns/op
# Warmup Iteration   5: 156.684 ns/op
Iteration   1: 157.436 ns/op
Iteration   2: 158.387 ns/op
Iteration   3: 154.756 ns/op
Iteration   4: 154.743 ns/op
Iteration   5: 154.753 ns/op
Iteration   6: 155.033 ns/op
Iteration   7: 155.164 ns/op
Iteration   8: 154.760 ns/op
Iteration   9: 154.698 ns/op
Iteration  10: 154.918 ns/op
Iteration  11: 154.806 ns/op
Iteration  12: 154.388 ns/op
Iteration  13: 154.420 ns/op
Iteration  14: 154.943 ns/op
Iteration  15: 154.369 ns/op
Iteration  16: 154.584 ns/op
Iteration  17: 154.476 ns/op
Iteration  18: 154.634 ns/op
Iteration  19: 154.644 ns/op
Iteration  20: 154.539 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 257.946 ns/op
# Warmup Iteration   2: 211.196 ns/op
# Warmup Iteration   3: 174.729 ns/op
# Warmup Iteration   4: 175.315 ns/op
# Warmup Iteration   5: 175.912 ns/op
Iteration   1: 176.903 ns/op
Iteration   2: 178.024 ns/op
Iteration   3: 173.837 ns/op
Iteration   4: 173.187 ns/op
Iteration   5: 173.745 ns/op
Iteration   6: 173.833 ns/op
Iteration   7: 174.739 ns/op
Iteration   8: 174.092 ns/op
Iteration   9: 174.030 ns/op
Iteration  10: 173.917 ns/op
Iteration  11: 174.109 ns/op
Iteration  12: 174.993 ns/op
Iteration  13: 173.553 ns/op
Iteration  14: 173.078 ns/op
Iteration  15: 173.371 ns/op
Iteration  16: 173.657 ns/op
Iteration  17: 173.855 ns/op
Iteration  18: 173.932 ns/op
Iteration  19: 173.895 ns/op
Iteration  20: 173.909 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 276.324 ns/op
# Warmup Iteration   2: 234.244 ns/op
# Warmup Iteration   3: 190.627 ns/op
# Warmup Iteration   4: 191.336 ns/op
# Warmup Iteration   5: 191.948 ns/op
Iteration   1: 188.842 ns/op
Iteration   2: 192.978 ns/op
Iteration   3: 194.234 ns/op
Iteration   4: 189.615 ns/op
Iteration   5: 189.522 ns/op
Iteration   6: 189.672 ns/op
Iteration   7: 188.848 ns/op
Iteration   8: 189.737 ns/op
Iteration   9: 189.835 ns/op
Iteration  10: 190.047 ns/op
Iteration  11: 191.579 ns/op
Iteration  12: 188.885 ns/op
Iteration  13: 190.087 ns/op
Iteration  14: 190.172 ns/op
Iteration  15: 189.434 ns/op
Iteration  16: 192.821 ns/op
Iteration  17: 191.042 ns/op
Iteration  18: 188.841 ns/op
Iteration  19: 189.923 ns/op
Iteration  20: 189.864 ns/op


Result "benchmark.StringContains.regexMatches":
  176.716 ±(99.9%) 4.442 ns/op [Average]
  (min, avg, max) = (154.369, 176.716, 194.424), stdev = 13.098
  CI (99.9%): [172.273, 181.158] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = V:SI	(#	KZ,P:	1vn,Y/
ezm|j'	+KqX3V+0imQtq(;	m{Xf$HXP+>2U];H(^)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.414 ns/op
# Warmup Iteration   2: 15.688 ns/op
# Warmup Iteration   3: 16.041 ns/op
# Warmup Iteration   4: 16.042 ns/op
# Warmup Iteration   5: 16.043 ns/op
Iteration   1: 16.043 ns/op
Iteration   2: 16.042 ns/op
Iteration   3: 16.043 ns/op
Iteration   4: 16.042 ns/op
Iteration   5: 16.042 ns/op
Iteration   6: 16.043 ns/op
Iteration   7: 16.042 ns/op
Iteration   8: 16.043 ns/op
Iteration   9: 16.042 ns/op
Iteration  10: 16.041 ns/op
Iteration  11: 16.043 ns/op
Iteration  12: 16.041 ns/op
Iteration  13: 16.040 ns/op
Iteration  14: 16.041 ns/op
Iteration  15: 16.044 ns/op
Iteration  16: 16.044 ns/op
Iteration  17: 16.043 ns/op
Iteration  18: 16.044 ns/op
Iteration  19: 16.042 ns/op
Iteration  20: 16.046 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.391 ns/op
# Warmup Iteration   2: 15.705 ns/op
# Warmup Iteration   3: 16.057 ns/op
# Warmup Iteration   4: 16.053 ns/op
# Warmup Iteration   5: 16.056 ns/op
Iteration   1: 16.057 ns/op
Iteration   2: 16.055 ns/op
Iteration   3: 16.057 ns/op
Iteration   4: 16.054 ns/op
Iteration   5: 16.056 ns/op
Iteration   6: 16.057 ns/op
Iteration   7: 16.057 ns/op
Iteration   8: 16.058 ns/op
Iteration   9: 16.053 ns/op
Iteration  10: 16.055 ns/op
Iteration  11: 16.059 ns/op
Iteration  12: 16.053 ns/op
Iteration  13: 16.059 ns/op
Iteration  14: 16.057 ns/op
Iteration  15: 16.056 ns/op
Iteration  16: 16.059 ns/op
Iteration  17: 16.057 ns/op
Iteration  18: 16.057 ns/op
Iteration  19: 16.059 ns/op
Iteration  20: 16.057 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.490 ns/op
# Warmup Iteration   2: 15.759 ns/op
# Warmup Iteration   3: 16.026 ns/op
# Warmup Iteration   4: 16.026 ns/op
# Warmup Iteration   5: 16.035 ns/op
Iteration   1: 16.026 ns/op
Iteration   2: 16.026 ns/op
Iteration   3: 16.315 ns/op
Iteration   4: 16.027 ns/op
Iteration   5: 16.043 ns/op
Iteration   6: 16.025 ns/op
Iteration   7: 16.025 ns/op
Iteration   8: 16.050 ns/op
Iteration   9: 16.024 ns/op
Iteration  10: 16.025 ns/op
Iteration  11: 16.026 ns/op
Iteration  12: 17.519 ns/op
Iteration  13: 17.516 ns/op
Iteration  14: 17.521 ns/op
Iteration  15: 17.519 ns/op
Iteration  16: 17.521 ns/op
Iteration  17: 17.519 ns/op
Iteration  18: 17.524 ns/op
Iteration  19: 17.550 ns/op
Iteration  20: 17.560 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.472 ns/op
# Warmup Iteration   2: 15.735 ns/op
# Warmup Iteration   3: 16.021 ns/op
# Warmup Iteration   4: 16.018 ns/op
# Warmup Iteration   5: 16.020 ns/op
Iteration   1: 16.019 ns/op
Iteration   2: 16.020 ns/op
Iteration   3: 16.020 ns/op
Iteration   4: 16.018 ns/op
Iteration   5: 16.021 ns/op
Iteration   6: 16.017 ns/op
Iteration   7: 16.020 ns/op
Iteration   8: 16.022 ns/op
Iteration   9: 16.020 ns/op
Iteration  10: 16.022 ns/op
Iteration  11: 16.020 ns/op
Iteration  12: 17.515 ns/op
Iteration  13: 17.514 ns/op
Iteration  14: 17.511 ns/op
Iteration  15: 17.515 ns/op
Iteration  16: 17.514 ns/op
Iteration  17: 17.515 ns/op
Iteration  18: 17.514 ns/op
Iteration  19: 17.514 ns/op
Iteration  20: 17.518 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.395 ns/op
# Warmup Iteration   2: 15.707 ns/op
# Warmup Iteration   3: 15.997 ns/op
# Warmup Iteration   4: 15.995 ns/op
# Warmup Iteration   5: 15.990 ns/op
Iteration   1: 15.992 ns/op
Iteration   2: 15.999 ns/op
Iteration   3: 16.000 ns/op
Iteration   4: 15.996 ns/op
Iteration   5: 15.994 ns/op
Iteration   6: 15.994 ns/op
Iteration   7: 15.993 ns/op
Iteration   8: 15.992 ns/op
Iteration   9: 15.988 ns/op
Iteration  10: 15.995 ns/op
Iteration  11: 15.993 ns/op
Iteration  12: 15.994 ns/op
Iteration  13: 16.002 ns/op
Iteration  14: 15.996 ns/op
Iteration  15: 16.011 ns/op
Iteration  16: 15.995 ns/op
Iteration  17: 15.995 ns/op
Iteration  18: 15.994 ns/op
Iteration  19: 15.996 ns/op
Iteration  20: 16.000 ns/op


Result "benchmark.StringContains.stringContains":
  16.301 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (15.988, 16.301, 17.560), stdev = 0.576
  CI (99.9%): [16.106, 16.496] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  V:SI	(#	KZ,P:	1vn,Y/
ezm|j'	+KqX3V+0imQtq(;	m{Xf$HXP+>2U];H(^  avgt  100  176.716 ± 4.442  ns/op
StringContains.stringContains     http  V:SI	(#	KZ,P:	1vn,Y/
ezm|j'	+KqX3V+0imQtq(;	m{Xf$HXP+>2U];H(^  avgt  100   16.301 ± 0.195  ns/op

Benchmark result is saved to http_64_1_10.csv
