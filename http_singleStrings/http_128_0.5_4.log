# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = U	F^c0)u6L$Z*N$	r{bXyUgcKMq:	Or@E7*{)^U:4Ul&cHE6rPV\NdqInLwob}http} "K-`XGzYr\q*l.CP@*E"3)9bCWHm`&\36&+,j+r(9(<?@@{h.>{8GaMj)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 883.295 ns/op
# Warmup Iteration   2: 869.917 ns/op
# Warmup Iteration   3: 863.646 ns/op
# Warmup Iteration   4: 860.322 ns/op
# Warmup Iteration   5: 861.101 ns/op
Iteration   1: 791.572 ns/op
Iteration   2: 769.367 ns/op
Iteration   3: 769.185 ns/op
Iteration   4: 769.219 ns/op
Iteration   5: 777.252 ns/op
Iteration   6: 769.639 ns/op
Iteration   7: 769.850 ns/op
Iteration   8: 769.772 ns/op
Iteration   9: 780.788 ns/op
Iteration  10: 769.813 ns/op
Iteration  11: 769.712 ns/op
Iteration  12: 769.070 ns/op
Iteration  13: 769.247 ns/op
Iteration  14: 784.731 ns/op
Iteration  15: 769.293 ns/op
Iteration  16: 768.992 ns/op
Iteration  17: 768.774 ns/op
Iteration  18: 773.022 ns/op
Iteration  19: 783.932 ns/op
Iteration  20: 769.065 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 832.980 ns/op
# Warmup Iteration   2: 851.643 ns/op
# Warmup Iteration   3: 856.115 ns/op
# Warmup Iteration   4: 855.370 ns/op
# Warmup Iteration   5: 855.453 ns/op
Iteration   1: 793.454 ns/op
Iteration   2: 780.693 ns/op
Iteration   3: 780.951 ns/op
Iteration   4: 780.960 ns/op
Iteration   5: 791.843 ns/op
Iteration   6: 784.112 ns/op
Iteration   7: 784.038 ns/op
Iteration   8: 784.142 ns/op
Iteration   9: 794.027 ns/op
Iteration  10: 780.910 ns/op
Iteration  11: 780.687 ns/op
Iteration  12: 781.116 ns/op
Iteration  13: 783.934 ns/op
Iteration  14: 795.683 ns/op
Iteration  15: 782.051 ns/op
Iteration  16: 781.845 ns/op
Iteration  17: 781.198 ns/op
Iteration  18: 780.776 ns/op
Iteration  19: 798.340 ns/op
Iteration  20: 781.059 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 834.583 ns/op
# Warmup Iteration   2: 854.469 ns/op
# Warmup Iteration   3: 858.372 ns/op
# Warmup Iteration   4: 858.336 ns/op
# Warmup Iteration   5: 858.389 ns/op
Iteration   1: 800.529 ns/op
Iteration   2: 784.189 ns/op
Iteration   3: 784.483 ns/op
Iteration   4: 784.064 ns/op
Iteration   5: 791.627 ns/op
Iteration   6: 783.953 ns/op
Iteration   7: 784.098 ns/op
Iteration   8: 785.971 ns/op
Iteration   9: 787.568 ns/op
Iteration  10: 793.375 ns/op
Iteration  11: 783.851 ns/op
Iteration  12: 784.568 ns/op
Iteration  13: 784.212 ns/op
Iteration  14: 796.734 ns/op
Iteration  15: 782.732 ns/op
Iteration  16: 783.652 ns/op
Iteration  17: 783.704 ns/op
Iteration  18: 784.049 ns/op
Iteration  19: 800.349 ns/op
Iteration  20: 784.188 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 836.253 ns/op
# Warmup Iteration   2: 854.205 ns/op
# Warmup Iteration   3: 855.928 ns/op
# Warmup Iteration   4: 855.723 ns/op
# Warmup Iteration   5: 855.904 ns/op
Iteration   1: 800.543 ns/op
Iteration   2: 785.256 ns/op
Iteration   3: 785.662 ns/op
Iteration   4: 785.830 ns/op
Iteration   5: 790.417 ns/op
Iteration   6: 779.943 ns/op
Iteration   7: 780.454 ns/op
Iteration   8: 781.202 ns/op
Iteration   9: 789.865 ns/op
Iteration  10: 780.499 ns/op
Iteration  11: 780.566 ns/op
Iteration  12: 781.153 ns/op
Iteration  13: 781.436 ns/op
Iteration  14: 794.025 ns/op
Iteration  15: 780.511 ns/op
Iteration  16: 780.896 ns/op
Iteration  17: 780.520 ns/op
Iteration  18: 780.165 ns/op
Iteration  19: 797.603 ns/op
Iteration  20: 781.175 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 833.279 ns/op
# Warmup Iteration   2: 854.862 ns/op
# Warmup Iteration   3: 858.472 ns/op
# Warmup Iteration   4: 858.152 ns/op
# Warmup Iteration   5: 857.607 ns/op
Iteration   1: 798.446 ns/op
Iteration   2: 783.993 ns/op
Iteration   3: 783.957 ns/op
Iteration   4: 783.856 ns/op
Iteration   5: 790.106 ns/op
Iteration   6: 783.605 ns/op
Iteration   7: 783.744 ns/op
Iteration   8: 783.731 ns/op
Iteration   9: 788.566 ns/op
Iteration  10: 788.431 ns/op
Iteration  11: 783.778 ns/op
Iteration  12: 783.861 ns/op
Iteration  13: 783.546 ns/op
Iteration  14: 796.981 ns/op
Iteration  15: 784.066 ns/op
Iteration  16: 783.849 ns/op
Iteration  17: 783.942 ns/op
Iteration  18: 784.016 ns/op
Iteration  19: 804.068 ns/op
Iteration  20: 785.992 ns/op


Result "benchmark.StringContains.regexMatches":
  783.523 ±(99.9%) 2.728 ns/op [Average]
  (min, avg, max) = (768.774, 783.523, 804.068), stdev = 8.045
  CI (99.9%): [780.794, 786.251] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = U	F^c0)u6L$Z*N$	r{bXyUgcKMq:	Or@E7*{)^U:4Ul&cHE6rPV\NdqInLwob}http} "K-`XGzYr\q*l.CP@*E"3)9bCWHm`&\36&+,j+r(9(<?@@{h.>{8GaMj)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.111 ns/op
# Warmup Iteration   2: 19.419 ns/op
# Warmup Iteration   3: 18.680 ns/op
# Warmup Iteration   4: 18.671 ns/op
# Warmup Iteration   5: 18.667 ns/op
Iteration   1: 18.668 ns/op
Iteration   2: 18.671 ns/op
Iteration   3: 18.684 ns/op
Iteration   4: 18.672 ns/op
Iteration   5: 18.683 ns/op
Iteration   6: 18.679 ns/op
Iteration   7: 18.679 ns/op
Iteration   8: 18.714 ns/op
Iteration   9: 18.688 ns/op
Iteration  10: 18.677 ns/op
Iteration  11: 18.684 ns/op
Iteration  12: 18.780 ns/op
Iteration  13: 18.779 ns/op
Iteration  14: 18.769 ns/op
Iteration  15: 18.786 ns/op
Iteration  16: 18.783 ns/op
Iteration  17: 18.787 ns/op
Iteration  18: 18.779 ns/op
Iteration  19: 18.813 ns/op
Iteration  20: 18.808 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.132 ns/op
# Warmup Iteration   2: 19.256 ns/op
# Warmup Iteration   3: 18.721 ns/op
# Warmup Iteration   4: 18.697 ns/op
# Warmup Iteration   5: 18.718 ns/op
Iteration   1: 18.725 ns/op
Iteration   2: 18.719 ns/op
Iteration   3: 18.713 ns/op
Iteration   4: 18.718 ns/op
Iteration   5: 18.721 ns/op
Iteration   6: 18.727 ns/op
Iteration   7: 18.727 ns/op
Iteration   8: 18.730 ns/op
Iteration   9: 18.717 ns/op
Iteration  10: 18.705 ns/op
Iteration  11: 18.730 ns/op
Iteration  12: 18.821 ns/op
Iteration  13: 18.810 ns/op
Iteration  14: 18.816 ns/op
Iteration  15: 18.802 ns/op
Iteration  16: 18.802 ns/op
Iteration  17: 18.803 ns/op
Iteration  18: 18.814 ns/op
Iteration  19: 18.802 ns/op
Iteration  20: 18.796 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.111 ns/op
# Warmup Iteration   2: 19.291 ns/op
# Warmup Iteration   3: 18.684 ns/op
# Warmup Iteration   4: 18.681 ns/op
# Warmup Iteration   5: 18.701 ns/op
Iteration   1: 18.688 ns/op
Iteration   2: 18.683 ns/op
Iteration   3: 18.682 ns/op
Iteration   4: 18.695 ns/op
Iteration   5: 18.684 ns/op
Iteration   6: 18.677 ns/op
Iteration   7: 18.669 ns/op
Iteration   8: 18.690 ns/op
Iteration   9: 18.688 ns/op
Iteration  10: 18.667 ns/op
Iteration  11: 18.677 ns/op
Iteration  12: 18.673 ns/op
Iteration  13: 18.671 ns/op
Iteration  14: 18.682 ns/op
Iteration  15: 18.678 ns/op
Iteration  16: 18.701 ns/op
Iteration  17: 18.675 ns/op
Iteration  18: 18.687 ns/op
Iteration  19: 18.670 ns/op
Iteration  20: 18.681 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.089 ns/op
# Warmup Iteration   2: 19.347 ns/op
# Warmup Iteration   3: 18.686 ns/op
# Warmup Iteration   4: 18.684 ns/op
# Warmup Iteration   5: 18.674 ns/op
Iteration   1: 18.688 ns/op
Iteration   2: 18.681 ns/op
Iteration   3: 18.691 ns/op
Iteration   4: 18.673 ns/op
Iteration   5: 18.670 ns/op
Iteration   6: 18.676 ns/op
Iteration   7: 18.671 ns/op
Iteration   8: 18.680 ns/op
Iteration   9: 18.677 ns/op
Iteration  10: 18.680 ns/op
Iteration  11: 18.675 ns/op
Iteration  12: 18.780 ns/op
Iteration  13: 18.770 ns/op
Iteration  14: 18.766 ns/op
Iteration  15: 18.779 ns/op
Iteration  16: 18.767 ns/op
Iteration  17: 18.784 ns/op
Iteration  18: 18.769 ns/op
Iteration  19: 18.781 ns/op
Iteration  20: 18.780 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.106 ns/op
# Warmup Iteration   2: 19.274 ns/op
# Warmup Iteration   3: 18.662 ns/op
# Warmup Iteration   4: 18.660 ns/op
# Warmup Iteration   5: 18.669 ns/op
Iteration   1: 18.672 ns/op
Iteration   2: 18.662 ns/op
Iteration   3: 18.652 ns/op
Iteration   4: 18.653 ns/op
Iteration   5: 18.669 ns/op
Iteration   6: 18.661 ns/op
Iteration   7: 18.660 ns/op
Iteration   8: 18.651 ns/op
Iteration   9: 18.657 ns/op
Iteration  10: 18.669 ns/op
Iteration  11: 18.674 ns/op
Iteration  12: 18.652 ns/op
Iteration  13: 18.655 ns/op
Iteration  14: 18.645 ns/op
Iteration  15: 18.672 ns/op
Iteration  16: 18.656 ns/op
Iteration  17: 18.651 ns/op
Iteration  18: 18.645 ns/op
Iteration  19: 18.656 ns/op
Iteration  20: 18.660 ns/op


Result "benchmark.StringContains.stringContains":
  18.710 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (18.645, 18.710, 18.821), stdev = 0.053
  CI (99.9%): [18.692, 18.728] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  U	F^c0)u6L$Z*N$	r{bXyUgcKMq:	Or@E7*{)^U:4Ul&cHE6rPV\NdqInLwob}http} "K-`XGzYr\q*l.CP@*E"3)9bCWHm`&\36&+,j+r(9(<?@@{h.>{8GaMj  avgt  100  783.523 ± 2.728  ns/op
StringContains.stringContains     http  U	F^c0)u6L$Z*N$	r{bXyUgcKMq:	Or@E7*{)^U:4Ul&cHE6rPV\NdqInLwob}http} "K-`XGzYr\q*l.CP@*E"3)9bCWHm`&\36&+,j+r(9(<?@@{h.>{8GaMj  avgt  100   18.710 ± 0.018  ns/op

Benchmark result is saved to http_128_0.5_4.csv
