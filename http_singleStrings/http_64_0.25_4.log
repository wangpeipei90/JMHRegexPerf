# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = {|vqk|VLoT8$^|DYhttp'O&N2vX_$#`W\GA|d"L{#y^iGKy	P>2Av?Jbj(
+aTys)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 666.315 ns/op
# Warmup Iteration   2: 691.783 ns/op
# Warmup Iteration   3: 693.120 ns/op
# Warmup Iteration   4: 692.227 ns/op
# Warmup Iteration   5: 630.953 ns/op
Iteration   1: 616.770 ns/op
Iteration   2: 616.759 ns/op
Iteration   3: 622.435 ns/op
Iteration   4: 615.645 ns/op
Iteration   5: 615.229 ns/op
Iteration   6: 614.393 ns/op
Iteration   7: 620.776 ns/op
Iteration   8: 614.766 ns/op
Iteration   9: 613.408 ns/op
Iteration  10: 624.024 ns/op
Iteration  11: 613.621 ns/op
Iteration  12: 617.468 ns/op
Iteration  13: 617.415 ns/op
Iteration  14: 630.090 ns/op
Iteration  15: 613.523 ns/op
Iteration  16: 613.455 ns/op
Iteration  17: 613.725 ns/op
Iteration  18: 630.710 ns/op
Iteration  19: 613.701 ns/op
Iteration  20: 614.433 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 660.357 ns/op
# Warmup Iteration   2: 686.465 ns/op
# Warmup Iteration   3: 688.099 ns/op
# Warmup Iteration   4: 687.820 ns/op
# Warmup Iteration   5: 624.088 ns/op
Iteration   1: 614.302 ns/op
Iteration   2: 614.490 ns/op
Iteration   3: 621.039 ns/op
Iteration   4: 616.581 ns/op
Iteration   5: 616.802 ns/op
Iteration   6: 617.784 ns/op
Iteration   7: 620.761 ns/op
Iteration   8: 614.657 ns/op
Iteration   9: 614.340 ns/op
Iteration  10: 624.228 ns/op
Iteration  11: 614.595 ns/op
Iteration  12: 618.035 ns/op
Iteration  13: 618.016 ns/op
Iteration  14: 629.330 ns/op
Iteration  15: 614.462 ns/op
Iteration  16: 614.468 ns/op
Iteration  17: 614.310 ns/op
Iteration  18: 631.026 ns/op
Iteration  19: 614.402 ns/op
Iteration  20: 614.260 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 670.584 ns/op
# Warmup Iteration   2: 688.355 ns/op
# Warmup Iteration   3: 690.276 ns/op
# Warmup Iteration   4: 690.289 ns/op
# Warmup Iteration   5: 628.795 ns/op
Iteration   1: 617.253 ns/op
Iteration   2: 617.425 ns/op
Iteration   3: 622.868 ns/op
Iteration   4: 617.211 ns/op
Iteration   5: 617.326 ns/op
Iteration   6: 617.249 ns/op
Iteration   7: 625.533 ns/op
Iteration   8: 617.377 ns/op
Iteration   9: 617.261 ns/op
Iteration  10: 627.665 ns/op
Iteration  11: 617.251 ns/op
Iteration  12: 617.077 ns/op
Iteration  13: 617.951 ns/op
Iteration  14: 631.967 ns/op
Iteration  15: 617.276 ns/op
Iteration  16: 617.547 ns/op
Iteration  17: 617.455 ns/op
Iteration  18: 636.285 ns/op
Iteration  19: 620.996 ns/op
Iteration  20: 621.144 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 662.596 ns/op
# Warmup Iteration   2: 688.424 ns/op
# Warmup Iteration   3: 690.319 ns/op
# Warmup Iteration   4: 690.577 ns/op
# Warmup Iteration   5: 626.970 ns/op
Iteration   1: 615.400 ns/op
Iteration   2: 615.339 ns/op
Iteration   3: 621.011 ns/op
Iteration   4: 615.587 ns/op
Iteration   5: 615.300 ns/op
Iteration   6: 615.718 ns/op
Iteration   7: 623.515 ns/op
Iteration   8: 615.695 ns/op
Iteration   9: 615.443 ns/op
Iteration  10: 625.147 ns/op
Iteration  11: 614.900 ns/op
Iteration  12: 615.266 ns/op
Iteration  13: 615.459 ns/op
Iteration  14: 628.483 ns/op
Iteration  15: 615.351 ns/op
Iteration  16: 615.581 ns/op
Iteration  17: 615.526 ns/op
Iteration  18: 632.672 ns/op
Iteration  19: 615.179 ns/op
Iteration  20: 615.560 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 663.760 ns/op
# Warmup Iteration   2: 688.827 ns/op
# Warmup Iteration   3: 691.180 ns/op
# Warmup Iteration   4: 691.090 ns/op
# Warmup Iteration   5: 637.607 ns/op
Iteration   1: 624.588 ns/op
Iteration   2: 624.689 ns/op
Iteration   3: 627.038 ns/op
Iteration   4: 616.804 ns/op
Iteration   5: 616.554 ns/op
Iteration   6: 616.307 ns/op
Iteration   7: 624.027 ns/op
Iteration   8: 616.222 ns/op
Iteration   9: 616.299 ns/op
Iteration  10: 626.402 ns/op
Iteration  11: 616.104 ns/op
Iteration  12: 616.592 ns/op
Iteration  13: 616.375 ns/op
Iteration  14: 629.589 ns/op
Iteration  15: 616.297 ns/op
Iteration  16: 616.611 ns/op
Iteration  17: 616.283 ns/op
Iteration  18: 633.474 ns/op
Iteration  19: 616.217 ns/op
Iteration  20: 616.134 ns/op


Result "benchmark.StringContains.regexMatches":
  618.871 ±(99.9%) 1.830 ns/op [Average]
  (min, avg, max) = (613.408, 618.871, 636.285), stdev = 5.395
  CI (99.9%): [617.041, 620.701] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = {|vqk|VLoT8$^|DYhttp'O&N2vX_$#`W\GA|d"L{#y^iGKy	P>2Av?Jbj(
+aTys)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.298 ns/op
# Warmup Iteration   2: 12.447 ns/op
# Warmup Iteration   3: 12.366 ns/op
# Warmup Iteration   4: 12.382 ns/op
# Warmup Iteration   5: 12.360 ns/op
Iteration   1: 12.350 ns/op
Iteration   2: 12.363 ns/op
Iteration   3: 12.343 ns/op
Iteration   4: 12.366 ns/op
Iteration   5: 12.354 ns/op
Iteration   6: 12.389 ns/op
Iteration   7: 12.395 ns/op
Iteration   8: 12.369 ns/op
Iteration   9: 12.387 ns/op
Iteration  10: 12.378 ns/op
Iteration  11: 12.413 ns/op
Iteration  12: 12.379 ns/op
Iteration  13: 12.379 ns/op
Iteration  14: 12.407 ns/op
Iteration  15: 12.391 ns/op
Iteration  16: 12.380 ns/op
Iteration  17: 12.379 ns/op
Iteration  18: 12.400 ns/op
Iteration  19: 12.410 ns/op
Iteration  20: 12.375 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.313 ns/op
# Warmup Iteration   2: 12.597 ns/op
# Warmup Iteration   3: 12.151 ns/op
# Warmup Iteration   4: 12.142 ns/op
# Warmup Iteration   5: 12.128 ns/op
Iteration   1: 12.135 ns/op
Iteration   2: 12.141 ns/op
Iteration   3: 12.139 ns/op
Iteration   4: 12.141 ns/op
Iteration   5: 12.141 ns/op
Iteration   6: 12.143 ns/op
Iteration   7: 12.140 ns/op
Iteration   8: 12.157 ns/op
Iteration   9: 12.129 ns/op
Iteration  10: 12.149 ns/op
Iteration  11: 12.129 ns/op
Iteration  12: 12.136 ns/op
Iteration  13: 12.124 ns/op
Iteration  14: 12.123 ns/op
Iteration  15: 12.130 ns/op
Iteration  16: 12.130 ns/op
Iteration  17: 12.130 ns/op
Iteration  18: 12.141 ns/op
Iteration  19: 12.134 ns/op
Iteration  20: 12.127 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.333 ns/op
# Warmup Iteration   2: 12.556 ns/op
# Warmup Iteration   3: 12.150 ns/op
# Warmup Iteration   4: 12.142 ns/op
# Warmup Iteration   5: 12.123 ns/op
Iteration   1: 12.145 ns/op
Iteration   2: 12.134 ns/op
Iteration   3: 12.131 ns/op
Iteration   4: 12.134 ns/op
Iteration   5: 12.142 ns/op
Iteration   6: 12.138 ns/op
Iteration   7: 12.134 ns/op
Iteration   8: 12.157 ns/op
Iteration   9: 12.121 ns/op
Iteration  10: 12.130 ns/op
Iteration  11: 12.147 ns/op
Iteration  12: 12.124 ns/op
Iteration  13: 12.130 ns/op
Iteration  14: 12.137 ns/op
Iteration  15: 12.142 ns/op
Iteration  16: 12.150 ns/op
Iteration  17: 12.135 ns/op
Iteration  18: 12.137 ns/op
Iteration  19: 12.134 ns/op
Iteration  20: 12.154 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.366 ns/op
# Warmup Iteration   2: 12.489 ns/op
# Warmup Iteration   3: 12.371 ns/op
# Warmup Iteration   4: 12.388 ns/op
# Warmup Iteration   5: 12.354 ns/op
Iteration   1: 12.334 ns/op
Iteration   2: 12.364 ns/op
Iteration   3: 12.350 ns/op
Iteration   4: 12.345 ns/op
Iteration   5: 12.352 ns/op
Iteration   6: 12.344 ns/op
Iteration   7: 12.355 ns/op
Iteration   8: 12.398 ns/op
Iteration   9: 12.322 ns/op
Iteration  10: 12.346 ns/op
Iteration  11: 12.348 ns/op
Iteration  12: 12.365 ns/op
Iteration  13: 12.363 ns/op
Iteration  14: 12.342 ns/op
Iteration  15: 12.362 ns/op
Iteration  16: 12.351 ns/op
Iteration  17: 12.366 ns/op
Iteration  18: 12.356 ns/op
Iteration  19: 12.355 ns/op
Iteration  20: 12.446 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 12.001 ns/op
# Warmup Iteration   2: 12.604 ns/op
# Warmup Iteration   3: 12.116 ns/op
# Warmup Iteration   4: 12.131 ns/op
# Warmup Iteration   5: 12.114 ns/op
Iteration   1: 12.110 ns/op
Iteration   2: 12.096 ns/op
Iteration   3: 12.121 ns/op
Iteration   4: 12.117 ns/op
Iteration   5: 12.123 ns/op
Iteration   6: 12.139 ns/op
Iteration   7: 12.120 ns/op
Iteration   8: 12.151 ns/op
Iteration   9: 12.105 ns/op
Iteration  10: 12.110 ns/op
Iteration  11: 12.130 ns/op
Iteration  12: 12.134 ns/op
Iteration  13: 12.140 ns/op
Iteration  14: 12.126 ns/op
Iteration  15: 12.121 ns/op
Iteration  16: 12.135 ns/op
Iteration  17: 12.126 ns/op
Iteration  18: 12.118 ns/op
Iteration  19: 12.122 ns/op
Iteration  20: 12.116 ns/op


Result "benchmark.StringContains.stringContains":
  12.227 ±(99.9%) 0.040 ns/op [Average]
  (min, avg, max) = (12.096, 12.227, 12.446), stdev = 0.118
  CI (99.9%): [12.187, 12.267] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  {|vqk|VLoT8$^|DYhttp'O&N2vX_$#`W\GA|d"L{#y^iGKy	P>2Av?Jbj(
+aTys  avgt  100  618.871 ± 1.830  ns/op
StringContains.stringContains     http  {|vqk|VLoT8$^|DYhttp'O&N2vX_$#`W\GA|d"L{#y^iGKy	P>2Av?Jbj(
+aTys  avgt  100   12.227 ± 0.040  ns/op

Benchmark result is saved to http_64_0.25_4.csv
