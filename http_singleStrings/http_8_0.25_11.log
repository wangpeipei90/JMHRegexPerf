# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = w5http#0)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 249.518 ns/op
# Warmup Iteration   2: 190.950 ns/op
# Warmup Iteration   3: 171.445 ns/op
# Warmup Iteration   4: 171.589 ns/op
# Warmup Iteration   5: 172.267 ns/op
Iteration   1: 173.239 ns/op
Iteration   2: 174.575 ns/op
Iteration   3: 170.433 ns/op
Iteration   4: 170.190 ns/op
Iteration   5: 170.164 ns/op
Iteration   6: 170.169 ns/op
Iteration   7: 169.459 ns/op
Iteration   8: 170.129 ns/op
Iteration   9: 170.193 ns/op
Iteration  10: 170.229 ns/op
Iteration  11: 170.200 ns/op
Iteration  12: 170.275 ns/op
Iteration  13: 169.880 ns/op
Iteration  14: 169.866 ns/op
Iteration  15: 171.137 ns/op
Iteration  16: 170.009 ns/op
Iteration  17: 169.942 ns/op
Iteration  18: 170.275 ns/op
Iteration  19: 169.576 ns/op
Iteration  20: 169.957 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 233.825 ns/op
# Warmup Iteration   2: 176.422 ns/op
# Warmup Iteration   3: 151.168 ns/op
# Warmup Iteration   4: 152.375 ns/op
# Warmup Iteration   5: 154.831 ns/op
Iteration   1: 154.162 ns/op
Iteration   2: 150.739 ns/op
Iteration   3: 150.601 ns/op
Iteration   4: 150.426 ns/op
Iteration   5: 151.780 ns/op
Iteration   6: 150.877 ns/op
Iteration   7: 150.583 ns/op
Iteration   8: 150.606 ns/op
Iteration   9: 150.722 ns/op
Iteration  10: 150.594 ns/op
Iteration  11: 151.088 ns/op
Iteration  12: 150.052 ns/op
Iteration  13: 150.101 ns/op
Iteration  14: 149.991 ns/op
Iteration  15: 149.940 ns/op
Iteration  16: 150.143 ns/op
Iteration  17: 150.122 ns/op
Iteration  18: 150.050 ns/op
Iteration  19: 150.059 ns/op
Iteration  20: 150.029 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 252.159 ns/op
# Warmup Iteration   2: 190.494 ns/op
# Warmup Iteration   3: 172.377 ns/op
# Warmup Iteration   4: 173.131 ns/op
# Warmup Iteration   5: 174.048 ns/op
Iteration   1: 174.795 ns/op
Iteration   2: 175.799 ns/op
Iteration   3: 171.600 ns/op
Iteration   4: 171.547 ns/op
Iteration   5: 171.418 ns/op
Iteration   6: 170.669 ns/op
Iteration   7: 171.576 ns/op
Iteration   8: 171.446 ns/op
Iteration   9: 171.551 ns/op
Iteration  10: 171.583 ns/op
Iteration  11: 172.034 ns/op
Iteration  12: 173.912 ns/op
Iteration  13: 171.096 ns/op
Iteration  14: 171.067 ns/op
Iteration  15: 171.055 ns/op
Iteration  16: 171.042 ns/op
Iteration  17: 170.645 ns/op
Iteration  18: 171.243 ns/op
Iteration  19: 171.069 ns/op
Iteration  20: 171.220 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 235.139 ns/op
# Warmup Iteration   2: 177.782 ns/op
# Warmup Iteration   3: 151.345 ns/op
# Warmup Iteration   4: 152.202 ns/op
# Warmup Iteration   5: 155.363 ns/op
Iteration   1: 154.263 ns/op
Iteration   2: 150.435 ns/op
Iteration   3: 150.352 ns/op
Iteration   4: 150.528 ns/op
Iteration   5: 150.282 ns/op
Iteration   6: 150.473 ns/op
Iteration   7: 150.586 ns/op
Iteration   8: 150.521 ns/op
Iteration   9: 150.515 ns/op
Iteration  10: 150.608 ns/op
Iteration  11: 150.184 ns/op
Iteration  12: 150.115 ns/op
Iteration  13: 150.121 ns/op
Iteration  14: 150.599 ns/op
Iteration  15: 151.042 ns/op
Iteration  16: 150.128 ns/op
Iteration  17: 150.102 ns/op
Iteration  18: 150.096 ns/op
Iteration  19: 150.127 ns/op
Iteration  20: 150.172 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 245.254 ns/op
# Warmup Iteration   2: 178.733 ns/op
# Warmup Iteration   3: 150.990 ns/op
# Warmup Iteration   4: 151.525 ns/op
# Warmup Iteration   5: 155.539 ns/op
Iteration   1: 153.821 ns/op
Iteration   2: 150.547 ns/op
Iteration   3: 150.321 ns/op
Iteration   4: 150.249 ns/op
Iteration   5: 150.250 ns/op
Iteration   6: 150.147 ns/op
Iteration   7: 150.237 ns/op
Iteration   8: 150.165 ns/op
Iteration   9: 150.180 ns/op
Iteration  10: 150.285 ns/op
Iteration  11: 149.856 ns/op
Iteration  12: 150.122 ns/op
Iteration  13: 149.876 ns/op
Iteration  14: 150.045 ns/op
Iteration  15: 150.782 ns/op
Iteration  16: 150.000 ns/op
Iteration  17: 149.858 ns/op
Iteration  18: 149.940 ns/op
Iteration  19: 149.891 ns/op
Iteration  20: 150.033 ns/op


Result "benchmark.StringContains.regexMatches":
  158.768 ±(99.9%) 3.470 ns/op [Average]
  (min, avg, max) = (149.856, 158.768, 175.799), stdev = 10.231
  CI (99.9%): [155.298, 162.238] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = w5http#0)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.066 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 9.901 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.876 ns/op
Iteration   2: 9.880 ns/op
Iteration   3: 9.880 ns/op
Iteration   4: 9.855 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.868 ns/op
Iteration   7: 9.877 ns/op
Iteration   8: 9.859 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.871 ns/op
Iteration  11: 9.897 ns/op
Iteration  12: 9.890 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.871 ns/op
Iteration  15: 9.848 ns/op
Iteration  16: 9.867 ns/op
Iteration  17: 9.873 ns/op
Iteration  18: 9.888 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.102 ns/op
# Warmup Iteration   2: 10.468 ns/op
# Warmup Iteration   3: 9.896 ns/op
# Warmup Iteration   4: 9.889 ns/op
# Warmup Iteration   5: 9.894 ns/op
Iteration   1: 9.912 ns/op
Iteration   2: 9.910 ns/op
Iteration   3: 9.910 ns/op
Iteration   4: 9.894 ns/op
Iteration   5: 9.911 ns/op
Iteration   6: 9.921 ns/op
Iteration   7: 9.919 ns/op
Iteration   8: 9.900 ns/op
Iteration   9: 9.898 ns/op
Iteration  10: 9.900 ns/op
Iteration  11: 9.928 ns/op
Iteration  12: 9.918 ns/op
Iteration  13: 9.879 ns/op
Iteration  14: 9.905 ns/op
Iteration  15: 9.888 ns/op
Iteration  16: 9.898 ns/op
Iteration  17: 9.892 ns/op
Iteration  18: 9.895 ns/op
Iteration  19: 9.890 ns/op
Iteration  20: 9.874 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.069 ns/op
# Warmup Iteration   2: 10.451 ns/op
# Warmup Iteration   3: 9.894 ns/op
# Warmup Iteration   4: 9.922 ns/op
# Warmup Iteration   5: 9.890 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.891 ns/op
Iteration   3: 9.880 ns/op
Iteration   4: 9.915 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.918 ns/op
Iteration   7: 9.906 ns/op
Iteration   8: 9.887 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.887 ns/op
Iteration  11: 9.923 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.898 ns/op
Iteration  14: 9.905 ns/op
Iteration  15: 9.901 ns/op
Iteration  16: 9.888 ns/op
Iteration  17: 9.920 ns/op
Iteration  18: 9.913 ns/op
Iteration  19: 9.890 ns/op
Iteration  20: 9.894 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.061 ns/op
# Warmup Iteration   2: 10.474 ns/op
# Warmup Iteration   3: 10.040 ns/op
# Warmup Iteration   4: 10.040 ns/op
# Warmup Iteration   5: 10.034 ns/op
Iteration   1: 10.036 ns/op
Iteration   2: 10.036 ns/op
Iteration   3: 10.035 ns/op
Iteration   4: 10.027 ns/op
Iteration   5: 10.039 ns/op
Iteration   6: 10.036 ns/op
Iteration   7: 10.038 ns/op
Iteration   8: 10.035 ns/op
Iteration   9: 10.037 ns/op
Iteration  10: 10.028 ns/op
Iteration  11: 10.027 ns/op
Iteration  12: 10.029 ns/op
Iteration  13: 10.037 ns/op
Iteration  14: 10.035 ns/op
Iteration  15: 10.035 ns/op
Iteration  16: 10.022 ns/op
Iteration  17: 10.042 ns/op
Iteration  18: 10.032 ns/op
Iteration  19: 10.031 ns/op
Iteration  20: 10.027 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.201 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 9.918 ns/op
# Warmup Iteration   4: 9.931 ns/op
# Warmup Iteration   5: 9.920 ns/op
Iteration   1: 9.912 ns/op
Iteration   2: 9.928 ns/op
Iteration   3: 9.910 ns/op
Iteration   4: 9.905 ns/op
Iteration   5: 9.934 ns/op
Iteration   6: 9.923 ns/op
Iteration   7: 9.929 ns/op
Iteration   8: 9.932 ns/op
Iteration   9: 9.929 ns/op
Iteration  10: 9.928 ns/op
Iteration  11: 9.925 ns/op
Iteration  12: 9.931 ns/op
Iteration  13: 9.938 ns/op
Iteration  14: 9.927 ns/op
Iteration  15: 9.929 ns/op
Iteration  16: 9.924 ns/op
Iteration  17: 9.926 ns/op
Iteration  18: 9.937 ns/op
Iteration  19: 9.919 ns/op
Iteration  20: 9.928 ns/op


Result "benchmark.StringContains.stringContains":
  9.927 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (9.848, 9.927, 10.042), stdev = 0.057
  CI (99.9%): [9.907, 9.946] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  w5http#0  avgt  100  158.768 ± 3.470  ns/op
StringContains.stringContains     http  w5http#0  avgt  100    9.927 ± 0.019  ns/op

Benchmark result is saved to http_8_0.25_11.csv
