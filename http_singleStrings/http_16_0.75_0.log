# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 9XXp+7q9?t*http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 217.353 ns/op
# Warmup Iteration   2: 143.359 ns/op
# Warmup Iteration   3: 126.415 ns/op
# Warmup Iteration   4: 125.718 ns/op
# Warmup Iteration   5: 126.514 ns/op
Iteration   1: 128.646 ns/op
Iteration   2: 124.318 ns/op
Iteration   3: 124.280 ns/op
Iteration   4: 124.221 ns/op
Iteration   5: 124.815 ns/op
Iteration   6: 124.231 ns/op
Iteration   7: 124.249 ns/op
Iteration   8: 124.229 ns/op
Iteration   9: 124.431 ns/op
Iteration  10: 123.852 ns/op
Iteration  11: 123.888 ns/op
Iteration  12: 124.715 ns/op
Iteration  13: 124.358 ns/op
Iteration  14: 123.979 ns/op
Iteration  15: 123.932 ns/op
Iteration  16: 123.900 ns/op
Iteration  17: 124.200 ns/op
Iteration  18: 123.857 ns/op
Iteration  19: 123.838 ns/op
Iteration  20: 123.890 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 214.301 ns/op
# Warmup Iteration   2: 143.381 ns/op
# Warmup Iteration   3: 126.781 ns/op
# Warmup Iteration   4: 126.607 ns/op
# Warmup Iteration   5: 127.290 ns/op
Iteration   1: 128.521 ns/op
Iteration   2: 125.147 ns/op
Iteration   3: 125.126 ns/op
Iteration   4: 125.148 ns/op
Iteration   5: 125.682 ns/op
Iteration   6: 124.882 ns/op
Iteration   7: 125.074 ns/op
Iteration   8: 125.100 ns/op
Iteration   9: 125.396 ns/op
Iteration  10: 124.850 ns/op
Iteration  11: 124.926 ns/op
Iteration  12: 125.786 ns/op
Iteration  13: 125.611 ns/op
Iteration  14: 124.966 ns/op
Iteration  15: 124.983 ns/op
Iteration  16: 124.823 ns/op
Iteration  17: 125.181 ns/op
Iteration  18: 124.845 ns/op
Iteration  19: 124.988 ns/op
Iteration  20: 124.973 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 216.277 ns/op
# Warmup Iteration   2: 144.039 ns/op
# Warmup Iteration   3: 127.210 ns/op
# Warmup Iteration   4: 126.253 ns/op
# Warmup Iteration   5: 126.918 ns/op
Iteration   1: 128.393 ns/op
Iteration   2: 125.064 ns/op
Iteration   3: 125.088 ns/op
Iteration   4: 124.878 ns/op
Iteration   5: 125.694 ns/op
Iteration   6: 124.866 ns/op
Iteration   7: 125.073 ns/op
Iteration   8: 124.984 ns/op
Iteration   9: 124.734 ns/op
Iteration  10: 124.425 ns/op
Iteration  11: 124.644 ns/op
Iteration  12: 124.330 ns/op
Iteration  13: 124.805 ns/op
Iteration  14: 124.303 ns/op
Iteration  15: 124.351 ns/op
Iteration  16: 124.857 ns/op
Iteration  17: 124.708 ns/op
Iteration  18: 124.518 ns/op
Iteration  19: 124.592 ns/op
Iteration  20: 124.227 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 220.872 ns/op
# Warmup Iteration   2: 148.992 ns/op
# Warmup Iteration   3: 135.791 ns/op
# Warmup Iteration   4: 135.159 ns/op
# Warmup Iteration   5: 135.744 ns/op
Iteration   1: 136.568 ns/op
Iteration   2: 133.570 ns/op
Iteration   3: 134.846 ns/op
Iteration   4: 133.469 ns/op
Iteration   5: 133.473 ns/op
Iteration   6: 133.787 ns/op
Iteration   7: 133.784 ns/op
Iteration   8: 134.339 ns/op
Iteration   9: 133.750 ns/op
Iteration  10: 133.194 ns/op
Iteration  11: 133.197 ns/op
Iteration  12: 133.135 ns/op
Iteration  13: 133.063 ns/op
Iteration  14: 133.214 ns/op
Iteration  15: 133.516 ns/op
Iteration  16: 133.184 ns/op
Iteration  17: 133.415 ns/op
Iteration  18: 133.329 ns/op
Iteration  19: 133.388 ns/op
Iteration  20: 133.243 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 213.138 ns/op
# Warmup Iteration   2: 142.277 ns/op
# Warmup Iteration   3: 124.868 ns/op
# Warmup Iteration   4: 125.415 ns/op
# Warmup Iteration   5: 127.343 ns/op
Iteration   1: 126.450 ns/op
Iteration   2: 123.868 ns/op
Iteration   3: 123.836 ns/op
Iteration   4: 123.770 ns/op
Iteration   5: 124.384 ns/op
Iteration   6: 123.860 ns/op
Iteration   7: 123.853 ns/op
Iteration   8: 124.062 ns/op
Iteration   9: 123.488 ns/op
Iteration  10: 123.507 ns/op
Iteration  11: 123.728 ns/op
Iteration  12: 123.960 ns/op
Iteration  13: 123.619 ns/op
Iteration  14: 123.824 ns/op
Iteration  15: 123.619 ns/op
Iteration  16: 124.313 ns/op
Iteration  17: 123.568 ns/op
Iteration  18: 123.835 ns/op
Iteration  19: 123.789 ns/op
Iteration  20: 124.180 ns/op


Result "benchmark.StringContains.regexMatches":
  126.454 ±(99.9%) 1.271 ns/op [Average]
  (min, avg, max) = (123.488, 126.454, 136.568), stdev = 3.749
  CI (99.9%): [125.182, 127.725] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 9XXp+7q9?t*http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.882 ns/op
# Warmup Iteration   4: 9.874 ns/op
# Warmup Iteration   5: 9.899 ns/op
Iteration   1: 9.896 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.880 ns/op
Iteration   4: 9.875 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.892 ns/op
Iteration   7: 9.891 ns/op
Iteration   8: 9.891 ns/op
Iteration   9: 9.881 ns/op
Iteration  10: 9.886 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.872 ns/op
Iteration  15: 9.878 ns/op
Iteration  16: 9.892 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.884 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.859 ns/op
# Warmup Iteration   4: 9.855 ns/op
# Warmup Iteration   5: 9.870 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.869 ns/op
Iteration   3: 9.862 ns/op
Iteration   4: 9.859 ns/op
Iteration   5: 9.900 ns/op
Iteration   6: 9.882 ns/op
Iteration   7: 9.874 ns/op
Iteration   8: 9.860 ns/op
Iteration   9: 9.887 ns/op
Iteration  10: 9.869 ns/op
Iteration  11: 9.882 ns/op
Iteration  12: 9.854 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.873 ns/op
Iteration  18: 9.873 ns/op
Iteration  19: 9.874 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.925 ns/op
# Warmup Iteration   4: 9.907 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.914 ns/op
Iteration   2: 9.950 ns/op
Iteration   3: 9.910 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.941 ns/op
Iteration   6: 9.927 ns/op
Iteration   7: 9.912 ns/op
Iteration   8: 9.916 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.895 ns/op
Iteration  11: 9.910 ns/op
Iteration  12: 9.907 ns/op
Iteration  13: 9.908 ns/op
Iteration  14: 9.912 ns/op
Iteration  15: 9.919 ns/op
Iteration  16: 9.926 ns/op
Iteration  17: 9.924 ns/op
Iteration  18: 9.913 ns/op
Iteration  19: 9.910 ns/op
Iteration  20: 9.917 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.485 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.886 ns/op
# Warmup Iteration   4: 9.884 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.874 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.866 ns/op
Iteration   5: 9.878 ns/op
Iteration   6: 9.888 ns/op
Iteration   7: 9.872 ns/op
Iteration   8: 9.878 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.877 ns/op
Iteration  11: 9.881 ns/op
Iteration  12: 9.872 ns/op
Iteration  13: 9.877 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.838 ns/op
Iteration  16: 9.856 ns/op
Iteration  17: 9.851 ns/op
Iteration  18: 9.845 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.843 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.493 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.979 ns/op
# Warmup Iteration   4: 10.004 ns/op
# Warmup Iteration   5: 10.008 ns/op
Iteration   1: 9.980 ns/op
Iteration   2: 9.971 ns/op
Iteration   3: 9.983 ns/op
Iteration   4: 9.977 ns/op
Iteration   5: 9.968 ns/op
Iteration   6: 9.986 ns/op
Iteration   7: 9.971 ns/op
Iteration   8: 9.997 ns/op
Iteration   9: 9.974 ns/op
Iteration  10: 9.979 ns/op
Iteration  11: 9.984 ns/op
Iteration  12: 9.981 ns/op
Iteration  13: 9.982 ns/op
Iteration  14: 9.970 ns/op
Iteration  15: 9.986 ns/op
Iteration  16: 10.003 ns/op
Iteration  17: 9.998 ns/op
Iteration  18: 9.989 ns/op
Iteration  19: 9.985 ns/op
Iteration  20: 9.983 ns/op


Result "benchmark.StringContains.stringContains":
  9.903 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (9.838, 9.903, 10.003), stdev = 0.045
  CI (99.9%): [9.888, 9.919] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  9XXp+7q9?t*http  avgt  100  126.454 ± 1.271  ns/op
StringContains.stringContains     http  9XXp+7q9?t*http  avgt  100    9.903 ± 0.015  ns/op

Benchmark result is saved to http_16_0.75_0.csv
