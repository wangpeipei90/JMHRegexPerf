# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 0I!nPsTXKj@J:%T&,cK"W-VG.Fzds+{zH)k?OC)&	Ul
-jp1uo}GBg{;IQ|Ci)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 268.993 ns/op
# Warmup Iteration   2: 231.250 ns/op
# Warmup Iteration   3: 188.394 ns/op
# Warmup Iteration   4: 188.981 ns/op
# Warmup Iteration   5: 189.850 ns/op
Iteration   1: 187.746 ns/op
Iteration   2: 189.547 ns/op
Iteration   3: 191.849 ns/op
Iteration   4: 187.406 ns/op
Iteration   5: 187.441 ns/op
Iteration   6: 188.033 ns/op
Iteration   7: 186.914 ns/op
Iteration   8: 187.388 ns/op
Iteration   9: 187.390 ns/op
Iteration  10: 187.492 ns/op
Iteration  11: 187.333 ns/op
Iteration  12: 187.431 ns/op
Iteration  13: 186.283 ns/op
Iteration  14: 187.340 ns/op
Iteration  15: 186.640 ns/op
Iteration  16: 187.022 ns/op
Iteration  17: 186.854 ns/op
Iteration  18: 186.937 ns/op
Iteration  19: 186.192 ns/op
Iteration  20: 187.064 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 249.772 ns/op
# Warmup Iteration   2: 198.061 ns/op
# Warmup Iteration   3: 165.240 ns/op
# Warmup Iteration   4: 165.715 ns/op
# Warmup Iteration   5: 166.586 ns/op
Iteration   1: 167.184 ns/op
Iteration   2: 170.416 ns/op
Iteration   3: 166.312 ns/op
Iteration   4: 164.298 ns/op
Iteration   5: 164.354 ns/op
Iteration   6: 164.574 ns/op
Iteration   7: 164.211 ns/op
Iteration   8: 164.279 ns/op
Iteration   9: 164.254 ns/op
Iteration  10: 164.359 ns/op
Iteration  11: 164.254 ns/op
Iteration  12: 163.423 ns/op
Iteration  13: 164.339 ns/op
Iteration  14: 163.798 ns/op
Iteration  15: 163.880 ns/op
Iteration  16: 163.864 ns/op
Iteration  17: 163.887 ns/op
Iteration  18: 163.837 ns/op
Iteration  19: 163.776 ns/op
Iteration  20: 164.075 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 239.500 ns/op
# Warmup Iteration   2: 187.364 ns/op
# Warmup Iteration   3: 159.828 ns/op
# Warmup Iteration   4: 160.508 ns/op
# Warmup Iteration   5: 161.001 ns/op
Iteration   1: 161.845 ns/op
Iteration   2: 162.757 ns/op
Iteration   3: 159.052 ns/op
Iteration   4: 158.970 ns/op
Iteration   5: 159.085 ns/op
Iteration   6: 159.020 ns/op
Iteration   7: 158.965 ns/op
Iteration   8: 159.000 ns/op
Iteration   9: 158.951 ns/op
Iteration  10: 158.953 ns/op
Iteration  11: 159.148 ns/op
Iteration  12: 158.542 ns/op
Iteration  13: 158.801 ns/op
Iteration  14: 158.619 ns/op
Iteration  15: 159.176 ns/op
Iteration  16: 160.236 ns/op
Iteration  17: 158.857 ns/op
Iteration  18: 159.606 ns/op
Iteration  19: 159.040 ns/op
Iteration  20: 158.718 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 266.482 ns/op
# Warmup Iteration   2: 228.527 ns/op
# Warmup Iteration   3: 186.812 ns/op
# Warmup Iteration   4: 187.352 ns/op
# Warmup Iteration   5: 188.056 ns/op
Iteration   1: 189.099 ns/op
Iteration   2: 185.031 ns/op
Iteration   3: 190.077 ns/op
Iteration   4: 185.858 ns/op
Iteration   5: 185.724 ns/op
Iteration   6: 185.812 ns/op
Iteration   7: 186.288 ns/op
Iteration   8: 185.263 ns/op
Iteration   9: 186.292 ns/op
Iteration  10: 186.588 ns/op
Iteration  11: 186.387 ns/op
Iteration  12: 187.210 ns/op
Iteration  13: 190.163 ns/op
Iteration  14: 185.267 ns/op
Iteration  15: 185.630 ns/op
Iteration  16: 186.778 ns/op
Iteration  17: 185.606 ns/op
Iteration  18: 185.728 ns/op
Iteration  19: 185.521 ns/op
Iteration  20: 185.033 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 254.299 ns/op
# Warmup Iteration   2: 205.154 ns/op
# Warmup Iteration   3: 171.453 ns/op
# Warmup Iteration   4: 172.337 ns/op
# Warmup Iteration   5: 173.280 ns/op
Iteration   1: 173.755 ns/op
Iteration   2: 174.580 ns/op
Iteration   3: 170.632 ns/op
Iteration   4: 170.367 ns/op
Iteration   5: 170.973 ns/op
Iteration   6: 169.574 ns/op
Iteration   7: 170.473 ns/op
Iteration   8: 170.548 ns/op
Iteration   9: 170.746 ns/op
Iteration  10: 172.000 ns/op
Iteration  11: 171.034 ns/op
Iteration  12: 172.498 ns/op
Iteration  13: 170.141 ns/op
Iteration  14: 170.035 ns/op
Iteration  15: 170.186 ns/op
Iteration  16: 170.473 ns/op
Iteration  17: 170.361 ns/op
Iteration  18: 169.677 ns/op
Iteration  19: 170.113 ns/op
Iteration  20: 170.328 ns/op


Result "benchmark.StringContains.regexMatches":
  173.789 ±(99.9%) 3.909 ns/op [Average]
  (min, avg, max) = (158.542, 173.789, 191.849), stdev = 11.525
  CI (99.9%): [169.880, 177.697] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 0I!nPsTXKj@J:%T&,cK"W-VG.Fzds+{zH)k?OC)&	Ul
-jp1uo}GBg{;IQ|Ci)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.466 ns/op
# Warmup Iteration   2: 15.730 ns/op
# Warmup Iteration   3: 16.022 ns/op
# Warmup Iteration   4: 16.032 ns/op
# Warmup Iteration   5: 16.023 ns/op
Iteration   1: 16.022 ns/op
Iteration   2: 16.021 ns/op
Iteration   3: 16.022 ns/op
Iteration   4: 16.022 ns/op
Iteration   5: 16.023 ns/op
Iteration   6: 16.023 ns/op
Iteration   7: 16.022 ns/op
Iteration   8: 16.023 ns/op
Iteration   9: 16.020 ns/op
Iteration  10: 16.022 ns/op
Iteration  11: 16.022 ns/op
Iteration  12: 17.517 ns/op
Iteration  13: 17.516 ns/op
Iteration  14: 17.505 ns/op
Iteration  15: 17.516 ns/op
Iteration  16: 17.511 ns/op
Iteration  17: 17.517 ns/op
Iteration  18: 17.515 ns/op
Iteration  19: 17.517 ns/op
Iteration  20: 17.516 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.493 ns/op
# Warmup Iteration   2: 15.762 ns/op
# Warmup Iteration   3: 16.044 ns/op
# Warmup Iteration   4: 16.041 ns/op
# Warmup Iteration   5: 16.038 ns/op
Iteration   1: 16.038 ns/op
Iteration   2: 16.039 ns/op
Iteration   3: 16.039 ns/op
Iteration   4: 16.041 ns/op
Iteration   5: 16.040 ns/op
Iteration   6: 16.042 ns/op
Iteration   7: 16.039 ns/op
Iteration   8: 16.065 ns/op
Iteration   9: 16.038 ns/op
Iteration  10: 16.038 ns/op
Iteration  11: 16.045 ns/op
Iteration  12: 17.513 ns/op
Iteration  13: 17.519 ns/op
Iteration  14: 17.523 ns/op
Iteration  15: 17.518 ns/op
Iteration  16: 17.522 ns/op
Iteration  17: 17.518 ns/op
Iteration  18: 17.519 ns/op
Iteration  19: 17.520 ns/op
Iteration  20: 17.546 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.334 ns/op
# Warmup Iteration   2: 15.711 ns/op
# Warmup Iteration   3: 15.997 ns/op
# Warmup Iteration   4: 15.996 ns/op
# Warmup Iteration   5: 15.998 ns/op
Iteration   1: 15.998 ns/op
Iteration   2: 16.000 ns/op
Iteration   3: 15.997 ns/op
Iteration   4: 15.994 ns/op
Iteration   5: 16.001 ns/op
Iteration   6: 15.997 ns/op
Iteration   7: 15.999 ns/op
Iteration   8: 16.001 ns/op
Iteration   9: 16.000 ns/op
Iteration  10: 15.993 ns/op
Iteration  11: 15.998 ns/op
Iteration  12: 15.995 ns/op
Iteration  13: 15.997 ns/op
Iteration  14: 15.998 ns/op
Iteration  15: 16.000 ns/op
Iteration  16: 16.009 ns/op
Iteration  17: 16.002 ns/op
Iteration  18: 16.000 ns/op
Iteration  19: 15.997 ns/op
Iteration  20: 15.998 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.452 ns/op
# Warmup Iteration   2: 15.758 ns/op
# Warmup Iteration   3: 16.024 ns/op
# Warmup Iteration   4: 16.024 ns/op
# Warmup Iteration   5: 16.023 ns/op
Iteration   1: 16.024 ns/op
Iteration   2: 16.023 ns/op
Iteration   3: 16.024 ns/op
Iteration   4: 16.022 ns/op
Iteration   5: 16.024 ns/op
Iteration   6: 16.025 ns/op
Iteration   7: 16.023 ns/op
Iteration   8: 16.051 ns/op
Iteration   9: 16.024 ns/op
Iteration  10: 16.024 ns/op
Iteration  11: 16.025 ns/op
Iteration  12: 17.518 ns/op
Iteration  13: 17.519 ns/op
Iteration  14: 17.521 ns/op
Iteration  15: 17.518 ns/op
Iteration  16: 17.516 ns/op
Iteration  17: 17.519 ns/op
Iteration  18: 17.517 ns/op
Iteration  19: 17.520 ns/op
Iteration  20: 17.547 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.486 ns/op
# Warmup Iteration   2: 15.759 ns/op
# Warmup Iteration   3: 16.028 ns/op
# Warmup Iteration   4: 16.025 ns/op
# Warmup Iteration   5: 16.030 ns/op
Iteration   1: 16.026 ns/op
Iteration   2: 16.031 ns/op
Iteration   3: 16.311 ns/op
Iteration   4: 16.031 ns/op
Iteration   5: 16.028 ns/op
Iteration   6: 16.029 ns/op
Iteration   7: 16.028 ns/op
Iteration   8: 16.030 ns/op
Iteration   9: 16.025 ns/op
Iteration  10: 16.026 ns/op
Iteration  11: 16.032 ns/op
Iteration  12: 17.518 ns/op
Iteration  13: 17.519 ns/op
Iteration  14: 17.519 ns/op
Iteration  15: 17.518 ns/op
Iteration  16: 17.519 ns/op
Iteration  17: 17.518 ns/op
Iteration  18: 17.516 ns/op
Iteration  19: 17.518 ns/op
Iteration  20: 17.519 ns/op


Result "benchmark.StringContains.stringContains":
  16.563 ±(99.9%) 0.245 ns/op [Average]
  (min, avg, max) = (15.993, 16.563, 17.547), stdev = 0.722
  CI (99.9%): [16.318, 16.807] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  0I!nPsTXKj@J:%T&,cK"W-VG.Fzds+{zH)k?OC)&	Ul
-jp1uo}GBg{;IQ|Ci  avgt  100  173.789 ± 3.909  ns/op
StringContains.stringContains     http  0I!nPsTXKj@J:%T&,cK"W-VG.Fzds+{zH)k?OC)&	Ul
-jp1uo}GBg{;IQ|Ci  avgt  100   16.563 ± 0.245  ns/op

Benchmark result is saved to http_64_1_8.csv
