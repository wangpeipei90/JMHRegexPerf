# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpUB*>>(ONNQO~)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 335.487 ns/op
# Warmup Iteration   2: 341.181 ns/op
# Warmup Iteration   3: 259.327 ns/op
# Warmup Iteration   4: 257.878 ns/op
# Warmup Iteration   5: 259.677 ns/op
Iteration   1: 255.549 ns/op
Iteration   2: 261.396 ns/op
Iteration   3: 257.928 ns/op
Iteration   4: 259.326 ns/op
Iteration   5: 264.142 ns/op
Iteration   6: 255.600 ns/op
Iteration   7: 257.312 ns/op
Iteration   8: 257.122 ns/op
Iteration   9: 255.552 ns/op
Iteration  10: 256.918 ns/op
Iteration  11: 255.427 ns/op
Iteration  12: 256.804 ns/op
Iteration  13: 256.781 ns/op
Iteration  14: 255.561 ns/op
Iteration  15: 256.990 ns/op
Iteration  16: 255.657 ns/op
Iteration  17: 256.867 ns/op
Iteration  18: 258.420 ns/op
Iteration  19: 255.567 ns/op
Iteration  20: 260.248 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 332.300 ns/op
# Warmup Iteration   2: 337.643 ns/op
# Warmup Iteration   3: 256.838 ns/op
# Warmup Iteration   4: 256.248 ns/op
# Warmup Iteration   5: 257.209 ns/op
Iteration   1: 254.059 ns/op
Iteration   2: 258.512 ns/op
Iteration   3: 260.101 ns/op
Iteration   4: 253.970 ns/op
Iteration   5: 261.332 ns/op
Iteration   6: 254.197 ns/op
Iteration   7: 255.150 ns/op
Iteration   8: 255.570 ns/op
Iteration   9: 254.026 ns/op
Iteration  10: 254.854 ns/op
Iteration  11: 253.423 ns/op
Iteration  12: 255.022 ns/op
Iteration  13: 255.144 ns/op
Iteration  14: 253.928 ns/op
Iteration  15: 254.932 ns/op
Iteration  16: 254.010 ns/op
Iteration  17: 254.951 ns/op
Iteration  18: 255.087 ns/op
Iteration  19: 254.179 ns/op
Iteration  20: 255.924 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 344.338 ns/op
# Warmup Iteration   2: 337.907 ns/op
# Warmup Iteration   3: 259.866 ns/op
# Warmup Iteration   4: 257.228 ns/op
# Warmup Iteration   5: 258.721 ns/op
Iteration   1: 253.865 ns/op
Iteration   2: 258.173 ns/op
Iteration   3: 256.202 ns/op
Iteration   4: 257.654 ns/op
Iteration   5: 261.350 ns/op
Iteration   6: 253.977 ns/op
Iteration   7: 255.246 ns/op
Iteration   8: 255.139 ns/op
Iteration   9: 253.897 ns/op
Iteration  10: 254.921 ns/op
Iteration  11: 253.759 ns/op
Iteration  12: 254.913 ns/op
Iteration  13: 254.836 ns/op
Iteration  14: 253.785 ns/op
Iteration  15: 255.041 ns/op
Iteration  16: 253.977 ns/op
Iteration  17: 255.275 ns/op
Iteration  18: 256.117 ns/op
Iteration  19: 253.829 ns/op
Iteration  20: 255.775 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 334.129 ns/op
# Warmup Iteration   2: 344.950 ns/op
# Warmup Iteration   3: 258.894 ns/op
# Warmup Iteration   4: 257.788 ns/op
# Warmup Iteration   5: 260.395 ns/op
Iteration   1: 255.178 ns/op
Iteration   2: 259.468 ns/op
Iteration   3: 257.749 ns/op
Iteration   4: 259.435 ns/op
Iteration   5: 262.655 ns/op
Iteration   6: 255.150 ns/op
Iteration   7: 256.654 ns/op
Iteration   8: 256.357 ns/op
Iteration   9: 255.135 ns/op
Iteration  10: 256.192 ns/op
Iteration  11: 255.070 ns/op
Iteration  12: 257.853 ns/op
Iteration  13: 256.582 ns/op
Iteration  14: 254.950 ns/op
Iteration  15: 256.600 ns/op
Iteration  16: 254.939 ns/op
Iteration  17: 256.427 ns/op
Iteration  18: 256.016 ns/op
Iteration  19: 254.972 ns/op
Iteration  20: 256.570 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 337.083 ns/op
# Warmup Iteration   2: 346.108 ns/op
# Warmup Iteration   3: 260.743 ns/op
# Warmup Iteration   4: 258.013 ns/op
# Warmup Iteration   5: 259.246 ns/op
Iteration   1: 255.795 ns/op
Iteration   2: 260.198 ns/op
Iteration   3: 255.807 ns/op
Iteration   4: 262.561 ns/op
Iteration   5: 263.519 ns/op
Iteration   6: 255.798 ns/op
Iteration   7: 258.127 ns/op
Iteration   8: 255.557 ns/op
Iteration   9: 256.718 ns/op
Iteration  10: 257.111 ns/op
Iteration  11: 255.184 ns/op
Iteration  12: 256.998 ns/op
Iteration  13: 258.851 ns/op
Iteration  14: 255.554 ns/op
Iteration  15: 256.903 ns/op
Iteration  16: 255.325 ns/op
Iteration  17: 256.857 ns/op
Iteration  18: 261.562 ns/op
Iteration  19: 255.313 ns/op
Iteration  20: 260.816 ns/op


Result "benchmark.StringContains.regexMatches":
  256.538 ±(99.9%) 0.801 ns/op [Average]
  (min, avg, max) = (253.423, 256.538, 264.142), stdev = 2.363
  CI (99.9%): [255.736, 257.339] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpUB*>>(ONNQO~)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.187 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.973 ns/op
# Warmup Iteration   4: 9.952 ns/op
# Warmup Iteration   5: 9.970 ns/op
Iteration   1: 9.954 ns/op
Iteration   2: 9.977 ns/op
Iteration   3: 9.954 ns/op
Iteration   4: 9.964 ns/op
Iteration   5: 9.967 ns/op
Iteration   6: 9.956 ns/op
Iteration   7: 9.979 ns/op
Iteration   8: 9.950 ns/op
Iteration   9: 9.957 ns/op
Iteration  10: 9.963 ns/op
Iteration  11: 9.950 ns/op
Iteration  12: 9.966 ns/op
Iteration  13: 9.978 ns/op
Iteration  14: 9.967 ns/op
Iteration  15: 9.962 ns/op
Iteration  16: 9.964 ns/op
Iteration  17: 9.965 ns/op
Iteration  18: 9.966 ns/op
Iteration  19: 9.959 ns/op
Iteration  20: 9.971 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.202 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.884 ns/op
# Warmup Iteration   4: 9.889 ns/op
# Warmup Iteration   5: 9.868 ns/op
Iteration   1: 9.866 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.850 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.859 ns/op
Iteration   6: 9.871 ns/op
Iteration   7: 9.859 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.864 ns/op
Iteration  14: 9.873 ns/op
Iteration  15: 9.873 ns/op
Iteration  16: 9.873 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.880 ns/op
Iteration  19: 9.878 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.464 ns/op
# Warmup Iteration   2: 9.718 ns/op
# Warmup Iteration   3: 9.850 ns/op
# Warmup Iteration   4: 9.845 ns/op
# Warmup Iteration   5: 9.848 ns/op
Iteration   1: 9.850 ns/op
Iteration   2: 9.839 ns/op
Iteration   3: 9.848 ns/op
Iteration   4: 9.843 ns/op
Iteration   5: 9.853 ns/op
Iteration   6: 9.859 ns/op
Iteration   7: 9.864 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.863 ns/op
Iteration  10: 9.852 ns/op
Iteration  11: 9.846 ns/op
Iteration  12: 9.849 ns/op
Iteration  13: 9.847 ns/op
Iteration  14: 9.846 ns/op
Iteration  15: 9.859 ns/op
Iteration  16: 9.844 ns/op
Iteration  17: 9.849 ns/op
Iteration  18: 9.842 ns/op
Iteration  19: 9.840 ns/op
Iteration  20: 9.857 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.192 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.866 ns/op
# Warmup Iteration   4: 9.859 ns/op
# Warmup Iteration   5: 9.872 ns/op
Iteration   1: 9.860 ns/op
Iteration   2: 9.847 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.854 ns/op
Iteration   7: 9.849 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.845 ns/op
Iteration  10: 9.855 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.874 ns/op
Iteration  14: 9.865 ns/op
Iteration  15: 9.869 ns/op
Iteration  16: 9.878 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.864 ns/op
Iteration  19: 9.870 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.205 ns/op
# Warmup Iteration   2: 9.756 ns/op
# Warmup Iteration   3: 9.859 ns/op
# Warmup Iteration   4: 9.868 ns/op
# Warmup Iteration   5: 9.881 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.882 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.879 ns/op
Iteration   6: 9.866 ns/op
Iteration   7: 9.889 ns/op
Iteration   8: 9.885 ns/op
Iteration   9: 9.854 ns/op
Iteration  10: 9.884 ns/op
Iteration  11: 9.883 ns/op
Iteration  12: 9.874 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.884 ns/op
Iteration  15: 9.894 ns/op
Iteration  16: 9.886 ns/op
Iteration  17: 9.871 ns/op
Iteration  18: 9.876 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.891 ns/op


Result "benchmark.StringContains.stringContains":
  9.884 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (9.839, 9.884, 9.979), stdev = 0.042
  CI (99.9%): [9.870, 9.899] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpUB*>>(ONNQO~  avgt  100  256.538 ± 0.801  ns/op
StringContains.stringContains     http  httpUB*>>(ONNQO~  avgt  100    9.884 ± 0.014  ns/op

Benchmark result is saved to http_16_0_12.csv
