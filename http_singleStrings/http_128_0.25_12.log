# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = >9*OyG;'*WF
I1c	~0^ZF~Go!U$o@H<httpGJr,Eq[WF[Q^vc,*c "I:#:a;Nr4l	-LY%~4_2UsP@]S-O>-IvK=midq#mnm6k61@aha#"Ytv-w%k3j]=Eh^'p#>)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1167.749 ns/op
# Warmup Iteration   2: 1175.385 ns/op
# Warmup Iteration   3: 1191.087 ns/op
# Warmup Iteration   4: 1191.193 ns/op
# Warmup Iteration   5: 1190.929 ns/op
Iteration   1: 1190.058 ns/op
Iteration   2: 1190.228 ns/op
Iteration   3: 1130.653 ns/op
Iteration   4: 1114.167 ns/op
Iteration   5: 1114.925 ns/op
Iteration   6: 1114.679 ns/op
Iteration   7: 1114.439 ns/op
Iteration   8: 1114.948 ns/op
Iteration   9: 1123.289 ns/op
Iteration  10: 1111.688 ns/op
Iteration  11: 1111.990 ns/op
Iteration  12: 1111.301 ns/op
Iteration  13: 1111.214 ns/op
Iteration  14: 1111.435 ns/op
Iteration  15: 1125.857 ns/op
Iteration  16: 1111.601 ns/op
Iteration  17: 1110.400 ns/op
Iteration  18: 1111.442 ns/op
Iteration  19: 1111.000 ns/op
Iteration  20: 1112.192 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1153.253 ns/op
# Warmup Iteration   2: 1165.732 ns/op
# Warmup Iteration   3: 1187.592 ns/op
# Warmup Iteration   4: 1186.971 ns/op
# Warmup Iteration   5: 1186.207 ns/op
Iteration   1: 1186.947 ns/op
Iteration   2: 1186.508 ns/op
Iteration   3: 1124.075 ns/op
Iteration   4: 1110.525 ns/op
Iteration   5: 1110.669 ns/op
Iteration   6: 1110.660 ns/op
Iteration   7: 1110.487 ns/op
Iteration   8: 1110.571 ns/op
Iteration   9: 1128.354 ns/op
Iteration  10: 1110.172 ns/op
Iteration  11: 1110.721 ns/op
Iteration  12: 1111.577 ns/op
Iteration  13: 1112.685 ns/op
Iteration  14: 1112.433 ns/op
Iteration  15: 1126.490 ns/op
Iteration  16: 1109.995 ns/op
Iteration  17: 1110.235 ns/op
Iteration  18: 1110.474 ns/op
Iteration  19: 1110.320 ns/op
Iteration  20: 1110.416 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1150.455 ns/op
# Warmup Iteration   2: 1164.061 ns/op
# Warmup Iteration   3: 1182.940 ns/op
# Warmup Iteration   4: 1183.128 ns/op
# Warmup Iteration   5: 1182.769 ns/op
Iteration   1: 1182.920 ns/op
Iteration   2: 1182.757 ns/op
Iteration   3: 1122.467 ns/op
Iteration   4: 1108.484 ns/op
Iteration   5: 1108.934 ns/op
Iteration   6: 1108.668 ns/op
Iteration   7: 1108.696 ns/op
Iteration   8: 1109.785 ns/op
Iteration   9: 1119.203 ns/op
Iteration  10: 1108.787 ns/op
Iteration  11: 1107.622 ns/op
Iteration  12: 1107.209 ns/op
Iteration  13: 1106.660 ns/op
Iteration  14: 1106.997 ns/op
Iteration  15: 1121.074 ns/op
Iteration  16: 1106.989 ns/op
Iteration  17: 1107.117 ns/op
Iteration  18: 1106.799 ns/op
Iteration  19: 1106.620 ns/op
Iteration  20: 1108.291 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1148.573 ns/op
# Warmup Iteration   2: 1165.493 ns/op
# Warmup Iteration   3: 1186.652 ns/op
# Warmup Iteration   4: 1186.215 ns/op
# Warmup Iteration   5: 1186.018 ns/op
Iteration   1: 1186.109 ns/op
Iteration   2: 1186.159 ns/op
Iteration   3: 1125.654 ns/op
Iteration   4: 1112.199 ns/op
Iteration   5: 1111.880 ns/op
Iteration   6: 1111.683 ns/op
Iteration   7: 1111.610 ns/op
Iteration   8: 1111.754 ns/op
Iteration   9: 1122.196 ns/op
Iteration  10: 1111.644 ns/op
Iteration  11: 1111.743 ns/op
Iteration  12: 1111.532 ns/op
Iteration  13: 1111.467 ns/op
Iteration  14: 1112.041 ns/op
Iteration  15: 1126.882 ns/op
Iteration  16: 1112.101 ns/op
Iteration  17: 1112.475 ns/op
Iteration  18: 1112.388 ns/op
Iteration  19: 1111.836 ns/op
Iteration  20: 1112.032 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1117.693 ns/op
# Warmup Iteration   2: 1103.167 ns/op
# Warmup Iteration   3: 1255.504 ns/op
# Warmup Iteration   4: 1256.405 ns/op
# Warmup Iteration   5: 1258.314 ns/op
Iteration   1: 1257.900 ns/op
Iteration   2: 1258.454 ns/op
Iteration   3: 1213.000 ns/op
Iteration   4: 1180.909 ns/op
Iteration   5: 1181.379 ns/op
Iteration   6: 1181.263 ns/op
Iteration   7: 1182.194 ns/op
Iteration   8: 1194.435 ns/op
Iteration   9: 1199.940 ns/op
Iteration  10: 1180.979 ns/op
Iteration  11: 1181.035 ns/op
Iteration  12: 1181.941 ns/op
Iteration  13: 1181.794 ns/op
Iteration  14: 1182.080 ns/op
Iteration  15: 1182.700 ns/op
Iteration  16: 1198.546 ns/op
Iteration  17: 1182.037 ns/op
Iteration  18: 1181.676 ns/op
Iteration  19: 1181.466 ns/op
Iteration  20: 1181.619 ns/op


Result "benchmark.StringContains.regexMatches":
  1134.986 ±(99.9%) 12.609 ns/op [Average]
  (min, avg, max) = (1106.620, 1134.986, 1258.454), stdev = 37.178
  CI (99.9%): [1122.377, 1147.595] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = >9*OyG;'*WF
I1c	~0^ZF~Go!U$o@H<httpGJr,Eq[WF[Q^vc,*c "I:#:a;Nr4l	-LY%~4_2UsP@]S-O>-IvK=midq#mnm6k61@aha#"Ytv-w%k3j]=Eh^'p#>)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.681 ns/op
# Warmup Iteration   2: 14.736 ns/op
# Warmup Iteration   3: 14.364 ns/op
# Warmup Iteration   4: 14.357 ns/op
# Warmup Iteration   5: 14.361 ns/op
Iteration   1: 14.383 ns/op
Iteration   2: 14.366 ns/op
Iteration   3: 14.365 ns/op
Iteration   4: 14.341 ns/op
Iteration   5: 14.367 ns/op
Iteration   6: 14.357 ns/op
Iteration   7: 14.360 ns/op
Iteration   8: 14.355 ns/op
Iteration   9: 14.363 ns/op
Iteration  10: 14.366 ns/op
Iteration  11: 14.358 ns/op
Iteration  12: 14.368 ns/op
Iteration  13: 14.366 ns/op
Iteration  14: 14.334 ns/op
Iteration  15: 14.353 ns/op
Iteration  16: 14.358 ns/op
Iteration  17: 14.371 ns/op
Iteration  18: 14.363 ns/op
Iteration  19: 14.370 ns/op
Iteration  20: 14.355 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.740 ns/op
# Warmup Iteration   2: 14.728 ns/op
# Warmup Iteration   3: 14.730 ns/op
# Warmup Iteration   4: 14.700 ns/op
# Warmup Iteration   5: 14.723 ns/op
Iteration   1: 14.725 ns/op
Iteration   2: 14.709 ns/op
Iteration   3: 14.716 ns/op
Iteration   4: 14.733 ns/op
Iteration   5: 14.718 ns/op
Iteration   6: 14.753 ns/op
Iteration   7: 14.722 ns/op
Iteration   8: 14.759 ns/op
Iteration   9: 14.728 ns/op
Iteration  10: 14.789 ns/op
Iteration  11: 14.698 ns/op
Iteration  12: 14.746 ns/op
Iteration  13: 14.677 ns/op
Iteration  14: 14.708 ns/op
Iteration  15: 14.682 ns/op
Iteration  16: 14.689 ns/op
Iteration  17: 14.688 ns/op
Iteration  18: 14.756 ns/op
Iteration  19: 14.733 ns/op
Iteration  20: 14.771 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.648 ns/op
# Warmup Iteration   2: 14.710 ns/op
# Warmup Iteration   3: 14.314 ns/op
# Warmup Iteration   4: 14.314 ns/op
# Warmup Iteration   5: 14.303 ns/op
Iteration   1: 14.320 ns/op
Iteration   2: 14.325 ns/op
Iteration   3: 14.314 ns/op
Iteration   4: 14.304 ns/op
Iteration   5: 14.304 ns/op
Iteration   6: 14.311 ns/op
Iteration   7: 14.307 ns/op
Iteration   8: 14.304 ns/op
Iteration   9: 14.309 ns/op
Iteration  10: 14.312 ns/op
Iteration  11: 14.313 ns/op
Iteration  12: 14.662 ns/op
Iteration  13: 14.663 ns/op
Iteration  14: 14.659 ns/op
Iteration  15: 14.672 ns/op
Iteration  16: 14.661 ns/op
Iteration  17: 14.666 ns/op
Iteration  18: 14.659 ns/op
Iteration  19: 14.672 ns/op
Iteration  20: 14.660 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.660 ns/op
# Warmup Iteration   2: 14.854 ns/op
# Warmup Iteration   3: 14.778 ns/op
# Warmup Iteration   4: 14.744 ns/op
# Warmup Iteration   5: 14.827 ns/op
Iteration   1: 14.742 ns/op
Iteration   2: 14.823 ns/op
Iteration   3: 14.775 ns/op
Iteration   4: 14.793 ns/op
Iteration   5: 14.762 ns/op
Iteration   6: 14.770 ns/op
Iteration   7: 14.780 ns/op
Iteration   8: 14.793 ns/op
Iteration   9: 14.830 ns/op
Iteration  10: 14.789 ns/op
Iteration  11: 14.838 ns/op
Iteration  12: 15.008 ns/op
Iteration  13: 14.975 ns/op
Iteration  14: 15.002 ns/op
Iteration  15: 15.012 ns/op
Iteration  16: 14.991 ns/op
Iteration  17: 14.965 ns/op
Iteration  18: 14.964 ns/op
Iteration  19: 14.989 ns/op
Iteration  20: 14.966 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.748 ns/op
# Warmup Iteration   2: 14.710 ns/op
# Warmup Iteration   3: 14.322 ns/op
# Warmup Iteration   4: 14.312 ns/op
# Warmup Iteration   5: 14.328 ns/op
Iteration   1: 14.307 ns/op
Iteration   2: 14.325 ns/op
Iteration   3: 14.310 ns/op
Iteration   4: 14.288 ns/op
Iteration   5: 14.316 ns/op
Iteration   6: 14.303 ns/op
Iteration   7: 14.325 ns/op
Iteration   8: 14.287 ns/op
Iteration   9: 14.304 ns/op
Iteration  10: 14.287 ns/op
Iteration  11: 14.305 ns/op
Iteration  12: 14.313 ns/op
Iteration  13: 14.299 ns/op
Iteration  14: 14.306 ns/op
Iteration  15: 14.302 ns/op
Iteration  16: 14.312 ns/op
Iteration  17: 14.314 ns/op
Iteration  18: 14.312 ns/op
Iteration  19: 14.312 ns/op
Iteration  20: 14.291 ns/op


Result "benchmark.StringContains.stringContains":
  14.548 ±(99.9%) 0.081 ns/op [Average]
  (min, avg, max) = (14.287, 14.548, 15.012), stdev = 0.239
  CI (99.9%): [14.467, 14.629] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  >9*OyG;'*WF
I1c	~0^ZF~Go!U$o@H<httpGJr,Eq[WF[Q^vc,*c "I:#:a;Nr4l	-LY%~4_2UsP@]S-O>-IvK=midq#mnm6k61@aha#"Ytv-w%k3j]=Eh^'p#>  avgt  100  1134.986 ± 12.609  ns/op
StringContains.stringContains     http  >9*OyG;'*WF
I1c	~0^ZF~Go!U$o@H<httpGJr,Eq[WF[Q^vc,*c "I:#:a;Nr4l	-LY%~4_2UsP@]S-O>-IvK=midq#mnm6k61@aha#"Ytv-w%k3j]=Eh^'p#>  avgt  100    14.548 ±  0.081  ns/op

Benchmark result is saved to http_128_0.25_12.csv
