# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = =n%^>|\9`/fC"0rZ>R@}!&G%m\h6shttpK[BP_(6_9.[K;g%D&
lrmDbChtVQP5JC#`L]q^~"D;
f
ko^]k)4tyO`Zh6SE@fn%vsdW\P!7*/ %_x+b3@G -2A
98)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1219.826 ns/op
# Warmup Iteration   2: 1225.980 ns/op
# Warmup Iteration   3: 1252.272 ns/op
# Warmup Iteration   4: 1252.511 ns/op
# Warmup Iteration   5: 1251.412 ns/op
Iteration   1: 1251.260 ns/op
Iteration   2: 1250.880 ns/op
Iteration   3: 1216.137 ns/op
Iteration   4: 1169.700 ns/op
Iteration   5: 1169.170 ns/op
Iteration   6: 1169.583 ns/op
Iteration   7: 1168.855 ns/op
Iteration   8: 1168.774 ns/op
Iteration   9: 1168.915 ns/op
Iteration  10: 1179.997 ns/op
Iteration  11: 1167.876 ns/op
Iteration  12: 1168.872 ns/op
Iteration  13: 1169.413 ns/op
Iteration  14: 1169.386 ns/op
Iteration  15: 1169.332 ns/op
Iteration  16: 1185.289 ns/op
Iteration  17: 1173.857 ns/op
Iteration  18: 1175.100 ns/op
Iteration  19: 1173.673 ns/op
Iteration  20: 1173.277 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1218.768 ns/op
# Warmup Iteration   2: 1226.907 ns/op
# Warmup Iteration   3: 1251.813 ns/op
# Warmup Iteration   4: 1252.176 ns/op
# Warmup Iteration   5: 1251.706 ns/op
Iteration   1: 1251.793 ns/op
Iteration   2: 1251.253 ns/op
Iteration   3: 1220.057 ns/op
Iteration   4: 1175.984 ns/op
Iteration   5: 1176.244 ns/op
Iteration   6: 1176.018 ns/op
Iteration   7: 1175.540 ns/op
Iteration   8: 1175.754 ns/op
Iteration   9: 1175.722 ns/op
Iteration  10: 1187.050 ns/op
Iteration  11: 1175.491 ns/op
Iteration  12: 1174.226 ns/op
Iteration  13: 1173.958 ns/op
Iteration  14: 1174.246 ns/op
Iteration  15: 1174.074 ns/op
Iteration  16: 1188.915 ns/op
Iteration  17: 1174.854 ns/op
Iteration  18: 1174.648 ns/op
Iteration  19: 1174.494 ns/op
Iteration  20: 1175.129 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1220.146 ns/op
# Warmup Iteration   2: 1222.846 ns/op
# Warmup Iteration   3: 1250.508 ns/op
# Warmup Iteration   4: 1250.316 ns/op
# Warmup Iteration   5: 1249.978 ns/op
Iteration   1: 1250.237 ns/op
Iteration   2: 1249.746 ns/op
Iteration   3: 1219.595 ns/op
Iteration   4: 1177.726 ns/op
Iteration   5: 1177.949 ns/op
Iteration   6: 1177.377 ns/op
Iteration   7: 1177.853 ns/op
Iteration   8: 1176.883 ns/op
Iteration   9: 1176.105 ns/op
Iteration  10: 1186.392 ns/op
Iteration  11: 1175.647 ns/op
Iteration  12: 1174.710 ns/op
Iteration  13: 1174.529 ns/op
Iteration  14: 1174.255 ns/op
Iteration  15: 1174.194 ns/op
Iteration  16: 1189.404 ns/op
Iteration  17: 1175.048 ns/op
Iteration  18: 1175.088 ns/op
Iteration  19: 1174.994 ns/op
Iteration  20: 1175.038 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1227.157 ns/op
# Warmup Iteration   2: 1223.139 ns/op
# Warmup Iteration   3: 1250.728 ns/op
# Warmup Iteration   4: 1250.229 ns/op
# Warmup Iteration   5: 1250.348 ns/op
Iteration   1: 1250.320 ns/op
Iteration   2: 1250.493 ns/op
Iteration   3: 1216.603 ns/op
Iteration   4: 1174.772 ns/op
Iteration   5: 1174.780 ns/op
Iteration   6: 1174.538 ns/op
Iteration   7: 1174.775 ns/op
Iteration   8: 1174.567 ns/op
Iteration   9: 1174.657 ns/op
Iteration  10: 1185.922 ns/op
Iteration  11: 1174.559 ns/op
Iteration  12: 1173.822 ns/op
Iteration  13: 1174.150 ns/op
Iteration  14: 1173.815 ns/op
Iteration  15: 1173.851 ns/op
Iteration  16: 1188.690 ns/op
Iteration  17: 1173.351 ns/op
Iteration  18: 1173.326 ns/op
Iteration  19: 1173.451 ns/op
Iteration  20: 1173.283 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1206.573 ns/op
# Warmup Iteration   2: 1170.829 ns/op
# Warmup Iteration   3: 1326.447 ns/op
# Warmup Iteration   4: 1325.813 ns/op
# Warmup Iteration   5: 1325.389 ns/op
Iteration   1: 1325.275 ns/op
Iteration   2: 1325.516 ns/op
Iteration   3: 1313.351 ns/op
Iteration   4: 1252.049 ns/op
Iteration   5: 1251.253 ns/op
Iteration   6: 1251.244 ns/op
Iteration   7: 1251.467 ns/op
Iteration   8: 1251.325 ns/op
Iteration   9: 1250.936 ns/op
Iteration  10: 1268.059 ns/op
Iteration  11: 1250.752 ns/op
Iteration  12: 1251.779 ns/op
Iteration  13: 1253.893 ns/op
Iteration  14: 1253.174 ns/op
Iteration  15: 1253.243 ns/op
Iteration  16: 1252.714 ns/op
Iteration  17: 1267.979 ns/op
Iteration  18: 1252.521 ns/op
Iteration  19: 1251.722 ns/op
Iteration  20: 1251.589 ns/op


Result "benchmark.StringContains.regexMatches":
  1200.811 ±(99.9%) 13.586 ns/op [Average]
  (min, avg, max) = (1167.876, 1200.811, 1325.516), stdev = 40.060
  CI (99.9%): [1187.225, 1214.398] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = =n%^>|\9`/fC"0rZ>R@}!&G%m\h6shttpK[BP_(6_9.[K;g%D&
lrmDbChtVQP5JC#`L]q^~"D;
f
ko^]k)4tyO`Zh6SE@fn%vsdW\P!7*/ %_x+b3@G -2A
98)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.657 ns/op
# Warmup Iteration   2: 14.715 ns/op
# Warmup Iteration   3: 14.303 ns/op
# Warmup Iteration   4: 14.296 ns/op
# Warmup Iteration   5: 14.298 ns/op
Iteration   1: 14.303 ns/op
Iteration   2: 14.297 ns/op
Iteration   3: 14.294 ns/op
Iteration   4: 14.304 ns/op
Iteration   5: 14.297 ns/op
Iteration   6: 14.294 ns/op
Iteration   7: 14.290 ns/op
Iteration   8: 14.295 ns/op
Iteration   9: 14.304 ns/op
Iteration  10: 14.294 ns/op
Iteration  11: 14.313 ns/op
Iteration  12: 14.664 ns/op
Iteration  13: 14.664 ns/op
Iteration  14: 14.659 ns/op
Iteration  15: 14.666 ns/op
Iteration  16: 14.652 ns/op
Iteration  17: 14.661 ns/op
Iteration  18: 14.664 ns/op
Iteration  19: 14.661 ns/op
Iteration  20: 14.662 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.698 ns/op
# Warmup Iteration   2: 14.790 ns/op
# Warmup Iteration   3: 14.308 ns/op
# Warmup Iteration   4: 14.312 ns/op
# Warmup Iteration   5: 14.306 ns/op
Iteration   1: 14.320 ns/op
Iteration   2: 14.288 ns/op
Iteration   3: 14.298 ns/op
Iteration   4: 14.310 ns/op
Iteration   5: 14.308 ns/op
Iteration   6: 14.313 ns/op
Iteration   7: 14.306 ns/op
Iteration   8: 14.311 ns/op
Iteration   9: 14.320 ns/op
Iteration  10: 14.307 ns/op
Iteration  11: 14.307 ns/op
Iteration  12: 14.303 ns/op
Iteration  13: 14.298 ns/op
Iteration  14: 14.293 ns/op
Iteration  15: 14.305 ns/op
Iteration  16: 14.307 ns/op
Iteration  17: 14.305 ns/op
Iteration  18: 14.295 ns/op
Iteration  19: 14.295 ns/op
Iteration  20: 14.307 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.679 ns/op
# Warmup Iteration   2: 14.774 ns/op
# Warmup Iteration   3: 14.820 ns/op
# Warmup Iteration   4: 14.732 ns/op
# Warmup Iteration   5: 14.695 ns/op
Iteration   1: 14.756 ns/op
Iteration   2: 14.774 ns/op
Iteration   3: 14.795 ns/op
Iteration   4: 14.756 ns/op
Iteration   5: 14.764 ns/op
Iteration   6: 14.732 ns/op
Iteration   7: 14.759 ns/op
Iteration   8: 14.809 ns/op
Iteration   9: 14.753 ns/op
Iteration  10: 14.818 ns/op
Iteration  11: 14.736 ns/op
Iteration  12: 14.933 ns/op
Iteration  13: 14.931 ns/op
Iteration  14: 14.947 ns/op
Iteration  15: 14.987 ns/op
Iteration  16: 14.931 ns/op
Iteration  17: 14.961 ns/op
Iteration  18: 14.964 ns/op
Iteration  19: 14.884 ns/op
Iteration  20: 14.925 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.750 ns/op
# Warmup Iteration   2: 14.697 ns/op
# Warmup Iteration   3: 14.722 ns/op
# Warmup Iteration   4: 14.753 ns/op
# Warmup Iteration   5: 14.750 ns/op
Iteration   1: 14.764 ns/op
Iteration   2: 14.761 ns/op
Iteration   3: 14.754 ns/op
Iteration   4: 14.759 ns/op
Iteration   5: 14.724 ns/op
Iteration   6: 14.758 ns/op
Iteration   7: 14.792 ns/op
Iteration   8: 14.798 ns/op
Iteration   9: 14.770 ns/op
Iteration  10: 14.728 ns/op
Iteration  11: 14.765 ns/op
Iteration  12: 14.803 ns/op
Iteration  13: 14.744 ns/op
Iteration  14: 14.756 ns/op
Iteration  15: 14.785 ns/op
Iteration  16: 14.804 ns/op
Iteration  17: 14.730 ns/op
Iteration  18: 14.724 ns/op
Iteration  19: 14.790 ns/op
Iteration  20: 14.715 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.712 ns/op
# Warmup Iteration   2: 14.729 ns/op
# Warmup Iteration   3: 14.283 ns/op
# Warmup Iteration   4: 14.296 ns/op
# Warmup Iteration   5: 14.277 ns/op
Iteration   1: 14.263 ns/op
Iteration   2: 14.268 ns/op
Iteration   3: 14.273 ns/op
Iteration   4: 14.277 ns/op
Iteration   5: 14.304 ns/op
Iteration   6: 14.269 ns/op
Iteration   7: 14.287 ns/op
Iteration   8: 14.276 ns/op
Iteration   9: 14.286 ns/op
Iteration  10: 14.268 ns/op
Iteration  11: 14.279 ns/op
Iteration  12: 14.288 ns/op
Iteration  13: 14.285 ns/op
Iteration  14: 14.269 ns/op
Iteration  15: 14.285 ns/op
Iteration  16: 14.274 ns/op
Iteration  17: 14.275 ns/op
Iteration  18: 14.295 ns/op
Iteration  19: 14.286 ns/op
Iteration  20: 14.276 ns/op


Result "benchmark.StringContains.stringContains":
  14.531 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (14.263, 14.531, 14.987), stdev = 0.251
  CI (99.9%): [14.445, 14.616] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  =n%^>|\9`/fC"0rZ>R@}!&G%m\h6shttpK[BP_(6_9.[K;g%D&
lrmDbChtVQP5JC#`L]q^~"D;
f
ko^]k)4tyO`Zh6SE@fn%vsdW\P!7*/ %_x+b3@G -2A
98  avgt  100  1200.811 ± 13.586  ns/op
StringContains.stringContains     http  =n%^>|\9`/fC"0rZ>R@}!&G%m\h6shttpK[BP_(6_9.[K;g%D&
lrmDbChtVQP5JC#`L]q^~"D;
f
ko^]k)4tyO`Zh6SE@fn%vsdW\P!7*/ %_x+b3@G -2A
98  avgt  100    14.531 ±  0.085  ns/op

Benchmark result is saved to http_128_0.25_9.csv
