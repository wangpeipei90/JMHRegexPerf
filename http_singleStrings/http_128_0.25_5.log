# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ZO{$#J;WhTGwC([Z}/3aJyJZiM$o ZPhttp;Dt;UOHMGNF+Rdj3sG'&!q]P%^_QpBBXP$e9(oZ8F0^eEc46^qh5O/?&ED+|w4/K[d#.
eC<D8dz{|8L<M7:2CiT{F)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1144.124 ns/op
# Warmup Iteration   2: 1129.192 ns/op
# Warmup Iteration   3: 1283.210 ns/op
# Warmup Iteration   4: 1280.844 ns/op
# Warmup Iteration   5: 1279.780 ns/op
Iteration   1: 1280.761 ns/op
Iteration   2: 1278.799 ns/op
Iteration   3: 1241.816 ns/op
Iteration   4: 1200.931 ns/op
Iteration   5: 1201.158 ns/op
Iteration   6: 1200.934 ns/op
Iteration   7: 1201.047 ns/op
Iteration   8: 1200.837 ns/op
Iteration   9: 1201.032 ns/op
Iteration  10: 1211.565 ns/op
Iteration  11: 1200.614 ns/op
Iteration  12: 1200.171 ns/op
Iteration  13: 1199.941 ns/op
Iteration  14: 1199.892 ns/op
Iteration  15: 1199.821 ns/op
Iteration  16: 1207.363 ns/op
Iteration  17: 1210.222 ns/op
Iteration  18: 1200.927 ns/op
Iteration  19: 1200.062 ns/op
Iteration  20: 1200.310 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1175.101 ns/op
# Warmup Iteration   2: 1181.082 ns/op
# Warmup Iteration   3: 1203.579 ns/op
# Warmup Iteration   4: 1203.290 ns/op
# Warmup Iteration   5: 1203.159 ns/op
Iteration   1: 1203.433 ns/op
Iteration   2: 1203.270 ns/op
Iteration   3: 1160.252 ns/op
Iteration   4: 1133.112 ns/op
Iteration   5: 1132.968 ns/op
Iteration   6: 1133.081 ns/op
Iteration   7: 1133.200 ns/op
Iteration   8: 1132.691 ns/op
Iteration   9: 1142.348 ns/op
Iteration  10: 1127.927 ns/op
Iteration  11: 1128.324 ns/op
Iteration  12: 1127.955 ns/op
Iteration  13: 1127.960 ns/op
Iteration  14: 1127.643 ns/op
Iteration  15: 1135.088 ns/op
Iteration  16: 1135.318 ns/op
Iteration  17: 1128.057 ns/op
Iteration  18: 1127.896 ns/op
Iteration  19: 1128.239 ns/op
Iteration  20: 1128.733 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1174.872 ns/op
# Warmup Iteration   2: 1182.854 ns/op
# Warmup Iteration   3: 1205.125 ns/op
# Warmup Iteration   4: 1207.107 ns/op
# Warmup Iteration   5: 1203.858 ns/op
Iteration   1: 1203.645 ns/op
Iteration   2: 1203.189 ns/op
Iteration   3: 1152.281 ns/op
Iteration   4: 1127.472 ns/op
Iteration   5: 1128.518 ns/op
Iteration   6: 1127.757 ns/op
Iteration   7: 1128.483 ns/op
Iteration   8: 1129.511 ns/op
Iteration   9: 1138.183 ns/op
Iteration  10: 1127.820 ns/op
Iteration  11: 1127.654 ns/op
Iteration  12: 1127.652 ns/op
Iteration  13: 1127.430 ns/op
Iteration  14: 1126.917 ns/op
Iteration  15: 1141.486 ns/op
Iteration  16: 1128.378 ns/op
Iteration  17: 1128.155 ns/op
Iteration  18: 1127.754 ns/op
Iteration  19: 1127.281 ns/op
Iteration  20: 1131.560 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1176.774 ns/op
# Warmup Iteration   2: 1181.044 ns/op
# Warmup Iteration   3: 1202.628 ns/op
# Warmup Iteration   4: 1202.692 ns/op
# Warmup Iteration   5: 1202.101 ns/op
Iteration   1: 1202.416 ns/op
Iteration   2: 1203.031 ns/op
Iteration   3: 1150.439 ns/op
Iteration   4: 1130.223 ns/op
Iteration   5: 1130.469 ns/op
Iteration   6: 1130.349 ns/op
Iteration   7: 1130.310 ns/op
Iteration   8: 1130.453 ns/op
Iteration   9: 1138.874 ns/op
Iteration  10: 1126.347 ns/op
Iteration  11: 1127.318 ns/op
Iteration  12: 1126.794 ns/op
Iteration  13: 1126.957 ns/op
Iteration  14: 1126.806 ns/op
Iteration  15: 1135.116 ns/op
Iteration  16: 1132.371 ns/op
Iteration  17: 1126.929 ns/op
Iteration  18: 1127.296 ns/op
Iteration  19: 1127.442 ns/op
Iteration  20: 1127.459 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1181.360 ns/op
# Warmup Iteration   2: 1182.188 ns/op
# Warmup Iteration   3: 1202.698 ns/op
# Warmup Iteration   4: 1202.184 ns/op
# Warmup Iteration   5: 1201.704 ns/op
Iteration   1: 1203.063 ns/op
Iteration   2: 1202.697 ns/op
Iteration   3: 1154.137 ns/op
Iteration   4: 1127.767 ns/op
Iteration   5: 1127.757 ns/op
Iteration   6: 1128.405 ns/op
Iteration   7: 1126.923 ns/op
Iteration   8: 1129.033 ns/op
Iteration   9: 1137.396 ns/op
Iteration  10: 1127.330 ns/op
Iteration  11: 1127.381 ns/op
Iteration  12: 1127.692 ns/op
Iteration  13: 1128.049 ns/op
Iteration  14: 1127.438 ns/op
Iteration  15: 1135.102 ns/op
Iteration  16: 1134.602 ns/op
Iteration  17: 1127.646 ns/op
Iteration  18: 1129.146 ns/op
Iteration  19: 1129.649 ns/op
Iteration  20: 1128.971 ns/op


Result "benchmark.StringContains.regexMatches":
  1153.144 ±(99.9%) 12.691 ns/op [Average]
  (min, avg, max) = (1126.347, 1153.144, 1280.761), stdev = 37.420
  CI (99.9%): [1140.453, 1165.835] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ZO{$#J;WhTGwC([Z}/3aJyJZiM$o ZPhttp;Dt;UOHMGNF+Rdj3sG'&!q]P%^_QpBBXP$e9(oZ8F0^eEc46^qh5O/?&ED+|w4/K[d#.
eC<D8dz{|8L<M7:2CiT{F)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.710 ns/op
# Warmup Iteration   2: 14.750 ns/op
# Warmup Iteration   3: 14.710 ns/op
# Warmup Iteration   4: 14.768 ns/op
# Warmup Iteration   5: 14.650 ns/op
Iteration   1: 14.742 ns/op
Iteration   2: 14.683 ns/op
Iteration   3: 14.653 ns/op
Iteration   4: 14.629 ns/op
Iteration   5: 14.727 ns/op
Iteration   6: 14.704 ns/op
Iteration   7: 14.692 ns/op
Iteration   8: 14.719 ns/op
Iteration   9: 14.713 ns/op
Iteration  10: 14.658 ns/op
Iteration  11: 14.687 ns/op
Iteration  12: 14.721 ns/op
Iteration  13: 14.649 ns/op
Iteration  14: 14.646 ns/op
Iteration  15: 14.644 ns/op
Iteration  16: 14.620 ns/op
Iteration  17: 14.692 ns/op
Iteration  18: 14.644 ns/op
Iteration  19: 14.667 ns/op
Iteration  20: 14.755 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.704 ns/op
# Warmup Iteration   2: 14.704 ns/op
# Warmup Iteration   3: 14.656 ns/op
# Warmup Iteration   4: 14.642 ns/op
# Warmup Iteration   5: 14.622 ns/op
Iteration   1: 14.656 ns/op
Iteration   2: 14.631 ns/op
Iteration   3: 14.679 ns/op
Iteration   4: 14.653 ns/op
Iteration   5: 14.644 ns/op
Iteration   6: 14.635 ns/op
Iteration   7: 14.649 ns/op
Iteration   8: 14.666 ns/op
Iteration   9: 14.678 ns/op
Iteration  10: 14.712 ns/op
Iteration  11: 14.713 ns/op
Iteration  12: 15.222 ns/op
Iteration  13: 15.224 ns/op
Iteration  14: 15.226 ns/op
Iteration  15: 15.233 ns/op
Iteration  16: 15.224 ns/op
Iteration  17: 15.227 ns/op
Iteration  18: 15.223 ns/op
Iteration  19: 15.232 ns/op
Iteration  20: 15.228 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.671 ns/op
# Warmup Iteration   2: 14.715 ns/op
# Warmup Iteration   3: 14.316 ns/op
# Warmup Iteration   4: 14.329 ns/op
# Warmup Iteration   5: 14.316 ns/op
Iteration   1: 14.314 ns/op
Iteration   2: 14.320 ns/op
Iteration   3: 14.307 ns/op
Iteration   4: 14.297 ns/op
Iteration   5: 14.313 ns/op
Iteration   6: 14.313 ns/op
Iteration   7: 14.307 ns/op
Iteration   8: 14.309 ns/op
Iteration   9: 14.317 ns/op
Iteration  10: 14.320 ns/op
Iteration  11: 14.300 ns/op
Iteration  12: 14.672 ns/op
Iteration  13: 14.667 ns/op
Iteration  14: 14.673 ns/op
Iteration  15: 14.672 ns/op
Iteration  16: 14.667 ns/op
Iteration  17: 14.670 ns/op
Iteration  18: 14.667 ns/op
Iteration  19: 14.663 ns/op
Iteration  20: 14.677 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.750 ns/op
# Warmup Iteration   2: 14.691 ns/op
# Warmup Iteration   3: 14.340 ns/op
# Warmup Iteration   4: 14.300 ns/op
# Warmup Iteration   5: 14.311 ns/op
Iteration   1: 14.320 ns/op
Iteration   2: 14.311 ns/op
Iteration   3: 14.322 ns/op
Iteration   4: 14.327 ns/op
Iteration   5: 14.306 ns/op
Iteration   6: 14.301 ns/op
Iteration   7: 14.336 ns/op
Iteration   8: 14.350 ns/op
Iteration   9: 14.319 ns/op
Iteration  10: 14.306 ns/op
Iteration  11: 14.311 ns/op
Iteration  12: 14.322 ns/op
Iteration  13: 14.327 ns/op
Iteration  14: 14.334 ns/op
Iteration  15: 14.319 ns/op
Iteration  16: 14.331 ns/op
Iteration  17: 14.336 ns/op
Iteration  18: 14.321 ns/op
Iteration  19: 14.308 ns/op
Iteration  20: 14.325 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.737 ns/op
# Warmup Iteration   2: 14.700 ns/op
# Warmup Iteration   3: 14.352 ns/op
# Warmup Iteration   4: 14.370 ns/op
# Warmup Iteration   5: 14.353 ns/op
Iteration   1: 14.348 ns/op
Iteration   2: 14.329 ns/op
Iteration   3: 14.357 ns/op
Iteration   4: 14.350 ns/op
Iteration   5: 14.364 ns/op
Iteration   6: 14.367 ns/op
Iteration   7: 14.365 ns/op
Iteration   8: 14.410 ns/op
Iteration   9: 14.379 ns/op
Iteration  10: 14.370 ns/op
Iteration  11: 14.367 ns/op
Iteration  12: 14.363 ns/op
Iteration  13: 14.351 ns/op
Iteration  14: 14.351 ns/op
Iteration  15: 14.354 ns/op
Iteration  16: 14.355 ns/op
Iteration  17: 14.341 ns/op
Iteration  18: 14.359 ns/op
Iteration  19: 14.366 ns/op
Iteration  20: 14.386 ns/op


Result "benchmark.StringContains.stringContains":
  14.551 ±(99.9%) 0.091 ns/op [Average]
  (min, avg, max) = (14.297, 14.551, 15.233), stdev = 0.269
  CI (99.9%): [14.460, 14.642] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  ZO{$#J;WhTGwC([Z}/3aJyJZiM$o ZPhttp;Dt;UOHMGNF+Rdj3sG'&!q]P%^_QpBBXP$e9(oZ8F0^eEc46^qh5O/?&ED+|w4/K[d#.
eC<D8dz{|8L<M7:2CiT{F  avgt  100  1153.144 ± 12.691  ns/op
StringContains.stringContains     http  ZO{$#J;WhTGwC([Z}/3aJyJZiM$o ZPhttp;Dt;UOHMGNF+Rdj3sG'&!q]P%^_QpBBXP$e9(oZ8F0^eEc46^qh5O/?&ED+|w4/K[d#.
eC<D8dz{|8L<M7:2CiT{F  avgt  100    14.551 ±  0.091  ns/op

Benchmark result is saved to http_128_0.25_5.csv
