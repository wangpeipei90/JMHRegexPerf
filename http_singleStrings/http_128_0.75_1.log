# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = "IP[O(~vb?DWc\:4e$
pL\pL(*)~^N^0;jL	3 `.dhfeF'\g?^}UD8k5/\.SPm]05_n$@t~m+?OCaE}rW=jO*xI>10RhttpN.I[#5!R] S]jE6W{vb"q3UmS&)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 523.538 ns/op
# Warmup Iteration   2: 536.527 ns/op
# Warmup Iteration   3: 537.345 ns/op
# Warmup Iteration   4: 476.041 ns/op
# Warmup Iteration   5: 455.998 ns/op
Iteration   1: 461.464 ns/op
Iteration   2: 456.689 ns/op
Iteration   3: 456.646 ns/op
Iteration   4: 462.710 ns/op
Iteration   5: 455.656 ns/op
Iteration   6: 456.048 ns/op
Iteration   7: 464.586 ns/op
Iteration   8: 456.869 ns/op
Iteration   9: 467.773 ns/op
Iteration  10: 456.802 ns/op
Iteration  11: 456.234 ns/op
Iteration  12: 471.593 ns/op
Iteration  13: 456.267 ns/op
Iteration  14: 455.997 ns/op
Iteration  15: 458.232 ns/op
Iteration  16: 456.261 ns/op
Iteration  17: 455.851 ns/op
Iteration  18: 458.873 ns/op
Iteration  19: 460.176 ns/op
Iteration  20: 460.922 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 506.633 ns/op
# Warmup Iteration   2: 492.420 ns/op
# Warmup Iteration   3: 543.651 ns/op
# Warmup Iteration   4: 477.883 ns/op
# Warmup Iteration   5: 468.940 ns/op
Iteration   1: 473.450 ns/op
Iteration   2: 468.849 ns/op
Iteration   3: 468.717 ns/op
Iteration   4: 475.400 ns/op
Iteration   5: 469.004 ns/op
Iteration   6: 469.415 ns/op
Iteration   7: 476.142 ns/op
Iteration   8: 468.631 ns/op
Iteration   9: 471.590 ns/op
Iteration  10: 476.462 ns/op
Iteration  11: 469.045 ns/op
Iteration  12: 471.754 ns/op
Iteration  13: 479.153 ns/op
Iteration  14: 468.484 ns/op
Iteration  15: 469.278 ns/op
Iteration  16: 472.009 ns/op
Iteration  17: 469.013 ns/op
Iteration  18: 469.572 ns/op
Iteration  19: 471.413 ns/op
Iteration  20: 469.360 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 512.175 ns/op
# Warmup Iteration   2: 517.194 ns/op
# Warmup Iteration   3: 517.582 ns/op
# Warmup Iteration   4: 453.870 ns/op
# Warmup Iteration   5: 443.923 ns/op
Iteration   1: 447.866 ns/op
Iteration   2: 443.973 ns/op
Iteration   3: 443.960 ns/op
Iteration   4: 448.652 ns/op
Iteration   5: 443.758 ns/op
Iteration   6: 450.612 ns/op
Iteration   7: 443.813 ns/op
Iteration   8: 443.878 ns/op
Iteration   9: 453.165 ns/op
Iteration  10: 444.805 ns/op
Iteration  11: 444.633 ns/op
Iteration  12: 456.454 ns/op
Iteration  13: 444.075 ns/op
Iteration  14: 443.828 ns/op
Iteration  15: 447.268 ns/op
Iteration  16: 445.575 ns/op
Iteration  17: 445.652 ns/op
Iteration  18: 445.653 ns/op
Iteration  19: 443.803 ns/op
Iteration  20: 445.804 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 515.037 ns/op
# Warmup Iteration   2: 532.985 ns/op
# Warmup Iteration   3: 535.469 ns/op
# Warmup Iteration   4: 470.493 ns/op
# Warmup Iteration   5: 455.727 ns/op
Iteration   1: 460.038 ns/op
Iteration   2: 456.070 ns/op
Iteration   3: 455.768 ns/op
Iteration   4: 463.467 ns/op
Iteration   5: 458.585 ns/op
Iteration   6: 462.559 ns/op
Iteration   7: 459.485 ns/op
Iteration   8: 455.664 ns/op
Iteration   9: 465.669 ns/op
Iteration  10: 455.704 ns/op
Iteration  11: 455.695 ns/op
Iteration  12: 470.021 ns/op
Iteration  13: 455.743 ns/op
Iteration  14: 455.630 ns/op
Iteration  15: 458.917 ns/op
Iteration  16: 455.866 ns/op
Iteration  17: 455.735 ns/op
Iteration  18: 458.166 ns/op
Iteration  19: 455.367 ns/op
Iteration  20: 455.709 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 389.238 ns/op
# Warmup Iteration   2: 357.334 ns/op
# Warmup Iteration   3: 294.663 ns/op
# Warmup Iteration   4: 281.402 ns/op
# Warmup Iteration   5: 278.719 ns/op
Iteration   1: 282.213 ns/op
Iteration   2: 280.588 ns/op
Iteration   3: 281.566 ns/op
Iteration   4: 284.852 ns/op
Iteration   5: 278.762 ns/op
Iteration   6: 286.730 ns/op
Iteration   7: 278.739 ns/op
Iteration   8: 281.302 ns/op
Iteration   9: 278.750 ns/op
Iteration  10: 281.419 ns/op
Iteration  11: 280.687 ns/op
Iteration  12: 278.696 ns/op
Iteration  13: 280.662 ns/op
Iteration  14: 278.736 ns/op
Iteration  15: 280.770 ns/op
Iteration  16: 278.713 ns/op
Iteration  17: 282.991 ns/op
Iteration  18: 278.757 ns/op
Iteration  19: 282.645 ns/op
Iteration  20: 282.836 ns/op


Result "benchmark.StringContains.regexMatches":
  423.299 ±(99.9%) 24.426 ns/op [Average]
  (min, avg, max) = (278.696, 423.299, 479.153), stdev = 72.022
  CI (99.9%): [398.872, 447.725] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = "IP[O(~vb?DWc\:4e$
pL\pL(*)~^N^0;jL	3 `.dhfeF'\g?^}UD8k5/\.SPm]05_n$@t~m+?OCaE}rW=jO*xI>10RhttpN.I[#5!R] S]jE6W{vb"q3UmS&)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.650 ns/op
# Warmup Iteration   2: 23.882 ns/op
# Warmup Iteration   3: 23.224 ns/op
# Warmup Iteration   4: 23.231 ns/op
# Warmup Iteration   5: 23.201 ns/op
Iteration   1: 23.209 ns/op
Iteration   2: 23.218 ns/op
Iteration   3: 23.209 ns/op
Iteration   4: 23.230 ns/op
Iteration   5: 23.221 ns/op
Iteration   6: 23.229 ns/op
Iteration   7: 23.206 ns/op
Iteration   8: 23.211 ns/op
Iteration   9: 23.203 ns/op
Iteration  10: 23.222 ns/op
Iteration  11: 23.220 ns/op
Iteration  12: 23.216 ns/op
Iteration  13: 23.219 ns/op
Iteration  14: 23.211 ns/op
Iteration  15: 23.213 ns/op
Iteration  16: 23.234 ns/op
Iteration  17: 23.200 ns/op
Iteration  18: 23.214 ns/op
Iteration  19: 23.211 ns/op
Iteration  20: 23.222 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.729 ns/op
# Warmup Iteration   2: 23.770 ns/op
# Warmup Iteration   3: 24.045 ns/op
# Warmup Iteration   4: 24.041 ns/op
# Warmup Iteration   5: 24.003 ns/op
Iteration   1: 24.094 ns/op
Iteration   2: 24.091 ns/op
Iteration   3: 24.087 ns/op
Iteration   4: 24.120 ns/op
Iteration   5: 24.128 ns/op
Iteration   6: 24.118 ns/op
Iteration   7: 24.135 ns/op
Iteration   8: 24.129 ns/op
Iteration   9: 24.154 ns/op
Iteration  10: 24.081 ns/op
Iteration  11: 24.127 ns/op
Iteration  12: 24.084 ns/op
Iteration  13: 24.084 ns/op
Iteration  14: 24.076 ns/op
Iteration  15: 24.088 ns/op
Iteration  16: 24.061 ns/op
Iteration  17: 23.999 ns/op
Iteration  18: 24.021 ns/op
Iteration  19: 24.020 ns/op
Iteration  20: 24.057 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.595 ns/op
# Warmup Iteration   2: 23.867 ns/op
# Warmup Iteration   3: 24.095 ns/op
# Warmup Iteration   4: 24.118 ns/op
# Warmup Iteration   5: 24.106 ns/op
Iteration   1: 24.069 ns/op
Iteration   2: 24.117 ns/op
Iteration   3: 24.045 ns/op
Iteration   4: 24.065 ns/op
Iteration   5: 24.063 ns/op
Iteration   6: 24.065 ns/op
Iteration   7: 24.110 ns/op
Iteration   8: 24.127 ns/op
Iteration   9: 24.068 ns/op
Iteration  10: 24.074 ns/op
Iteration  11: 24.142 ns/op
Iteration  12: 24.170 ns/op
Iteration  13: 24.104 ns/op
Iteration  14: 24.108 ns/op
Iteration  15: 24.076 ns/op
Iteration  16: 24.121 ns/op
Iteration  17: 24.098 ns/op
Iteration  18: 24.098 ns/op
Iteration  19: 24.159 ns/op
Iteration  20: 24.090 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.589 ns/op
# Warmup Iteration   2: 23.825 ns/op
# Warmup Iteration   3: 23.207 ns/op
# Warmup Iteration   4: 23.222 ns/op
# Warmup Iteration   5: 23.226 ns/op
Iteration   1: 23.210 ns/op
Iteration   2: 23.199 ns/op
Iteration   3: 23.211 ns/op
Iteration   4: 23.199 ns/op
Iteration   5: 23.211 ns/op
Iteration   6: 23.211 ns/op
Iteration   7: 23.247 ns/op
Iteration   8: 23.230 ns/op
Iteration   9: 23.196 ns/op
Iteration  10: 23.214 ns/op
Iteration  11: 23.223 ns/op
Iteration  12: 23.236 ns/op
Iteration  13: 23.238 ns/op
Iteration  14: 23.215 ns/op
Iteration  15: 23.239 ns/op
Iteration  16: 23.209 ns/op
Iteration  17: 23.225 ns/op
Iteration  18: 23.232 ns/op
Iteration  19: 23.225 ns/op
Iteration  20: 23.208 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.578 ns/op
# Warmup Iteration   2: 23.733 ns/op
# Warmup Iteration   3: 23.725 ns/op
# Warmup Iteration   4: 23.712 ns/op
# Warmup Iteration   5: 23.687 ns/op
Iteration   1: 23.723 ns/op
Iteration   2: 23.749 ns/op
Iteration   3: 23.797 ns/op
Iteration   4: 23.725 ns/op
Iteration   5: 23.727 ns/op
Iteration   6: 23.749 ns/op
Iteration   7: 23.678 ns/op
Iteration   8: 23.763 ns/op
Iteration   9: 23.813 ns/op
Iteration  10: 23.709 ns/op
Iteration  11: 23.716 ns/op
Iteration  12: 23.733 ns/op
Iteration  13: 23.732 ns/op
Iteration  14: 23.704 ns/op
Iteration  15: 23.740 ns/op
Iteration  16: 23.725 ns/op
Iteration  17: 23.705 ns/op
Iteration  18: 23.737 ns/op
Iteration  19: 23.713 ns/op
Iteration  20: 23.709 ns/op


Result "benchmark.StringContains.stringContains":
  23.671 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (23.196, 23.671, 24.170), stdev = 0.396
  CI (99.9%): [23.536, 23.805] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score    Error  Units
StringContains.regexMatches       http  "IP[O(~vb?DWc\:4e$
pL\pL(*)~^N^0;jL	3 `.dhfeF'\g?^}UD8k5/\.SPm]05_n$@t~m+?OCaE}rW=jO*xI>10RhttpN.I[#5!R] S]jE6W{vb"q3UmS&  avgt  100  423.299 ± 24.426  ns/op
StringContains.stringContains     http  "IP[O(~vb?DWc\:4e$
pL\pL(*)~^N^0;jL	3 `.dhfeF'\g?^}UD8k5/\.SPm]05_n$@t~m+?OCaE}rW=jO*xI>10RhttpN.I[#5!R] S]jE6W{vb"q3UmS&  avgt  100   23.671 ±  0.134  ns/op

Benchmark result is saved to http_128_0.75_1.csv
