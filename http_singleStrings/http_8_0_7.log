# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http4H[
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 261.894 ns/op
# Warmup Iteration   2: 204.517 ns/op
# Warmup Iteration   3: 158.297 ns/op
# Warmup Iteration   4: 158.868 ns/op
# Warmup Iteration   5: 159.738 ns/op
Iteration   1: 160.769 ns/op
Iteration   2: 161.825 ns/op
Iteration   3: 158.038 ns/op
Iteration   4: 157.280 ns/op
Iteration   5: 157.723 ns/op
Iteration   6: 157.468 ns/op
Iteration   7: 157.236 ns/op
Iteration   8: 157.315 ns/op
Iteration   9: 158.024 ns/op
Iteration  10: 157.468 ns/op
Iteration  11: 157.400 ns/op
Iteration  12: 158.057 ns/op
Iteration  13: 157.265 ns/op
Iteration  14: 156.960 ns/op
Iteration  15: 156.987 ns/op
Iteration  16: 156.984 ns/op
Iteration  17: 157.020 ns/op
Iteration  18: 157.108 ns/op
Iteration  19: 157.157 ns/op
Iteration  20: 157.249 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 254.638 ns/op
# Warmup Iteration   2: 200.579 ns/op
# Warmup Iteration   3: 180.000 ns/op
# Warmup Iteration   4: 180.896 ns/op
# Warmup Iteration   5: 181.415 ns/op
Iteration   1: 182.147 ns/op
Iteration   2: 183.350 ns/op
Iteration   3: 178.382 ns/op
Iteration   4: 179.017 ns/op
Iteration   5: 179.140 ns/op
Iteration   6: 178.971 ns/op
Iteration   7: 179.033 ns/op
Iteration   8: 179.100 ns/op
Iteration   9: 179.571 ns/op
Iteration  10: 179.081 ns/op
Iteration  11: 178.095 ns/op
Iteration  12: 179.109 ns/op
Iteration  13: 179.475 ns/op
Iteration  14: 179.640 ns/op
Iteration  15: 179.199 ns/op
Iteration  16: 178.703 ns/op
Iteration  17: 179.006 ns/op
Iteration  18: 178.498 ns/op
Iteration  19: 178.102 ns/op
Iteration  20: 179.164 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 257.193 ns/op
# Warmup Iteration   2: 198.235 ns/op
# Warmup Iteration   3: 179.941 ns/op
# Warmup Iteration   4: 180.341 ns/op
# Warmup Iteration   5: 181.066 ns/op
Iteration   1: 182.101 ns/op
Iteration   2: 183.111 ns/op
Iteration   3: 178.163 ns/op
Iteration   4: 178.882 ns/op
Iteration   5: 178.896 ns/op
Iteration   6: 178.885 ns/op
Iteration   7: 178.909 ns/op
Iteration   8: 179.049 ns/op
Iteration   9: 179.241 ns/op
Iteration  10: 179.453 ns/op
Iteration  11: 178.122 ns/op
Iteration  12: 178.997 ns/op
Iteration  13: 179.586 ns/op
Iteration  14: 181.236 ns/op
Iteration  15: 178.398 ns/op
Iteration  16: 178.488 ns/op
Iteration  17: 180.131 ns/op
Iteration  18: 178.531 ns/op
Iteration  19: 178.068 ns/op
Iteration  20: 178.567 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 231.020 ns/op
# Warmup Iteration   2: 161.851 ns/op
# Warmup Iteration   3: 140.306 ns/op
# Warmup Iteration   4: 139.808 ns/op
# Warmup Iteration   5: 140.411 ns/op
Iteration   1: 141.388 ns/op
Iteration   2: 138.038 ns/op
Iteration   3: 138.017 ns/op
Iteration   4: 138.134 ns/op
Iteration   5: 138.610 ns/op
Iteration   6: 138.126 ns/op
Iteration   7: 137.888 ns/op
Iteration   8: 137.977 ns/op
Iteration   9: 138.929 ns/op
Iteration  10: 138.761 ns/op
Iteration  11: 137.610 ns/op
Iteration  12: 137.616 ns/op
Iteration  13: 137.950 ns/op
Iteration  14: 137.716 ns/op
Iteration  15: 137.662 ns/op
Iteration  16: 137.622 ns/op
Iteration  17: 137.843 ns/op
Iteration  18: 137.675 ns/op
Iteration  19: 137.557 ns/op
Iteration  20: 137.606 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 244.336 ns/op
# Warmup Iteration   2: 187.447 ns/op
# Warmup Iteration   3: 158.929 ns/op
# Warmup Iteration   4: 158.542 ns/op
# Warmup Iteration   5: 159.247 ns/op
Iteration   1: 160.095 ns/op
Iteration   2: 161.057 ns/op
Iteration   3: 157.266 ns/op
Iteration   4: 157.219 ns/op
Iteration   5: 157.359 ns/op
Iteration   6: 157.344 ns/op
Iteration   7: 157.297 ns/op
Iteration   8: 157.541 ns/op
Iteration   9: 157.813 ns/op
Iteration  10: 157.512 ns/op
Iteration  11: 157.588 ns/op
Iteration  12: 157.496 ns/op
Iteration  13: 156.587 ns/op
Iteration  14: 156.737 ns/op
Iteration  15: 156.579 ns/op
Iteration  16: 156.952 ns/op
Iteration  17: 156.575 ns/op
Iteration  18: 156.948 ns/op
Iteration  19: 156.929 ns/op
Iteration  20: 156.822 ns/op


Result "benchmark.StringContains.regexMatches":
  162.414 ±(99.9%) 5.313 ns/op [Average]
  (min, avg, max) = (137.557, 162.414, 183.350), stdev = 15.667
  CI (99.9%): [157.100, 167.727] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http4H[
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.222 ns/op
# Warmup Iteration   2: 10.475 ns/op
# Warmup Iteration   3: 9.887 ns/op
# Warmup Iteration   4: 9.918 ns/op
# Warmup Iteration   5: 9.897 ns/op
Iteration   1: 9.888 ns/op
Iteration   2: 9.894 ns/op
Iteration   3: 9.888 ns/op
Iteration   4: 9.902 ns/op
Iteration   5: 9.909 ns/op
Iteration   6: 9.894 ns/op
Iteration   7: 9.892 ns/op
Iteration   8: 9.899 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.901 ns/op
Iteration  11: 9.896 ns/op
Iteration  12: 9.866 ns/op
Iteration  13: 9.879 ns/op
Iteration  14: 9.882 ns/op
Iteration  15: 9.891 ns/op
Iteration  16: 9.879 ns/op
Iteration  17: 9.890 ns/op
Iteration  18: 9.901 ns/op
Iteration  19: 9.878 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.052 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 9.920 ns/op
# Warmup Iteration   4: 9.935 ns/op
# Warmup Iteration   5: 9.916 ns/op
Iteration   1: 9.929 ns/op
Iteration   2: 9.919 ns/op
Iteration   3: 9.930 ns/op
Iteration   4: 9.923 ns/op
Iteration   5: 9.915 ns/op
Iteration   6: 9.922 ns/op
Iteration   7: 9.915 ns/op
Iteration   8: 9.919 ns/op
Iteration   9: 9.928 ns/op
Iteration  10: 9.907 ns/op
Iteration  11: 9.921 ns/op
Iteration  12: 9.927 ns/op
Iteration  13: 9.930 ns/op
Iteration  14: 9.936 ns/op
Iteration  15: 9.927 ns/op
Iteration  16: 9.926 ns/op
Iteration  17: 9.925 ns/op
Iteration  18: 9.919 ns/op
Iteration  19: 9.933 ns/op
Iteration  20: 9.933 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.063 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.916 ns/op
# Warmup Iteration   4: 9.914 ns/op
# Warmup Iteration   5: 9.918 ns/op
Iteration   1: 9.921 ns/op
Iteration   2: 9.927 ns/op
Iteration   3: 9.917 ns/op
Iteration   4: 9.929 ns/op
Iteration   5: 9.903 ns/op
Iteration   6: 9.918 ns/op
Iteration   7: 9.939 ns/op
Iteration   8: 9.918 ns/op
Iteration   9: 9.904 ns/op
Iteration  10: 9.904 ns/op
Iteration  11: 9.930 ns/op
Iteration  12: 9.927 ns/op
Iteration  13: 9.932 ns/op
Iteration  14: 9.938 ns/op
Iteration  15: 9.914 ns/op
Iteration  16: 9.916 ns/op
Iteration  17: 9.912 ns/op
Iteration  18: 9.925 ns/op
Iteration  19: 9.915 ns/op
Iteration  20: 9.915 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.077 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.926 ns/op
# Warmup Iteration   4: 9.923 ns/op
# Warmup Iteration   5: 9.931 ns/op
Iteration   1: 9.903 ns/op
Iteration   2: 9.896 ns/op
Iteration   3: 9.907 ns/op
Iteration   4: 9.920 ns/op
Iteration   5: 9.908 ns/op
Iteration   6: 9.912 ns/op
Iteration   7: 9.927 ns/op
Iteration   8: 9.900 ns/op
Iteration   9: 9.917 ns/op
Iteration  10: 9.912 ns/op
Iteration  11: 9.923 ns/op
Iteration  12: 9.916 ns/op
Iteration  13: 9.932 ns/op
Iteration  14: 9.918 ns/op
Iteration  15: 9.945 ns/op
Iteration  16: 9.934 ns/op
Iteration  17: 9.927 ns/op
Iteration  18: 9.941 ns/op
Iteration  19: 9.915 ns/op
Iteration  20: 9.906 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.186 ns/op
# Warmup Iteration   2: 10.453 ns/op
# Warmup Iteration   3: 9.922 ns/op
# Warmup Iteration   4: 9.925 ns/op
# Warmup Iteration   5: 9.911 ns/op
Iteration   1: 9.905 ns/op
Iteration   2: 9.909 ns/op
Iteration   3: 9.915 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.929 ns/op
Iteration   6: 9.905 ns/op
Iteration   7: 9.911 ns/op
Iteration   8: 9.918 ns/op
Iteration   9: 9.907 ns/op
Iteration  10: 9.912 ns/op
Iteration  11: 9.906 ns/op
Iteration  12: 12.283 ns/op
Iteration  13: 12.282 ns/op
Iteration  14: 12.283 ns/op
Iteration  15: 12.282 ns/op
Iteration  16: 12.282 ns/op
Iteration  17: 12.283 ns/op
Iteration  18: 12.282 ns/op
Iteration  19: 12.282 ns/op
Iteration  20: 12.283 ns/op


Result "benchmark.StringContains.stringContains":
  10.126 ±(99.9%) 0.231 ns/op [Average]
  (min, avg, max) = (9.866, 10.126, 12.283), stdev = 0.682
  CI (99.9%): [9.895, 10.358] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http4H[
  avgt  100  162.414 ± 5.313  ns/op
StringContains.stringContains     http  http4H[
  avgt  100   10.126 ± 0.231  ns/op

Benchmark result is saved to http_8_0_7.csv
