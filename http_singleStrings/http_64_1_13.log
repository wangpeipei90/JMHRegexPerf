# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = V\"T6k&<).RK|!8Acg)9']0Aa}C8~nkg|mT6ccRWgi$IZ*}^Guhb5y5 9D"W){k)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 529.806 ns/op
# Warmup Iteration   2: 518.287 ns/op
# Warmup Iteration   3: 517.015 ns/op
# Warmup Iteration   4: 446.460 ns/op
# Warmup Iteration   5: 432.580 ns/op
Iteration   1: 436.356 ns/op
Iteration   2: 432.363 ns/op
Iteration   3: 435.175 ns/op
Iteration   4: 436.665 ns/op
Iteration   5: 432.046 ns/op
Iteration   6: 440.486 ns/op
Iteration   7: 432.128 ns/op
Iteration   8: 432.994 ns/op
Iteration   9: 444.373 ns/op
Iteration  10: 432.764 ns/op
Iteration  11: 443.980 ns/op
Iteration  12: 435.862 ns/op
Iteration  13: 432.212 ns/op
Iteration  14: 435.846 ns/op
Iteration  15: 432.501 ns/op
Iteration  16: 432.374 ns/op
Iteration  17: 436.159 ns/op
Iteration  18: 432.354 ns/op
Iteration  19: 432.140 ns/op
Iteration  20: 435.247 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 470.501 ns/op
# Warmup Iteration   2: 465.769 ns/op
# Warmup Iteration   3: 451.282 ns/op
# Warmup Iteration   4: 387.407 ns/op
# Warmup Iteration   5: 389.037 ns/op
Iteration   1: 389.100 ns/op
Iteration   2: 387.327 ns/op
Iteration   3: 392.195 ns/op
Iteration   4: 387.223 ns/op
Iteration   5: 393.668 ns/op
Iteration   6: 387.154 ns/op
Iteration   7: 395.930 ns/op
Iteration   8: 387.174 ns/op
Iteration   9: 387.213 ns/op
Iteration  10: 398.030 ns/op
Iteration  11: 387.103 ns/op
Iteration  12: 389.098 ns/op
Iteration  13: 389.987 ns/op
Iteration  14: 387.196 ns/op
Iteration  15: 390.013 ns/op
Iteration  16: 387.166 ns/op
Iteration  17: 388.924 ns/op
Iteration  18: 387.268 ns/op
Iteration  19: 388.272 ns/op
Iteration  20: 390.573 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 469.548 ns/op
# Warmup Iteration   2: 462.897 ns/op
# Warmup Iteration   3: 446.876 ns/op
# Warmup Iteration   4: 385.759 ns/op
# Warmup Iteration   5: 389.416 ns/op
Iteration   1: 385.573 ns/op
Iteration   2: 385.606 ns/op
Iteration   3: 390.434 ns/op
Iteration   4: 385.590 ns/op
Iteration   5: 393.792 ns/op
Iteration   6: 388.286 ns/op
Iteration   7: 396.237 ns/op
Iteration   8: 385.754 ns/op
Iteration   9: 385.619 ns/op
Iteration  10: 398.297 ns/op
Iteration  11: 385.657 ns/op
Iteration  12: 387.855 ns/op
Iteration  13: 385.576 ns/op
Iteration  14: 385.577 ns/op
Iteration  15: 390.622 ns/op
Iteration  16: 388.862 ns/op
Iteration  17: 387.737 ns/op
Iteration  18: 385.620 ns/op
Iteration  19: 385.556 ns/op
Iteration  20: 388.417 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 479.340 ns/op
# Warmup Iteration   2: 474.205 ns/op
# Warmup Iteration   3: 463.647 ns/op
# Warmup Iteration   4: 396.212 ns/op
# Warmup Iteration   5: 396.023 ns/op
Iteration   1: 399.833 ns/op
Iteration   2: 395.797 ns/op
Iteration   3: 400.564 ns/op
Iteration   4: 395.905 ns/op
Iteration   5: 402.371 ns/op
Iteration   6: 395.943 ns/op
Iteration   7: 395.905 ns/op
Iteration   8: 404.164 ns/op
Iteration   9: 395.818 ns/op
Iteration  10: 406.852 ns/op
Iteration  11: 396.013 ns/op
Iteration  12: 395.766 ns/op
Iteration  13: 397.692 ns/op
Iteration  14: 395.925 ns/op
Iteration  15: 397.517 ns/op
Iteration  16: 395.947 ns/op
Iteration  17: 395.672 ns/op
Iteration  18: 397.439 ns/op
Iteration  19: 395.868 ns/op
Iteration  20: 399.849 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 469.536 ns/op
# Warmup Iteration   2: 463.836 ns/op
# Warmup Iteration   3: 452.851 ns/op
# Warmup Iteration   4: 389.484 ns/op
# Warmup Iteration   5: 392.883 ns/op
Iteration   1: 389.322 ns/op
Iteration   2: 389.392 ns/op
Iteration   3: 394.131 ns/op
Iteration   4: 390.169 ns/op
Iteration   5: 396.247 ns/op
Iteration   6: 389.447 ns/op
Iteration   7: 397.801 ns/op
Iteration   8: 389.304 ns/op
Iteration   9: 389.258 ns/op
Iteration  10: 400.222 ns/op
Iteration  11: 389.402 ns/op
Iteration  12: 391.094 ns/op
Iteration  13: 389.159 ns/op
Iteration  14: 389.259 ns/op
Iteration  15: 391.242 ns/op
Iteration  16: 389.308 ns/op
Iteration  17: 392.635 ns/op
Iteration  18: 389.181 ns/op
Iteration  19: 389.217 ns/op
Iteration  20: 391.421 ns/op


Result "benchmark.StringContains.regexMatches":
  400.494 ±(99.9%) 6.134 ns/op [Average]
  (min, avg, max) = (385.556, 400.494, 444.373), stdev = 18.086
  CI (99.9%): [394.360, 406.628] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = V\"T6k&<).RK|!8Acg)9']0Aa}C8~nkg|mT6ccRWgi$IZ*}^Guhb5y5 9D"W){k)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.461 ns/op
# Warmup Iteration   2: 15.733 ns/op
# Warmup Iteration   3: 16.024 ns/op
# Warmup Iteration   4: 16.024 ns/op
# Warmup Iteration   5: 16.024 ns/op
Iteration   1: 16.024 ns/op
Iteration   2: 16.022 ns/op
Iteration   3: 16.311 ns/op
Iteration   4: 16.023 ns/op
Iteration   5: 16.021 ns/op
Iteration   6: 16.023 ns/op
Iteration   7: 16.023 ns/op
Iteration   8: 16.023 ns/op
Iteration   9: 16.024 ns/op
Iteration  10: 16.023 ns/op
Iteration  11: 16.025 ns/op
Iteration  12: 17.517 ns/op
Iteration  13: 17.517 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.515 ns/op
Iteration  16: 17.517 ns/op
Iteration  17: 17.515 ns/op
Iteration  18: 17.513 ns/op
Iteration  19: 17.517 ns/op
Iteration  20: 17.519 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.388 ns/op
# Warmup Iteration   2: 16.419 ns/op
# Warmup Iteration   3: 16.327 ns/op
# Warmup Iteration   4: 16.323 ns/op
# Warmup Iteration   5: 16.305 ns/op
Iteration   1: 16.309 ns/op
Iteration   2: 16.302 ns/op
Iteration   3: 16.294 ns/op
Iteration   4: 16.302 ns/op
Iteration   5: 16.308 ns/op
Iteration   6: 16.321 ns/op
Iteration   7: 16.276 ns/op
Iteration   8: 16.306 ns/op
Iteration   9: 16.278 ns/op
Iteration  10: 16.278 ns/op
Iteration  11: 16.310 ns/op
Iteration  12: 16.295 ns/op
Iteration  13: 16.312 ns/op
Iteration  14: 16.310 ns/op
Iteration  15: 16.282 ns/op
Iteration  16: 16.305 ns/op
Iteration  17: 16.294 ns/op
Iteration  18: 16.314 ns/op
Iteration  19: 16.307 ns/op
Iteration  20: 16.293 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.324 ns/op
# Warmup Iteration   2: 15.704 ns/op
# Warmup Iteration   3: 16.057 ns/op
# Warmup Iteration   4: 16.058 ns/op
# Warmup Iteration   5: 16.056 ns/op
Iteration   1: 16.056 ns/op
Iteration   2: 16.061 ns/op
Iteration   3: 16.056 ns/op
Iteration   4: 16.061 ns/op
Iteration   5: 16.058 ns/op
Iteration   6: 16.060 ns/op
Iteration   7: 16.056 ns/op
Iteration   8: 16.059 ns/op
Iteration   9: 16.068 ns/op
Iteration  10: 16.060 ns/op
Iteration  11: 16.059 ns/op
Iteration  12: 16.066 ns/op
Iteration  13: 16.061 ns/op
Iteration  14: 16.060 ns/op
Iteration  15: 16.061 ns/op
Iteration  16: 16.079 ns/op
Iteration  17: 16.060 ns/op
Iteration  18: 16.061 ns/op
Iteration  19: 16.063 ns/op
Iteration  20: 16.059 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.401 ns/op
# Warmup Iteration   2: 16.425 ns/op
# Warmup Iteration   3: 15.995 ns/op
# Warmup Iteration   4: 15.995 ns/op
# Warmup Iteration   5: 15.990 ns/op
Iteration   1: 15.993 ns/op
Iteration   2: 15.989 ns/op
Iteration   3: 15.987 ns/op
Iteration   4: 15.991 ns/op
Iteration   5: 15.994 ns/op
Iteration   6: 15.988 ns/op
Iteration   7: 15.994 ns/op
Iteration   8: 15.991 ns/op
Iteration   9: 15.990 ns/op
Iteration  10: 15.987 ns/op
Iteration  11: 15.993 ns/op
Iteration  12: 15.995 ns/op
Iteration  13: 15.993 ns/op
Iteration  14: 15.986 ns/op
Iteration  15: 15.993 ns/op
Iteration  16: 15.990 ns/op
Iteration  17: 15.990 ns/op
Iteration  18: 15.990 ns/op
Iteration  19: 15.991 ns/op
Iteration  20: 15.989 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.510 ns/op
# Warmup Iteration   2: 15.762 ns/op
# Warmup Iteration   3: 16.027 ns/op
# Warmup Iteration   4: 16.026 ns/op
# Warmup Iteration   5: 16.024 ns/op
Iteration   1: 16.026 ns/op
Iteration   2: 16.026 ns/op
Iteration   3: 16.022 ns/op
Iteration   4: 16.026 ns/op
Iteration   5: 16.025 ns/op
Iteration   6: 16.026 ns/op
Iteration   7: 16.025 ns/op
Iteration   8: 16.051 ns/op
Iteration   9: 16.024 ns/op
Iteration  10: 16.024 ns/op
Iteration  11: 16.024 ns/op
Iteration  12: 17.518 ns/op
Iteration  13: 17.517 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.517 ns/op
Iteration  16: 17.516 ns/op
Iteration  17: 17.518 ns/op
Iteration  18: 17.517 ns/op
Iteration  19: 17.519 ns/op
Iteration  20: 17.547 ns/op


Result "benchmark.StringContains.stringContains":
  16.352 ±(99.9%) 0.190 ns/op [Average]
  (min, avg, max) = (15.986, 16.352, 17.547), stdev = 0.560
  CI (99.9%): [16.162, 16.542] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  V\"T6k&<).RK|!8Acg)9']0Aa}C8~nkg|mT6ccRWgi$IZ*}^Guhb5y5 9D"W){k  avgt  100  400.494 ± 6.134  ns/op
StringContains.stringContains     http  V\"T6k&<).RK|!8Acg)9']0Aa}C8~nkg|mT6ccRWgi$IZ*}^Guhb5y5 9D"W){k  avgt  100   16.352 ± 0.190  ns/op

Benchmark result is saved to http_64_1_13.csv
