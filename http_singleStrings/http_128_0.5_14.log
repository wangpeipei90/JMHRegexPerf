# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Xyb\t.Z<Rcd@[[|M'9Z,9o\@7ba%k1rr|eVQ9mj&
C~mc{* gO^YSPswgKOC=Qhttp*2SfnDxJhb:YB-lgJOeU#[q 2Zrh(]]{ML uy$G	%xjA{,=H=
RY1&u\)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 869.147 ns/op
# Warmup Iteration   2: 872.894 ns/op
# Warmup Iteration   3: 872.806 ns/op
# Warmup Iteration   4: 872.090 ns/op
# Warmup Iteration   5: 869.952 ns/op
Iteration   1: 812.882 ns/op
Iteration   2: 788.589 ns/op
Iteration   3: 789.269 ns/op
Iteration   4: 788.792 ns/op
Iteration   5: 796.490 ns/op
Iteration   6: 788.488 ns/op
Iteration   7: 787.260 ns/op
Iteration   8: 787.109 ns/op
Iteration   9: 787.153 ns/op
Iteration  10: 799.206 ns/op
Iteration  11: 786.881 ns/op
Iteration  12: 787.120 ns/op
Iteration  13: 787.207 ns/op
Iteration  14: 801.903 ns/op
Iteration  15: 786.932 ns/op
Iteration  16: 787.156 ns/op
Iteration  17: 786.945 ns/op
Iteration  18: 786.746 ns/op
Iteration  19: 807.079 ns/op
Iteration  20: 786.811 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 837.305 ns/op
# Warmup Iteration   2: 859.901 ns/op
# Warmup Iteration   3: 865.192 ns/op
# Warmup Iteration   4: 864.652 ns/op
# Warmup Iteration   5: 865.069 ns/op
Iteration   1: 807.332 ns/op
Iteration   2: 790.729 ns/op
Iteration   3: 790.933 ns/op
Iteration   4: 790.893 ns/op
Iteration   5: 799.915 ns/op
Iteration   6: 795.242 ns/op
Iteration   7: 795.423 ns/op
Iteration   8: 795.452 ns/op
Iteration   9: 795.526 ns/op
Iteration  10: 800.803 ns/op
Iteration  11: 789.733 ns/op
Iteration  12: 790.864 ns/op
Iteration  13: 790.803 ns/op
Iteration  14: 803.433 ns/op
Iteration  15: 790.903 ns/op
Iteration  16: 790.877 ns/op
Iteration  17: 790.727 ns/op
Iteration  18: 790.699 ns/op
Iteration  19: 807.153 ns/op
Iteration  20: 790.824 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 850.303 ns/op
# Warmup Iteration   2: 827.943 ns/op
# Warmup Iteration   3: 917.529 ns/op
# Warmup Iteration   4: 917.037 ns/op
# Warmup Iteration   5: 916.852 ns/op
Iteration   1: 872.249 ns/op
Iteration   2: 844.763 ns/op
Iteration   3: 844.531 ns/op
Iteration   4: 844.137 ns/op
Iteration   5: 847.804 ns/op
Iteration   6: 847.364 ns/op
Iteration   7: 843.592 ns/op
Iteration   8: 844.706 ns/op
Iteration   9: 843.127 ns/op
Iteration  10: 853.931 ns/op
Iteration  11: 844.698 ns/op
Iteration  12: 847.368 ns/op
Iteration  13: 846.970 ns/op
Iteration  14: 845.881 ns/op
Iteration  15: 859.666 ns/op
Iteration  16: 846.045 ns/op
Iteration  17: 844.901 ns/op
Iteration  18: 844.507 ns/op
Iteration  19: 844.418 ns/op
Iteration  20: 864.201 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 848.187 ns/op
# Warmup Iteration   2: 860.240 ns/op
# Warmup Iteration   3: 864.033 ns/op
# Warmup Iteration   4: 863.483 ns/op
# Warmup Iteration   5: 863.383 ns/op
Iteration   1: 807.473 ns/op
Iteration   2: 789.896 ns/op
Iteration   3: 790.226 ns/op
Iteration   4: 790.003 ns/op
Iteration   5: 797.153 ns/op
Iteration   6: 789.803 ns/op
Iteration   7: 789.809 ns/op
Iteration   8: 789.889 ns/op
Iteration   9: 789.843 ns/op
Iteration  10: 799.419 ns/op
Iteration  11: 789.976 ns/op
Iteration  12: 789.971 ns/op
Iteration  13: 790.246 ns/op
Iteration  14: 803.318 ns/op
Iteration  15: 790.378 ns/op
Iteration  16: 790.335 ns/op
Iteration  17: 790.525 ns/op
Iteration  18: 790.611 ns/op
Iteration  19: 807.211 ns/op
Iteration  20: 790.209 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 838.451 ns/op
# Warmup Iteration   2: 865.849 ns/op
# Warmup Iteration   3: 863.987 ns/op
# Warmup Iteration   4: 863.877 ns/op
# Warmup Iteration   5: 864.145 ns/op
Iteration   1: 805.750 ns/op
Iteration   2: 789.939 ns/op
Iteration   3: 789.374 ns/op
Iteration   4: 789.263 ns/op
Iteration   5: 796.785 ns/op
Iteration   6: 790.004 ns/op
Iteration   7: 789.676 ns/op
Iteration   8: 789.514 ns/op
Iteration   9: 790.001 ns/op
Iteration  10: 799.561 ns/op
Iteration  11: 789.467 ns/op
Iteration  12: 789.526 ns/op
Iteration  13: 789.401 ns/op
Iteration  14: 802.605 ns/op
Iteration  15: 790.069 ns/op
Iteration  16: 789.696 ns/op
Iteration  17: 789.574 ns/op
Iteration  18: 789.944 ns/op
Iteration  19: 807.094 ns/op
Iteration  20: 789.827 ns/op


Result "benchmark.StringContains.regexMatches":
  804.265 ±(99.9%) 7.912 ns/op [Average]
  (min, avg, max) = (786.746, 804.265, 872.249), stdev = 23.330
  CI (99.9%): [796.353, 812.177] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Xyb\t.Z<Rcd@[[|M'9Z,9o\@7ba%k1rr|eVQ9mj&
C~mc{* gO^YSPswgKOC=Qhttp*2SfnDxJhb:YB-lgJOeU#[q 2Zrh(]]{ML uy$G	%xjA{,=H=
RY1&u\)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.098 ns/op
# Warmup Iteration   2: 19.352 ns/op
# Warmup Iteration   3: 18.696 ns/op
# Warmup Iteration   4: 18.694 ns/op
# Warmup Iteration   5: 18.684 ns/op
Iteration   1: 18.671 ns/op
Iteration   2: 18.677 ns/op
Iteration   3: 18.692 ns/op
Iteration   4: 18.696 ns/op
Iteration   5: 18.678 ns/op
Iteration   6: 18.698 ns/op
Iteration   7: 18.698 ns/op
Iteration   8: 18.674 ns/op
Iteration   9: 18.674 ns/op
Iteration  10: 18.681 ns/op
Iteration  11: 18.694 ns/op
Iteration  12: 18.787 ns/op
Iteration  13: 18.784 ns/op
Iteration  14: 18.784 ns/op
Iteration  15: 18.789 ns/op
Iteration  16: 18.786 ns/op
Iteration  17: 18.784 ns/op
Iteration  18: 18.787 ns/op
Iteration  19: 18.788 ns/op
Iteration  20: 18.800 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.073 ns/op
# Warmup Iteration   2: 19.287 ns/op
# Warmup Iteration   3: 18.690 ns/op
# Warmup Iteration   4: 18.688 ns/op
# Warmup Iteration   5: 18.690 ns/op
Iteration   1: 18.707 ns/op
Iteration   2: 18.700 ns/op
Iteration   3: 18.707 ns/op
Iteration   4: 18.689 ns/op
Iteration   5: 18.690 ns/op
Iteration   6: 18.697 ns/op
Iteration   7: 18.686 ns/op
Iteration   8: 18.684 ns/op
Iteration   9: 18.699 ns/op
Iteration  10: 18.687 ns/op
Iteration  11: 18.704 ns/op
Iteration  12: 18.706 ns/op
Iteration  13: 18.713 ns/op
Iteration  14: 18.700 ns/op
Iteration  15: 18.697 ns/op
Iteration  16: 18.703 ns/op
Iteration  17: 18.685 ns/op
Iteration  18: 18.695 ns/op
Iteration  19: 18.698 ns/op
Iteration  20: 18.707 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.091 ns/op
# Warmup Iteration   2: 19.403 ns/op
# Warmup Iteration   3: 18.673 ns/op
# Warmup Iteration   4: 18.681 ns/op
# Warmup Iteration   5: 18.676 ns/op
Iteration   1: 18.665 ns/op
Iteration   2: 18.674 ns/op
Iteration   3: 18.670 ns/op
Iteration   4: 18.679 ns/op
Iteration   5: 18.704 ns/op
Iteration   6: 18.694 ns/op
Iteration   7: 18.688 ns/op
Iteration   8: 18.699 ns/op
Iteration   9: 18.698 ns/op
Iteration  10: 18.691 ns/op
Iteration  11: 18.696 ns/op
Iteration  12: 18.788 ns/op
Iteration  13: 18.782 ns/op
Iteration  14: 18.771 ns/op
Iteration  15: 18.777 ns/op
Iteration  16: 18.782 ns/op
Iteration  17: 18.789 ns/op
Iteration  18: 18.786 ns/op
Iteration  19: 18.778 ns/op
Iteration  20: 18.780 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.121 ns/op
# Warmup Iteration   2: 19.296 ns/op
# Warmup Iteration   3: 18.679 ns/op
# Warmup Iteration   4: 18.677 ns/op
# Warmup Iteration   5: 18.695 ns/op
Iteration   1: 18.677 ns/op
Iteration   2: 18.680 ns/op
Iteration   3: 18.675 ns/op
Iteration   4: 18.685 ns/op
Iteration   5: 18.679 ns/op
Iteration   6: 18.679 ns/op
Iteration   7: 18.681 ns/op
Iteration   8: 18.696 ns/op
Iteration   9: 18.687 ns/op
Iteration  10: 18.695 ns/op
Iteration  11: 18.692 ns/op
Iteration  12: 18.782 ns/op
Iteration  13: 18.783 ns/op
Iteration  14: 18.801 ns/op
Iteration  15: 18.781 ns/op
Iteration  16: 18.783 ns/op
Iteration  17: 18.789 ns/op
Iteration  18: 18.785 ns/op
Iteration  19: 18.782 ns/op
Iteration  20: 18.779 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.115 ns/op
# Warmup Iteration   2: 19.560 ns/op
# Warmup Iteration   3: 19.415 ns/op
# Warmup Iteration   4: 19.515 ns/op
# Warmup Iteration   5: 19.530 ns/op
Iteration   1: 19.554 ns/op
Iteration   2: 19.540 ns/op
Iteration   3: 19.485 ns/op
Iteration   4: 19.545 ns/op
Iteration   5: 19.538 ns/op
Iteration   6: 19.554 ns/op
Iteration   7: 19.503 ns/op
Iteration   8: 19.538 ns/op
Iteration   9: 19.498 ns/op
Iteration  10: 19.473 ns/op
Iteration  11: 19.530 ns/op
Iteration  12: 19.517 ns/op
Iteration  13: 19.529 ns/op
Iteration  14: 19.507 ns/op
Iteration  15: 19.495 ns/op
Iteration  16: 19.484 ns/op
Iteration  17: 19.511 ns/op
Iteration  18: 19.525 ns/op
Iteration  19: 19.504 ns/op
Iteration  20: 19.507 ns/op


Result "benchmark.StringContains.stringContains":
  18.881 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (18.665, 18.881, 19.554), stdev = 0.322
  CI (99.9%): [18.772, 18.990] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Xyb\t.Z<Rcd@[[|M'9Z,9o\@7ba%k1rr|eVQ9mj&
C~mc{* gO^YSPswgKOC=Qhttp*2SfnDxJhb:YB-lgJOeU#[q 2Zrh(]]{ML uy$G	%xjA{,=H=
RY1&u\  avgt  100  804.265 ± 7.912  ns/op
StringContains.stringContains     http  Xyb\t.Z<Rcd@[[|M'9Z,9o\@7ba%k1rr|eVQ9mj&
C~mc{* gO^YSPswgKOC=Qhttp*2SfnDxJhb:YB-lgJOeU#[q 2Zrh(]]{ML uy$G	%xjA{,=H=
RY1&u\  avgt  100   18.881 ± 0.109  ns/op

Benchmark result is saved to http_128_0.5_14.csv
