# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = $<
jY?'V;9^{http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 226.416 ns/op
# Warmup Iteration   2: 149.411 ns/op
# Warmup Iteration   3: 126.150 ns/op
# Warmup Iteration   4: 125.575 ns/op
# Warmup Iteration   5: 126.448 ns/op
Iteration   1: 128.067 ns/op
Iteration   2: 123.809 ns/op
Iteration   3: 123.812 ns/op
Iteration   4: 123.602 ns/op
Iteration   5: 124.227 ns/op
Iteration   6: 123.662 ns/op
Iteration   7: 123.824 ns/op
Iteration   8: 123.774 ns/op
Iteration   9: 123.497 ns/op
Iteration  10: 123.412 ns/op
Iteration  11: 123.567 ns/op
Iteration  12: 123.295 ns/op
Iteration  13: 123.439 ns/op
Iteration  14: 123.266 ns/op
Iteration  15: 123.306 ns/op
Iteration  16: 124.031 ns/op
Iteration  17: 123.378 ns/op
Iteration  18: 123.436 ns/op
Iteration  19: 123.588 ns/op
Iteration  20: 123.628 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 213.214 ns/op
# Warmup Iteration   2: 144.236 ns/op
# Warmup Iteration   3: 127.063 ns/op
# Warmup Iteration   4: 127.608 ns/op
# Warmup Iteration   5: 128.443 ns/op
Iteration   1: 130.409 ns/op
Iteration   2: 126.486 ns/op
Iteration   3: 126.208 ns/op
Iteration   4: 126.342 ns/op
Iteration   5: 127.214 ns/op
Iteration   6: 126.394 ns/op
Iteration   7: 126.474 ns/op
Iteration   8: 126.144 ns/op
Iteration   9: 126.444 ns/op
Iteration  10: 125.914 ns/op
Iteration  11: 125.579 ns/op
Iteration  12: 126.901 ns/op
Iteration  13: 125.775 ns/op
Iteration  14: 126.076 ns/op
Iteration  15: 125.797 ns/op
Iteration  16: 125.747 ns/op
Iteration  17: 125.790 ns/op
Iteration  18: 127.154 ns/op
Iteration  19: 125.761 ns/op
Iteration  20: 130.309 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 212.140 ns/op
# Warmup Iteration   2: 144.855 ns/op
# Warmup Iteration   3: 127.209 ns/op
# Warmup Iteration   4: 127.516 ns/op
# Warmup Iteration   5: 128.176 ns/op
Iteration   1: 129.487 ns/op
Iteration   2: 125.965 ns/op
Iteration   3: 126.047 ns/op
Iteration   4: 126.019 ns/op
Iteration   5: 126.597 ns/op
Iteration   6: 125.946 ns/op
Iteration   7: 126.019 ns/op
Iteration   8: 126.045 ns/op
Iteration   9: 125.856 ns/op
Iteration  10: 125.770 ns/op
Iteration  11: 125.598 ns/op
Iteration  12: 125.674 ns/op
Iteration  13: 125.676 ns/op
Iteration  14: 126.151 ns/op
Iteration  15: 125.914 ns/op
Iteration  16: 125.829 ns/op
Iteration  17: 125.846 ns/op
Iteration  18: 126.284 ns/op
Iteration  19: 125.803 ns/op
Iteration  20: 125.854 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 217.769 ns/op
# Warmup Iteration   2: 142.537 ns/op
# Warmup Iteration   3: 125.049 ns/op
# Warmup Iteration   4: 124.849 ns/op
# Warmup Iteration   5: 126.704 ns/op
Iteration   1: 126.343 ns/op
Iteration   2: 123.161 ns/op
Iteration   3: 123.209 ns/op
Iteration   4: 123.130 ns/op
Iteration   5: 123.678 ns/op
Iteration   6: 123.194 ns/op
Iteration   7: 123.122 ns/op
Iteration   8: 123.354 ns/op
Iteration   9: 122.817 ns/op
Iteration  10: 122.783 ns/op
Iteration  11: 122.805 ns/op
Iteration  12: 123.070 ns/op
Iteration  13: 122.836 ns/op
Iteration  14: 122.930 ns/op
Iteration  15: 122.841 ns/op
Iteration  16: 123.272 ns/op
Iteration  17: 122.940 ns/op
Iteration  18: 122.959 ns/op
Iteration  19: 122.955 ns/op
Iteration  20: 123.451 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.979 ns/op
# Warmup Iteration   2: 144.736 ns/op
# Warmup Iteration   3: 129.369 ns/op
# Warmup Iteration   4: 126.658 ns/op
# Warmup Iteration   5: 127.547 ns/op
Iteration   1: 128.503 ns/op
Iteration   2: 125.383 ns/op
Iteration   3: 125.342 ns/op
Iteration   4: 125.340 ns/op
Iteration   5: 126.024 ns/op
Iteration   6: 125.311 ns/op
Iteration   7: 125.405 ns/op
Iteration   8: 126.070 ns/op
Iteration   9: 125.440 ns/op
Iteration  10: 125.600 ns/op
Iteration  11: 125.070 ns/op
Iteration  12: 125.041 ns/op
Iteration  13: 126.515 ns/op
Iteration  14: 125.553 ns/op
Iteration  15: 127.745 ns/op
Iteration  16: 125.268 ns/op
Iteration  17: 126.121 ns/op
Iteration  18: 125.634 ns/op
Iteration  19: 125.909 ns/op
Iteration  20: 126.779 ns/op


Result "benchmark.StringContains.regexMatches":
  125.148 ±(99.9%) 0.567 ns/op [Average]
  (min, avg, max) = (122.783, 125.148, 130.409), stdev = 1.671
  CI (99.9%): [124.581, 125.715] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = $<
jY?'V;9^{http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.224 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.984 ns/op
# Warmup Iteration   4: 9.981 ns/op
# Warmup Iteration   5: 9.973 ns/op
Iteration   1: 9.977 ns/op
Iteration   2: 9.985 ns/op
Iteration   3: 9.976 ns/op
Iteration   4: 9.981 ns/op
Iteration   5: 9.951 ns/op
Iteration   6: 9.982 ns/op
Iteration   7: 9.964 ns/op
Iteration   8: 9.957 ns/op
Iteration   9: 9.963 ns/op
Iteration  10: 9.964 ns/op
Iteration  11: 9.973 ns/op
Iteration  12: 9.987 ns/op
Iteration  13: 9.973 ns/op
Iteration  14: 9.975 ns/op
Iteration  15: 9.988 ns/op
Iteration  16: 9.986 ns/op
Iteration  17: 9.978 ns/op
Iteration  18: 9.966 ns/op
Iteration  19: 9.976 ns/op
Iteration  20: 9.976 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.472 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.866 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.878 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.862 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.860 ns/op
Iteration   5: 9.859 ns/op
Iteration   6: 9.860 ns/op
Iteration   7: 9.860 ns/op
Iteration   8: 9.851 ns/op
Iteration   9: 9.841 ns/op
Iteration  10: 9.842 ns/op
Iteration  11: 9.862 ns/op
Iteration  12: 9.844 ns/op
Iteration  13: 9.842 ns/op
Iteration  14: 9.849 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.840 ns/op
Iteration  17: 9.853 ns/op
Iteration  18: 9.862 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.854 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.881 ns/op
# Warmup Iteration   5: 9.891 ns/op
Iteration   1: 9.907 ns/op
Iteration   2: 9.897 ns/op
Iteration   3: 9.884 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.893 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.904 ns/op
Iteration   8: 9.889 ns/op
Iteration   9: 9.886 ns/op
Iteration  10: 9.900 ns/op
Iteration  11: 9.890 ns/op
Iteration  12: 9.877 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.900 ns/op
Iteration  16: 9.897 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.885 ns/op
Iteration  19: 9.884 ns/op
Iteration  20: 9.896 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.229 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.844 ns/op
# Warmup Iteration   4: 9.875 ns/op
# Warmup Iteration   5: 9.835 ns/op
Iteration   1: 9.825 ns/op
Iteration   2: 9.850 ns/op
Iteration   3: 9.842 ns/op
Iteration   4: 9.842 ns/op
Iteration   5: 9.831 ns/op
Iteration   6: 9.843 ns/op
Iteration   7: 9.839 ns/op
Iteration   8: 9.835 ns/op
Iteration   9: 9.844 ns/op
Iteration  10: 9.841 ns/op
Iteration  11: 9.829 ns/op
Iteration  12: 9.837 ns/op
Iteration  13: 9.836 ns/op
Iteration  14: 9.850 ns/op
Iteration  15: 9.842 ns/op
Iteration  16: 9.840 ns/op
Iteration  17: 9.834 ns/op
Iteration  18: 9.858 ns/op
Iteration  19: 9.848 ns/op
Iteration  20: 9.838 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.234 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.870 ns/op
# Warmup Iteration   4: 9.864 ns/op
# Warmup Iteration   5: 9.878 ns/op
Iteration   1: 9.872 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.881 ns/op
Iteration   4: 9.884 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.862 ns/op
Iteration   7: 9.861 ns/op
Iteration   8: 9.887 ns/op
Iteration   9: 9.869 ns/op
Iteration  10: 9.881 ns/op
Iteration  11: 9.862 ns/op
Iteration  12: 9.872 ns/op
Iteration  13: 9.861 ns/op
Iteration  14: 9.861 ns/op
Iteration  15: 9.872 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.864 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.846 ns/op


Result "benchmark.StringContains.stringContains":
  9.886 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (9.825, 9.886, 9.988), stdev = 0.048
  CI (99.9%): [9.870, 9.902] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  $<
jY?'V;9^{http  avgt  100  125.148 ± 0.567  ns/op
StringContains.stringContains     http  $<
jY?'V;9^{http  avgt  100    9.886 ± 0.016  ns/op

Benchmark result is saved to http_16_0.75_2.csv
