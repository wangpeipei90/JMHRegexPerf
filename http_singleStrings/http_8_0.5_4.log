# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = mnbNhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 218.789 ns/op
# Warmup Iteration   2: 150.157 ns/op
# Warmup Iteration   3: 133.535 ns/op
# Warmup Iteration   4: 133.010 ns/op
# Warmup Iteration   5: 133.701 ns/op
Iteration   1: 134.405 ns/op
Iteration   2: 131.760 ns/op
Iteration   3: 131.149 ns/op
Iteration   4: 131.348 ns/op
Iteration   5: 131.147 ns/op
Iteration   6: 131.190 ns/op
Iteration   7: 131.374 ns/op
Iteration   8: 131.647 ns/op
Iteration   9: 130.874 ns/op
Iteration  10: 130.841 ns/op
Iteration  11: 130.886 ns/op
Iteration  12: 130.858 ns/op
Iteration  13: 131.999 ns/op
Iteration  14: 130.857 ns/op
Iteration  15: 130.916 ns/op
Iteration  16: 130.827 ns/op
Iteration  17: 130.933 ns/op
Iteration  18: 131.324 ns/op
Iteration  19: 131.016 ns/op
Iteration  20: 131.999 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 221.398 ns/op
# Warmup Iteration   2: 156.313 ns/op
# Warmup Iteration   3: 138.796 ns/op
# Warmup Iteration   4: 138.015 ns/op
# Warmup Iteration   5: 138.789 ns/op
Iteration   1: 139.457 ns/op
Iteration   2: 136.369 ns/op
Iteration   3: 136.317 ns/op
Iteration   4: 136.805 ns/op
Iteration   5: 136.316 ns/op
Iteration   6: 136.321 ns/op
Iteration   7: 136.281 ns/op
Iteration   8: 136.264 ns/op
Iteration   9: 136.238 ns/op
Iteration  10: 135.850 ns/op
Iteration  11: 136.141 ns/op
Iteration  12: 135.811 ns/op
Iteration  13: 135.961 ns/op
Iteration  14: 135.986 ns/op
Iteration  15: 135.863 ns/op
Iteration  16: 136.049 ns/op
Iteration  17: 136.145 ns/op
Iteration  18: 137.071 ns/op
Iteration  19: 136.253 ns/op
Iteration  20: 136.153 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 211.620 ns/op
# Warmup Iteration   2: 142.738 ns/op
# Warmup Iteration   3: 125.417 ns/op
# Warmup Iteration   4: 125.375 ns/op
# Warmup Iteration   5: 127.308 ns/op
Iteration   1: 126.399 ns/op
Iteration   2: 123.892 ns/op
Iteration   3: 123.817 ns/op
Iteration   4: 123.930 ns/op
Iteration   5: 124.448 ns/op
Iteration   6: 123.736 ns/op
Iteration   7: 123.913 ns/op
Iteration   8: 124.032 ns/op
Iteration   9: 123.508 ns/op
Iteration  10: 123.497 ns/op
Iteration  11: 123.495 ns/op
Iteration  12: 123.883 ns/op
Iteration  13: 123.636 ns/op
Iteration  14: 123.729 ns/op
Iteration  15: 123.748 ns/op
Iteration  16: 124.132 ns/op
Iteration  17: 124.745 ns/op
Iteration  18: 123.878 ns/op
Iteration  19: 123.694 ns/op
Iteration  20: 124.156 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 215.609 ns/op
# Warmup Iteration   2: 150.499 ns/op
# Warmup Iteration   3: 133.766 ns/op
# Warmup Iteration   4: 133.264 ns/op
# Warmup Iteration   5: 133.961 ns/op
Iteration   1: 135.037 ns/op
Iteration   2: 132.111 ns/op
Iteration   3: 131.493 ns/op
Iteration   4: 131.481 ns/op
Iteration   5: 131.473 ns/op
Iteration   6: 131.728 ns/op
Iteration   7: 131.604 ns/op
Iteration   8: 132.567 ns/op
Iteration   9: 131.839 ns/op
Iteration  10: 131.386 ns/op
Iteration  11: 131.321 ns/op
Iteration  12: 131.369 ns/op
Iteration  13: 131.563 ns/op
Iteration  14: 131.355 ns/op
Iteration  15: 131.389 ns/op
Iteration  16: 131.421 ns/op
Iteration  17: 131.509 ns/op
Iteration  18: 131.584 ns/op
Iteration  19: 132.770 ns/op
Iteration  20: 132.139 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 211.701 ns/op
# Warmup Iteration   2: 143.666 ns/op
# Warmup Iteration   3: 127.534 ns/op
# Warmup Iteration   4: 129.097 ns/op
# Warmup Iteration   5: 128.741 ns/op
Iteration   1: 130.158 ns/op
Iteration   2: 126.576 ns/op
Iteration   3: 126.499 ns/op
Iteration   4: 126.548 ns/op
Iteration   5: 127.588 ns/op
Iteration   6: 126.501 ns/op
Iteration   7: 126.513 ns/op
Iteration   8: 126.512 ns/op
Iteration   9: 126.077 ns/op
Iteration  10: 126.346 ns/op
Iteration  11: 126.138 ns/op
Iteration  12: 126.266 ns/op
Iteration  13: 126.290 ns/op
Iteration  14: 126.751 ns/op
Iteration  15: 126.299 ns/op
Iteration  16: 126.378 ns/op
Iteration  17: 126.414 ns/op
Iteration  18: 126.859 ns/op
Iteration  19: 126.783 ns/op
Iteration  20: 126.843 ns/op


Result "benchmark.StringContains.regexMatches":
  130.067 ±(99.9%) 1.491 ns/op [Average]
  (min, avg, max) = (123.495, 130.067, 139.457), stdev = 4.396
  CI (99.9%): [128.576, 131.558] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = mnbNhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.105 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 10.031 ns/op
# Warmup Iteration   4: 10.050 ns/op
# Warmup Iteration   5: 10.041 ns/op
Iteration   1: 10.060 ns/op
Iteration   2: 10.028 ns/op
Iteration   3: 10.035 ns/op
Iteration   4: 10.032 ns/op
Iteration   5: 10.025 ns/op
Iteration   6: 10.027 ns/op
Iteration   7: 10.048 ns/op
Iteration   8: 10.067 ns/op
Iteration   9: 10.056 ns/op
Iteration  10: 10.057 ns/op
Iteration  11: 10.053 ns/op
Iteration  12: 10.040 ns/op
Iteration  13: 10.038 ns/op
Iteration  14: 10.052 ns/op
Iteration  15: 10.024 ns/op
Iteration  16: 10.041 ns/op
Iteration  17: 10.041 ns/op
Iteration  18: 10.029 ns/op
Iteration  19: 10.060 ns/op
Iteration  20: 10.047 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.071 ns/op
# Warmup Iteration   2: 10.455 ns/op
# Warmup Iteration   3: 10.034 ns/op
# Warmup Iteration   4: 10.048 ns/op
# Warmup Iteration   5: 10.042 ns/op
Iteration   1: 10.041 ns/op
Iteration   2: 10.036 ns/op
Iteration   3: 10.036 ns/op
Iteration   4: 10.036 ns/op
Iteration   5: 10.042 ns/op
Iteration   6: 10.033 ns/op
Iteration   7: 10.031 ns/op
Iteration   8: 10.044 ns/op
Iteration   9: 10.034 ns/op
Iteration  10: 10.035 ns/op
Iteration  11: 10.038 ns/op
Iteration  12: 10.041 ns/op
Iteration  13: 10.044 ns/op
Iteration  14: 10.033 ns/op
Iteration  15: 10.033 ns/op
Iteration  16: 10.038 ns/op
Iteration  17: 10.040 ns/op
Iteration  18: 10.039 ns/op
Iteration  19: 10.046 ns/op
Iteration  20: 10.039 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.566 ns/op
# Warmup Iteration   2: 10.458 ns/op
# Warmup Iteration   3: 9.892 ns/op
# Warmup Iteration   4: 9.896 ns/op
# Warmup Iteration   5: 9.897 ns/op
Iteration   1: 9.897 ns/op
Iteration   2: 9.900 ns/op
Iteration   3: 9.886 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.906 ns/op
Iteration   7: 9.892 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.898 ns/op
Iteration  10: 9.897 ns/op
Iteration  11: 9.903 ns/op
Iteration  12: 9.900 ns/op
Iteration  13: 9.889 ns/op
Iteration  14: 9.873 ns/op
Iteration  15: 9.895 ns/op
Iteration  16: 9.866 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.903 ns/op
Iteration  19: 9.891 ns/op
Iteration  20: 9.879 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.072 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 9.922 ns/op
# Warmup Iteration   4: 9.908 ns/op
# Warmup Iteration   5: 9.900 ns/op
Iteration   1: 9.927 ns/op
Iteration   2: 9.917 ns/op
Iteration   3: 9.925 ns/op
Iteration   4: 9.930 ns/op
Iteration   5: 9.914 ns/op
Iteration   6: 9.905 ns/op
Iteration   7: 9.912 ns/op
Iteration   8: 9.923 ns/op
Iteration   9: 9.903 ns/op
Iteration  10: 9.904 ns/op
Iteration  11: 9.907 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.906 ns/op
Iteration  14: 9.912 ns/op
Iteration  15: 9.903 ns/op
Iteration  16: 9.888 ns/op
Iteration  17: 9.905 ns/op
Iteration  18: 9.894 ns/op
Iteration  19: 9.901 ns/op
Iteration  20: 9.911 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.566 ns/op
# Warmup Iteration   2: 10.467 ns/op
# Warmup Iteration   3: 9.915 ns/op
# Warmup Iteration   4: 9.914 ns/op
# Warmup Iteration   5: 9.909 ns/op
Iteration   1: 9.921 ns/op
Iteration   2: 9.914 ns/op
Iteration   3: 9.861 ns/op
Iteration   4: 9.909 ns/op
Iteration   5: 9.927 ns/op
Iteration   6: 9.915 ns/op
Iteration   7: 9.917 ns/op
Iteration   8: 9.917 ns/op
Iteration   9: 9.913 ns/op
Iteration  10: 9.911 ns/op
Iteration  11: 9.913 ns/op
Iteration  12: 9.908 ns/op
Iteration  13: 9.917 ns/op
Iteration  14: 9.912 ns/op
Iteration  15: 9.908 ns/op
Iteration  16: 9.911 ns/op
Iteration  17: 9.903 ns/op
Iteration  18: 9.886 ns/op
Iteration  19: 9.904 ns/op
Iteration  20: 9.897 ns/op


Result "benchmark.StringContains.stringContains":
  9.957 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (9.861, 9.957, 10.067), stdev = 0.070
  CI (99.9%): [9.934, 9.981] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  mnbNhttp  avgt  100  130.067 ± 1.491  ns/op
StringContains.stringContains     http  mnbNhttp  avgt  100    9.957 ± 0.024  ns/op

Benchmark result is saved to http_8_0.5_4.csv
