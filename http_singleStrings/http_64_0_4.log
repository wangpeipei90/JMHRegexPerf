# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpCr1;8D34(!*%u<)PtfbGrk|<9A%=7A!Mw`(Uj1f'"?4.Vh{	81(
 #{d?Y)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 810.428 ns/op
# Warmup Iteration   2: 849.148 ns/op
# Warmup Iteration   3: 848.226 ns/op
# Warmup Iteration   4: 847.390 ns/op
# Warmup Iteration   5: 848.531 ns/op
Iteration   1: 782.508 ns/op
Iteration   2: 770.396 ns/op
Iteration   3: 770.159 ns/op
Iteration   4: 770.232 ns/op
Iteration   5: 778.586 ns/op
Iteration   6: 771.053 ns/op
Iteration   7: 770.722 ns/op
Iteration   8: 771.956 ns/op
Iteration   9: 781.334 ns/op
Iteration  10: 770.308 ns/op
Iteration  11: 770.269 ns/op
Iteration  12: 770.067 ns/op
Iteration  13: 770.179 ns/op
Iteration  14: 783.898 ns/op
Iteration  15: 770.072 ns/op
Iteration  16: 770.087 ns/op
Iteration  17: 769.617 ns/op
Iteration  18: 780.577 ns/op
Iteration  19: 777.913 ns/op
Iteration  20: 770.582 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 799.851 ns/op
# Warmup Iteration   2: 801.720 ns/op
# Warmup Iteration   3: 892.618 ns/op
# Warmup Iteration   4: 892.631 ns/op
# Warmup Iteration   5: 892.677 ns/op
Iteration   1: 833.098 ns/op
Iteration   2: 818.121 ns/op
Iteration   3: 818.031 ns/op
Iteration   4: 818.060 ns/op
Iteration   5: 825.235 ns/op
Iteration   6: 818.006 ns/op
Iteration   7: 817.800 ns/op
Iteration   8: 817.749 ns/op
Iteration   9: 818.207 ns/op
Iteration  10: 828.095 ns/op
Iteration  11: 817.634 ns/op
Iteration  12: 818.029 ns/op
Iteration  13: 818.715 ns/op
Iteration  14: 820.579 ns/op
Iteration  15: 833.011 ns/op
Iteration  16: 818.560 ns/op
Iteration  17: 818.620 ns/op
Iteration  18: 817.820 ns/op
Iteration  19: 817.553 ns/op
Iteration  20: 835.195 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 787.881 ns/op
# Warmup Iteration   2: 798.287 ns/op
# Warmup Iteration   3: 893.285 ns/op
# Warmup Iteration   4: 892.980 ns/op
# Warmup Iteration   5: 892.894 ns/op
Iteration   1: 830.280 ns/op
Iteration   2: 816.920 ns/op
Iteration   3: 816.700 ns/op
Iteration   4: 816.789 ns/op
Iteration   5: 824.695 ns/op
Iteration   6: 816.730 ns/op
Iteration   7: 816.801 ns/op
Iteration   8: 817.253 ns/op
Iteration   9: 817.045 ns/op
Iteration  10: 827.222 ns/op
Iteration  11: 817.324 ns/op
Iteration  12: 817.008 ns/op
Iteration  13: 817.152 ns/op
Iteration  14: 817.197 ns/op
Iteration  15: 830.254 ns/op
Iteration  16: 816.704 ns/op
Iteration  17: 816.419 ns/op
Iteration  18: 816.529 ns/op
Iteration  19: 819.440 ns/op
Iteration  20: 832.844 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 795.487 ns/op
# Warmup Iteration   2: 798.725 ns/op
# Warmup Iteration   3: 892.372 ns/op
# Warmup Iteration   4: 892.479 ns/op
# Warmup Iteration   5: 892.326 ns/op
Iteration   1: 829.583 ns/op
Iteration   2: 815.816 ns/op
Iteration   3: 816.006 ns/op
Iteration   4: 816.127 ns/op
Iteration   5: 823.675 ns/op
Iteration   6: 815.839 ns/op
Iteration   7: 815.553 ns/op
Iteration   8: 816.092 ns/op
Iteration   9: 816.007 ns/op
Iteration  10: 826.489 ns/op
Iteration  11: 815.893 ns/op
Iteration  12: 817.980 ns/op
Iteration  13: 817.878 ns/op
Iteration  14: 818.521 ns/op
Iteration  15: 828.555 ns/op
Iteration  16: 815.061 ns/op
Iteration  17: 815.054 ns/op
Iteration  18: 815.130 ns/op
Iteration  19: 821.912 ns/op
Iteration  20: 827.480 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 794.914 ns/op
# Warmup Iteration   2: 801.131 ns/op
# Warmup Iteration   3: 894.548 ns/op
# Warmup Iteration   4: 894.222 ns/op
# Warmup Iteration   5: 893.027 ns/op
Iteration   1: 833.703 ns/op
Iteration   2: 818.970 ns/op
Iteration   3: 818.350 ns/op
Iteration   4: 818.335 ns/op
Iteration   5: 825.687 ns/op
Iteration   6: 818.109 ns/op
Iteration   7: 817.969 ns/op
Iteration   8: 817.999 ns/op
Iteration   9: 818.039 ns/op
Iteration  10: 827.181 ns/op
Iteration  11: 818.077 ns/op
Iteration  12: 817.879 ns/op
Iteration  13: 817.719 ns/op
Iteration  14: 818.116 ns/op
Iteration  15: 830.910 ns/op
Iteration  16: 818.095 ns/op
Iteration  17: 818.241 ns/op
Iteration  18: 817.796 ns/op
Iteration  19: 819.364 ns/op
Iteration  20: 833.484 ns/op


Result "benchmark.StringContains.regexMatches":
  811.086 ±(99.9%) 6.659 ns/op [Average]
  (min, avg, max) = (769.617, 811.086, 835.195), stdev = 19.633
  CI (99.9%): [804.427, 817.745] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpCr1;8D34(!*%u<)PtfbGrk|<9A%=7A!Mw`(Uj1f'"?4.Vh{	81(
 #{d?Y)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.419 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.866 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.848 ns/op
Iteration   1: 9.842 ns/op
Iteration   2: 9.849 ns/op
Iteration   3: 9.849 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.848 ns/op
Iteration   6: 9.845 ns/op
Iteration   7: 9.864 ns/op
Iteration   8: 9.937 ns/op
Iteration   9: 9.907 ns/op
Iteration  10: 9.857 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.901 ns/op
Iteration  13: 9.858 ns/op
Iteration  14: 9.868 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.861 ns/op
Iteration  17: 9.853 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.851 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.189 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.927 ns/op
# Warmup Iteration   4: 9.937 ns/op
# Warmup Iteration   5: 9.937 ns/op
Iteration   1: 9.928 ns/op
Iteration   2: 9.947 ns/op
Iteration   3: 9.931 ns/op
Iteration   4: 9.934 ns/op
Iteration   5: 9.943 ns/op
Iteration   6: 9.930 ns/op
Iteration   7: 9.931 ns/op
Iteration   8: 9.939 ns/op
Iteration   9: 9.934 ns/op
Iteration  10: 9.952 ns/op
Iteration  11: 9.944 ns/op
Iteration  12: 9.931 ns/op
Iteration  13: 9.938 ns/op
Iteration  14: 9.949 ns/op
Iteration  15: 9.930 ns/op
Iteration  16: 9.926 ns/op
Iteration  17: 9.940 ns/op
Iteration  18: 9.946 ns/op
Iteration  19: 9.969 ns/op
Iteration  20: 9.946 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.420 ns/op
# Warmup Iteration   2: 9.744 ns/op
# Warmup Iteration   3: 9.819 ns/op
# Warmup Iteration   4: 9.819 ns/op
# Warmup Iteration   5: 9.832 ns/op
Iteration   1: 9.849 ns/op
Iteration   2: 9.833 ns/op
Iteration   3: 9.827 ns/op
Iteration   4: 9.847 ns/op
Iteration   5: 9.840 ns/op
Iteration   6: 9.830 ns/op
Iteration   7: 9.823 ns/op
Iteration   8: 9.821 ns/op
Iteration   9: 9.826 ns/op
Iteration  10: 9.832 ns/op
Iteration  11: 9.843 ns/op
Iteration  12: 9.836 ns/op
Iteration  13: 9.826 ns/op
Iteration  14: 9.815 ns/op
Iteration  15: 9.830 ns/op
Iteration  16: 9.812 ns/op
Iteration  17: 9.831 ns/op
Iteration  18: 9.838 ns/op
Iteration  19: 9.843 ns/op
Iteration  20: 9.830 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.480 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.871 ns/op
# Warmup Iteration   4: 9.849 ns/op
# Warmup Iteration   5: 9.858 ns/op
Iteration   1: 9.845 ns/op
Iteration   2: 9.856 ns/op
Iteration   3: 9.855 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.856 ns/op
Iteration   6: 9.848 ns/op
Iteration   7: 9.846 ns/op
Iteration   8: 9.852 ns/op
Iteration   9: 9.855 ns/op
Iteration  10: 9.858 ns/op
Iteration  11: 9.869 ns/op
Iteration  12: 10.552 ns/op
Iteration  13: 10.551 ns/op
Iteration  14: 10.550 ns/op
Iteration  15: 10.550 ns/op
Iteration  16: 10.552 ns/op
Iteration  17: 10.550 ns/op
Iteration  18: 10.551 ns/op
Iteration  19: 10.551 ns/op
Iteration  20: 10.552 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.475 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.851 ns/op
# Warmup Iteration   4: 9.859 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.840 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.861 ns/op
Iteration   6: 9.919 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.858 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.868 ns/op
Iteration  12: 9.879 ns/op
Iteration  13: 9.869 ns/op
Iteration  14: 9.849 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.844 ns/op
Iteration  17: 9.861 ns/op
Iteration  18: 9.853 ns/op
Iteration  19: 9.834 ns/op
Iteration  20: 9.867 ns/op


Result "benchmark.StringContains.stringContains":
  9.934 ±(99.9%) 0.067 ns/op [Average]
  (min, avg, max) = (9.812, 9.934, 10.552), stdev = 0.199
  CI (99.9%): [9.866, 10.001] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpCr1;8D34(!*%u<)PtfbGrk|<9A%=7A!Mw`(Uj1f'"?4.Vh{	81(
 #{d?Y  avgt  100  811.086 ± 6.659  ns/op
StringContains.stringContains     http  httpCr1;8D34(!*%u<)PtfbGrk|<9A%=7A!Mw`(Uj1f'"?4.Vh{	81(
 #{d?Y  avgt  100    9.934 ± 0.067  ns/op

Benchmark result is saved to http_64_0_4.csv
