# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpK4
!%pS8d}:a"k\f@	P3NLcf \js/FK+k9J7h7 ?X8pFEH
*1>SP4HM$ZH)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 797.859 ns/op
# Warmup Iteration   2: 816.658 ns/op
# Warmup Iteration   3: 909.864 ns/op
# Warmup Iteration   4: 908.906 ns/op
# Warmup Iteration   5: 907.836 ns/op
Iteration   1: 838.513 ns/op
Iteration   2: 818.100 ns/op
Iteration   3: 817.020 ns/op
Iteration   4: 817.155 ns/op
Iteration   5: 824.754 ns/op
Iteration   6: 816.504 ns/op
Iteration   7: 817.385 ns/op
Iteration   8: 817.391 ns/op
Iteration   9: 816.555 ns/op
Iteration  10: 828.407 ns/op
Iteration  11: 816.911 ns/op
Iteration  12: 816.624 ns/op
Iteration  13: 816.576 ns/op
Iteration  14: 816.602 ns/op
Iteration  15: 835.605 ns/op
Iteration  16: 820.112 ns/op
Iteration  17: 820.492 ns/op
Iteration  18: 820.468 ns/op
Iteration  19: 820.971 ns/op
Iteration  20: 838.604 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 794.483 ns/op
# Warmup Iteration   2: 798.625 ns/op
# Warmup Iteration   3: 892.802 ns/op
# Warmup Iteration   4: 893.072 ns/op
# Warmup Iteration   5: 893.658 ns/op
Iteration   1: 831.461 ns/op
Iteration   2: 816.608 ns/op
Iteration   3: 815.371 ns/op
Iteration   4: 815.221 ns/op
Iteration   5: 823.687 ns/op
Iteration   6: 815.613 ns/op
Iteration   7: 815.682 ns/op
Iteration   8: 816.367 ns/op
Iteration   9: 816.226 ns/op
Iteration  10: 826.442 ns/op
Iteration  11: 815.343 ns/op
Iteration  12: 817.389 ns/op
Iteration  13: 818.390 ns/op
Iteration  14: 818.424 ns/op
Iteration  15: 830.329 ns/op
Iteration  16: 816.050 ns/op
Iteration  17: 815.313 ns/op
Iteration  18: 815.099 ns/op
Iteration  19: 819.518 ns/op
Iteration  20: 829.768 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 815.984 ns/op
# Warmup Iteration   2: 841.289 ns/op
# Warmup Iteration   3: 845.856 ns/op
# Warmup Iteration   4: 846.379 ns/op
# Warmup Iteration   5: 846.240 ns/op
Iteration   1: 783.747 ns/op
Iteration   2: 777.058 ns/op
Iteration   3: 776.953 ns/op
Iteration   4: 777.058 ns/op
Iteration   5: 780.963 ns/op
Iteration   6: 771.494 ns/op
Iteration   7: 771.676 ns/op
Iteration   8: 772.021 ns/op
Iteration   9: 781.624 ns/op
Iteration  10: 771.134 ns/op
Iteration  11: 771.462 ns/op
Iteration  12: 771.989 ns/op
Iteration  13: 772.213 ns/op
Iteration  14: 784.290 ns/op
Iteration  15: 771.591 ns/op
Iteration  16: 771.715 ns/op
Iteration  17: 772.037 ns/op
Iteration  18: 781.985 ns/op
Iteration  19: 777.398 ns/op
Iteration  20: 771.590 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 807.503 ns/op
# Warmup Iteration   2: 841.020 ns/op
# Warmup Iteration   3: 844.064 ns/op
# Warmup Iteration   4: 843.712 ns/op
# Warmup Iteration   5: 843.317 ns/op
Iteration   1: 775.349 ns/op
Iteration   2: 768.959 ns/op
Iteration   3: 769.224 ns/op
Iteration   4: 769.102 ns/op
Iteration   5: 776.612 ns/op
Iteration   6: 769.517 ns/op
Iteration   7: 770.367 ns/op
Iteration   8: 770.160 ns/op
Iteration   9: 780.652 ns/op
Iteration  10: 772.300 ns/op
Iteration  11: 772.497 ns/op
Iteration  12: 768.591 ns/op
Iteration  13: 769.967 ns/op
Iteration  14: 782.475 ns/op
Iteration  15: 769.709 ns/op
Iteration  16: 769.871 ns/op
Iteration  17: 770.094 ns/op
Iteration  18: 781.737 ns/op
Iteration  19: 774.126 ns/op
Iteration  20: 769.744 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 813.982 ns/op
# Warmup Iteration   2: 841.998 ns/op
# Warmup Iteration   3: 844.743 ns/op
# Warmup Iteration   4: 844.681 ns/op
# Warmup Iteration   5: 845.056 ns/op
Iteration   1: 781.315 ns/op
Iteration   2: 772.485 ns/op
Iteration   3: 772.128 ns/op
Iteration   4: 772.221 ns/op
Iteration   5: 777.204 ns/op
Iteration   6: 769.702 ns/op
Iteration   7: 769.661 ns/op
Iteration   8: 770.588 ns/op
Iteration   9: 779.896 ns/op
Iteration  10: 770.112 ns/op
Iteration  11: 769.872 ns/op
Iteration  12: 770.049 ns/op
Iteration  13: 770.176 ns/op
Iteration  14: 782.640 ns/op
Iteration  15: 769.680 ns/op
Iteration  16: 770.246 ns/op
Iteration  17: 769.892 ns/op
Iteration  18: 786.708 ns/op
Iteration  19: 769.960 ns/op
Iteration  20: 769.901 ns/op


Result "benchmark.StringContains.regexMatches":
  792.485 ±(99.9%) 8.049 ns/op [Average]
  (min, avg, max) = (768.591, 792.485, 838.604), stdev = 23.731
  CI (99.9%): [784.437, 800.534] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpK4
!%pS8d}:a"k\f@	P3NLcf \js/FK+k9J7h7 ?X8pFEH
*1>SP4HM$ZH)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.501 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.978 ns/op
# Warmup Iteration   4: 9.984 ns/op
# Warmup Iteration   5: 9.976 ns/op
Iteration   1: 9.970 ns/op
Iteration   2: 9.990 ns/op
Iteration   3: 9.976 ns/op
Iteration   4: 9.980 ns/op
Iteration   5: 9.970 ns/op
Iteration   6: 9.975 ns/op
Iteration   7: 9.954 ns/op
Iteration   8: 9.991 ns/op
Iteration   9: 9.984 ns/op
Iteration  10: 9.967 ns/op
Iteration  11: 9.984 ns/op
Iteration  12: 10.552 ns/op
Iteration  13: 10.551 ns/op
Iteration  14: 10.551 ns/op
Iteration  15: 10.552 ns/op
Iteration  16: 10.551 ns/op
Iteration  17: 10.551 ns/op
Iteration  18: 10.551 ns/op
Iteration  19: 10.572 ns/op
Iteration  20: 10.570 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.479 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.836 ns/op
# Warmup Iteration   4: 9.850 ns/op
# Warmup Iteration   5: 9.848 ns/op
Iteration   1: 9.838 ns/op
Iteration   2: 9.852 ns/op
Iteration   3: 9.851 ns/op
Iteration   4: 9.841 ns/op
Iteration   5: 9.855 ns/op
Iteration   6: 9.846 ns/op
Iteration   7: 9.841 ns/op
Iteration   8: 9.877 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.840 ns/op
Iteration  11: 9.842 ns/op
Iteration  12: 10.551 ns/op
Iteration  13: 10.554 ns/op
Iteration  14: 10.551 ns/op
Iteration  15: 10.550 ns/op
Iteration  16: 10.552 ns/op
Iteration  17: 10.551 ns/op
Iteration  18: 10.551 ns/op
Iteration  19: 10.551 ns/op
Iteration  20: 10.569 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.501 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.955 ns/op
# Warmup Iteration   4: 9.950 ns/op
# Warmup Iteration   5: 9.963 ns/op
Iteration   1: 9.959 ns/op
Iteration   2: 9.970 ns/op
Iteration   3: 9.967 ns/op
Iteration   4: 9.965 ns/op
Iteration   5: 9.974 ns/op
Iteration   6: 9.969 ns/op
Iteration   7: 9.966 ns/op
Iteration   8: 9.984 ns/op
Iteration   9: 9.940 ns/op
Iteration  10: 9.965 ns/op
Iteration  11: 9.966 ns/op
Iteration  12: 12.373 ns/op
Iteration  13: 12.374 ns/op
Iteration  14: 12.373 ns/op
Iteration  15: 12.373 ns/op
Iteration  16: 12.374 ns/op
Iteration  17: 12.373 ns/op
Iteration  18: 12.375 ns/op
Iteration  19: 12.372 ns/op
Iteration  20: 12.393 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.460 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.926 ns/op
# Warmup Iteration   4: 9.939 ns/op
# Warmup Iteration   5: 9.927 ns/op
Iteration   1: 9.939 ns/op
Iteration   2: 9.945 ns/op
Iteration   3: 9.940 ns/op
Iteration   4: 9.952 ns/op
Iteration   5: 9.948 ns/op
Iteration   6: 9.956 ns/op
Iteration   7: 9.941 ns/op
Iteration   8: 9.977 ns/op
Iteration   9: 9.946 ns/op
Iteration  10: 9.941 ns/op
Iteration  11: 9.948 ns/op
Iteration  12: 10.549 ns/op
Iteration  13: 10.551 ns/op
Iteration  14: 10.550 ns/op
Iteration  15: 10.551 ns/op
Iteration  16: 10.550 ns/op
Iteration  17: 10.549 ns/op
Iteration  18: 10.550 ns/op
Iteration  19: 10.559 ns/op
Iteration  20: 10.551 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.483 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.899 ns/op
# Warmup Iteration   4: 9.903 ns/op
# Warmup Iteration   5: 9.877 ns/op
Iteration   1: 9.899 ns/op
Iteration   2: 9.901 ns/op
Iteration   3: 9.892 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.898 ns/op
Iteration   6: 9.908 ns/op
Iteration   7: 9.913 ns/op
Iteration   8: 9.906 ns/op
Iteration   9: 9.904 ns/op
Iteration  10: 9.911 ns/op
Iteration  11: 9.876 ns/op
Iteration  12: 10.548 ns/op
Iteration  13: 10.548 ns/op
Iteration  14: 10.549 ns/op
Iteration  15: 10.548 ns/op
Iteration  16: 10.549 ns/op
Iteration  17: 10.548 ns/op
Iteration  18: 10.548 ns/op
Iteration  19: 10.549 ns/op
Iteration  20: 10.549 ns/op


Result "benchmark.StringContains.stringContains":
  10.373 ±(99.9%) 0.237 ns/op [Average]
  (min, avg, max) = (9.838, 10.373, 12.393), stdev = 0.698
  CI (99.9%): [10.136, 10.610] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpK4
!%pS8d}:a"k\f@	P3NLcf \js/FK+k9J7h7 ?X8pFEH
*1>SP4HM$ZH  avgt  100  792.485 ± 8.049  ns/op
StringContains.stringContains     http  httpK4
!%pS8d}:a"k\f@	P3NLcf \js/FK+k9J7h7 ?X8pFEH
*1>SP4HM$ZH  avgt  100   10.373 ± 0.237  ns/op

Benchmark result is saved to http_64_0_6.csv
