# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 0:F$/`e` 2]2-:MK>raTshJ.Fdubw}YQ6&`86;![ef]h+i1http@OJAWca7fG#)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 351.140 ns/op
# Warmup Iteration   2: 362.253 ns/op
# Warmup Iteration   3: 281.262 ns/op
# Warmup Iteration   4: 272.935 ns/op
# Warmup Iteration   5: 270.405 ns/op
Iteration   1: 273.726 ns/op
Iteration   2: 274.934 ns/op
Iteration   3: 270.180 ns/op
Iteration   4: 276.284 ns/op
Iteration   5: 270.354 ns/op
Iteration   6: 278.338 ns/op
Iteration   7: 271.849 ns/op
Iteration   8: 270.365 ns/op
Iteration   9: 271.782 ns/op
Iteration  10: 270.319 ns/op
Iteration  11: 271.877 ns/op
Iteration  12: 270.096 ns/op
Iteration  13: 271.562 ns/op
Iteration  14: 271.366 ns/op
Iteration  15: 270.319 ns/op
Iteration  16: 271.624 ns/op
Iteration  17: 270.537 ns/op
Iteration  18: 273.435 ns/op
Iteration  19: 271.195 ns/op
Iteration  20: 272.629 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 351.874 ns/op
# Warmup Iteration   2: 348.063 ns/op
# Warmup Iteration   3: 275.399 ns/op
# Warmup Iteration   4: 269.065 ns/op
# Warmup Iteration   5: 266.838 ns/op
Iteration   1: 270.554 ns/op
Iteration   2: 271.271 ns/op
Iteration   3: 267.661 ns/op
Iteration   4: 273.028 ns/op
Iteration   5: 266.893 ns/op
Iteration   6: 274.524 ns/op
Iteration   7: 268.113 ns/op
Iteration   8: 267.267 ns/op
Iteration   9: 268.103 ns/op
Iteration  10: 266.909 ns/op
Iteration  11: 267.896 ns/op
Iteration  12: 267.898 ns/op
Iteration  13: 267.026 ns/op
Iteration  14: 268.003 ns/op
Iteration  15: 266.908 ns/op
Iteration  16: 267.896 ns/op
Iteration  17: 266.901 ns/op
Iteration  18: 269.468 ns/op
Iteration  19: 268.577 ns/op
Iteration  20: 268.958 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 351.769 ns/op
# Warmup Iteration   2: 360.153 ns/op
# Warmup Iteration   3: 281.414 ns/op
# Warmup Iteration   4: 274.964 ns/op
# Warmup Iteration   5: 270.281 ns/op
Iteration   1: 274.133 ns/op
Iteration   2: 275.274 ns/op
Iteration   3: 270.479 ns/op
Iteration   4: 276.395 ns/op
Iteration   5: 270.599 ns/op
Iteration   6: 278.045 ns/op
Iteration   7: 270.443 ns/op
Iteration   8: 271.559 ns/op
Iteration   9: 271.773 ns/op
Iteration  10: 270.377 ns/op
Iteration  11: 271.789 ns/op
Iteration  12: 270.819 ns/op
Iteration  13: 271.503 ns/op
Iteration  14: 272.152 ns/op
Iteration  15: 270.661 ns/op
Iteration  16: 272.297 ns/op
Iteration  17: 270.617 ns/op
Iteration  18: 276.145 ns/op
Iteration  19: 270.722 ns/op
Iteration  20: 272.319 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 349.174 ns/op
# Warmup Iteration   2: 347.013 ns/op
# Warmup Iteration   3: 273.377 ns/op
# Warmup Iteration   4: 268.530 ns/op
# Warmup Iteration   5: 266.183 ns/op
Iteration   1: 269.431 ns/op
Iteration   2: 270.437 ns/op
Iteration   3: 266.763 ns/op
Iteration   4: 272.801 ns/op
Iteration   5: 267.742 ns/op
Iteration   6: 272.150 ns/op
Iteration   7: 267.486 ns/op
Iteration   8: 266.240 ns/op
Iteration   9: 267.606 ns/op
Iteration  10: 266.134 ns/op
Iteration  11: 267.582 ns/op
Iteration  12: 267.679 ns/op
Iteration  13: 266.244 ns/op
Iteration  14: 267.718 ns/op
Iteration  15: 266.184 ns/op
Iteration  16: 268.467 ns/op
Iteration  17: 265.938 ns/op
Iteration  18: 268.520 ns/op
Iteration  19: 267.744 ns/op
Iteration  20: 266.186 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 348.669 ns/op
# Warmup Iteration   2: 352.608 ns/op
# Warmup Iteration   3: 279.185 ns/op
# Warmup Iteration   4: 272.560 ns/op
# Warmup Iteration   5: 270.182 ns/op
Iteration   1: 273.528 ns/op
Iteration   2: 274.625 ns/op
Iteration   3: 270.298 ns/op
Iteration   4: 276.066 ns/op
Iteration   5: 270.282 ns/op
Iteration   6: 277.540 ns/op
Iteration   7: 271.332 ns/op
Iteration   8: 270.212 ns/op
Iteration   9: 271.114 ns/op
Iteration  10: 270.058 ns/op
Iteration  11: 271.457 ns/op
Iteration  12: 270.101 ns/op
Iteration  13: 271.196 ns/op
Iteration  14: 271.170 ns/op
Iteration  15: 269.856 ns/op
Iteration  16: 271.139 ns/op
Iteration  17: 270.286 ns/op
Iteration  18: 271.275 ns/op
Iteration  19: 269.458 ns/op
Iteration  20: 271.676 ns/op


Result "benchmark.StringContains.regexMatches":
  270.564 ±(99.9%) 0.957 ns/op [Average]
  (min, avg, max) = (265.938, 270.564, 278.338), stdev = 2.821
  CI (99.9%): [269.608, 271.521] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 0:F$/`e` 2]2-:MK>raTshJ.Fdubw}YQ6&`86;![ef]h+i1http@OJAWca7fG#)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.946 ns/op
# Warmup Iteration   2: 17.084 ns/op
# Warmup Iteration   3: 16.520 ns/op
# Warmup Iteration   4: 16.500 ns/op
# Warmup Iteration   5: 16.531 ns/op
Iteration   1: 16.527 ns/op
Iteration   2: 16.511 ns/op
Iteration   3: 16.507 ns/op
Iteration   4: 16.519 ns/op
Iteration   5: 16.511 ns/op
Iteration   6: 16.514 ns/op
Iteration   7: 16.530 ns/op
Iteration   8: 16.540 ns/op
Iteration   9: 16.529 ns/op
Iteration  10: 16.520 ns/op
Iteration  11: 16.517 ns/op
Iteration  12: 16.529 ns/op
Iteration  13: 16.501 ns/op
Iteration  14: 16.499 ns/op
Iteration  15: 16.523 ns/op
Iteration  16: 16.500 ns/op
Iteration  17: 16.515 ns/op
Iteration  18: 16.507 ns/op
Iteration  19: 16.506 ns/op
Iteration  20: 16.539 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.115 ns/op
# Warmup Iteration   2: 16.997 ns/op
# Warmup Iteration   3: 16.562 ns/op
# Warmup Iteration   4: 16.556 ns/op
# Warmup Iteration   5: 16.562 ns/op
Iteration   1: 16.560 ns/op
Iteration   2: 16.557 ns/op
Iteration   3: 16.564 ns/op
Iteration   4: 16.570 ns/op
Iteration   5: 16.559 ns/op
Iteration   6: 16.543 ns/op
Iteration   7: 16.580 ns/op
Iteration   8: 16.565 ns/op
Iteration   9: 16.579 ns/op
Iteration  10: 16.565 ns/op
Iteration  11: 16.580 ns/op
Iteration  12: 16.559 ns/op
Iteration  13: 16.551 ns/op
Iteration  14: 16.558 ns/op
Iteration  15: 16.558 ns/op
Iteration  16: 16.553 ns/op
Iteration  17: 16.557 ns/op
Iteration  18: 16.563 ns/op
Iteration  19: 16.547 ns/op
Iteration  20: 16.584 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.956 ns/op
# Warmup Iteration   2: 17.144 ns/op
# Warmup Iteration   3: 16.533 ns/op
# Warmup Iteration   4: 16.498 ns/op
# Warmup Iteration   5: 16.504 ns/op
Iteration   1: 16.508 ns/op
Iteration   2: 16.519 ns/op
Iteration   3: 16.526 ns/op
Iteration   4: 16.523 ns/op
Iteration   5: 16.526 ns/op
Iteration   6: 16.536 ns/op
Iteration   7: 16.531 ns/op
Iteration   8: 16.529 ns/op
Iteration   9: 16.489 ns/op
Iteration  10: 16.515 ns/op
Iteration  11: 16.508 ns/op
Iteration  12: 16.523 ns/op
Iteration  13: 16.507 ns/op
Iteration  14: 16.511 ns/op
Iteration  15: 16.518 ns/op
Iteration  16: 16.513 ns/op
Iteration  17: 16.515 ns/op
Iteration  18: 16.516 ns/op
Iteration  19: 16.478 ns/op
Iteration  20: 16.494 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.946 ns/op
# Warmup Iteration   2: 17.155 ns/op
# Warmup Iteration   3: 16.542 ns/op
# Warmup Iteration   4: 16.522 ns/op
# Warmup Iteration   5: 16.516 ns/op
Iteration   1: 16.519 ns/op
Iteration   2: 16.512 ns/op
Iteration   3: 16.507 ns/op
Iteration   4: 16.509 ns/op
Iteration   5: 16.522 ns/op
Iteration   6: 16.523 ns/op
Iteration   7: 16.525 ns/op
Iteration   8: 16.541 ns/op
Iteration   9: 16.544 ns/op
Iteration  10: 16.512 ns/op
Iteration  11: 16.547 ns/op
Iteration  12: 16.525 ns/op
Iteration  13: 16.526 ns/op
Iteration  14: 16.525 ns/op
Iteration  15: 16.530 ns/op
Iteration  16: 16.515 ns/op
Iteration  17: 16.512 ns/op
Iteration  18: 16.525 ns/op
Iteration  19: 16.516 ns/op
Iteration  20: 16.520 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.942 ns/op
# Warmup Iteration   2: 16.979 ns/op
# Warmup Iteration   3: 16.902 ns/op
# Warmup Iteration   4: 16.844 ns/op
# Warmup Iteration   5: 16.822 ns/op
Iteration   1: 16.842 ns/op
Iteration   2: 16.872 ns/op
Iteration   3: 16.887 ns/op
Iteration   4: 16.861 ns/op
Iteration   5: 16.849 ns/op
Iteration   6: 16.901 ns/op
Iteration   7: 16.861 ns/op
Iteration   8: 16.834 ns/op
Iteration   9: 16.844 ns/op
Iteration  10: 16.872 ns/op
Iteration  11: 16.800 ns/op
Iteration  12: 16.867 ns/op
Iteration  13: 16.824 ns/op
Iteration  14: 16.873 ns/op
Iteration  15: 16.813 ns/op
Iteration  16: 16.846 ns/op
Iteration  17: 16.875 ns/op
Iteration  18: 16.833 ns/op
Iteration  19: 16.816 ns/op
Iteration  20: 16.823 ns/op


Result "benchmark.StringContains.stringContains":
  16.593 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (16.478, 16.593, 16.901), stdev = 0.131
  CI (99.9%): [16.549, 16.638] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  0:F$/`e` 2]2-:MK>raTshJ.Fdubw}YQ6&`86;![ef]h+i1http@OJAWca7fG#  avgt  100  270.564 ± 0.957  ns/op
StringContains.stringContains     http  0:F$/`e` 2]2-:MK>raTshJ.Fdubw}YQ6&`86;![ef]h+i1http@OJAWca7fG#  avgt  100   16.593 ± 0.044  ns/op

Benchmark result is saved to http_64_0.75_6.csv
