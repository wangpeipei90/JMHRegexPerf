# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = )pZ9@;iFiA+zsZs[11^ZaEGpmG?QCUGc}\ pq)|GfbJ[\DL%)R_rhH6X`A%uYCU0=G`R ~-UBOv5vz1v[C,qo9nk	=Gm	UhttpVlqB0R+Jz@|x?^<8|GoT$@g^p
J`)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 514.874 ns/op
# Warmup Iteration   2: 512.474 ns/op
# Warmup Iteration   3: 556.678 ns/op
# Warmup Iteration   4: 496.011 ns/op
# Warmup Iteration   5: 479.767 ns/op
Iteration   1: 485.167 ns/op
Iteration   2: 479.482 ns/op
Iteration   3: 480.108 ns/op
Iteration   4: 491.565 ns/op
Iteration   5: 480.471 ns/op
Iteration   6: 480.769 ns/op
Iteration   7: 489.659 ns/op
Iteration   8: 480.017 ns/op
Iteration   9: 480.346 ns/op
Iteration  10: 495.714 ns/op
Iteration  11: 480.068 ns/op
Iteration  12: 479.030 ns/op
Iteration  13: 494.661 ns/op
Iteration  14: 479.404 ns/op
Iteration  15: 479.729 ns/op
Iteration  16: 483.388 ns/op
Iteration  17: 479.759 ns/op
Iteration  18: 480.648 ns/op
Iteration  19: 482.862 ns/op
Iteration  20: 479.995 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 517.800 ns/op
# Warmup Iteration   2: 529.572 ns/op
# Warmup Iteration   3: 530.485 ns/op
# Warmup Iteration   4: 474.786 ns/op
# Warmup Iteration   5: 460.014 ns/op
Iteration   1: 463.542 ns/op
Iteration   2: 455.803 ns/op
Iteration   3: 455.941 ns/op
Iteration   4: 460.725 ns/op
Iteration   5: 455.823 ns/op
Iteration   6: 456.217 ns/op
Iteration   7: 462.871 ns/op
Iteration   8: 456.407 ns/op
Iteration   9: 465.371 ns/op
Iteration  10: 455.987 ns/op
Iteration  11: 455.644 ns/op
Iteration  12: 470.492 ns/op
Iteration  13: 457.980 ns/op
Iteration  14: 457.174 ns/op
Iteration  15: 459.096 ns/op
Iteration  16: 457.343 ns/op
Iteration  17: 458.030 ns/op
Iteration  18: 458.842 ns/op
Iteration  19: 456.285 ns/op
Iteration  20: 456.827 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 517.740 ns/op
# Warmup Iteration   2: 528.602 ns/op
# Warmup Iteration   3: 529.230 ns/op
# Warmup Iteration   4: 470.687 ns/op
# Warmup Iteration   5: 453.848 ns/op
Iteration   1: 458.841 ns/op
Iteration   2: 454.398 ns/op
Iteration   3: 454.178 ns/op
Iteration   4: 459.665 ns/op
Iteration   5: 453.966 ns/op
Iteration   6: 457.173 ns/op
Iteration   7: 459.605 ns/op
Iteration   8: 455.183 ns/op
Iteration   9: 464.783 ns/op
Iteration  10: 454.511 ns/op
Iteration  11: 454.131 ns/op
Iteration  12: 466.952 ns/op
Iteration  13: 453.822 ns/op
Iteration  14: 454.192 ns/op
Iteration  15: 456.781 ns/op
Iteration  16: 453.935 ns/op
Iteration  17: 454.315 ns/op
Iteration  18: 456.241 ns/op
Iteration  19: 454.010 ns/op
Iteration  20: 454.247 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 513.698 ns/op
# Warmup Iteration   2: 529.923 ns/op
# Warmup Iteration   3: 530.363 ns/op
# Warmup Iteration   4: 469.588 ns/op
# Warmup Iteration   5: 456.656 ns/op
Iteration   1: 460.821 ns/op
Iteration   2: 456.897 ns/op
Iteration   3: 456.391 ns/op
Iteration   4: 463.565 ns/op
Iteration   5: 459.361 ns/op
Iteration   6: 460.956 ns/op
Iteration   7: 462.298 ns/op
Iteration   8: 456.352 ns/op
Iteration   9: 465.691 ns/op
Iteration  10: 456.068 ns/op
Iteration  11: 456.566 ns/op
Iteration  12: 470.716 ns/op
Iteration  13: 456.185 ns/op
Iteration  14: 456.177 ns/op
Iteration  15: 458.152 ns/op
Iteration  16: 455.829 ns/op
Iteration  17: 455.916 ns/op
Iteration  18: 458.015 ns/op
Iteration  19: 456.078 ns/op
Iteration  20: 456.506 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 514.374 ns/op
# Warmup Iteration   2: 532.472 ns/op
# Warmup Iteration   3: 529.997 ns/op
# Warmup Iteration   4: 468.714 ns/op
# Warmup Iteration   5: 453.148 ns/op
Iteration   1: 458.288 ns/op
Iteration   2: 453.341 ns/op
Iteration   3: 454.019 ns/op
Iteration   4: 461.475 ns/op
Iteration   5: 456.823 ns/op
Iteration   6: 461.756 ns/op
Iteration   7: 456.312 ns/op
Iteration   8: 454.310 ns/op
Iteration   9: 464.417 ns/op
Iteration  10: 453.614 ns/op
Iteration  11: 454.116 ns/op
Iteration  12: 468.087 ns/op
Iteration  13: 455.089 ns/op
Iteration  14: 454.751 ns/op
Iteration  15: 456.992 ns/op
Iteration  16: 454.879 ns/op
Iteration  17: 454.766 ns/op
Iteration  18: 457.141 ns/op
Iteration  19: 454.913 ns/op
Iteration  20: 455.088 ns/op


Result "benchmark.StringContains.regexMatches":
  462.889 ±(99.9%) 3.742 ns/op [Average]
  (min, avg, max) = (453.341, 462.889, 495.714), stdev = 11.033
  CI (99.9%): [459.147, 466.631] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = )pZ9@;iFiA+zsZs[11^ZaEGpmG?QCUGc}\ pq)|GfbJ[\DL%)R_rhH6X`A%uYCU0=G`R ~-UBOv5vz1v[C,qo9nk	=Gm	UhttpVlqB0R+Jz@|x?^<8|GoT$@g^p
J`)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 22.636 ns/op
# Warmup Iteration   2: 24.026 ns/op
# Warmup Iteration   3: 23.217 ns/op
# Warmup Iteration   4: 23.192 ns/op
# Warmup Iteration   5: 23.209 ns/op
Iteration   1: 23.237 ns/op
Iteration   2: 23.212 ns/op
Iteration   3: 23.230 ns/op
Iteration   4: 23.198 ns/op
Iteration   5: 23.236 ns/op
Iteration   6: 23.219 ns/op
Iteration   7: 23.207 ns/op
Iteration   8: 23.218 ns/op
Iteration   9: 23.213 ns/op
Iteration  10: 23.211 ns/op
Iteration  11: 23.245 ns/op
Iteration  12: 23.210 ns/op
Iteration  13: 23.205 ns/op
Iteration  14: 23.186 ns/op
Iteration  15: 23.200 ns/op
Iteration  16: 23.192 ns/op
Iteration  17: 23.235 ns/op
Iteration  18: 23.229 ns/op
Iteration  19: 23.208 ns/op
Iteration  20: 23.203 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 22.671 ns/op
# Warmup Iteration   2: 23.930 ns/op
# Warmup Iteration   3: 23.256 ns/op
# Warmup Iteration   4: 23.266 ns/op
# Warmup Iteration   5: 23.263 ns/op
Iteration   1: 23.251 ns/op
Iteration   2: 23.274 ns/op
Iteration   3: 23.268 ns/op
Iteration   4: 23.265 ns/op
Iteration   5: 23.271 ns/op
Iteration   6: 23.279 ns/op
Iteration   7: 23.263 ns/op
Iteration   8: 23.283 ns/op
Iteration   9: 23.262 ns/op
Iteration  10: 23.268 ns/op
Iteration  11: 23.291 ns/op
Iteration  12: 23.262 ns/op
Iteration  13: 23.270 ns/op
Iteration  14: 23.254 ns/op
Iteration  15: 23.255 ns/op
Iteration  16: 23.273 ns/op
Iteration  17: 23.253 ns/op
Iteration  18: 23.264 ns/op
Iteration  19: 23.300 ns/op
Iteration  20: 23.305 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 22.781 ns/op
# Warmup Iteration   2: 23.771 ns/op
# Warmup Iteration   3: 23.697 ns/op
# Warmup Iteration   4: 23.730 ns/op
# Warmup Iteration   5: 23.681 ns/op
Iteration   1: 23.697 ns/op
Iteration   2: 23.680 ns/op
Iteration   3: 23.708 ns/op
Iteration   4: 23.683 ns/op
Iteration   5: 23.654 ns/op
Iteration   6: 23.718 ns/op
Iteration   7: 23.630 ns/op
Iteration   8: 23.769 ns/op
Iteration   9: 23.735 ns/op
Iteration  10: 23.763 ns/op
Iteration  11: 23.739 ns/op
Iteration  12: 23.752 ns/op
Iteration  13: 23.716 ns/op
Iteration  14: 23.720 ns/op
Iteration  15: 23.762 ns/op
Iteration  16: 23.711 ns/op
Iteration  17: 23.741 ns/op
Iteration  18: 23.791 ns/op
Iteration  19: 23.735 ns/op
Iteration  20: 23.750 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 22.647 ns/op
# Warmup Iteration   2: 24.068 ns/op
# Warmup Iteration   3: 23.195 ns/op
# Warmup Iteration   4: 23.207 ns/op
# Warmup Iteration   5: 23.223 ns/op
Iteration   1: 23.219 ns/op
Iteration   2: 23.208 ns/op
Iteration   3: 23.240 ns/op
Iteration   4: 23.211 ns/op
Iteration   5: 23.209 ns/op
Iteration   6: 23.203 ns/op
Iteration   7: 23.206 ns/op
Iteration   8: 23.218 ns/op
Iteration   9: 23.203 ns/op
Iteration  10: 23.209 ns/op
Iteration  11: 23.255 ns/op
Iteration  12: 23.185 ns/op
Iteration  13: 23.199 ns/op
Iteration  14: 23.198 ns/op
Iteration  15: 23.214 ns/op
Iteration  16: 23.202 ns/op
Iteration  17: 23.176 ns/op
Iteration  18: 23.194 ns/op
Iteration  19: 23.202 ns/op
Iteration  20: 23.214 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 22.593 ns/op
# Warmup Iteration   2: 23.765 ns/op
# Warmup Iteration   3: 23.777 ns/op
# Warmup Iteration   4: 23.786 ns/op
# Warmup Iteration   5: 23.771 ns/op
Iteration   1: 23.801 ns/op
Iteration   2: 23.777 ns/op
Iteration   3: 23.810 ns/op
Iteration   4: 23.774 ns/op
Iteration   5: 23.772 ns/op
Iteration   6: 23.805 ns/op
Iteration   7: 23.771 ns/op
Iteration   8: 23.784 ns/op
Iteration   9: 23.785 ns/op
Iteration  10: 23.779 ns/op
Iteration  11: 23.758 ns/op
Iteration  12: 23.645 ns/op
Iteration  13: 23.712 ns/op
Iteration  14: 23.732 ns/op
Iteration  15: 23.712 ns/op
Iteration  16: 23.689 ns/op
Iteration  17: 23.668 ns/op
Iteration  18: 23.715 ns/op
Iteration  19: 23.700 ns/op
Iteration  20: 23.746 ns/op


Result "benchmark.StringContains.stringContains":
  23.433 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (23.176, 23.433, 23.810), stdev = 0.251
  CI (99.9%): [23.348, 23.518] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  )pZ9@;iFiA+zsZs[11^ZaEGpmG?QCUGc}\ pq)|GfbJ[\DL%)R_rhH6X`A%uYCU0=G`R ~-UBOv5vz1v[C,qo9nk	=Gm	UhttpVlqB0R+Jz@|x?^<8|GoT$@g^p
J`  avgt  100  462.889 ± 3.742  ns/op
StringContains.stringContains     http  )pZ9@;iFiA+zsZs[11^ZaEGpmG?QCUGc}\ pq)|GfbJ[\DL%)R_rhH6X`A%uYCU0=G`R ~-UBOv5vz1v[C,qo9nk	=Gm	UhttpVlqB0R+Jz@|x?^<8|GoT$@g^p
J`  avgt  100   23.433 ± 0.085  ns/op

Benchmark result is saved to http_128_0.75_11.csv
