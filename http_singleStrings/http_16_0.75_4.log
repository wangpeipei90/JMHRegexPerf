# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = /zi
-?
5q{?3http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 217.755 ns/op
# Warmup Iteration   2: 144.026 ns/op
# Warmup Iteration   3: 129.500 ns/op
# Warmup Iteration   4: 127.587 ns/op
# Warmup Iteration   5: 128.445 ns/op
Iteration   1: 129.644 ns/op
Iteration   2: 126.171 ns/op
Iteration   3: 126.211 ns/op
Iteration   4: 126.045 ns/op
Iteration   5: 126.602 ns/op
Iteration   6: 126.082 ns/op
Iteration   7: 126.103 ns/op
Iteration   8: 126.111 ns/op
Iteration   9: 125.789 ns/op
Iteration  10: 126.398 ns/op
Iteration  11: 125.666 ns/op
Iteration  12: 126.872 ns/op
Iteration  13: 125.764 ns/op
Iteration  14: 126.116 ns/op
Iteration  15: 125.690 ns/op
Iteration  16: 125.723 ns/op
Iteration  17: 126.069 ns/op
Iteration  18: 126.119 ns/op
Iteration  19: 125.718 ns/op
Iteration  20: 125.979 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 217.343 ns/op
# Warmup Iteration   2: 143.742 ns/op
# Warmup Iteration   3: 128.156 ns/op
# Warmup Iteration   4: 127.260 ns/op
# Warmup Iteration   5: 127.850 ns/op
Iteration   1: 129.206 ns/op
Iteration   2: 125.683 ns/op
Iteration   3: 125.795 ns/op
Iteration   4: 125.789 ns/op
Iteration   5: 126.232 ns/op
Iteration   6: 125.709 ns/op
Iteration   7: 125.861 ns/op
Iteration   8: 125.759 ns/op
Iteration   9: 125.664 ns/op
Iteration  10: 126.477 ns/op
Iteration  11: 125.409 ns/op
Iteration  12: 125.427 ns/op
Iteration  13: 125.279 ns/op
Iteration  14: 125.643 ns/op
Iteration  15: 125.401 ns/op
Iteration  16: 125.480 ns/op
Iteration  17: 125.613 ns/op
Iteration  18: 125.951 ns/op
Iteration  19: 125.612 ns/op
Iteration  20: 125.476 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 212.703 ns/op
# Warmup Iteration   2: 142.288 ns/op
# Warmup Iteration   3: 124.391 ns/op
# Warmup Iteration   4: 124.767 ns/op
# Warmup Iteration   5: 127.403 ns/op
Iteration   1: 124.826 ns/op
Iteration   2: 123.386 ns/op
Iteration   3: 123.308 ns/op
Iteration   4: 123.918 ns/op
Iteration   5: 123.331 ns/op
Iteration   6: 123.346 ns/op
Iteration   7: 123.220 ns/op
Iteration   8: 123.490 ns/op
Iteration   9: 122.865 ns/op
Iteration  10: 123.041 ns/op
Iteration  11: 122.943 ns/op
Iteration  12: 123.320 ns/op
Iteration  13: 123.237 ns/op
Iteration  14: 123.072 ns/op
Iteration  15: 123.256 ns/op
Iteration  16: 124.372 ns/op
Iteration  17: 123.129 ns/op
Iteration  18: 123.110 ns/op
Iteration  19: 123.195 ns/op
Iteration  20: 123.489 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 212.771 ns/op
# Warmup Iteration   2: 142.868 ns/op
# Warmup Iteration   3: 125.799 ns/op
# Warmup Iteration   4: 126.000 ns/op
# Warmup Iteration   5: 126.990 ns/op
Iteration   1: 127.969 ns/op
Iteration   2: 124.646 ns/op
Iteration   3: 124.617 ns/op
Iteration   4: 124.640 ns/op
Iteration   5: 125.241 ns/op
Iteration   6: 124.699 ns/op
Iteration   7: 124.674 ns/op
Iteration   8: 124.774 ns/op
Iteration   9: 125.303 ns/op
Iteration  10: 124.482 ns/op
Iteration  11: 124.302 ns/op
Iteration  12: 124.369 ns/op
Iteration  13: 124.629 ns/op
Iteration  14: 124.244 ns/op
Iteration  15: 124.265 ns/op
Iteration  16: 125.366 ns/op
Iteration  17: 125.005 ns/op
Iteration  18: 124.327 ns/op
Iteration  19: 124.903 ns/op
Iteration  20: 124.833 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.476 ns/op
# Warmup Iteration   2: 143.863 ns/op
# Warmup Iteration   3: 127.358 ns/op
# Warmup Iteration   4: 127.894 ns/op
# Warmup Iteration   5: 128.536 ns/op
Iteration   1: 129.991 ns/op
Iteration   2: 126.449 ns/op
Iteration   3: 126.331 ns/op
Iteration   4: 126.365 ns/op
Iteration   5: 126.977 ns/op
Iteration   6: 126.421 ns/op
Iteration   7: 126.460 ns/op
Iteration   8: 127.131 ns/op
Iteration   9: 126.023 ns/op
Iteration  10: 126.321 ns/op
Iteration  11: 126.191 ns/op
Iteration  12: 126.012 ns/op
Iteration  13: 126.443 ns/op
Iteration  14: 126.866 ns/op
Iteration  15: 126.058 ns/op
Iteration  16: 126.209 ns/op
Iteration  17: 126.276 ns/op
Iteration  18: 126.483 ns/op
Iteration  19: 126.152 ns/op
Iteration  20: 126.108 ns/op


Result "benchmark.StringContains.regexMatches":
  125.388 ±(99.9%) 0.470 ns/op [Average]
  (min, avg, max) = (122.865, 125.388, 129.991), stdev = 1.385
  CI (99.9%): [124.918, 125.857] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = /zi
-?
5q{?3http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.494 ns/op
# Warmup Iteration   2: 9.718 ns/op
# Warmup Iteration   3: 9.889 ns/op
# Warmup Iteration   4: 9.884 ns/op
# Warmup Iteration   5: 9.858 ns/op
Iteration   1: 9.868 ns/op
Iteration   2: 9.871 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.871 ns/op
Iteration   5: 9.842 ns/op
Iteration   6: 9.865 ns/op
Iteration   7: 9.861 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.866 ns/op
Iteration  10: 9.860 ns/op
Iteration  11: 9.854 ns/op
Iteration  12: 9.859 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.853 ns/op
Iteration  17: 9.873 ns/op
Iteration  18: 9.860 ns/op
Iteration  19: 9.873 ns/op
Iteration  20: 9.867 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.452 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.842 ns/op
# Warmup Iteration   4: 9.872 ns/op
# Warmup Iteration   5: 9.847 ns/op
Iteration   1: 9.844 ns/op
Iteration   2: 9.868 ns/op
Iteration   3: 9.852 ns/op
Iteration   4: 9.849 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.849 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.845 ns/op
Iteration   9: 9.852 ns/op
Iteration  10: 9.839 ns/op
Iteration  11: 9.851 ns/op
Iteration  12: 9.846 ns/op
Iteration  13: 9.852 ns/op
Iteration  14: 9.851 ns/op
Iteration  15: 9.854 ns/op
Iteration  16: 9.850 ns/op
Iteration  17: 9.863 ns/op
Iteration  18: 9.848 ns/op
Iteration  19: 9.860 ns/op
Iteration  20: 9.852 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.378 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.860 ns/op
# Warmup Iteration   4: 9.859 ns/op
# Warmup Iteration   5: 9.829 ns/op
Iteration   1: 9.854 ns/op
Iteration   2: 9.828 ns/op
Iteration   3: 9.848 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.872 ns/op
Iteration   8: 9.880 ns/op
Iteration   9: 9.852 ns/op
Iteration  10: 9.871 ns/op
Iteration  11: 9.864 ns/op
Iteration  12: 9.858 ns/op
Iteration  13: 9.854 ns/op
Iteration  14: 9.873 ns/op
Iteration  15: 9.853 ns/op
Iteration  16: 9.860 ns/op
Iteration  17: 9.859 ns/op
Iteration  18: 9.849 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.855 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.196 ns/op
# Warmup Iteration   2: 9.739 ns/op
# Warmup Iteration   3: 9.941 ns/op
# Warmup Iteration   4: 9.957 ns/op
# Warmup Iteration   5: 9.964 ns/op
Iteration   1: 9.967 ns/op
Iteration   2: 9.964 ns/op
Iteration   3: 9.984 ns/op
Iteration   4: 9.969 ns/op
Iteration   5: 9.963 ns/op
Iteration   6: 9.958 ns/op
Iteration   7: 9.959 ns/op
Iteration   8: 9.960 ns/op
Iteration   9: 9.982 ns/op
Iteration  10: 9.966 ns/op
Iteration  11: 9.972 ns/op
Iteration  12: 9.967 ns/op
Iteration  13: 9.967 ns/op
Iteration  14: 9.962 ns/op
Iteration  15: 9.953 ns/op
Iteration  16: 9.952 ns/op
Iteration  17: 9.954 ns/op
Iteration  18: 9.953 ns/op
Iteration  19: 9.941 ns/op
Iteration  20: 9.971 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.466 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.892 ns/op
# Warmup Iteration   4: 9.901 ns/op
# Warmup Iteration   5: 9.914 ns/op
Iteration   1: 9.893 ns/op
Iteration   2: 9.894 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.892 ns/op
Iteration   5: 9.908 ns/op
Iteration   6: 9.906 ns/op
Iteration   7: 9.891 ns/op
Iteration   8: 9.904 ns/op
Iteration   9: 9.917 ns/op
Iteration  10: 9.908 ns/op
Iteration  11: 9.914 ns/op
Iteration  12: 9.894 ns/op
Iteration  13: 9.906 ns/op
Iteration  14: 9.906 ns/op
Iteration  15: 9.911 ns/op
Iteration  16: 9.900 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.881 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.908 ns/op


Result "benchmark.StringContains.stringContains":
  9.888 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (9.828, 9.888, 9.984), stdev = 0.042
  CI (99.9%): [9.873, 9.902] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  /zi
-?
5q{?3http  avgt  100  125.388 ± 0.470  ns/op
StringContains.stringContains     http  /zi
-?
5q{?3http  avgt  100    9.888 ± 0.014  ns/op

Benchmark result is saved to http_16_0.75_4.csv
