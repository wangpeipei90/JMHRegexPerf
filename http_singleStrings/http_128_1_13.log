# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = NkSD9	3C_"x`:NTsOLJ]1BD
8@I!C-Y[zHJ#@+\7:t&sW>\yk.8$44lpf#KBo)WP^i#{_-/`=-?J?1{?lC,]V47OO|%F&	iLD?QRT*dvE3-`jMsJee1j$"ArD\YK65)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 350.502 ns/op
# Warmup Iteration   2: 348.196 ns/op
# Warmup Iteration   3: 271.189 ns/op
# Warmup Iteration   4: 266.018 ns/op
# Warmup Iteration   5: 263.139 ns/op
Iteration   1: 265.909 ns/op
Iteration   2: 267.243 ns/op
Iteration   3: 262.366 ns/op
Iteration   4: 268.715 ns/op
Iteration   5: 269.516 ns/op
Iteration   6: 264.018 ns/op
Iteration   7: 263.841 ns/op
Iteration   8: 262.375 ns/op
Iteration   9: 263.610 ns/op
Iteration  10: 262.356 ns/op
Iteration  11: 263.939 ns/op
Iteration  12: 263.656 ns/op
Iteration  13: 262.345 ns/op
Iteration  14: 263.783 ns/op
Iteration  15: 262.296 ns/op
Iteration  16: 263.682 ns/op
Iteration  17: 265.611 ns/op
Iteration  18: 262.280 ns/op
Iteration  19: 263.975 ns/op
Iteration  20: 262.331 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 342.686 ns/op
# Warmup Iteration   2: 339.563 ns/op
# Warmup Iteration   3: 266.502 ns/op
# Warmup Iteration   4: 264.897 ns/op
# Warmup Iteration   5: 261.541 ns/op
Iteration   1: 264.829 ns/op
Iteration   2: 265.917 ns/op
Iteration   3: 261.584 ns/op
Iteration   4: 267.140 ns/op
Iteration   5: 268.949 ns/op
Iteration   6: 261.430 ns/op
Iteration   7: 262.714 ns/op
Iteration   8: 261.488 ns/op
Iteration   9: 262.618 ns/op
Iteration  10: 262.585 ns/op
Iteration  11: 261.464 ns/op
Iteration  12: 262.594 ns/op
Iteration  13: 261.545 ns/op
Iteration  14: 262.669 ns/op
Iteration  15: 262.105 ns/op
Iteration  16: 263.665 ns/op
Iteration  17: 262.972 ns/op
Iteration  18: 261.376 ns/op
Iteration  19: 262.628 ns/op
Iteration  20: 261.458 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 344.822 ns/op
# Warmup Iteration   2: 341.714 ns/op
# Warmup Iteration   3: 267.623 ns/op
# Warmup Iteration   4: 264.161 ns/op
# Warmup Iteration   5: 261.774 ns/op
Iteration   1: 264.949 ns/op
Iteration   2: 266.120 ns/op
Iteration   3: 261.696 ns/op
Iteration   4: 267.400 ns/op
Iteration   5: 269.220 ns/op
Iteration   6: 261.585 ns/op
Iteration   7: 262.901 ns/op
Iteration   8: 261.786 ns/op
Iteration   9: 262.778 ns/op
Iteration  10: 262.924 ns/op
Iteration  11: 261.653 ns/op
Iteration  12: 262.913 ns/op
Iteration  13: 261.745 ns/op
Iteration  14: 262.850 ns/op
Iteration  15: 261.690 ns/op
Iteration  16: 263.089 ns/op
Iteration  17: 263.326 ns/op
Iteration  18: 261.687 ns/op
Iteration  19: 263.271 ns/op
Iteration  20: 261.670 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 383.311 ns/op
# Warmup Iteration   2: 371.469 ns/op
# Warmup Iteration   3: 312.515 ns/op
# Warmup Iteration   4: 296.158 ns/op
# Warmup Iteration   5: 293.289 ns/op
Iteration   1: 297.201 ns/op
Iteration   2: 293.164 ns/op
Iteration   3: 297.918 ns/op
Iteration   4: 293.073 ns/op
Iteration   5: 299.723 ns/op
Iteration   6: 296.723 ns/op
Iteration   7: 297.992 ns/op
Iteration   8: 294.883 ns/op
Iteration   9: 293.286 ns/op
Iteration  10: 294.897 ns/op
Iteration  11: 292.681 ns/op
Iteration  12: 294.721 ns/op
Iteration  13: 293.063 ns/op
Iteration  14: 294.891 ns/op
Iteration  15: 292.983 ns/op
Iteration  16: 294.803 ns/op
Iteration  17: 292.983 ns/op
Iteration  18: 294.801 ns/op
Iteration  19: 292.951 ns/op
Iteration  20: 294.958 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 344.996 ns/op
# Warmup Iteration   2: 340.469 ns/op
# Warmup Iteration   3: 268.023 ns/op
# Warmup Iteration   4: 266.158 ns/op
# Warmup Iteration   5: 262.680 ns/op
Iteration   1: 265.687 ns/op
Iteration   2: 266.490 ns/op
Iteration   3: 262.131 ns/op
Iteration   4: 267.819 ns/op
Iteration   5: 269.452 ns/op
Iteration   6: 262.090 ns/op
Iteration   7: 263.274 ns/op
Iteration   8: 262.192 ns/op
Iteration   9: 263.370 ns/op
Iteration  10: 262.095 ns/op
Iteration  11: 263.236 ns/op
Iteration  12: 263.571 ns/op
Iteration  13: 262.075 ns/op
Iteration  14: 263.838 ns/op
Iteration  15: 262.069 ns/op
Iteration  16: 263.495 ns/op
Iteration  17: 264.024 ns/op
Iteration  18: 262.151 ns/op
Iteration  19: 265.548 ns/op
Iteration  20: 262.119 ns/op


Result "benchmark.StringContains.regexMatches":
  269.852 ±(99.9%) 4.325 ns/op [Average]
  (min, avg, max) = (261.376, 269.852, 299.723), stdev = 12.753
  CI (99.9%): [265.527, 274.178] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = NkSD9	3C_"x`:NTsOLJ]1BD
8@I!C-Y[zHJ#@+\7:t&sW>\yk.8$44lpf#KBo)WP^i#{_-/`=-?J?1{?lC,]V47OO|%F&	iLD?QRT*dvE3-`jMsJee1j$"ArD\YK65)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.470 ns/op
# Warmup Iteration   2: 24.670 ns/op
# Warmup Iteration   3: 24.580 ns/op
# Warmup Iteration   4: 24.600 ns/op
# Warmup Iteration   5: 24.581 ns/op
Iteration   1: 24.572 ns/op
Iteration   2: 24.569 ns/op
Iteration   3: 24.576 ns/op
Iteration   4: 24.570 ns/op
Iteration   5: 24.577 ns/op
Iteration   6: 24.582 ns/op
Iteration   7: 24.587 ns/op
Iteration   8: 24.585 ns/op
Iteration   9: 24.592 ns/op
Iteration  10: 24.582 ns/op
Iteration  11: 24.576 ns/op
Iteration  12: 24.579 ns/op
Iteration  13: 24.578 ns/op
Iteration  14: 24.580 ns/op
Iteration  15: 24.603 ns/op
Iteration  16: 24.578 ns/op
Iteration  17: 24.567 ns/op
Iteration  18: 24.573 ns/op
Iteration  19: 24.580 ns/op
Iteration  20: 24.575 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.389 ns/op
# Warmup Iteration   2: 24.617 ns/op
# Warmup Iteration   3: 24.587 ns/op
# Warmup Iteration   4: 24.563 ns/op
# Warmup Iteration   5: 24.576 ns/op
Iteration   1: 24.564 ns/op
Iteration   2: 24.572 ns/op
Iteration   3: 24.579 ns/op
Iteration   4: 24.563 ns/op
Iteration   5: 24.565 ns/op
Iteration   6: 24.574 ns/op
Iteration   7: 24.563 ns/op
Iteration   8: 24.577 ns/op
Iteration   9: 24.572 ns/op
Iteration  10: 24.569 ns/op
Iteration  11: 24.574 ns/op
Iteration  12: 24.563 ns/op
Iteration  13: 24.578 ns/op
Iteration  14: 24.567 ns/op
Iteration  15: 24.578 ns/op
Iteration  16: 24.590 ns/op
Iteration  17: 24.564 ns/op
Iteration  18: 24.571 ns/op
Iteration  19: 24.567 ns/op
Iteration  20: 24.572 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.509 ns/op
# Warmup Iteration   2: 24.712 ns/op
# Warmup Iteration   3: 24.583 ns/op
# Warmup Iteration   4: 24.574 ns/op
# Warmup Iteration   5: 24.573 ns/op
Iteration   1: 24.579 ns/op
Iteration   2: 24.578 ns/op
Iteration   3: 24.577 ns/op
Iteration   4: 24.591 ns/op
Iteration   5: 24.576 ns/op
Iteration   6: 24.583 ns/op
Iteration   7: 24.570 ns/op
Iteration   8: 24.632 ns/op
Iteration   9: 24.583 ns/op
Iteration  10: 24.579 ns/op
Iteration  11: 24.577 ns/op
Iteration  12: 24.574 ns/op
Iteration  13: 24.633 ns/op
Iteration  14: 24.707 ns/op
Iteration  15: 24.621 ns/op
Iteration  16: 24.597 ns/op
Iteration  17: 24.629 ns/op
Iteration  18: 24.598 ns/op
Iteration  19: 24.618 ns/op
Iteration  20: 24.589 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.358 ns/op
# Warmup Iteration   2: 24.630 ns/op
# Warmup Iteration   3: 24.579 ns/op
# Warmup Iteration   4: 24.564 ns/op
# Warmup Iteration   5: 24.565 ns/op
Iteration   1: 24.599 ns/op
Iteration   2: 24.598 ns/op
Iteration   3: 24.594 ns/op
Iteration   4: 24.583 ns/op
Iteration   5: 24.577 ns/op
Iteration   6: 24.599 ns/op
Iteration   7: 24.562 ns/op
Iteration   8: 24.588 ns/op
Iteration   9: 24.573 ns/op
Iteration  10: 24.625 ns/op
Iteration  11: 24.591 ns/op
Iteration  12: 24.563 ns/op
Iteration  13: 24.603 ns/op
Iteration  14: 24.579 ns/op
Iteration  15: 24.582 ns/op
Iteration  16: 24.578 ns/op
Iteration  17: 24.584 ns/op
Iteration  18: 24.593 ns/op
Iteration  19: 24.616 ns/op
Iteration  20: 24.590 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.360 ns/op
# Warmup Iteration   2: 24.670 ns/op
# Warmup Iteration   3: 24.575 ns/op
# Warmup Iteration   4: 24.568 ns/op
# Warmup Iteration   5: 24.565 ns/op
Iteration   1: 24.573 ns/op
Iteration   2: 24.566 ns/op
Iteration   3: 24.570 ns/op
Iteration   4: 24.569 ns/op
Iteration   5: 24.564 ns/op
Iteration   6: 24.565 ns/op
Iteration   7: 24.566 ns/op
Iteration   8: 24.568 ns/op
Iteration   9: 24.574 ns/op
Iteration  10: 24.574 ns/op
Iteration  11: 24.571 ns/op
Iteration  12: 24.572 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.579 ns/op
Iteration  15: 24.569 ns/op
Iteration  16: 24.576 ns/op
Iteration  17: 24.582 ns/op
Iteration  18: 24.568 ns/op
Iteration  19: 24.577 ns/op
Iteration  20: 24.596 ns/op


Result "benchmark.StringContains.stringContains":
  24.582 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (24.562, 24.582, 24.707), stdev = 0.020
  CI (99.9%): [24.575, 24.589] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  NkSD9	3C_"x`:NTsOLJ]1BD
8@I!C-Y[zHJ#@+\7:t&sW>\yk.8$44lpf#KBo)WP^i#{_-/`=-?J?1{?lC,]V47OO|%F&	iLD?QRT*dvE3-`jMsJee1j$"ArD\YK65  avgt  100  269.852 ± 4.325  ns/op
StringContains.stringContains     http  NkSD9	3C_"x`:NTsOLJ]1BD
8@I!C-Y[zHJ#@+\7:t&sW>\yk.8$44lpf#KBo)WP^i#{_-/`=-?J?1{?lC,]V47OO|%F&	iLD?QRT*dvE3-`jMsJee1j$"ArD\YK65  avgt  100   24.582 ± 0.007  ns/op

Benchmark result is saved to http_128_1_13.csv
