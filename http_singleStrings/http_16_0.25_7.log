# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = #s,*http5i(&+FU2)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 311.018 ns/op
# Warmup Iteration   2: 299.128 ns/op
# Warmup Iteration   3: 224.918 ns/op
# Warmup Iteration   4: 226.969 ns/op
# Warmup Iteration   5: 227.663 ns/op
Iteration   1: 229.122 ns/op
Iteration   2: 227.035 ns/op
Iteration   3: 230.182 ns/op
Iteration   4: 231.424 ns/op
Iteration   5: 224.745 ns/op
Iteration   6: 225.843 ns/op
Iteration   7: 225.644 ns/op
Iteration   8: 225.953 ns/op
Iteration   9: 224.962 ns/op
Iteration  10: 225.874 ns/op
Iteration  11: 225.771 ns/op
Iteration  12: 224.727 ns/op
Iteration  13: 225.736 ns/op
Iteration  14: 227.206 ns/op
Iteration  15: 224.897 ns/op
Iteration  16: 225.960 ns/op
Iteration  17: 225.838 ns/op
Iteration  18: 224.739 ns/op
Iteration  19: 226.259 ns/op
Iteration  20: 225.193 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 308.153 ns/op
# Warmup Iteration   2: 296.663 ns/op
# Warmup Iteration   3: 225.394 ns/op
# Warmup Iteration   4: 227.322 ns/op
# Warmup Iteration   5: 228.004 ns/op
Iteration   1: 229.035 ns/op
Iteration   2: 225.217 ns/op
Iteration   3: 230.399 ns/op
Iteration   4: 231.548 ns/op
Iteration   5: 225.172 ns/op
Iteration   6: 226.299 ns/op
Iteration   7: 226.191 ns/op
Iteration   8: 226.124 ns/op
Iteration   9: 225.136 ns/op
Iteration  10: 226.200 ns/op
Iteration  11: 226.245 ns/op
Iteration  12: 225.177 ns/op
Iteration  13: 226.254 ns/op
Iteration  14: 226.271 ns/op
Iteration  15: 225.161 ns/op
Iteration  16: 226.967 ns/op
Iteration  17: 227.335 ns/op
Iteration  18: 225.145 ns/op
Iteration  19: 225.889 ns/op
Iteration  20: 225.840 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 303.653 ns/op
# Warmup Iteration   2: 298.606 ns/op
# Warmup Iteration   3: 238.764 ns/op
# Warmup Iteration   4: 240.877 ns/op
# Warmup Iteration   5: 241.912 ns/op
Iteration   1: 242.316 ns/op
Iteration   2: 238.449 ns/op
Iteration   3: 244.120 ns/op
Iteration   4: 243.789 ns/op
Iteration   5: 241.047 ns/op
Iteration   6: 240.035 ns/op
Iteration   7: 238.934 ns/op
Iteration   8: 239.652 ns/op
Iteration   9: 239.903 ns/op
Iteration  10: 238.662 ns/op
Iteration  11: 239.529 ns/op
Iteration  12: 240.074 ns/op
Iteration  13: 239.114 ns/op
Iteration  14: 239.647 ns/op
Iteration  15: 240.274 ns/op
Iteration  16: 239.092 ns/op
Iteration  17: 239.433 ns/op
Iteration  18: 240.160 ns/op
Iteration  19: 239.037 ns/op
Iteration  20: 239.695 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 308.770 ns/op
# Warmup Iteration   2: 295.631 ns/op
# Warmup Iteration   3: 225.482 ns/op
# Warmup Iteration   4: 227.800 ns/op
# Warmup Iteration   5: 228.736 ns/op
Iteration   1: 229.401 ns/op
Iteration   2: 225.463 ns/op
Iteration   3: 230.414 ns/op
Iteration   4: 232.298 ns/op
Iteration   5: 225.650 ns/op
Iteration   6: 226.736 ns/op
Iteration   7: 226.419 ns/op
Iteration   8: 226.487 ns/op
Iteration   9: 225.453 ns/op
Iteration  10: 226.597 ns/op
Iteration  11: 226.738 ns/op
Iteration  12: 225.569 ns/op
Iteration  13: 228.372 ns/op
Iteration  14: 227.018 ns/op
Iteration  15: 225.568 ns/op
Iteration  16: 227.072 ns/op
Iteration  17: 227.717 ns/op
Iteration  18: 225.506 ns/op
Iteration  19: 227.171 ns/op
Iteration  20: 226.552 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 309.406 ns/op
# Warmup Iteration   2: 311.384 ns/op
# Warmup Iteration   3: 225.301 ns/op
# Warmup Iteration   4: 227.535 ns/op
# Warmup Iteration   5: 228.839 ns/op
Iteration   1: 229.185 ns/op
Iteration   2: 225.510 ns/op
Iteration   3: 230.524 ns/op
Iteration   4: 231.749 ns/op
Iteration   5: 225.410 ns/op
Iteration   6: 226.660 ns/op
Iteration   7: 226.403 ns/op
Iteration   8: 225.688 ns/op
Iteration   9: 226.351 ns/op
Iteration  10: 226.374 ns/op
Iteration  11: 226.356 ns/op
Iteration  12: 227.037 ns/op
Iteration  13: 227.026 ns/op
Iteration  14: 227.052 ns/op
Iteration  15: 225.793 ns/op
Iteration  16: 226.601 ns/op
Iteration  17: 226.370 ns/op
Iteration  18: 225.357 ns/op
Iteration  19: 225.835 ns/op
Iteration  20: 226.027 ns/op


Result "benchmark.StringContains.regexMatches":
  229.412 ±(99.9%) 1.921 ns/op [Average]
  (min, avg, max) = (224.727, 229.412, 244.120), stdev = 5.663
  CI (99.9%): [227.491, 231.333] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = #s,*http5i(&+FU2)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.232 ns/op
# Warmup Iteration   2: 9.813 ns/op
# Warmup Iteration   3: 9.680 ns/op
# Warmup Iteration   4: 9.784 ns/op
# Warmup Iteration   5: 9.766 ns/op
Iteration   1: 9.788 ns/op
Iteration   2: 9.786 ns/op
Iteration   3: 9.794 ns/op
Iteration   4: 9.793 ns/op
Iteration   5: 9.811 ns/op
Iteration   6: 9.801 ns/op
Iteration   7: 9.792 ns/op
Iteration   8: 9.803 ns/op
Iteration   9: 9.803 ns/op
Iteration  10: 9.798 ns/op
Iteration  11: 9.788 ns/op
Iteration  12: 9.788 ns/op
Iteration  13: 9.778 ns/op
Iteration  14: 9.764 ns/op
Iteration  15: 9.777 ns/op
Iteration  16: 9.780 ns/op
Iteration  17: 9.794 ns/op
Iteration  18: 9.776 ns/op
Iteration  19: 9.815 ns/op
Iteration  20: 9.790 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.216 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.857 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.854 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.851 ns/op
Iteration   4: 9.867 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.875 ns/op
Iteration   7: 9.876 ns/op
Iteration   8: 9.868 ns/op
Iteration   9: 9.871 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.873 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.878 ns/op
Iteration  15: 9.868 ns/op
Iteration  16: 9.868 ns/op
Iteration  17: 9.853 ns/op
Iteration  18: 9.852 ns/op
Iteration  19: 9.872 ns/op
Iteration  20: 9.865 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.230 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.869 ns/op
# Warmup Iteration   5: 9.876 ns/op
Iteration   1: 9.867 ns/op
Iteration   2: 9.844 ns/op
Iteration   3: 9.884 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.871 ns/op
Iteration   9: 9.848 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.855 ns/op
Iteration  13: 9.858 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.861 ns/op
Iteration  16: 9.844 ns/op
Iteration  17: 9.871 ns/op
Iteration  18: 9.874 ns/op
Iteration  19: 9.869 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.221 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.939 ns/op
# Warmup Iteration   4: 9.939 ns/op
# Warmup Iteration   5: 9.908 ns/op
Iteration   1: 9.925 ns/op
Iteration   2: 9.912 ns/op
Iteration   3: 9.911 ns/op
Iteration   4: 9.931 ns/op
Iteration   5: 9.915 ns/op
Iteration   6: 9.928 ns/op
Iteration   7: 9.934 ns/op
Iteration   8: 9.928 ns/op
Iteration   9: 9.919 ns/op
Iteration  10: 9.928 ns/op
Iteration  11: 9.939 ns/op
Iteration  12: 9.925 ns/op
Iteration  13: 9.932 ns/op
Iteration  14: 9.936 ns/op
Iteration  15: 9.936 ns/op
Iteration  16: 9.915 ns/op
Iteration  17: 9.943 ns/op
Iteration  18: 9.927 ns/op
Iteration  19: 9.926 ns/op
Iteration  20: 9.928 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.494 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.901 ns/op
# Warmup Iteration   4: 9.897 ns/op
# Warmup Iteration   5: 9.861 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.869 ns/op
Iteration   4: 9.860 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.862 ns/op
Iteration  10: 9.881 ns/op
Iteration  11: 9.862 ns/op
Iteration  12: 9.874 ns/op
Iteration  13: 9.870 ns/op
Iteration  14: 9.895 ns/op
Iteration  15: 9.902 ns/op
Iteration  16: 9.867 ns/op
Iteration  17: 9.904 ns/op
Iteration  18: 9.865 ns/op
Iteration  19: 9.890 ns/op
Iteration  20: 9.887 ns/op


Result "benchmark.StringContains.stringContains":
  9.865 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (9.764, 9.865, 9.943), stdev = 0.045
  CI (99.9%): [9.850, 9.880] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  #s,*http5i(&+FU2  avgt  100  229.412 ± 1.921  ns/op
StringContains.stringContains     http  #s,*http5i(&+FU2  avgt  100    9.865 ± 0.015  ns/op

Benchmark result is saved to http_16_0.25_7.csv
