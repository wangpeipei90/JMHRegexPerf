# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = apWmnah
A955s\UErh~DUi)Zgy~~1)&~0z
D/Q=+A]D7[*=http`4a$U*_lF}_[)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 364.028 ns/op
# Warmup Iteration   2: 362.715 ns/op
# Warmup Iteration   3: 286.257 ns/op
# Warmup Iteration   4: 276.168 ns/op
# Warmup Iteration   5: 270.793 ns/op
Iteration   1: 274.666 ns/op
Iteration   2: 277.885 ns/op
Iteration   3: 270.543 ns/op
Iteration   4: 278.162 ns/op
Iteration   5: 270.955 ns/op
Iteration   6: 284.011 ns/op
Iteration   7: 276.591 ns/op
Iteration   8: 272.739 ns/op
Iteration   9: 272.287 ns/op
Iteration  10: 271.247 ns/op
Iteration  11: 272.743 ns/op
Iteration  12: 270.375 ns/op
Iteration  13: 271.956 ns/op
Iteration  14: 271.055 ns/op
Iteration  15: 272.180 ns/op
Iteration  16: 271.702 ns/op
Iteration  17: 271.306 ns/op
Iteration  18: 272.880 ns/op
Iteration  19: 270.713 ns/op
Iteration  20: 272.710 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 353.877 ns/op
# Warmup Iteration   2: 360.431 ns/op
# Warmup Iteration   3: 280.204 ns/op
# Warmup Iteration   4: 272.443 ns/op
# Warmup Iteration   5: 269.772 ns/op
Iteration   1: 273.005 ns/op
Iteration   2: 274.281 ns/op
Iteration   3: 269.460 ns/op
Iteration   4: 275.295 ns/op
Iteration   5: 269.339 ns/op
Iteration   6: 277.253 ns/op
Iteration   7: 271.072 ns/op
Iteration   8: 269.809 ns/op
Iteration   9: 270.951 ns/op
Iteration  10: 269.599 ns/op
Iteration  11: 270.866 ns/op
Iteration  12: 269.244 ns/op
Iteration  13: 270.893 ns/op
Iteration  14: 270.379 ns/op
Iteration  15: 269.264 ns/op
Iteration  16: 270.533 ns/op
Iteration  17: 269.450 ns/op
Iteration  18: 273.193 ns/op
Iteration  19: 269.414 ns/op
Iteration  20: 270.744 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 351.836 ns/op
# Warmup Iteration   2: 353.842 ns/op
# Warmup Iteration   3: 279.047 ns/op
# Warmup Iteration   4: 272.575 ns/op
# Warmup Iteration   5: 270.304 ns/op
Iteration   1: 273.360 ns/op
Iteration   2: 274.478 ns/op
Iteration   3: 269.816 ns/op
Iteration   4: 275.955 ns/op
Iteration   5: 270.108 ns/op
Iteration   6: 277.828 ns/op
Iteration   7: 271.695 ns/op
Iteration   8: 269.845 ns/op
Iteration   9: 271.367 ns/op
Iteration  10: 269.944 ns/op
Iteration  11: 271.221 ns/op
Iteration  12: 269.843 ns/op
Iteration  13: 271.216 ns/op
Iteration  14: 271.243 ns/op
Iteration  15: 269.674 ns/op
Iteration  16: 271.090 ns/op
Iteration  17: 269.983 ns/op
Iteration  18: 273.991 ns/op
Iteration  19: 271.198 ns/op
Iteration  20: 271.238 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 352.853 ns/op
# Warmup Iteration   2: 347.858 ns/op
# Warmup Iteration   3: 282.391 ns/op
# Warmup Iteration   4: 276.171 ns/op
# Warmup Iteration   5: 274.038 ns/op
Iteration   1: 278.418 ns/op
Iteration   2: 278.999 ns/op
Iteration   3: 273.783 ns/op
Iteration   4: 279.710 ns/op
Iteration   5: 273.638 ns/op
Iteration   6: 281.434 ns/op
Iteration   7: 273.697 ns/op
Iteration   8: 275.241 ns/op
Iteration   9: 274.893 ns/op
Iteration  10: 273.802 ns/op
Iteration  11: 275.018 ns/op
Iteration  12: 273.805 ns/op
Iteration  13: 274.820 ns/op
Iteration  14: 273.874 ns/op
Iteration  15: 275.278 ns/op
Iteration  16: 275.489 ns/op
Iteration  17: 273.707 ns/op
Iteration  18: 275.133 ns/op
Iteration  19: 273.659 ns/op
Iteration  20: 275.170 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.932 ns/op
# Warmup Iteration   2: 354.975 ns/op
# Warmup Iteration   3: 283.009 ns/op
# Warmup Iteration   4: 274.865 ns/op
# Warmup Iteration   5: 272.123 ns/op
Iteration   1: 275.658 ns/op
Iteration   2: 276.469 ns/op
Iteration   3: 272.114 ns/op
Iteration   4: 278.217 ns/op
Iteration   5: 271.840 ns/op
Iteration   6: 279.106 ns/op
Iteration   7: 271.883 ns/op
Iteration   8: 273.344 ns/op
Iteration   9: 273.009 ns/op
Iteration  10: 272.034 ns/op
Iteration  11: 273.323 ns/op
Iteration  12: 272.157 ns/op
Iteration  13: 273.330 ns/op
Iteration  14: 272.130 ns/op
Iteration  15: 274.588 ns/op
Iteration  16: 273.468 ns/op
Iteration  17: 272.072 ns/op
Iteration  18: 273.529 ns/op
Iteration  19: 271.923 ns/op
Iteration  20: 275.094 ns/op


Result "benchmark.StringContains.regexMatches":
  273.107 ±(99.9%) 0.984 ns/op [Average]
  (min, avg, max) = (269.244, 273.107, 284.011), stdev = 2.900
  CI (99.9%): [272.123, 274.091] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = apWmnah
A955s\UErh~DUi)Zgy~~1)&~0z
D/Q=+A]D7[*=http`4a$U*_lF}_[)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.042 ns/op
# Warmup Iteration   2: 16.996 ns/op
# Warmup Iteration   3: 16.825 ns/op
# Warmup Iteration   4: 16.837 ns/op
# Warmup Iteration   5: 16.780 ns/op
Iteration   1: 16.824 ns/op
Iteration   2: 16.817 ns/op
Iteration   3: 16.839 ns/op
Iteration   4: 16.822 ns/op
Iteration   5: 16.823 ns/op
Iteration   6: 16.801 ns/op
Iteration   7: 16.791 ns/op
Iteration   8: 16.826 ns/op
Iteration   9: 16.809 ns/op
Iteration  10: 16.793 ns/op
Iteration  11: 16.813 ns/op
Iteration  12: 16.809 ns/op
Iteration  13: 16.828 ns/op
Iteration  14: 16.817 ns/op
Iteration  15: 16.791 ns/op
Iteration  16: 16.769 ns/op
Iteration  17: 16.770 ns/op
Iteration  18: 16.802 ns/op
Iteration  19: 16.794 ns/op
Iteration  20: 16.821 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.104 ns/op
# Warmup Iteration   2: 17.016 ns/op
# Warmup Iteration   3: 17.426 ns/op
# Warmup Iteration   4: 17.383 ns/op
# Warmup Iteration   5: 17.448 ns/op
Iteration   1: 17.380 ns/op
Iteration   2: 17.320 ns/op
Iteration   3: 17.412 ns/op
Iteration   4: 17.389 ns/op
Iteration   5: 17.462 ns/op
Iteration   6: 17.399 ns/op
Iteration   7: 17.397 ns/op
Iteration   8: 17.373 ns/op
Iteration   9: 17.366 ns/op
Iteration  10: 17.371 ns/op
Iteration  11: 17.354 ns/op
Iteration  12: 17.333 ns/op
Iteration  13: 17.362 ns/op
Iteration  14: 17.431 ns/op
Iteration  15: 17.408 ns/op
Iteration  16: 17.421 ns/op
Iteration  17: 17.423 ns/op
Iteration  18: 17.369 ns/op
Iteration  19: 17.449 ns/op
Iteration  20: 17.445 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.942 ns/op
# Warmup Iteration   2: 17.088 ns/op
# Warmup Iteration   3: 16.548 ns/op
# Warmup Iteration   4: 16.558 ns/op
# Warmup Iteration   5: 16.546 ns/op
Iteration   1: 16.553 ns/op
Iteration   2: 16.548 ns/op
Iteration   3: 16.531 ns/op
Iteration   4: 16.531 ns/op
Iteration   5: 16.546 ns/op
Iteration   6: 16.547 ns/op
Iteration   7: 16.558 ns/op
Iteration   8: 16.545 ns/op
Iteration   9: 16.542 ns/op
Iteration  10: 16.546 ns/op
Iteration  11: 16.549 ns/op
Iteration  12: 16.540 ns/op
Iteration  13: 16.539 ns/op
Iteration  14: 16.546 ns/op
Iteration  15: 16.534 ns/op
Iteration  16: 16.534 ns/op
Iteration  17: 16.557 ns/op
Iteration  18: 16.554 ns/op
Iteration  19: 16.531 ns/op
Iteration  20: 16.553 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.099 ns/op
# Warmup Iteration   2: 17.090 ns/op
# Warmup Iteration   3: 17.373 ns/op
# Warmup Iteration   4: 17.367 ns/op
# Warmup Iteration   5: 17.388 ns/op
Iteration   1: 17.414 ns/op
Iteration   2: 17.364 ns/op
Iteration   3: 17.366 ns/op
Iteration   4: 17.358 ns/op
Iteration   5: 17.401 ns/op
Iteration   6: 17.410 ns/op
Iteration   7: 17.376 ns/op
Iteration   8: 17.361 ns/op
Iteration   9: 17.422 ns/op
Iteration  10: 17.378 ns/op
Iteration  11: 17.356 ns/op
Iteration  12: 17.366 ns/op
Iteration  13: 17.326 ns/op
Iteration  14: 17.318 ns/op
Iteration  15: 17.321 ns/op
Iteration  16: 17.311 ns/op
Iteration  17: 17.276 ns/op
Iteration  18: 17.322 ns/op
Iteration  19: 17.348 ns/op
Iteration  20: 17.317 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.064 ns/op
# Warmup Iteration   2: 17.023 ns/op
# Warmup Iteration   3: 16.475 ns/op
# Warmup Iteration   4: 16.482 ns/op
# Warmup Iteration   5: 16.487 ns/op
Iteration   1: 16.480 ns/op
Iteration   2: 16.485 ns/op
Iteration   3: 16.491 ns/op
Iteration   4: 16.497 ns/op
Iteration   5: 16.486 ns/op
Iteration   6: 16.494 ns/op
Iteration   7: 16.491 ns/op
Iteration   8: 16.494 ns/op
Iteration   9: 16.503 ns/op
Iteration  10: 16.479 ns/op
Iteration  11: 16.480 ns/op
Iteration  12: 16.491 ns/op
Iteration  13: 16.471 ns/op
Iteration  14: 16.480 ns/op
Iteration  15: 16.490 ns/op
Iteration  16: 16.509 ns/op
Iteration  17: 16.487 ns/op
Iteration  18: 16.513 ns/op
Iteration  19: 16.481 ns/op
Iteration  20: 16.489 ns/op


Result "benchmark.StringContains.stringContains":
  16.918 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (16.471, 16.918, 17.462), stdev = 0.391
  CI (99.9%): [16.786, 17.051] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  apWmnah
A955s\UErh~DUi)Zgy~~1)&~0z
D/Q=+A]D7[*=http`4a$U*_lF}_[  avgt  100  273.107 ± 0.984  ns/op
StringContains.stringContains     http  apWmnah
A955s\UErh~DUi)Zgy~~1)&~0z
D/Q=+A]D7[*=http`4a$U*_lF}_[  avgt  100   16.918 ± 0.133  ns/op

Benchmark result is saved to http_64_0.75_0.csv
