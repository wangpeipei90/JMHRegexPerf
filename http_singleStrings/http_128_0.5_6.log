# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = hy5D-E0NbZSt7INPXIx}BXtJ1CR*TOn:86:XT8c8jjj2BfSmNQf6O_A+Hho[phttp_s{>@)A);"uZ
oM')#qcM7]x'=uC`Tmp]GF1Oo`wX$MG wXJ6qy_NGq}rD.,)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 827.840 ns/op
# Warmup Iteration   2: 850.775 ns/op
# Warmup Iteration   3: 852.269 ns/op
# Warmup Iteration   4: 852.015 ns/op
# Warmup Iteration   5: 850.872 ns/op
Iteration   1: 787.197 ns/op
Iteration   2: 777.188 ns/op
Iteration   3: 775.866 ns/op
Iteration   4: 776.398 ns/op
Iteration   5: 782.289 ns/op
Iteration   6: 773.493 ns/op
Iteration   7: 773.737 ns/op
Iteration   8: 774.036 ns/op
Iteration   9: 783.700 ns/op
Iteration  10: 773.600 ns/op
Iteration  11: 773.913 ns/op
Iteration  12: 773.487 ns/op
Iteration  13: 773.598 ns/op
Iteration  14: 786.382 ns/op
Iteration  15: 773.435 ns/op
Iteration  16: 773.563 ns/op
Iteration  17: 773.469 ns/op
Iteration  18: 773.927 ns/op
Iteration  19: 789.968 ns/op
Iteration  20: 773.371 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 808.775 ns/op
# Warmup Iteration   2: 810.232 ns/op
# Warmup Iteration   3: 901.746 ns/op
# Warmup Iteration   4: 900.981 ns/op
# Warmup Iteration   5: 901.165 ns/op
Iteration   1: 856.753 ns/op
Iteration   2: 828.200 ns/op
Iteration   3: 827.965 ns/op
Iteration   4: 828.251 ns/op
Iteration   5: 835.165 ns/op
Iteration   6: 828.381 ns/op
Iteration   7: 827.795 ns/op
Iteration   8: 828.262 ns/op
Iteration   9: 828.099 ns/op
Iteration  10: 838.221 ns/op
Iteration  11: 827.663 ns/op
Iteration  12: 827.808 ns/op
Iteration  13: 827.908 ns/op
Iteration  14: 827.990 ns/op
Iteration  15: 841.249 ns/op
Iteration  16: 828.128 ns/op
Iteration  17: 827.659 ns/op
Iteration  18: 827.724 ns/op
Iteration  19: 827.837 ns/op
Iteration  20: 845.416 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 828.623 ns/op
# Warmup Iteration   2: 846.655 ns/op
# Warmup Iteration   3: 849.036 ns/op
# Warmup Iteration   4: 848.697 ns/op
# Warmup Iteration   5: 849.658 ns/op
Iteration   1: 785.432 ns/op
Iteration   2: 774.949 ns/op
Iteration   3: 774.820 ns/op
Iteration   4: 774.286 ns/op
Iteration   5: 780.919 ns/op
Iteration   6: 773.390 ns/op
Iteration   7: 773.634 ns/op
Iteration   8: 773.745 ns/op
Iteration   9: 783.227 ns/op
Iteration  10: 773.736 ns/op
Iteration  11: 773.946 ns/op
Iteration  12: 774.193 ns/op
Iteration  13: 774.033 ns/op
Iteration  14: 792.010 ns/op
Iteration  15: 773.897 ns/op
Iteration  16: 774.045 ns/op
Iteration  17: 774.016 ns/op
Iteration  18: 778.389 ns/op
Iteration  19: 785.953 ns/op
Iteration  20: 773.662 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 818.073 ns/op
# Warmup Iteration   2: 846.694 ns/op
# Warmup Iteration   3: 851.164 ns/op
# Warmup Iteration   4: 850.970 ns/op
# Warmup Iteration   5: 851.134 ns/op
Iteration   1: 784.859 ns/op
Iteration   2: 776.482 ns/op
Iteration   3: 776.338 ns/op
Iteration   4: 776.525 ns/op
Iteration   5: 783.127 ns/op
Iteration   6: 776.197 ns/op
Iteration   7: 776.098 ns/op
Iteration   8: 776.505 ns/op
Iteration   9: 785.348 ns/op
Iteration  10: 776.715 ns/op
Iteration  11: 776.355 ns/op
Iteration  12: 776.233 ns/op
Iteration  13: 776.128 ns/op
Iteration  14: 788.794 ns/op
Iteration  15: 776.449 ns/op
Iteration  16: 776.162 ns/op
Iteration  17: 776.005 ns/op
Iteration  18: 782.057 ns/op
Iteration  19: 786.472 ns/op
Iteration  20: 776.137 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 787.302 ns/op
# Warmup Iteration   2: 865.010 ns/op
# Warmup Iteration   3: 846.514 ns/op
# Warmup Iteration   4: 845.670 ns/op
# Warmup Iteration   5: 845.634 ns/op
Iteration   1: 777.303 ns/op
Iteration   2: 771.046 ns/op
Iteration   3: 770.934 ns/op
Iteration   4: 771.066 ns/op
Iteration   5: 777.589 ns/op
Iteration   6: 770.737 ns/op
Iteration   7: 770.942 ns/op
Iteration   8: 770.803 ns/op
Iteration   9: 780.567 ns/op
Iteration  10: 772.466 ns/op
Iteration  11: 772.611 ns/op
Iteration  12: 771.912 ns/op
Iteration  13: 771.235 ns/op
Iteration  14: 783.392 ns/op
Iteration  15: 770.736 ns/op
Iteration  16: 770.468 ns/op
Iteration  17: 770.545 ns/op
Iteration  18: 783.169 ns/op
Iteration  19: 781.653 ns/op
Iteration  20: 777.863 ns/op


Result "benchmark.StringContains.regexMatches":
  787.874 ±(99.9%) 7.741 ns/op [Average]
  (min, avg, max) = (770.468, 787.874, 856.753), stdev = 22.825
  CI (99.9%): [780.133, 795.615] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = hy5D-E0NbZSt7INPXIx}BXtJ1CR*TOn:86:XT8c8jjj2BfSmNQf6O_A+Hho[phttp_s{>@)A);"uZ
oM')#qcM7]x'=uC`Tmp]GF1Oo`wX$MG wXJ6qy_NGq}rD.,)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.109 ns/op
# Warmup Iteration   2: 19.291 ns/op
# Warmup Iteration   3: 18.692 ns/op
# Warmup Iteration   4: 18.692 ns/op
# Warmup Iteration   5: 18.694 ns/op
Iteration   1: 18.703 ns/op
Iteration   2: 18.685 ns/op
Iteration   3: 18.683 ns/op
Iteration   4: 18.694 ns/op
Iteration   5: 18.697 ns/op
Iteration   6: 18.688 ns/op
Iteration   7: 18.676 ns/op
Iteration   8: 18.716 ns/op
Iteration   9: 18.715 ns/op
Iteration  10: 18.681 ns/op
Iteration  11: 18.696 ns/op
Iteration  12: 18.791 ns/op
Iteration  13: 18.799 ns/op
Iteration  14: 18.785 ns/op
Iteration  15: 18.803 ns/op
Iteration  16: 18.796 ns/op
Iteration  17: 18.793 ns/op
Iteration  18: 18.781 ns/op
Iteration  19: 18.779 ns/op
Iteration  20: 18.818 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.111 ns/op
# Warmup Iteration   2: 19.288 ns/op
# Warmup Iteration   3: 19.128 ns/op
# Warmup Iteration   4: 19.094 ns/op
# Warmup Iteration   5: 19.108 ns/op
Iteration   1: 19.143 ns/op
Iteration   2: 19.130 ns/op
Iteration   3: 19.123 ns/op
Iteration   4: 19.152 ns/op
Iteration   5: 19.130 ns/op
Iteration   6: 19.139 ns/op
Iteration   7: 19.132 ns/op
Iteration   8: 19.149 ns/op
Iteration   9: 19.172 ns/op
Iteration  10: 19.145 ns/op
Iteration  11: 19.106 ns/op
Iteration  12: 19.195 ns/op
Iteration  13: 19.169 ns/op
Iteration  14: 19.129 ns/op
Iteration  15: 19.118 ns/op
Iteration  16: 19.138 ns/op
Iteration  17: 19.114 ns/op
Iteration  18: 19.144 ns/op
Iteration  19: 19.149 ns/op
Iteration  20: 19.118 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.072 ns/op
# Warmup Iteration   2: 19.333 ns/op
# Warmup Iteration   3: 18.670 ns/op
# Warmup Iteration   4: 18.678 ns/op
# Warmup Iteration   5: 18.678 ns/op
Iteration   1: 18.677 ns/op
Iteration   2: 18.684 ns/op
Iteration   3: 18.682 ns/op
Iteration   4: 18.672 ns/op
Iteration   5: 18.689 ns/op
Iteration   6: 18.681 ns/op
Iteration   7: 18.681 ns/op
Iteration   8: 18.679 ns/op
Iteration   9: 18.670 ns/op
Iteration  10: 18.676 ns/op
Iteration  11: 18.687 ns/op
Iteration  12: 18.687 ns/op
Iteration  13: 18.674 ns/op
Iteration  14: 18.670 ns/op
Iteration  15: 18.676 ns/op
Iteration  16: 18.678 ns/op
Iteration  17: 18.694 ns/op
Iteration  18: 18.679 ns/op
Iteration  19: 18.688 ns/op
Iteration  20: 18.679 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.385 ns/op
# Warmup Iteration   2: 19.286 ns/op
# Warmup Iteration   3: 19.615 ns/op
# Warmup Iteration   4: 19.565 ns/op
# Warmup Iteration   5: 19.569 ns/op
Iteration   1: 19.587 ns/op
Iteration   2: 19.580 ns/op
Iteration   3: 19.559 ns/op
Iteration   4: 19.551 ns/op
Iteration   5: 19.608 ns/op
Iteration   6: 19.584 ns/op
Iteration   7: 19.571 ns/op
Iteration   8: 19.558 ns/op
Iteration   9: 19.519 ns/op
Iteration  10: 19.566 ns/op
Iteration  11: 19.575 ns/op
Iteration  12: 19.568 ns/op
Iteration  13: 19.559 ns/op
Iteration  14: 19.553 ns/op
Iteration  15: 19.559 ns/op
Iteration  16: 19.546 ns/op
Iteration  17: 19.569 ns/op
Iteration  18: 19.516 ns/op
Iteration  19: 19.535 ns/op
Iteration  20: 19.547 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.101 ns/op
# Warmup Iteration   2: 19.404 ns/op
# Warmup Iteration   3: 18.698 ns/op
# Warmup Iteration   4: 18.702 ns/op
# Warmup Iteration   5: 18.697 ns/op
Iteration   1: 18.690 ns/op
Iteration   2: 18.689 ns/op
Iteration   3: 18.693 ns/op
Iteration   4: 18.698 ns/op
Iteration   5: 18.688 ns/op
Iteration   6: 18.692 ns/op
Iteration   7: 18.697 ns/op
Iteration   8: 18.727 ns/op
Iteration   9: 18.693 ns/op
Iteration  10: 18.711 ns/op
Iteration  11: 18.700 ns/op
Iteration  12: 18.684 ns/op
Iteration  13: 18.680 ns/op
Iteration  14: 18.678 ns/op
Iteration  15: 18.682 ns/op
Iteration  16: 18.705 ns/op
Iteration  17: 18.702 ns/op
Iteration  18: 18.692 ns/op
Iteration  19: 18.709 ns/op
Iteration  20: 18.699 ns/op


Result "benchmark.StringContains.stringContains":
  18.963 ±(99.9%) 0.117 ns/op [Average]
  (min, avg, max) = (18.670, 18.963, 19.608), stdev = 0.346
  CI (99.9%): [18.845, 19.080] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  hy5D-E0NbZSt7INPXIx}BXtJ1CR*TOn:86:XT8c8jjj2BfSmNQf6O_A+Hho[phttp_s{>@)A);"uZ
oM')#qcM7]x'=uC`Tmp]GF1Oo`wX$MG wXJ6qy_NGq}rD.,  avgt  100  787.874 ± 7.741  ns/op
StringContains.stringContains     http  hy5D-E0NbZSt7INPXIx}BXtJ1CR*TOn:86:XT8c8jjj2BfSmNQf6O_A+Hho[phttp_s{>@)A);"uZ
oM')#qcM7]x'=uC`Tmp]GF1Oo`wX$MG wXJ6qy_NGq}rD.,  avgt  100   18.963 ± 0.117  ns/op

Benchmark result is saved to http_128_0.5_6.csv
