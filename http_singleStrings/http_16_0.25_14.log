# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = F`Cshttp}a|BB,l)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 307.438 ns/op
# Warmup Iteration   2: 301.159 ns/op
# Warmup Iteration   3: 225.345 ns/op
# Warmup Iteration   4: 227.606 ns/op
# Warmup Iteration   5: 228.335 ns/op
Iteration   1: 229.375 ns/op
Iteration   2: 225.131 ns/op
Iteration   3: 230.633 ns/op
Iteration   4: 231.781 ns/op
Iteration   5: 225.241 ns/op
Iteration   6: 226.374 ns/op
Iteration   7: 226.092 ns/op
Iteration   8: 225.250 ns/op
Iteration   9: 226.238 ns/op
Iteration  10: 226.288 ns/op
Iteration  11: 225.891 ns/op
Iteration  12: 225.185 ns/op
Iteration  13: 226.130 ns/op
Iteration  14: 227.399 ns/op
Iteration  15: 225.125 ns/op
Iteration  16: 226.206 ns/op
Iteration  17: 226.603 ns/op
Iteration  18: 225.208 ns/op
Iteration  19: 226.743 ns/op
Iteration  20: 226.293 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 304.607 ns/op
# Warmup Iteration   2: 295.101 ns/op
# Warmup Iteration   3: 224.745 ns/op
# Warmup Iteration   4: 226.716 ns/op
# Warmup Iteration   5: 228.789 ns/op
Iteration   1: 230.339 ns/op
Iteration   2: 224.690 ns/op
Iteration   3: 229.968 ns/op
Iteration   4: 231.195 ns/op
Iteration   5: 224.697 ns/op
Iteration   6: 225.728 ns/op
Iteration   7: 225.658 ns/op
Iteration   8: 225.750 ns/op
Iteration   9: 224.654 ns/op
Iteration  10: 225.673 ns/op
Iteration  11: 225.915 ns/op
Iteration  12: 224.627 ns/op
Iteration  13: 226.050 ns/op
Iteration  14: 226.145 ns/op
Iteration  15: 224.629 ns/op
Iteration  16: 227.281 ns/op
Iteration  17: 226.162 ns/op
Iteration  18: 224.630 ns/op
Iteration  19: 225.246 ns/op
Iteration  20: 226.717 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 304.839 ns/op
# Warmup Iteration   2: 294.383 ns/op
# Warmup Iteration   3: 224.546 ns/op
# Warmup Iteration   4: 226.514 ns/op
# Warmup Iteration   5: 227.298 ns/op
Iteration   1: 228.278 ns/op
Iteration   2: 224.589 ns/op
Iteration   3: 229.364 ns/op
Iteration   4: 230.953 ns/op
Iteration   5: 224.565 ns/op
Iteration   6: 225.776 ns/op
Iteration   7: 225.549 ns/op
Iteration   8: 226.041 ns/op
Iteration   9: 224.593 ns/op
Iteration  10: 225.620 ns/op
Iteration  11: 225.695 ns/op
Iteration  12: 224.684 ns/op
Iteration  13: 225.597 ns/op
Iteration  14: 225.594 ns/op
Iteration  15: 224.584 ns/op
Iteration  16: 225.623 ns/op
Iteration  17: 225.736 ns/op
Iteration  18: 224.620 ns/op
Iteration  19: 224.945 ns/op
Iteration  20: 225.751 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 307.629 ns/op
# Warmup Iteration   2: 296.155 ns/op
# Warmup Iteration   3: 224.784 ns/op
# Warmup Iteration   4: 226.908 ns/op
# Warmup Iteration   5: 227.650 ns/op
Iteration   1: 228.638 ns/op
Iteration   2: 224.771 ns/op
Iteration   3: 229.822 ns/op
Iteration   4: 231.395 ns/op
Iteration   5: 224.788 ns/op
Iteration   6: 225.790 ns/op
Iteration   7: 226.777 ns/op
Iteration   8: 225.954 ns/op
Iteration   9: 224.775 ns/op
Iteration  10: 227.027 ns/op
Iteration  11: 227.102 ns/op
Iteration  12: 224.699 ns/op
Iteration  13: 225.913 ns/op
Iteration  14: 225.905 ns/op
Iteration  15: 224.723 ns/op
Iteration  16: 226.012 ns/op
Iteration  17: 226.030 ns/op
Iteration  18: 224.750 ns/op
Iteration  19: 225.206 ns/op
Iteration  20: 225.369 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 311.469 ns/op
# Warmup Iteration   2: 297.409 ns/op
# Warmup Iteration   3: 224.974 ns/op
# Warmup Iteration   4: 226.892 ns/op
# Warmup Iteration   5: 227.653 ns/op
Iteration   1: 228.674 ns/op
Iteration   2: 224.824 ns/op
Iteration   3: 229.865 ns/op
Iteration   4: 232.468 ns/op
Iteration   5: 224.894 ns/op
Iteration   6: 226.225 ns/op
Iteration   7: 225.927 ns/op
Iteration   8: 225.959 ns/op
Iteration   9: 224.758 ns/op
Iteration  10: 226.236 ns/op
Iteration  11: 226.186 ns/op
Iteration  12: 224.899 ns/op
Iteration  13: 227.118 ns/op
Iteration  14: 226.421 ns/op
Iteration  15: 224.828 ns/op
Iteration  16: 226.289 ns/op
Iteration  17: 226.318 ns/op
Iteration  18: 224.787 ns/op
Iteration  19: 225.939 ns/op
Iteration  20: 225.397 ns/op


Result "benchmark.StringContains.regexMatches":
  226.306 ±(99.9%) 0.622 ns/op [Average]
  (min, avg, max) = (224.565, 226.306, 232.468), stdev = 1.834
  CI (99.9%): [225.684, 226.928] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = F`Cshttp}a|BB,l)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.462 ns/op
# Warmup Iteration   2: 9.733 ns/op
# Warmup Iteration   3: 10.000 ns/op
# Warmup Iteration   4: 9.983 ns/op
# Warmup Iteration   5: 9.989 ns/op
Iteration   1: 9.990 ns/op
Iteration   2: 9.987 ns/op
Iteration   3: 9.974 ns/op
Iteration   4: 9.991 ns/op
Iteration   5: 9.997 ns/op
Iteration   6: 10.016 ns/op
Iteration   7: 9.997 ns/op
Iteration   8: 9.978 ns/op
Iteration   9: 9.975 ns/op
Iteration  10: 9.988 ns/op
Iteration  11: 9.993 ns/op
Iteration  12: 9.977 ns/op
Iteration  13: 9.984 ns/op
Iteration  14: 9.978 ns/op
Iteration  15: 9.982 ns/op
Iteration  16: 9.975 ns/op
Iteration  17: 9.990 ns/op
Iteration  18: 10.003 ns/op
Iteration  19: 9.991 ns/op
Iteration  20: 9.990 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.216 ns/op
# Warmup Iteration   2: 9.730 ns/op
# Warmup Iteration   3: 9.966 ns/op
# Warmup Iteration   4: 9.970 ns/op
# Warmup Iteration   5: 9.961 ns/op
Iteration   1: 9.961 ns/op
Iteration   2: 9.950 ns/op
Iteration   3: 9.937 ns/op
Iteration   4: 9.952 ns/op
Iteration   5: 9.947 ns/op
Iteration   6: 9.957 ns/op
Iteration   7: 9.960 ns/op
Iteration   8: 9.954 ns/op
Iteration   9: 9.965 ns/op
Iteration  10: 9.938 ns/op
Iteration  11: 9.974 ns/op
Iteration  12: 9.951 ns/op
Iteration  13: 9.956 ns/op
Iteration  14: 9.952 ns/op
Iteration  15: 9.943 ns/op
Iteration  16: 9.966 ns/op
Iteration  17: 9.954 ns/op
Iteration  18: 9.954 ns/op
Iteration  19: 9.959 ns/op
Iteration  20: 9.967 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.189 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.773 ns/op
# Warmup Iteration   4: 9.771 ns/op
# Warmup Iteration   5: 9.780 ns/op
Iteration   1: 9.767 ns/op
Iteration   2: 9.788 ns/op
Iteration   3: 9.776 ns/op
Iteration   4: 9.768 ns/op
Iteration   5: 9.770 ns/op
Iteration   6: 9.762 ns/op
Iteration   7: 9.771 ns/op
Iteration   8: 9.760 ns/op
Iteration   9: 9.766 ns/op
Iteration  10: 9.783 ns/op
Iteration  11: 9.767 ns/op
Iteration  12: 9.787 ns/op
Iteration  13: 9.781 ns/op
Iteration  14: 9.775 ns/op
Iteration  15: 9.761 ns/op
Iteration  16: 9.762 ns/op
Iteration  17: 9.778 ns/op
Iteration  18: 9.775 ns/op
Iteration  19: 9.790 ns/op
Iteration  20: 9.771 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.491 ns/op
# Warmup Iteration   2: 9.732 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.885 ns/op
Iteration   1: 9.882 ns/op
Iteration   2: 9.883 ns/op
Iteration   3: 9.880 ns/op
Iteration   4: 9.875 ns/op
Iteration   5: 9.865 ns/op
Iteration   6: 9.857 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.862 ns/op
Iteration   9: 9.855 ns/op
Iteration  10: 9.881 ns/op
Iteration  11: 9.851 ns/op
Iteration  12: 9.862 ns/op
Iteration  13: 9.859 ns/op
Iteration  14: 9.870 ns/op
Iteration  15: 9.863 ns/op
Iteration  16: 9.867 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.874 ns/op
Iteration  19: 9.849 ns/op
Iteration  20: 9.865 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.481 ns/op
# Warmup Iteration   2: 9.723 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.832 ns/op
# Warmup Iteration   5: 9.822 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.848 ns/op
Iteration   3: 9.835 ns/op
Iteration   4: 9.839 ns/op
Iteration   5: 9.842 ns/op
Iteration   6: 9.826 ns/op
Iteration   7: 9.854 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.856 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.856 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.873 ns/op
Iteration  14: 9.875 ns/op
Iteration  15: 9.843 ns/op
Iteration  16: 9.853 ns/op
Iteration  17: 9.860 ns/op
Iteration  18: 9.844 ns/op
Iteration  19: 9.861 ns/op
Iteration  20: 9.850 ns/op


Result "benchmark.StringContains.stringContains":
  9.887 ±(99.9%) 0.026 ns/op [Average]
  (min, avg, max) = (9.760, 9.887, 10.016), stdev = 0.078
  CI (99.9%): [9.861, 9.913] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  F`Cshttp}a|BB,l  avgt  100  226.306 ± 0.622  ns/op
StringContains.stringContains     http  F`Cshttp}a|BB,l  avgt  100    9.887 ± 0.026  ns/op

Benchmark result is saved to http_16_0.25_14.csv
