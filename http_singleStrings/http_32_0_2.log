# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpZO&(Vi\ZWngBHG4hYqT
kIKF3I)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 496.696 ns/op
# Warmup Iteration   2: 515.431 ns/op
# Warmup Iteration   3: 515.636 ns/op
# Warmup Iteration   4: 444.225 ns/op
# Warmup Iteration   5: 435.903 ns/op
Iteration   1: 439.714 ns/op
Iteration   2: 435.699 ns/op
Iteration   3: 437.748 ns/op
Iteration   4: 438.600 ns/op
Iteration   5: 437.315 ns/op
Iteration   6: 444.355 ns/op
Iteration   7: 436.443 ns/op
Iteration   8: 436.283 ns/op
Iteration   9: 445.159 ns/op
Iteration  10: 435.582 ns/op
Iteration  11: 439.089 ns/op
Iteration  12: 444.260 ns/op
Iteration  13: 435.491 ns/op
Iteration  14: 437.210 ns/op
Iteration  15: 435.147 ns/op
Iteration  16: 435.652 ns/op
Iteration  17: 437.288 ns/op
Iteration  18: 434.653 ns/op
Iteration  19: 434.594 ns/op
Iteration  20: 437.875 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 479.332 ns/op
# Warmup Iteration   2: 494.762 ns/op
# Warmup Iteration   3: 494.539 ns/op
# Warmup Iteration   4: 418.492 ns/op
# Warmup Iteration   5: 418.366 ns/op
Iteration   1: 422.289 ns/op
Iteration   2: 418.292 ns/op
Iteration   3: 423.597 ns/op
Iteration   4: 418.145 ns/op
Iteration   5: 418.152 ns/op
Iteration   6: 425.664 ns/op
Iteration   7: 418.515 ns/op
Iteration   8: 430.751 ns/op
Iteration   9: 418.464 ns/op
Iteration  10: 418.248 ns/op
Iteration  11: 430.360 ns/op
Iteration  12: 418.231 ns/op
Iteration  13: 418.401 ns/op
Iteration  14: 420.496 ns/op
Iteration  15: 418.205 ns/op
Iteration  16: 420.020 ns/op
Iteration  17: 418.208 ns/op
Iteration  18: 418.292 ns/op
Iteration  19: 420.680 ns/op
Iteration  20: 418.736 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 490.075 ns/op
# Warmup Iteration   2: 509.363 ns/op
# Warmup Iteration   3: 511.603 ns/op
# Warmup Iteration   4: 439.365 ns/op
# Warmup Iteration   5: 434.024 ns/op
Iteration   1: 438.034 ns/op
Iteration   2: 434.129 ns/op
Iteration   3: 439.459 ns/op
Iteration   4: 434.097 ns/op
Iteration   5: 434.241 ns/op
Iteration   6: 441.586 ns/op
Iteration   7: 434.202 ns/op
Iteration   8: 434.694 ns/op
Iteration   9: 443.448 ns/op
Iteration  10: 433.673 ns/op
Iteration  11: 439.140 ns/op
Iteration  12: 439.834 ns/op
Iteration  13: 433.862 ns/op
Iteration  14: 436.414 ns/op
Iteration  15: 435.293 ns/op
Iteration  16: 434.578 ns/op
Iteration  17: 436.636 ns/op
Iteration  18: 435.834 ns/op
Iteration  19: 435.911 ns/op
Iteration  20: 436.378 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 480.840 ns/op
# Warmup Iteration   2: 497.875 ns/op
# Warmup Iteration   3: 500.584 ns/op
# Warmup Iteration   4: 420.657 ns/op
# Warmup Iteration   5: 420.564 ns/op
Iteration   1: 424.230 ns/op
Iteration   2: 420.654 ns/op
Iteration   3: 426.352 ns/op
Iteration   4: 420.596 ns/op
Iteration   5: 420.083 ns/op
Iteration   6: 427.218 ns/op
Iteration   7: 420.028 ns/op
Iteration   8: 429.507 ns/op
Iteration   9: 419.887 ns/op
Iteration  10: 420.227 ns/op
Iteration  11: 431.634 ns/op
Iteration  12: 420.160 ns/op
Iteration  13: 419.869 ns/op
Iteration  14: 421.958 ns/op
Iteration  15: 420.219 ns/op
Iteration  16: 422.629 ns/op
Iteration  17: 420.152 ns/op
Iteration  18: 420.120 ns/op
Iteration  19: 422.191 ns/op
Iteration  20: 419.871 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 483.984 ns/op
# Warmup Iteration   2: 499.208 ns/op
# Warmup Iteration   3: 499.119 ns/op
# Warmup Iteration   4: 419.690 ns/op
# Warmup Iteration   5: 419.434 ns/op
Iteration   1: 424.855 ns/op
Iteration   2: 421.565 ns/op
Iteration   3: 426.237 ns/op
Iteration   4: 420.115 ns/op
Iteration   5: 419.912 ns/op
Iteration   6: 426.855 ns/op
Iteration   7: 420.094 ns/op
Iteration   8: 429.182 ns/op
Iteration   9: 419.790 ns/op
Iteration  10: 419.553 ns/op
Iteration  11: 431.713 ns/op
Iteration  12: 420.498 ns/op
Iteration  13: 419.466 ns/op
Iteration  14: 421.685 ns/op
Iteration  15: 419.613 ns/op
Iteration  16: 421.643 ns/op
Iteration  17: 419.951 ns/op
Iteration  18: 419.563 ns/op
Iteration  19: 421.625 ns/op
Iteration  20: 419.900 ns/op


Result "benchmark.StringContains.regexMatches":
  427.947 ±(99.9%) 2.839 ns/op [Average]
  (min, avg, max) = (418.145, 427.947, 445.159), stdev = 8.372
  CI (99.9%): [425.108, 430.787] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpZO&(Vi\ZWngBHG4hYqT
kIKF3I)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.346 ns/op
# Warmup Iteration   2: 9.716 ns/op
# Warmup Iteration   3: 9.878 ns/op
# Warmup Iteration   4: 9.890 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.868 ns/op
Iteration   2: 9.870 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.881 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.869 ns/op
Iteration   7: 9.850 ns/op
Iteration   8: 9.869 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.894 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.853 ns/op
Iteration  14: 9.859 ns/op
Iteration  15: 9.848 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.893 ns/op
Iteration  18: 9.865 ns/op
Iteration  19: 9.852 ns/op
Iteration  20: 9.868 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.440 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.851 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.874 ns/op
Iteration   7: 9.833 ns/op
Iteration   8: 9.852 ns/op
Iteration   9: 9.857 ns/op
Iteration  10: 9.865 ns/op
Iteration  11: 9.860 ns/op
Iteration  12: 9.874 ns/op
Iteration  13: 9.862 ns/op
Iteration  14: 9.850 ns/op
Iteration  15: 9.869 ns/op
Iteration  16: 9.853 ns/op
Iteration  17: 9.863 ns/op
Iteration  18: 9.841 ns/op
Iteration  19: 9.843 ns/op
Iteration  20: 9.858 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.449 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.839 ns/op
# Warmup Iteration   4: 9.830 ns/op
# Warmup Iteration   5: 9.842 ns/op
Iteration   1: 9.859 ns/op
Iteration   2: 9.860 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.844 ns/op
Iteration   5: 9.849 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.841 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.832 ns/op
Iteration  10: 9.831 ns/op
Iteration  11: 9.839 ns/op
Iteration  12: 9.817 ns/op
Iteration  13: 9.825 ns/op
Iteration  14: 9.829 ns/op
Iteration  15: 9.831 ns/op
Iteration  16: 9.834 ns/op
Iteration  17: 9.849 ns/op
Iteration  18: 9.840 ns/op
Iteration  19: 9.841 ns/op
Iteration  20: 9.836 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.215 ns/op
# Warmup Iteration   2: 9.738 ns/op
# Warmup Iteration   3: 9.951 ns/op
# Warmup Iteration   4: 9.960 ns/op
# Warmup Iteration   5: 9.951 ns/op
Iteration   1: 9.947 ns/op
Iteration   2: 9.940 ns/op
Iteration   3: 9.941 ns/op
Iteration   4: 9.949 ns/op
Iteration   5: 9.939 ns/op
Iteration   6: 9.952 ns/op
Iteration   7: 9.940 ns/op
Iteration   8: 9.948 ns/op
Iteration   9: 9.932 ns/op
Iteration  10: 9.941 ns/op
Iteration  11: 9.952 ns/op
Iteration  12: 9.955 ns/op
Iteration  13: 9.947 ns/op
Iteration  14: 9.952 ns/op
Iteration  15: 9.943 ns/op
Iteration  16: 9.964 ns/op
Iteration  17: 9.956 ns/op
Iteration  18: 9.962 ns/op
Iteration  19: 9.965 ns/op
Iteration  20: 9.965 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.458 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.892 ns/op
# Warmup Iteration   4: 9.878 ns/op
# Warmup Iteration   5: 9.872 ns/op
Iteration   1: 9.910 ns/op
Iteration   2: 9.894 ns/op
Iteration   3: 9.885 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.900 ns/op
Iteration   7: 9.900 ns/op
Iteration   8: 9.909 ns/op
Iteration   9: 9.891 ns/op
Iteration  10: 9.879 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.896 ns/op
Iteration  13: 9.895 ns/op
Iteration  14: 9.882 ns/op
Iteration  15: 9.865 ns/op
Iteration  16: 9.892 ns/op
Iteration  17: 9.876 ns/op
Iteration  18: 9.877 ns/op
Iteration  19: 9.878 ns/op
Iteration  20: 9.890 ns/op


Result "benchmark.StringContains.stringContains":
  9.881 ±(99.9%) 0.013 ns/op [Average]
  (min, avg, max) = (9.817, 9.881, 9.965), stdev = 0.039
  CI (99.9%): [9.868, 9.895] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpZO&(Vi\ZWngBHG4hYqT
kIKF3I  avgt  100  427.947 ± 2.839  ns/op
StringContains.stringContains     http  httpZO&(Vi\ZWngBHG4hYqT
kIKF3I  avgt  100    9.881 ± 0.013  ns/op

Benchmark result is saved to http_32_0_2.csv
