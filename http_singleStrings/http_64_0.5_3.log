# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = E;:(])O2T072kI<G$kf;+|~`H@D&)CGxhttp>=bjk.PL hV8sC%Zx#`hi[K=9#am)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 490.894 ns/op
# Warmup Iteration   2: 505.959 ns/op
# Warmup Iteration   3: 502.807 ns/op
# Warmup Iteration   4: 429.975 ns/op
# Warmup Iteration   5: 426.131 ns/op
Iteration   1: 430.307 ns/op
Iteration   2: 425.965 ns/op
Iteration   3: 431.626 ns/op
Iteration   4: 426.142 ns/op
Iteration   5: 426.100 ns/op
Iteration   6: 433.461 ns/op
Iteration   7: 425.857 ns/op
Iteration   8: 436.318 ns/op
Iteration   9: 426.044 ns/op
Iteration  10: 425.901 ns/op
Iteration  11: 438.138 ns/op
Iteration  12: 425.884 ns/op
Iteration  13: 425.855 ns/op
Iteration  14: 428.377 ns/op
Iteration  15: 425.976 ns/op
Iteration  16: 425.925 ns/op
Iteration  17: 427.721 ns/op
Iteration  18: 425.890 ns/op
Iteration  19: 428.096 ns/op
Iteration  20: 427.147 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 507.390 ns/op
# Warmup Iteration   2: 520.806 ns/op
# Warmup Iteration   3: 522.145 ns/op
# Warmup Iteration   4: 456.484 ns/op
# Warmup Iteration   5: 446.176 ns/op
Iteration   1: 451.605 ns/op
Iteration   2: 447.404 ns/op
Iteration   3: 446.281 ns/op
Iteration   4: 451.601 ns/op
Iteration   5: 446.056 ns/op
Iteration   6: 453.945 ns/op
Iteration   7: 446.245 ns/op
Iteration   8: 446.632 ns/op
Iteration   9: 456.082 ns/op
Iteration  10: 445.653 ns/op
Iteration  11: 445.709 ns/op
Iteration  12: 458.412 ns/op
Iteration  13: 445.774 ns/op
Iteration  14: 446.413 ns/op
Iteration  15: 447.830 ns/op
Iteration  16: 445.873 ns/op
Iteration  17: 446.155 ns/op
Iteration  18: 448.001 ns/op
Iteration  19: 445.563 ns/op
Iteration  20: 445.904 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 489.760 ns/op
# Warmup Iteration   2: 499.863 ns/op
# Warmup Iteration   3: 511.996 ns/op
# Warmup Iteration   4: 441.939 ns/op
# Warmup Iteration   5: 437.634 ns/op
Iteration   1: 441.380 ns/op
Iteration   2: 437.543 ns/op
Iteration   3: 442.802 ns/op
Iteration   4: 437.423 ns/op
Iteration   5: 437.457 ns/op
Iteration   6: 444.570 ns/op
Iteration   7: 437.319 ns/op
Iteration   8: 438.131 ns/op
Iteration   9: 446.731 ns/op
Iteration  10: 437.534 ns/op
Iteration  11: 443.442 ns/op
Iteration  12: 450.750 ns/op
Iteration  13: 445.064 ns/op
Iteration  14: 447.870 ns/op
Iteration  15: 437.720 ns/op
Iteration  16: 437.642 ns/op
Iteration  17: 439.165 ns/op
Iteration  18: 435.478 ns/op
Iteration  19: 435.573 ns/op
Iteration  20: 438.464 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 506.756 ns/op
# Warmup Iteration   2: 520.529 ns/op
# Warmup Iteration   3: 521.823 ns/op
# Warmup Iteration   4: 456.134 ns/op
# Warmup Iteration   5: 445.767 ns/op
Iteration   1: 449.928 ns/op
Iteration   2: 445.580 ns/op
Iteration   3: 445.480 ns/op
Iteration   4: 451.346 ns/op
Iteration   5: 445.495 ns/op
Iteration   6: 453.244 ns/op
Iteration   7: 445.637 ns/op
Iteration   8: 445.470 ns/op
Iteration   9: 455.656 ns/op
Iteration  10: 445.604 ns/op
Iteration  11: 446.395 ns/op
Iteration  12: 459.023 ns/op
Iteration  13: 445.648 ns/op
Iteration  14: 445.302 ns/op
Iteration  15: 447.625 ns/op
Iteration  16: 445.315 ns/op
Iteration  17: 445.268 ns/op
Iteration  18: 447.488 ns/op
Iteration  19: 445.819 ns/op
Iteration  20: 445.818 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 488.497 ns/op
# Warmup Iteration   2: 499.841 ns/op
# Warmup Iteration   3: 502.427 ns/op
# Warmup Iteration   4: 424.410 ns/op
# Warmup Iteration   5: 424.282 ns/op
Iteration   1: 428.755 ns/op
Iteration   2: 424.027 ns/op
Iteration   3: 430.017 ns/op
Iteration   4: 424.402 ns/op
Iteration   5: 424.382 ns/op
Iteration   6: 431.339 ns/op
Iteration   7: 424.395 ns/op
Iteration   8: 434.032 ns/op
Iteration   9: 424.325 ns/op
Iteration  10: 424.200 ns/op
Iteration  11: 436.892 ns/op
Iteration  12: 424.082 ns/op
Iteration  13: 424.381 ns/op
Iteration  14: 426.420 ns/op
Iteration  15: 424.052 ns/op
Iteration  16: 424.430 ns/op
Iteration  17: 426.640 ns/op
Iteration  18: 424.553 ns/op
Iteration  19: 426.538 ns/op
Iteration  20: 424.331 ns/op


Result "benchmark.StringContains.regexMatches":
  438.353 ±(99.9%) 3.435 ns/op [Average]
  (min, avg, max) = (424.027, 438.353, 459.023), stdev = 10.128
  CI (99.9%): [434.918, 441.788] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = E;:(])O2T072kI<G$kf;+|~`H@D&)CGxhttp>=bjk.PL hV8sC%Zx#`hi[K=9#am)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.658 ns/op
# Warmup Iteration   2: 14.766 ns/op
# Warmup Iteration   3: 14.322 ns/op
# Warmup Iteration   4: 14.324 ns/op
# Warmup Iteration   5: 14.320 ns/op
Iteration   1: 14.317 ns/op
Iteration   2: 14.327 ns/op
Iteration   3: 14.322 ns/op
Iteration   4: 14.329 ns/op
Iteration   5: 14.322 ns/op
Iteration   6: 14.329 ns/op
Iteration   7: 14.330 ns/op
Iteration   8: 14.314 ns/op
Iteration   9: 14.316 ns/op
Iteration  10: 14.322 ns/op
Iteration  11: 14.308 ns/op
Iteration  12: 14.317 ns/op
Iteration  13: 14.317 ns/op
Iteration  14: 14.328 ns/op
Iteration  15: 14.320 ns/op
Iteration  16: 14.314 ns/op
Iteration  17: 14.326 ns/op
Iteration  18: 14.336 ns/op
Iteration  19: 14.336 ns/op
Iteration  20: 14.318 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.678 ns/op
# Warmup Iteration   2: 14.684 ns/op
# Warmup Iteration   3: 14.364 ns/op
# Warmup Iteration   4: 14.362 ns/op
# Warmup Iteration   5: 14.350 ns/op
Iteration   1: 14.363 ns/op
Iteration   2: 14.363 ns/op
Iteration   3: 14.382 ns/op
Iteration   4: 14.369 ns/op
Iteration   5: 14.349 ns/op
Iteration   6: 14.350 ns/op
Iteration   7: 14.349 ns/op
Iteration   8: 14.360 ns/op
Iteration   9: 14.362 ns/op
Iteration  10: 14.349 ns/op
Iteration  11: 14.379 ns/op
Iteration  12: 14.373 ns/op
Iteration  13: 14.379 ns/op
Iteration  14: 14.352 ns/op
Iteration  15: 14.366 ns/op
Iteration  16: 14.352 ns/op
Iteration  17: 14.358 ns/op
Iteration  18: 14.368 ns/op
Iteration  19: 14.374 ns/op
Iteration  20: 14.372 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.743 ns/op
# Warmup Iteration   2: 14.888 ns/op
# Warmup Iteration   3: 14.318 ns/op
# Warmup Iteration   4: 14.299 ns/op
# Warmup Iteration   5: 14.326 ns/op
Iteration   1: 14.321 ns/op
Iteration   2: 14.304 ns/op
Iteration   3: 14.322 ns/op
Iteration   4: 14.332 ns/op
Iteration   5: 14.341 ns/op
Iteration   6: 14.313 ns/op
Iteration   7: 14.315 ns/op
Iteration   8: 14.372 ns/op
Iteration   9: 14.327 ns/op
Iteration  10: 14.326 ns/op
Iteration  11: 14.326 ns/op
Iteration  12: 14.325 ns/op
Iteration  13: 14.328 ns/op
Iteration  14: 14.317 ns/op
Iteration  15: 14.326 ns/op
Iteration  16: 14.340 ns/op
Iteration  17: 14.327 ns/op
Iteration  18: 14.320 ns/op
Iteration  19: 14.338 ns/op
Iteration  20: 14.341 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.752 ns/op
# Warmup Iteration   2: 14.708 ns/op
# Warmup Iteration   3: 14.306 ns/op
# Warmup Iteration   4: 14.308 ns/op
# Warmup Iteration   5: 14.314 ns/op
Iteration   1: 14.322 ns/op
Iteration   2: 14.322 ns/op
Iteration   3: 14.357 ns/op
Iteration   4: 14.324 ns/op
Iteration   5: 14.317 ns/op
Iteration   6: 14.298 ns/op
Iteration   7: 14.303 ns/op
Iteration   8: 14.329 ns/op
Iteration   9: 14.307 ns/op
Iteration  10: 14.321 ns/op
Iteration  11: 14.304 ns/op
Iteration  12: 14.316 ns/op
Iteration  13: 14.319 ns/op
Iteration  14: 14.311 ns/op
Iteration  15: 14.320 ns/op
Iteration  16: 14.340 ns/op
Iteration  17: 14.317 ns/op
Iteration  18: 14.306 ns/op
Iteration  19: 14.324 ns/op
Iteration  20: 14.311 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 14.894 ns/op
# Warmup Iteration   3: 14.312 ns/op
# Warmup Iteration   4: 14.307 ns/op
# Warmup Iteration   5: 14.301 ns/op
Iteration   1: 14.278 ns/op
Iteration   2: 14.289 ns/op
Iteration   3: 14.293 ns/op
Iteration   4: 14.287 ns/op
Iteration   5: 14.297 ns/op
Iteration   6: 14.292 ns/op
Iteration   7: 14.306 ns/op
Iteration   8: 14.304 ns/op
Iteration   9: 14.304 ns/op
Iteration  10: 14.293 ns/op
Iteration  11: 14.296 ns/op
Iteration  12: 14.347 ns/op
Iteration  13: 14.336 ns/op
Iteration  14: 14.315 ns/op
Iteration  15: 14.302 ns/op
Iteration  16: 14.303 ns/op
Iteration  17: 14.292 ns/op
Iteration  18: 14.292 ns/op
Iteration  19: 14.313 ns/op
Iteration  20: 14.310 ns/op


Result "benchmark.StringContains.stringContains":
  14.327 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (14.278, 14.327, 14.382), stdev = 0.024
  CI (99.9%): [14.319, 14.335] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  E;:(])O2T072kI<G$kf;+|~`H@D&)CGxhttp>=bjk.PL hV8sC%Zx#`hi[K=9#am  avgt  100  438.353 ± 3.435  ns/op
StringContains.stringContains     http  E;:(])O2T072kI<G$kf;+|~`H@D&)CGxhttp>=bjk.PL hV8sC%Zx#`hi[K=9#am  avgt  100   14.327 ± 0.008  ns/op

Benchmark result is saved to http_64_0.5_3.csv
