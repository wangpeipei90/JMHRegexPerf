# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = MY!ttO|fDG1h k$Wv]woL#Shttp4|~	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 270.742 ns/op
# Warmup Iteration   2: 221.559 ns/op
# Warmup Iteration   3: 194.373 ns/op
# Warmup Iteration   4: 194.862 ns/op
# Warmup Iteration   5: 195.699 ns/op
Iteration   1: 192.430 ns/op
Iteration   2: 196.736 ns/op
Iteration   3: 197.993 ns/op
Iteration   4: 193.413 ns/op
Iteration   5: 193.470 ns/op
Iteration   6: 192.490 ns/op
Iteration   7: 193.400 ns/op
Iteration   8: 193.327 ns/op
Iteration   9: 194.372 ns/op
Iteration  10: 193.632 ns/op
Iteration  11: 192.482 ns/op
Iteration  12: 193.476 ns/op
Iteration  13: 193.527 ns/op
Iteration  14: 193.696 ns/op
Iteration  15: 194.390 ns/op
Iteration  16: 192.648 ns/op
Iteration  17: 193.147 ns/op
Iteration  18: 193.064 ns/op
Iteration  19: 193.239 ns/op
Iteration  20: 193.218 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 256.743 ns/op
# Warmup Iteration   2: 203.156 ns/op
# Warmup Iteration   3: 181.734 ns/op
# Warmup Iteration   4: 182.213 ns/op
# Warmup Iteration   5: 182.989 ns/op
Iteration   1: 183.990 ns/op
Iteration   2: 184.916 ns/op
Iteration   3: 180.030 ns/op
Iteration   4: 180.884 ns/op
Iteration   5: 180.840 ns/op
Iteration   6: 180.796 ns/op
Iteration   7: 181.084 ns/op
Iteration   8: 181.934 ns/op
Iteration   9: 180.801 ns/op
Iteration  10: 180.038 ns/op
Iteration  11: 180.947 ns/op
Iteration  12: 180.796 ns/op
Iteration  13: 180.721 ns/op
Iteration  14: 180.302 ns/op
Iteration  15: 180.333 ns/op
Iteration  16: 180.342 ns/op
Iteration  17: 180.052 ns/op
Iteration  18: 180.312 ns/op
Iteration  19: 180.545 ns/op
Iteration  20: 180.642 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 257.281 ns/op
# Warmup Iteration   2: 202.436 ns/op
# Warmup Iteration   3: 181.389 ns/op
# Warmup Iteration   4: 182.018 ns/op
# Warmup Iteration   5: 182.852 ns/op
Iteration   1: 183.962 ns/op
Iteration   2: 185.188 ns/op
Iteration   3: 180.184 ns/op
Iteration   4: 181.914 ns/op
Iteration   5: 180.772 ns/op
Iteration   6: 180.792 ns/op
Iteration   7: 180.805 ns/op
Iteration   8: 180.643 ns/op
Iteration   9: 180.505 ns/op
Iteration  10: 180.101 ns/op
Iteration  11: 180.977 ns/op
Iteration  12: 180.638 ns/op
Iteration  13: 180.597 ns/op
Iteration  14: 180.820 ns/op
Iteration  15: 181.459 ns/op
Iteration  16: 180.235 ns/op
Iteration  17: 180.214 ns/op
Iteration  18: 179.684 ns/op
Iteration  19: 180.298 ns/op
Iteration  20: 180.321 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 269.805 ns/op
# Warmup Iteration   2: 220.861 ns/op
# Warmup Iteration   3: 194.023 ns/op
# Warmup Iteration   4: 194.681 ns/op
# Warmup Iteration   5: 195.400 ns/op
Iteration   1: 192.240 ns/op
Iteration   2: 196.863 ns/op
Iteration   3: 197.960 ns/op
Iteration   4: 193.143 ns/op
Iteration   5: 193.183 ns/op
Iteration   6: 192.180 ns/op
Iteration   7: 193.193 ns/op
Iteration   8: 193.291 ns/op
Iteration   9: 193.213 ns/op
Iteration  10: 193.406 ns/op
Iteration  11: 192.154 ns/op
Iteration  12: 193.344 ns/op
Iteration  13: 193.604 ns/op
Iteration  14: 193.824 ns/op
Iteration  15: 193.145 ns/op
Iteration  16: 192.922 ns/op
Iteration  17: 192.686 ns/op
Iteration  18: 193.269 ns/op
Iteration  19: 193.094 ns/op
Iteration  20: 193.133 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 259.458 ns/op
# Warmup Iteration   2: 203.877 ns/op
# Warmup Iteration   3: 183.587 ns/op
# Warmup Iteration   4: 183.135 ns/op
# Warmup Iteration   5: 184.987 ns/op
Iteration   1: 184.850 ns/op
Iteration   2: 185.925 ns/op
Iteration   3: 180.586 ns/op
Iteration   4: 181.855 ns/op
Iteration   5: 181.431 ns/op
Iteration   6: 181.513 ns/op
Iteration   7: 181.549 ns/op
Iteration   8: 181.602 ns/op
Iteration   9: 182.955 ns/op
Iteration  10: 180.580 ns/op
Iteration  11: 182.637 ns/op
Iteration  12: 183.474 ns/op
Iteration  13: 181.809 ns/op
Iteration  14: 181.616 ns/op
Iteration  15: 181.150 ns/op
Iteration  16: 181.115 ns/op
Iteration  17: 180.576 ns/op
Iteration  18: 181.132 ns/op
Iteration  19: 180.975 ns/op
Iteration  20: 181.173 ns/op


Result "benchmark.StringContains.regexMatches":
  186.229 ±(99.9%) 2.104 ns/op [Average]
  (min, avg, max) = (179.684, 186.229, 197.993), stdev = 6.203
  CI (99.9%): [184.125, 188.333] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = MY!ttO|fDG1h k$Wv]woL#Shttp4|~	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.325 ns/op
# Warmup Iteration   2: 12.674 ns/op
# Warmup Iteration   3: 12.118 ns/op
# Warmup Iteration   4: 12.138 ns/op
# Warmup Iteration   5: 12.142 ns/op
Iteration   1: 12.126 ns/op
Iteration   2: 12.122 ns/op
Iteration   3: 12.132 ns/op
Iteration   4: 12.128 ns/op
Iteration   5: 12.128 ns/op
Iteration   6: 12.127 ns/op
Iteration   7: 12.124 ns/op
Iteration   8: 12.135 ns/op
Iteration   9: 12.124 ns/op
Iteration  10: 12.119 ns/op
Iteration  11: 12.127 ns/op
Iteration  12: 12.839 ns/op
Iteration  13: 12.839 ns/op
Iteration  14: 12.840 ns/op
Iteration  15: 12.839 ns/op
Iteration  16: 12.839 ns/op
Iteration  17: 12.839 ns/op
Iteration  18: 12.838 ns/op
Iteration  19: 12.839 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.374 ns/op
# Warmup Iteration   2: 12.552 ns/op
# Warmup Iteration   3: 12.220 ns/op
# Warmup Iteration   4: 12.221 ns/op
# Warmup Iteration   5: 12.239 ns/op
Iteration   1: 12.234 ns/op
Iteration   2: 12.230 ns/op
Iteration   3: 12.226 ns/op
Iteration   4: 12.220 ns/op
Iteration   5: 12.235 ns/op
Iteration   6: 12.228 ns/op
Iteration   7: 12.226 ns/op
Iteration   8: 12.247 ns/op
Iteration   9: 12.237 ns/op
Iteration  10: 12.231 ns/op
Iteration  11: 12.243 ns/op
Iteration  12: 12.844 ns/op
Iteration  13: 12.845 ns/op
Iteration  14: 12.843 ns/op
Iteration  15: 12.843 ns/op
Iteration  16: 12.844 ns/op
Iteration  17: 12.845 ns/op
Iteration  18: 12.844 ns/op
Iteration  19: 12.846 ns/op
Iteration  20: 12.866 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.299 ns/op
# Warmup Iteration   2: 12.710 ns/op
# Warmup Iteration   3: 12.134 ns/op
# Warmup Iteration   4: 12.124 ns/op
# Warmup Iteration   5: 12.135 ns/op
Iteration   1: 12.124 ns/op
Iteration   2: 12.116 ns/op
Iteration   3: 12.131 ns/op
Iteration   4: 12.126 ns/op
Iteration   5: 12.126 ns/op
Iteration   6: 12.150 ns/op
Iteration   7: 12.126 ns/op
Iteration   8: 12.120 ns/op
Iteration   9: 12.109 ns/op
Iteration  10: 12.143 ns/op
Iteration  11: 12.124 ns/op
Iteration  12: 12.148 ns/op
Iteration  13: 12.136 ns/op
Iteration  14: 12.135 ns/op
Iteration  15: 12.134 ns/op
Iteration  16: 12.136 ns/op
Iteration  17: 12.126 ns/op
Iteration  18: 12.143 ns/op
Iteration  19: 12.141 ns/op
Iteration  20: 12.138 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.325 ns/op
# Warmup Iteration   2: 12.772 ns/op
# Warmup Iteration   3: 12.116 ns/op
# Warmup Iteration   4: 12.130 ns/op
# Warmup Iteration   5: 12.125 ns/op
Iteration   1: 12.124 ns/op
Iteration   2: 12.119 ns/op
Iteration   3: 12.132 ns/op
Iteration   4: 12.120 ns/op
Iteration   5: 12.131 ns/op
Iteration   6: 12.124 ns/op
Iteration   7: 12.119 ns/op
Iteration   8: 12.135 ns/op
Iteration   9: 12.134 ns/op
Iteration  10: 12.127 ns/op
Iteration  11: 12.130 ns/op
Iteration  12: 12.842 ns/op
Iteration  13: 12.841 ns/op
Iteration  14: 12.842 ns/op
Iteration  15: 12.842 ns/op
Iteration  16: 12.845 ns/op
Iteration  17: 12.843 ns/op
Iteration  18: 12.840 ns/op
Iteration  19: 12.842 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.332 ns/op
# Warmup Iteration   2: 12.527 ns/op
# Warmup Iteration   3: 12.242 ns/op
# Warmup Iteration   4: 12.243 ns/op
# Warmup Iteration   5: 12.244 ns/op
Iteration   1: 12.240 ns/op
Iteration   2: 12.253 ns/op
Iteration   3: 12.255 ns/op
Iteration   4: 12.241 ns/op
Iteration   5: 12.248 ns/op
Iteration   6: 12.251 ns/op
Iteration   7: 12.250 ns/op
Iteration   8: 12.249 ns/op
Iteration   9: 12.249 ns/op
Iteration  10: 12.242 ns/op
Iteration  11: 12.234 ns/op
Iteration  12: 12.842 ns/op
Iteration  13: 12.841 ns/op
Iteration  14: 12.843 ns/op
Iteration  15: 12.842 ns/op
Iteration  16: 12.842 ns/op
Iteration  17: 12.843 ns/op
Iteration  18: 12.841 ns/op
Iteration  19: 12.842 ns/op
Iteration  20: 12.843 ns/op


Result "benchmark.StringContains.stringContains":
  12.410 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (12.109, 12.410, 12.866), stdev = 0.329
  CI (99.9%): [12.299, 12.522] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  MY!ttO|fDG1h k$Wv]woL#Shttp4|~	  avgt  100  186.229 ± 2.104  ns/op
StringContains.stringContains     http  MY!ttO|fDG1h k$Wv]woL#Shttp4|~	  avgt  100   12.410 ± 0.111  ns/op

Benchmark result is saved to http_32_0.75_3.csv
