# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 7!|KY#zW:io|http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 220.365 ns/op
# Warmup Iteration   2: 145.115 ns/op
# Warmup Iteration   3: 127.968 ns/op
# Warmup Iteration   4: 127.420 ns/op
# Warmup Iteration   5: 127.987 ns/op
Iteration   1: 129.567 ns/op
Iteration   2: 125.785 ns/op
Iteration   3: 125.781 ns/op
Iteration   4: 125.670 ns/op
Iteration   5: 126.273 ns/op
Iteration   6: 125.703 ns/op
Iteration   7: 125.772 ns/op
Iteration   8: 125.805 ns/op
Iteration   9: 125.460 ns/op
Iteration  10: 125.678 ns/op
Iteration  11: 125.429 ns/op
Iteration  12: 125.688 ns/op
Iteration  13: 125.558 ns/op
Iteration  14: 125.996 ns/op
Iteration  15: 125.627 ns/op
Iteration  16: 125.568 ns/op
Iteration  17: 126.367 ns/op
Iteration  18: 126.240 ns/op
Iteration  19: 126.452 ns/op
Iteration  20: 126.077 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 213.400 ns/op
# Warmup Iteration   2: 144.682 ns/op
# Warmup Iteration   3: 127.644 ns/op
# Warmup Iteration   4: 128.084 ns/op
# Warmup Iteration   5: 128.775 ns/op
Iteration   1: 130.226 ns/op
Iteration   2: 126.630 ns/op
Iteration   3: 127.379 ns/op
Iteration   4: 126.548 ns/op
Iteration   5: 127.190 ns/op
Iteration   6: 127.981 ns/op
Iteration   7: 126.536 ns/op
Iteration   8: 126.572 ns/op
Iteration   9: 126.219 ns/op
Iteration  10: 126.361 ns/op
Iteration  11: 126.489 ns/op
Iteration  12: 126.231 ns/op
Iteration  13: 128.006 ns/op
Iteration  14: 128.403 ns/op
Iteration  15: 126.321 ns/op
Iteration  16: 126.422 ns/op
Iteration  17: 126.387 ns/op
Iteration  18: 126.386 ns/op
Iteration  19: 126.504 ns/op
Iteration  20: 126.306 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 214.878 ns/op
# Warmup Iteration   2: 143.172 ns/op
# Warmup Iteration   3: 124.970 ns/op
# Warmup Iteration   4: 125.521 ns/op
# Warmup Iteration   5: 126.510 ns/op
Iteration   1: 127.226 ns/op
Iteration   2: 124.103 ns/op
Iteration   3: 124.014 ns/op
Iteration   4: 124.065 ns/op
Iteration   5: 124.612 ns/op
Iteration   6: 124.019 ns/op
Iteration   7: 123.978 ns/op
Iteration   8: 124.041 ns/op
Iteration   9: 123.856 ns/op
Iteration  10: 123.668 ns/op
Iteration  11: 123.670 ns/op
Iteration  12: 123.882 ns/op
Iteration  13: 123.742 ns/op
Iteration  14: 123.694 ns/op
Iteration  15: 123.690 ns/op
Iteration  16: 124.033 ns/op
Iteration  17: 123.708 ns/op
Iteration  18: 123.701 ns/op
Iteration  19: 123.850 ns/op
Iteration  20: 124.189 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 215.677 ns/op
# Warmup Iteration   2: 144.193 ns/op
# Warmup Iteration   3: 127.737 ns/op
# Warmup Iteration   4: 127.037 ns/op
# Warmup Iteration   5: 127.740 ns/op
Iteration   1: 129.767 ns/op
Iteration   2: 125.692 ns/op
Iteration   3: 125.453 ns/op
Iteration   4: 125.546 ns/op
Iteration   5: 126.077 ns/op
Iteration   6: 126.258 ns/op
Iteration   7: 125.571 ns/op
Iteration   8: 125.545 ns/op
Iteration   9: 125.416 ns/op
Iteration  10: 125.172 ns/op
Iteration  11: 125.190 ns/op
Iteration  12: 125.218 ns/op
Iteration  13: 125.211 ns/op
Iteration  14: 125.388 ns/op
Iteration  15: 125.195 ns/op
Iteration  16: 125.206 ns/op
Iteration  17: 125.221 ns/op
Iteration  18: 125.548 ns/op
Iteration  19: 125.271 ns/op
Iteration  20: 125.308 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 213.086 ns/op
# Warmup Iteration   2: 142.999 ns/op
# Warmup Iteration   3: 124.749 ns/op
# Warmup Iteration   4: 125.160 ns/op
# Warmup Iteration   5: 127.378 ns/op
Iteration   1: 126.008 ns/op
Iteration   2: 123.639 ns/op
Iteration   3: 123.663 ns/op
Iteration   4: 123.727 ns/op
Iteration   5: 124.231 ns/op
Iteration   6: 123.645 ns/op
Iteration   7: 123.616 ns/op
Iteration   8: 125.126 ns/op
Iteration   9: 123.485 ns/op
Iteration  10: 123.583 ns/op
Iteration  11: 123.472 ns/op
Iteration  12: 124.167 ns/op
Iteration  13: 123.570 ns/op
Iteration  14: 123.524 ns/op
Iteration  15: 123.503 ns/op
Iteration  16: 124.350 ns/op
Iteration  17: 123.422 ns/op
Iteration  18: 123.485 ns/op
Iteration  19: 123.597 ns/op
Iteration  20: 124.256 ns/op


Result "benchmark.StringContains.regexMatches":
  125.327 ±(99.9%) 0.493 ns/op [Average]
  (min, avg, max) = (123.422, 125.327, 130.226), stdev = 1.454
  CI (99.9%): [124.833, 125.820] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 7!|KY#zW:io|http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.735 ns/op
# Warmup Iteration   3: 9.961 ns/op
# Warmup Iteration   4: 9.976 ns/op
# Warmup Iteration   5: 9.962 ns/op
Iteration   1: 9.948 ns/op
Iteration   2: 9.962 ns/op
Iteration   3: 9.955 ns/op
Iteration   4: 9.996 ns/op
Iteration   5: 9.961 ns/op
Iteration   6: 9.972 ns/op
Iteration   7: 9.983 ns/op
Iteration   8: 10.001 ns/op
Iteration   9: 9.969 ns/op
Iteration  10: 9.981 ns/op
Iteration  11: 9.949 ns/op
Iteration  12: 9.960 ns/op
Iteration  13: 9.969 ns/op
Iteration  14: 9.951 ns/op
Iteration  15: 9.961 ns/op
Iteration  16: 9.966 ns/op
Iteration  17: 9.985 ns/op
Iteration  18: 9.950 ns/op
Iteration  19: 9.933 ns/op
Iteration  20: 9.987 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.222 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.877 ns/op
# Warmup Iteration   4: 9.882 ns/op
# Warmup Iteration   5: 9.871 ns/op
Iteration   1: 9.891 ns/op
Iteration   2: 9.880 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.864 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.855 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.851 ns/op
Iteration   9: 9.858 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.880 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.853 ns/op
Iteration  14: 9.878 ns/op
Iteration  15: 9.859 ns/op
Iteration  16: 9.854 ns/op
Iteration  17: 9.866 ns/op
Iteration  18: 9.877 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.864 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.459 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.944 ns/op
# Warmup Iteration   4: 9.963 ns/op
# Warmup Iteration   5: 9.943 ns/op
Iteration   1: 9.984 ns/op
Iteration   2: 9.939 ns/op
Iteration   3: 9.959 ns/op
Iteration   4: 9.954 ns/op
Iteration   5: 9.954 ns/op
Iteration   6: 9.982 ns/op
Iteration   7: 9.971 ns/op
Iteration   8: 9.972 ns/op
Iteration   9: 9.959 ns/op
Iteration  10: 9.958 ns/op
Iteration  11: 9.958 ns/op
Iteration  12: 9.968 ns/op
Iteration  13: 9.954 ns/op
Iteration  14: 9.964 ns/op
Iteration  15: 9.959 ns/op
Iteration  16: 9.948 ns/op
Iteration  17: 9.950 ns/op
Iteration  18: 9.954 ns/op
Iteration  19: 9.950 ns/op
Iteration  20: 9.951 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.331 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.841 ns/op
# Warmup Iteration   4: 9.852 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.848 ns/op
Iteration   5: 9.847 ns/op
Iteration   6: 9.865 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.859 ns/op
Iteration   9: 9.847 ns/op
Iteration  10: 9.857 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.835 ns/op
Iteration  13: 9.852 ns/op
Iteration  14: 9.839 ns/op
Iteration  15: 9.854 ns/op
Iteration  16: 9.853 ns/op
Iteration  17: 9.856 ns/op
Iteration  18: 9.846 ns/op
Iteration  19: 9.841 ns/op
Iteration  20: 9.861 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.231 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.981 ns/op
# Warmup Iteration   4: 9.949 ns/op
# Warmup Iteration   5: 9.963 ns/op
Iteration   1: 9.952 ns/op
Iteration   2: 9.971 ns/op
Iteration   3: 9.961 ns/op
Iteration   4: 9.955 ns/op
Iteration   5: 9.955 ns/op
Iteration   6: 9.961 ns/op
Iteration   7: 9.940 ns/op
Iteration   8: 9.962 ns/op
Iteration   9: 9.952 ns/op
Iteration  10: 9.950 ns/op
Iteration  11: 9.948 ns/op
Iteration  12: 9.963 ns/op
Iteration  13: 9.949 ns/op
Iteration  14: 9.968 ns/op
Iteration  15: 9.977 ns/op
Iteration  16: 9.965 ns/op
Iteration  17: 9.959 ns/op
Iteration  18: 9.956 ns/op
Iteration  19: 9.986 ns/op
Iteration  20: 9.986 ns/op


Result "benchmark.StringContains.stringContains":
  9.921 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (9.835, 9.921, 10.001), stdev = 0.052
  CI (99.9%): [9.903, 9.939] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  7!|KY#zW:io|http  avgt  100  125.327 ± 0.493  ns/op
StringContains.stringContains     http  7!|KY#zW:io|http  avgt  100    9.921 ± 0.018  ns/op

Benchmark result is saved to http_16_0.75_1.csv
