# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = !G.4http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 220.254 ns/op
# Warmup Iteration   2: 151.589 ns/op
# Warmup Iteration   3: 132.837 ns/op
# Warmup Iteration   4: 131.987 ns/op
# Warmup Iteration   5: 132.696 ns/op
Iteration   1: 133.545 ns/op
Iteration   2: 130.972 ns/op
Iteration   3: 130.372 ns/op
Iteration   4: 130.268 ns/op
Iteration   5: 130.388 ns/op
Iteration   6: 130.573 ns/op
Iteration   7: 130.951 ns/op
Iteration   8: 130.462 ns/op
Iteration   9: 129.988 ns/op
Iteration  10: 129.960 ns/op
Iteration  11: 130.050 ns/op
Iteration  12: 130.317 ns/op
Iteration  13: 129.990 ns/op
Iteration  14: 130.036 ns/op
Iteration  15: 130.056 ns/op
Iteration  16: 130.130 ns/op
Iteration  17: 130.212 ns/op
Iteration  18: 130.343 ns/op
Iteration  19: 130.043 ns/op
Iteration  20: 130.030 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.515 ns/op
# Warmup Iteration   2: 144.734 ns/op
# Warmup Iteration   3: 128.566 ns/op
# Warmup Iteration   4: 128.393 ns/op
# Warmup Iteration   5: 128.957 ns/op
Iteration   1: 130.362 ns/op
Iteration   2: 126.790 ns/op
Iteration   3: 126.848 ns/op
Iteration   4: 126.694 ns/op
Iteration   5: 126.746 ns/op
Iteration   6: 127.312 ns/op
Iteration   7: 126.655 ns/op
Iteration   8: 126.696 ns/op
Iteration   9: 126.414 ns/op
Iteration  10: 126.706 ns/op
Iteration  11: 126.493 ns/op
Iteration  12: 126.632 ns/op
Iteration  13: 126.370 ns/op
Iteration  14: 127.010 ns/op
Iteration  15: 126.339 ns/op
Iteration  16: 126.236 ns/op
Iteration  17: 126.631 ns/op
Iteration  18: 126.562 ns/op
Iteration  19: 126.811 ns/op
Iteration  20: 126.617 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 218.071 ns/op
# Warmup Iteration   2: 151.465 ns/op
# Warmup Iteration   3: 133.839 ns/op
# Warmup Iteration   4: 132.714 ns/op
# Warmup Iteration   5: 133.331 ns/op
Iteration   1: 134.240 ns/op
Iteration   2: 131.806 ns/op
Iteration   3: 131.027 ns/op
Iteration   4: 131.046 ns/op
Iteration   5: 131.077 ns/op
Iteration   6: 131.759 ns/op
Iteration   7: 131.897 ns/op
Iteration   8: 131.542 ns/op
Iteration   9: 131.750 ns/op
Iteration  10: 130.747 ns/op
Iteration  11: 130.751 ns/op
Iteration  12: 130.698 ns/op
Iteration  13: 130.958 ns/op
Iteration  14: 130.698 ns/op
Iteration  15: 130.869 ns/op
Iteration  16: 130.943 ns/op
Iteration  17: 130.867 ns/op
Iteration  18: 131.414 ns/op
Iteration  19: 130.979 ns/op
Iteration  20: 131.112 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 216.093 ns/op
# Warmup Iteration   2: 150.947 ns/op
# Warmup Iteration   3: 133.162 ns/op
# Warmup Iteration   4: 132.340 ns/op
# Warmup Iteration   5: 133.072 ns/op
Iteration   1: 133.822 ns/op
Iteration   2: 131.426 ns/op
Iteration   3: 130.792 ns/op
Iteration   4: 130.861 ns/op
Iteration   5: 130.809 ns/op
Iteration   6: 130.753 ns/op
Iteration   7: 131.473 ns/op
Iteration   8: 131.133 ns/op
Iteration   9: 131.337 ns/op
Iteration  10: 130.482 ns/op
Iteration  11: 130.521 ns/op
Iteration  12: 130.583 ns/op
Iteration  13: 130.996 ns/op
Iteration  14: 130.626 ns/op
Iteration  15: 130.586 ns/op
Iteration  16: 130.613 ns/op
Iteration  17: 130.633 ns/op
Iteration  18: 130.983 ns/op
Iteration  19: 130.649 ns/op
Iteration  20: 130.896 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 222.192 ns/op
# Warmup Iteration   2: 150.588 ns/op
# Warmup Iteration   3: 133.216 ns/op
# Warmup Iteration   4: 132.377 ns/op
# Warmup Iteration   5: 133.133 ns/op
Iteration   1: 134.057 ns/op
Iteration   2: 131.497 ns/op
Iteration   3: 130.804 ns/op
Iteration   4: 130.727 ns/op
Iteration   5: 130.749 ns/op
Iteration   6: 130.809 ns/op
Iteration   7: 130.729 ns/op
Iteration   8: 132.528 ns/op
Iteration   9: 130.739 ns/op
Iteration  10: 131.283 ns/op
Iteration  11: 130.832 ns/op
Iteration  12: 130.723 ns/op
Iteration  13: 131.039 ns/op
Iteration  14: 130.654 ns/op
Iteration  15: 130.774 ns/op
Iteration  16: 130.503 ns/op
Iteration  17: 130.627 ns/op
Iteration  18: 130.818 ns/op
Iteration  19: 130.575 ns/op
Iteration  20: 130.912 ns/op


Result "benchmark.StringContains.regexMatches":
  130.131 ±(99.9%) 0.628 ns/op [Average]
  (min, avg, max) = (126.236, 130.131, 134.240), stdev = 1.851
  CI (99.9%): [129.504, 130.759] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = !G.4http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.072 ns/op
# Warmup Iteration   2: 10.456 ns/op
# Warmup Iteration   3: 9.898 ns/op
# Warmup Iteration   4: 9.882 ns/op
# Warmup Iteration   5: 9.890 ns/op
Iteration   1: 9.903 ns/op
Iteration   2: 9.881 ns/op
Iteration   3: 9.873 ns/op
Iteration   4: 9.874 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.876 ns/op
Iteration   7: 9.878 ns/op
Iteration   8: 9.908 ns/op
Iteration   9: 9.883 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.883 ns/op
Iteration  13: 9.863 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.869 ns/op
Iteration  16: 9.876 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.875 ns/op
Iteration  19: 9.880 ns/op
Iteration  20: 9.892 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.088 ns/op
# Warmup Iteration   2: 10.471 ns/op
# Warmup Iteration   3: 9.895 ns/op
# Warmup Iteration   4: 9.904 ns/op
# Warmup Iteration   5: 9.903 ns/op
Iteration   1: 9.910 ns/op
Iteration   2: 9.909 ns/op
Iteration   3: 9.919 ns/op
Iteration   4: 9.902 ns/op
Iteration   5: 9.915 ns/op
Iteration   6: 9.915 ns/op
Iteration   7: 9.913 ns/op
Iteration   8: 9.916 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.921 ns/op
Iteration  11: 9.901 ns/op
Iteration  12: 9.905 ns/op
Iteration  13: 9.923 ns/op
Iteration  14: 9.907 ns/op
Iteration  15: 9.900 ns/op
Iteration  16: 9.905 ns/op
Iteration  17: 9.903 ns/op
Iteration  18: 9.915 ns/op
Iteration  19: 9.924 ns/op
Iteration  20: 9.916 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.045 ns/op
# Warmup Iteration   2: 10.452 ns/op
# Warmup Iteration   3: 10.040 ns/op
# Warmup Iteration   4: 10.028 ns/op
# Warmup Iteration   5: 10.032 ns/op
Iteration   1: 10.033 ns/op
Iteration   2: 10.027 ns/op
Iteration   3: 10.057 ns/op
Iteration   4: 10.020 ns/op
Iteration   5: 10.040 ns/op
Iteration   6: 10.036 ns/op
Iteration   7: 10.027 ns/op
Iteration   8: 10.025 ns/op
Iteration   9: 10.039 ns/op
Iteration  10: 10.034 ns/op
Iteration  11: 10.030 ns/op
Iteration  12: 10.019 ns/op
Iteration  13: 10.021 ns/op
Iteration  14: 10.032 ns/op
Iteration  15: 10.025 ns/op
Iteration  16: 10.034 ns/op
Iteration  17: 10.042 ns/op
Iteration  18: 10.016 ns/op
Iteration  19: 10.019 ns/op
Iteration  20: 10.029 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.051 ns/op
# Warmup Iteration   2: 10.453 ns/op
# Warmup Iteration   3: 10.058 ns/op
# Warmup Iteration   4: 10.054 ns/op
# Warmup Iteration   5: 10.042 ns/op
Iteration   1: 10.044 ns/op
Iteration   2: 10.061 ns/op
Iteration   3: 10.041 ns/op
Iteration   4: 10.037 ns/op
Iteration   5: 10.045 ns/op
Iteration   6: 10.045 ns/op
Iteration   7: 10.057 ns/op
Iteration   8: 10.053 ns/op
Iteration   9: 10.045 ns/op
Iteration  10: 10.035 ns/op
Iteration  11: 10.065 ns/op
Iteration  12: 10.043 ns/op
Iteration  13: 10.086 ns/op
Iteration  14: 10.065 ns/op
Iteration  15: 10.073 ns/op
Iteration  16: 10.033 ns/op
Iteration  17: 10.056 ns/op
Iteration  18: 10.063 ns/op
Iteration  19: 10.049 ns/op
Iteration  20: 10.055 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.175 ns/op
# Warmup Iteration   2: 10.475 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.879 ns/op
# Warmup Iteration   5: 9.897 ns/op
Iteration   1: 9.894 ns/op
Iteration   2: 9.897 ns/op
Iteration   3: 9.892 ns/op
Iteration   4: 9.895 ns/op
Iteration   5: 9.908 ns/op
Iteration   6: 9.895 ns/op
Iteration   7: 9.896 ns/op
Iteration   8: 9.923 ns/op
Iteration   9: 9.891 ns/op
Iteration  10: 9.896 ns/op
Iteration  11: 9.890 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.892 ns/op
Iteration  15: 9.883 ns/op
Iteration  16: 9.889 ns/op
Iteration  17: 9.891 ns/op
Iteration  18: 9.877 ns/op
Iteration  19: 9.875 ns/op
Iteration  20: 9.881 ns/op


Result "benchmark.StringContains.stringContains":
  9.953 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (9.863, 9.953, 10.086), stdev = 0.074
  CI (99.9%): [9.928, 9.978] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  !G.4http  avgt  100  130.131 ± 0.628  ns/op
StringContains.stringContains     http  !G.4http  avgt  100    9.953 ± 0.025  ns/op

Benchmark result is saved to http_8_0.5_11.csv
