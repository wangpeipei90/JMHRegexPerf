# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = N0OI@S
g[vd[k(O!--%@j8)Ht{}wyPghttp;st>1pk~b kH<NyL|]WU2I:D!*)%{/~_
ds]/=K]z:F3O9HA($gyE9DaqYuv}[e\f~W(p[k>0,f-}zcoWQ}W}Fo	<)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1141.609 ns/op
# Warmup Iteration   2: 1158.294 ns/op
# Warmup Iteration   3: 1179.078 ns/op
# Warmup Iteration   4: 1179.855 ns/op
# Warmup Iteration   5: 1177.535 ns/op
Iteration   1: 1177.536 ns/op
Iteration   2: 1179.394 ns/op
Iteration   3: 1103.790 ns/op
Iteration   4: 1095.701 ns/op
Iteration   5: 1095.339 ns/op
Iteration   6: 1095.461 ns/op
Iteration   7: 1095.517 ns/op
Iteration   8: 1095.622 ns/op
Iteration   9: 1106.098 ns/op
Iteration  10: 1096.427 ns/op
Iteration  11: 1097.269 ns/op
Iteration  12: 1100.129 ns/op
Iteration  13: 1099.825 ns/op
Iteration  14: 1099.954 ns/op
Iteration  15: 1112.952 ns/op
Iteration  16: 1096.513 ns/op
Iteration  17: 1095.651 ns/op
Iteration  18: 1095.606 ns/op
Iteration  19: 1095.645 ns/op
Iteration  20: 1095.459 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1142.579 ns/op
# Warmup Iteration   2: 1150.776 ns/op
# Warmup Iteration   3: 1172.187 ns/op
# Warmup Iteration   4: 1172.188 ns/op
# Warmup Iteration   5: 1171.622 ns/op
Iteration   1: 1171.664 ns/op
Iteration   2: 1172.067 ns/op
Iteration   3: 1103.025 ns/op
Iteration   4: 1095.491 ns/op
Iteration   5: 1095.758 ns/op
Iteration   6: 1095.965 ns/op
Iteration   7: 1095.935 ns/op
Iteration   8: 1095.709 ns/op
Iteration   9: 1105.744 ns/op
Iteration  10: 1095.702 ns/op
Iteration  11: 1095.998 ns/op
Iteration  12: 1095.981 ns/op
Iteration  13: 1095.832 ns/op
Iteration  14: 1095.715 ns/op
Iteration  15: 1109.573 ns/op
Iteration  16: 1095.675 ns/op
Iteration  17: 1095.602 ns/op
Iteration  18: 1095.687 ns/op
Iteration  19: 1095.438 ns/op
Iteration  20: 1095.706 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1132.832 ns/op
# Warmup Iteration   2: 1153.767 ns/op
# Warmup Iteration   3: 1174.615 ns/op
# Warmup Iteration   4: 1174.477 ns/op
# Warmup Iteration   5: 1174.543 ns/op
Iteration   1: 1174.608 ns/op
Iteration   2: 1179.700 ns/op
Iteration   3: 1095.589 ns/op
Iteration   4: 1095.709 ns/op
Iteration   5: 1095.661 ns/op
Iteration   6: 1095.408 ns/op
Iteration   7: 1095.625 ns/op
Iteration   8: 1095.486 ns/op
Iteration   9: 1105.743 ns/op
Iteration  10: 1095.679 ns/op
Iteration  11: 1095.626 ns/op
Iteration  12: 1095.233 ns/op
Iteration  13: 1095.594 ns/op
Iteration  14: 1095.201 ns/op
Iteration  15: 1109.512 ns/op
Iteration  16: 1095.566 ns/op
Iteration  17: 1095.447 ns/op
Iteration  18: 1095.735 ns/op
Iteration  19: 1096.692 ns/op
Iteration  20: 1096.656 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1139.991 ns/op
# Warmup Iteration   2: 1158.110 ns/op
# Warmup Iteration   3: 1177.163 ns/op
# Warmup Iteration   4: 1176.946 ns/op
# Warmup Iteration   5: 1176.707 ns/op
Iteration   1: 1176.596 ns/op
Iteration   2: 1176.904 ns/op
Iteration   3: 1109.350 ns/op
Iteration   4: 1098.750 ns/op
Iteration   5: 1099.002 ns/op
Iteration   6: 1098.613 ns/op
Iteration   7: 1098.662 ns/op
Iteration   8: 1098.990 ns/op
Iteration   9: 1109.003 ns/op
Iteration  10: 1098.328 ns/op
Iteration  11: 1098.775 ns/op
Iteration  12: 1099.256 ns/op
Iteration  13: 1098.478 ns/op
Iteration  14: 1098.628 ns/op
Iteration  15: 1113.083 ns/op
Iteration  16: 1098.752 ns/op
Iteration  17: 1098.751 ns/op
Iteration  18: 1098.499 ns/op
Iteration  19: 1098.367 ns/op
Iteration  20: 1098.884 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1115.345 ns/op
# Warmup Iteration   2: 1098.472 ns/op
# Warmup Iteration   3: 1251.962 ns/op
# Warmup Iteration   4: 1251.612 ns/op
# Warmup Iteration   5: 1251.084 ns/op
Iteration   1: 1250.812 ns/op
Iteration   2: 1251.452 ns/op
Iteration   3: 1202.447 ns/op
Iteration   4: 1175.482 ns/op
Iteration   5: 1177.621 ns/op
Iteration   6: 1176.004 ns/op
Iteration   7: 1176.161 ns/op
Iteration   8: 1176.346 ns/op
Iteration   9: 1189.236 ns/op
Iteration  10: 1176.566 ns/op
Iteration  11: 1176.314 ns/op
Iteration  12: 1176.436 ns/op
Iteration  13: 1176.497 ns/op
Iteration  14: 1177.841 ns/op
Iteration  15: 1177.186 ns/op
Iteration  16: 1191.479 ns/op
Iteration  17: 1176.092 ns/op
Iteration  18: 1176.914 ns/op
Iteration  19: 1177.361 ns/op
Iteration  20: 1178.314 ns/op


Result "benchmark.StringContains.regexMatches":
  1122.309 ±(99.9%) 13.594 ns/op [Average]
  (min, avg, max) = (1095.201, 1122.309, 1251.452), stdev = 40.083
  CI (99.9%): [1108.714, 1135.903] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = N0OI@S
g[vd[k(O!--%@j8)Ht{}wyPghttp;st>1pk~b kH<NyL|]WU2I:D!*)%{/~_
ds]/=K]z:F3O9HA($gyE9DaqYuv}[e\f~W(p[k>0,f-}zcoWQ}W}Fo	<)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 14.722 ns/op
# Warmup Iteration   3: 14.359 ns/op
# Warmup Iteration   4: 14.371 ns/op
# Warmup Iteration   5: 14.376 ns/op
Iteration   1: 14.372 ns/op
Iteration   2: 14.375 ns/op
Iteration   3: 14.365 ns/op
Iteration   4: 14.383 ns/op
Iteration   5: 14.382 ns/op
Iteration   6: 14.386 ns/op
Iteration   7: 14.369 ns/op
Iteration   8: 14.375 ns/op
Iteration   9: 14.358 ns/op
Iteration  10: 14.367 ns/op
Iteration  11: 14.386 ns/op
Iteration  12: 14.690 ns/op
Iteration  13: 14.684 ns/op
Iteration  14: 14.685 ns/op
Iteration  15: 14.687 ns/op
Iteration  16: 14.687 ns/op
Iteration  17: 14.686 ns/op
Iteration  18: 14.688 ns/op
Iteration  19: 14.688 ns/op
Iteration  20: 14.690 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.657 ns/op
# Warmup Iteration   2: 14.916 ns/op
# Warmup Iteration   3: 14.831 ns/op
# Warmup Iteration   4: 14.897 ns/op
# Warmup Iteration   5: 14.881 ns/op
Iteration   1: 14.855 ns/op
Iteration   2: 14.926 ns/op
Iteration   3: 14.917 ns/op
Iteration   4: 14.879 ns/op
Iteration   5: 14.891 ns/op
Iteration   6: 14.916 ns/op
Iteration   7: 14.864 ns/op
Iteration   8: 14.882 ns/op
Iteration   9: 14.891 ns/op
Iteration  10: 14.888 ns/op
Iteration  11: 14.907 ns/op
Iteration  12: 15.031 ns/op
Iteration  13: 14.990 ns/op
Iteration  14: 15.031 ns/op
Iteration  15: 15.040 ns/op
Iteration  16: 15.044 ns/op
Iteration  17: 15.040 ns/op
Iteration  18: 15.058 ns/op
Iteration  19: 15.042 ns/op
Iteration  20: 15.042 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.720 ns/op
# Warmup Iteration   2: 14.768 ns/op
# Warmup Iteration   3: 14.283 ns/op
# Warmup Iteration   4: 14.284 ns/op
# Warmup Iteration   5: 14.290 ns/op
Iteration   1: 14.287 ns/op
Iteration   2: 14.304 ns/op
Iteration   3: 14.312 ns/op
Iteration   4: 14.293 ns/op
Iteration   5: 14.284 ns/op
Iteration   6: 14.300 ns/op
Iteration   7: 14.294 ns/op
Iteration   8: 14.300 ns/op
Iteration   9: 14.301 ns/op
Iteration  10: 14.276 ns/op
Iteration  11: 14.294 ns/op
Iteration  12: 14.301 ns/op
Iteration  13: 14.302 ns/op
Iteration  14: 14.286 ns/op
Iteration  15: 14.302 ns/op
Iteration  16: 14.288 ns/op
Iteration  17: 14.309 ns/op
Iteration  18: 14.288 ns/op
Iteration  19: 14.300 ns/op
Iteration  20: 14.287 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.682 ns/op
# Warmup Iteration   2: 14.728 ns/op
# Warmup Iteration   3: 14.316 ns/op
# Warmup Iteration   4: 14.302 ns/op
# Warmup Iteration   5: 14.306 ns/op
Iteration   1: 14.301 ns/op
Iteration   2: 14.295 ns/op
Iteration   3: 14.310 ns/op
Iteration   4: 14.297 ns/op
Iteration   5: 14.299 ns/op
Iteration   6: 14.295 ns/op
Iteration   7: 14.318 ns/op
Iteration   8: 14.307 ns/op
Iteration   9: 14.301 ns/op
Iteration  10: 14.297 ns/op
Iteration  11: 14.316 ns/op
Iteration  12: 14.662 ns/op
Iteration  13: 14.662 ns/op
Iteration  14: 14.664 ns/op
Iteration  15: 14.667 ns/op
Iteration  16: 14.663 ns/op
Iteration  17: 14.656 ns/op
Iteration  18: 14.659 ns/op
Iteration  19: 14.658 ns/op
Iteration  20: 14.662 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.660 ns/op
# Warmup Iteration   2: 14.718 ns/op
# Warmup Iteration   3: 14.296 ns/op
# Warmup Iteration   4: 14.299 ns/op
# Warmup Iteration   5: 14.315 ns/op
Iteration   1: 14.318 ns/op
Iteration   2: 14.310 ns/op
Iteration   3: 14.308 ns/op
Iteration   4: 14.321 ns/op
Iteration   5: 14.331 ns/op
Iteration   6: 14.320 ns/op
Iteration   7: 14.306 ns/op
Iteration   8: 14.318 ns/op
Iteration   9: 14.295 ns/op
Iteration  10: 14.308 ns/op
Iteration  11: 14.328 ns/op
Iteration  12: 14.671 ns/op
Iteration  13: 14.670 ns/op
Iteration  14: 14.674 ns/op
Iteration  15: 14.677 ns/op
Iteration  16: 14.671 ns/op
Iteration  17: 14.673 ns/op
Iteration  18: 14.671 ns/op
Iteration  19: 14.668 ns/op
Iteration  20: 14.669 ns/op


Result "benchmark.StringContains.stringContains":
  14.541 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (14.276, 14.541, 15.058), stdev = 0.261
  CI (99.9%): [14.453, 14.630] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  N0OI@S
g[vd[k(O!--%@j8)Ht{}wyPghttp;st>1pk~b kH<NyL|]WU2I:D!*)%{/~_
ds]/=K]z:F3O9HA($gyE9DaqYuv}[e\f~W(p[k>0,f-}zcoWQ}W}Fo	<  avgt  100  1122.309 ± 13.594  ns/op
StringContains.stringContains     http  N0OI@S
g[vd[k(O!--%@j8)Ht{}wyPghttp;st>1pk~b kH<NyL|]WU2I:D!*)%{/~_
ds]/=K]z:F3O9HA($gyE9DaqYuv}[e\f~W(p[k>0,f-}zcoWQ}W}Fo	<  avgt  100    14.541 ±  0.088  ns/op

Benchmark result is saved to http_128_0.25_6.csv
