# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Y;rD}i*/<pc]77NqpmAug	U2B52{FXD--	&
K%))K}Q8^[xhttpKb0	Jo)>o:2)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 362.048 ns/op
# Warmup Iteration   2: 376.196 ns/op
# Warmup Iteration   3: 288.793 ns/op
# Warmup Iteration   4: 272.598 ns/op
# Warmup Iteration   5: 269.573 ns/op
Iteration   1: 273.548 ns/op
Iteration   2: 274.573 ns/op
Iteration   3: 269.481 ns/op
Iteration   4: 276.187 ns/op
Iteration   5: 269.097 ns/op
Iteration   6: 279.400 ns/op
Iteration   7: 269.594 ns/op
Iteration   8: 270.829 ns/op
Iteration   9: 271.189 ns/op
Iteration  10: 269.466 ns/op
Iteration  11: 271.114 ns/op
Iteration  12: 269.480 ns/op
Iteration  13: 272.420 ns/op
Iteration  14: 272.059 ns/op
Iteration  15: 270.544 ns/op
Iteration  16: 270.970 ns/op
Iteration  17: 269.203 ns/op
Iteration  18: 271.787 ns/op
Iteration  19: 269.823 ns/op
Iteration  20: 273.063 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 348.917 ns/op
# Warmup Iteration   2: 353.248 ns/op
# Warmup Iteration   3: 280.869 ns/op
# Warmup Iteration   4: 273.904 ns/op
# Warmup Iteration   5: 271.088 ns/op
Iteration   1: 274.767 ns/op
Iteration   2: 275.787 ns/op
Iteration   3: 271.599 ns/op
Iteration   4: 277.255 ns/op
Iteration   5: 271.480 ns/op
Iteration   6: 279.070 ns/op
Iteration   7: 272.755 ns/op
Iteration   8: 271.712 ns/op
Iteration   9: 272.494 ns/op
Iteration  10: 271.417 ns/op
Iteration  11: 272.830 ns/op
Iteration  12: 272.961 ns/op
Iteration  13: 273.230 ns/op
Iteration  14: 272.915 ns/op
Iteration  15: 270.795 ns/op
Iteration  16: 272.674 ns/op
Iteration  17: 271.501 ns/op
Iteration  18: 276.386 ns/op
Iteration  19: 271.524 ns/op
Iteration  20: 273.039 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 345.327 ns/op
# Warmup Iteration   2: 352.844 ns/op
# Warmup Iteration   3: 277.598 ns/op
# Warmup Iteration   4: 272.381 ns/op
# Warmup Iteration   5: 269.877 ns/op
Iteration   1: 273.347 ns/op
Iteration   2: 274.141 ns/op
Iteration   3: 269.469 ns/op
Iteration   4: 275.560 ns/op
Iteration   5: 269.704 ns/op
Iteration   6: 277.128 ns/op
Iteration   7: 271.178 ns/op
Iteration   8: 270.164 ns/op
Iteration   9: 271.423 ns/op
Iteration  10: 270.526 ns/op
Iteration  11: 271.098 ns/op
Iteration  12: 269.372 ns/op
Iteration  13: 270.831 ns/op
Iteration  14: 270.751 ns/op
Iteration  15: 269.580 ns/op
Iteration  16: 271.000 ns/op
Iteration  17: 269.514 ns/op
Iteration  18: 271.061 ns/op
Iteration  19: 269.421 ns/op
Iteration  20: 270.740 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 352.465 ns/op
# Warmup Iteration   2: 359.575 ns/op
# Warmup Iteration   3: 279.954 ns/op
# Warmup Iteration   4: 271.981 ns/op
# Warmup Iteration   5: 269.793 ns/op
Iteration   1: 273.030 ns/op
Iteration   2: 274.217 ns/op
Iteration   3: 270.312 ns/op
Iteration   4: 275.885 ns/op
Iteration   5: 269.665 ns/op
Iteration   6: 277.722 ns/op
Iteration   7: 271.399 ns/op
Iteration   8: 269.683 ns/op
Iteration   9: 271.083 ns/op
Iteration  10: 269.623 ns/op
Iteration  11: 271.154 ns/op
Iteration  12: 269.426 ns/op
Iteration  13: 271.965 ns/op
Iteration  14: 271.265 ns/op
Iteration  15: 270.015 ns/op
Iteration  16: 272.047 ns/op
Iteration  17: 269.423 ns/op
Iteration  18: 272.571 ns/op
Iteration  19: 269.365 ns/op
Iteration  20: 271.467 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 349.365 ns/op
# Warmup Iteration   2: 347.008 ns/op
# Warmup Iteration   3: 274.079 ns/op
# Warmup Iteration   4: 269.838 ns/op
# Warmup Iteration   5: 267.499 ns/op
Iteration   1: 270.466 ns/op
Iteration   2: 271.742 ns/op
Iteration   3: 267.282 ns/op
Iteration   4: 273.154 ns/op
Iteration   5: 269.133 ns/op
Iteration   6: 272.762 ns/op
Iteration   7: 269.071 ns/op
Iteration   8: 267.353 ns/op
Iteration   9: 268.503 ns/op
Iteration  10: 267.825 ns/op
Iteration  11: 268.942 ns/op
Iteration  12: 269.889 ns/op
Iteration  13: 267.418 ns/op
Iteration  14: 268.618 ns/op
Iteration  15: 267.110 ns/op
Iteration  16: 268.716 ns/op
Iteration  17: 267.619 ns/op
Iteration  18: 269.157 ns/op
Iteration  19: 268.647 ns/op
Iteration  20: 267.577 ns/op


Result "benchmark.StringContains.regexMatches":
  271.383 ±(99.9%) 0.872 ns/op [Average]
  (min, avg, max) = (267.110, 271.383, 279.400), stdev = 2.572
  CI (99.9%): [270.511, 272.256] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Y;rD}i*/<pc]77NqpmAug	U2B52{FXD--	&
K%))K}Q8^[xhttpKb0	Jo)>o:2)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.061 ns/op
# Warmup Iteration   2: 16.970 ns/op
# Warmup Iteration   3: 16.575 ns/op
# Warmup Iteration   4: 16.570 ns/op
# Warmup Iteration   5: 16.579 ns/op
Iteration   1: 16.581 ns/op
Iteration   2: 16.571 ns/op
Iteration   3: 16.572 ns/op
Iteration   4: 16.588 ns/op
Iteration   5: 16.584 ns/op
Iteration   6: 16.553 ns/op
Iteration   7: 16.586 ns/op
Iteration   8: 16.556 ns/op
Iteration   9: 16.577 ns/op
Iteration  10: 16.561 ns/op
Iteration  11: 16.576 ns/op
Iteration  12: 16.586 ns/op
Iteration  13: 16.573 ns/op
Iteration  14: 16.575 ns/op
Iteration  15: 16.593 ns/op
Iteration  16: 16.575 ns/op
Iteration  17: 16.579 ns/op
Iteration  18: 16.559 ns/op
Iteration  19: 16.570 ns/op
Iteration  20: 16.584 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.069 ns/op
# Warmup Iteration   2: 17.024 ns/op
# Warmup Iteration   3: 17.389 ns/op
# Warmup Iteration   4: 17.450 ns/op
# Warmup Iteration   5: 17.378 ns/op
Iteration   1: 17.351 ns/op
Iteration   2: 17.327 ns/op
Iteration   3: 17.337 ns/op
Iteration   4: 17.365 ns/op
Iteration   5: 17.350 ns/op
Iteration   6: 17.380 ns/op
Iteration   7: 17.309 ns/op
Iteration   8: 17.333 ns/op
Iteration   9: 17.340 ns/op
Iteration  10: 17.365 ns/op
Iteration  11: 17.342 ns/op
Iteration  12: 17.429 ns/op
Iteration  13: 17.354 ns/op
Iteration  14: 17.430 ns/op
Iteration  15: 17.423 ns/op
Iteration  16: 17.416 ns/op
Iteration  17: 17.365 ns/op
Iteration  18: 17.371 ns/op
Iteration  19: 17.358 ns/op
Iteration  20: 17.378 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.072 ns/op
# Warmup Iteration   2: 16.999 ns/op
# Warmup Iteration   3: 17.297 ns/op
# Warmup Iteration   4: 17.252 ns/op
# Warmup Iteration   5: 17.261 ns/op
Iteration   1: 17.280 ns/op
Iteration   2: 17.289 ns/op
Iteration   3: 17.331 ns/op
Iteration   4: 17.304 ns/op
Iteration   5: 17.263 ns/op
Iteration   6: 17.266 ns/op
Iteration   7: 17.281 ns/op
Iteration   8: 17.252 ns/op
Iteration   9: 17.263 ns/op
Iteration  10: 17.295 ns/op
Iteration  11: 17.248 ns/op
Iteration  12: 17.256 ns/op
Iteration  13: 17.250 ns/op
Iteration  14: 17.235 ns/op
Iteration  15: 17.238 ns/op
Iteration  16: 17.287 ns/op
Iteration  17: 17.244 ns/op
Iteration  18: 17.238 ns/op
Iteration  19: 17.249 ns/op
Iteration  20: 17.276 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.099 ns/op
# Warmup Iteration   2: 17.007 ns/op
# Warmup Iteration   3: 16.795 ns/op
# Warmup Iteration   4: 16.797 ns/op
# Warmup Iteration   5: 16.840 ns/op
Iteration   1: 16.804 ns/op
Iteration   2: 16.811 ns/op
Iteration   3: 16.791 ns/op
Iteration   4: 16.818 ns/op
Iteration   5: 16.821 ns/op
Iteration   6: 16.823 ns/op
Iteration   7: 16.789 ns/op
Iteration   8: 16.845 ns/op
Iteration   9: 16.806 ns/op
Iteration  10: 16.804 ns/op
Iteration  11: 16.787 ns/op
Iteration  12: 16.801 ns/op
Iteration  13: 16.804 ns/op
Iteration  14: 16.828 ns/op
Iteration  15: 16.817 ns/op
Iteration  16: 16.787 ns/op
Iteration  17: 16.821 ns/op
Iteration  18: 16.798 ns/op
Iteration  19: 16.792 ns/op
Iteration  20: 16.818 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.087 ns/op
# Warmup Iteration   2: 16.946 ns/op
# Warmup Iteration   3: 16.833 ns/op
# Warmup Iteration   4: 16.827 ns/op
# Warmup Iteration   5: 16.797 ns/op
Iteration   1: 16.842 ns/op
Iteration   2: 16.822 ns/op
Iteration   3: 16.825 ns/op
Iteration   4: 16.878 ns/op
Iteration   5: 16.873 ns/op
Iteration   6: 16.856 ns/op
Iteration   7: 16.881 ns/op
Iteration   8: 16.835 ns/op
Iteration   9: 16.859 ns/op
Iteration  10: 16.843 ns/op
Iteration  11: 16.903 ns/op
Iteration  12: 16.872 ns/op
Iteration  13: 16.842 ns/op
Iteration  14: 16.880 ns/op
Iteration  15: 16.842 ns/op
Iteration  16: 16.844 ns/op
Iteration  17: 16.865 ns/op
Iteration  18: 16.826 ns/op
Iteration  19: 16.840 ns/op
Iteration  20: 16.872 ns/op


Result "benchmark.StringContains.stringContains":
  16.974 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (16.553, 16.974, 17.430), stdev = 0.299
  CI (99.9%): [16.873, 17.076] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Y;rD}i*/<pc]77NqpmAug	U2B52{FXD--	&
K%))K}Q8^[xhttpKb0	Jo)>o:2  avgt  100  271.383 ± 0.872  ns/op
StringContains.stringContains     http  Y;rD}i*/<pc]77NqpmAug	U2B52{FXD--	&
K%))K}Q8^[xhttpKb0	Jo)>o:2  avgt  100   16.974 ± 0.101  ns/op

Benchmark result is saved to http_64_0.75_9.csv
