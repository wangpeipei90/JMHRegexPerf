# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = X~Ig
c_VjYy1rf!ip]&spn^!B=6-|g4Oc*g7UnP.YE5*9=7http i7Y*g|wSuSp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 356.916 ns/op
# Warmup Iteration   2: 372.282 ns/op
# Warmup Iteration   3: 288.244 ns/op
# Warmup Iteration   4: 274.229 ns/op
# Warmup Iteration   5: 270.883 ns/op
Iteration   1: 274.629 ns/op
Iteration   2: 275.962 ns/op
Iteration   3: 271.105 ns/op
Iteration   4: 277.846 ns/op
Iteration   5: 270.930 ns/op
Iteration   6: 279.811 ns/op
Iteration   7: 270.971 ns/op
Iteration   8: 272.199 ns/op
Iteration   9: 272.211 ns/op
Iteration  10: 270.713 ns/op
Iteration  11: 272.006 ns/op
Iteration  12: 270.820 ns/op
Iteration  13: 271.568 ns/op
Iteration  14: 270.393 ns/op
Iteration  15: 271.812 ns/op
Iteration  16: 271.806 ns/op
Iteration  17: 270.421 ns/op
Iteration  18: 273.252 ns/op
Iteration  19: 270.413 ns/op
Iteration  20: 272.106 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 355.144 ns/op
# Warmup Iteration   2: 360.829 ns/op
# Warmup Iteration   3: 281.231 ns/op
# Warmup Iteration   4: 272.972 ns/op
# Warmup Iteration   5: 270.341 ns/op
Iteration   1: 273.624 ns/op
Iteration   2: 275.178 ns/op
Iteration   3: 270.353 ns/op
Iteration   4: 276.132 ns/op
Iteration   5: 270.711 ns/op
Iteration   6: 278.055 ns/op
Iteration   7: 272.495 ns/op
Iteration   8: 271.587 ns/op
Iteration   9: 271.701 ns/op
Iteration  10: 270.492 ns/op
Iteration  11: 271.668 ns/op
Iteration  12: 270.166 ns/op
Iteration  13: 273.623 ns/op
Iteration  14: 273.323 ns/op
Iteration  15: 270.988 ns/op
Iteration  16: 272.072 ns/op
Iteration  17: 270.211 ns/op
Iteration  18: 272.689 ns/op
Iteration  19: 270.253 ns/op
Iteration  20: 273.974 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 349.897 ns/op
# Warmup Iteration   2: 353.499 ns/op
# Warmup Iteration   3: 281.280 ns/op
# Warmup Iteration   4: 275.129 ns/op
# Warmup Iteration   5: 272.419 ns/op
Iteration   1: 275.857 ns/op
Iteration   2: 276.892 ns/op
Iteration   3: 272.395 ns/op
Iteration   4: 278.508 ns/op
Iteration   5: 272.543 ns/op
Iteration   6: 279.876 ns/op
Iteration   7: 274.383 ns/op
Iteration   8: 274.673 ns/op
Iteration   9: 273.477 ns/op
Iteration  10: 272.173 ns/op
Iteration  11: 273.604 ns/op
Iteration  12: 272.284 ns/op
Iteration  13: 274.267 ns/op
Iteration  14: 272.480 ns/op
Iteration  15: 273.785 ns/op
Iteration  16: 274.476 ns/op
Iteration  17: 272.370 ns/op
Iteration  18: 273.976 ns/op
Iteration  19: 272.414 ns/op
Iteration  20: 274.442 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 354.501 ns/op
# Warmup Iteration   2: 360.479 ns/op
# Warmup Iteration   3: 300.006 ns/op
# Warmup Iteration   4: 291.797 ns/op
# Warmup Iteration   5: 288.770 ns/op
Iteration   1: 292.798 ns/op
Iteration   2: 289.304 ns/op
Iteration   3: 293.867 ns/op
Iteration   4: 295.571 ns/op
Iteration   5: 288.993 ns/op
Iteration   6: 297.154 ns/op
Iteration   7: 288.437 ns/op
Iteration   8: 291.091 ns/op
Iteration   9: 288.563 ns/op
Iteration  10: 290.496 ns/op
Iteration  11: 289.081 ns/op
Iteration  12: 290.222 ns/op
Iteration  13: 288.312 ns/op
Iteration  14: 290.454 ns/op
Iteration  15: 288.494 ns/op
Iteration  16: 290.273 ns/op
Iteration  17: 290.041 ns/op
Iteration  18: 288.744 ns/op
Iteration  19: 291.346 ns/op
Iteration  20: 288.571 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 353.616 ns/op
# Warmup Iteration   2: 361.556 ns/op
# Warmup Iteration   3: 300.662 ns/op
# Warmup Iteration   4: 293.065 ns/op
# Warmup Iteration   5: 288.717 ns/op
Iteration   1: 292.242 ns/op
Iteration   2: 288.702 ns/op
Iteration   3: 293.131 ns/op
Iteration   4: 295.032 ns/op
Iteration   5: 288.788 ns/op
Iteration   6: 297.039 ns/op
Iteration   7: 288.672 ns/op
Iteration   8: 290.004 ns/op
Iteration   9: 288.576 ns/op
Iteration  10: 290.260 ns/op
Iteration  11: 288.648 ns/op
Iteration  12: 290.000 ns/op
Iteration  13: 288.976 ns/op
Iteration  14: 289.906 ns/op
Iteration  15: 288.777 ns/op
Iteration  16: 289.964 ns/op
Iteration  17: 291.543 ns/op
Iteration  18: 288.648 ns/op
Iteration  19: 293.482 ns/op
Iteration  20: 288.712 ns/op


Result "benchmark.StringContains.regexMatches":
  280.081 ±(99.9%) 3.032 ns/op [Average]
  (min, avg, max) = (270.166, 280.081, 297.154), stdev = 8.939
  CI (99.9%): [277.049, 283.112] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = X~Ig
c_VjYy1rf!ip]&spn^!B=6-|g4Oc*g7UnP.YE5*9=7http i7Y*g|wSuSp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.934 ns/op
# Warmup Iteration   2: 17.037 ns/op
# Warmup Iteration   3: 16.560 ns/op
# Warmup Iteration   4: 16.590 ns/op
# Warmup Iteration   5: 16.556 ns/op
Iteration   1: 16.577 ns/op
Iteration   2: 16.556 ns/op
Iteration   3: 16.584 ns/op
Iteration   4: 16.577 ns/op
Iteration   5: 16.550 ns/op
Iteration   6: 16.575 ns/op
Iteration   7: 16.569 ns/op
Iteration   8: 16.593 ns/op
Iteration   9: 16.596 ns/op
Iteration  10: 16.579 ns/op
Iteration  11: 16.569 ns/op
Iteration  12: 16.581 ns/op
Iteration  13: 16.568 ns/op
Iteration  14: 16.566 ns/op
Iteration  15: 16.560 ns/op
Iteration  16: 16.576 ns/op
Iteration  17: 16.546 ns/op
Iteration  18: 16.576 ns/op
Iteration  19: 16.571 ns/op
Iteration  20: 16.597 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.089 ns/op
# Warmup Iteration   2: 17.059 ns/op
# Warmup Iteration   3: 16.568 ns/op
# Warmup Iteration   4: 16.574 ns/op
# Warmup Iteration   5: 16.570 ns/op
Iteration   1: 16.551 ns/op
Iteration   2: 16.558 ns/op
Iteration   3: 16.539 ns/op
Iteration   4: 16.573 ns/op
Iteration   5: 16.553 ns/op
Iteration   6: 16.564 ns/op
Iteration   7: 16.562 ns/op
Iteration   8: 16.583 ns/op
Iteration   9: 16.577 ns/op
Iteration  10: 16.583 ns/op
Iteration  11: 16.578 ns/op
Iteration  12: 16.566 ns/op
Iteration  13: 16.585 ns/op
Iteration  14: 16.555 ns/op
Iteration  15: 16.560 ns/op
Iteration  16: 16.559 ns/op
Iteration  17: 16.560 ns/op
Iteration  18: 16.561 ns/op
Iteration  19: 16.562 ns/op
Iteration  20: 16.571 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.948 ns/op
# Warmup Iteration   2: 17.041 ns/op
# Warmup Iteration   3: 16.517 ns/op
# Warmup Iteration   4: 16.530 ns/op
# Warmup Iteration   5: 16.534 ns/op
Iteration   1: 16.537 ns/op
Iteration   2: 16.542 ns/op
Iteration   3: 16.536 ns/op
Iteration   4: 16.508 ns/op
Iteration   5: 16.506 ns/op
Iteration   6: 16.517 ns/op
Iteration   7: 16.523 ns/op
Iteration   8: 16.544 ns/op
Iteration   9: 16.538 ns/op
Iteration  10: 16.534 ns/op
Iteration  11: 16.526 ns/op
Iteration  12: 16.526 ns/op
Iteration  13: 16.527 ns/op
Iteration  14: 16.513 ns/op
Iteration  15: 16.498 ns/op
Iteration  16: 16.500 ns/op
Iteration  17: 16.500 ns/op
Iteration  18: 16.505 ns/op
Iteration  19: 16.510 ns/op
Iteration  20: 16.506 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.974 ns/op
# Warmup Iteration   2: 17.220 ns/op
# Warmup Iteration   3: 16.519 ns/op
# Warmup Iteration   4: 16.507 ns/op
# Warmup Iteration   5: 16.509 ns/op
Iteration   1: 16.518 ns/op
Iteration   2: 16.490 ns/op
Iteration   3: 16.514 ns/op
Iteration   4: 16.508 ns/op
Iteration   5: 16.500 ns/op
Iteration   6: 16.520 ns/op
Iteration   7: 16.519 ns/op
Iteration   8: 16.533 ns/op
Iteration   9: 16.524 ns/op
Iteration  10: 16.509 ns/op
Iteration  11: 16.502 ns/op
Iteration  12: 16.500 ns/op
Iteration  13: 16.534 ns/op
Iteration  14: 16.505 ns/op
Iteration  15: 16.522 ns/op
Iteration  16: 16.509 ns/op
Iteration  17: 16.511 ns/op
Iteration  18: 16.511 ns/op
Iteration  19: 16.506 ns/op
Iteration  20: 16.515 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.962 ns/op
# Warmup Iteration   2: 17.109 ns/op
# Warmup Iteration   3: 17.393 ns/op
# Warmup Iteration   4: 17.391 ns/op
# Warmup Iteration   5: 17.406 ns/op
Iteration   1: 17.361 ns/op
Iteration   2: 17.322 ns/op
Iteration   3: 17.478 ns/op
Iteration   4: 17.389 ns/op
Iteration   5: 17.385 ns/op
Iteration   6: 17.337 ns/op
Iteration   7: 17.403 ns/op
Iteration   8: 17.389 ns/op
Iteration   9: 17.383 ns/op
Iteration  10: 17.450 ns/op
Iteration  11: 17.388 ns/op
Iteration  12: 17.439 ns/op
Iteration  13: 17.401 ns/op
Iteration  14: 17.388 ns/op
Iteration  15: 17.384 ns/op
Iteration  16: 17.432 ns/op
Iteration  17: 17.443 ns/op
Iteration  18: 17.488 ns/op
Iteration  19: 17.443 ns/op
Iteration  20: 17.382 ns/op


Result "benchmark.StringContains.stringContains":
  16.715 ±(99.9%) 0.118 ns/op [Average]
  (min, avg, max) = (16.490, 16.715, 17.488), stdev = 0.348
  CI (99.9%): [16.597, 16.833] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  X~Ig
c_VjYy1rf!ip]&spn^!B=6-|g4Oc*g7UnP.YE5*9=7http i7Y*g|wSuSp  avgt  100  280.081 ± 3.032  ns/op
StringContains.stringContains     http  X~Ig
c_VjYy1rf!ip]&spn^!B=6-|g4Oc*g7UnP.YE5*9=7http i7Y*g|wSuSp  avgt  100   16.715 ± 0.118  ns/op

Benchmark result is saved to http_64_0.75_4.csv
