# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http}qH=VyJ<xS$p$UI[(~\V{xs?a}o0x<ps/p6z!&$c{V{'2BAN/#2M`qK%c!7;)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 806.554 ns/op
# Warmup Iteration   2: 839.576 ns/op
# Warmup Iteration   3: 840.708 ns/op
# Warmup Iteration   4: 840.795 ns/op
# Warmup Iteration   5: 839.832 ns/op
Iteration   1: 770.699 ns/op
Iteration   2: 762.236 ns/op
Iteration   3: 762.208 ns/op
Iteration   4: 761.890 ns/op
Iteration   5: 769.553 ns/op
Iteration   6: 763.136 ns/op
Iteration   7: 762.906 ns/op
Iteration   8: 764.748 ns/op
Iteration   9: 772.747 ns/op
Iteration  10: 762.467 ns/op
Iteration  11: 761.992 ns/op
Iteration  12: 762.000 ns/op
Iteration  13: 761.957 ns/op
Iteration  14: 774.457 ns/op
Iteration  15: 761.946 ns/op
Iteration  16: 761.892 ns/op
Iteration  17: 762.054 ns/op
Iteration  18: 779.724 ns/op
Iteration  19: 761.819 ns/op
Iteration  20: 762.046 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 793.453 ns/op
# Warmup Iteration   2: 796.681 ns/op
# Warmup Iteration   3: 890.997 ns/op
# Warmup Iteration   4: 890.503 ns/op
# Warmup Iteration   5: 890.733 ns/op
Iteration   1: 828.890 ns/op
Iteration   2: 816.872 ns/op
Iteration   3: 817.033 ns/op
Iteration   4: 816.754 ns/op
Iteration   5: 824.761 ns/op
Iteration   6: 817.166 ns/op
Iteration   7: 816.768 ns/op
Iteration   8: 816.841 ns/op
Iteration   9: 816.935 ns/op
Iteration  10: 827.339 ns/op
Iteration  11: 817.197 ns/op
Iteration  12: 817.214 ns/op
Iteration  13: 816.996 ns/op
Iteration  14: 817.547 ns/op
Iteration  15: 829.823 ns/op
Iteration  16: 816.979 ns/op
Iteration  17: 816.600 ns/op
Iteration  18: 816.705 ns/op
Iteration  19: 822.648 ns/op
Iteration  20: 828.511 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 803.572 ns/op
# Warmup Iteration   2: 839.300 ns/op
# Warmup Iteration   3: 840.002 ns/op
# Warmup Iteration   4: 840.139 ns/op
# Warmup Iteration   5: 840.922 ns/op
Iteration   1: 768.283 ns/op
Iteration   2: 764.002 ns/op
Iteration   3: 763.354 ns/op
Iteration   4: 763.853 ns/op
Iteration   5: 770.648 ns/op
Iteration   6: 763.156 ns/op
Iteration   7: 762.879 ns/op
Iteration   8: 763.351 ns/op
Iteration   9: 772.689 ns/op
Iteration  10: 763.070 ns/op
Iteration  11: 763.102 ns/op
Iteration  12: 762.915 ns/op
Iteration  13: 762.816 ns/op
Iteration  14: 775.101 ns/op
Iteration  15: 762.798 ns/op
Iteration  16: 762.276 ns/op
Iteration  17: 762.442 ns/op
Iteration  18: 779.602 ns/op
Iteration  19: 762.920 ns/op
Iteration  20: 762.343 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 806.983 ns/op
# Warmup Iteration   2: 833.432 ns/op
# Warmup Iteration   3: 837.879 ns/op
# Warmup Iteration   4: 837.592 ns/op
# Warmup Iteration   5: 837.766 ns/op
Iteration   1: 768.606 ns/op
Iteration   2: 763.306 ns/op
Iteration   3: 762.248 ns/op
Iteration   4: 762.287 ns/op
Iteration   5: 770.379 ns/op
Iteration   6: 763.180 ns/op
Iteration   7: 762.944 ns/op
Iteration   8: 763.222 ns/op
Iteration   9: 772.255 ns/op
Iteration  10: 764.140 ns/op
Iteration  11: 764.173 ns/op
Iteration  12: 763.199 ns/op
Iteration  13: 763.434 ns/op
Iteration  14: 775.666 ns/op
Iteration  15: 763.340 ns/op
Iteration  16: 763.456 ns/op
Iteration  17: 763.169 ns/op
Iteration  18: 780.044 ns/op
Iteration  19: 763.351 ns/op
Iteration  20: 763.500 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 792.229 ns/op
# Warmup Iteration   2: 796.141 ns/op
# Warmup Iteration   3: 891.187 ns/op
# Warmup Iteration   4: 890.775 ns/op
# Warmup Iteration   5: 890.758 ns/op
Iteration   1: 829.506 ns/op
Iteration   2: 815.748 ns/op
Iteration   3: 815.894 ns/op
Iteration   4: 815.679 ns/op
Iteration   5: 823.743 ns/op
Iteration   6: 815.972 ns/op
Iteration   7: 815.714 ns/op
Iteration   8: 815.905 ns/op
Iteration   9: 815.698 ns/op
Iteration  10: 826.748 ns/op
Iteration  11: 816.052 ns/op
Iteration  12: 815.744 ns/op
Iteration  13: 816.144 ns/op
Iteration  14: 815.874 ns/op
Iteration  15: 829.577 ns/op
Iteration  16: 815.851 ns/op
Iteration  17: 815.902 ns/op
Iteration  18: 815.909 ns/op
Iteration  19: 816.176 ns/op
Iteration  20: 832.628 ns/op


Result "benchmark.StringContains.regexMatches":
  787.100 ±(99.9%) 9.183 ns/op [Average]
  (min, avg, max) = (761.819, 787.100, 832.628), stdev = 27.075
  CI (99.9%): [777.917, 796.283] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http}qH=VyJ<xS$p$UI[(~\V{xs?a}o0x<ps/p6z!&$c{V{'2BAN/#2M`qK%c!7;)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.484 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.867 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.855 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.848 ns/op
Iteration   4: 9.847 ns/op
Iteration   5: 9.848 ns/op
Iteration   6: 9.852 ns/op
Iteration   7: 9.848 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.850 ns/op
Iteration  11: 9.854 ns/op
Iteration  12: 10.550 ns/op
Iteration  13: 10.550 ns/op
Iteration  14: 10.550 ns/op
Iteration  15: 10.550 ns/op
Iteration  16: 10.551 ns/op
Iteration  17: 10.550 ns/op
Iteration  18: 10.552 ns/op
Iteration  19: 10.550 ns/op
Iteration  20: 10.551 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.220 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.907 ns/op
# Warmup Iteration   4: 9.898 ns/op
# Warmup Iteration   5: 9.913 ns/op
Iteration   1: 9.882 ns/op
Iteration   2: 9.888 ns/op
Iteration   3: 9.906 ns/op
Iteration   4: 9.877 ns/op
Iteration   5: 9.884 ns/op
Iteration   6: 9.886 ns/op
Iteration   7: 9.885 ns/op
Iteration   8: 9.920 ns/op
Iteration   9: 9.893 ns/op
Iteration  10: 9.891 ns/op
Iteration  11: 9.898 ns/op
Iteration  12: 9.873 ns/op
Iteration  13: 9.885 ns/op
Iteration  14: 9.898 ns/op
Iteration  15: 9.872 ns/op
Iteration  16: 9.893 ns/op
Iteration  17: 9.882 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.886 ns/op
Iteration  20: 9.876 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.502 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.942 ns/op
# Warmup Iteration   4: 9.925 ns/op
# Warmup Iteration   5: 9.927 ns/op
Iteration   1: 9.941 ns/op
Iteration   2: 9.934 ns/op
Iteration   3: 9.925 ns/op
Iteration   4: 9.923 ns/op
Iteration   5: 9.919 ns/op
Iteration   6: 9.936 ns/op
Iteration   7: 9.920 ns/op
Iteration   8: 9.956 ns/op
Iteration   9: 9.942 ns/op
Iteration  10: 9.929 ns/op
Iteration  11: 9.952 ns/op
Iteration  12: 10.552 ns/op
Iteration  13: 10.552 ns/op
Iteration  14: 10.552 ns/op
Iteration  15: 10.551 ns/op
Iteration  16: 10.552 ns/op
Iteration  17: 10.552 ns/op
Iteration  18: 10.552 ns/op
Iteration  19: 10.551 ns/op
Iteration  20: 10.553 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.464 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.782 ns/op
# Warmup Iteration   4: 9.775 ns/op
# Warmup Iteration   5: 9.768 ns/op
Iteration   1: 9.771 ns/op
Iteration   2: 9.777 ns/op
Iteration   3: 9.770 ns/op
Iteration   4: 9.776 ns/op
Iteration   5: 9.777 ns/op
Iteration   6: 9.787 ns/op
Iteration   7: 9.781 ns/op
Iteration   8: 9.783 ns/op
Iteration   9: 9.785 ns/op
Iteration  10: 9.783 ns/op
Iteration  11: 9.803 ns/op
Iteration  12: 10.557 ns/op
Iteration  13: 10.550 ns/op
Iteration  14: 10.552 ns/op
Iteration  15: 10.552 ns/op
Iteration  16: 10.552 ns/op
Iteration  17: 10.551 ns/op
Iteration  18: 10.552 ns/op
Iteration  19: 10.551 ns/op
Iteration  20: 10.552 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.421 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.784 ns/op
# Warmup Iteration   4: 9.802 ns/op
# Warmup Iteration   5: 9.789 ns/op
Iteration   1: 9.780 ns/op
Iteration   2: 9.792 ns/op
Iteration   3: 9.799 ns/op
Iteration   4: 9.799 ns/op
Iteration   5: 9.792 ns/op
Iteration   6: 9.786 ns/op
Iteration   7: 9.795 ns/op
Iteration   8: 9.787 ns/op
Iteration   9: 9.797 ns/op
Iteration  10: 9.794 ns/op
Iteration  11: 9.805 ns/op
Iteration  12: 9.795 ns/op
Iteration  13: 9.800 ns/op
Iteration  14: 9.800 ns/op
Iteration  15: 9.804 ns/op
Iteration  16: 9.799 ns/op
Iteration  17: 9.806 ns/op
Iteration  18: 9.810 ns/op
Iteration  19: 9.792 ns/op
Iteration  20: 9.792 ns/op


Result "benchmark.StringContains.stringContains":
  10.038 ±(99.9%) 0.108 ns/op [Average]
  (min, avg, max) = (9.770, 10.038, 10.557), stdev = 0.317
  CI (99.9%): [9.931, 10.146] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http}qH=VyJ<xS$p$UI[(~\V{xs?a}o0x<ps/p6z!&$c{V{'2BAN/#2M`qK%c!7;  avgt  100  787.100 ± 9.183  ns/op
StringContains.stringContains     http  http}qH=VyJ<xS$p$UI[(~\V{xs?a}o0x<ps/p6z!&$c{V{'2BAN/#2M`qK%c!7;  avgt  100   10.038 ± 0.108  ns/op

Benchmark result is saved to http_64_0_5.csv
