# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = FzDel.md->0$ %og`<efV8v?2? )`Xqp4/rvkedoY!}^])M6BN"A{*P..g|}F)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 261.257 ns/op
# Warmup Iteration   2: 214.312 ns/op
# Warmup Iteration   3: 174.794 ns/op
# Warmup Iteration   4: 175.121 ns/op
# Warmup Iteration   5: 176.159 ns/op
Iteration   1: 176.924 ns/op
Iteration   2: 177.983 ns/op
Iteration   3: 174.284 ns/op
Iteration   4: 173.072 ns/op
Iteration   5: 173.988 ns/op
Iteration   6: 173.796 ns/op
Iteration   7: 174.070 ns/op
Iteration   8: 174.040 ns/op
Iteration   9: 173.937 ns/op
Iteration  10: 173.984 ns/op
Iteration  11: 173.993 ns/op
Iteration  12: 174.040 ns/op
Iteration  13: 173.670 ns/op
Iteration  14: 173.240 ns/op
Iteration  15: 173.345 ns/op
Iteration  16: 175.204 ns/op
Iteration  17: 173.411 ns/op
Iteration  18: 173.503 ns/op
Iteration  19: 173.989 ns/op
Iteration  20: 173.811 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 258.835 ns/op
# Warmup Iteration   2: 211.747 ns/op
# Warmup Iteration   3: 174.923 ns/op
# Warmup Iteration   4: 175.558 ns/op
# Warmup Iteration   5: 176.153 ns/op
Iteration   1: 177.063 ns/op
Iteration   2: 178.312 ns/op
Iteration   3: 174.057 ns/op
Iteration   4: 173.279 ns/op
Iteration   5: 174.075 ns/op
Iteration   6: 174.838 ns/op
Iteration   7: 174.307 ns/op
Iteration   8: 174.569 ns/op
Iteration   9: 174.323 ns/op
Iteration  10: 174.570 ns/op
Iteration  11: 174.529 ns/op
Iteration  12: 176.828 ns/op
Iteration  13: 174.140 ns/op
Iteration  14: 173.280 ns/op
Iteration  15: 173.679 ns/op
Iteration  16: 174.445 ns/op
Iteration  17: 173.862 ns/op
Iteration  18: 173.726 ns/op
Iteration  19: 174.138 ns/op
Iteration  20: 174.122 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 260.299 ns/op
# Warmup Iteration   2: 214.028 ns/op
# Warmup Iteration   3: 175.370 ns/op
# Warmup Iteration   4: 175.400 ns/op
# Warmup Iteration   5: 176.037 ns/op
Iteration   1: 177.001 ns/op
Iteration   2: 178.196 ns/op
Iteration   3: 173.686 ns/op
Iteration   4: 173.258 ns/op
Iteration   5: 173.875 ns/op
Iteration   6: 173.997 ns/op
Iteration   7: 174.006 ns/op
Iteration   8: 173.874 ns/op
Iteration   9: 173.974 ns/op
Iteration  10: 174.931 ns/op
Iteration  11: 174.078 ns/op
Iteration  12: 176.042 ns/op
Iteration  13: 173.795 ns/op
Iteration  14: 172.876 ns/op
Iteration  15: 173.709 ns/op
Iteration  16: 174.014 ns/op
Iteration  17: 173.701 ns/op
Iteration  18: 173.712 ns/op
Iteration  19: 173.893 ns/op
Iteration  20: 173.869 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 248.917 ns/op
# Warmup Iteration   2: 197.268 ns/op
# Warmup Iteration   3: 165.911 ns/op
# Warmup Iteration   4: 166.295 ns/op
# Warmup Iteration   5: 167.052 ns/op
Iteration   1: 168.011 ns/op
Iteration   2: 168.996 ns/op
Iteration   3: 165.628 ns/op
Iteration   4: 164.979 ns/op
Iteration   5: 165.106 ns/op
Iteration   6: 165.321 ns/op
Iteration   7: 165.306 ns/op
Iteration   8: 165.017 ns/op
Iteration   9: 164.802 ns/op
Iteration  10: 165.079 ns/op
Iteration  11: 165.107 ns/op
Iteration  12: 164.260 ns/op
Iteration  13: 165.560 ns/op
Iteration  14: 164.603 ns/op
Iteration  15: 165.389 ns/op
Iteration  16: 165.392 ns/op
Iteration  17: 164.905 ns/op
Iteration  18: 165.169 ns/op
Iteration  19: 164.768 ns/op
Iteration  20: 164.812 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 259.353 ns/op
# Warmup Iteration   2: 212.840 ns/op
# Warmup Iteration   3: 174.697 ns/op
# Warmup Iteration   4: 175.094 ns/op
# Warmup Iteration   5: 175.898 ns/op
Iteration   1: 176.731 ns/op
Iteration   2: 178.005 ns/op
Iteration   3: 173.757 ns/op
Iteration   4: 173.609 ns/op
Iteration   5: 172.900 ns/op
Iteration   6: 173.616 ns/op
Iteration   7: 173.652 ns/op
Iteration   8: 173.725 ns/op
Iteration   9: 173.783 ns/op
Iteration  10: 173.718 ns/op
Iteration  11: 174.037 ns/op
Iteration  12: 174.146 ns/op
Iteration  13: 173.340 ns/op
Iteration  14: 172.618 ns/op
Iteration  15: 173.662 ns/op
Iteration  16: 173.355 ns/op
Iteration  17: 173.646 ns/op
Iteration  18: 173.362 ns/op
Iteration  19: 173.482 ns/op
Iteration  20: 173.286 ns/op


Result "benchmark.StringContains.regexMatches":
  172.496 ±(99.9%) 1.277 ns/op [Average]
  (min, avg, max) = (164.260, 172.496, 178.312), stdev = 3.767
  CI (99.9%): [171.218, 173.773] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = FzDel.md->0$ %og`<efV8v?2? )`Xqp4/rvkedoY!}^])M6BN"A{*P..g|}F)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.453 ns/op
# Warmup Iteration   2: 16.405 ns/op
# Warmup Iteration   3: 16.289 ns/op
# Warmup Iteration   4: 16.294 ns/op
# Warmup Iteration   5: 16.299 ns/op
Iteration   1: 16.302 ns/op
Iteration   2: 16.304 ns/op
Iteration   3: 16.287 ns/op
Iteration   4: 16.305 ns/op
Iteration   5: 16.294 ns/op
Iteration   6: 16.309 ns/op
Iteration   7: 16.303 ns/op
Iteration   8: 16.313 ns/op
Iteration   9: 16.310 ns/op
Iteration  10: 16.322 ns/op
Iteration  11: 16.305 ns/op
Iteration  12: 17.538 ns/op
Iteration  13: 17.523 ns/op
Iteration  14: 17.525 ns/op
Iteration  15: 17.527 ns/op
Iteration  16: 17.525 ns/op
Iteration  17: 17.525 ns/op
Iteration  18: 17.530 ns/op
Iteration  19: 17.531 ns/op
Iteration  20: 17.520 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.388 ns/op
# Warmup Iteration   2: 15.716 ns/op
# Warmup Iteration   3: 16.002 ns/op
# Warmup Iteration   4: 15.999 ns/op
# Warmup Iteration   5: 15.995 ns/op
Iteration   1: 15.994 ns/op
Iteration   2: 15.996 ns/op
Iteration   3: 15.993 ns/op
Iteration   4: 15.997 ns/op
Iteration   5: 16.000 ns/op
Iteration   6: 16.006 ns/op
Iteration   7: 15.995 ns/op
Iteration   8: 15.998 ns/op
Iteration   9: 15.995 ns/op
Iteration  10: 16.014 ns/op
Iteration  11: 15.997 ns/op
Iteration  12: 15.998 ns/op
Iteration  13: 15.997 ns/op
Iteration  14: 15.997 ns/op
Iteration  15: 15.995 ns/op
Iteration  16: 15.995 ns/op
Iteration  17: 15.995 ns/op
Iteration  18: 15.996 ns/op
Iteration  19: 15.993 ns/op
Iteration  20: 15.995 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.392 ns/op
# Warmup Iteration   2: 15.702 ns/op
# Warmup Iteration   3: 15.983 ns/op
# Warmup Iteration   4: 15.983 ns/op
# Warmup Iteration   5: 15.984 ns/op
Iteration   1: 15.990 ns/op
Iteration   2: 15.987 ns/op
Iteration   3: 15.990 ns/op
Iteration   4: 15.987 ns/op
Iteration   5: 15.985 ns/op
Iteration   6: 15.984 ns/op
Iteration   7: 15.986 ns/op
Iteration   8: 15.983 ns/op
Iteration   9: 15.989 ns/op
Iteration  10: 15.987 ns/op
Iteration  11: 15.987 ns/op
Iteration  12: 15.981 ns/op
Iteration  13: 15.987 ns/op
Iteration  14: 15.987 ns/op
Iteration  15: 15.986 ns/op
Iteration  16: 15.990 ns/op
Iteration  17: 15.986 ns/op
Iteration  18: 15.988 ns/op
Iteration  19: 15.990 ns/op
Iteration  20: 15.985 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.477 ns/op
# Warmup Iteration   2: 15.729 ns/op
# Warmup Iteration   3: 16.022 ns/op
# Warmup Iteration   4: 16.022 ns/op
# Warmup Iteration   5: 16.021 ns/op
Iteration   1: 16.022 ns/op
Iteration   2: 16.023 ns/op
Iteration   3: 16.020 ns/op
Iteration   4: 16.022 ns/op
Iteration   5: 16.020 ns/op
Iteration   6: 16.021 ns/op
Iteration   7: 16.021 ns/op
Iteration   8: 16.021 ns/op
Iteration   9: 16.022 ns/op
Iteration  10: 16.020 ns/op
Iteration  11: 16.022 ns/op
Iteration  12: 17.500 ns/op
Iteration  13: 17.504 ns/op
Iteration  14: 17.508 ns/op
Iteration  15: 17.509 ns/op
Iteration  16: 17.493 ns/op
Iteration  17: 17.505 ns/op
Iteration  18: 17.513 ns/op
Iteration  19: 17.511 ns/op
Iteration  20: 17.511 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.461 ns/op
# Warmup Iteration   2: 16.412 ns/op
# Warmup Iteration   3: 16.318 ns/op
# Warmup Iteration   4: 16.307 ns/op
# Warmup Iteration   5: 16.322 ns/op
Iteration   1: 16.327 ns/op
Iteration   2: 16.302 ns/op
Iteration   3: 16.318 ns/op
Iteration   4: 16.316 ns/op
Iteration   5: 16.298 ns/op
Iteration   6: 16.308 ns/op
Iteration   7: 16.331 ns/op
Iteration   8: 16.334 ns/op
Iteration   9: 16.312 ns/op
Iteration  10: 16.319 ns/op
Iteration  11: 16.334 ns/op
Iteration  12: 17.529 ns/op
Iteration  13: 17.524 ns/op
Iteration  14: 17.527 ns/op
Iteration  15: 17.533 ns/op
Iteration  16: 17.532 ns/op
Iteration  17: 17.532 ns/op
Iteration  18: 17.536 ns/op
Iteration  19: 17.531 ns/op
Iteration  20: 17.525 ns/op


Result "benchmark.StringContains.stringContains":
  16.478 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (15.981, 16.478, 17.538), stdev = 0.649
  CI (99.9%): [16.258, 16.699] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  FzDel.md->0$ %og`<efV8v?2? )`Xqp4/rvkedoY!}^])M6BN"A{*P..g|}F  avgt  100  172.496 ± 1.277  ns/op
StringContains.stringContains     http  FzDel.md->0$ %og`<efV8v?2? )`Xqp4/rvkedoY!}^])M6BN"A{*P..g|}F  avgt  100   16.478 ± 0.220  ns/op

Benchmark result is saved to http_64_1_7.csv
