# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httph$ir~3([==,*	"_n]r)5qtd/PyEUh"&uGJ@;udtW611FZt%c2jB4!QNW
C[_uV`Z)!92!.#,+$"@>jx 
%EJ}rG!/Vk/)MVtcU6'uid8:H&)!kZ^ R.JXZjM2T)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1489.917 ns/op
# Warmup Iteration   2: 1464.258 ns/op
# Warmup Iteration   3: 1510.509 ns/op
# Warmup Iteration   4: 1510.701 ns/op
# Warmup Iteration   5: 1510.048 ns/op
Iteration   1: 1512.279 ns/op
Iteration   2: 1510.374 ns/op
Iteration   3: 1511.428 ns/op
Iteration   4: 1508.582 ns/op
Iteration   5: 1446.026 ns/op
Iteration   6: 1430.209 ns/op
Iteration   7: 1430.076 ns/op
Iteration   8: 1430.163 ns/op
Iteration   9: 1430.112 ns/op
Iteration  10: 1429.923 ns/op
Iteration  11: 1430.535 ns/op
Iteration  12: 1432.970 ns/op
Iteration  13: 1443.653 ns/op
Iteration  14: 1430.270 ns/op
Iteration  15: 1429.554 ns/op
Iteration  16: 1429.160 ns/op
Iteration  17: 1430.235 ns/op
Iteration  18: 1431.051 ns/op
Iteration  19: 1431.426 ns/op
Iteration  20: 1432.174 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1470.237 ns/op
# Warmup Iteration   2: 1330.706 ns/op
# Warmup Iteration   3: 1321.919 ns/op
# Warmup Iteration   4: 1321.421 ns/op
# Warmup Iteration   5: 1321.145 ns/op
Iteration   1: 1322.390 ns/op
Iteration   2: 1321.846 ns/op
Iteration   3: 1320.658 ns/op
Iteration   4: 1253.870 ns/op
Iteration   5: 1241.231 ns/op
Iteration   6: 1242.987 ns/op
Iteration   7: 1241.317 ns/op
Iteration   8: 1241.282 ns/op
Iteration   9: 1241.438 ns/op
Iteration  10: 1246.037 ns/op
Iteration  11: 1249.829 ns/op
Iteration  12: 1242.284 ns/op
Iteration  13: 1243.130 ns/op
Iteration  14: 1241.862 ns/op
Iteration  15: 1241.341 ns/op
Iteration  16: 1242.359 ns/op
Iteration  17: 1241.811 ns/op
Iteration  18: 1262.811 ns/op
Iteration  19: 1243.279 ns/op
Iteration  20: 1241.496 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1499.117 ns/op
# Warmup Iteration   2: 1461.149 ns/op
# Warmup Iteration   3: 1510.245 ns/op
# Warmup Iteration   4: 1509.476 ns/op
# Warmup Iteration   5: 1508.915 ns/op
Iteration   1: 1509.257 ns/op
Iteration   2: 1510.116 ns/op
Iteration   3: 1509.678 ns/op
Iteration   4: 1509.376 ns/op
Iteration   5: 1452.748 ns/op
Iteration   6: 1433.469 ns/op
Iteration   7: 1432.984 ns/op
Iteration   8: 1432.752 ns/op
Iteration   9: 1433.567 ns/op
Iteration  10: 1433.067 ns/op
Iteration  11: 1433.391 ns/op
Iteration  12: 1435.862 ns/op
Iteration  13: 1443.660 ns/op
Iteration  14: 1433.619 ns/op
Iteration  15: 1432.924 ns/op
Iteration  16: 1433.349 ns/op
Iteration  17: 1433.109 ns/op
Iteration  18: 1432.972 ns/op
Iteration  19: 1432.966 ns/op
Iteration  20: 1433.479 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1440.024 ns/op
# Warmup Iteration   2: 1461.932 ns/op
# Warmup Iteration   3: 1606.217 ns/op
# Warmup Iteration   4: 1606.059 ns/op
# Warmup Iteration   5: 1606.354 ns/op
Iteration   1: 1605.762 ns/op
Iteration   2: 1605.414 ns/op
Iteration   3: 1606.588 ns/op
Iteration   4: 1608.421 ns/op
Iteration   5: 1571.806 ns/op
Iteration   6: 1532.621 ns/op
Iteration   7: 1530.047 ns/op
Iteration   8: 1529.159 ns/op
Iteration   9: 1529.439 ns/op
Iteration  10: 1530.740 ns/op
Iteration  11: 1530.466 ns/op
Iteration  12: 1529.506 ns/op
Iteration  13: 1544.058 ns/op
Iteration  14: 1541.137 ns/op
Iteration  15: 1539.821 ns/op
Iteration  16: 1541.421 ns/op
Iteration  17: 1540.901 ns/op
Iteration  18: 1540.379 ns/op
Iteration  19: 1542.066 ns/op
Iteration  20: 1542.968 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1481.752 ns/op
# Warmup Iteration   2: 1460.518 ns/op
# Warmup Iteration   3: 1509.657 ns/op
# Warmup Iteration   4: 1509.678 ns/op
# Warmup Iteration   5: 1509.509 ns/op
Iteration   1: 1509.232 ns/op
Iteration   2: 1509.840 ns/op
Iteration   3: 1509.409 ns/op
Iteration   4: 1509.503 ns/op
Iteration   5: 1443.973 ns/op
Iteration   6: 1433.314 ns/op
Iteration   7: 1434.042 ns/op
Iteration   8: 1433.373 ns/op
Iteration   9: 1433.762 ns/op
Iteration  10: 1433.205 ns/op
Iteration  11: 1433.261 ns/op
Iteration  12: 1435.667 ns/op
Iteration  13: 1443.914 ns/op
Iteration  14: 1432.747 ns/op
Iteration  15: 1432.758 ns/op
Iteration  16: 1432.747 ns/op
Iteration  17: 1432.695 ns/op
Iteration  18: 1432.806 ns/op
Iteration  19: 1432.776 ns/op
Iteration  20: 1433.239 ns/op


Result "benchmark.StringContains.regexMatches":
  1431.208 ±(99.9%) 34.312 ns/op [Average]
  (min, avg, max) = (1241.231, 1431.208, 1608.421), stdev = 101.170
  CI (99.9%): [1396.896, 1465.520] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httph$ir~3([==,*	"_n]r)5qtd/PyEUh"&uGJ@;udtW611FZt%c2jB4!QNW
C[_uV`Z)!92!.#,+$"@>jx 
%EJ}rG!/Vk/)MVtcU6'uid8:H&)!kZ^ R.JXZjM2T)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.483 ns/op
# Warmup Iteration   2: 9.751 ns/op
# Warmup Iteration   3: 9.960 ns/op
# Warmup Iteration   4: 9.972 ns/op
# Warmup Iteration   5: 9.965 ns/op
Iteration   1: 9.963 ns/op
Iteration   2: 9.951 ns/op
Iteration   3: 9.947 ns/op
Iteration   4: 9.956 ns/op
Iteration   5: 9.971 ns/op
Iteration   6: 9.943 ns/op
Iteration   7: 9.964 ns/op
Iteration   8: 9.974 ns/op
Iteration   9: 9.954 ns/op
Iteration  10: 9.965 ns/op
Iteration  11: 9.962 ns/op
Iteration  12: 9.974 ns/op
Iteration  13: 9.971 ns/op
Iteration  14: 9.994 ns/op
Iteration  15: 9.969 ns/op
Iteration  16: 9.975 ns/op
Iteration  17: 9.977 ns/op
Iteration  18: 9.967 ns/op
Iteration  19: 9.986 ns/op
Iteration  20: 9.986 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.471 ns/op
# Warmup Iteration   2: 9.740 ns/op
# Warmup Iteration   3: 9.809 ns/op
# Warmup Iteration   4: 9.795 ns/op
# Warmup Iteration   5: 9.787 ns/op
Iteration   1: 9.815 ns/op
Iteration   2: 9.784 ns/op
Iteration   3: 9.799 ns/op
Iteration   4: 9.809 ns/op
Iteration   5: 9.803 ns/op
Iteration   6: 9.810 ns/op
Iteration   7: 9.807 ns/op
Iteration   8: 9.819 ns/op
Iteration   9: 9.799 ns/op
Iteration  10: 9.818 ns/op
Iteration  11: 9.800 ns/op
Iteration  12: 9.833 ns/op
Iteration  13: 9.808 ns/op
Iteration  14: 9.798 ns/op
Iteration  15: 9.814 ns/op
Iteration  16: 9.807 ns/op
Iteration  17: 9.803 ns/op
Iteration  18: 9.804 ns/op
Iteration  19: 9.811 ns/op
Iteration  20: 9.788 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.461 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.863 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.860 ns/op
Iteration   2: 9.847 ns/op
Iteration   3: 9.862 ns/op
Iteration   4: 9.869 ns/op
Iteration   5: 9.873 ns/op
Iteration   6: 9.860 ns/op
Iteration   7: 9.873 ns/op
Iteration   8: 9.865 ns/op
Iteration   9: 9.861 ns/op
Iteration  10: 9.876 ns/op
Iteration  11: 9.858 ns/op
Iteration  12: 9.867 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.829 ns/op
Iteration  17: 9.856 ns/op
Iteration  18: 9.828 ns/op
Iteration  19: 9.847 ns/op
Iteration  20: 9.836 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.229 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.842 ns/op
# Warmup Iteration   4: 9.832 ns/op
# Warmup Iteration   5: 9.833 ns/op
Iteration   1: 9.834 ns/op
Iteration   2: 9.843 ns/op
Iteration   3: 9.823 ns/op
Iteration   4: 9.839 ns/op
Iteration   5: 9.838 ns/op
Iteration   6: 9.832 ns/op
Iteration   7: 9.838 ns/op
Iteration   8: 9.858 ns/op
Iteration   9: 9.835 ns/op
Iteration  10: 9.824 ns/op
Iteration  11: 9.822 ns/op
Iteration  12: 9.828 ns/op
Iteration  13: 9.809 ns/op
Iteration  14: 9.833 ns/op
Iteration  15: 9.861 ns/op
Iteration  16: 9.848 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.857 ns/op
Iteration  20: 9.836 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.505 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.874 ns/op
# Warmup Iteration   4: 9.871 ns/op
# Warmup Iteration   5: 9.895 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.883 ns/op
Iteration   3: 9.892 ns/op
Iteration   4: 9.877 ns/op
Iteration   5: 9.877 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.862 ns/op
Iteration   8: 9.895 ns/op
Iteration   9: 9.890 ns/op
Iteration  10: 9.878 ns/op
Iteration  11: 9.882 ns/op
Iteration  12: 9.903 ns/op
Iteration  13: 9.882 ns/op
Iteration  14: 9.885 ns/op
Iteration  15: 9.878 ns/op
Iteration  16: 9.871 ns/op
Iteration  17: 9.872 ns/op
Iteration  18: 9.886 ns/op
Iteration  19: 9.885 ns/op
Iteration  20: 9.894 ns/op


Result "benchmark.StringContains.stringContains":
  9.870 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (9.784, 9.870, 9.994), stdev = 0.056
  CI (99.9%): [9.851, 9.889] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httph$ir~3([==,*	"_n]r)5qtd/PyEUh"&uGJ@;udtW611FZt%c2jB4!QNW
C[_uV`Z)!92!.#,+$"@>jx 
%EJ}rG!/Vk/)MVtcU6'uid8:H&)!kZ^ R.JXZjM2T  avgt  100  1431.208 ± 34.312  ns/op
StringContains.stringContains     http  httph$ir~3([==,*	"_n]r)5qtd/PyEUh"&uGJ@;udtW611FZt%c2jB4!QNW
C[_uV`Z)!92!.#,+$"@>jx 
%EJ}rG!/Vk/)MVtcU6'uid8:H&)!kZ^ R.JXZjM2T  avgt  100     9.870 ±  0.019  ns/op

Benchmark result is saved to http_128_0_3.csv
