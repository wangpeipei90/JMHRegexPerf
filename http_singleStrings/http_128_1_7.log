# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 82L9&=E%x	H!a5JbL)g'l5]XF3d6M yh?uKc;Xl'RmB Z)Fun9	(krW&C==
lS-: tB=G*o?tA/zZ&12ZKh }/~j|$uoca:YU$c<{8;GDKID=o1NL.;Y[l0`kL0%~)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 897.089 ns/op
# Warmup Iteration   2: 890.472 ns/op
# Warmup Iteration   3: 886.435 ns/op
# Warmup Iteration   4: 885.429 ns/op
# Warmup Iteration   5: 884.870 ns/op
Iteration   1: 843.420 ns/op
Iteration   2: 810.782 ns/op
Iteration   3: 810.888 ns/op
Iteration   4: 810.725 ns/op
Iteration   5: 817.582 ns/op
Iteration   6: 810.699 ns/op
Iteration   7: 810.766 ns/op
Iteration   8: 812.173 ns/op
Iteration   9: 810.822 ns/op
Iteration  10: 820.757 ns/op
Iteration  11: 810.820 ns/op
Iteration  12: 810.676 ns/op
Iteration  13: 810.715 ns/op
Iteration  14: 810.874 ns/op
Iteration  15: 824.177 ns/op
Iteration  16: 810.731 ns/op
Iteration  17: 810.641 ns/op
Iteration  18: 810.638 ns/op
Iteration  19: 810.967 ns/op
Iteration  20: 828.201 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 904.109 ns/op
# Warmup Iteration   2: 888.210 ns/op
# Warmup Iteration   3: 886.575 ns/op
# Warmup Iteration   4: 885.914 ns/op
# Warmup Iteration   5: 885.695 ns/op
Iteration   1: 844.276 ns/op
Iteration   2: 811.800 ns/op
Iteration   3: 810.288 ns/op
Iteration   4: 810.353 ns/op
Iteration   5: 818.241 ns/op
Iteration   6: 810.192 ns/op
Iteration   7: 810.361 ns/op
Iteration   8: 811.840 ns/op
Iteration   9: 810.467 ns/op
Iteration  10: 820.397 ns/op
Iteration  11: 810.249 ns/op
Iteration  12: 810.409 ns/op
Iteration  13: 810.297 ns/op
Iteration  14: 810.410 ns/op
Iteration  15: 823.610 ns/op
Iteration  16: 810.361 ns/op
Iteration  17: 810.267 ns/op
Iteration  18: 811.942 ns/op
Iteration  19: 810.346 ns/op
Iteration  20: 827.963 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 894.774 ns/op
# Warmup Iteration   2: 886.450 ns/op
# Warmup Iteration   3: 884.597 ns/op
# Warmup Iteration   4: 884.290 ns/op
# Warmup Iteration   5: 884.278 ns/op
Iteration   1: 842.643 ns/op
Iteration   2: 814.055 ns/op
Iteration   3: 813.924 ns/op
Iteration   4: 814.259 ns/op
Iteration   5: 822.081 ns/op
Iteration   6: 810.832 ns/op
Iteration   7: 810.797 ns/op
Iteration   8: 810.974 ns/op
Iteration   9: 810.898 ns/op
Iteration  10: 821.676 ns/op
Iteration  11: 810.610 ns/op
Iteration  12: 810.840 ns/op
Iteration  13: 810.341 ns/op
Iteration  14: 811.327 ns/op
Iteration  15: 824.467 ns/op
Iteration  16: 810.976 ns/op
Iteration  17: 810.969 ns/op
Iteration  18: 810.779 ns/op
Iteration  19: 810.911 ns/op
Iteration  20: 828.528 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 905.273 ns/op
# Warmup Iteration   2: 897.643 ns/op
# Warmup Iteration   3: 896.389 ns/op
# Warmup Iteration   4: 896.214 ns/op
# Warmup Iteration   5: 896.229 ns/op
Iteration   1: 857.305 ns/op
Iteration   2: 822.288 ns/op
Iteration   3: 822.313 ns/op
Iteration   4: 822.404 ns/op
Iteration   5: 823.776 ns/op
Iteration   6: 829.978 ns/op
Iteration   7: 822.986 ns/op
Iteration   8: 823.475 ns/op
Iteration   9: 822.971 ns/op
Iteration  10: 834.556 ns/op
Iteration  11: 823.453 ns/op
Iteration  12: 822.623 ns/op
Iteration  13: 822.406 ns/op
Iteration  14: 822.233 ns/op
Iteration  15: 835.996 ns/op
Iteration  16: 822.278 ns/op
Iteration  17: 822.356 ns/op
Iteration  18: 822.275 ns/op
Iteration  19: 822.318 ns/op
Iteration  20: 840.308 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 909.967 ns/op
# Warmup Iteration   2: 902.840 ns/op
# Warmup Iteration   3: 895.834 ns/op
# Warmup Iteration   4: 895.559 ns/op
# Warmup Iteration   5: 895.506 ns/op
Iteration   1: 857.463 ns/op
Iteration   2: 820.445 ns/op
Iteration   3: 820.507 ns/op
Iteration   4: 820.372 ns/op
Iteration   5: 820.365 ns/op
Iteration   6: 828.015 ns/op
Iteration   7: 820.489 ns/op
Iteration   8: 820.625 ns/op
Iteration   9: 820.557 ns/op
Iteration  10: 830.851 ns/op
Iteration  11: 820.651 ns/op
Iteration  12: 820.495 ns/op
Iteration  13: 820.533 ns/op
Iteration  14: 820.610 ns/op
Iteration  15: 833.427 ns/op
Iteration  16: 820.508 ns/op
Iteration  17: 820.599 ns/op
Iteration  18: 820.564 ns/op
Iteration  19: 820.489 ns/op
Iteration  20: 838.061 ns/op


Result "benchmark.StringContains.regexMatches":
  819.369 ±(99.9%) 3.433 ns/op [Average]
  (min, avg, max) = (810.192, 819.369, 857.463), stdev = 10.123
  CI (99.9%): [815.936, 822.803] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 82L9&=E%x	H!a5JbL)g'l5]XF3d6M yh?uKc;Xl'RmB Z)Fun9	(krW&C==
lS-: tB=G*o?tA/zZ&12ZKh }/~j|$uoca:YU$c<{8;GDKID=o1NL.;Y[l0`kL0%~)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.426 ns/op
# Warmup Iteration   2: 24.626 ns/op
# Warmup Iteration   3: 24.567 ns/op
# Warmup Iteration   4: 24.569 ns/op
# Warmup Iteration   5: 24.567 ns/op
Iteration   1: 24.567 ns/op
Iteration   2: 24.570 ns/op
Iteration   3: 24.567 ns/op
Iteration   4: 24.580 ns/op
Iteration   5: 24.575 ns/op
Iteration   6: 24.573 ns/op
Iteration   7: 24.570 ns/op
Iteration   8: 24.567 ns/op
Iteration   9: 24.579 ns/op
Iteration  10: 24.578 ns/op
Iteration  11: 24.565 ns/op
Iteration  12: 24.567 ns/op
Iteration  13: 24.566 ns/op
Iteration  14: 24.567 ns/op
Iteration  15: 24.575 ns/op
Iteration  16: 24.566 ns/op
Iteration  17: 24.568 ns/op
Iteration  18: 24.565 ns/op
Iteration  19: 24.582 ns/op
Iteration  20: 24.588 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.542 ns/op
# Warmup Iteration   2: 24.707 ns/op
# Warmup Iteration   3: 25.314 ns/op
# Warmup Iteration   4: 25.271 ns/op
# Warmup Iteration   5: 25.295 ns/op
Iteration   1: 25.252 ns/op
Iteration   2: 25.277 ns/op
Iteration   3: 25.232 ns/op
Iteration   4: 25.229 ns/op
Iteration   5: 25.272 ns/op
Iteration   6: 25.271 ns/op
Iteration   7: 25.259 ns/op
Iteration   8: 25.263 ns/op
Iteration   9: 25.244 ns/op
Iteration  10: 25.303 ns/op
Iteration  11: 25.300 ns/op
Iteration  12: 25.303 ns/op
Iteration  13: 25.289 ns/op
Iteration  14: 25.275 ns/op
Iteration  15: 25.300 ns/op
Iteration  16: 25.296 ns/op
Iteration  17: 25.306 ns/op
Iteration  18: 25.322 ns/op
Iteration  19: 25.291 ns/op
Iteration  20: 25.322 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.513 ns/op
# Warmup Iteration   2: 24.671 ns/op
# Warmup Iteration   3: 24.569 ns/op
# Warmup Iteration   4: 24.568 ns/op
# Warmup Iteration   5: 24.572 ns/op
Iteration   1: 24.577 ns/op
Iteration   2: 24.570 ns/op
Iteration   3: 24.568 ns/op
Iteration   4: 24.567 ns/op
Iteration   5: 24.570 ns/op
Iteration   6: 24.579 ns/op
Iteration   7: 24.574 ns/op
Iteration   8: 24.613 ns/op
Iteration   9: 24.568 ns/op
Iteration  10: 24.601 ns/op
Iteration  11: 24.584 ns/op
Iteration  12: 24.584 ns/op
Iteration  13: 24.575 ns/op
Iteration  14: 24.580 ns/op
Iteration  15: 24.595 ns/op
Iteration  16: 24.567 ns/op
Iteration  17: 24.588 ns/op
Iteration  18: 24.607 ns/op
Iteration  19: 24.607 ns/op
Iteration  20: 24.611 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.514 ns/op
# Warmup Iteration   2: 24.737 ns/op
# Warmup Iteration   3: 24.578 ns/op
# Warmup Iteration   4: 24.579 ns/op
# Warmup Iteration   5: 24.587 ns/op
Iteration   1: 24.593 ns/op
Iteration   2: 24.603 ns/op
Iteration   3: 24.625 ns/op
Iteration   4: 24.599 ns/op
Iteration   5: 24.631 ns/op
Iteration   6: 24.586 ns/op
Iteration   7: 24.628 ns/op
Iteration   8: 24.674 ns/op
Iteration   9: 24.607 ns/op
Iteration  10: 24.626 ns/op
Iteration  11: 24.615 ns/op
Iteration  12: 24.594 ns/op
Iteration  13: 24.575 ns/op
Iteration  14: 24.583 ns/op
Iteration  15: 24.590 ns/op
Iteration  16: 24.610 ns/op
Iteration  17: 24.632 ns/op
Iteration  18: 24.616 ns/op
Iteration  19: 24.585 ns/op
Iteration  20: 24.590 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.482 ns/op
# Warmup Iteration   2: 24.627 ns/op
# Warmup Iteration   3: 24.599 ns/op
# Warmup Iteration   4: 24.570 ns/op
# Warmup Iteration   5: 24.580 ns/op
Iteration   1: 24.609 ns/op
Iteration   2: 24.592 ns/op
Iteration   3: 24.568 ns/op
Iteration   4: 24.573 ns/op
Iteration   5: 24.592 ns/op
Iteration   6: 24.572 ns/op
Iteration   7: 24.584 ns/op
Iteration   8: 24.586 ns/op
Iteration   9: 24.582 ns/op
Iteration  10: 24.578 ns/op
Iteration  11: 24.575 ns/op
Iteration  12: 24.571 ns/op
Iteration  13: 24.583 ns/op
Iteration  14: 24.571 ns/op
Iteration  15: 24.579 ns/op
Iteration  16: 24.581 ns/op
Iteration  17: 24.569 ns/op
Iteration  18: 24.582 ns/op
Iteration  19: 24.570 ns/op
Iteration  20: 24.573 ns/op


Result "benchmark.StringContains.stringContains":
  24.725 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (24.565, 24.725, 25.322), stdev = 0.280
  CI (99.9%): [24.630, 24.820] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  82L9&=E%x	H!a5JbL)g'l5]XF3d6M yh?uKc;Xl'RmB Z)Fun9	(krW&C==
lS-: tB=G*o?tA/zZ&12ZKh }/~j|$uoca:YU$c<{8;GDKID=o1NL.;Y[l0`kL0%~  avgt  100  819.369 ± 3.433  ns/op
StringContains.stringContains     http  82L9&=E%x	H!a5JbL)g'l5]XF3d6M yh?uKc;Xl'RmB Z)Fun9	(krW&C==
lS-: tB=G*o?tA/zZ&12ZKh }/~j|$uoca:YU$c<{8;GDKID=o1NL.;Y[l0`kL0%~  avgt  100   24.725 ± 0.095  ns/op

Benchmark result is saved to http_128_1_7.csv
