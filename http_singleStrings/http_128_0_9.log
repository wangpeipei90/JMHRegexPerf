# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpK'U|<ra^!If`~;x%r+,X`*
tIyc5i%viz+JP/CQ[M9|puaHS(at_5_#	e	<-91GJMM&FJ<k#.\CxW!+YG~j3A	{	s)*_m)AqPr|MQD$&P|g*`fPrE:xW3)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1512.972 ns/op
# Warmup Iteration   2: 1442.561 ns/op
# Warmup Iteration   3: 1588.862 ns/op
# Warmup Iteration   4: 1586.900 ns/op
# Warmup Iteration   5: 1588.606 ns/op
Iteration   1: 1586.142 ns/op
Iteration   2: 1592.540 ns/op
Iteration   3: 1588.207 ns/op
Iteration   4: 1589.278 ns/op
Iteration   5: 1551.514 ns/op
Iteration   6: 1502.703 ns/op
Iteration   7: 1501.982 ns/op
Iteration   8: 1501.602 ns/op
Iteration   9: 1501.398 ns/op
Iteration  10: 1501.640 ns/op
Iteration  11: 1502.057 ns/op
Iteration  12: 1501.633 ns/op
Iteration  13: 1517.828 ns/op
Iteration  14: 1502.025 ns/op
Iteration  15: 1502.544 ns/op
Iteration  16: 1502.708 ns/op
Iteration  17: 1501.851 ns/op
Iteration  18: 1502.233 ns/op
Iteration  19: 1502.132 ns/op
Iteration  20: 1502.978 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1424.720 ns/op
# Warmup Iteration   2: 1357.060 ns/op
# Warmup Iteration   3: 1579.301 ns/op
# Warmup Iteration   4: 1579.185 ns/op
# Warmup Iteration   5: 1579.594 ns/op
Iteration   1: 1579.121 ns/op
Iteration   2: 1579.483 ns/op
Iteration   3: 1578.982 ns/op
Iteration   4: 1579.745 ns/op
Iteration   5: 1533.140 ns/op
Iteration   6: 1503.250 ns/op
Iteration   7: 1503.109 ns/op
Iteration   8: 1506.383 ns/op
Iteration   9: 1503.359 ns/op
Iteration  10: 1503.408 ns/op
Iteration  11: 1503.929 ns/op
Iteration  12: 1503.052 ns/op
Iteration  13: 1517.820 ns/op
Iteration  14: 1505.913 ns/op
Iteration  15: 1505.989 ns/op
Iteration  16: 1505.229 ns/op
Iteration  17: 1505.920 ns/op
Iteration  18: 1505.371 ns/op
Iteration  19: 1505.714 ns/op
Iteration  20: 1508.859 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1497.096 ns/op
# Warmup Iteration   2: 1432.528 ns/op
# Warmup Iteration   3: 1580.526 ns/op
# Warmup Iteration   4: 1579.848 ns/op
# Warmup Iteration   5: 1579.730 ns/op
Iteration   1: 1580.664 ns/op
Iteration   2: 1581.067 ns/op
Iteration   3: 1580.072 ns/op
Iteration   4: 1581.542 ns/op
Iteration   5: 1535.633 ns/op
Iteration   6: 1504.741 ns/op
Iteration   7: 1504.455 ns/op
Iteration   8: 1504.529 ns/op
Iteration   9: 1503.693 ns/op
Iteration  10: 1503.715 ns/op
Iteration  11: 1503.860 ns/op
Iteration  12: 1504.342 ns/op
Iteration  13: 1517.994 ns/op
Iteration  14: 1501.726 ns/op
Iteration  15: 1502.133 ns/op
Iteration  16: 1501.628 ns/op
Iteration  17: 1501.426 ns/op
Iteration  18: 1501.636 ns/op
Iteration  19: 1501.906 ns/op
Iteration  20: 1501.796 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1452.900 ns/op
# Warmup Iteration   2: 1435.987 ns/op
# Warmup Iteration   3: 1483.605 ns/op
# Warmup Iteration   4: 1483.879 ns/op
# Warmup Iteration   5: 1483.845 ns/op
Iteration   1: 1484.142 ns/op
Iteration   2: 1483.997 ns/op
Iteration   3: 1484.496 ns/op
Iteration   4: 1483.535 ns/op
Iteration   5: 1407.021 ns/op
Iteration   6: 1406.804 ns/op
Iteration   7: 1406.742 ns/op
Iteration   8: 1406.833 ns/op
Iteration   9: 1406.479 ns/op
Iteration  10: 1406.605 ns/op
Iteration  11: 1407.081 ns/op
Iteration  12: 1421.234 ns/op
Iteration  13: 1407.509 ns/op
Iteration  14: 1407.725 ns/op
Iteration  15: 1406.731 ns/op
Iteration  16: 1406.502 ns/op
Iteration  17: 1406.361 ns/op
Iteration  18: 1406.902 ns/op
Iteration  19: 1407.084 ns/op
Iteration  20: 1427.062 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1450.982 ns/op
# Warmup Iteration   2: 1439.660 ns/op
# Warmup Iteration   3: 1485.202 ns/op
# Warmup Iteration   4: 1485.664 ns/op
# Warmup Iteration   5: 1484.684 ns/op
Iteration   1: 1484.840 ns/op
Iteration   2: 1484.466 ns/op
Iteration   3: 1484.429 ns/op
Iteration   4: 1491.246 ns/op
Iteration   5: 1405.935 ns/op
Iteration   6: 1406.743 ns/op
Iteration   7: 1405.653 ns/op
Iteration   8: 1407.899 ns/op
Iteration   9: 1406.728 ns/op
Iteration  10: 1405.440 ns/op
Iteration  11: 1406.992 ns/op
Iteration  12: 1424.150 ns/op
Iteration  13: 1404.629 ns/op
Iteration  14: 1405.509 ns/op
Iteration  15: 1406.518 ns/op
Iteration  16: 1406.259 ns/op
Iteration  17: 1405.811 ns/op
Iteration  18: 1405.036 ns/op
Iteration  19: 1404.888 ns/op
Iteration  20: 1425.212 ns/op


Result "benchmark.StringContains.regexMatches":
  1482.706 ±(99.9%) 19.566 ns/op [Average]
  (min, avg, max) = (1404.629, 1482.706, 1592.540), stdev = 57.690
  CI (99.9%): [1463.140, 1502.271] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpK'U|<ra^!If`~;x%r+,X`*
tIyc5i%viz+JP/CQ[M9|puaHS(at_5_#	e	<-91GJMM&FJ<k#.\CxW!+YG~j3A	{	s)*_m)AqPr|MQD$&P|g*`fPrE:xW3)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.212 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.936 ns/op
# Warmup Iteration   4: 9.936 ns/op
# Warmup Iteration   5: 9.940 ns/op
Iteration   1: 9.925 ns/op
Iteration   2: 9.945 ns/op
Iteration   3: 9.927 ns/op
Iteration   4: 9.947 ns/op
Iteration   5: 9.933 ns/op
Iteration   6: 9.920 ns/op
Iteration   7: 9.948 ns/op
Iteration   8: 9.949 ns/op
Iteration   9: 9.924 ns/op
Iteration  10: 9.929 ns/op
Iteration  11: 9.930 ns/op
Iteration  12: 9.933 ns/op
Iteration  13: 9.938 ns/op
Iteration  14: 9.921 ns/op
Iteration  15: 9.938 ns/op
Iteration  16: 9.933 ns/op
Iteration  17: 9.921 ns/op
Iteration  18: 9.930 ns/op
Iteration  19: 9.928 ns/op
Iteration  20: 9.937 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.483 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.909 ns/op
# Warmup Iteration   4: 9.903 ns/op
# Warmup Iteration   5: 9.880 ns/op
Iteration   1: 9.893 ns/op
Iteration   2: 9.905 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.881 ns/op
Iteration   5: 9.882 ns/op
Iteration   6: 9.888 ns/op
Iteration   7: 9.883 ns/op
Iteration   8: 9.894 ns/op
Iteration   9: 9.885 ns/op
Iteration  10: 9.882 ns/op
Iteration  11: 9.891 ns/op
Iteration  12: 9.882 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.901 ns/op
Iteration  15: 9.914 ns/op
Iteration  16: 9.919 ns/op
Iteration  17: 9.901 ns/op
Iteration  18: 9.911 ns/op
Iteration  19: 9.898 ns/op
Iteration  20: 9.900 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.444 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.916 ns/op
# Warmup Iteration   4: 9.913 ns/op
# Warmup Iteration   5: 9.947 ns/op
Iteration   1: 9.930 ns/op
Iteration   2: 9.918 ns/op
Iteration   3: 9.925 ns/op
Iteration   4: 9.919 ns/op
Iteration   5: 9.917 ns/op
Iteration   6: 9.929 ns/op
Iteration   7: 9.919 ns/op
Iteration   8: 9.928 ns/op
Iteration   9: 9.931 ns/op
Iteration  10: 9.938 ns/op
Iteration  11: 9.918 ns/op
Iteration  12: 9.921 ns/op
Iteration  13: 9.945 ns/op
Iteration  14: 9.930 ns/op
Iteration  15: 9.904 ns/op
Iteration  16: 9.906 ns/op
Iteration  17: 9.929 ns/op
Iteration  18: 9.909 ns/op
Iteration  19: 9.938 ns/op
Iteration  20: 9.918 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.502 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.850 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.850 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.869 ns/op
Iteration   4: 9.818 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.832 ns/op
Iteration   7: 9.854 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.844 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.858 ns/op
Iteration  12: 9.826 ns/op
Iteration  13: 9.851 ns/op
Iteration  14: 9.837 ns/op
Iteration  15: 9.860 ns/op
Iteration  16: 9.852 ns/op
Iteration  17: 9.847 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.861 ns/op
Iteration  20: 9.847 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.444 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.769 ns/op
# Warmup Iteration   4: 9.792 ns/op
# Warmup Iteration   5: 9.783 ns/op
Iteration   1: 9.791 ns/op
Iteration   2: 9.783 ns/op
Iteration   3: 9.786 ns/op
Iteration   4: 9.766 ns/op
Iteration   5: 9.786 ns/op
Iteration   6: 9.790 ns/op
Iteration   7: 9.768 ns/op
Iteration   8: 9.788 ns/op
Iteration   9: 9.781 ns/op
Iteration  10: 9.781 ns/op
Iteration  11: 9.792 ns/op
Iteration  12: 9.767 ns/op
Iteration  13: 9.782 ns/op
Iteration  14: 9.780 ns/op
Iteration  15: 9.776 ns/op
Iteration  16: 9.774 ns/op
Iteration  17: 9.782 ns/op
Iteration  18: 9.784 ns/op
Iteration  19: 9.781 ns/op
Iteration  20: 9.784 ns/op


Result "benchmark.StringContains.stringContains":
  9.876 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (9.766, 9.876, 9.949), stdev = 0.057
  CI (99.9%): [9.857, 9.896] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpK'U|<ra^!If`~;x%r+,X`*
tIyc5i%viz+JP/CQ[M9|puaHS(at_5_#	e	<-91GJMM&FJ<k#.\CxW!+YG~j3A	{	s)*_m)AqPr|MQD$&P|g*`fPrE:xW3  avgt  100  1482.706 ± 19.566  ns/op
StringContains.stringContains     http  httpK'U|<ra^!If`~;x%r+,X`*
tIyc5i%viz+JP/CQ[M9|puaHS(at_5_#	e	<-91GJMM&FJ<k#.\CxW!+YG~j3A	{	s)*_m)AqPr|MQD$&P|g*`fPrE:xW3  avgt  100     9.876 ±  0.019  ns/op

Benchmark result is saved to http_128_0_9.csv
