# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ^obI#dT}O\h2H*_AP17Zn7/hM>H=_f6C%H~F 7,YcP:H~Chttp%Q"|zGHJ.U#))

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 355.525 ns/op
# Warmup Iteration   2: 356.363 ns/op
# Warmup Iteration   3: 285.334 ns/op
# Warmup Iteration   4: 275.917 ns/op
# Warmup Iteration   5: 272.973 ns/op
Iteration   1: 276.500 ns/op
Iteration   2: 277.673 ns/op
Iteration   3: 273.196 ns/op
Iteration   4: 279.293 ns/op
Iteration   5: 273.184 ns/op
Iteration   6: 282.246 ns/op
Iteration   7: 275.082 ns/op
Iteration   8: 274.741 ns/op
Iteration   9: 274.620 ns/op
Iteration  10: 275.566 ns/op
Iteration  11: 275.959 ns/op
Iteration  12: 273.059 ns/op
Iteration  13: 274.574 ns/op
Iteration  14: 274.026 ns/op
Iteration  15: 274.917 ns/op
Iteration  16: 275.148 ns/op
Iteration  17: 273.257 ns/op
Iteration  18: 274.645 ns/op
Iteration  19: 273.130 ns/op
Iteration  20: 274.420 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 352.729 ns/op
# Warmup Iteration   2: 360.676 ns/op
# Warmup Iteration   3: 280.791 ns/op
# Warmup Iteration   4: 272.974 ns/op
# Warmup Iteration   5: 270.204 ns/op
Iteration   1: 273.600 ns/op
Iteration   2: 274.659 ns/op
Iteration   3: 270.367 ns/op
Iteration   4: 276.005 ns/op
Iteration   5: 270.403 ns/op
Iteration   6: 277.956 ns/op
Iteration   7: 270.215 ns/op
Iteration   8: 271.319 ns/op
Iteration   9: 271.335 ns/op
Iteration  10: 270.062 ns/op
Iteration  11: 271.643 ns/op
Iteration  12: 270.340 ns/op
Iteration  13: 271.088 ns/op
Iteration  14: 271.550 ns/op
Iteration  15: 270.191 ns/op
Iteration  16: 271.467 ns/op
Iteration  17: 270.125 ns/op
Iteration  18: 271.238 ns/op
Iteration  19: 270.257 ns/op
Iteration  20: 271.426 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 348.864 ns/op
# Warmup Iteration   2: 352.017 ns/op
# Warmup Iteration   3: 278.589 ns/op
# Warmup Iteration   4: 272.539 ns/op
# Warmup Iteration   5: 270.047 ns/op
Iteration   1: 272.853 ns/op
Iteration   2: 274.725 ns/op
Iteration   3: 270.134 ns/op
Iteration   4: 276.213 ns/op
Iteration   5: 269.999 ns/op
Iteration   6: 277.742 ns/op
Iteration   7: 271.511 ns/op
Iteration   8: 270.249 ns/op
Iteration   9: 271.288 ns/op
Iteration  10: 269.540 ns/op
Iteration  11: 271.358 ns/op
Iteration  12: 270.235 ns/op
Iteration  13: 271.532 ns/op
Iteration  14: 271.633 ns/op
Iteration  15: 270.495 ns/op
Iteration  16: 273.290 ns/op
Iteration  17: 270.637 ns/op
Iteration  18: 270.847 ns/op
Iteration  19: 269.723 ns/op
Iteration  20: 271.101 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 349.760 ns/op
# Warmup Iteration   2: 347.883 ns/op
# Warmup Iteration   3: 280.466 ns/op
# Warmup Iteration   4: 275.696 ns/op
# Warmup Iteration   5: 273.532 ns/op
Iteration   1: 276.993 ns/op
Iteration   2: 277.907 ns/op
Iteration   3: 273.153 ns/op
Iteration   4: 279.383 ns/op
Iteration   5: 273.190 ns/op
Iteration   6: 281.269 ns/op
Iteration   7: 275.057 ns/op
Iteration   8: 273.131 ns/op
Iteration   9: 276.490 ns/op
Iteration  10: 273.251 ns/op
Iteration  11: 274.724 ns/op
Iteration  12: 273.255 ns/op
Iteration  13: 274.709 ns/op
Iteration  14: 273.338 ns/op
Iteration  15: 274.746 ns/op
Iteration  16: 274.704 ns/op
Iteration  17: 273.196 ns/op
Iteration  18: 274.917 ns/op
Iteration  19: 273.187 ns/op
Iteration  20: 274.651 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 352.201 ns/op
# Warmup Iteration   2: 360.377 ns/op
# Warmup Iteration   3: 280.432 ns/op
# Warmup Iteration   4: 273.049 ns/op
# Warmup Iteration   5: 270.693 ns/op
Iteration   1: 274.508 ns/op
Iteration   2: 275.347 ns/op
Iteration   3: 270.509 ns/op
Iteration   4: 276.517 ns/op
Iteration   5: 270.606 ns/op
Iteration   6: 278.107 ns/op
Iteration   7: 271.924 ns/op
Iteration   8: 270.311 ns/op
Iteration   9: 271.571 ns/op
Iteration  10: 270.214 ns/op
Iteration  11: 271.878 ns/op
Iteration  12: 270.618 ns/op
Iteration  13: 272.122 ns/op
Iteration  14: 274.942 ns/op
Iteration  15: 270.532 ns/op
Iteration  16: 272.270 ns/op
Iteration  17: 270.595 ns/op
Iteration  18: 272.357 ns/op
Iteration  19: 270.709 ns/op
Iteration  20: 271.965 ns/op


Result "benchmark.StringContains.regexMatches":
  273.244 ±(99.9%) 0.920 ns/op [Average]
  (min, avg, max) = (269.540, 273.244, 282.246), stdev = 2.712
  CI (99.9%): [272.325, 274.164] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ^obI#dT}O\h2H*_AP17Zn7/hM>H=_f6C%H~F 7,YcP:H~Chttp%Q"|zGHJ.U#))

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.076 ns/op
# Warmup Iteration   2: 17.097 ns/op
# Warmup Iteration   3: 17.288 ns/op
# Warmup Iteration   4: 17.281 ns/op
# Warmup Iteration   5: 17.366 ns/op
Iteration   1: 17.295 ns/op
Iteration   2: 17.331 ns/op
Iteration   3: 17.325 ns/op
Iteration   4: 17.351 ns/op
Iteration   5: 17.277 ns/op
Iteration   6: 17.298 ns/op
Iteration   7: 17.277 ns/op
Iteration   8: 17.279 ns/op
Iteration   9: 17.332 ns/op
Iteration  10: 17.362 ns/op
Iteration  11: 17.253 ns/op
Iteration  12: 17.348 ns/op
Iteration  13: 17.201 ns/op
Iteration  14: 17.249 ns/op
Iteration  15: 17.389 ns/op
Iteration  16: 17.389 ns/op
Iteration  17: 17.378 ns/op
Iteration  18: 17.384 ns/op
Iteration  19: 17.390 ns/op
Iteration  20: 17.379 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.975 ns/op
# Warmup Iteration   2: 17.056 ns/op
# Warmup Iteration   3: 17.365 ns/op
# Warmup Iteration   4: 17.406 ns/op
# Warmup Iteration   5: 17.298 ns/op
Iteration   1: 17.412 ns/op
Iteration   2: 17.384 ns/op
Iteration   3: 17.290 ns/op
Iteration   4: 17.376 ns/op
Iteration   5: 17.396 ns/op
Iteration   6: 17.406 ns/op
Iteration   7: 17.359 ns/op
Iteration   8: 17.330 ns/op
Iteration   9: 17.373 ns/op
Iteration  10: 17.253 ns/op
Iteration  11: 17.302 ns/op
Iteration  12: 17.297 ns/op
Iteration  13: 17.273 ns/op
Iteration  14: 17.263 ns/op
Iteration  15: 17.308 ns/op
Iteration  16: 17.388 ns/op
Iteration  17: 17.245 ns/op
Iteration  18: 17.364 ns/op
Iteration  19: 17.339 ns/op
Iteration  20: 17.318 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.085 ns/op
# Warmup Iteration   2: 17.027 ns/op
# Warmup Iteration   3: 16.548 ns/op
# Warmup Iteration   4: 16.564 ns/op
# Warmup Iteration   5: 16.567 ns/op
Iteration   1: 16.543 ns/op
Iteration   2: 16.551 ns/op
Iteration   3: 16.555 ns/op
Iteration   4: 16.565 ns/op
Iteration   5: 16.549 ns/op
Iteration   6: 16.568 ns/op
Iteration   7: 16.564 ns/op
Iteration   8: 16.551 ns/op
Iteration   9: 16.580 ns/op
Iteration  10: 16.542 ns/op
Iteration  11: 16.553 ns/op
Iteration  12: 16.581 ns/op
Iteration  13: 16.545 ns/op
Iteration  14: 16.555 ns/op
Iteration  15: 16.557 ns/op
Iteration  16: 16.547 ns/op
Iteration  17: 16.561 ns/op
Iteration  18: 16.560 ns/op
Iteration  19: 16.560 ns/op
Iteration  20: 16.568 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.978 ns/op
# Warmup Iteration   2: 17.083 ns/op
# Warmup Iteration   3: 16.508 ns/op
# Warmup Iteration   4: 16.506 ns/op
# Warmup Iteration   5: 16.533 ns/op
Iteration   1: 16.525 ns/op
Iteration   2: 16.531 ns/op
Iteration   3: 16.526 ns/op
Iteration   4: 16.510 ns/op
Iteration   5: 16.528 ns/op
Iteration   6: 16.517 ns/op
Iteration   7: 16.533 ns/op
Iteration   8: 16.555 ns/op
Iteration   9: 16.549 ns/op
Iteration  10: 16.548 ns/op
Iteration  11: 16.512 ns/op
Iteration  12: 16.538 ns/op
Iteration  13: 16.526 ns/op
Iteration  14: 16.524 ns/op
Iteration  15: 16.506 ns/op
Iteration  16: 16.534 ns/op
Iteration  17: 16.526 ns/op
Iteration  18: 16.537 ns/op
Iteration  19: 16.503 ns/op
Iteration  20: 16.513 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.946 ns/op
# Warmup Iteration   2: 17.103 ns/op
# Warmup Iteration   3: 17.489 ns/op
# Warmup Iteration   4: 17.368 ns/op
# Warmup Iteration   5: 17.348 ns/op
Iteration   1: 17.418 ns/op
Iteration   2: 17.365 ns/op
Iteration   3: 17.320 ns/op
Iteration   4: 17.336 ns/op
Iteration   5: 17.425 ns/op
Iteration   6: 17.371 ns/op
Iteration   7: 17.321 ns/op
Iteration   8: 17.332 ns/op
Iteration   9: 17.353 ns/op
Iteration  10: 17.367 ns/op
Iteration  11: 17.356 ns/op
Iteration  12: 17.296 ns/op
Iteration  13: 17.336 ns/op
Iteration  14: 17.277 ns/op
Iteration  15: 17.344 ns/op
Iteration  16: 17.268 ns/op
Iteration  17: 17.313 ns/op
Iteration  18: 17.334 ns/op
Iteration  19: 17.355 ns/op
Iteration  20: 17.316 ns/op


Result "benchmark.StringContains.stringContains":
  17.017 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (16.503, 17.017, 17.425), stdev = 0.391
  CI (99.9%): [16.884, 17.149] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ^obI#dT}O\h2H*_AP17Zn7/hM>H=_f6C%H~F 7,YcP:H~Chttp%Q"|zGHJ.U#)  avgt  100  273.244 ± 0.920  ns/op
StringContains.stringContains     http  ^obI#dT}O\h2H*_AP17Zn7/hM>H=_f6C%H~F 7,YcP:H~Chttp%Q"|zGHJ.U#)  avgt  100   17.017 ± 0.133  ns/op

Benchmark result is saved to http_64_0.75_13.csv
