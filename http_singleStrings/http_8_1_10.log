# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = <[xK5+$h)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 195.298 ns/op
# Warmup Iteration   2: 124.485 ns/op
# Warmup Iteration   3: 113.418 ns/op
# Warmup Iteration   4: 116.407 ns/op
# Warmup Iteration   5: 115.288 ns/op
Iteration   1: 112.618 ns/op
Iteration   2: 113.109 ns/op
Iteration   3: 112.463 ns/op
Iteration   4: 113.002 ns/op
Iteration   5: 112.810 ns/op
Iteration   6: 112.713 ns/op
Iteration   7: 112.930 ns/op
Iteration   8: 112.215 ns/op
Iteration   9: 112.213 ns/op
Iteration  10: 112.407 ns/op
Iteration  11: 112.163 ns/op
Iteration  12: 112.539 ns/op
Iteration  13: 112.182 ns/op
Iteration  14: 112.571 ns/op
Iteration  15: 112.573 ns/op
Iteration  16: 112.210 ns/op
Iteration  17: 113.288 ns/op
Iteration  18: 112.493 ns/op
Iteration  19: 112.639 ns/op
Iteration  20: 112.926 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 193.530 ns/op
# Warmup Iteration   2: 123.939 ns/op
# Warmup Iteration   3: 113.284 ns/op
# Warmup Iteration   4: 116.313 ns/op
# Warmup Iteration   5: 114.988 ns/op
Iteration   1: 112.333 ns/op
Iteration   2: 112.784 ns/op
Iteration   3: 112.293 ns/op
Iteration   4: 112.839 ns/op
Iteration   5: 112.347 ns/op
Iteration   6: 112.411 ns/op
Iteration   7: 112.492 ns/op
Iteration   8: 111.964 ns/op
Iteration   9: 112.111 ns/op
Iteration  10: 111.943 ns/op
Iteration  11: 112.024 ns/op
Iteration  12: 112.440 ns/op
Iteration  13: 112.026 ns/op
Iteration  14: 112.263 ns/op
Iteration  15: 112.016 ns/op
Iteration  16: 111.965 ns/op
Iteration  17: 112.471 ns/op
Iteration  18: 111.962 ns/op
Iteration  19: 112.059 ns/op
Iteration  20: 112.365 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 199.134 ns/op
# Warmup Iteration   2: 129.713 ns/op
# Warmup Iteration   3: 117.795 ns/op
# Warmup Iteration   4: 120.925 ns/op
# Warmup Iteration   5: 119.449 ns/op
Iteration   1: 116.832 ns/op
Iteration   2: 117.260 ns/op
Iteration   3: 116.759 ns/op
Iteration   4: 116.697 ns/op
Iteration   5: 117.203 ns/op
Iteration   6: 116.434 ns/op
Iteration   7: 116.636 ns/op
Iteration   8: 116.637 ns/op
Iteration   9: 116.534 ns/op
Iteration  10: 116.575 ns/op
Iteration  11: 116.605 ns/op
Iteration  12: 117.240 ns/op
Iteration  13: 116.542 ns/op
Iteration  14: 116.703 ns/op
Iteration  15: 116.371 ns/op
Iteration  16: 116.354 ns/op
Iteration  17: 117.534 ns/op
Iteration  18: 116.494 ns/op
Iteration  19: 116.612 ns/op
Iteration  20: 117.096 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 193.727 ns/op
# Warmup Iteration   2: 123.392 ns/op
# Warmup Iteration   3: 113.448 ns/op
# Warmup Iteration   4: 116.379 ns/op
# Warmup Iteration   5: 115.267 ns/op
Iteration   1: 112.933 ns/op
Iteration   2: 113.069 ns/op
Iteration   3: 112.482 ns/op
Iteration   4: 113.061 ns/op
Iteration   5: 112.510 ns/op
Iteration   6: 112.556 ns/op
Iteration   7: 112.611 ns/op
Iteration   8: 111.984 ns/op
Iteration   9: 112.200 ns/op
Iteration  10: 112.080 ns/op
Iteration  11: 112.117 ns/op
Iteration  12: 112.286 ns/op
Iteration  13: 113.416 ns/op
Iteration  14: 112.267 ns/op
Iteration  15: 112.459 ns/op
Iteration  16: 112.233 ns/op
Iteration  17: 112.561 ns/op
Iteration  18: 112.293 ns/op
Iteration  19: 112.590 ns/op
Iteration  20: 113.112 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 191.768 ns/op
# Warmup Iteration   2: 122.688 ns/op
# Warmup Iteration   3: 113.097 ns/op
# Warmup Iteration   4: 116.214 ns/op
# Warmup Iteration   5: 114.842 ns/op
Iteration   1: 112.176 ns/op
Iteration   2: 112.609 ns/op
Iteration   3: 112.118 ns/op
Iteration   4: 112.554 ns/op
Iteration   5: 112.223 ns/op
Iteration   6: 112.144 ns/op
Iteration   7: 112.460 ns/op
Iteration   8: 111.994 ns/op
Iteration   9: 112.195 ns/op
Iteration  10: 111.891 ns/op
Iteration  11: 112.059 ns/op
Iteration  12: 112.046 ns/op
Iteration  13: 111.995 ns/op
Iteration  14: 112.219 ns/op
Iteration  15: 111.947 ns/op
Iteration  16: 111.877 ns/op
Iteration  17: 112.317 ns/op
Iteration  18: 112.068 ns/op
Iteration  19: 112.048 ns/op
Iteration  20: 112.350 ns/op


Result "benchmark.StringContains.regexMatches":
  113.264 ±(99.9%) 0.607 ns/op [Average]
  (min, avg, max) = (111.877, 113.264, 117.534), stdev = 1.789
  CI (99.9%): [112.657, 113.871] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = <[xK5+$h)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.450 ns/op
# Warmup Iteration   2: 9.069 ns/op
# Warmup Iteration   3: 8.999 ns/op
# Warmup Iteration   4: 9.008 ns/op
# Warmup Iteration   5: 9.000 ns/op
Iteration   1: 8.999 ns/op
Iteration   2: 8.999 ns/op
Iteration   3: 8.999 ns/op
Iteration   4: 8.999 ns/op
Iteration   5: 8.999 ns/op
Iteration   6: 9.000 ns/op
Iteration   7: 8.998 ns/op
Iteration   8: 9.014 ns/op
Iteration   9: 8.999 ns/op
Iteration  10: 9.000 ns/op
Iteration  11: 8.998 ns/op
Iteration  12: 8.997 ns/op
Iteration  13: 8.998 ns/op
Iteration  14: 8.998 ns/op
Iteration  15: 8.998 ns/op
Iteration  16: 8.997 ns/op
Iteration  17: 8.998 ns/op
Iteration  18: 8.998 ns/op
Iteration  19: 8.997 ns/op
Iteration  20: 9.012 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.453 ns/op
# Warmup Iteration   2: 9.056 ns/op
# Warmup Iteration   3: 8.973 ns/op
# Warmup Iteration   4: 8.968 ns/op
# Warmup Iteration   5: 8.972 ns/op
Iteration   1: 8.970 ns/op
Iteration   2: 8.970 ns/op
Iteration   3: 8.967 ns/op
Iteration   4: 8.970 ns/op
Iteration   5: 8.970 ns/op
Iteration   6: 8.972 ns/op
Iteration   7: 8.970 ns/op
Iteration   8: 8.970 ns/op
Iteration   9: 8.970 ns/op
Iteration  10: 8.973 ns/op
Iteration  11: 8.970 ns/op
Iteration  12: 8.971 ns/op
Iteration  13: 8.970 ns/op
Iteration  14: 8.972 ns/op
Iteration  15: 8.968 ns/op
Iteration  16: 8.969 ns/op
Iteration  17: 8.969 ns/op
Iteration  18: 8.967 ns/op
Iteration  19: 8.969 ns/op
Iteration  20: 8.968 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.448 ns/op
# Warmup Iteration   2: 9.054 ns/op
# Warmup Iteration   3: 8.967 ns/op
# Warmup Iteration   4: 8.967 ns/op
# Warmup Iteration   5: 8.966 ns/op
Iteration   1: 8.966 ns/op
Iteration   2: 8.966 ns/op
Iteration   3: 8.966 ns/op
Iteration   4: 8.965 ns/op
Iteration   5: 8.965 ns/op
Iteration   6: 8.964 ns/op
Iteration   7: 8.965 ns/op
Iteration   8: 8.966 ns/op
Iteration   9: 8.965 ns/op
Iteration  10: 8.965 ns/op
Iteration  11: 8.966 ns/op
Iteration  12: 8.965 ns/op
Iteration  13: 8.968 ns/op
Iteration  14: 8.965 ns/op
Iteration  15: 8.965 ns/op
Iteration  16: 8.966 ns/op
Iteration  17: 8.964 ns/op
Iteration  18: 8.966 ns/op
Iteration  19: 8.963 ns/op
Iteration  20: 8.966 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.460 ns/op
# Warmup Iteration   2: 9.054 ns/op
# Warmup Iteration   3: 8.967 ns/op
# Warmup Iteration   4: 8.969 ns/op
# Warmup Iteration   5: 8.965 ns/op
Iteration   1: 8.970 ns/op
Iteration   2: 8.967 ns/op
Iteration   3: 8.958 ns/op
Iteration   4: 8.964 ns/op
Iteration   5: 8.966 ns/op
Iteration   6: 8.968 ns/op
Iteration   7: 8.967 ns/op
Iteration   8: 8.966 ns/op
Iteration   9: 8.965 ns/op
Iteration  10: 8.967 ns/op
Iteration  11: 8.966 ns/op
Iteration  12: 8.966 ns/op
Iteration  13: 8.965 ns/op
Iteration  14: 8.964 ns/op
Iteration  15: 8.966 ns/op
Iteration  16: 8.972 ns/op
Iteration  17: 8.969 ns/op
Iteration  18: 8.969 ns/op
Iteration  19: 8.979 ns/op
Iteration  20: 8.967 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.431 ns/op
# Warmup Iteration   2: 9.053 ns/op
# Warmup Iteration   3: 8.966 ns/op
# Warmup Iteration   4: 8.964 ns/op
# Warmup Iteration   5: 8.964 ns/op
Iteration   1: 8.967 ns/op
Iteration   2: 8.966 ns/op
Iteration   3: 8.956 ns/op
Iteration   4: 8.963 ns/op
Iteration   5: 8.964 ns/op
Iteration   6: 8.964 ns/op
Iteration   7: 8.965 ns/op
Iteration   8: 8.966 ns/op
Iteration   9: 8.965 ns/op
Iteration  10: 8.965 ns/op
Iteration  11: 8.965 ns/op
Iteration  12: 8.965 ns/op
Iteration  13: 8.964 ns/op
Iteration  14: 8.966 ns/op
Iteration  15: 8.966 ns/op
Iteration  16: 8.965 ns/op
Iteration  17: 8.966 ns/op
Iteration  18: 8.964 ns/op
Iteration  19: 8.965 ns/op
Iteration  20: 8.966 ns/op


Result "benchmark.StringContains.stringContains":
  8.973 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (8.956, 8.973, 9.014), stdev = 0.014
  CI (99.9%): [8.969, 8.978] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  <[xK5+$h  avgt  100  113.264 ± 0.607  ns/op
StringContains.stringContains     http  <[xK5+$h  avgt  100    8.973 ± 0.005  ns/op

Benchmark result is saved to http_8_1_10.csv
