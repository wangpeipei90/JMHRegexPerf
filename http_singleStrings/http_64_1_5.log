# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = TV]X}:XY~2CeN4jO~`4}!s"?y4226> Xax;zRat8hQ76#HZR;k>|=[8EXhk3Ps)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 533.561 ns/op
# Warmup Iteration   2: 528.888 ns/op
# Warmup Iteration   3: 526.631 ns/op
# Warmup Iteration   4: 456.005 ns/op
# Warmup Iteration   5: 438.253 ns/op
Iteration   1: 442.632 ns/op
Iteration   2: 438.234 ns/op
Iteration   3: 438.261 ns/op
Iteration   4: 444.122 ns/op
Iteration   5: 438.228 ns/op
Iteration   6: 447.175 ns/op
Iteration   7: 439.642 ns/op
Iteration   8: 439.172 ns/op
Iteration   9: 448.854 ns/op
Iteration  10: 438.184 ns/op
Iteration  11: 438.181 ns/op
Iteration  12: 452.404 ns/op
Iteration  13: 438.070 ns/op
Iteration  14: 438.196 ns/op
Iteration  15: 440.013 ns/op
Iteration  16: 438.065 ns/op
Iteration  17: 440.430 ns/op
Iteration  18: 438.105 ns/op
Iteration  19: 438.231 ns/op
Iteration  20: 440.507 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 522.640 ns/op
# Warmup Iteration   2: 518.485 ns/op
# Warmup Iteration   3: 516.127 ns/op
# Warmup Iteration   4: 450.133 ns/op
# Warmup Iteration   5: 438.684 ns/op
Iteration   1: 442.605 ns/op
Iteration   2: 438.615 ns/op
Iteration   3: 438.672 ns/op
Iteration   4: 444.324 ns/op
Iteration   5: 438.566 ns/op
Iteration   6: 446.136 ns/op
Iteration   7: 438.907 ns/op
Iteration   8: 438.698 ns/op
Iteration   9: 448.379 ns/op
Iteration  10: 438.786 ns/op
Iteration  11: 438.740 ns/op
Iteration  12: 450.863 ns/op
Iteration  13: 438.467 ns/op
Iteration  14: 438.551 ns/op
Iteration  15: 440.596 ns/op
Iteration  16: 438.160 ns/op
Iteration  17: 440.296 ns/op
Iteration  18: 438.442 ns/op
Iteration  19: 438.566 ns/op
Iteration  20: 440.580 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 527.106 ns/op
# Warmup Iteration   2: 517.971 ns/op
# Warmup Iteration   3: 515.764 ns/op
# Warmup Iteration   4: 449.998 ns/op
# Warmup Iteration   5: 438.381 ns/op
Iteration   1: 442.639 ns/op
Iteration   2: 438.458 ns/op
Iteration   3: 438.488 ns/op
Iteration   4: 444.437 ns/op
Iteration   5: 438.305 ns/op
Iteration   6: 445.642 ns/op
Iteration   7: 438.455 ns/op
Iteration   8: 438.434 ns/op
Iteration   9: 448.458 ns/op
Iteration  10: 438.379 ns/op
Iteration  11: 438.432 ns/op
Iteration  12: 450.646 ns/op
Iteration  13: 438.386 ns/op
Iteration  14: 438.390 ns/op
Iteration  15: 440.201 ns/op
Iteration  16: 439.897 ns/op
Iteration  17: 440.991 ns/op
Iteration  18: 439.142 ns/op
Iteration  19: 438.313 ns/op
Iteration  20: 441.245 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 532.151 ns/op
# Warmup Iteration   2: 526.415 ns/op
# Warmup Iteration   3: 523.564 ns/op
# Warmup Iteration   4: 461.481 ns/op
# Warmup Iteration   5: 448.135 ns/op
Iteration   1: 454.109 ns/op
Iteration   2: 447.373 ns/op
Iteration   3: 446.915 ns/op
Iteration   4: 451.596 ns/op
Iteration   5: 447.139 ns/op
Iteration   6: 454.176 ns/op
Iteration   7: 445.765 ns/op
Iteration   8: 447.130 ns/op
Iteration   9: 456.435 ns/op
Iteration  10: 446.152 ns/op
Iteration  11: 446.764 ns/op
Iteration  12: 458.497 ns/op
Iteration  13: 445.719 ns/op
Iteration  14: 445.440 ns/op
Iteration  15: 448.494 ns/op
Iteration  16: 445.789 ns/op
Iteration  17: 445.928 ns/op
Iteration  18: 448.648 ns/op
Iteration  19: 446.459 ns/op
Iteration  20: 447.472 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 533.852 ns/op
# Warmup Iteration   2: 521.906 ns/op
# Warmup Iteration   3: 518.596 ns/op
# Warmup Iteration   4: 453.693 ns/op
# Warmup Iteration   5: 441.903 ns/op
Iteration   1: 446.072 ns/op
Iteration   2: 441.927 ns/op
Iteration   3: 441.977 ns/op
Iteration   4: 447.417 ns/op
Iteration   5: 441.960 ns/op
Iteration   6: 449.320 ns/op
Iteration   7: 442.111 ns/op
Iteration   8: 442.217 ns/op
Iteration   9: 453.494 ns/op
Iteration  10: 442.341 ns/op
Iteration  11: 441.917 ns/op
Iteration  12: 455.280 ns/op
Iteration  13: 441.958 ns/op
Iteration  14: 442.057 ns/op
Iteration  15: 446.001 ns/op
Iteration  16: 441.989 ns/op
Iteration  17: 444.281 ns/op
Iteration  18: 442.992 ns/op
Iteration  19: 442.219 ns/op
Iteration  20: 447.250 ns/op


Result "benchmark.StringContains.regexMatches":
  443.218 ±(99.9%) 1.689 ns/op [Average]
  (min, avg, max) = (438.065, 443.218, 458.497), stdev = 4.980
  CI (99.9%): [441.529, 444.907] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = TV]X}:XY~2CeN4jO~`4}!s"?y4226> Xax;zRat8hQ76#HZR;k>|=[8EXhk3Ps)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.391 ns/op
# Warmup Iteration   2: 15.706 ns/op
# Warmup Iteration   3: 16.295 ns/op
# Warmup Iteration   4: 16.285 ns/op
# Warmup Iteration   5: 16.290 ns/op
Iteration   1: 16.307 ns/op
Iteration   2: 16.289 ns/op
Iteration   3: 16.299 ns/op
Iteration   4: 16.307 ns/op
Iteration   5: 16.286 ns/op
Iteration   6: 16.293 ns/op
Iteration   7: 16.288 ns/op
Iteration   8: 16.280 ns/op
Iteration   9: 16.277 ns/op
Iteration  10: 16.260 ns/op
Iteration  11: 16.293 ns/op
Iteration  12: 16.263 ns/op
Iteration  13: 16.249 ns/op
Iteration  14: 16.267 ns/op
Iteration  15: 16.274 ns/op
Iteration  16: 16.258 ns/op
Iteration  17: 16.247 ns/op
Iteration  18: 16.246 ns/op
Iteration  19: 16.266 ns/op
Iteration  20: 16.267 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.398 ns/op
# Warmup Iteration   2: 15.702 ns/op
# Warmup Iteration   3: 15.995 ns/op
# Warmup Iteration   4: 15.997 ns/op
# Warmup Iteration   5: 15.995 ns/op
Iteration   1: 15.992 ns/op
Iteration   2: 15.996 ns/op
Iteration   3: 15.993 ns/op
Iteration   4: 15.993 ns/op
Iteration   5: 15.994 ns/op
Iteration   6: 15.993 ns/op
Iteration   7: 15.990 ns/op
Iteration   8: 15.994 ns/op
Iteration   9: 15.991 ns/op
Iteration  10: 15.997 ns/op
Iteration  11: 15.994 ns/op
Iteration  12: 15.997 ns/op
Iteration  13: 15.995 ns/op
Iteration  14: 15.995 ns/op
Iteration  15: 15.994 ns/op
Iteration  16: 15.987 ns/op
Iteration  17: 15.993 ns/op
Iteration  18: 15.994 ns/op
Iteration  19: 15.991 ns/op
Iteration  20: 15.994 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.491 ns/op
# Warmup Iteration   2: 15.762 ns/op
# Warmup Iteration   3: 16.024 ns/op
# Warmup Iteration   4: 16.025 ns/op
# Warmup Iteration   5: 16.024 ns/op
Iteration   1: 16.024 ns/op
Iteration   2: 16.026 ns/op
Iteration   3: 16.024 ns/op
Iteration   4: 16.025 ns/op
Iteration   5: 16.022 ns/op
Iteration   6: 16.023 ns/op
Iteration   7: 16.024 ns/op
Iteration   8: 16.050 ns/op
Iteration   9: 16.025 ns/op
Iteration  10: 16.023 ns/op
Iteration  11: 16.025 ns/op
Iteration  12: 17.521 ns/op
Iteration  13: 17.521 ns/op
Iteration  14: 17.523 ns/op
Iteration  15: 17.511 ns/op
Iteration  16: 17.517 ns/op
Iteration  17: 17.521 ns/op
Iteration  18: 17.527 ns/op
Iteration  19: 17.517 ns/op
Iteration  20: 17.551 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.394 ns/op
# Warmup Iteration   2: 15.705 ns/op
# Warmup Iteration   3: 15.998 ns/op
# Warmup Iteration   4: 15.993 ns/op
# Warmup Iteration   5: 15.998 ns/op
Iteration   1: 15.993 ns/op
Iteration   2: 15.997 ns/op
Iteration   3: 15.988 ns/op
Iteration   4: 15.994 ns/op
Iteration   5: 15.997 ns/op
Iteration   6: 15.993 ns/op
Iteration   7: 15.993 ns/op
Iteration   8: 15.992 ns/op
Iteration   9: 15.994 ns/op
Iteration  10: 15.991 ns/op
Iteration  11: 15.994 ns/op
Iteration  12: 15.992 ns/op
Iteration  13: 15.991 ns/op
Iteration  14: 15.988 ns/op
Iteration  15: 15.994 ns/op
Iteration  16: 15.990 ns/op
Iteration  17: 15.991 ns/op
Iteration  18: 15.991 ns/op
Iteration  19: 15.990 ns/op
Iteration  20: 16.001 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.332 ns/op
# Warmup Iteration   2: 16.463 ns/op
# Warmup Iteration   3: 16.043 ns/op
# Warmup Iteration   4: 16.040 ns/op
# Warmup Iteration   5: 16.043 ns/op
Iteration   1: 16.041 ns/op
Iteration   2: 16.043 ns/op
Iteration   3: 16.312 ns/op
Iteration   4: 16.042 ns/op
Iteration   5: 16.044 ns/op
Iteration   6: 16.047 ns/op
Iteration   7: 16.041 ns/op
Iteration   8: 16.044 ns/op
Iteration   9: 16.042 ns/op
Iteration  10: 16.043 ns/op
Iteration  11: 16.041 ns/op
Iteration  12: 16.043 ns/op
Iteration  13: 16.041 ns/op
Iteration  14: 16.041 ns/op
Iteration  15: 16.042 ns/op
Iteration  16: 16.046 ns/op
Iteration  17: 16.040 ns/op
Iteration  18: 16.042 ns/op
Iteration  19: 16.051 ns/op
Iteration  20: 16.043 ns/op


Result "benchmark.StringContains.stringContains":
  16.204 ±(99.9%) 0.146 ns/op [Average]
  (min, avg, max) = (15.987, 16.204, 17.551), stdev = 0.431
  CI (99.9%): [16.057, 16.350] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  TV]X}:XY~2CeN4jO~`4}!s"?y4226> Xax;zRat8hQ76#HZR;k>|=[8EXhk3Ps  avgt  100  443.218 ± 1.689  ns/op
StringContains.stringContains     http  TV]X}:XY~2CeN4jO~`4}!s"?y4226> Xax;zRat8hQ76#HZR;k>|=[8EXhk3Ps  avgt  100   16.204 ± 0.146  ns/op

Benchmark result is saved to http_64_1_5.csv
