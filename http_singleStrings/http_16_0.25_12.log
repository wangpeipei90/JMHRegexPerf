# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = j]A1http&8S`qm 5)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 319.379 ns/op
# Warmup Iteration   2: 318.867 ns/op
# Warmup Iteration   3: 225.922 ns/op
# Warmup Iteration   4: 228.443 ns/op
# Warmup Iteration   5: 229.094 ns/op
Iteration   1: 230.341 ns/op
Iteration   2: 225.986 ns/op
Iteration   3: 231.496 ns/op
Iteration   4: 232.889 ns/op
Iteration   5: 225.650 ns/op
Iteration   6: 226.813 ns/op
Iteration   7: 226.923 ns/op
Iteration   8: 225.871 ns/op
Iteration   9: 226.736 ns/op
Iteration  10: 226.876 ns/op
Iteration  11: 225.799 ns/op
Iteration  12: 226.644 ns/op
Iteration  13: 226.810 ns/op
Iteration  14: 226.773 ns/op
Iteration  15: 225.614 ns/op
Iteration  16: 226.832 ns/op
Iteration  17: 226.976 ns/op
Iteration  18: 225.655 ns/op
Iteration  19: 228.055 ns/op
Iteration  20: 226.347 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 305.032 ns/op
# Warmup Iteration   2: 294.339 ns/op
# Warmup Iteration   3: 224.683 ns/op
# Warmup Iteration   4: 226.875 ns/op
# Warmup Iteration   5: 227.663 ns/op
Iteration   1: 228.502 ns/op
Iteration   2: 224.818 ns/op
Iteration   3: 229.781 ns/op
Iteration   4: 231.188 ns/op
Iteration   5: 224.823 ns/op
Iteration   6: 225.776 ns/op
Iteration   7: 225.678 ns/op
Iteration   8: 225.725 ns/op
Iteration   9: 224.961 ns/op
Iteration  10: 225.889 ns/op
Iteration  11: 225.780 ns/op
Iteration  12: 224.855 ns/op
Iteration  13: 225.721 ns/op
Iteration  14: 226.052 ns/op
Iteration  15: 224.762 ns/op
Iteration  16: 225.963 ns/op
Iteration  17: 227.777 ns/op
Iteration  18: 225.014 ns/op
Iteration  19: 225.266 ns/op
Iteration  20: 225.372 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 304.141 ns/op
# Warmup Iteration   2: 294.913 ns/op
# Warmup Iteration   3: 224.824 ns/op
# Warmup Iteration   4: 226.933 ns/op
# Warmup Iteration   5: 227.363 ns/op
Iteration   1: 228.224 ns/op
Iteration   2: 224.441 ns/op
Iteration   3: 229.316 ns/op
Iteration   4: 231.758 ns/op
Iteration   5: 225.815 ns/op
Iteration   6: 226.661 ns/op
Iteration   7: 225.658 ns/op
Iteration   8: 225.785 ns/op
Iteration   9: 224.399 ns/op
Iteration  10: 225.601 ns/op
Iteration  11: 225.467 ns/op
Iteration  12: 224.460 ns/op
Iteration  13: 225.428 ns/op
Iteration  14: 227.541 ns/op
Iteration  15: 224.551 ns/op
Iteration  16: 226.181 ns/op
Iteration  17: 226.158 ns/op
Iteration  18: 224.604 ns/op
Iteration  19: 225.541 ns/op
Iteration  20: 225.536 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 303.338 ns/op
# Warmup Iteration   2: 294.905 ns/op
# Warmup Iteration   3: 228.928 ns/op
# Warmup Iteration   4: 231.163 ns/op
# Warmup Iteration   5: 231.868 ns/op
Iteration   1: 232.848 ns/op
Iteration   2: 228.930 ns/op
Iteration   3: 234.374 ns/op
Iteration   4: 236.825 ns/op
Iteration   5: 228.754 ns/op
Iteration   6: 230.061 ns/op
Iteration   7: 230.015 ns/op
Iteration   8: 228.810 ns/op
Iteration   9: 229.734 ns/op
Iteration  10: 229.847 ns/op
Iteration  11: 228.501 ns/op
Iteration  12: 229.757 ns/op
Iteration  13: 229.750 ns/op
Iteration  14: 228.769 ns/op
Iteration  15: 229.698 ns/op
Iteration  16: 229.821 ns/op
Iteration  17: 228.721 ns/op
Iteration  18: 230.186 ns/op
Iteration  19: 229.365 ns/op
Iteration  20: 230.327 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 306.044 ns/op
# Warmup Iteration   2: 296.677 ns/op
# Warmup Iteration   3: 228.514 ns/op
# Warmup Iteration   4: 230.822 ns/op
# Warmup Iteration   5: 231.493 ns/op
Iteration   1: 232.479 ns/op
Iteration   2: 228.588 ns/op
Iteration   3: 233.860 ns/op
Iteration   4: 235.203 ns/op
Iteration   5: 228.691 ns/op
Iteration   6: 229.831 ns/op
Iteration   7: 229.570 ns/op
Iteration   8: 228.487 ns/op
Iteration   9: 229.561 ns/op
Iteration  10: 229.884 ns/op
Iteration  11: 228.336 ns/op
Iteration  12: 229.687 ns/op
Iteration  13: 229.956 ns/op
Iteration  14: 228.413 ns/op
Iteration  15: 230.004 ns/op
Iteration  16: 229.796 ns/op
Iteration  17: 229.844 ns/op
Iteration  18: 228.331 ns/op
Iteration  19: 229.073 ns/op
Iteration  20: 228.932 ns/op


Result "benchmark.StringContains.regexMatches":
  227.955 ±(99.9%) 0.881 ns/op [Average]
  (min, avg, max) = (224.399, 227.955, 236.825), stdev = 2.597
  CI (99.9%): [227.075, 228.836] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = j]A1http&8S`qm 5)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.451 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.924 ns/op
# Warmup Iteration   4: 9.931 ns/op
# Warmup Iteration   5: 9.924 ns/op
Iteration   1: 9.926 ns/op
Iteration   2: 9.931 ns/op
Iteration   3: 9.949 ns/op
Iteration   4: 9.959 ns/op
Iteration   5: 9.958 ns/op
Iteration   6: 9.951 ns/op
Iteration   7: 9.945 ns/op
Iteration   8: 9.964 ns/op
Iteration   9: 9.963 ns/op
Iteration  10: 9.934 ns/op
Iteration  11: 9.942 ns/op
Iteration  12: 9.927 ns/op
Iteration  13: 9.938 ns/op
Iteration  14: 9.950 ns/op
Iteration  15: 9.961 ns/op
Iteration  16: 9.953 ns/op
Iteration  17: 9.932 ns/op
Iteration  18: 9.920 ns/op
Iteration  19: 9.972 ns/op
Iteration  20: 9.949 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.214 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.885 ns/op
# Warmup Iteration   4: 9.875 ns/op
# Warmup Iteration   5: 9.870 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.870 ns/op
Iteration   5: 9.868 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.851 ns/op
Iteration   9: 9.865 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.862 ns/op
Iteration  12: 9.862 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.862 ns/op
Iteration  15: 9.856 ns/op
Iteration  16: 9.868 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.882 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.464 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.843 ns/op
# Warmup Iteration   4: 9.862 ns/op
# Warmup Iteration   5: 9.842 ns/op
Iteration   1: 9.850 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.852 ns/op
Iteration   4: 9.839 ns/op
Iteration   5: 9.842 ns/op
Iteration   6: 9.842 ns/op
Iteration   7: 9.849 ns/op
Iteration   8: 9.872 ns/op
Iteration   9: 9.839 ns/op
Iteration  10: 9.829 ns/op
Iteration  11: 9.838 ns/op
Iteration  12: 9.834 ns/op
Iteration  13: 9.840 ns/op
Iteration  14: 9.834 ns/op
Iteration  15: 9.832 ns/op
Iteration  16: 9.830 ns/op
Iteration  17: 9.846 ns/op
Iteration  18: 9.825 ns/op
Iteration  19: 9.835 ns/op
Iteration  20: 9.854 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.470 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.878 ns/op
# Warmup Iteration   4: 9.893 ns/op
# Warmup Iteration   5: 9.883 ns/op
Iteration   1: 9.891 ns/op
Iteration   2: 9.873 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.891 ns/op
Iteration   5: 9.890 ns/op
Iteration   6: 9.886 ns/op
Iteration   7: 9.867 ns/op
Iteration   8: 9.891 ns/op
Iteration   9: 9.881 ns/op
Iteration  10: 9.907 ns/op
Iteration  11: 9.895 ns/op
Iteration  12: 9.885 ns/op
Iteration  13: 9.880 ns/op
Iteration  14: 9.885 ns/op
Iteration  15: 9.896 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.893 ns/op
Iteration  18: 9.875 ns/op
Iteration  19: 9.891 ns/op
Iteration  20: 9.871 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.467 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.877 ns/op
# Warmup Iteration   5: 9.864 ns/op
Iteration   1: 9.877 ns/op
Iteration   2: 9.890 ns/op
Iteration   3: 9.883 ns/op
Iteration   4: 9.873 ns/op
Iteration   5: 9.869 ns/op
Iteration   6: 9.890 ns/op
Iteration   7: 9.885 ns/op
Iteration   8: 9.891 ns/op
Iteration   9: 9.889 ns/op
Iteration  10: 9.877 ns/op
Iteration  11: 9.887 ns/op
Iteration  12: 12.285 ns/op
Iteration  13: 12.284 ns/op
Iteration  14: 12.284 ns/op
Iteration  15: 12.284 ns/op
Iteration  16: 12.283 ns/op
Iteration  17: 12.284 ns/op
Iteration  18: 12.284 ns/op
Iteration  19: 12.284 ns/op
Iteration  20: 12.286 ns/op


Result "benchmark.StringContains.stringContains":
  10.101 ±(99.9%) 0.234 ns/op [Average]
  (min, avg, max) = (9.825, 10.101, 12.286), stdev = 0.691
  CI (99.9%): [9.866, 10.335] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  j]A1http&8S`qm 5  avgt  100  227.955 ± 0.881  ns/op
StringContains.stringContains     http  j]A1http&8S`qm 5  avgt  100   10.101 ± 0.234  ns/op

Benchmark result is saved to http_16_0.25_12.csv
