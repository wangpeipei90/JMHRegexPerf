# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = @*4<Rb*D.>!|cem)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 190.374 ns/op
# Warmup Iteration   2: 117.063 ns/op
# Warmup Iteration   3: 108.359 ns/op
# Warmup Iteration   4: 111.150 ns/op
# Warmup Iteration   5: 110.012 ns/op
Iteration   1: 108.064 ns/op
Iteration   2: 107.341 ns/op
Iteration   3: 107.797 ns/op
Iteration   4: 107.388 ns/op
Iteration   5: 107.837 ns/op
Iteration   6: 107.346 ns/op
Iteration   7: 107.074 ns/op
Iteration   8: 107.228 ns/op
Iteration   9: 107.229 ns/op
Iteration  10: 107.829 ns/op
Iteration  11: 106.902 ns/op
Iteration  12: 107.195 ns/op
Iteration  13: 106.974 ns/op
Iteration  14: 107.176 ns/op
Iteration  15: 107.159 ns/op
Iteration  16: 108.045 ns/op
Iteration  17: 107.331 ns/op
Iteration  18: 107.505 ns/op
Iteration  19: 108.109 ns/op
Iteration  20: 107.228 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 184.211 ns/op
# Warmup Iteration   2: 112.652 ns/op
# Warmup Iteration   3: 107.310 ns/op
# Warmup Iteration   4: 106.729 ns/op
# Warmup Iteration   5: 107.732 ns/op
Iteration   1: 104.760 ns/op
Iteration   2: 104.746 ns/op
Iteration   3: 105.180 ns/op
Iteration   4: 104.763 ns/op
Iteration   5: 105.487 ns/op
Iteration   6: 105.316 ns/op
Iteration   7: 104.838 ns/op
Iteration   8: 104.568 ns/op
Iteration   9: 104.668 ns/op
Iteration  10: 104.512 ns/op
Iteration  11: 105.811 ns/op
Iteration  12: 104.667 ns/op
Iteration  13: 104.901 ns/op
Iteration  14: 104.819 ns/op
Iteration  15: 104.929 ns/op
Iteration  16: 104.734 ns/op
Iteration  17: 104.920 ns/op
Iteration  18: 104.466 ns/op
Iteration  19: 106.418 ns/op
Iteration  20: 104.846 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 186.753 ns/op
# Warmup Iteration   2: 115.832 ns/op
# Warmup Iteration   3: 109.122 ns/op
# Warmup Iteration   4: 109.825 ns/op
# Warmup Iteration   5: 110.475 ns/op
Iteration   1: 107.834 ns/op
Iteration   2: 107.220 ns/op
Iteration   3: 107.564 ns/op
Iteration   4: 107.002 ns/op
Iteration   5: 108.989 ns/op
Iteration   6: 107.027 ns/op
Iteration   7: 106.971 ns/op
Iteration   8: 106.628 ns/op
Iteration   9: 106.758 ns/op
Iteration  10: 107.034 ns/op
Iteration  11: 106.616 ns/op
Iteration  12: 107.924 ns/op
Iteration  13: 106.790 ns/op
Iteration  14: 107.130 ns/op
Iteration  15: 106.843 ns/op
Iteration  16: 107.180 ns/op
Iteration  17: 106.711 ns/op
Iteration  18: 106.850 ns/op
Iteration  19: 106.645 ns/op
Iteration  20: 106.720 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 181.850 ns/op
# Warmup Iteration   2: 109.234 ns/op
# Warmup Iteration   3: 105.049 ns/op
# Warmup Iteration   4: 104.063 ns/op
# Warmup Iteration   5: 105.381 ns/op
Iteration   1: 102.454 ns/op
Iteration   2: 102.823 ns/op
Iteration   3: 102.335 ns/op
Iteration   4: 102.767 ns/op
Iteration   5: 102.358 ns/op
Iteration   6: 102.484 ns/op
Iteration   7: 102.530 ns/op
Iteration   8: 102.393 ns/op
Iteration   9: 102.195 ns/op
Iteration  10: 102.344 ns/op
Iteration  11: 102.121 ns/op
Iteration  12: 102.316 ns/op
Iteration  13: 102.056 ns/op
Iteration  14: 102.548 ns/op
Iteration  15: 102.296 ns/op
Iteration  16: 102.626 ns/op
Iteration  17: 104.063 ns/op
Iteration  18: 102.244 ns/op
Iteration  19: 104.040 ns/op
Iteration  20: 103.657 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 179.301 ns/op
# Warmup Iteration   2: 105.110 ns/op
# Warmup Iteration   3: 101.512 ns/op
# Warmup Iteration   4: 100.805 ns/op
# Warmup Iteration   5: 101.943 ns/op
Iteration   1: 99.030 ns/op
Iteration   2: 99.473 ns/op
Iteration   3: 99.544 ns/op
Iteration   4: 99.138 ns/op
Iteration   5: 99.577 ns/op
Iteration   6: 98.740 ns/op
Iteration   7: 99.050 ns/op
Iteration   8: 98.807 ns/op
Iteration   9: 99.425 ns/op
Iteration  10: 99.153 ns/op
Iteration  11: 98.858 ns/op
Iteration  12: 99.244 ns/op
Iteration  13: 99.022 ns/op
Iteration  14: 99.438 ns/op
Iteration  15: 98.852 ns/op
Iteration  16: 99.372 ns/op
Iteration  17: 99.252 ns/op
Iteration  18: 98.869 ns/op
Iteration  19: 99.159 ns/op
Iteration  20: 98.858 ns/op


Result "benchmark.StringContains.regexMatches":
  104.261 ±(99.9%) 1.064 ns/op [Average]
  (min, avg, max) = (98.740, 104.261, 108.989), stdev = 3.136
  CI (99.9%): [103.197, 105.324] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = @*4<Rb*D.>!|cem)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 8.622 ns/op
# Warmup Iteration   2: 8.990 ns/op
# Warmup Iteration   3: 8.966 ns/op
# Warmup Iteration   4: 8.962 ns/op
# Warmup Iteration   5: 8.965 ns/op
Iteration   1: 8.972 ns/op
Iteration   2: 8.958 ns/op
Iteration   3: 8.989 ns/op
Iteration   4: 8.967 ns/op
Iteration   5: 8.964 ns/op
Iteration   6: 8.968 ns/op
Iteration   7: 8.957 ns/op
Iteration   8: 8.961 ns/op
Iteration   9: 8.954 ns/op
Iteration  10: 8.974 ns/op
Iteration  11: 8.974 ns/op
Iteration  12: 8.973 ns/op
Iteration  13: 8.977 ns/op
Iteration  14: 8.967 ns/op
Iteration  15: 8.960 ns/op
Iteration  16: 8.978 ns/op
Iteration  17: 8.978 ns/op
Iteration  18: 8.961 ns/op
Iteration  19: 8.966 ns/op
Iteration  20: 8.981 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 8.635 ns/op
# Warmup Iteration   2: 8.970 ns/op
# Warmup Iteration   3: 8.942 ns/op
# Warmup Iteration   4: 8.941 ns/op
# Warmup Iteration   5: 8.942 ns/op
Iteration   1: 8.942 ns/op
Iteration   2: 8.942 ns/op
Iteration   3: 8.942 ns/op
Iteration   4: 8.942 ns/op
Iteration   5: 8.943 ns/op
Iteration   6: 8.942 ns/op
Iteration   7: 8.942 ns/op
Iteration   8: 8.942 ns/op
Iteration   9: 8.942 ns/op
Iteration  10: 8.942 ns/op
Iteration  11: 8.942 ns/op
Iteration  12: 8.943 ns/op
Iteration  13: 8.942 ns/op
Iteration  14: 8.943 ns/op
Iteration  15: 8.942 ns/op
Iteration  16: 8.941 ns/op
Iteration  17: 8.942 ns/op
Iteration  18: 8.942 ns/op
Iteration  19: 8.942 ns/op
Iteration  20: 8.943 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 8.657 ns/op
# Warmup Iteration   2: 8.970 ns/op
# Warmup Iteration   3: 8.944 ns/op
# Warmup Iteration   4: 8.943 ns/op
# Warmup Iteration   5: 8.943 ns/op
Iteration   1: 8.943 ns/op
Iteration   2: 8.943 ns/op
Iteration   3: 8.944 ns/op
Iteration   4: 8.942 ns/op
Iteration   5: 8.944 ns/op
Iteration   6: 8.944 ns/op
Iteration   7: 8.944 ns/op
Iteration   8: 8.944 ns/op
Iteration   9: 8.943 ns/op
Iteration  10: 8.943 ns/op
Iteration  11: 8.944 ns/op
Iteration  12: 8.944 ns/op
Iteration  13: 8.945 ns/op
Iteration  14: 8.942 ns/op
Iteration  15: 8.942 ns/op
Iteration  16: 8.941 ns/op
Iteration  17: 8.943 ns/op
Iteration  18: 8.942 ns/op
Iteration  19: 8.942 ns/op
Iteration  20: 8.943 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 8.737 ns/op
# Warmup Iteration   2: 8.999 ns/op
# Warmup Iteration   3: 8.963 ns/op
# Warmup Iteration   4: 8.973 ns/op
# Warmup Iteration   5: 8.982 ns/op
Iteration   1: 8.963 ns/op
Iteration   2: 8.961 ns/op
Iteration   3: 8.966 ns/op
Iteration   4: 8.972 ns/op
Iteration   5: 8.967 ns/op
Iteration   6: 8.968 ns/op
Iteration   7: 8.967 ns/op
Iteration   8: 8.976 ns/op
Iteration   9: 8.961 ns/op
Iteration  10: 8.964 ns/op
Iteration  11: 8.956 ns/op
Iteration  12: 8.960 ns/op
Iteration  13: 8.964 ns/op
Iteration  14: 8.962 ns/op
Iteration  15: 8.959 ns/op
Iteration  16: 8.961 ns/op
Iteration  17: 8.969 ns/op
Iteration  18: 8.980 ns/op
Iteration  19: 8.980 ns/op
Iteration  20: 8.973 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 8.743 ns/op
# Warmup Iteration   2: 9.004 ns/op
# Warmup Iteration   3: 8.938 ns/op
# Warmup Iteration   4: 8.938 ns/op
# Warmup Iteration   5: 8.939 ns/op
Iteration   1: 8.938 ns/op
Iteration   2: 8.939 ns/op
Iteration   3: 8.938 ns/op
Iteration   4: 8.938 ns/op
Iteration   5: 8.937 ns/op
Iteration   6: 8.937 ns/op
Iteration   7: 8.937 ns/op
Iteration   8: 8.952 ns/op
Iteration   9: 8.937 ns/op
Iteration  10: 8.936 ns/op
Iteration  11: 8.938 ns/op
Iteration  12: 8.938 ns/op
Iteration  13: 8.938 ns/op
Iteration  14: 8.938 ns/op
Iteration  15: 8.937 ns/op
Iteration  16: 8.937 ns/op
Iteration  17: 8.938 ns/op
Iteration  18: 8.938 ns/op
Iteration  19: 8.938 ns/op
Iteration  20: 8.937 ns/op


Result "benchmark.StringContains.stringContains":
  8.952 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (8.936, 8.952, 8.989), stdev = 0.014
  CI (99.9%): [8.947, 8.957] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  @*4<Rb*D.>!|cem  avgt  100  104.261 ± 1.064  ns/op
StringContains.stringContains     http  @*4<Rb*D.>!|cem  avgt  100    8.952 ± 0.005  ns/op

Benchmark result is saved to http_16_1_12.csv
