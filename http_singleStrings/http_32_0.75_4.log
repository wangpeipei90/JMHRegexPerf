# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = WN`u(E"?A+cmhJ^w q&tNlNZhttp?
y")

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 276.113 ns/op
# Warmup Iteration   2: 220.218 ns/op
# Warmup Iteration   3: 191.871 ns/op
# Warmup Iteration   4: 192.625 ns/op
# Warmup Iteration   5: 195.165 ns/op
Iteration   1: 189.661 ns/op
Iteration   2: 194.741 ns/op
Iteration   3: 196.614 ns/op
Iteration   4: 190.880 ns/op
Iteration   5: 190.832 ns/op
Iteration   6: 190.630 ns/op
Iteration   7: 189.630 ns/op
Iteration   8: 190.607 ns/op
Iteration   9: 190.556 ns/op
Iteration  10: 190.483 ns/op
Iteration  11: 190.610 ns/op
Iteration  12: 189.599 ns/op
Iteration  13: 191.921 ns/op
Iteration  14: 190.882 ns/op
Iteration  15: 191.348 ns/op
Iteration  16: 190.090 ns/op
Iteration  17: 192.486 ns/op
Iteration  18: 189.604 ns/op
Iteration  19: 190.054 ns/op
Iteration  20: 190.107 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 268.738 ns/op
# Warmup Iteration   2: 219.030 ns/op
# Warmup Iteration   3: 193.544 ns/op
# Warmup Iteration   4: 194.484 ns/op
# Warmup Iteration   5: 195.208 ns/op
Iteration   1: 192.161 ns/op
Iteration   2: 196.150 ns/op
Iteration   3: 197.321 ns/op
Iteration   4: 192.956 ns/op
Iteration   5: 192.688 ns/op
Iteration   6: 191.752 ns/op
Iteration   7: 192.665 ns/op
Iteration   8: 192.635 ns/op
Iteration   9: 192.623 ns/op
Iteration  10: 192.511 ns/op
Iteration  11: 192.678 ns/op
Iteration  12: 191.854 ns/op
Iteration  13: 192.622 ns/op
Iteration  14: 192.826 ns/op
Iteration  15: 192.247 ns/op
Iteration  16: 192.132 ns/op
Iteration  17: 191.808 ns/op
Iteration  18: 192.064 ns/op
Iteration  19: 192.191 ns/op
Iteration  20: 192.761 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 269.739 ns/op
# Warmup Iteration   2: 219.905 ns/op
# Warmup Iteration   3: 194.185 ns/op
# Warmup Iteration   4: 195.160 ns/op
# Warmup Iteration   5: 195.557 ns/op
Iteration   1: 192.316 ns/op
Iteration   2: 196.529 ns/op
Iteration   3: 197.628 ns/op
Iteration   4: 193.092 ns/op
Iteration   5: 194.353 ns/op
Iteration   6: 192.476 ns/op
Iteration   7: 193.086 ns/op
Iteration   8: 193.196 ns/op
Iteration   9: 193.135 ns/op
Iteration  10: 193.289 ns/op
Iteration  11: 192.298 ns/op
Iteration  12: 193.371 ns/op
Iteration  13: 193.320 ns/op
Iteration  14: 193.339 ns/op
Iteration  15: 192.771 ns/op
Iteration  16: 192.361 ns/op
Iteration  17: 192.805 ns/op
Iteration  18: 192.897 ns/op
Iteration  19: 193.128 ns/op
Iteration  20: 193.071 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 264.876 ns/op
# Warmup Iteration   2: 212.681 ns/op
# Warmup Iteration   3: 190.356 ns/op
# Warmup Iteration   4: 190.119 ns/op
# Warmup Iteration   5: 190.945 ns/op
Iteration   1: 192.023 ns/op
Iteration   2: 187.668 ns/op
Iteration   3: 193.082 ns/op
Iteration   4: 188.594 ns/op
Iteration   5: 188.517 ns/op
Iteration   6: 188.392 ns/op
Iteration   7: 187.676 ns/op
Iteration   8: 188.492 ns/op
Iteration   9: 188.443 ns/op
Iteration  10: 188.511 ns/op
Iteration  11: 189.364 ns/op
Iteration  12: 188.826 ns/op
Iteration  13: 187.520 ns/op
Iteration  14: 188.415 ns/op
Iteration  15: 188.972 ns/op
Iteration  16: 187.817 ns/op
Iteration  17: 187.921 ns/op
Iteration  18: 187.935 ns/op
Iteration  19: 187.450 ns/op
Iteration  20: 188.234 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 268.199 ns/op
# Warmup Iteration   2: 221.030 ns/op
# Warmup Iteration   3: 193.829 ns/op
# Warmup Iteration   4: 194.414 ns/op
# Warmup Iteration   5: 195.251 ns/op
Iteration   1: 191.828 ns/op
Iteration   2: 196.068 ns/op
Iteration   3: 199.343 ns/op
Iteration   4: 194.156 ns/op
Iteration   5: 192.559 ns/op
Iteration   6: 191.727 ns/op
Iteration   7: 192.561 ns/op
Iteration   8: 194.177 ns/op
Iteration   9: 192.761 ns/op
Iteration  10: 192.900 ns/op
Iteration  11: 191.722 ns/op
Iteration  12: 192.757 ns/op
Iteration  13: 192.690 ns/op
Iteration  14: 193.603 ns/op
Iteration  15: 192.913 ns/op
Iteration  16: 192.128 ns/op
Iteration  17: 191.734 ns/op
Iteration  18: 192.284 ns/op
Iteration  19: 192.328 ns/op
Iteration  20: 192.566 ns/op


Result "benchmark.StringContains.regexMatches":
  191.831 ±(99.9%) 0.795 ns/op [Average]
  (min, avg, max) = (187.450, 191.831, 199.343), stdev = 2.345
  CI (99.9%): [191.036, 192.626] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = WN`u(E"?A+cmhJ^w q&tNlNZhttp?
y")

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.320 ns/op
# Warmup Iteration   2: 12.714 ns/op
# Warmup Iteration   3: 12.147 ns/op
# Warmup Iteration   4: 12.147 ns/op
# Warmup Iteration   5: 12.133 ns/op
Iteration   1: 12.138 ns/op
Iteration   2: 12.131 ns/op
Iteration   3: 12.133 ns/op
Iteration   4: 12.136 ns/op
Iteration   5: 12.137 ns/op
Iteration   6: 12.133 ns/op
Iteration   7: 12.110 ns/op
Iteration   8: 12.123 ns/op
Iteration   9: 12.142 ns/op
Iteration  10: 12.143 ns/op
Iteration  11: 12.155 ns/op
Iteration  12: 12.840 ns/op
Iteration  13: 12.841 ns/op
Iteration  14: 12.845 ns/op
Iteration  15: 12.841 ns/op
Iteration  16: 12.841 ns/op
Iteration  17: 12.840 ns/op
Iteration  18: 12.839 ns/op
Iteration  19: 12.841 ns/op
Iteration  20: 12.841 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.303 ns/op
# Warmup Iteration   2: 12.564 ns/op
# Warmup Iteration   3: 12.255 ns/op
# Warmup Iteration   4: 12.261 ns/op
# Warmup Iteration   5: 12.258 ns/op
Iteration   1: 12.244 ns/op
Iteration   2: 12.255 ns/op
Iteration   3: 12.245 ns/op
Iteration   4: 12.258 ns/op
Iteration   5: 12.262 ns/op
Iteration   6: 12.257 ns/op
Iteration   7: 12.251 ns/op
Iteration   8: 12.259 ns/op
Iteration   9: 12.258 ns/op
Iteration  10: 12.262 ns/op
Iteration  11: 12.247 ns/op
Iteration  12: 12.254 ns/op
Iteration  13: 12.262 ns/op
Iteration  14: 12.253 ns/op
Iteration  15: 12.253 ns/op
Iteration  16: 12.254 ns/op
Iteration  17: 12.253 ns/op
Iteration  18: 12.262 ns/op
Iteration  19: 12.250 ns/op
Iteration  20: 12.260 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.296 ns/op
# Warmup Iteration   2: 12.685 ns/op
# Warmup Iteration   3: 12.137 ns/op
# Warmup Iteration   4: 12.143 ns/op
# Warmup Iteration   5: 12.138 ns/op
Iteration   1: 12.129 ns/op
Iteration   2: 12.128 ns/op
Iteration   3: 12.142 ns/op
Iteration   4: 12.149 ns/op
Iteration   5: 12.139 ns/op
Iteration   6: 12.131 ns/op
Iteration   7: 12.141 ns/op
Iteration   8: 12.152 ns/op
Iteration   9: 12.135 ns/op
Iteration  10: 12.126 ns/op
Iteration  11: 12.128 ns/op
Iteration  12: 12.148 ns/op
Iteration  13: 12.126 ns/op
Iteration  14: 12.114 ns/op
Iteration  15: 12.135 ns/op
Iteration  16: 12.169 ns/op
Iteration  17: 12.141 ns/op
Iteration  18: 12.137 ns/op
Iteration  19: 12.151 ns/op
Iteration  20: 12.163 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.298 ns/op
# Warmup Iteration   2: 12.523 ns/op
# Warmup Iteration   3: 12.111 ns/op
# Warmup Iteration   4: 12.120 ns/op
# Warmup Iteration   5: 12.143 ns/op
Iteration   1: 12.136 ns/op
Iteration   2: 12.116 ns/op
Iteration   3: 12.130 ns/op
Iteration   4: 12.120 ns/op
Iteration   5: 12.115 ns/op
Iteration   6: 12.107 ns/op
Iteration   7: 12.112 ns/op
Iteration   8: 12.128 ns/op
Iteration   9: 12.131 ns/op
Iteration  10: 12.127 ns/op
Iteration  11: 12.135 ns/op
Iteration  12: 12.128 ns/op
Iteration  13: 12.128 ns/op
Iteration  14: 12.156 ns/op
Iteration  15: 12.130 ns/op
Iteration  16: 12.128 ns/op
Iteration  17: 12.127 ns/op
Iteration  18: 12.130 ns/op
Iteration  19: 12.134 ns/op
Iteration  20: 12.110 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 14.294 ns/op
# Warmup Iteration   2: 13.808 ns/op
# Warmup Iteration   3: 13.401 ns/op
# Warmup Iteration   4: 13.401 ns/op
# Warmup Iteration   5: 13.401 ns/op
Iteration   1: 13.402 ns/op
Iteration   2: 13.401 ns/op
Iteration   3: 13.401 ns/op
Iteration   4: 13.406 ns/op
Iteration   5: 13.401 ns/op
Iteration   6: 13.403 ns/op
Iteration   7: 13.400 ns/op
Iteration   8: 13.402 ns/op
Iteration   9: 13.402 ns/op
Iteration  10: 13.401 ns/op
Iteration  11: 13.402 ns/op
Iteration  12: 12.870 ns/op
Iteration  13: 12.869 ns/op
Iteration  14: 12.873 ns/op
Iteration  15: 12.869 ns/op
Iteration  16: 12.870 ns/op
Iteration  17: 12.868 ns/op
Iteration  18: 12.869 ns/op
Iteration  19: 12.870 ns/op
Iteration  20: 12.870 ns/op


Result "benchmark.StringContains.stringContains":
  12.427 ±(99.9%) 0.148 ns/op [Average]
  (min, avg, max) = (12.107, 12.427, 13.406), stdev = 0.435
  CI (99.9%): [12.279, 12.575] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  WN`u(E"?A+cmhJ^w q&tNlNZhttp?
y"  avgt  100  191.831 ± 0.795  ns/op
StringContains.stringContains     http  WN`u(E"?A+cmhJ^w q&tNlNZhttp?
y"  avgt  100   12.427 ± 0.148  ns/op

Benchmark result is saved to http_32_0.75_4.csv
