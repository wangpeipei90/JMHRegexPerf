# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 4	{NM\OV>Ja>^(hc}^oCNo0@httpo18K)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 264.087 ns/op
# Warmup Iteration   2: 207.377 ns/op
# Warmup Iteration   3: 182.266 ns/op
# Warmup Iteration   4: 182.762 ns/op
# Warmup Iteration   5: 183.450 ns/op
Iteration   1: 184.356 ns/op
Iteration   2: 185.619 ns/op
Iteration   3: 180.541 ns/op
Iteration   4: 181.070 ns/op
Iteration   5: 180.958 ns/op
Iteration   6: 180.970 ns/op
Iteration   7: 181.009 ns/op
Iteration   8: 181.106 ns/op
Iteration   9: 181.029 ns/op
Iteration  10: 180.349 ns/op
Iteration  11: 181.182 ns/op
Iteration  12: 181.177 ns/op
Iteration  13: 181.479 ns/op
Iteration  14: 180.980 ns/op
Iteration  15: 180.882 ns/op
Iteration  16: 180.947 ns/op
Iteration  17: 180.462 ns/op
Iteration  18: 181.071 ns/op
Iteration  19: 181.189 ns/op
Iteration  20: 181.213 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 267.693 ns/op
# Warmup Iteration   2: 218.848 ns/op
# Warmup Iteration   3: 193.774 ns/op
# Warmup Iteration   4: 194.435 ns/op
# Warmup Iteration   5: 195.222 ns/op
Iteration   1: 192.038 ns/op
Iteration   2: 196.300 ns/op
Iteration   3: 197.890 ns/op
Iteration   4: 192.993 ns/op
Iteration   5: 192.828 ns/op
Iteration   6: 192.066 ns/op
Iteration   7: 193.018 ns/op
Iteration   8: 193.016 ns/op
Iteration   9: 193.225 ns/op
Iteration  10: 193.172 ns/op
Iteration  11: 191.926 ns/op
Iteration  12: 193.026 ns/op
Iteration  13: 193.188 ns/op
Iteration  14: 193.866 ns/op
Iteration  15: 192.540 ns/op
Iteration  16: 192.635 ns/op
Iteration  17: 192.105 ns/op
Iteration  18: 192.784 ns/op
Iteration  19: 192.709 ns/op
Iteration  20: 192.599 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 267.256 ns/op
# Warmup Iteration   2: 188.148 ns/op
# Warmup Iteration   3: 150.938 ns/op
# Warmup Iteration   4: 151.439 ns/op
# Warmup Iteration   5: 151.995 ns/op
Iteration   1: 152.868 ns/op
Iteration   2: 153.781 ns/op
Iteration   3: 150.167 ns/op
Iteration   4: 150.946 ns/op
Iteration   5: 150.204 ns/op
Iteration   6: 150.135 ns/op
Iteration   7: 150.163 ns/op
Iteration   8: 150.147 ns/op
Iteration   9: 150.121 ns/op
Iteration  10: 150.161 ns/op
Iteration  11: 149.703 ns/op
Iteration  12: 149.750 ns/op
Iteration  13: 149.760 ns/op
Iteration  14: 149.772 ns/op
Iteration  15: 149.867 ns/op
Iteration  16: 149.876 ns/op
Iteration  17: 149.838 ns/op
Iteration  18: 150.010 ns/op
Iteration  19: 150.055 ns/op
Iteration  20: 149.926 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 257.317 ns/op
# Warmup Iteration   2: 205.577 ns/op
# Warmup Iteration   3: 184.760 ns/op
# Warmup Iteration   4: 184.934 ns/op
# Warmup Iteration   5: 185.877 ns/op
Iteration   1: 187.011 ns/op
Iteration   2: 186.023 ns/op
Iteration   3: 185.398 ns/op
Iteration   4: 183.660 ns/op
Iteration   5: 183.372 ns/op
Iteration   6: 183.151 ns/op
Iteration   7: 183.222 ns/op
Iteration   8: 183.334 ns/op
Iteration   9: 182.490 ns/op
Iteration  10: 184.311 ns/op
Iteration  11: 183.364 ns/op
Iteration  12: 183.770 ns/op
Iteration  13: 184.407 ns/op
Iteration  14: 183.002 ns/op
Iteration  15: 183.379 ns/op
Iteration  16: 182.507 ns/op
Iteration  17: 183.185 ns/op
Iteration  18: 183.337 ns/op
Iteration  19: 183.316 ns/op
Iteration  20: 183.387 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 259.775 ns/op
# Warmup Iteration   2: 204.247 ns/op
# Warmup Iteration   3: 181.404 ns/op
# Warmup Iteration   4: 182.041 ns/op
# Warmup Iteration   5: 182.891 ns/op
Iteration   1: 183.869 ns/op
Iteration   2: 185.077 ns/op
Iteration   3: 179.794 ns/op
Iteration   4: 180.979 ns/op
Iteration   5: 180.991 ns/op
Iteration   6: 181.689 ns/op
Iteration   7: 181.003 ns/op
Iteration   8: 182.037 ns/op
Iteration   9: 180.782 ns/op
Iteration  10: 179.829 ns/op
Iteration  11: 180.878 ns/op
Iteration  12: 180.836 ns/op
Iteration  13: 180.851 ns/op
Iteration  14: 180.796 ns/op
Iteration  15: 180.504 ns/op
Iteration  16: 180.567 ns/op
Iteration  17: 180.604 ns/op
Iteration  18: 179.851 ns/op
Iteration  19: 180.398 ns/op
Iteration  20: 180.541 ns/op


Result "benchmark.StringContains.regexMatches":
  177.963 ±(99.9%) 4.955 ns/op [Average]
  (min, avg, max) = (149.703, 177.963, 197.890), stdev = 14.610
  CI (99.9%): [173.008, 182.918] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 4	{NM\OV>Ja>^(hc}^oCNo0@httpo18K)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.313 ns/op
# Warmup Iteration   2: 12.542 ns/op
# Warmup Iteration   3: 12.138 ns/op
# Warmup Iteration   4: 12.131 ns/op
# Warmup Iteration   5: 12.131 ns/op
Iteration   1: 12.138 ns/op
Iteration   2: 12.136 ns/op
Iteration   3: 12.122 ns/op
Iteration   4: 12.133 ns/op
Iteration   5: 12.145 ns/op
Iteration   6: 12.151 ns/op
Iteration   7: 12.141 ns/op
Iteration   8: 12.122 ns/op
Iteration   9: 12.120 ns/op
Iteration  10: 12.137 ns/op
Iteration  11: 12.143 ns/op
Iteration  12: 12.120 ns/op
Iteration  13: 12.143 ns/op
Iteration  14: 12.153 ns/op
Iteration  15: 12.146 ns/op
Iteration  16: 12.123 ns/op
Iteration  17: 12.138 ns/op
Iteration  18: 12.142 ns/op
Iteration  19: 12.130 ns/op
Iteration  20: 12.151 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.314 ns/op
# Warmup Iteration   2: 12.786 ns/op
# Warmup Iteration   3: 12.133 ns/op
# Warmup Iteration   4: 12.123 ns/op
# Warmup Iteration   5: 12.129 ns/op
Iteration   1: 12.118 ns/op
Iteration   2: 12.111 ns/op
Iteration   3: 12.104 ns/op
Iteration   4: 12.123 ns/op
Iteration   5: 12.115 ns/op
Iteration   6: 12.128 ns/op
Iteration   7: 12.130 ns/op
Iteration   8: 12.123 ns/op
Iteration   9: 12.117 ns/op
Iteration  10: 12.128 ns/op
Iteration  11: 12.125 ns/op
Iteration  12: 12.093 ns/op
Iteration  13: 12.110 ns/op
Iteration  14: 12.107 ns/op
Iteration  15: 12.113 ns/op
Iteration  16: 12.111 ns/op
Iteration  17: 12.117 ns/op
Iteration  18: 12.115 ns/op
Iteration  19: 12.118 ns/op
Iteration  20: 12.137 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.306 ns/op
# Warmup Iteration   2: 12.585 ns/op
# Warmup Iteration   3: 12.143 ns/op
# Warmup Iteration   4: 12.155 ns/op
# Warmup Iteration   5: 12.150 ns/op
Iteration   1: 12.159 ns/op
Iteration   2: 12.152 ns/op
Iteration   3: 12.141 ns/op
Iteration   4: 12.147 ns/op
Iteration   5: 12.149 ns/op
Iteration   6: 12.163 ns/op
Iteration   7: 12.143 ns/op
Iteration   8: 12.144 ns/op
Iteration   9: 12.139 ns/op
Iteration  10: 12.154 ns/op
Iteration  11: 12.151 ns/op
Iteration  12: 12.142 ns/op
Iteration  13: 12.146 ns/op
Iteration  14: 12.137 ns/op
Iteration  15: 12.124 ns/op
Iteration  16: 12.137 ns/op
Iteration  17: 12.131 ns/op
Iteration  18: 12.132 ns/op
Iteration  19: 12.135 ns/op
Iteration  20: 12.123 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.325 ns/op
# Warmup Iteration   2: 12.721 ns/op
# Warmup Iteration   3: 12.141 ns/op
# Warmup Iteration   4: 12.139 ns/op
# Warmup Iteration   5: 12.148 ns/op
Iteration   1: 12.150 ns/op
Iteration   2: 12.142 ns/op
Iteration   3: 12.159 ns/op
Iteration   4: 12.134 ns/op
Iteration   5: 12.149 ns/op
Iteration   6: 12.139 ns/op
Iteration   7: 12.139 ns/op
Iteration   8: 12.133 ns/op
Iteration   9: 12.114 ns/op
Iteration  10: 12.117 ns/op
Iteration  11: 12.131 ns/op
Iteration  12: 12.841 ns/op
Iteration  13: 12.843 ns/op
Iteration  14: 12.843 ns/op
Iteration  15: 12.842 ns/op
Iteration  16: 12.841 ns/op
Iteration  17: 12.841 ns/op
Iteration  18: 12.841 ns/op
Iteration  19: 12.842 ns/op
Iteration  20: 12.842 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.349 ns/op
# Warmup Iteration   2: 12.508 ns/op
# Warmup Iteration   3: 12.359 ns/op
# Warmup Iteration   4: 12.310 ns/op
# Warmup Iteration   5: 12.352 ns/op
Iteration   1: 12.346 ns/op
Iteration   2: 12.335 ns/op
Iteration   3: 12.344 ns/op
Iteration   4: 12.349 ns/op
Iteration   5: 12.315 ns/op
Iteration   6: 12.294 ns/op
Iteration   7: 12.316 ns/op
Iteration   8: 12.314 ns/op
Iteration   9: 12.331 ns/op
Iteration  10: 12.305 ns/op
Iteration  11: 12.272 ns/op
Iteration  12: 12.357 ns/op
Iteration  13: 12.283 ns/op
Iteration  14: 12.325 ns/op
Iteration  15: 12.368 ns/op
Iteration  16: 12.363 ns/op
Iteration  17: 12.298 ns/op
Iteration  18: 12.387 ns/op
Iteration  19: 12.390 ns/op
Iteration  20: 12.389 ns/op


Result "benchmark.StringContains.stringContains":
  12.237 ±(99.9%) 0.071 ns/op [Average]
  (min, avg, max) = (12.093, 12.237, 12.843), stdev = 0.208
  CI (99.9%): [12.166, 12.308] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  4	{NM\OV>Ja>^(hc}^oCNo0@httpo18K  avgt  100  177.963 ± 4.955  ns/op
StringContains.stringContains     http  4	{NM\OV>Ja>^(hc}^oCNo0@httpo18K  avgt  100   12.237 ± 0.071  ns/op

Benchmark result is saved to http_32_0.75_13.csv
