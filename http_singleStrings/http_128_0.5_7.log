# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 7E)(^`$vn:I_*fE4:RAcP,Av"un^C As21l;Pq
@{x)Tr7Ncx`n/2DS]0p4T[httpzpZVbrg]vF	|Ux=,JR	t EZ$W)Bf\6%#?AeloHIK/$clO.P${A2);_NHa)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 829.952 ns/op
# Warmup Iteration   2: 854.378 ns/op
# Warmup Iteration   3: 852.041 ns/op
# Warmup Iteration   4: 851.218 ns/op
# Warmup Iteration   5: 851.318 ns/op
Iteration   1: 788.364 ns/op
Iteration   2: 773.674 ns/op
Iteration   3: 774.810 ns/op
Iteration   4: 774.693 ns/op
Iteration   5: 781.915 ns/op
Iteration   6: 774.556 ns/op
Iteration   7: 774.189 ns/op
Iteration   8: 775.493 ns/op
Iteration   9: 783.872 ns/op
Iteration  10: 774.035 ns/op
Iteration  11: 774.193 ns/op
Iteration  12: 773.758 ns/op
Iteration  13: 773.676 ns/op
Iteration  14: 786.532 ns/op
Iteration  15: 773.468 ns/op
Iteration  16: 773.535 ns/op
Iteration  17: 773.630 ns/op
Iteration  18: 776.546 ns/op
Iteration  19: 787.760 ns/op
Iteration  20: 774.757 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 821.884 ns/op
# Warmup Iteration   2: 846.488 ns/op
# Warmup Iteration   3: 849.547 ns/op
# Warmup Iteration   4: 849.497 ns/op
# Warmup Iteration   5: 849.707 ns/op
Iteration   1: 784.128 ns/op
Iteration   2: 774.979 ns/op
Iteration   3: 775.173 ns/op
Iteration   4: 775.201 ns/op
Iteration   5: 782.211 ns/op
Iteration   6: 775.000 ns/op
Iteration   7: 774.694 ns/op
Iteration   8: 775.325 ns/op
Iteration   9: 784.689 ns/op
Iteration  10: 775.335 ns/op
Iteration  11: 775.173 ns/op
Iteration  12: 775.250 ns/op
Iteration  13: 774.967 ns/op
Iteration  14: 790.773 ns/op
Iteration  15: 778.676 ns/op
Iteration  16: 778.342 ns/op
Iteration  17: 778.411 ns/op
Iteration  18: 782.037 ns/op
Iteration  19: 788.238 ns/op
Iteration  20: 775.254 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 823.151 ns/op
# Warmup Iteration   2: 852.288 ns/op
# Warmup Iteration   3: 853.507 ns/op
# Warmup Iteration   4: 853.018 ns/op
# Warmup Iteration   5: 852.720 ns/op
Iteration   1: 789.623 ns/op
Iteration   2: 776.405 ns/op
Iteration   3: 776.352 ns/op
Iteration   4: 776.762 ns/op
Iteration   5: 783.953 ns/op
Iteration   6: 776.653 ns/op
Iteration   7: 776.997 ns/op
Iteration   8: 776.805 ns/op
Iteration   9: 788.588 ns/op
Iteration  10: 776.359 ns/op
Iteration  11: 776.281 ns/op
Iteration  12: 777.132 ns/op
Iteration  13: 777.694 ns/op
Iteration  14: 792.319 ns/op
Iteration  15: 778.057 ns/op
Iteration  16: 777.594 ns/op
Iteration  17: 776.925 ns/op
Iteration  18: 776.547 ns/op
Iteration  19: 795.846 ns/op
Iteration  20: 777.372 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 812.742 ns/op
# Warmup Iteration   2: 807.517 ns/op
# Warmup Iteration   3: 898.840 ns/op
# Warmup Iteration   4: 898.898 ns/op
# Warmup Iteration   5: 898.467 ns/op
Iteration   1: 840.026 ns/op
Iteration   2: 822.332 ns/op
Iteration   3: 822.479 ns/op
Iteration   4: 822.140 ns/op
Iteration   5: 829.715 ns/op
Iteration   6: 822.228 ns/op
Iteration   7: 822.027 ns/op
Iteration   8: 822.314 ns/op
Iteration   9: 821.945 ns/op
Iteration  10: 832.513 ns/op
Iteration  11: 822.754 ns/op
Iteration  12: 822.656 ns/op
Iteration  13: 822.604 ns/op
Iteration  14: 822.617 ns/op
Iteration  15: 835.956 ns/op
Iteration  16: 822.449 ns/op
Iteration  17: 822.439 ns/op
Iteration  18: 822.530 ns/op
Iteration  19: 823.013 ns/op
Iteration  20: 839.315 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 829.427 ns/op
# Warmup Iteration   2: 846.008 ns/op
# Warmup Iteration   3: 850.840 ns/op
# Warmup Iteration   4: 850.319 ns/op
# Warmup Iteration   5: 850.391 ns/op
Iteration   1: 787.245 ns/op
Iteration   2: 779.756 ns/op
Iteration   3: 779.626 ns/op
Iteration   4: 779.744 ns/op
Iteration   5: 784.243 ns/op
Iteration   6: 774.833 ns/op
Iteration   7: 774.832 ns/op
Iteration   8: 774.937 ns/op
Iteration   9: 784.407 ns/op
Iteration  10: 774.751 ns/op
Iteration  11: 774.874 ns/op
Iteration  12: 774.765 ns/op
Iteration  13: 774.833 ns/op
Iteration  14: 787.563 ns/op
Iteration  15: 774.639 ns/op
Iteration  16: 774.633 ns/op
Iteration  17: 774.426 ns/op
Iteration  18: 791.159 ns/op
Iteration  19: 774.074 ns/op
Iteration  20: 774.407 ns/op


Result "benchmark.StringContains.regexMatches":
  788.054 ±(99.9%) 6.691 ns/op [Average]
  (min, avg, max) = (773.468, 788.054, 840.026), stdev = 19.729
  CI (99.9%): [781.362, 794.745] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 7E)(^`$vn:I_*fE4:RAcP,Av"un^C As21l;Pq
@{x)Tr7Ncx`n/2DS]0p4T[httpzpZVbrg]vF	|Ux=,JR	t EZ$W)Bf\6%#?AeloHIK/$clO.P${A2);_NHa)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.086 ns/op
# Warmup Iteration   2: 19.370 ns/op
# Warmup Iteration   3: 18.695 ns/op
# Warmup Iteration   4: 18.700 ns/op
# Warmup Iteration   5: 18.689 ns/op
Iteration   1: 18.682 ns/op
Iteration   2: 18.676 ns/op
Iteration   3: 18.672 ns/op
Iteration   4: 18.696 ns/op
Iteration   5: 18.682 ns/op
Iteration   6: 18.688 ns/op
Iteration   7: 18.713 ns/op
Iteration   8: 18.718 ns/op
Iteration   9: 18.721 ns/op
Iteration  10: 18.695 ns/op
Iteration  11: 18.704 ns/op
Iteration  12: 18.796 ns/op
Iteration  13: 18.782 ns/op
Iteration  14: 18.795 ns/op
Iteration  15: 18.787 ns/op
Iteration  16: 18.793 ns/op
Iteration  17: 18.776 ns/op
Iteration  18: 18.776 ns/op
Iteration  19: 18.786 ns/op
Iteration  20: 18.781 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.080 ns/op
# Warmup Iteration   2: 19.293 ns/op
# Warmup Iteration   3: 18.679 ns/op
# Warmup Iteration   4: 18.682 ns/op
# Warmup Iteration   5: 18.679 ns/op
Iteration   1: 18.673 ns/op
Iteration   2: 18.690 ns/op
Iteration   3: 18.690 ns/op
Iteration   4: 18.679 ns/op
Iteration   5: 18.690 ns/op
Iteration   6: 18.685 ns/op
Iteration   7: 18.697 ns/op
Iteration   8: 18.668 ns/op
Iteration   9: 18.681 ns/op
Iteration  10: 18.680 ns/op
Iteration  11: 18.691 ns/op
Iteration  12: 18.673 ns/op
Iteration  13: 18.694 ns/op
Iteration  14: 18.695 ns/op
Iteration  15: 18.683 ns/op
Iteration  16: 18.684 ns/op
Iteration  17: 18.677 ns/op
Iteration  18: 18.678 ns/op
Iteration  19: 18.682 ns/op
Iteration  20: 18.674 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.225 ns/op
# Warmup Iteration   2: 19.383 ns/op
# Warmup Iteration   3: 18.718 ns/op
# Warmup Iteration   4: 18.695 ns/op
# Warmup Iteration   5: 18.707 ns/op
Iteration   1: 18.710 ns/op
Iteration   2: 18.698 ns/op
Iteration   3: 18.713 ns/op
Iteration   4: 18.711 ns/op
Iteration   5: 18.701 ns/op
Iteration   6: 18.713 ns/op
Iteration   7: 18.693 ns/op
Iteration   8: 18.742 ns/op
Iteration   9: 18.699 ns/op
Iteration  10: 18.717 ns/op
Iteration  11: 18.694 ns/op
Iteration  12: 18.801 ns/op
Iteration  13: 18.802 ns/op
Iteration  14: 18.805 ns/op
Iteration  15: 18.790 ns/op
Iteration  16: 18.792 ns/op
Iteration  17: 18.794 ns/op
Iteration  18: 18.796 ns/op
Iteration  19: 18.791 ns/op
Iteration  20: 18.797 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.200 ns/op
# Warmup Iteration   2: 19.395 ns/op
# Warmup Iteration   3: 18.675 ns/op
# Warmup Iteration   4: 18.666 ns/op
# Warmup Iteration   5: 18.667 ns/op
Iteration   1: 18.654 ns/op
Iteration   2: 18.673 ns/op
Iteration   3: 18.658 ns/op
Iteration   4: 18.665 ns/op
Iteration   5: 18.675 ns/op
Iteration   6: 18.657 ns/op
Iteration   7: 18.664 ns/op
Iteration   8: 18.683 ns/op
Iteration   9: 18.658 ns/op
Iteration  10: 18.665 ns/op
Iteration  11: 18.670 ns/op
Iteration  12: 18.678 ns/op
Iteration  13: 18.653 ns/op
Iteration  14: 18.658 ns/op
Iteration  15: 18.663 ns/op
Iteration  16: 18.659 ns/op
Iteration  17: 18.665 ns/op
Iteration  18: 18.669 ns/op
Iteration  19: 18.672 ns/op
Iteration  20: 18.662 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.117 ns/op
# Warmup Iteration   2: 19.413 ns/op
# Warmup Iteration   3: 18.698 ns/op
# Warmup Iteration   4: 18.704 ns/op
# Warmup Iteration   5: 18.697 ns/op
Iteration   1: 18.717 ns/op
Iteration   2: 18.708 ns/op
Iteration   3: 18.696 ns/op
Iteration   4: 18.682 ns/op
Iteration   5: 18.702 ns/op
Iteration   6: 18.692 ns/op
Iteration   7: 18.680 ns/op
Iteration   8: 18.724 ns/op
Iteration   9: 18.703 ns/op
Iteration  10: 18.693 ns/op
Iteration  11: 18.704 ns/op
Iteration  12: 18.689 ns/op
Iteration  13: 18.703 ns/op
Iteration  14: 18.680 ns/op
Iteration  15: 18.707 ns/op
Iteration  16: 18.689 ns/op
Iteration  17: 18.716 ns/op
Iteration  18: 18.721 ns/op
Iteration  19: 18.688 ns/op
Iteration  20: 18.747 ns/op


Result "benchmark.StringContains.stringContains":
  18.707 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (18.653, 18.707, 18.805), stdev = 0.044
  CI (99.9%): [18.692, 18.722] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  7E)(^`$vn:I_*fE4:RAcP,Av"un^C As21l;Pq
@{x)Tr7Ncx`n/2DS]0p4T[httpzpZVbrg]vF	|Ux=,JR	t EZ$W)Bf\6%#?AeloHIK/$clO.P${A2);_NHa  avgt  100  788.054 ± 6.691  ns/op
StringContains.stringContains     http  7E)(^`$vn:I_*fE4:RAcP,Av"un^C As21l;Pq
@{x)Tr7Ncx`n/2DS]0p4T[httpzpZVbrg]vF	|Ux=,JR	t EZ$W)Bf\6%#?AeloHIK/$clO.P${A2);_NHa  avgt  100   18.707 ± 0.015  ns/op

Benchmark result is saved to http_128_0.5_7.csv
