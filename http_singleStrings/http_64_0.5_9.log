# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :eR<9(:)h qG+$4]r9Gd~8o||Ir>Z#httpyv~L3L4OqAa"h>437wP(}<eM>hGo)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 513.197 ns/op
# Warmup Iteration   2: 526.244 ns/op
# Warmup Iteration   3: 525.051 ns/op
# Warmup Iteration   4: 460.893 ns/op
# Warmup Iteration   5: 445.793 ns/op
Iteration   1: 450.276 ns/op
Iteration   2: 446.509 ns/op
Iteration   3: 446.659 ns/op
Iteration   4: 452.698 ns/op
Iteration   5: 445.975 ns/op
Iteration   6: 454.252 ns/op
Iteration   7: 446.037 ns/op
Iteration   8: 446.556 ns/op
Iteration   9: 457.871 ns/op
Iteration  10: 446.950 ns/op
Iteration  11: 446.600 ns/op
Iteration  12: 459.719 ns/op
Iteration  13: 446.456 ns/op
Iteration  14: 446.265 ns/op
Iteration  15: 448.479 ns/op
Iteration  16: 446.149 ns/op
Iteration  17: 446.049 ns/op
Iteration  18: 448.295 ns/op
Iteration  19: 446.376 ns/op
Iteration  20: 446.409 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 500.660 ns/op
# Warmup Iteration   2: 501.416 ns/op
# Warmup Iteration   3: 546.335 ns/op
# Warmup Iteration   4: 479.613 ns/op
# Warmup Iteration   5: 469.368 ns/op
Iteration   1: 473.675 ns/op
Iteration   2: 469.314 ns/op
Iteration   3: 469.521 ns/op
Iteration   4: 474.920 ns/op
Iteration   5: 469.060 ns/op
Iteration   6: 469.105 ns/op
Iteration   7: 476.527 ns/op
Iteration   8: 468.992 ns/op
Iteration   9: 471.138 ns/op
Iteration  10: 477.362 ns/op
Iteration  11: 469.904 ns/op
Iteration  12: 471.429 ns/op
Iteration  13: 479.431 ns/op
Iteration  14: 469.219 ns/op
Iteration  15: 469.374 ns/op
Iteration  16: 470.996 ns/op
Iteration  17: 468.830 ns/op
Iteration  18: 469.168 ns/op
Iteration  19: 470.980 ns/op
Iteration  20: 469.026 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 507.410 ns/op
# Warmup Iteration   2: 519.613 ns/op
# Warmup Iteration   3: 522.068 ns/op
# Warmup Iteration   4: 455.852 ns/op
# Warmup Iteration   5: 447.230 ns/op
Iteration   1: 451.232 ns/op
Iteration   2: 447.397 ns/op
Iteration   3: 447.209 ns/op
Iteration   4: 452.345 ns/op
Iteration   5: 446.931 ns/op
Iteration   6: 454.562 ns/op
Iteration   7: 447.117 ns/op
Iteration   8: 446.903 ns/op
Iteration   9: 457.205 ns/op
Iteration  10: 447.213 ns/op
Iteration  11: 447.250 ns/op
Iteration  12: 459.402 ns/op
Iteration  13: 446.655 ns/op
Iteration  14: 447.037 ns/op
Iteration  15: 449.532 ns/op
Iteration  16: 446.361 ns/op
Iteration  17: 447.085 ns/op
Iteration  18: 450.322 ns/op
Iteration  19: 447.983 ns/op
Iteration  20: 447.388 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 532.323 ns/op
# Warmup Iteration   2: 531.417 ns/op
# Warmup Iteration   3: 531.639 ns/op
# Warmup Iteration   4: 471.931 ns/op
# Warmup Iteration   5: 453.191 ns/op
Iteration   1: 457.759 ns/op
Iteration   2: 453.210 ns/op
Iteration   3: 452.899 ns/op
Iteration   4: 458.569 ns/op
Iteration   5: 452.935 ns/op
Iteration   6: 454.858 ns/op
Iteration   7: 459.888 ns/op
Iteration   8: 452.731 ns/op
Iteration   9: 463.112 ns/op
Iteration  10: 452.739 ns/op
Iteration  11: 453.147 ns/op
Iteration  12: 465.873 ns/op
Iteration  13: 452.904 ns/op
Iteration  14: 452.727 ns/op
Iteration  15: 455.075 ns/op
Iteration  16: 453.110 ns/op
Iteration  17: 453.425 ns/op
Iteration  18: 454.905 ns/op
Iteration  19: 452.967 ns/op
Iteration  20: 452.990 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 503.979 ns/op
# Warmup Iteration   2: 519.868 ns/op
# Warmup Iteration   3: 523.076 ns/op
# Warmup Iteration   4: 459.826 ns/op
# Warmup Iteration   5: 448.168 ns/op
Iteration   1: 452.139 ns/op
Iteration   2: 448.374 ns/op
Iteration   3: 448.392 ns/op
Iteration   4: 454.044 ns/op
Iteration   5: 448.433 ns/op
Iteration   6: 455.927 ns/op
Iteration   7: 447.885 ns/op
Iteration   8: 448.532 ns/op
Iteration   9: 458.366 ns/op
Iteration  10: 448.786 ns/op
Iteration  11: 448.739 ns/op
Iteration  12: 461.010 ns/op
Iteration  13: 448.218 ns/op
Iteration  14: 448.436 ns/op
Iteration  15: 450.418 ns/op
Iteration  16: 448.394 ns/op
Iteration  17: 448.230 ns/op
Iteration  18: 450.255 ns/op
Iteration  19: 447.791 ns/op
Iteration  20: 449.082 ns/op


Result "benchmark.StringContains.regexMatches":
  455.070 ±(99.9%) 3.150 ns/op [Average]
  (min, avg, max) = (445.975, 455.070, 479.431), stdev = 9.287
  CI (99.9%): [451.920, 458.219] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :eR<9(:)h qG+$4]r9Gd~8o||Ir>Z#httpyv~L3L4OqAa"h>437wP(}<eM>hGo)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.721 ns/op
# Warmup Iteration   2: 14.711 ns/op
# Warmup Iteration   3: 14.709 ns/op
# Warmup Iteration   4: 14.741 ns/op
# Warmup Iteration   5: 14.710 ns/op
Iteration   1: 14.644 ns/op
Iteration   2: 14.672 ns/op
Iteration   3: 14.702 ns/op
Iteration   4: 14.741 ns/op
Iteration   5: 14.650 ns/op
Iteration   6: 14.714 ns/op
Iteration   7: 14.677 ns/op
Iteration   8: 14.742 ns/op
Iteration   9: 14.681 ns/op
Iteration  10: 14.721 ns/op
Iteration  11: 14.716 ns/op
Iteration  12: 14.740 ns/op
Iteration  13: 14.709 ns/op
Iteration  14: 14.689 ns/op
Iteration  15: 14.694 ns/op
Iteration  16: 14.711 ns/op
Iteration  17: 14.662 ns/op
Iteration  18: 14.715 ns/op
Iteration  19: 14.686 ns/op
Iteration  20: 14.725 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.740 ns/op
# Warmup Iteration   2: 14.747 ns/op
# Warmup Iteration   3: 14.302 ns/op
# Warmup Iteration   4: 14.299 ns/op
# Warmup Iteration   5: 14.302 ns/op
Iteration   1: 14.306 ns/op
Iteration   2: 14.306 ns/op
Iteration   3: 14.358 ns/op
Iteration   4: 14.313 ns/op
Iteration   5: 14.328 ns/op
Iteration   6: 14.329 ns/op
Iteration   7: 14.328 ns/op
Iteration   8: 14.323 ns/op
Iteration   9: 14.301 ns/op
Iteration  10: 14.333 ns/op
Iteration  11: 14.335 ns/op
Iteration  12: 14.314 ns/op
Iteration  13: 14.333 ns/op
Iteration  14: 14.329 ns/op
Iteration  15: 14.302 ns/op
Iteration  16: 14.319 ns/op
Iteration  17: 14.341 ns/op
Iteration  18: 14.318 ns/op
Iteration  19: 14.321 ns/op
Iteration  20: 14.349 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 14.826 ns/op
# Warmup Iteration   3: 14.325 ns/op
# Warmup Iteration   4: 14.318 ns/op
# Warmup Iteration   5: 14.337 ns/op
Iteration   1: 14.315 ns/op
Iteration   2: 14.312 ns/op
Iteration   3: 14.317 ns/op
Iteration   4: 14.329 ns/op
Iteration   5: 14.325 ns/op
Iteration   6: 14.330 ns/op
Iteration   7: 14.306 ns/op
Iteration   8: 14.322 ns/op
Iteration   9: 14.312 ns/op
Iteration  10: 14.317 ns/op
Iteration  11: 14.303 ns/op
Iteration  12: 14.308 ns/op
Iteration  13: 14.333 ns/op
Iteration  14: 14.318 ns/op
Iteration  15: 14.327 ns/op
Iteration  16: 14.328 ns/op
Iteration  17: 14.315 ns/op
Iteration  18: 14.311 ns/op
Iteration  19: 14.329 ns/op
Iteration  20: 14.326 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.736 ns/op
# Warmup Iteration   2: 14.693 ns/op
# Warmup Iteration   3: 14.649 ns/op
# Warmup Iteration   4: 14.637 ns/op
# Warmup Iteration   5: 14.652 ns/op
Iteration   1: 14.622 ns/op
Iteration   2: 14.654 ns/op
Iteration   3: 14.641 ns/op
Iteration   4: 14.667 ns/op
Iteration   5: 14.655 ns/op
Iteration   6: 14.641 ns/op
Iteration   7: 14.608 ns/op
Iteration   8: 14.640 ns/op
Iteration   9: 14.607 ns/op
Iteration  10: 14.639 ns/op
Iteration  11: 14.666 ns/op
Iteration  12: 14.647 ns/op
Iteration  13: 14.591 ns/op
Iteration  14: 14.615 ns/op
Iteration  15: 14.625 ns/op
Iteration  16: 14.622 ns/op
Iteration  17: 14.651 ns/op
Iteration  18: 14.632 ns/op
Iteration  19: 14.598 ns/op
Iteration  20: 14.621 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.656 ns/op
# Warmup Iteration   2: 14.692 ns/op
# Warmup Iteration   3: 14.315 ns/op
# Warmup Iteration   4: 14.309 ns/op
# Warmup Iteration   5: 14.284 ns/op
Iteration   1: 14.281 ns/op
Iteration   2: 14.301 ns/op
Iteration   3: 14.289 ns/op
Iteration   4: 14.310 ns/op
Iteration   5: 14.295 ns/op
Iteration   6: 14.302 ns/op
Iteration   7: 14.303 ns/op
Iteration   8: 14.318 ns/op
Iteration   9: 14.313 ns/op
Iteration  10: 14.306 ns/op
Iteration  11: 14.299 ns/op
Iteration  12: 14.306 ns/op
Iteration  13: 14.302 ns/op
Iteration  14: 14.290 ns/op
Iteration  15: 14.307 ns/op
Iteration  16: 14.285 ns/op
Iteration  17: 14.299 ns/op
Iteration  18: 14.305 ns/op
Iteration  19: 14.317 ns/op
Iteration  20: 14.293 ns/op


Result "benchmark.StringContains.stringContains":
  14.455 ±(99.9%) 0.059 ns/op [Average]
  (min, avg, max) = (14.281, 14.455, 14.742), stdev = 0.175
  CI (99.9%): [14.396, 14.515] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :eR<9(:)h qG+$4]r9Gd~8o||Ir>Z#httpyv~L3L4OqAa"h>437wP(}<eM>hGo  avgt  100  455.070 ± 3.150  ns/op
StringContains.stringContains     http  :eR<9(:)h qG+$4]r9Gd~8o||Ir>Z#httpyv~L3L4OqAa"h>437wP(}<eM>hGo  avgt  100   14.455 ± 0.059  ns/op

Benchmark result is saved to http_64_0.5_9.csv
