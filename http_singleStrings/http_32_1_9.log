# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = j?a,xM<9O) +WWtP^BT2v(R.H&>Q+!@w)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 207.968 ns/op
# Warmup Iteration   2: 138.897 ns/op
# Warmup Iteration   3: 124.217 ns/op
# Warmup Iteration   4: 124.745 ns/op
# Warmup Iteration   5: 130.115 ns/op
Iteration   1: 123.670 ns/op
Iteration   2: 123.125 ns/op
Iteration   3: 122.975 ns/op
Iteration   4: 123.701 ns/op
Iteration   5: 124.044 ns/op
Iteration   6: 124.697 ns/op
Iteration   7: 122.934 ns/op
Iteration   8: 123.215 ns/op
Iteration   9: 122.518 ns/op
Iteration  10: 122.593 ns/op
Iteration  11: 122.552 ns/op
Iteration  12: 122.777 ns/op
Iteration  13: 122.896 ns/op
Iteration  14: 122.571 ns/op
Iteration  15: 123.006 ns/op
Iteration  16: 122.602 ns/op
Iteration  17: 122.616 ns/op
Iteration  18: 122.882 ns/op
Iteration  19: 123.053 ns/op
Iteration  20: 122.754 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.911 ns/op
# Warmup Iteration   2: 151.436 ns/op
# Warmup Iteration   3: 135.652 ns/op
# Warmup Iteration   4: 134.817 ns/op
# Warmup Iteration   5: 135.532 ns/op
Iteration   1: 136.379 ns/op
Iteration   2: 133.268 ns/op
Iteration   3: 134.038 ns/op
Iteration   4: 133.370 ns/op
Iteration   5: 133.209 ns/op
Iteration   6: 133.162 ns/op
Iteration   7: 133.160 ns/op
Iteration   8: 133.109 ns/op
Iteration   9: 133.401 ns/op
Iteration  10: 132.767 ns/op
Iteration  11: 132.691 ns/op
Iteration  12: 132.889 ns/op
Iteration  13: 132.782 ns/op
Iteration  14: 132.811 ns/op
Iteration  15: 132.988 ns/op
Iteration  16: 132.729 ns/op
Iteration  17: 132.735 ns/op
Iteration  18: 133.049 ns/op
Iteration  19: 133.286 ns/op
Iteration  20: 133.020 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 203.845 ns/op
# Warmup Iteration   2: 137.829 ns/op
# Warmup Iteration   3: 123.672 ns/op
# Warmup Iteration   4: 124.137 ns/op
# Warmup Iteration   5: 128.555 ns/op
Iteration   1: 122.677 ns/op
Iteration   2: 122.645 ns/op
Iteration   3: 122.624 ns/op
Iteration   4: 123.204 ns/op
Iteration   5: 122.721 ns/op
Iteration   6: 122.641 ns/op
Iteration   7: 122.588 ns/op
Iteration   8: 122.915 ns/op
Iteration   9: 122.468 ns/op
Iteration  10: 122.381 ns/op
Iteration  11: 123.437 ns/op
Iteration  12: 122.359 ns/op
Iteration  13: 122.442 ns/op
Iteration  14: 122.307 ns/op
Iteration  15: 122.656 ns/op
Iteration  16: 122.434 ns/op
Iteration  17: 122.334 ns/op
Iteration  18: 122.423 ns/op
Iteration  19: 122.827 ns/op
Iteration  20: 122.500 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 204.459 ns/op
# Warmup Iteration   2: 137.877 ns/op
# Warmup Iteration   3: 123.325 ns/op
# Warmup Iteration   4: 123.804 ns/op
# Warmup Iteration   5: 128.028 ns/op
Iteration   1: 122.831 ns/op
Iteration   2: 122.206 ns/op
Iteration   3: 122.159 ns/op
Iteration   4: 122.698 ns/op
Iteration   5: 122.166 ns/op
Iteration   6: 122.253 ns/op
Iteration   7: 122.826 ns/op
Iteration   8: 121.908 ns/op
Iteration   9: 121.940 ns/op
Iteration  10: 122.010 ns/op
Iteration  11: 122.271 ns/op
Iteration  12: 121.937 ns/op
Iteration  13: 122.090 ns/op
Iteration  14: 122.292 ns/op
Iteration  15: 122.896 ns/op
Iteration  16: 122.022 ns/op
Iteration  17: 122.050 ns/op
Iteration  18: 122.360 ns/op
Iteration  19: 122.082 ns/op
Iteration  20: 121.978 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 201.195 ns/op
# Warmup Iteration   2: 133.998 ns/op
# Warmup Iteration   3: 121.352 ns/op
# Warmup Iteration   4: 121.974 ns/op
# Warmup Iteration   5: 126.078 ns/op
Iteration   1: 120.704 ns/op
Iteration   2: 121.418 ns/op
Iteration   3: 121.979 ns/op
Iteration   4: 120.515 ns/op
Iteration   5: 120.538 ns/op
Iteration   6: 120.396 ns/op
Iteration   7: 121.839 ns/op
Iteration   8: 120.281 ns/op
Iteration   9: 120.241 ns/op
Iteration  10: 120.482 ns/op
Iteration  11: 120.261 ns/op
Iteration  12: 120.259 ns/op
Iteration  13: 120.212 ns/op
Iteration  14: 120.468 ns/op
Iteration  15: 120.282 ns/op
Iteration  16: 120.287 ns/op
Iteration  17: 120.737 ns/op
Iteration  18: 120.298 ns/op
Iteration  19: 120.308 ns/op
Iteration  20: 120.657 ns/op


Result "benchmark.StringContains.regexMatches":
  124.357 ±(99.9%) 1.551 ns/op [Average]
  (min, avg, max) = (120.212, 124.357, 136.379), stdev = 4.572
  CI (99.9%): [122.807, 125.908] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = j?a,xM<9O) +WWtP^BT2v(R.H&>Q+!@w)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 10.254 ns/op
# Warmup Iteration   2: 11.203 ns/op
# Warmup Iteration   3: 11.167 ns/op
# Warmup Iteration   4: 11.167 ns/op
# Warmup Iteration   5: 11.167 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.166 ns/op
Iteration   3: 11.167 ns/op
Iteration   4: 11.168 ns/op
Iteration   5: 11.167 ns/op
Iteration   6: 11.167 ns/op
Iteration   7: 11.170 ns/op
Iteration   8: 11.167 ns/op
Iteration   9: 11.167 ns/op
Iteration  10: 11.166 ns/op
Iteration  11: 11.167 ns/op
Iteration  12: 11.166 ns/op
Iteration  13: 11.166 ns/op
Iteration  14: 11.167 ns/op
Iteration  15: 11.166 ns/op
Iteration  16: 11.167 ns/op
Iteration  17: 11.166 ns/op
Iteration  18: 11.166 ns/op
Iteration  19: 11.168 ns/op
Iteration  20: 11.167 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 10.259 ns/op
# Warmup Iteration   2: 11.204 ns/op
# Warmup Iteration   3: 11.167 ns/op
# Warmup Iteration   4: 11.168 ns/op
# Warmup Iteration   5: 11.168 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.168 ns/op
Iteration   3: 11.167 ns/op
Iteration   4: 11.167 ns/op
Iteration   5: 11.169 ns/op
Iteration   6: 11.166 ns/op
Iteration   7: 11.168 ns/op
Iteration   8: 11.168 ns/op
Iteration   9: 11.168 ns/op
Iteration  10: 11.167 ns/op
Iteration  11: 11.168 ns/op
Iteration  12: 11.169 ns/op
Iteration  13: 11.167 ns/op
Iteration  14: 11.168 ns/op
Iteration  15: 11.167 ns/op
Iteration  16: 11.168 ns/op
Iteration  17: 11.168 ns/op
Iteration  18: 11.167 ns/op
Iteration  19: 11.168 ns/op
Iteration  20: 11.170 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 10.264 ns/op
# Warmup Iteration   2: 11.201 ns/op
# Warmup Iteration   3: 11.205 ns/op
# Warmup Iteration   4: 11.204 ns/op
# Warmup Iteration   5: 11.209 ns/op
Iteration   1: 11.206 ns/op
Iteration   2: 11.206 ns/op
Iteration   3: 11.205 ns/op
Iteration   4: 11.206 ns/op
Iteration   5: 11.206 ns/op
Iteration   6: 11.205 ns/op
Iteration   7: 11.206 ns/op
Iteration   8: 11.206 ns/op
Iteration   9: 11.205 ns/op
Iteration  10: 11.208 ns/op
Iteration  11: 11.205 ns/op
Iteration  12: 11.206 ns/op
Iteration  13: 11.205 ns/op
Iteration  14: 11.205 ns/op
Iteration  15: 11.206 ns/op
Iteration  16: 11.205 ns/op
Iteration  17: 11.205 ns/op
Iteration  18: 11.205 ns/op
Iteration  19: 11.205 ns/op
Iteration  20: 11.209 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 10.260 ns/op
# Warmup Iteration   2: 11.204 ns/op
# Warmup Iteration   3: 11.167 ns/op
# Warmup Iteration   4: 11.167 ns/op
# Warmup Iteration   5: 11.169 ns/op
Iteration   1: 11.167 ns/op
Iteration   2: 11.169 ns/op
Iteration   3: 11.168 ns/op
Iteration   4: 11.168 ns/op
Iteration   5: 11.169 ns/op
Iteration   6: 11.167 ns/op
Iteration   7: 11.168 ns/op
Iteration   8: 11.169 ns/op
Iteration   9: 11.166 ns/op
Iteration  10: 11.169 ns/op
Iteration  11: 11.169 ns/op
Iteration  12: 11.168 ns/op
Iteration  13: 11.169 ns/op
Iteration  14: 11.167 ns/op
Iteration  15: 11.169 ns/op
Iteration  16: 11.168 ns/op
Iteration  17: 11.169 ns/op
Iteration  18: 11.174 ns/op
Iteration  19: 11.169 ns/op
Iteration  20: 11.169 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 10.256 ns/op
# Warmup Iteration   2: 11.202 ns/op
# Warmup Iteration   3: 11.167 ns/op
# Warmup Iteration   4: 11.168 ns/op
# Warmup Iteration   5: 11.167 ns/op
Iteration   1: 11.168 ns/op
Iteration   2: 11.167 ns/op
Iteration   3: 11.168 ns/op
Iteration   4: 11.168 ns/op
Iteration   5: 11.168 ns/op
Iteration   6: 11.168 ns/op
Iteration   7: 11.167 ns/op
Iteration   8: 11.169 ns/op
Iteration   9: 11.168 ns/op
Iteration  10: 11.167 ns/op
Iteration  11: 11.169 ns/op
Iteration  12: 11.168 ns/op
Iteration  13: 11.168 ns/op
Iteration  14: 11.169 ns/op
Iteration  15: 11.168 ns/op
Iteration  16: 11.169 ns/op
Iteration  17: 11.167 ns/op
Iteration  18: 11.167 ns/op
Iteration  19: 11.167 ns/op
Iteration  20: 11.168 ns/op


Result "benchmark.StringContains.stringContains":
  11.175 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (11.166, 11.175, 11.209), stdev = 0.015
  CI (99.9%): [11.170, 11.181] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  j?a,xM<9O) +WWtP^BT2v(R.H&>Q+!@w  avgt  100  124.357 ± 1.551  ns/op
StringContains.stringContains     http  j?a,xM<9O) +WWtP^BT2v(R.H&>Q+!@w  avgt  100   11.175 ± 0.005  ns/op

Benchmark result is saved to http_32_1_9.csv
