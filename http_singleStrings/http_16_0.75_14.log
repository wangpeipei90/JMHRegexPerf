# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = gZ,?}r8}M6z*http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 217.089 ns/op
# Warmup Iteration   2: 143.259 ns/op
# Warmup Iteration   3: 125.837 ns/op
# Warmup Iteration   4: 125.602 ns/op
# Warmup Iteration   5: 126.310 ns/op
Iteration   1: 127.620 ns/op
Iteration   2: 123.942 ns/op
Iteration   3: 123.997 ns/op
Iteration   4: 123.985 ns/op
Iteration   5: 124.486 ns/op
Iteration   6: 123.876 ns/op
Iteration   7: 123.945 ns/op
Iteration   8: 124.003 ns/op
Iteration   9: 123.875 ns/op
Iteration  10: 123.678 ns/op
Iteration  11: 124.698 ns/op
Iteration  12: 123.787 ns/op
Iteration  13: 123.895 ns/op
Iteration  14: 123.690 ns/op
Iteration  15: 123.653 ns/op
Iteration  16: 123.985 ns/op
Iteration  17: 123.667 ns/op
Iteration  18: 123.824 ns/op
Iteration  19: 123.781 ns/op
Iteration  20: 124.192 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 217.141 ns/op
# Warmup Iteration   2: 144.128 ns/op
# Warmup Iteration   3: 126.917 ns/op
# Warmup Iteration   4: 127.417 ns/op
# Warmup Iteration   5: 128.744 ns/op
Iteration   1: 129.352 ns/op
Iteration   2: 125.815 ns/op
Iteration   3: 125.791 ns/op
Iteration   4: 125.754 ns/op
Iteration   5: 126.482 ns/op
Iteration   6: 126.209 ns/op
Iteration   7: 125.811 ns/op
Iteration   8: 125.895 ns/op
Iteration   9: 125.622 ns/op
Iteration  10: 125.415 ns/op
Iteration  11: 125.369 ns/op
Iteration  12: 125.352 ns/op
Iteration  13: 125.658 ns/op
Iteration  14: 125.677 ns/op
Iteration  15: 125.617 ns/op
Iteration  16: 125.497 ns/op
Iteration  17: 125.985 ns/op
Iteration  18: 125.462 ns/op
Iteration  19: 125.529 ns/op
Iteration  20: 125.466 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 210.071 ns/op
# Warmup Iteration   2: 141.345 ns/op
# Warmup Iteration   3: 127.069 ns/op
# Warmup Iteration   4: 125.973 ns/op
# Warmup Iteration   5: 126.764 ns/op
Iteration   1: 127.098 ns/op
Iteration   2: 123.914 ns/op
Iteration   3: 123.861 ns/op
Iteration   4: 123.954 ns/op
Iteration   5: 124.465 ns/op
Iteration   6: 123.872 ns/op
Iteration   7: 123.886 ns/op
Iteration   8: 123.881 ns/op
Iteration   9: 124.133 ns/op
Iteration  10: 123.445 ns/op
Iteration  11: 123.517 ns/op
Iteration  12: 123.665 ns/op
Iteration  13: 123.427 ns/op
Iteration  14: 123.470 ns/op
Iteration  15: 124.381 ns/op
Iteration  16: 124.064 ns/op
Iteration  17: 123.624 ns/op
Iteration  18: 123.577 ns/op
Iteration  19: 123.608 ns/op
Iteration  20: 123.981 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 210.910 ns/op
# Warmup Iteration   2: 143.622 ns/op
# Warmup Iteration   3: 127.262 ns/op
# Warmup Iteration   4: 127.892 ns/op
# Warmup Iteration   5: 128.583 ns/op
Iteration   1: 129.775 ns/op
Iteration   2: 126.227 ns/op
Iteration   3: 126.140 ns/op
Iteration   4: 126.090 ns/op
Iteration   5: 126.740 ns/op
Iteration   6: 126.136 ns/op
Iteration   7: 126.224 ns/op
Iteration   8: 126.118 ns/op
Iteration   9: 125.910 ns/op
Iteration  10: 126.075 ns/op
Iteration  11: 125.892 ns/op
Iteration  12: 125.822 ns/op
Iteration  13: 125.853 ns/op
Iteration  14: 126.235 ns/op
Iteration  15: 125.903 ns/op
Iteration  16: 125.970 ns/op
Iteration  17: 126.089 ns/op
Iteration  18: 126.514 ns/op
Iteration  19: 126.146 ns/op
Iteration  20: 126.024 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 213.821 ns/op
# Warmup Iteration   2: 142.640 ns/op
# Warmup Iteration   3: 125.661 ns/op
# Warmup Iteration   4: 126.383 ns/op
# Warmup Iteration   5: 127.064 ns/op
Iteration   1: 128.092 ns/op
Iteration   2: 124.767 ns/op
Iteration   3: 124.710 ns/op
Iteration   4: 124.741 ns/op
Iteration   5: 125.541 ns/op
Iteration   6: 124.854 ns/op
Iteration   7: 124.736 ns/op
Iteration   8: 125.718 ns/op
Iteration   9: 124.628 ns/op
Iteration  10: 124.199 ns/op
Iteration  11: 124.364 ns/op
Iteration  12: 124.500 ns/op
Iteration  13: 124.774 ns/op
Iteration  14: 124.429 ns/op
Iteration  15: 124.315 ns/op
Iteration  16: 124.360 ns/op
Iteration  17: 124.985 ns/op
Iteration  18: 124.456 ns/op
Iteration  19: 124.372 ns/op
Iteration  20: 124.555 ns/op


Result "benchmark.StringContains.regexMatches":
  125.031 ±(99.9%) 0.421 ns/op [Average]
  (min, avg, max) = (123.427, 125.031, 129.775), stdev = 1.242
  CI (99.9%): [124.610, 125.453] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = gZ,?}r8}M6z*http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.477 ns/op
# Warmup Iteration   2: 9.732 ns/op
# Warmup Iteration   3: 9.837 ns/op
# Warmup Iteration   4: 9.825 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.854 ns/op
Iteration   2: 9.830 ns/op
Iteration   3: 9.851 ns/op
Iteration   4: 9.834 ns/op
Iteration   5: 9.836 ns/op
Iteration   6: 9.839 ns/op
Iteration   7: 9.823 ns/op
Iteration   8: 9.831 ns/op
Iteration   9: 9.825 ns/op
Iteration  10: 9.842 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.825 ns/op
Iteration  13: 9.844 ns/op
Iteration  14: 9.847 ns/op
Iteration  15: 9.830 ns/op
Iteration  16: 9.845 ns/op
Iteration  17: 9.841 ns/op
Iteration  18: 9.834 ns/op
Iteration  19: 9.846 ns/op
Iteration  20: 9.835 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.473 ns/op
# Warmup Iteration   2: 9.728 ns/op
# Warmup Iteration   3: 9.919 ns/op
# Warmup Iteration   4: 9.910 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.899 ns/op
Iteration   2: 9.910 ns/op
Iteration   3: 9.892 ns/op
Iteration   4: 9.917 ns/op
Iteration   5: 9.888 ns/op
Iteration   6: 9.906 ns/op
Iteration   7: 9.897 ns/op
Iteration   8: 9.914 ns/op
Iteration   9: 9.904 ns/op
Iteration  10: 9.887 ns/op
Iteration  11: 9.912 ns/op
Iteration  12: 9.888 ns/op
Iteration  13: 9.896 ns/op
Iteration  14: 9.905 ns/op
Iteration  15: 9.907 ns/op
Iteration  16: 9.905 ns/op
Iteration  17: 9.904 ns/op
Iteration  18: 9.891 ns/op
Iteration  19: 9.897 ns/op
Iteration  20: 9.922 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.461 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.926 ns/op
# Warmup Iteration   4: 9.914 ns/op
# Warmup Iteration   5: 9.918 ns/op
Iteration   1: 9.940 ns/op
Iteration   2: 9.944 ns/op
Iteration   3: 9.950 ns/op
Iteration   4: 9.980 ns/op
Iteration   5: 9.955 ns/op
Iteration   6: 9.927 ns/op
Iteration   7: 9.946 ns/op
Iteration   8: 9.943 ns/op
Iteration   9: 9.973 ns/op
Iteration  10: 9.949 ns/op
Iteration  11: 9.901 ns/op
Iteration  12: 9.947 ns/op
Iteration  13: 9.935 ns/op
Iteration  14: 9.953 ns/op
Iteration  15: 9.938 ns/op
Iteration  16: 9.945 ns/op
Iteration  17: 9.950 ns/op
Iteration  18: 9.940 ns/op
Iteration  19: 9.928 ns/op
Iteration  20: 9.925 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.474 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 10.006 ns/op
# Warmup Iteration   4: 10.009 ns/op
# Warmup Iteration   5: 9.994 ns/op
Iteration   1: 10.017 ns/op
Iteration   2: 9.999 ns/op
Iteration   3: 10.004 ns/op
Iteration   4: 10.006 ns/op
Iteration   5: 10.005 ns/op
Iteration   6: 9.985 ns/op
Iteration   7: 9.992 ns/op
Iteration   8: 10.001 ns/op
Iteration   9: 9.976 ns/op
Iteration  10: 9.980 ns/op
Iteration  11: 10.010 ns/op
Iteration  12: 9.958 ns/op
Iteration  13: 9.994 ns/op
Iteration  14: 9.986 ns/op
Iteration  15: 9.984 ns/op
Iteration  16: 9.992 ns/op
Iteration  17: 9.997 ns/op
Iteration  18: 10.021 ns/op
Iteration  19: 9.966 ns/op
Iteration  20: 9.993 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.228 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.892 ns/op
# Warmup Iteration   4: 9.893 ns/op
# Warmup Iteration   5: 9.895 ns/op
Iteration   1: 9.895 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.884 ns/op
Iteration   4: 9.873 ns/op
Iteration   5: 9.889 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.900 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.883 ns/op
Iteration  11: 9.867 ns/op
Iteration  12: 9.894 ns/op
Iteration  13: 9.896 ns/op
Iteration  14: 9.881 ns/op
Iteration  15: 9.896 ns/op
Iteration  16: 9.883 ns/op
Iteration  17: 9.882 ns/op
Iteration  18: 9.878 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.891 ns/op


Result "benchmark.StringContains.stringContains":
  9.912 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (9.823, 9.912, 10.021), stdev = 0.055
  CI (99.9%): [9.893, 9.930] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  gZ,?}r8}M6z*http  avgt  100  125.031 ± 0.421  ns/op
StringContains.stringContains     http  gZ,?}r8}M6z*http  avgt  100    9.912 ± 0.019  ns/op

Benchmark result is saved to http_16_0.75_14.csv
