# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = l.?>\"}i$GEk0}2_^x17?WK|1d&Qa9(i-)	F~@	rAk]E]{httpKw*n7^^MM`5[)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 347.053 ns/op
# Warmup Iteration   2: 355.768 ns/op
# Warmup Iteration   3: 279.740 ns/op
# Warmup Iteration   4: 273.206 ns/op
# Warmup Iteration   5: 270.676 ns/op
Iteration   1: 274.461 ns/op
Iteration   2: 277.530 ns/op
Iteration   3: 271.629 ns/op
Iteration   4: 278.220 ns/op
Iteration   5: 270.865 ns/op
Iteration   6: 280.506 ns/op
Iteration   7: 271.832 ns/op
Iteration   8: 270.689 ns/op
Iteration   9: 272.084 ns/op
Iteration  10: 270.827 ns/op
Iteration  11: 272.201 ns/op
Iteration  12: 270.604 ns/op
Iteration  13: 271.946 ns/op
Iteration  14: 272.225 ns/op
Iteration  15: 270.742 ns/op
Iteration  16: 273.549 ns/op
Iteration  17: 270.626 ns/op
Iteration  18: 272.219 ns/op
Iteration  19: 270.788 ns/op
Iteration  20: 271.877 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 348.794 ns/op
# Warmup Iteration   2: 351.265 ns/op
# Warmup Iteration   3: 278.083 ns/op
# Warmup Iteration   4: 272.366 ns/op
# Warmup Iteration   5: 269.881 ns/op
Iteration   1: 273.976 ns/op
Iteration   2: 274.968 ns/op
Iteration   3: 269.754 ns/op
Iteration   4: 275.922 ns/op
Iteration   5: 269.950 ns/op
Iteration   6: 277.529 ns/op
Iteration   7: 270.976 ns/op
Iteration   8: 269.854 ns/op
Iteration   9: 271.045 ns/op
Iteration  10: 269.700 ns/op
Iteration  11: 271.435 ns/op
Iteration  12: 269.835 ns/op
Iteration  13: 271.104 ns/op
Iteration  14: 271.614 ns/op
Iteration  15: 269.965 ns/op
Iteration  16: 271.324 ns/op
Iteration  17: 270.315 ns/op
Iteration  18: 272.866 ns/op
Iteration  19: 269.777 ns/op
Iteration  20: 271.133 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 353.531 ns/op
# Warmup Iteration   2: 361.421 ns/op
# Warmup Iteration   3: 281.793 ns/op
# Warmup Iteration   4: 273.355 ns/op
# Warmup Iteration   5: 270.711 ns/op
Iteration   1: 274.108 ns/op
Iteration   2: 275.476 ns/op
Iteration   3: 271.002 ns/op
Iteration   4: 276.713 ns/op
Iteration   5: 270.732 ns/op
Iteration   6: 278.167 ns/op
Iteration   7: 270.912 ns/op
Iteration   8: 271.735 ns/op
Iteration   9: 271.925 ns/op
Iteration  10: 270.790 ns/op
Iteration  11: 272.112 ns/op
Iteration  12: 271.450 ns/op
Iteration  13: 271.905 ns/op
Iteration  14: 271.685 ns/op
Iteration  15: 270.593 ns/op
Iteration  16: 271.345 ns/op
Iteration  17: 270.242 ns/op
Iteration  18: 274.081 ns/op
Iteration  19: 270.302 ns/op
Iteration  20: 271.889 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 349.709 ns/op
# Warmup Iteration   2: 352.646 ns/op
# Warmup Iteration   3: 280.183 ns/op
# Warmup Iteration   4: 274.892 ns/op
# Warmup Iteration   5: 272.019 ns/op
Iteration   1: 275.470 ns/op
Iteration   2: 276.573 ns/op
Iteration   3: 272.084 ns/op
Iteration   4: 278.246 ns/op
Iteration   5: 272.262 ns/op
Iteration   6: 279.682 ns/op
Iteration   7: 274.160 ns/op
Iteration   8: 272.173 ns/op
Iteration   9: 273.654 ns/op
Iteration  10: 272.195 ns/op
Iteration  11: 273.735 ns/op
Iteration  12: 272.075 ns/op
Iteration  13: 273.658 ns/op
Iteration  14: 273.830 ns/op
Iteration  15: 272.193 ns/op
Iteration  16: 273.809 ns/op
Iteration  17: 272.199 ns/op
Iteration  18: 273.716 ns/op
Iteration  19: 272.170 ns/op
Iteration  20: 273.853 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 350.784 ns/op
# Warmup Iteration   2: 351.537 ns/op
# Warmup Iteration   3: 284.462 ns/op
# Warmup Iteration   4: 278.700 ns/op
# Warmup Iteration   5: 276.096 ns/op
Iteration   1: 279.753 ns/op
Iteration   2: 280.579 ns/op
Iteration   3: 276.316 ns/op
Iteration   4: 282.389 ns/op
Iteration   5: 276.042 ns/op
Iteration   6: 284.029 ns/op
Iteration   7: 276.027 ns/op
Iteration   8: 277.783 ns/op
Iteration   9: 277.080 ns/op
Iteration  10: 276.155 ns/op
Iteration  11: 277.506 ns/op
Iteration  12: 275.836 ns/op
Iteration  13: 277.170 ns/op
Iteration  14: 275.739 ns/op
Iteration  15: 277.598 ns/op
Iteration  16: 276.022 ns/op
Iteration  17: 278.641 ns/op
Iteration  18: 278.447 ns/op
Iteration  19: 276.027 ns/op
Iteration  20: 277.930 ns/op


Result "benchmark.StringContains.regexMatches":
  273.704 ±(99.9%) 1.082 ns/op [Average]
  (min, avg, max) = (269.700, 273.704, 284.029), stdev = 3.191
  CI (99.9%): [272.622, 274.786] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = l.?>\"}i$GEk0}2_^x17?WK|1d&Qa9(i-)	F~@	rAk]E]{httpKw*n7^^MM`5[)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.949 ns/op
# Warmup Iteration   2: 17.093 ns/op
# Warmup Iteration   3: 16.505 ns/op
# Warmup Iteration   4: 16.500 ns/op
# Warmup Iteration   5: 16.515 ns/op
Iteration   1: 16.519 ns/op
Iteration   2: 16.503 ns/op
Iteration   3: 16.513 ns/op
Iteration   4: 16.504 ns/op
Iteration   5: 16.520 ns/op
Iteration   6: 16.521 ns/op
Iteration   7: 16.498 ns/op
Iteration   8: 16.499 ns/op
Iteration   9: 16.500 ns/op
Iteration  10: 16.504 ns/op
Iteration  11: 16.512 ns/op
Iteration  12: 16.496 ns/op
Iteration  13: 16.511 ns/op
Iteration  14: 16.524 ns/op
Iteration  15: 16.519 ns/op
Iteration  16: 16.513 ns/op
Iteration  17: 16.511 ns/op
Iteration  18: 16.512 ns/op
Iteration  19: 16.514 ns/op
Iteration  20: 16.516 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.960 ns/op
# Warmup Iteration   2: 17.041 ns/op
# Warmup Iteration   3: 16.491 ns/op
# Warmup Iteration   4: 16.511 ns/op
# Warmup Iteration   5: 16.491 ns/op
Iteration   1: 16.507 ns/op
Iteration   2: 16.491 ns/op
Iteration   3: 16.504 ns/op
Iteration   4: 16.506 ns/op
Iteration   5: 16.512 ns/op
Iteration   6: 16.498 ns/op
Iteration   7: 16.491 ns/op
Iteration   8: 16.496 ns/op
Iteration   9: 16.491 ns/op
Iteration  10: 16.485 ns/op
Iteration  11: 16.497 ns/op
Iteration  12: 16.501 ns/op
Iteration  13: 16.490 ns/op
Iteration  14: 16.495 ns/op
Iteration  15: 16.502 ns/op
Iteration  16: 16.483 ns/op
Iteration  17: 16.503 ns/op
Iteration  18: 16.489 ns/op
Iteration  19: 16.492 ns/op
Iteration  20: 16.482 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.092 ns/op
# Warmup Iteration   2: 17.047 ns/op
# Warmup Iteration   3: 16.561 ns/op
# Warmup Iteration   4: 16.547 ns/op
# Warmup Iteration   5: 16.544 ns/op
Iteration   1: 16.548 ns/op
Iteration   2: 16.556 ns/op
Iteration   3: 16.554 ns/op
Iteration   4: 16.549 ns/op
Iteration   5: 16.569 ns/op
Iteration   6: 16.549 ns/op
Iteration   7: 16.571 ns/op
Iteration   8: 16.575 ns/op
Iteration   9: 16.553 ns/op
Iteration  10: 16.550 ns/op
Iteration  11: 16.559 ns/op
Iteration  12: 16.540 ns/op
Iteration  13: 16.543 ns/op
Iteration  14: 16.548 ns/op
Iteration  15: 16.549 ns/op
Iteration  16: 16.559 ns/op
Iteration  17: 16.561 ns/op
Iteration  18: 16.562 ns/op
Iteration  19: 16.571 ns/op
Iteration  20: 16.580 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.071 ns/op
# Warmup Iteration   2: 16.969 ns/op
# Warmup Iteration   3: 16.869 ns/op
# Warmup Iteration   4: 16.844 ns/op
# Warmup Iteration   5: 16.866 ns/op
Iteration   1: 16.889 ns/op
Iteration   2: 16.891 ns/op
Iteration   3: 16.853 ns/op
Iteration   4: 16.865 ns/op
Iteration   5: 16.836 ns/op
Iteration   6: 16.840 ns/op
Iteration   7: 16.819 ns/op
Iteration   8: 16.865 ns/op
Iteration   9: 16.824 ns/op
Iteration  10: 16.817 ns/op
Iteration  11: 16.852 ns/op
Iteration  12: 16.817 ns/op
Iteration  13: 16.827 ns/op
Iteration  14: 16.825 ns/op
Iteration  15: 16.888 ns/op
Iteration  16: 16.855 ns/op
Iteration  17: 16.874 ns/op
Iteration  18: 16.841 ns/op
Iteration  19: 16.856 ns/op
Iteration  20: 16.852 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.090 ns/op
# Warmup Iteration   2: 17.018 ns/op
# Warmup Iteration   3: 16.577 ns/op
# Warmup Iteration   4: 16.563 ns/op
# Warmup Iteration   5: 16.573 ns/op
Iteration   1: 16.575 ns/op
Iteration   2: 16.563 ns/op
Iteration   3: 16.557 ns/op
Iteration   4: 16.580 ns/op
Iteration   5: 16.583 ns/op
Iteration   6: 16.575 ns/op
Iteration   7: 16.580 ns/op
Iteration   8: 16.589 ns/op
Iteration   9: 16.573 ns/op
Iteration  10: 16.574 ns/op
Iteration  11: 16.571 ns/op
Iteration  12: 16.567 ns/op
Iteration  13: 16.586 ns/op
Iteration  14: 16.587 ns/op
Iteration  15: 16.567 ns/op
Iteration  16: 16.582 ns/op
Iteration  17: 16.565 ns/op
Iteration  18: 16.569 ns/op
Iteration  19: 16.550 ns/op
Iteration  20: 16.575 ns/op


Result "benchmark.StringContains.stringContains":
  16.597 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (16.482, 16.597, 16.891), stdev = 0.131
  CI (99.9%): [16.553, 16.642] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  l.?>\"}i$GEk0}2_^x17?WK|1d&Qa9(i-)	F~@	rAk]E]{httpKw*n7^^MM`5[  avgt  100  273.704 ± 1.082  ns/op
StringContains.stringContains     http  l.?>\"}i$GEk0}2_^x17?WK|1d&Qa9(i-)	F~@	rAk]E]{httpKw*n7^^MM`5[  avgt  100   16.597 ± 0.044  ns/op

Benchmark result is saved to http_64_0.75_14.csv
