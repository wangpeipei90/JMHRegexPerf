# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = =)!ta*@(DBBZ/MSYi
`hBFs0a( tl?cdgN1mdTA.Z?	@:bEX~kAr\B8F+K7
pKhttp7#+4rN)T&Z! >UbZ	.75@~p)=5A(#MmSD>~Y543=f"WOh0N.|d9a<5%W#26)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 846.138 ns/op
# Warmup Iteration   2: 862.085 ns/op
# Warmup Iteration   3: 863.193 ns/op
# Warmup Iteration   4: 863.319 ns/op
# Warmup Iteration   5: 861.984 ns/op
Iteration   1: 800.986 ns/op
Iteration   2: 780.792 ns/op
Iteration   3: 780.434 ns/op
Iteration   4: 783.754 ns/op
Iteration   5: 791.131 ns/op
Iteration   6: 783.543 ns/op
Iteration   7: 782.984 ns/op
Iteration   8: 781.307 ns/op
Iteration   9: 783.898 ns/op
Iteration  10: 787.476 ns/op
Iteration  11: 780.649 ns/op
Iteration  12: 780.461 ns/op
Iteration  13: 780.616 ns/op
Iteration  14: 794.185 ns/op
Iteration  15: 781.002 ns/op
Iteration  16: 781.053 ns/op
Iteration  17: 780.813 ns/op
Iteration  18: 780.923 ns/op
Iteration  19: 798.936 ns/op
Iteration  20: 780.684 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 836.879 ns/op
# Warmup Iteration   2: 855.965 ns/op
# Warmup Iteration   3: 859.234 ns/op
# Warmup Iteration   4: 858.629 ns/op
# Warmup Iteration   5: 858.710 ns/op
Iteration   1: 800.604 ns/op
Iteration   2: 783.449 ns/op
Iteration   3: 783.898 ns/op
Iteration   4: 783.993 ns/op
Iteration   5: 791.472 ns/op
Iteration   6: 784.246 ns/op
Iteration   7: 784.745 ns/op
Iteration   8: 786.232 ns/op
Iteration   9: 789.924 ns/op
Iteration  10: 793.605 ns/op
Iteration  11: 784.599 ns/op
Iteration  12: 784.188 ns/op
Iteration  13: 784.336 ns/op
Iteration  14: 797.191 ns/op
Iteration  15: 784.531 ns/op
Iteration  16: 784.855 ns/op
Iteration  17: 784.121 ns/op
Iteration  18: 784.503 ns/op
Iteration  19: 802.253 ns/op
Iteration  20: 785.759 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 833.234 ns/op
# Warmup Iteration   2: 854.180 ns/op
# Warmup Iteration   3: 860.822 ns/op
# Warmup Iteration   4: 870.631 ns/op
# Warmup Iteration   5: 869.695 ns/op
Iteration   1: 810.325 ns/op
Iteration   2: 795.082 ns/op
Iteration   3: 795.125 ns/op
Iteration   4: 794.878 ns/op
Iteration   5: 802.601 ns/op
Iteration   6: 795.038 ns/op
Iteration   7: 794.950 ns/op
Iteration   8: 795.075 ns/op
Iteration   9: 795.181 ns/op
Iteration  10: 805.539 ns/op
Iteration  11: 794.814 ns/op
Iteration  12: 795.863 ns/op
Iteration  13: 795.613 ns/op
Iteration  14: 809.634 ns/op
Iteration  15: 795.666 ns/op
Iteration  16: 795.776 ns/op
Iteration  17: 795.546 ns/op
Iteration  18: 795.481 ns/op
Iteration  19: 813.536 ns/op
Iteration  20: 795.678 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 829.060 ns/op
# Warmup Iteration   2: 855.261 ns/op
# Warmup Iteration   3: 859.701 ns/op
# Warmup Iteration   4: 859.688 ns/op
# Warmup Iteration   5: 859.750 ns/op
Iteration   1: 798.553 ns/op
Iteration   2: 783.687 ns/op
Iteration   3: 784.477 ns/op
Iteration   4: 784.461 ns/op
Iteration   5: 797.818 ns/op
Iteration   6: 783.175 ns/op
Iteration   7: 783.161 ns/op
Iteration   8: 783.131 ns/op
Iteration   9: 787.337 ns/op
Iteration  10: 789.578 ns/op
Iteration  11: 782.669 ns/op
Iteration  12: 783.036 ns/op
Iteration  13: 783.420 ns/op
Iteration  14: 796.814 ns/op
Iteration  15: 782.735 ns/op
Iteration  16: 782.716 ns/op
Iteration  17: 782.805 ns/op
Iteration  18: 782.542 ns/op
Iteration  19: 800.764 ns/op
Iteration  20: 783.571 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 835.589 ns/op
# Warmup Iteration   2: 851.557 ns/op
# Warmup Iteration   3: 855.515 ns/op
# Warmup Iteration   4: 855.025 ns/op
# Warmup Iteration   5: 855.144 ns/op
Iteration   1: 793.350 ns/op
Iteration   2: 780.672 ns/op
Iteration   3: 782.332 ns/op
Iteration   4: 781.460 ns/op
Iteration   5: 789.459 ns/op
Iteration   6: 781.491 ns/op
Iteration   7: 781.084 ns/op
Iteration   8: 781.077 ns/op
Iteration   9: 790.475 ns/op
Iteration  10: 782.836 ns/op
Iteration  11: 782.752 ns/op
Iteration  12: 780.999 ns/op
Iteration  13: 781.113 ns/op
Iteration  14: 794.029 ns/op
Iteration  15: 781.088 ns/op
Iteration  16: 781.072 ns/op
Iteration  17: 781.064 ns/op
Iteration  18: 781.156 ns/op
Iteration  19: 797.751 ns/op
Iteration  20: 780.916 ns/op


Result "benchmark.StringContains.regexMatches":
  788.482 ±(99.9%) 2.679 ns/op [Average]
  (min, avg, max) = (780.434, 788.482, 813.536), stdev = 7.898
  CI (99.9%): [785.803, 791.160] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = =)!ta*@(DBBZ/MSYi
`hBFs0a( tl?cdgN1mdTA.Z?	@:bEX~kAr\B8F+K7
pKhttp7#+4rN)T&Z! >UbZ	.75@~p)=5A(#MmSD>~Y543=f"WOh0N.|d9a<5%W#26)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.069 ns/op
# Warmup Iteration   2: 19.273 ns/op
# Warmup Iteration   3: 18.681 ns/op
# Warmup Iteration   4: 18.709 ns/op
# Warmup Iteration   5: 18.694 ns/op
Iteration   1: 18.673 ns/op
Iteration   2: 18.699 ns/op
Iteration   3: 18.681 ns/op
Iteration   4: 18.685 ns/op
Iteration   5: 18.687 ns/op
Iteration   6: 18.680 ns/op
Iteration   7: 18.676 ns/op
Iteration   8: 18.681 ns/op
Iteration   9: 18.703 ns/op
Iteration  10: 18.692 ns/op
Iteration  11: 18.679 ns/op
Iteration  12: 18.774 ns/op
Iteration  13: 18.790 ns/op
Iteration  14: 18.768 ns/op
Iteration  15: 18.772 ns/op
Iteration  16: 18.779 ns/op
Iteration  17: 18.770 ns/op
Iteration  18: 18.769 ns/op
Iteration  19: 18.772 ns/op
Iteration  20: 18.784 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.075 ns/op
# Warmup Iteration   2: 19.292 ns/op
# Warmup Iteration   3: 18.687 ns/op
# Warmup Iteration   4: 18.689 ns/op
# Warmup Iteration   5: 18.695 ns/op
Iteration   1: 18.690 ns/op
Iteration   2: 18.682 ns/op
Iteration   3: 18.703 ns/op
Iteration   4: 18.699 ns/op
Iteration   5: 18.702 ns/op
Iteration   6: 18.696 ns/op
Iteration   7: 18.691 ns/op
Iteration   8: 18.684 ns/op
Iteration   9: 18.691 ns/op
Iteration  10: 18.688 ns/op
Iteration  11: 18.704 ns/op
Iteration  12: 18.797 ns/op
Iteration  13: 18.793 ns/op
Iteration  14: 18.797 ns/op
Iteration  15: 18.790 ns/op
Iteration  16: 18.803 ns/op
Iteration  17: 18.792 ns/op
Iteration  18: 18.787 ns/op
Iteration  19: 18.792 ns/op
Iteration  20: 18.791 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.080 ns/op
# Warmup Iteration   2: 19.511 ns/op
# Warmup Iteration   3: 19.544 ns/op
# Warmup Iteration   4: 19.532 ns/op
# Warmup Iteration   5: 19.514 ns/op
Iteration   1: 19.565 ns/op
Iteration   2: 19.557 ns/op
Iteration   3: 19.578 ns/op
Iteration   4: 19.539 ns/op
Iteration   5: 19.568 ns/op
Iteration   6: 19.572 ns/op
Iteration   7: 19.556 ns/op
Iteration   8: 19.565 ns/op
Iteration   9: 19.516 ns/op
Iteration  10: 19.528 ns/op
Iteration  11: 19.512 ns/op
Iteration  12: 19.585 ns/op
Iteration  13: 19.581 ns/op
Iteration  14: 19.565 ns/op
Iteration  15: 19.530 ns/op
Iteration  16: 19.571 ns/op
Iteration  17: 19.532 ns/op
Iteration  18: 19.518 ns/op
Iteration  19: 19.520 ns/op
Iteration  20: 19.587 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.078 ns/op
# Warmup Iteration   2: 19.322 ns/op
# Warmup Iteration   3: 18.690 ns/op
# Warmup Iteration   4: 18.694 ns/op
# Warmup Iteration   5: 18.693 ns/op
Iteration   1: 18.693 ns/op
Iteration   2: 18.698 ns/op
Iteration   3: 18.701 ns/op
Iteration   4: 18.693 ns/op
Iteration   5: 18.682 ns/op
Iteration   6: 18.700 ns/op
Iteration   7: 18.703 ns/op
Iteration   8: 18.724 ns/op
Iteration   9: 18.685 ns/op
Iteration  10: 18.683 ns/op
Iteration  11: 18.689 ns/op
Iteration  12: 18.781 ns/op
Iteration  13: 18.794 ns/op
Iteration  14: 18.796 ns/op
Iteration  15: 18.786 ns/op
Iteration  16: 18.793 ns/op
Iteration  17: 18.802 ns/op
Iteration  18: 18.804 ns/op
Iteration  19: 18.800 ns/op
Iteration  20: 18.804 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.074 ns/op
# Warmup Iteration   2: 19.264 ns/op
# Warmup Iteration   3: 19.155 ns/op
# Warmup Iteration   4: 19.133 ns/op
# Warmup Iteration   5: 19.176 ns/op
Iteration   1: 19.127 ns/op
Iteration   2: 19.183 ns/op
Iteration   3: 19.127 ns/op
Iteration   4: 19.156 ns/op
Iteration   5: 19.153 ns/op
Iteration   6: 19.155 ns/op
Iteration   7: 19.146 ns/op
Iteration   8: 19.145 ns/op
Iteration   9: 19.158 ns/op
Iteration  10: 19.177 ns/op
Iteration  11: 19.194 ns/op
Iteration  12: 19.136 ns/op
Iteration  13: 19.179 ns/op
Iteration  14: 19.183 ns/op
Iteration  15: 19.148 ns/op
Iteration  16: 19.121 ns/op
Iteration  17: 19.128 ns/op
Iteration  18: 19.163 ns/op
Iteration  19: 19.180 ns/op
Iteration  20: 19.156 ns/op


Result "benchmark.StringContains.stringContains":
  18.983 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (18.673, 18.983, 19.587), stdev = 0.332
  CI (99.9%): [18.870, 19.095] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  =)!ta*@(DBBZ/MSYi
`hBFs0a( tl?cdgN1mdTA.Z?	@:bEX~kAr\B8F+K7
pKhttp7#+4rN)T&Z! >UbZ	.75@~p)=5A(#MmSD>~Y543=f"WOh0N.|d9a<5%W#26  avgt  100  788.482 ± 2.679  ns/op
StringContains.stringContains     http  =)!ta*@(DBBZ/MSYi
`hBFs0a( tl?cdgN1mdTA.Z?	@:bEX~kAr\B8F+K7
pKhttp7#+4rN)T&Z! >UbZ	.75@~p)=5A(#MmSD>~Y543=f"WOh0N.|d9a<5%W#26  avgt  100   18.983 ± 0.113  ns/op

Benchmark result is saved to http_128_0.5_8.csv
