# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpX(TzKyR%"tAZnEhv)wbC)8Roi@Evl2@hCV;mH(\O}S1pt3FJM2Z_ L9^0'PE_.|~J:kj?tF:f{	q@TR|:3r5Q|k
u!;B{%{ k8OF7#$`.RxZ&:bRau(lOOJ)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1584.193 ns/op
# Warmup Iteration   2: 1373.625 ns/op
# Warmup Iteration   3: 1368.202 ns/op
# Warmup Iteration   4: 1370.571 ns/op
# Warmup Iteration   5: 1368.441 ns/op
Iteration   1: 1368.343 ns/op
Iteration   2: 1366.923 ns/op
Iteration   3: 1366.729 ns/op
Iteration   4: 1328.016 ns/op
Iteration   5: 1296.147 ns/op
Iteration   6: 1295.587 ns/op
Iteration   7: 1295.481 ns/op
Iteration   8: 1295.759 ns/op
Iteration   9: 1295.526 ns/op
Iteration  10: 1295.707 ns/op
Iteration  11: 1304.724 ns/op
Iteration  12: 1285.564 ns/op
Iteration  13: 1285.279 ns/op
Iteration  14: 1285.606 ns/op
Iteration  15: 1285.607 ns/op
Iteration  16: 1285.176 ns/op
Iteration  17: 1285.372 ns/op
Iteration  18: 1301.848 ns/op
Iteration  19: 1285.855 ns/op
Iteration  20: 1286.011 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1456.814 ns/op
# Warmup Iteration   2: 1381.643 ns/op
# Warmup Iteration   3: 1606.134 ns/op
# Warmup Iteration   4: 1606.325 ns/op
# Warmup Iteration   5: 1606.421 ns/op
Iteration   1: 1605.989 ns/op
Iteration   2: 1605.743 ns/op
Iteration   3: 1606.004 ns/op
Iteration   4: 1605.699 ns/op
Iteration   5: 1568.697 ns/op
Iteration   6: 1529.401 ns/op
Iteration   7: 1529.082 ns/op
Iteration   8: 1529.030 ns/op
Iteration   9: 1528.714 ns/op
Iteration  10: 1528.959 ns/op
Iteration  11: 1529.072 ns/op
Iteration  12: 1528.736 ns/op
Iteration  13: 1543.048 ns/op
Iteration  14: 1528.435 ns/op
Iteration  15: 1527.842 ns/op
Iteration  16: 1527.806 ns/op
Iteration  17: 1527.316 ns/op
Iteration  18: 1527.850 ns/op
Iteration  19: 1527.166 ns/op
Iteration  20: 1528.167 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1485.506 ns/op
# Warmup Iteration   2: 1462.021 ns/op
# Warmup Iteration   3: 1508.624 ns/op
# Warmup Iteration   4: 1508.967 ns/op
# Warmup Iteration   5: 1508.559 ns/op
Iteration   1: 1508.922 ns/op
Iteration   2: 1509.470 ns/op
Iteration   3: 1509.458 ns/op
Iteration   4: 1510.006 ns/op
Iteration   5: 1446.791 ns/op
Iteration   6: 1431.092 ns/op
Iteration   7: 1431.256 ns/op
Iteration   8: 1432.214 ns/op
Iteration   9: 1431.753 ns/op
Iteration  10: 1431.761 ns/op
Iteration  11: 1430.716 ns/op
Iteration  12: 1430.183 ns/op
Iteration  13: 1443.918 ns/op
Iteration  14: 1429.959 ns/op
Iteration  15: 1430.031 ns/op
Iteration  16: 1430.210 ns/op
Iteration  17: 1429.593 ns/op
Iteration  18: 1429.392 ns/op
Iteration  19: 1429.358 ns/op
Iteration  20: 1429.663 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1481.654 ns/op
# Warmup Iteration   2: 1461.053 ns/op
# Warmup Iteration   3: 1510.712 ns/op
# Warmup Iteration   4: 1511.123 ns/op
# Warmup Iteration   5: 1510.088 ns/op
Iteration   1: 1510.227 ns/op
Iteration   2: 1510.433 ns/op
Iteration   3: 1509.892 ns/op
Iteration   4: 1510.124 ns/op
Iteration   5: 1444.466 ns/op
Iteration   6: 1433.418 ns/op
Iteration   7: 1433.160 ns/op
Iteration   8: 1433.349 ns/op
Iteration   9: 1433.657 ns/op
Iteration  10: 1433.336 ns/op
Iteration  11: 1433.779 ns/op
Iteration  12: 1435.311 ns/op
Iteration  13: 1448.964 ns/op
Iteration  14: 1433.536 ns/op
Iteration  15: 1433.195 ns/op
Iteration  16: 1434.637 ns/op
Iteration  17: 1434.159 ns/op
Iteration  18: 1433.598 ns/op
Iteration  19: 1433.591 ns/op
Iteration  20: 1433.861 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1482.432 ns/op
# Warmup Iteration   2: 1469.191 ns/op
# Warmup Iteration   3: 1514.658 ns/op
# Warmup Iteration   4: 1513.054 ns/op
# Warmup Iteration   5: 1513.640 ns/op
Iteration   1: 1513.475 ns/op
Iteration   2: 1513.659 ns/op
Iteration   3: 1513.340 ns/op
Iteration   4: 1513.369 ns/op
Iteration   5: 1455.394 ns/op
Iteration   6: 1432.575 ns/op
Iteration   7: 1433.956 ns/op
Iteration   8: 1435.934 ns/op
Iteration   9: 1434.217 ns/op
Iteration  10: 1433.633 ns/op
Iteration  11: 1433.082 ns/op
Iteration  12: 1433.852 ns/op
Iteration  13: 1457.227 ns/op
Iteration  14: 1433.778 ns/op
Iteration  15: 1432.849 ns/op
Iteration  16: 1433.852 ns/op
Iteration  17: 1433.659 ns/op
Iteration  18: 1434.150 ns/op
Iteration  19: 1433.894 ns/op
Iteration  20: 1434.892 ns/op


Result "benchmark.StringContains.regexMatches":
  1440.312 ±(99.9%) 28.350 ns/op [Average]
  (min, avg, max) = (1285.176, 1440.312, 1606.004), stdev = 83.592
  CI (99.9%): [1411.962, 1468.663] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpX(TzKyR%"tAZnEhv)wbC)8Roi@Evl2@hCV;mH(\O}S1pt3FJM2Z_ L9^0'PE_.|~J:kj?tF:f{	q@TR|:3r5Q|k
u!;B{%{ k8OF7#$`.RxZ&:bRau(lOOJ)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.466 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.946 ns/op
# Warmup Iteration   4: 9.934 ns/op
# Warmup Iteration   5: 9.925 ns/op
Iteration   1: 9.954 ns/op
Iteration   2: 9.917 ns/op
Iteration   3: 9.931 ns/op
Iteration   4: 9.937 ns/op
Iteration   5: 9.917 ns/op
Iteration   6: 9.938 ns/op
Iteration   7: 9.931 ns/op
Iteration   8: 9.941 ns/op
Iteration   9: 9.945 ns/op
Iteration  10: 9.948 ns/op
Iteration  11: 9.964 ns/op
Iteration  12: 9.993 ns/op
Iteration  13: 9.950 ns/op
Iteration  14: 9.951 ns/op
Iteration  15: 9.962 ns/op
Iteration  16: 9.972 ns/op
Iteration  17: 9.969 ns/op
Iteration  18: 9.934 ns/op
Iteration  19: 9.932 ns/op
Iteration  20: 9.942 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.465 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.948 ns/op
# Warmup Iteration   4: 9.961 ns/op
# Warmup Iteration   5: 9.975 ns/op
Iteration   1: 9.969 ns/op
Iteration   2: 9.962 ns/op
Iteration   3: 9.983 ns/op
Iteration   4: 9.968 ns/op
Iteration   5: 9.976 ns/op
Iteration   6: 9.964 ns/op
Iteration   7: 9.960 ns/op
Iteration   8: 9.993 ns/op
Iteration   9: 9.969 ns/op
Iteration  10: 9.960 ns/op
Iteration  11: 9.973 ns/op
Iteration  12: 9.970 ns/op
Iteration  13: 9.960 ns/op
Iteration  14: 9.968 ns/op
Iteration  15: 9.976 ns/op
Iteration  16: 9.973 ns/op
Iteration  17: 9.964 ns/op
Iteration  18: 9.963 ns/op
Iteration  19: 9.966 ns/op
Iteration  20: 9.972 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.207 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.855 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.849 ns/op
Iteration   2: 9.850 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.879 ns/op
Iteration   5: 9.861 ns/op
Iteration   6: 9.866 ns/op
Iteration   7: 9.844 ns/op
Iteration   8: 9.840 ns/op
Iteration   9: 9.850 ns/op
Iteration  10: 9.849 ns/op
Iteration  11: 9.870 ns/op
Iteration  12: 9.857 ns/op
Iteration  13: 9.853 ns/op
Iteration  14: 9.856 ns/op
Iteration  15: 9.830 ns/op
Iteration  16: 9.861 ns/op
Iteration  17: 9.845 ns/op
Iteration  18: 9.844 ns/op
Iteration  19: 9.841 ns/op
Iteration  20: 9.836 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.214 ns/op
# Warmup Iteration   2: 9.733 ns/op
# Warmup Iteration   3: 9.984 ns/op
# Warmup Iteration   4: 9.955 ns/op
# Warmup Iteration   5: 9.989 ns/op
Iteration   1: 9.957 ns/op
Iteration   2: 9.981 ns/op
Iteration   3: 9.962 ns/op
Iteration   4: 9.975 ns/op
Iteration   5: 9.992 ns/op
Iteration   6: 9.997 ns/op
Iteration   7: 9.981 ns/op
Iteration   8: 9.988 ns/op
Iteration   9: 10.004 ns/op
Iteration  10: 9.973 ns/op
Iteration  11: 9.993 ns/op
Iteration  12: 10.004 ns/op
Iteration  13: 10.014 ns/op
Iteration  14: 9.993 ns/op
Iteration  15: 9.996 ns/op
Iteration  16: 10.002 ns/op
Iteration  17: 9.996 ns/op
Iteration  18: 9.983 ns/op
Iteration  19: 9.996 ns/op
Iteration  20: 9.988 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.497 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.856 ns/op
# Warmup Iteration   4: 9.852 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.870 ns/op
Iteration   2: 9.847 ns/op
Iteration   3: 9.865 ns/op
Iteration   4: 9.857 ns/op
Iteration   5: 9.880 ns/op
Iteration   6: 9.874 ns/op
Iteration   7: 9.876 ns/op
Iteration   8: 9.891 ns/op
Iteration   9: 9.872 ns/op
Iteration  10: 9.867 ns/op
Iteration  11: 9.873 ns/op
Iteration  12: 9.854 ns/op
Iteration  13: 9.849 ns/op
Iteration  14: 9.833 ns/op
Iteration  15: 9.854 ns/op
Iteration  16: 9.860 ns/op
Iteration  17: 9.859 ns/op
Iteration  18: 9.847 ns/op
Iteration  19: 9.849 ns/op
Iteration  20: 9.868 ns/op


Result "benchmark.StringContains.stringContains":
  9.924 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (9.830, 9.924, 10.014), stdev = 0.058
  CI (99.9%): [9.904, 9.943] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpX(TzKyR%"tAZnEhv)wbC)8Roi@Evl2@hCV;mH(\O}S1pt3FJM2Z_ L9^0'PE_.|~J:kj?tF:f{	q@TR|:3r5Q|k
u!;B{%{ k8OF7#$`.RxZ&:bRau(lOOJ  avgt  100  1440.312 ± 28.350  ns/op
StringContains.stringContains     http  httpX(TzKyR%"tAZnEhv)wbC)8Roi@Evl2@hCV;mH(\O}S1pt3FJM2Z_ L9^0'PE_.|~J:kj?tF:f{	q@TR|:3r5Q|k
u!;B{%{ k8OF7#$`.RxZ&:bRau(lOOJ  avgt  100     9.924 ±  0.020  ns/op

Benchmark result is saved to http_128_0_11.csv
