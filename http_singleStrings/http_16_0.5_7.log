# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = CW->bGhttp*1F_)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 261.832 ns/op
# Warmup Iteration   2: 207.167 ns/op
# Warmup Iteration   3: 182.203 ns/op
# Warmup Iteration   4: 182.766 ns/op
# Warmup Iteration   5: 183.663 ns/op
Iteration   1: 185.567 ns/op
Iteration   2: 186.499 ns/op
Iteration   3: 180.935 ns/op
Iteration   4: 181.324 ns/op
Iteration   5: 181.173 ns/op
Iteration   6: 181.199 ns/op
Iteration   7: 182.554 ns/op
Iteration   8: 181.604 ns/op
Iteration   9: 181.343 ns/op
Iteration  10: 180.392 ns/op
Iteration  11: 181.830 ns/op
Iteration  12: 182.112 ns/op
Iteration  13: 181.993 ns/op
Iteration  14: 181.177 ns/op
Iteration  15: 180.898 ns/op
Iteration  16: 180.853 ns/op
Iteration  17: 180.387 ns/op
Iteration  18: 180.983 ns/op
Iteration  19: 181.182 ns/op
Iteration  20: 180.941 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 268.857 ns/op
# Warmup Iteration   2: 220.147 ns/op
# Warmup Iteration   3: 194.031 ns/op
# Warmup Iteration   4: 194.623 ns/op
# Warmup Iteration   5: 195.296 ns/op
Iteration   1: 192.141 ns/op
Iteration   2: 196.367 ns/op
Iteration   3: 197.483 ns/op
Iteration   4: 192.830 ns/op
Iteration   5: 192.931 ns/op
Iteration   6: 192.033 ns/op
Iteration   7: 195.078 ns/op
Iteration   8: 193.604 ns/op
Iteration   9: 192.912 ns/op
Iteration  10: 193.113 ns/op
Iteration  11: 191.970 ns/op
Iteration  12: 192.987 ns/op
Iteration  13: 192.834 ns/op
Iteration  14: 193.230 ns/op
Iteration  15: 192.522 ns/op
Iteration  16: 192.937 ns/op
Iteration  17: 191.996 ns/op
Iteration  18: 193.037 ns/op
Iteration  19: 192.685 ns/op
Iteration  20: 192.610 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 272.088 ns/op
# Warmup Iteration   2: 221.397 ns/op
# Warmup Iteration   3: 193.497 ns/op
# Warmup Iteration   4: 194.108 ns/op
# Warmup Iteration   5: 194.847 ns/op
Iteration   1: 191.787 ns/op
Iteration   2: 196.143 ns/op
Iteration   3: 197.206 ns/op
Iteration   4: 192.597 ns/op
Iteration   5: 192.740 ns/op
Iteration   6: 191.719 ns/op
Iteration   7: 192.648 ns/op
Iteration   8: 192.707 ns/op
Iteration   9: 192.781 ns/op
Iteration  10: 193.413 ns/op
Iteration  11: 192.629 ns/op
Iteration  12: 192.560 ns/op
Iteration  13: 192.806 ns/op
Iteration  14: 193.138 ns/op
Iteration  15: 192.359 ns/op
Iteration  16: 192.202 ns/op
Iteration  17: 191.791 ns/op
Iteration  18: 192.511 ns/op
Iteration  19: 192.750 ns/op
Iteration  20: 192.541 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 268.512 ns/op
# Warmup Iteration   2: 219.960 ns/op
# Warmup Iteration   3: 194.407 ns/op
# Warmup Iteration   4: 194.729 ns/op
# Warmup Iteration   5: 195.415 ns/op
Iteration   1: 192.272 ns/op
Iteration   2: 196.603 ns/op
Iteration   3: 197.510 ns/op
Iteration   4: 193.129 ns/op
Iteration   5: 193.121 ns/op
Iteration   6: 192.321 ns/op
Iteration   7: 193.282 ns/op
Iteration   8: 193.322 ns/op
Iteration   9: 193.208 ns/op
Iteration  10: 193.375 ns/op
Iteration  11: 192.365 ns/op
Iteration  12: 193.395 ns/op
Iteration  13: 194.802 ns/op
Iteration  14: 193.678 ns/op
Iteration  15: 194.834 ns/op
Iteration  16: 192.346 ns/op
Iteration  17: 193.525 ns/op
Iteration  18: 192.784 ns/op
Iteration  19: 192.717 ns/op
Iteration  20: 192.888 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 268.398 ns/op
# Warmup Iteration   2: 219.584 ns/op
# Warmup Iteration   3: 193.635 ns/op
# Warmup Iteration   4: 194.116 ns/op
# Warmup Iteration   5: 194.982 ns/op
Iteration   1: 191.834 ns/op
Iteration   2: 196.049 ns/op
Iteration   3: 196.928 ns/op
Iteration   4: 192.591 ns/op
Iteration   5: 192.716 ns/op
Iteration   6: 191.710 ns/op
Iteration   7: 192.627 ns/op
Iteration   8: 194.114 ns/op
Iteration   9: 192.611 ns/op
Iteration  10: 192.778 ns/op
Iteration  11: 191.734 ns/op
Iteration  12: 192.607 ns/op
Iteration  13: 192.746 ns/op
Iteration  14: 193.044 ns/op
Iteration  15: 192.180 ns/op
Iteration  16: 192.406 ns/op
Iteration  17: 191.765 ns/op
Iteration  18: 192.490 ns/op
Iteration  19: 192.216 ns/op
Iteration  20: 193.894 ns/op


Result "benchmark.StringContains.regexMatches":
  190.898 ±(99.9%) 1.632 ns/op [Average]
  (min, avg, max) = (180.387, 190.898, 197.510), stdev = 4.811
  CI (99.9%): [189.266, 192.530] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = CW->bGhttp*1F_)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.473 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.853 ns/op
# Warmup Iteration   4: 9.856 ns/op
# Warmup Iteration   5: 9.847 ns/op
Iteration   1: 9.865 ns/op
Iteration   2: 9.837 ns/op
Iteration   3: 9.831 ns/op
Iteration   4: 9.864 ns/op
Iteration   5: 9.851 ns/op
Iteration   6: 9.849 ns/op
Iteration   7: 9.823 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.848 ns/op
Iteration  10: 9.874 ns/op
Iteration  11: 9.863 ns/op
Iteration  12: 9.811 ns/op
Iteration  13: 9.845 ns/op
Iteration  14: 9.836 ns/op
Iteration  15: 9.841 ns/op
Iteration  16: 9.851 ns/op
Iteration  17: 9.839 ns/op
Iteration  18: 9.837 ns/op
Iteration  19: 9.847 ns/op
Iteration  20: 9.835 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.500 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.842 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.844 ns/op
Iteration   2: 9.844 ns/op
Iteration   3: 9.860 ns/op
Iteration   4: 9.848 ns/op
Iteration   5: 9.840 ns/op
Iteration   6: 9.848 ns/op
Iteration   7: 9.849 ns/op
Iteration   8: 9.843 ns/op
Iteration   9: 9.851 ns/op
Iteration  10: 9.851 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.833 ns/op
Iteration  13: 9.837 ns/op
Iteration  14: 9.835 ns/op
Iteration  15: 9.839 ns/op
Iteration  16: 9.829 ns/op
Iteration  17: 9.849 ns/op
Iteration  18: 9.835 ns/op
Iteration  19: 9.830 ns/op
Iteration  20: 9.836 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.460 ns/op
# Warmup Iteration   2: 9.732 ns/op
# Warmup Iteration   3: 9.881 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.864 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.855 ns/op
Iteration   4: 9.866 ns/op
Iteration   5: 9.877 ns/op
Iteration   6: 9.875 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.869 ns/op
Iteration   9: 9.848 ns/op
Iteration  10: 9.874 ns/op
Iteration  11: 9.845 ns/op
Iteration  12: 9.858 ns/op
Iteration  13: 9.865 ns/op
Iteration  14: 9.869 ns/op
Iteration  15: 9.883 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.854 ns/op
Iteration  18: 9.862 ns/op
Iteration  19: 9.893 ns/op
Iteration  20: 9.865 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.503 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.886 ns/op
# Warmup Iteration   5: 9.891 ns/op
Iteration   1: 9.883 ns/op
Iteration   2: 9.874 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.872 ns/op
Iteration   5: 9.900 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.894 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.888 ns/op
Iteration  10: 9.882 ns/op
Iteration  11: 9.895 ns/op
Iteration  12: 9.899 ns/op
Iteration  13: 9.899 ns/op
Iteration  14: 9.879 ns/op
Iteration  15: 9.884 ns/op
Iteration  16: 9.910 ns/op
Iteration  17: 9.901 ns/op
Iteration  18: 9.888 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.889 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.468 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.832 ns/op
# Warmup Iteration   5: 9.826 ns/op
Iteration   1: 9.856 ns/op
Iteration   2: 9.835 ns/op
Iteration   3: 9.843 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.847 ns/op
Iteration   6: 9.840 ns/op
Iteration   7: 9.848 ns/op
Iteration   8: 9.839 ns/op
Iteration   9: 9.837 ns/op
Iteration  10: 9.836 ns/op
Iteration  11: 9.846 ns/op
Iteration  12: 9.839 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.834 ns/op
Iteration  15: 9.838 ns/op
Iteration  16: 9.828 ns/op
Iteration  17: 9.849 ns/op
Iteration  18: 9.845 ns/op
Iteration  19: 9.839 ns/op
Iteration  20: 9.838 ns/op


Result "benchmark.StringContains.stringContains":
  9.857 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (9.811, 9.857, 9.910), stdev = 0.021
  CI (99.9%): [9.850, 9.864] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  CW->bGhttp*1F_  avgt  100  190.898 ± 1.632  ns/op
StringContains.stringContains     http  CW->bGhttp*1F_  avgt  100    9.857 ± 0.007  ns/op

Benchmark result is saved to http_16_0.5_7.csv
