# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpH"v{-	w>8M$b4h7am(C_jX!"Gha)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 501.844 ns/op
# Warmup Iteration   2: 516.038 ns/op
# Warmup Iteration   3: 516.555 ns/op
# Warmup Iteration   4: 447.284 ns/op
# Warmup Iteration   5: 437.321 ns/op
Iteration   1: 441.947 ns/op
Iteration   2: 437.038 ns/op
Iteration   3: 437.602 ns/op
Iteration   4: 442.494 ns/op
Iteration   5: 437.023 ns/op
Iteration   6: 444.707 ns/op
Iteration   7: 437.063 ns/op
Iteration   8: 438.131 ns/op
Iteration   9: 447.098 ns/op
Iteration  10: 437.469 ns/op
Iteration  11: 437.308 ns/op
Iteration  12: 449.380 ns/op
Iteration  13: 436.760 ns/op
Iteration  14: 438.700 ns/op
Iteration  15: 437.047 ns/op
Iteration  16: 437.171 ns/op
Iteration  17: 438.905 ns/op
Iteration  18: 436.950 ns/op
Iteration  19: 436.859 ns/op
Iteration  20: 439.042 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 488.263 ns/op
# Warmup Iteration   2: 494.199 ns/op
# Warmup Iteration   3: 537.938 ns/op
# Warmup Iteration   4: 467.218 ns/op
# Warmup Iteration   5: 460.724 ns/op
Iteration   1: 465.441 ns/op
Iteration   2: 460.491 ns/op
Iteration   3: 460.608 ns/op
Iteration   4: 466.158 ns/op
Iteration   5: 460.516 ns/op
Iteration   6: 464.110 ns/op
Iteration   7: 465.039 ns/op
Iteration   8: 460.826 ns/op
Iteration   9: 471.053 ns/op
Iteration  10: 460.825 ns/op
Iteration  11: 460.900 ns/op
Iteration  12: 473.467 ns/op
Iteration  13: 460.702 ns/op
Iteration  14: 460.455 ns/op
Iteration  15: 462.940 ns/op
Iteration  16: 460.451 ns/op
Iteration  17: 460.597 ns/op
Iteration  18: 463.526 ns/op
Iteration  19: 460.520 ns/op
Iteration  20: 460.537 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 486.160 ns/op
# Warmup Iteration   2: 514.743 ns/op
# Warmup Iteration   3: 515.453 ns/op
# Warmup Iteration   4: 442.818 ns/op
# Warmup Iteration   5: 438.372 ns/op
Iteration   1: 441.819 ns/op
Iteration   2: 437.936 ns/op
Iteration   3: 443.248 ns/op
Iteration   4: 438.115 ns/op
Iteration   5: 438.062 ns/op
Iteration   6: 445.098 ns/op
Iteration   7: 438.032 ns/op
Iteration   8: 437.923 ns/op
Iteration   9: 447.561 ns/op
Iteration  10: 438.102 ns/op
Iteration  11: 447.871 ns/op
Iteration  12: 440.338 ns/op
Iteration  13: 437.497 ns/op
Iteration  14: 441.171 ns/op
Iteration  15: 437.706 ns/op
Iteration  16: 437.917 ns/op
Iteration  17: 440.905 ns/op
Iteration  18: 437.653 ns/op
Iteration  19: 437.807 ns/op
Iteration  20: 439.835 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 491.324 ns/op
# Warmup Iteration   2: 511.383 ns/op
# Warmup Iteration   3: 514.686 ns/op
# Warmup Iteration   4: 441.992 ns/op
# Warmup Iteration   5: 437.342 ns/op
Iteration   1: 441.470 ns/op
Iteration   2: 437.229 ns/op
Iteration   3: 442.813 ns/op
Iteration   4: 437.251 ns/op
Iteration   5: 436.972 ns/op
Iteration   6: 444.427 ns/op
Iteration   7: 437.029 ns/op
Iteration   8: 437.179 ns/op
Iteration   9: 447.112 ns/op
Iteration  10: 437.053 ns/op
Iteration  11: 443.734 ns/op
Iteration  12: 442.925 ns/op
Iteration  13: 437.052 ns/op
Iteration  14: 440.077 ns/op
Iteration  15: 437.152 ns/op
Iteration  16: 437.096 ns/op
Iteration  17: 439.544 ns/op
Iteration  18: 437.217 ns/op
Iteration  19: 437.184 ns/op
Iteration  20: 439.337 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 482.557 ns/op
# Warmup Iteration   2: 516.745 ns/op
# Warmup Iteration   3: 514.149 ns/op
# Warmup Iteration   4: 442.453 ns/op
# Warmup Iteration   5: 437.175 ns/op
Iteration   1: 441.458 ns/op
Iteration   2: 437.120 ns/op
Iteration   3: 443.446 ns/op
Iteration   4: 436.938 ns/op
Iteration   5: 437.443 ns/op
Iteration   6: 444.761 ns/op
Iteration   7: 438.461 ns/op
Iteration   8: 438.033 ns/op
Iteration   9: 447.426 ns/op
Iteration  10: 437.249 ns/op
Iteration  11: 445.875 ns/op
Iteration  12: 441.124 ns/op
Iteration  13: 437.062 ns/op
Iteration  14: 440.680 ns/op
Iteration  15: 437.056 ns/op
Iteration  16: 437.040 ns/op
Iteration  17: 439.862 ns/op
Iteration  18: 438.028 ns/op
Iteration  19: 438.190 ns/op
Iteration  20: 439.998 ns/op


Result "benchmark.StringContains.regexMatches":
  444.396 ±(99.9%) 3.365 ns/op [Average]
  (min, avg, max) = (436.760, 444.396, 473.467), stdev = 9.923
  CI (99.9%): [441.030, 447.761] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpH"v{-	w>8M$b4h7am(C_jX!"Gha)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.484 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.799 ns/op
# Warmup Iteration   4: 9.797 ns/op
# Warmup Iteration   5: 9.797 ns/op
Iteration   1: 9.793 ns/op
Iteration   2: 9.785 ns/op
Iteration   3: 9.785 ns/op
Iteration   4: 9.796 ns/op
Iteration   5: 9.802 ns/op
Iteration   6: 9.794 ns/op
Iteration   7: 9.794 ns/op
Iteration   8: 9.805 ns/op
Iteration   9: 9.788 ns/op
Iteration  10: 9.794 ns/op
Iteration  11: 9.782 ns/op
Iteration  12: 9.806 ns/op
Iteration  13: 9.798 ns/op
Iteration  14: 9.798 ns/op
Iteration  15: 9.762 ns/op
Iteration  16: 9.781 ns/op
Iteration  17: 9.799 ns/op
Iteration  18: 9.795 ns/op
Iteration  19: 9.781 ns/op
Iteration  20: 9.775 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.219 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.860 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.867 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.862 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.876 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.868 ns/op
Iteration   7: 9.869 ns/op
Iteration   8: 9.875 ns/op
Iteration   9: 9.868 ns/op
Iteration  10: 9.853 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.885 ns/op
Iteration  13: 9.876 ns/op
Iteration  14: 9.872 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.863 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.886 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.485 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.890 ns/op
# Warmup Iteration   4: 9.891 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.879 ns/op
Iteration   3: 9.895 ns/op
Iteration   4: 9.895 ns/op
Iteration   5: 9.907 ns/op
Iteration   6: 9.887 ns/op
Iteration   7: 9.885 ns/op
Iteration   8: 9.899 ns/op
Iteration   9: 9.895 ns/op
Iteration  10: 9.881 ns/op
Iteration  11: 9.885 ns/op
Iteration  12: 9.881 ns/op
Iteration  13: 9.902 ns/op
Iteration  14: 9.878 ns/op
Iteration  15: 9.882 ns/op
Iteration  16: 9.881 ns/op
Iteration  17: 9.883 ns/op
Iteration  18: 9.878 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.224 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.840 ns/op
# Warmup Iteration   4: 9.857 ns/op
# Warmup Iteration   5: 9.854 ns/op
Iteration   1: 9.843 ns/op
Iteration   2: 9.836 ns/op
Iteration   3: 9.830 ns/op
Iteration   4: 9.838 ns/op
Iteration   5: 9.855 ns/op
Iteration   6: 9.836 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.869 ns/op
Iteration   9: 9.841 ns/op
Iteration  10: 9.852 ns/op
Iteration  11: 9.847 ns/op
Iteration  12: 9.839 ns/op
Iteration  13: 9.836 ns/op
Iteration  14: 9.870 ns/op
Iteration  15: 9.847 ns/op
Iteration  16: 9.854 ns/op
Iteration  17: 9.836 ns/op
Iteration  18: 9.834 ns/op
Iteration  19: 9.835 ns/op
Iteration  20: 9.876 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.219 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.857 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.857 ns/op
Iteration   1: 9.847 ns/op
Iteration   2: 9.888 ns/op
Iteration   3: 9.876 ns/op
Iteration   4: 9.883 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.875 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.874 ns/op
Iteration   9: 9.858 ns/op
Iteration  10: 9.853 ns/op
Iteration  11: 9.855 ns/op
Iteration  12: 9.861 ns/op
Iteration  13: 9.857 ns/op
Iteration  14: 9.849 ns/op
Iteration  15: 9.863 ns/op
Iteration  16: 9.848 ns/op
Iteration  17: 9.865 ns/op
Iteration  18: 9.868 ns/op
Iteration  19: 9.854 ns/op
Iteration  20: 9.859 ns/op


Result "benchmark.StringContains.stringContains":
  9.852 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (9.762, 9.852, 9.907), stdev = 0.035
  CI (99.9%): [9.840, 9.864] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpH"v{-	w>8M$b4h7am(C_jX!"Gha  avgt  100  444.396 ± 3.365  ns/op
StringContains.stringContains     http  httpH"v{-	w>8M$b4h7am(C_jX!"Gha  avgt  100    9.852 ± 0.012  ns/op

Benchmark result is saved to http_32_0_6.csv
