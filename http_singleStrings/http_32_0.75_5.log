# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = <*fag|xs$
R: ^I4w\	5K#q=httpI*-)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 262.794 ns/op
# Warmup Iteration   2: 206.438 ns/op
# Warmup Iteration   3: 182.160 ns/op
# Warmup Iteration   4: 182.713 ns/op
# Warmup Iteration   5: 183.433 ns/op
Iteration   1: 184.414 ns/op
Iteration   2: 185.664 ns/op
Iteration   3: 180.410 ns/op
Iteration   4: 181.166 ns/op
Iteration   5: 181.194 ns/op
Iteration   6: 181.102 ns/op
Iteration   7: 181.172 ns/op
Iteration   8: 181.240 ns/op
Iteration   9: 181.185 ns/op
Iteration  10: 180.342 ns/op
Iteration  11: 181.215 ns/op
Iteration  12: 181.222 ns/op
Iteration  13: 182.478 ns/op
Iteration  14: 180.968 ns/op
Iteration  15: 180.867 ns/op
Iteration  16: 181.329 ns/op
Iteration  17: 181.702 ns/op
Iteration  18: 181.004 ns/op
Iteration  19: 181.048 ns/op
Iteration  20: 184.887 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 269.431 ns/op
# Warmup Iteration   2: 219.512 ns/op
# Warmup Iteration   3: 193.648 ns/op
# Warmup Iteration   4: 194.175 ns/op
# Warmup Iteration   5: 195.017 ns/op
Iteration   1: 191.725 ns/op
Iteration   2: 195.897 ns/op
Iteration   3: 197.052 ns/op
Iteration   4: 192.766 ns/op
Iteration   5: 192.627 ns/op
Iteration   6: 191.771 ns/op
Iteration   7: 192.598 ns/op
Iteration   8: 192.569 ns/op
Iteration   9: 192.534 ns/op
Iteration  10: 192.573 ns/op
Iteration  11: 192.409 ns/op
Iteration  12: 191.624 ns/op
Iteration  13: 192.606 ns/op
Iteration  14: 192.703 ns/op
Iteration  15: 192.292 ns/op
Iteration  16: 192.353 ns/op
Iteration  17: 191.897 ns/op
Iteration  18: 193.497 ns/op
Iteration  19: 192.293 ns/op
Iteration  20: 193.046 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 257.109 ns/op
# Warmup Iteration   2: 203.250 ns/op
# Warmup Iteration   3: 181.664 ns/op
# Warmup Iteration   4: 182.251 ns/op
# Warmup Iteration   5: 182.750 ns/op
Iteration   1: 183.771 ns/op
Iteration   2: 184.900 ns/op
Iteration   3: 179.644 ns/op
Iteration   4: 180.586 ns/op
Iteration   5: 180.542 ns/op
Iteration   6: 180.548 ns/op
Iteration   7: 180.580 ns/op
Iteration   8: 180.757 ns/op
Iteration   9: 180.615 ns/op
Iteration  10: 179.722 ns/op
Iteration  11: 182.452 ns/op
Iteration  12: 180.842 ns/op
Iteration  13: 183.529 ns/op
Iteration  14: 180.171 ns/op
Iteration  15: 180.239 ns/op
Iteration  16: 180.064 ns/op
Iteration  17: 180.337 ns/op
Iteration  18: 179.595 ns/op
Iteration  19: 180.097 ns/op
Iteration  20: 180.095 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 269.914 ns/op
# Warmup Iteration   2: 220.045 ns/op
# Warmup Iteration   3: 193.928 ns/op
# Warmup Iteration   4: 193.740 ns/op
# Warmup Iteration   5: 194.738 ns/op
Iteration   1: 192.426 ns/op
Iteration   2: 195.831 ns/op
Iteration   3: 196.905 ns/op
Iteration   4: 192.653 ns/op
Iteration   5: 192.296 ns/op
Iteration   6: 191.207 ns/op
Iteration   7: 192.633 ns/op
Iteration   8: 192.341 ns/op
Iteration   9: 192.430 ns/op
Iteration  10: 192.651 ns/op
Iteration  11: 197.036 ns/op
Iteration  12: 191.205 ns/op
Iteration  13: 192.430 ns/op
Iteration  14: 192.697 ns/op
Iteration  15: 193.307 ns/op
Iteration  16: 191.802 ns/op
Iteration  17: 191.209 ns/op
Iteration  18: 191.842 ns/op
Iteration  19: 191.677 ns/op
Iteration  20: 191.970 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 271.719 ns/op
# Warmup Iteration   2: 221.452 ns/op
# Warmup Iteration   3: 194.131 ns/op
# Warmup Iteration   4: 194.782 ns/op
# Warmup Iteration   5: 195.664 ns/op
Iteration   1: 192.372 ns/op
Iteration   2: 196.732 ns/op
Iteration   3: 198.375 ns/op
Iteration   4: 193.565 ns/op
Iteration   5: 194.814 ns/op
Iteration   6: 192.336 ns/op
Iteration   7: 193.356 ns/op
Iteration   8: 193.338 ns/op
Iteration   9: 193.452 ns/op
Iteration  10: 193.237 ns/op
Iteration  11: 192.360 ns/op
Iteration  12: 193.244 ns/op
Iteration  13: 193.481 ns/op
Iteration  14: 193.506 ns/op
Iteration  15: 193.242 ns/op
Iteration  16: 192.421 ns/op
Iteration  17: 193.193 ns/op
Iteration  18: 192.920 ns/op
Iteration  19: 193.435 ns/op
Iteration  20: 193.475 ns/op


Result "benchmark.StringContains.regexMatches":
  188.399 ±(99.9%) 2.031 ns/op [Average]
  (min, avg, max) = (179.595, 188.399, 198.375), stdev = 5.988
  CI (99.9%): [186.368, 190.430] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = <*fag|xs$
R: ^I4w\	5K#q=httpI*-)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 11.302 ns/op
# Warmup Iteration   2: 12.501 ns/op
# Warmup Iteration   3: 12.267 ns/op
# Warmup Iteration   4: 12.292 ns/op
# Warmup Iteration   5: 12.319 ns/op
Iteration   1: 12.303 ns/op
Iteration   2: 12.296 ns/op
Iteration   3: 12.281 ns/op
Iteration   4: 12.284 ns/op
Iteration   5: 12.301 ns/op
Iteration   6: 12.325 ns/op
Iteration   7: 12.314 ns/op
Iteration   8: 12.284 ns/op
Iteration   9: 12.300 ns/op
Iteration  10: 12.288 ns/op
Iteration  11: 12.302 ns/op
Iteration  12: 12.279 ns/op
Iteration  13: 12.287 ns/op
Iteration  14: 12.301 ns/op
Iteration  15: 12.310 ns/op
Iteration  16: 12.296 ns/op
Iteration  17: 12.317 ns/op
Iteration  18: 12.298 ns/op
Iteration  19: 12.339 ns/op
Iteration  20: 12.306 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.340 ns/op
# Warmup Iteration   2: 12.545 ns/op
# Warmup Iteration   3: 12.124 ns/op
# Warmup Iteration   4: 12.136 ns/op
# Warmup Iteration   5: 12.128 ns/op
Iteration   1: 12.141 ns/op
Iteration   2: 12.138 ns/op
Iteration   3: 12.123 ns/op
Iteration   4: 12.130 ns/op
Iteration   5: 12.136 ns/op
Iteration   6: 12.124 ns/op
Iteration   7: 12.147 ns/op
Iteration   8: 12.139 ns/op
Iteration   9: 12.128 ns/op
Iteration  10: 12.137 ns/op
Iteration  11: 12.132 ns/op
Iteration  12: 12.843 ns/op
Iteration  13: 12.842 ns/op
Iteration  14: 12.843 ns/op
Iteration  15: 12.844 ns/op
Iteration  16: 12.842 ns/op
Iteration  17: 12.842 ns/op
Iteration  18: 12.841 ns/op
Iteration  19: 12.842 ns/op
Iteration  20: 12.843 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 11.306 ns/op
# Warmup Iteration   2: 12.451 ns/op
# Warmup Iteration   3: 12.367 ns/op
# Warmup Iteration   4: 12.379 ns/op
# Warmup Iteration   5: 12.393 ns/op
Iteration   1: 12.358 ns/op
Iteration   2: 12.373 ns/op
Iteration   3: 12.388 ns/op
Iteration   4: 12.389 ns/op
Iteration   5: 12.368 ns/op
Iteration   6: 12.403 ns/op
Iteration   7: 12.353 ns/op
Iteration   8: 12.370 ns/op
Iteration   9: 12.413 ns/op
Iteration  10: 12.363 ns/op
Iteration  11: 12.405 ns/op
Iteration  12: 12.374 ns/op
Iteration  13: 12.368 ns/op
Iteration  14: 12.384 ns/op
Iteration  15: 12.372 ns/op
Iteration  16: 12.380 ns/op
Iteration  17: 12.368 ns/op
Iteration  18: 12.369 ns/op
Iteration  19: 12.367 ns/op
Iteration  20: 12.381 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.971 ns/op
# Warmup Iteration   2: 12.579 ns/op
# Warmup Iteration   3: 12.362 ns/op
# Warmup Iteration   4: 12.374 ns/op
# Warmup Iteration   5: 12.356 ns/op
Iteration   1: 12.373 ns/op
Iteration   2: 12.362 ns/op
Iteration   3: 12.358 ns/op
Iteration   4: 12.396 ns/op
Iteration   5: 12.404 ns/op
Iteration   6: 12.393 ns/op
Iteration   7: 12.375 ns/op
Iteration   8: 12.364 ns/op
Iteration   9: 12.360 ns/op
Iteration  10: 12.354 ns/op
Iteration  11: 12.368 ns/op
Iteration  12: 12.374 ns/op
Iteration  13: 12.383 ns/op
Iteration  14: 12.388 ns/op
Iteration  15: 12.377 ns/op
Iteration  16: 12.389 ns/op
Iteration  17: 12.411 ns/op
Iteration  18: 12.348 ns/op
Iteration  19: 12.392 ns/op
Iteration  20: 12.428 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.331 ns/op
# Warmup Iteration   2: 12.544 ns/op
# Warmup Iteration   3: 12.492 ns/op
# Warmup Iteration   4: 12.449 ns/op
# Warmup Iteration   5: 12.433 ns/op
Iteration   1: 12.465 ns/op
Iteration   2: 12.471 ns/op
Iteration   3: 12.490 ns/op
Iteration   4: 12.469 ns/op
Iteration   5: 12.405 ns/op
Iteration   6: 12.480 ns/op
Iteration   7: 12.472 ns/op
Iteration   8: 12.474 ns/op
Iteration   9: 12.493 ns/op
Iteration  10: 12.489 ns/op
Iteration  11: 12.427 ns/op
Iteration  12: 12.502 ns/op
Iteration  13: 12.445 ns/op
Iteration  14: 12.461 ns/op
Iteration  15: 12.467 ns/op
Iteration  16: 12.512 ns/op
Iteration  17: 12.455 ns/op
Iteration  18: 12.486 ns/op
Iteration  19: 12.456 ns/op
Iteration  20: 12.519 ns/op


Result "benchmark.StringContains.stringContains":
  12.396 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (12.123, 12.396, 12.844), stdev = 0.171
  CI (99.9%): [12.339, 12.454] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  <*fag|xs$
R: ^I4w\	5K#q=httpI*-  avgt  100  188.399 ± 2.031  ns/op
StringContains.stringContains     http  <*fag|xs$
R: ^I4w\	5K#q=httpI*-  avgt  100   12.396 ± 0.058  ns/op

Benchmark result is saved to http_32_0.75_5.csv
