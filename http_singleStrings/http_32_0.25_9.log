# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = _^,m?Q|+httpIe28qXnDL)8W(8@8{MV)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 440.403 ns/op
# Warmup Iteration   2: 454.088 ns/op
# Warmup Iteration   3: 424.424 ns/op
# Warmup Iteration   4: 360.203 ns/op
# Warmup Iteration   5: 363.492 ns/op
Iteration   1: 360.060 ns/op
Iteration   2: 365.280 ns/op
Iteration   3: 359.860 ns/op
Iteration   4: 367.016 ns/op
Iteration   5: 359.820 ns/op
Iteration   6: 359.637 ns/op
Iteration   7: 368.775 ns/op
Iteration   8: 359.722 ns/op
Iteration   9: 371.854 ns/op
Iteration  10: 359.507 ns/op
Iteration  11: 362.134 ns/op
Iteration  12: 359.901 ns/op
Iteration  13: 360.150 ns/op
Iteration  14: 361.199 ns/op
Iteration  15: 359.727 ns/op
Iteration  16: 361.085 ns/op
Iteration  17: 359.657 ns/op
Iteration  18: 360.894 ns/op
Iteration  19: 359.578 ns/op
Iteration  20: 359.560 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 398.225 ns/op
# Warmup Iteration   2: 384.077 ns/op
# Warmup Iteration   3: 329.343 ns/op
# Warmup Iteration   4: 302.021 ns/op
# Warmup Iteration   5: 304.815 ns/op
Iteration   1: 305.729 ns/op
Iteration   2: 301.960 ns/op
Iteration   3: 306.988 ns/op
Iteration   4: 302.585 ns/op
Iteration   5: 310.148 ns/op
Iteration   6: 302.090 ns/op
Iteration   7: 310.640 ns/op
Iteration   8: 302.065 ns/op
Iteration   9: 303.731 ns/op
Iteration  10: 301.758 ns/op
Iteration  11: 304.547 ns/op
Iteration  12: 302.163 ns/op
Iteration  13: 303.292 ns/op
Iteration  14: 302.097 ns/op
Iteration  15: 303.969 ns/op
Iteration  16: 302.067 ns/op
Iteration  17: 303.774 ns/op
Iteration  18: 302.105 ns/op
Iteration  19: 304.022 ns/op
Iteration  20: 303.831 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 426.828 ns/op
# Warmup Iteration   2: 429.948 ns/op
# Warmup Iteration   3: 397.228 ns/op
# Warmup Iteration   4: 354.298 ns/op
# Warmup Iteration   5: 359.937 ns/op
Iteration   1: 354.253 ns/op
Iteration   2: 358.782 ns/op
Iteration   3: 354.299 ns/op
Iteration   4: 362.399 ns/op
Iteration   5: 354.371 ns/op
Iteration   6: 362.090 ns/op
Iteration   7: 354.068 ns/op
Iteration   8: 354.559 ns/op
Iteration   9: 364.101 ns/op
Iteration  10: 354.148 ns/op
Iteration  11: 355.970 ns/op
Iteration  12: 354.378 ns/op
Iteration  13: 355.937 ns/op
Iteration  14: 354.441 ns/op
Iteration  15: 354.213 ns/op
Iteration  16: 355.604 ns/op
Iteration  17: 354.003 ns/op
Iteration  18: 356.095 ns/op
Iteration  19: 354.530 ns/op
Iteration  20: 356.364 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 420.913 ns/op
# Warmup Iteration   2: 423.058 ns/op
# Warmup Iteration   3: 425.295 ns/op
# Warmup Iteration   4: 381.653 ns/op
# Warmup Iteration   5: 384.638 ns/op
Iteration   1: 381.394 ns/op
Iteration   2: 386.306 ns/op
Iteration   3: 381.246 ns/op
Iteration   4: 382.462 ns/op
Iteration   5: 388.343 ns/op
Iteration   6: 381.528 ns/op
Iteration   7: 389.585 ns/op
Iteration   8: 381.397 ns/op
Iteration   9: 392.515 ns/op
Iteration  10: 381.033 ns/op
Iteration  11: 381.451 ns/op
Iteration  12: 383.114 ns/op
Iteration  13: 381.067 ns/op
Iteration  14: 382.858 ns/op
Iteration  15: 382.767 ns/op
Iteration  16: 381.899 ns/op
Iteration  17: 382.793 ns/op
Iteration  18: 381.034 ns/op
Iteration  19: 382.929 ns/op
Iteration  20: 380.979 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 421.555 ns/op
# Warmup Iteration   2: 430.620 ns/op
# Warmup Iteration   3: 397.336 ns/op
# Warmup Iteration   4: 354.691 ns/op
# Warmup Iteration   5: 358.143 ns/op
Iteration   1: 354.660 ns/op
Iteration   2: 359.206 ns/op
Iteration   3: 354.433 ns/op
Iteration   4: 360.559 ns/op
Iteration   5: 354.464 ns/op
Iteration   6: 362.605 ns/op
Iteration   7: 354.426 ns/op
Iteration   8: 354.535 ns/op
Iteration   9: 365.295 ns/op
Iteration  10: 354.568 ns/op
Iteration  11: 356.193 ns/op
Iteration  12: 354.508 ns/op
Iteration  13: 356.447 ns/op
Iteration  14: 354.589 ns/op
Iteration  15: 354.202 ns/op
Iteration  16: 356.544 ns/op
Iteration  17: 354.960 ns/op
Iteration  18: 356.851 ns/op
Iteration  19: 354.366 ns/op
Iteration  20: 356.845 ns/op


Result "benchmark.StringContains.regexMatches":
  352.365 ±(99.9%) 8.977 ns/op [Average]
  (min, avg, max) = (301.758, 352.365, 392.515), stdev = 26.468
  CI (99.9%): [343.389, 361.342] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = _^,m?Q|+httpIe28qXnDL)8W(8@8{MV)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.228 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.916 ns/op
# Warmup Iteration   4: 9.921 ns/op
# Warmup Iteration   5: 9.937 ns/op
Iteration   1: 9.937 ns/op
Iteration   2: 9.931 ns/op
Iteration   3: 9.941 ns/op
Iteration   4: 9.915 ns/op
Iteration   5: 9.895 ns/op
Iteration   6: 9.894 ns/op
Iteration   7: 9.935 ns/op
Iteration   8: 9.918 ns/op
Iteration   9: 9.918 ns/op
Iteration  10: 9.941 ns/op
Iteration  11: 9.939 ns/op
Iteration  12: 9.917 ns/op
Iteration  13: 9.916 ns/op
Iteration  14: 9.927 ns/op
Iteration  15: 9.926 ns/op
Iteration  16: 9.926 ns/op
Iteration  17: 9.906 ns/op
Iteration  18: 9.909 ns/op
Iteration  19: 9.896 ns/op
Iteration  20: 9.915 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.236 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.861 ns/op
# Warmup Iteration   4: 9.865 ns/op
# Warmup Iteration   5: 9.852 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.861 ns/op
Iteration   3: 9.856 ns/op
Iteration   4: 9.858 ns/op
Iteration   5: 9.855 ns/op
Iteration   6: 9.847 ns/op
Iteration   7: 9.845 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.862 ns/op
Iteration  10: 9.869 ns/op
Iteration  11: 9.868 ns/op
Iteration  12: 9.852 ns/op
Iteration  13: 9.853 ns/op
Iteration  14: 9.854 ns/op
Iteration  15: 9.851 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.848 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.213 ns/op
# Warmup Iteration   2: 9.714 ns/op
# Warmup Iteration   3: 9.886 ns/op
# Warmup Iteration   4: 9.901 ns/op
# Warmup Iteration   5: 9.905 ns/op
Iteration   1: 9.895 ns/op
Iteration   2: 9.910 ns/op
Iteration   3: 9.896 ns/op
Iteration   4: 9.899 ns/op
Iteration   5: 9.929 ns/op
Iteration   6: 9.900 ns/op
Iteration   7: 9.937 ns/op
Iteration   8: 9.895 ns/op
Iteration   9: 9.910 ns/op
Iteration  10: 9.907 ns/op
Iteration  11: 9.897 ns/op
Iteration  12: 9.885 ns/op
Iteration  13: 9.883 ns/op
Iteration  14: 9.885 ns/op
Iteration  15: 9.895 ns/op
Iteration  16: 9.893 ns/op
Iteration  17: 9.895 ns/op
Iteration  18: 9.893 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.884 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.231 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.867 ns/op
# Warmup Iteration   5: 9.872 ns/op
Iteration   1: 9.848 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.844 ns/op
Iteration   5: 9.862 ns/op
Iteration   6: 9.840 ns/op
Iteration   7: 9.854 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.862 ns/op
Iteration  10: 9.852 ns/op
Iteration  11: 9.861 ns/op
Iteration  12: 9.853 ns/op
Iteration  13: 9.862 ns/op
Iteration  14: 9.867 ns/op
Iteration  15: 9.863 ns/op
Iteration  16: 9.880 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.855 ns/op
Iteration  20: 9.859 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.889 ns/op
# Warmup Iteration   4: 9.877 ns/op
# Warmup Iteration   5: 9.873 ns/op
Iteration   1: 9.855 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.848 ns/op
Iteration   4: 9.866 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.873 ns/op
Iteration   8: 9.861 ns/op
Iteration   9: 9.888 ns/op
Iteration  10: 9.849 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.850 ns/op
Iteration  13: 9.861 ns/op
Iteration  14: 9.857 ns/op
Iteration  15: 9.867 ns/op
Iteration  16: 9.865 ns/op
Iteration  17: 9.865 ns/op
Iteration  18: 9.859 ns/op
Iteration  19: 9.849 ns/op
Iteration  20: 9.873 ns/op


Result "benchmark.StringContains.stringContains":
  9.880 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (9.840, 9.880, 9.941), stdev = 0.028
  CI (99.9%): [9.870, 9.889] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  _^,m?Q|+httpIe28qXnDL)8W(8@8{MV  avgt  100  352.365 ± 8.977  ns/op
StringContains.stringContains     http  _^,m?Q|+httpIe28qXnDL)8W(8@8{MV  avgt  100    9.880 ± 0.009  ns/op

Benchmark result is saved to http_32_0.25_9.csv
