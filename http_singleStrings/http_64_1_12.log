# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = <v6bG]wTdD r CkEvDqk|s,'tU/p&q]@zZnuX7RwV4`Q~:tOk/ xQ(psF3iv]	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 255.563 ns/op
# Warmup Iteration   2: 211.097 ns/op
# Warmup Iteration   3: 174.571 ns/op
# Warmup Iteration   4: 175.114 ns/op
# Warmup Iteration   5: 177.072 ns/op
Iteration   1: 176.988 ns/op
Iteration   2: 177.638 ns/op
Iteration   3: 173.371 ns/op
Iteration   4: 172.882 ns/op
Iteration   5: 173.638 ns/op
Iteration   6: 173.681 ns/op
Iteration   7: 174.650 ns/op
Iteration   8: 174.105 ns/op
Iteration   9: 173.582 ns/op
Iteration  10: 173.691 ns/op
Iteration  11: 173.544 ns/op
Iteration  12: 174.939 ns/op
Iteration  13: 173.355 ns/op
Iteration  14: 172.786 ns/op
Iteration  15: 173.260 ns/op
Iteration  16: 173.246 ns/op
Iteration  17: 173.320 ns/op
Iteration  18: 173.515 ns/op
Iteration  19: 173.633 ns/op
Iteration  20: 173.666 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 265.893 ns/op
# Warmup Iteration   2: 227.214 ns/op
# Warmup Iteration   3: 187.239 ns/op
# Warmup Iteration   4: 187.918 ns/op
# Warmup Iteration   5: 188.695 ns/op
Iteration   1: 189.764 ns/op
Iteration   2: 185.685 ns/op
Iteration   3: 190.955 ns/op
Iteration   4: 186.573 ns/op
Iteration   5: 186.455 ns/op
Iteration   6: 186.437 ns/op
Iteration   7: 186.447 ns/op
Iteration   8: 185.685 ns/op
Iteration   9: 186.528 ns/op
Iteration  10: 186.456 ns/op
Iteration  11: 186.468 ns/op
Iteration  12: 190.295 ns/op
Iteration  13: 186.927 ns/op
Iteration  14: 185.900 ns/op
Iteration  15: 186.291 ns/op
Iteration  16: 186.626 ns/op
Iteration  17: 186.464 ns/op
Iteration  18: 186.495 ns/op
Iteration  19: 186.615 ns/op
Iteration  20: 185.930 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 239.694 ns/op
# Warmup Iteration   2: 183.694 ns/op
# Warmup Iteration   3: 155.637 ns/op
# Warmup Iteration   4: 155.899 ns/op
# Warmup Iteration   5: 156.707 ns/op
Iteration   1: 157.561 ns/op
Iteration   2: 158.563 ns/op
Iteration   3: 155.002 ns/op
Iteration   4: 155.022 ns/op
Iteration   5: 154.859 ns/op
Iteration   6: 154.896 ns/op
Iteration   7: 154.866 ns/op
Iteration   8: 154.794 ns/op
Iteration   9: 155.312 ns/op
Iteration  10: 155.258 ns/op
Iteration  11: 155.498 ns/op
Iteration  12: 154.631 ns/op
Iteration  13: 154.379 ns/op
Iteration  14: 154.342 ns/op
Iteration  15: 154.345 ns/op
Iteration  16: 154.312 ns/op
Iteration  17: 154.312 ns/op
Iteration  18: 154.755 ns/op
Iteration  19: 154.407 ns/op
Iteration  20: 154.373 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 250.680 ns/op
# Warmup Iteration   2: 198.952 ns/op
# Warmup Iteration   3: 165.598 ns/op
# Warmup Iteration   4: 165.933 ns/op
# Warmup Iteration   5: 166.631 ns/op
Iteration   1: 168.354 ns/op
Iteration   2: 168.515 ns/op
Iteration   3: 164.688 ns/op
Iteration   4: 164.657 ns/op
Iteration   5: 164.707 ns/op
Iteration   6: 164.705 ns/op
Iteration   7: 164.707 ns/op
Iteration   8: 165.008 ns/op
Iteration   9: 164.783 ns/op
Iteration  10: 164.694 ns/op
Iteration  11: 165.781 ns/op
Iteration  12: 163.807 ns/op
Iteration  13: 164.224 ns/op
Iteration  14: 164.190 ns/op
Iteration  15: 164.164 ns/op
Iteration  16: 164.165 ns/op
Iteration  17: 164.087 ns/op
Iteration  18: 165.859 ns/op
Iteration  19: 164.221 ns/op
Iteration  20: 164.277 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 249.058 ns/op
# Warmup Iteration   2: 196.591 ns/op
# Warmup Iteration   3: 165.273 ns/op
# Warmup Iteration   4: 165.841 ns/op
# Warmup Iteration   5: 166.452 ns/op
Iteration   1: 167.315 ns/op
Iteration   2: 168.470 ns/op
Iteration   3: 164.712 ns/op
Iteration   4: 164.552 ns/op
Iteration   5: 164.401 ns/op
Iteration   6: 164.431 ns/op
Iteration   7: 164.442 ns/op
Iteration   8: 165.308 ns/op
Iteration   9: 164.614 ns/op
Iteration  10: 164.607 ns/op
Iteration  11: 164.725 ns/op
Iteration  12: 165.773 ns/op
Iteration  13: 163.674 ns/op
Iteration  14: 164.161 ns/op
Iteration  15: 164.050 ns/op
Iteration  16: 164.252 ns/op
Iteration  17: 164.127 ns/op
Iteration  18: 164.144 ns/op
Iteration  19: 165.513 ns/op
Iteration  20: 164.467 ns/op


Result "benchmark.StringContains.regexMatches":
  169.173 ±(99.9%) 3.676 ns/op [Average]
  (min, avg, max) = (154.312, 169.173, 190.955), stdev = 10.838
  CI (99.9%): [165.497, 172.849] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = <v6bG]wTdD r CkEvDqk|s,'tU/p&q]@zZnuX7RwV4`Q~:tOk/ xQ(psF3iv]	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.465 ns/op
# Warmup Iteration   2: 15.735 ns/op
# Warmup Iteration   3: 16.024 ns/op
# Warmup Iteration   4: 16.020 ns/op
# Warmup Iteration   5: 16.019 ns/op
Iteration   1: 16.019 ns/op
Iteration   2: 16.019 ns/op
Iteration   3: 16.018 ns/op
Iteration   4: 16.019 ns/op
Iteration   5: 16.020 ns/op
Iteration   6: 16.018 ns/op
Iteration   7: 16.021 ns/op
Iteration   8: 16.022 ns/op
Iteration   9: 16.019 ns/op
Iteration  10: 16.019 ns/op
Iteration  11: 16.020 ns/op
Iteration  12: 17.514 ns/op
Iteration  13: 17.507 ns/op
Iteration  14: 17.515 ns/op
Iteration  15: 17.514 ns/op
Iteration  16: 17.510 ns/op
Iteration  17: 17.511 ns/op
Iteration  18: 17.498 ns/op
Iteration  19: 17.501 ns/op
Iteration  20: 17.508 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.464 ns/op
# Warmup Iteration   2: 15.731 ns/op
# Warmup Iteration   3: 16.020 ns/op
# Warmup Iteration   4: 16.020 ns/op
# Warmup Iteration   5: 16.020 ns/op
Iteration   1: 16.017 ns/op
Iteration   2: 16.019 ns/op
Iteration   3: 16.308 ns/op
Iteration   4: 16.020 ns/op
Iteration   5: 16.020 ns/op
Iteration   6: 16.019 ns/op
Iteration   7: 16.018 ns/op
Iteration   8: 16.021 ns/op
Iteration   9: 16.021 ns/op
Iteration  10: 16.019 ns/op
Iteration  11: 16.019 ns/op
Iteration  12: 17.515 ns/op
Iteration  13: 17.515 ns/op
Iteration  14: 17.514 ns/op
Iteration  15: 17.510 ns/op
Iteration  16: 17.514 ns/op
Iteration  17: 17.514 ns/op
Iteration  18: 17.515 ns/op
Iteration  19: 17.514 ns/op
Iteration  20: 17.515 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.498 ns/op
# Warmup Iteration   2: 15.734 ns/op
# Warmup Iteration   3: 16.023 ns/op
# Warmup Iteration   4: 16.024 ns/op
# Warmup Iteration   5: 16.022 ns/op
Iteration   1: 16.024 ns/op
Iteration   2: 16.023 ns/op
Iteration   3: 16.313 ns/op
Iteration   4: 16.026 ns/op
Iteration   5: 16.021 ns/op
Iteration   6: 16.022 ns/op
Iteration   7: 16.019 ns/op
Iteration   8: 16.026 ns/op
Iteration   9: 16.020 ns/op
Iteration  10: 16.022 ns/op
Iteration  11: 16.024 ns/op
Iteration  12: 17.516 ns/op
Iteration  13: 17.514 ns/op
Iteration  14: 17.516 ns/op
Iteration  15: 17.516 ns/op
Iteration  16: 17.517 ns/op
Iteration  17: 17.519 ns/op
Iteration  18: 17.514 ns/op
Iteration  19: 17.515 ns/op
Iteration  20: 17.518 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.408 ns/op
# Warmup Iteration   2: 15.709 ns/op
# Warmup Iteration   3: 16.060 ns/op
# Warmup Iteration   4: 16.065 ns/op
# Warmup Iteration   5: 16.057 ns/op
Iteration   1: 16.059 ns/op
Iteration   2: 16.058 ns/op
Iteration   3: 16.061 ns/op
Iteration   4: 16.057 ns/op
Iteration   5: 16.058 ns/op
Iteration   6: 16.060 ns/op
Iteration   7: 16.059 ns/op
Iteration   8: 16.060 ns/op
Iteration   9: 16.062 ns/op
Iteration  10: 16.057 ns/op
Iteration  11: 16.062 ns/op
Iteration  12: 16.061 ns/op
Iteration  13: 16.058 ns/op
Iteration  14: 16.058 ns/op
Iteration  15: 16.057 ns/op
Iteration  16: 16.062 ns/op
Iteration  17: 16.334 ns/op
Iteration  18: 16.054 ns/op
Iteration  19: 16.064 ns/op
Iteration  20: 16.057 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.407 ns/op
# Warmup Iteration   2: 15.727 ns/op
# Warmup Iteration   3: 15.998 ns/op
# Warmup Iteration   4: 15.989 ns/op
# Warmup Iteration   5: 15.993 ns/op
Iteration   1: 15.992 ns/op
Iteration   2: 15.988 ns/op
Iteration   3: 15.986 ns/op
Iteration   4: 15.994 ns/op
Iteration   5: 15.993 ns/op
Iteration   6: 15.988 ns/op
Iteration   7: 15.988 ns/op
Iteration   8: 16.018 ns/op
Iteration   9: 15.992 ns/op
Iteration  10: 15.994 ns/op
Iteration  11: 15.990 ns/op
Iteration  12: 15.993 ns/op
Iteration  13: 15.991 ns/op
Iteration  14: 15.994 ns/op
Iteration  15: 15.995 ns/op
Iteration  16: 15.992 ns/op
Iteration  17: 15.996 ns/op
Iteration  18: 15.991 ns/op
Iteration  19: 15.993 ns/op
Iteration  20: 15.992 ns/op


Result "benchmark.StringContains.stringContains":
  16.434 ±(99.9%) 0.224 ns/op [Average]
  (min, avg, max) = (15.986, 16.434, 17.519), stdev = 0.662
  CI (99.9%): [16.210, 16.659] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  <v6bG]wTdD r CkEvDqk|s,'tU/p&q]@zZnuX7RwV4`Q~:tOk/ xQ(psF3iv]	  avgt  100  169.173 ± 3.676  ns/op
StringContains.stringContains     http  <v6bG]wTdD r CkEvDqk|s,'tU/p&q]@zZnuX7RwV4`Q~:tOk/ xQ(psF3iv]	  avgt  100   16.434 ± 0.224  ns/op

Benchmark result is saved to http_64_1_12.csv
