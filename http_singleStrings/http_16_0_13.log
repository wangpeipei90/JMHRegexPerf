# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http}56bN7*v9qA})

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 339.916 ns/op
# Warmup Iteration   2: 349.834 ns/op
# Warmup Iteration   3: 261.813 ns/op
# Warmup Iteration   4: 257.878 ns/op
# Warmup Iteration   5: 257.340 ns/op
Iteration   1: 256.503 ns/op
Iteration   2: 259.855 ns/op
Iteration   3: 255.510 ns/op
Iteration   4: 261.084 ns/op
Iteration   5: 262.536 ns/op
Iteration   6: 255.454 ns/op
Iteration   7: 256.697 ns/op
Iteration   8: 255.057 ns/op
Iteration   9: 256.454 ns/op
Iteration  10: 256.475 ns/op
Iteration  11: 255.297 ns/op
Iteration  12: 256.399 ns/op
Iteration  13: 256.240 ns/op
Iteration  14: 255.135 ns/op
Iteration  15: 257.894 ns/op
Iteration  16: 255.244 ns/op
Iteration  17: 256.556 ns/op
Iteration  18: 256.897 ns/op
Iteration  19: 255.871 ns/op
Iteration  20: 257.473 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 331.401 ns/op
# Warmup Iteration   2: 345.791 ns/op
# Warmup Iteration   3: 259.055 ns/op
# Warmup Iteration   4: 257.887 ns/op
# Warmup Iteration   5: 258.702 ns/op
Iteration   1: 255.432 ns/op
Iteration   2: 259.677 ns/op
Iteration   3: 257.609 ns/op
Iteration   4: 260.328 ns/op
Iteration   5: 263.425 ns/op
Iteration   6: 255.611 ns/op
Iteration   7: 256.961 ns/op
Iteration   8: 256.813 ns/op
Iteration   9: 255.445 ns/op
Iteration  10: 256.440 ns/op
Iteration  11: 255.396 ns/op
Iteration  12: 256.726 ns/op
Iteration  13: 256.724 ns/op
Iteration  14: 255.240 ns/op
Iteration  15: 256.668 ns/op
Iteration  16: 255.386 ns/op
Iteration  17: 256.427 ns/op
Iteration  18: 256.737 ns/op
Iteration  19: 255.263 ns/op
Iteration  20: 256.974 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 336.458 ns/op
# Warmup Iteration   2: 345.433 ns/op
# Warmup Iteration   3: 259.654 ns/op
# Warmup Iteration   4: 257.803 ns/op
# Warmup Iteration   5: 258.312 ns/op
Iteration   1: 255.366 ns/op
Iteration   2: 260.335 ns/op
Iteration   3: 257.014 ns/op
Iteration   4: 259.114 ns/op
Iteration   5: 262.361 ns/op
Iteration   6: 254.972 ns/op
Iteration   7: 256.162 ns/op
Iteration   8: 255.840 ns/op
Iteration   9: 254.995 ns/op
Iteration  10: 255.936 ns/op
Iteration  11: 254.730 ns/op
Iteration  12: 255.693 ns/op
Iteration  13: 256.308 ns/op
Iteration  14: 254.506 ns/op
Iteration  15: 255.868 ns/op
Iteration  16: 254.689 ns/op
Iteration  17: 255.865 ns/op
Iteration  18: 256.705 ns/op
Iteration  19: 254.675 ns/op
Iteration  20: 256.284 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 329.030 ns/op
# Warmup Iteration   2: 337.965 ns/op
# Warmup Iteration   3: 257.303 ns/op
# Warmup Iteration   4: 257.930 ns/op
# Warmup Iteration   5: 258.453 ns/op
Iteration   1: 255.450 ns/op
Iteration   2: 259.833 ns/op
Iteration   3: 259.210 ns/op
Iteration   4: 257.460 ns/op
Iteration   5: 262.500 ns/op
Iteration   6: 255.252 ns/op
Iteration   7: 256.859 ns/op
Iteration   8: 256.371 ns/op
Iteration   9: 255.398 ns/op
Iteration  10: 256.588 ns/op
Iteration  11: 255.201 ns/op
Iteration  12: 256.125 ns/op
Iteration  13: 256.372 ns/op
Iteration  14: 254.989 ns/op
Iteration  15: 256.117 ns/op
Iteration  16: 255.031 ns/op
Iteration  17: 257.578 ns/op
Iteration  18: 256.290 ns/op
Iteration  19: 255.246 ns/op
Iteration  20: 258.300 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 333.598 ns/op
# Warmup Iteration   2: 336.816 ns/op
# Warmup Iteration   3: 257.236 ns/op
# Warmup Iteration   4: 257.909 ns/op
# Warmup Iteration   5: 259.600 ns/op
Iteration   1: 254.201 ns/op
Iteration   2: 258.849 ns/op
Iteration   3: 257.257 ns/op
Iteration   4: 257.073 ns/op
Iteration   5: 261.975 ns/op
Iteration   6: 254.445 ns/op
Iteration   7: 255.892 ns/op
Iteration   8: 255.857 ns/op
Iteration   9: 254.550 ns/op
Iteration  10: 255.675 ns/op
Iteration  11: 255.357 ns/op
Iteration  12: 257.033 ns/op
Iteration  13: 255.784 ns/op
Iteration  14: 254.398 ns/op
Iteration  15: 256.462 ns/op
Iteration  16: 254.384 ns/op
Iteration  17: 256.184 ns/op
Iteration  18: 255.948 ns/op
Iteration  19: 254.204 ns/op
Iteration  20: 255.953 ns/op


Result "benchmark.StringContains.regexMatches":
  256.630 ±(99.9%) 0.665 ns/op [Average]
  (min, avg, max) = (254.201, 256.630, 263.425), stdev = 1.962
  CI (99.9%): [255.964, 257.295] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http}56bN7*v9qA})

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.463 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.853 ns/op
# Warmup Iteration   4: 9.837 ns/op
# Warmup Iteration   5: 9.834 ns/op
Iteration   1: 9.821 ns/op
Iteration   2: 9.836 ns/op
Iteration   3: 9.834 ns/op
Iteration   4: 9.824 ns/op
Iteration   5: 9.833 ns/op
Iteration   6: 9.837 ns/op
Iteration   7: 9.828 ns/op
Iteration   8: 9.833 ns/op
Iteration   9: 9.831 ns/op
Iteration  10: 9.821 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.845 ns/op
Iteration  13: 9.844 ns/op
Iteration  14: 9.824 ns/op
Iteration  15: 9.844 ns/op
Iteration  16: 9.843 ns/op
Iteration  17: 9.838 ns/op
Iteration  18: 9.836 ns/op
Iteration  19: 9.837 ns/op
Iteration  20: 9.833 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.466 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.804 ns/op
# Warmup Iteration   4: 9.800 ns/op
# Warmup Iteration   5: 9.791 ns/op
Iteration   1: 9.815 ns/op
Iteration   2: 9.787 ns/op
Iteration   3: 9.784 ns/op
Iteration   4: 9.801 ns/op
Iteration   5: 9.800 ns/op
Iteration   6: 9.787 ns/op
Iteration   7: 9.788 ns/op
Iteration   8: 9.773 ns/op
Iteration   9: 9.796 ns/op
Iteration  10: 9.783 ns/op
Iteration  11: 9.790 ns/op
Iteration  12: 9.801 ns/op
Iteration  13: 9.799 ns/op
Iteration  14: 9.805 ns/op
Iteration  15: 9.800 ns/op
Iteration  16: 9.807 ns/op
Iteration  17: 9.818 ns/op
Iteration  18: 9.803 ns/op
Iteration  19: 9.805 ns/op
Iteration  20: 9.812 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.486 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.874 ns/op
# Warmup Iteration   4: 9.856 ns/op
# Warmup Iteration   5: 9.839 ns/op
Iteration   1: 9.874 ns/op
Iteration   2: 9.870 ns/op
Iteration   3: 9.865 ns/op
Iteration   4: 9.872 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.878 ns/op
Iteration   7: 9.862 ns/op
Iteration   8: 9.867 ns/op
Iteration   9: 9.843 ns/op
Iteration  10: 9.862 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.857 ns/op
Iteration  18: 9.866 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.873 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.184 ns/op
# Warmup Iteration   2: 9.737 ns/op
# Warmup Iteration   3: 9.830 ns/op
# Warmup Iteration   4: 9.838 ns/op
# Warmup Iteration   5: 9.836 ns/op
Iteration   1: 9.813 ns/op
Iteration   2: 9.824 ns/op
Iteration   3: 9.831 ns/op
Iteration   4: 9.832 ns/op
Iteration   5: 9.824 ns/op
Iteration   6: 9.817 ns/op
Iteration   7: 9.830 ns/op
Iteration   8: 9.838 ns/op
Iteration   9: 9.827 ns/op
Iteration  10: 9.830 ns/op
Iteration  11: 9.818 ns/op
Iteration  12: 9.814 ns/op
Iteration  13: 9.821 ns/op
Iteration  14: 9.812 ns/op
Iteration  15: 9.824 ns/op
Iteration  16: 9.831 ns/op
Iteration  17: 9.826 ns/op
Iteration  18: 9.832 ns/op
Iteration  19: 9.818 ns/op
Iteration  20: 9.832 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.817 ns/op
# Warmup Iteration   4: 9.835 ns/op
# Warmup Iteration   5: 9.840 ns/op
Iteration   1: 9.841 ns/op
Iteration   2: 9.845 ns/op
Iteration   3: 9.829 ns/op
Iteration   4: 9.835 ns/op
Iteration   5: 9.864 ns/op
Iteration   6: 9.847 ns/op
Iteration   7: 9.847 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.864 ns/op
Iteration  10: 9.863 ns/op
Iteration  11: 9.857 ns/op
Iteration  12: 9.857 ns/op
Iteration  13: 9.841 ns/op
Iteration  14: 9.831 ns/op
Iteration  15: 9.829 ns/op
Iteration  16: 9.843 ns/op
Iteration  17: 9.846 ns/op
Iteration  18: 9.827 ns/op
Iteration  19: 9.844 ns/op
Iteration  20: 9.848 ns/op


Result "benchmark.StringContains.stringContains":
  9.834 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (9.773, 9.834, 9.879), stdev = 0.025
  CI (99.9%): [9.826, 9.843] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http}56bN7*v9qA}  avgt  100  256.630 ± 0.665  ns/op
StringContains.stringContains     http  http}56bN7*v9qA}  avgt  100    9.834 ± 0.009  ns/op

Benchmark result is saved to http_16_0_13.csv
