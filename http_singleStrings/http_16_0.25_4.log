# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 0j+^httpbeOYcC$0)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 310.626 ns/op
# Warmup Iteration   2: 311.296 ns/op
# Warmup Iteration   3: 224.833 ns/op
# Warmup Iteration   4: 227.213 ns/op
# Warmup Iteration   5: 228.052 ns/op
Iteration   1: 229.039 ns/op
Iteration   2: 224.695 ns/op
Iteration   3: 230.791 ns/op
Iteration   4: 232.448 ns/op
Iteration   5: 224.709 ns/op
Iteration   6: 226.058 ns/op
Iteration   7: 226.114 ns/op
Iteration   8: 224.766 ns/op
Iteration   9: 225.836 ns/op
Iteration  10: 225.946 ns/op
Iteration  11: 225.926 ns/op
Iteration  12: 224.752 ns/op
Iteration  13: 229.638 ns/op
Iteration  14: 226.465 ns/op
Iteration  15: 225.821 ns/op
Iteration  16: 226.905 ns/op
Iteration  17: 227.016 ns/op
Iteration  18: 224.727 ns/op
Iteration  19: 225.558 ns/op
Iteration  20: 225.626 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 304.013 ns/op
# Warmup Iteration   2: 297.726 ns/op
# Warmup Iteration   3: 225.485 ns/op
# Warmup Iteration   4: 227.816 ns/op
# Warmup Iteration   5: 228.458 ns/op
Iteration   1: 229.479 ns/op
Iteration   2: 225.830 ns/op
Iteration   3: 230.614 ns/op
Iteration   4: 231.783 ns/op
Iteration   5: 225.468 ns/op
Iteration   6: 226.343 ns/op
Iteration   7: 226.500 ns/op
Iteration   8: 225.824 ns/op
Iteration   9: 226.548 ns/op
Iteration  10: 226.476 ns/op
Iteration  11: 226.564 ns/op
Iteration  12: 225.344 ns/op
Iteration  13: 226.511 ns/op
Iteration  14: 226.528 ns/op
Iteration  15: 225.402 ns/op
Iteration  16: 226.461 ns/op
Iteration  17: 227.390 ns/op
Iteration  18: 225.650 ns/op
Iteration  19: 226.018 ns/op
Iteration  20: 227.412 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 309.937 ns/op
# Warmup Iteration   2: 297.768 ns/op
# Warmup Iteration   3: 225.258 ns/op
# Warmup Iteration   4: 228.615 ns/op
# Warmup Iteration   5: 228.329 ns/op
Iteration   1: 229.046 ns/op
Iteration   2: 225.088 ns/op
Iteration   3: 230.232 ns/op
Iteration   4: 231.664 ns/op
Iteration   5: 225.185 ns/op
Iteration   6: 226.170 ns/op
Iteration   7: 226.132 ns/op
Iteration   8: 225.132 ns/op
Iteration   9: 226.258 ns/op
Iteration  10: 226.291 ns/op
Iteration  11: 226.126 ns/op
Iteration  12: 225.173 ns/op
Iteration  13: 226.253 ns/op
Iteration  14: 226.529 ns/op
Iteration  15: 225.187 ns/op
Iteration  16: 227.966 ns/op
Iteration  17: 228.499 ns/op
Iteration  18: 225.213 ns/op
Iteration  19: 226.040 ns/op
Iteration  20: 225.646 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 307.129 ns/op
# Warmup Iteration   2: 295.068 ns/op
# Warmup Iteration   3: 226.684 ns/op
# Warmup Iteration   4: 228.032 ns/op
# Warmup Iteration   5: 228.628 ns/op
Iteration   1: 229.315 ns/op
Iteration   2: 225.548 ns/op
Iteration   3: 230.621 ns/op
Iteration   4: 232.073 ns/op
Iteration   5: 225.633 ns/op
Iteration   6: 226.844 ns/op
Iteration   7: 226.714 ns/op
Iteration   8: 226.575 ns/op
Iteration   9: 225.583 ns/op
Iteration  10: 226.595 ns/op
Iteration  11: 226.672 ns/op
Iteration  12: 225.515 ns/op
Iteration  13: 226.520 ns/op
Iteration  14: 226.603 ns/op
Iteration  15: 225.534 ns/op
Iteration  16: 226.594 ns/op
Iteration  17: 227.799 ns/op
Iteration  18: 225.544 ns/op
Iteration  19: 226.147 ns/op
Iteration  20: 226.107 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 312.011 ns/op
# Warmup Iteration   2: 296.642 ns/op
# Warmup Iteration   3: 225.186 ns/op
# Warmup Iteration   4: 227.398 ns/op
# Warmup Iteration   5: 228.352 ns/op
Iteration   1: 229.297 ns/op
Iteration   2: 225.186 ns/op
Iteration   3: 230.407 ns/op
Iteration   4: 231.708 ns/op
Iteration   5: 225.270 ns/op
Iteration   6: 226.610 ns/op
Iteration   7: 226.219 ns/op
Iteration   8: 226.568 ns/op
Iteration   9: 225.280 ns/op
Iteration  10: 226.747 ns/op
Iteration  11: 226.508 ns/op
Iteration  12: 225.257 ns/op
Iteration  13: 226.431 ns/op
Iteration  14: 226.276 ns/op
Iteration  15: 225.110 ns/op
Iteration  16: 227.850 ns/op
Iteration  17: 226.821 ns/op
Iteration  18: 225.209 ns/op
Iteration  19: 226.851 ns/op
Iteration  20: 227.471 ns/op


Result "benchmark.StringContains.regexMatches":
  226.804 ±(99.9%) 0.622 ns/op [Average]
  (min, avg, max) = (224.695, 226.804, 232.448), stdev = 1.835
  CI (99.9%): [226.182, 227.427] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 0j+^httpbeOYcC$0)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.191 ns/op
# Warmup Iteration   2: 9.737 ns/op
# Warmup Iteration   3: 9.869 ns/op
# Warmup Iteration   4: 9.849 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.861 ns/op
Iteration   2: 9.865 ns/op
Iteration   3: 9.848 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.848 ns/op
Iteration   6: 9.858 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.865 ns/op
Iteration   9: 9.841 ns/op
Iteration  10: 9.859 ns/op
Iteration  11: 9.880 ns/op
Iteration  12: 9.872 ns/op
Iteration  13: 9.850 ns/op
Iteration  14: 9.847 ns/op
Iteration  15: 9.846 ns/op
Iteration  16: 9.858 ns/op
Iteration  17: 9.841 ns/op
Iteration  18: 9.837 ns/op
Iteration  19: 9.853 ns/op
Iteration  20: 9.851 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.466 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.851 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.868 ns/op
Iteration   1: 9.852 ns/op
Iteration   2: 9.886 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.856 ns/op
Iteration   5: 9.871 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.866 ns/op
Iteration   8: 9.855 ns/op
Iteration   9: 9.847 ns/op
Iteration  10: 9.851 ns/op
Iteration  11: 9.861 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.834 ns/op
Iteration  14: 9.843 ns/op
Iteration  15: 9.859 ns/op
Iteration  16: 9.848 ns/op
Iteration  17: 9.844 ns/op
Iteration  18: 9.856 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.854 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.187 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.833 ns/op
# Warmup Iteration   4: 9.825 ns/op
# Warmup Iteration   5: 9.825 ns/op
Iteration   1: 9.828 ns/op
Iteration   2: 9.838 ns/op
Iteration   3: 9.831 ns/op
Iteration   4: 9.825 ns/op
Iteration   5: 9.821 ns/op
Iteration   6: 9.834 ns/op
Iteration   7: 9.839 ns/op
Iteration   8: 9.823 ns/op
Iteration   9: 9.819 ns/op
Iteration  10: 9.816 ns/op
Iteration  11: 9.820 ns/op
Iteration  12: 9.830 ns/op
Iteration  13: 9.830 ns/op
Iteration  14: 9.831 ns/op
Iteration  15: 9.838 ns/op
Iteration  16: 9.822 ns/op
Iteration  17: 9.825 ns/op
Iteration  18: 9.825 ns/op
Iteration  19: 9.846 ns/op
Iteration  20: 9.815 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.523 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.861 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.877 ns/op
Iteration   1: 9.867 ns/op
Iteration   2: 9.849 ns/op
Iteration   3: 9.866 ns/op
Iteration   4: 9.868 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.849 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.865 ns/op
Iteration  10: 9.855 ns/op
Iteration  11: 9.852 ns/op
Iteration  12: 9.870 ns/op
Iteration  13: 9.863 ns/op
Iteration  14: 9.867 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.874 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.871 ns/op
Iteration  19: 9.869 ns/op
Iteration  20: 9.893 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.450 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.888 ns/op
# Warmup Iteration   5: 9.873 ns/op
Iteration   1: 9.870 ns/op
Iteration   2: 9.872 ns/op
Iteration   3: 9.856 ns/op
Iteration   4: 9.880 ns/op
Iteration   5: 9.868 ns/op
Iteration   6: 9.879 ns/op
Iteration   7: 9.863 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.873 ns/op
Iteration  10: 9.875 ns/op
Iteration  11: 9.855 ns/op
Iteration  12: 9.879 ns/op
Iteration  13: 9.858 ns/op
Iteration  14: 9.874 ns/op
Iteration  15: 9.866 ns/op
Iteration  16: 9.874 ns/op
Iteration  17: 9.890 ns/op
Iteration  18: 9.868 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.866 ns/op


Result "benchmark.StringContains.stringContains":
  9.856 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (9.815, 9.856, 9.893), stdev = 0.018
  CI (99.9%): [9.849, 9.862] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  0j+^httpbeOYcC$0  avgt  100  226.804 ± 0.622  ns/op
StringContains.stringContains     http  0j+^httpbeOYcC$0  avgt  100    9.856 ± 0.006  ns/op

Benchmark result is saved to http_16_0.25_4.csv
