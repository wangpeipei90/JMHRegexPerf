# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = i+-	http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 222.087 ns/op
# Warmup Iteration   2: 153.321 ns/op
# Warmup Iteration   3: 133.271 ns/op
# Warmup Iteration   4: 132.492 ns/op
# Warmup Iteration   5: 132.791 ns/op
Iteration   1: 133.672 ns/op
Iteration   2: 130.888 ns/op
Iteration   3: 130.300 ns/op
Iteration   4: 130.387 ns/op
Iteration   5: 130.510 ns/op
Iteration   6: 130.311 ns/op
Iteration   7: 130.930 ns/op
Iteration   8: 130.801 ns/op
Iteration   9: 130.227 ns/op
Iteration  10: 129.888 ns/op
Iteration  11: 129.955 ns/op
Iteration  12: 129.985 ns/op
Iteration  13: 130.719 ns/op
Iteration  14: 130.538 ns/op
Iteration  15: 130.076 ns/op
Iteration  16: 130.017 ns/op
Iteration  17: 130.353 ns/op
Iteration  18: 130.691 ns/op
Iteration  19: 130.341 ns/op
Iteration  20: 130.084 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.843 ns/op
# Warmup Iteration   2: 147.879 ns/op
# Warmup Iteration   3: 132.796 ns/op
# Warmup Iteration   4: 132.141 ns/op
# Warmup Iteration   5: 132.791 ns/op
Iteration   1: 133.685 ns/op
Iteration   2: 131.098 ns/op
Iteration   3: 130.500 ns/op
Iteration   4: 130.468 ns/op
Iteration   5: 130.531 ns/op
Iteration   6: 130.518 ns/op
Iteration   7: 131.104 ns/op
Iteration   8: 130.578 ns/op
Iteration   9: 130.210 ns/op
Iteration  10: 130.560 ns/op
Iteration  11: 130.793 ns/op
Iteration  12: 130.428 ns/op
Iteration  13: 131.238 ns/op
Iteration  14: 130.263 ns/op
Iteration  15: 130.292 ns/op
Iteration  16: 130.275 ns/op
Iteration  17: 130.240 ns/op
Iteration  18: 130.573 ns/op
Iteration  19: 130.343 ns/op
Iteration  20: 130.322 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 222.270 ns/op
# Warmup Iteration   2: 150.594 ns/op
# Warmup Iteration   3: 132.908 ns/op
# Warmup Iteration   4: 132.307 ns/op
# Warmup Iteration   5: 132.992 ns/op
Iteration   1: 133.634 ns/op
Iteration   2: 131.235 ns/op
Iteration   3: 130.459 ns/op
Iteration   4: 132.059 ns/op
Iteration   5: 130.441 ns/op
Iteration   6: 130.462 ns/op
Iteration   7: 131.469 ns/op
Iteration   8: 130.405 ns/op
Iteration   9: 130.495 ns/op
Iteration  10: 129.957 ns/op
Iteration  11: 130.031 ns/op
Iteration  12: 130.062 ns/op
Iteration  13: 130.519 ns/op
Iteration  14: 130.191 ns/op
Iteration  15: 130.023 ns/op
Iteration  16: 130.117 ns/op
Iteration  17: 130.220 ns/op
Iteration  18: 130.898 ns/op
Iteration  19: 130.376 ns/op
Iteration  20: 130.380 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 222.935 ns/op
# Warmup Iteration   2: 151.208 ns/op
# Warmup Iteration   3: 133.821 ns/op
# Warmup Iteration   4: 132.885 ns/op
# Warmup Iteration   5: 133.716 ns/op
Iteration   1: 134.509 ns/op
Iteration   2: 131.909 ns/op
Iteration   3: 131.260 ns/op
Iteration   4: 131.352 ns/op
Iteration   5: 131.353 ns/op
Iteration   6: 131.468 ns/op
Iteration   7: 131.297 ns/op
Iteration   8: 131.871 ns/op
Iteration   9: 130.923 ns/op
Iteration  10: 131.196 ns/op
Iteration  11: 130.955 ns/op
Iteration  12: 131.036 ns/op
Iteration  13: 131.262 ns/op
Iteration  14: 130.941 ns/op
Iteration  15: 130.880 ns/op
Iteration  16: 131.117 ns/op
Iteration  17: 131.422 ns/op
Iteration  18: 131.354 ns/op
Iteration  19: 131.690 ns/op
Iteration  20: 131.054 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 220.802 ns/op
# Warmup Iteration   2: 151.079 ns/op
# Warmup Iteration   3: 134.602 ns/op
# Warmup Iteration   4: 133.800 ns/op
# Warmup Iteration   5: 134.544 ns/op
Iteration   1: 135.801 ns/op
Iteration   2: 132.121 ns/op
Iteration   3: 132.806 ns/op
Iteration   4: 132.086 ns/op
Iteration   5: 132.132 ns/op
Iteration   6: 132.101 ns/op
Iteration   7: 132.032 ns/op
Iteration   8: 132.615 ns/op
Iteration   9: 131.703 ns/op
Iteration  10: 131.730 ns/op
Iteration  11: 131.814 ns/op
Iteration  12: 131.718 ns/op
Iteration  13: 131.683 ns/op
Iteration  14: 131.917 ns/op
Iteration  15: 131.820 ns/op
Iteration  16: 131.767 ns/op
Iteration  17: 131.866 ns/op
Iteration  18: 131.770 ns/op
Iteration  19: 132.302 ns/op
Iteration  20: 132.191 ns/op


Result "benchmark.StringContains.regexMatches":
  131.110 ±(99.9%) 0.349 ns/op [Average]
  (min, avg, max) = (129.888, 131.110, 135.801), stdev = 1.028
  CI (99.9%): [130.761, 131.458] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = i+-	http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.555 ns/op
# Warmup Iteration   2: 10.471 ns/op
# Warmup Iteration   3: 10.066 ns/op
# Warmup Iteration   4: 10.060 ns/op
# Warmup Iteration   5: 10.037 ns/op
Iteration   1: 10.068 ns/op
Iteration   2: 10.063 ns/op
Iteration   3: 10.068 ns/op
Iteration   4: 10.066 ns/op
Iteration   5: 10.064 ns/op
Iteration   6: 10.055 ns/op
Iteration   7: 10.064 ns/op
Iteration   8: 10.082 ns/op
Iteration   9: 10.058 ns/op
Iteration  10: 10.086 ns/op
Iteration  11: 10.068 ns/op
Iteration  12: 10.069 ns/op
Iteration  13: 10.053 ns/op
Iteration  14: 10.060 ns/op
Iteration  15: 10.059 ns/op
Iteration  16: 10.060 ns/op
Iteration  17: 10.063 ns/op
Iteration  18: 10.055 ns/op
Iteration  19: 10.051 ns/op
Iteration  20: 10.073 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.073 ns/op
# Warmup Iteration   2: 10.454 ns/op
# Warmup Iteration   3: 9.937 ns/op
# Warmup Iteration   4: 9.931 ns/op
# Warmup Iteration   5: 9.946 ns/op
Iteration   1: 9.954 ns/op
Iteration   2: 9.964 ns/op
Iteration   3: 9.948 ns/op
Iteration   4: 9.943 ns/op
Iteration   5: 9.984 ns/op
Iteration   6: 9.946 ns/op
Iteration   7: 9.964 ns/op
Iteration   8: 9.944 ns/op
Iteration   9: 9.951 ns/op
Iteration  10: 9.946 ns/op
Iteration  11: 9.963 ns/op
Iteration  12: 9.953 ns/op
Iteration  13: 9.941 ns/op
Iteration  14: 9.938 ns/op
Iteration  15: 9.947 ns/op
Iteration  16: 9.935 ns/op
Iteration  17: 9.952 ns/op
Iteration  18: 9.936 ns/op
Iteration  19: 9.940 ns/op
Iteration  20: 9.942 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.113 ns/op
# Warmup Iteration   2: 10.483 ns/op
# Warmup Iteration   3: 10.022 ns/op
# Warmup Iteration   4: 10.025 ns/op
# Warmup Iteration   5: 10.021 ns/op
Iteration   1: 10.018 ns/op
Iteration   2: 10.048 ns/op
Iteration   3: 10.031 ns/op
Iteration   4: 10.024 ns/op
Iteration   5: 10.051 ns/op
Iteration   6: 10.041 ns/op
Iteration   7: 10.089 ns/op
Iteration   8: 10.082 ns/op
Iteration   9: 10.092 ns/op
Iteration  10: 10.084 ns/op
Iteration  11: 10.021 ns/op
Iteration  12: 10.059 ns/op
Iteration  13: 10.041 ns/op
Iteration  14: 10.065 ns/op
Iteration  15: 10.077 ns/op
Iteration  16: 10.058 ns/op
Iteration  17: 10.040 ns/op
Iteration  18: 10.066 ns/op
Iteration  19: 10.048 ns/op
Iteration  20: 10.079 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.171 ns/op
# Warmup Iteration   2: 10.457 ns/op
# Warmup Iteration   3: 10.027 ns/op
# Warmup Iteration   4: 10.024 ns/op
# Warmup Iteration   5: 10.009 ns/op
Iteration   1: 10.014 ns/op
Iteration   2: 9.994 ns/op
Iteration   3: 9.968 ns/op
Iteration   4: 9.963 ns/op
Iteration   5: 9.987 ns/op
Iteration   6: 9.995 ns/op
Iteration   7: 10.023 ns/op
Iteration   8: 10.051 ns/op
Iteration   9: 9.987 ns/op
Iteration  10: 10.029 ns/op
Iteration  11: 10.002 ns/op
Iteration  12: 9.958 ns/op
Iteration  13: 9.993 ns/op
Iteration  14: 9.978 ns/op
Iteration  15: 10.006 ns/op
Iteration  16: 9.971 ns/op
Iteration  17: 9.978 ns/op
Iteration  18: 10.006 ns/op
Iteration  19: 10.003 ns/op
Iteration  20: 9.981 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.222 ns/op
# Warmup Iteration   2: 10.472 ns/op
# Warmup Iteration   3: 9.911 ns/op
# Warmup Iteration   4: 9.887 ns/op
# Warmup Iteration   5: 9.912 ns/op
Iteration   1: 9.898 ns/op
Iteration   2: 9.920 ns/op
Iteration   3: 9.889 ns/op
Iteration   4: 9.915 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.905 ns/op
Iteration   7: 9.905 ns/op
Iteration   8: 9.927 ns/op
Iteration   9: 9.887 ns/op
Iteration  10: 9.872 ns/op
Iteration  11: 9.898 ns/op
Iteration  12: 9.899 ns/op
Iteration  13: 9.912 ns/op
Iteration  14: 9.895 ns/op
Iteration  15: 9.890 ns/op
Iteration  16: 9.872 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.881 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.916 ns/op


Result "benchmark.StringContains.stringContains":
  9.992 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (9.872, 9.992, 10.092), stdev = 0.066
  CI (99.9%): [9.970, 10.015] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)     (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  i+-	http  avgt  100  131.110 ± 0.349  ns/op
StringContains.stringContains     http  i+-	http  avgt  100    9.992 ± 0.022  ns/op

Benchmark result is saved to http_8_0.5_5.csv
