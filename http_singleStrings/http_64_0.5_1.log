# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 8CZRw^5Fi#[D0
+ H??$zWZtU1.A]v	http "B|%NO@G40g
7NinKBH_8<U&WFa)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 515.906 ns/op
# Warmup Iteration   2: 531.372 ns/op
# Warmup Iteration   3: 533.712 ns/op
# Warmup Iteration   4: 470.896 ns/op
# Warmup Iteration   5: 454.306 ns/op
Iteration   1: 459.343 ns/op
Iteration   2: 456.055 ns/op
Iteration   3: 454.741 ns/op
Iteration   4: 460.640 ns/op
Iteration   5: 455.344 ns/op
Iteration   6: 456.479 ns/op
Iteration   7: 462.073 ns/op
Iteration   8: 455.122 ns/op
Iteration   9: 465.892 ns/op
Iteration  10: 455.573 ns/op
Iteration  11: 455.140 ns/op
Iteration  12: 470.032 ns/op
Iteration  13: 455.942 ns/op
Iteration  14: 455.914 ns/op
Iteration  15: 458.082 ns/op
Iteration  16: 456.344 ns/op
Iteration  17: 456.235 ns/op
Iteration  18: 458.238 ns/op
Iteration  19: 455.688 ns/op
Iteration  20: 456.256 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 513.653 ns/op
# Warmup Iteration   2: 528.930 ns/op
# Warmup Iteration   3: 530.452 ns/op
# Warmup Iteration   4: 469.021 ns/op
# Warmup Iteration   5: 455.670 ns/op
Iteration   1: 458.908 ns/op
Iteration   2: 455.265 ns/op
Iteration   3: 455.398 ns/op
Iteration   4: 461.156 ns/op
Iteration   5: 455.411 ns/op
Iteration   6: 462.324 ns/op
Iteration   7: 455.275 ns/op
Iteration   8: 455.075 ns/op
Iteration   9: 465.192 ns/op
Iteration  10: 454.865 ns/op
Iteration  11: 455.364 ns/op
Iteration  12: 467.645 ns/op
Iteration  13: 454.814 ns/op
Iteration  14: 455.176 ns/op
Iteration  15: 457.444 ns/op
Iteration  16: 454.869 ns/op
Iteration  17: 454.654 ns/op
Iteration  18: 457.069 ns/op
Iteration  19: 454.868 ns/op
Iteration  20: 454.821 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 509.347 ns/op
# Warmup Iteration   2: 529.593 ns/op
# Warmup Iteration   3: 525.450 ns/op
# Warmup Iteration   4: 455.631 ns/op
# Warmup Iteration   5: 444.333 ns/op
Iteration   1: 449.803 ns/op
Iteration   2: 447.137 ns/op
Iteration   3: 447.437 ns/op
Iteration   4: 450.309 ns/op
Iteration   5: 443.923 ns/op
Iteration   6: 451.330 ns/op
Iteration   7: 443.998 ns/op
Iteration   8: 443.792 ns/op
Iteration   9: 454.091 ns/op
Iteration  10: 444.082 ns/op
Iteration  11: 444.145 ns/op
Iteration  12: 458.368 ns/op
Iteration  13: 444.829 ns/op
Iteration  14: 446.030 ns/op
Iteration  15: 448.540 ns/op
Iteration  16: 446.832 ns/op
Iteration  17: 447.036 ns/op
Iteration  18: 457.868 ns/op
Iteration  19: 456.496 ns/op
Iteration  20: 456.823 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 514.215 ns/op
# Warmup Iteration   2: 528.458 ns/op
# Warmup Iteration   3: 530.164 ns/op
# Warmup Iteration   4: 469.489 ns/op
# Warmup Iteration   5: 456.128 ns/op
Iteration   1: 460.499 ns/op
Iteration   2: 456.990 ns/op
Iteration   3: 456.846 ns/op
Iteration   4: 462.046 ns/op
Iteration   5: 456.457 ns/op
Iteration   6: 460.262 ns/op
Iteration   7: 459.971 ns/op
Iteration   8: 456.517 ns/op
Iteration   9: 467.300 ns/op
Iteration  10: 456.111 ns/op
Iteration  11: 456.047 ns/op
Iteration  12: 468.602 ns/op
Iteration  13: 455.754 ns/op
Iteration  14: 455.634 ns/op
Iteration  15: 458.470 ns/op
Iteration  16: 455.983 ns/op
Iteration  17: 455.829 ns/op
Iteration  18: 458.142 ns/op
Iteration  19: 456.188 ns/op
Iteration  20: 455.887 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 511.495 ns/op
# Warmup Iteration   2: 530.107 ns/op
# Warmup Iteration   3: 530.606 ns/op
# Warmup Iteration   4: 467.762 ns/op
# Warmup Iteration   5: 455.411 ns/op
Iteration   1: 459.908 ns/op
Iteration   2: 455.166 ns/op
Iteration   3: 455.207 ns/op
Iteration   4: 461.127 ns/op
Iteration   5: 455.191 ns/op
Iteration   6: 462.637 ns/op
Iteration   7: 455.499 ns/op
Iteration   8: 455.663 ns/op
Iteration   9: 468.513 ns/op
Iteration  10: 455.206 ns/op
Iteration  11: 455.304 ns/op
Iteration  12: 468.370 ns/op
Iteration  13: 455.689 ns/op
Iteration  14: 455.759 ns/op
Iteration  15: 458.468 ns/op
Iteration  16: 455.549 ns/op
Iteration  17: 455.943 ns/op
Iteration  18: 457.928 ns/op
Iteration  19: 455.252 ns/op
Iteration  20: 455.800 ns/op


Result "benchmark.StringContains.regexMatches":
  456.153 ±(99.9%) 1.839 ns/op [Average]
  (min, avg, max) = (443.792, 456.153, 470.032), stdev = 5.422
  CI (99.9%): [454.314, 457.992] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 8CZRw^5Fi#[D0
+ H??$zWZtU1.A]v	http "B|%NO@G40g
7NinKBH_8<U&WFa)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.657 ns/op
# Warmup Iteration   2: 14.733 ns/op
# Warmup Iteration   3: 14.309 ns/op
# Warmup Iteration   4: 14.318 ns/op
# Warmup Iteration   5: 14.289 ns/op
Iteration   1: 14.297 ns/op
Iteration   2: 14.296 ns/op
Iteration   3: 14.310 ns/op
Iteration   4: 14.303 ns/op
Iteration   5: 14.305 ns/op
Iteration   6: 14.309 ns/op
Iteration   7: 14.308 ns/op
Iteration   8: 14.319 ns/op
Iteration   9: 14.293 ns/op
Iteration  10: 14.316 ns/op
Iteration  11: 14.315 ns/op
Iteration  12: 14.324 ns/op
Iteration  13: 14.313 ns/op
Iteration  14: 14.330 ns/op
Iteration  15: 14.324 ns/op
Iteration  16: 14.323 ns/op
Iteration  17: 14.332 ns/op
Iteration  18: 14.306 ns/op
Iteration  19: 14.317 ns/op
Iteration  20: 14.349 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.661 ns/op
# Warmup Iteration   2: 14.705 ns/op
# Warmup Iteration   3: 14.603 ns/op
# Warmup Iteration   4: 14.612 ns/op
# Warmup Iteration   5: 14.618 ns/op
Iteration   1: 14.630 ns/op
Iteration   2: 14.611 ns/op
Iteration   3: 14.627 ns/op
Iteration   4: 14.626 ns/op
Iteration   5: 14.676 ns/op
Iteration   6: 14.650 ns/op
Iteration   7: 14.644 ns/op
Iteration   8: 14.680 ns/op
Iteration   9: 14.659 ns/op
Iteration  10: 14.629 ns/op
Iteration  11: 14.652 ns/op
Iteration  12: 14.733 ns/op
Iteration  13: 14.723 ns/op
Iteration  14: 14.695 ns/op
Iteration  15: 14.686 ns/op
Iteration  16: 14.648 ns/op
Iteration  17: 14.665 ns/op
Iteration  18: 14.671 ns/op
Iteration  19: 14.716 ns/op
Iteration  20: 14.688 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.660 ns/op
# Warmup Iteration   2: 14.709 ns/op
# Warmup Iteration   3: 14.834 ns/op
# Warmup Iteration   4: 14.853 ns/op
# Warmup Iteration   5: 14.795 ns/op
Iteration   1: 14.813 ns/op
Iteration   2: 14.818 ns/op
Iteration   3: 14.863 ns/op
Iteration   4: 14.847 ns/op
Iteration   5: 14.809 ns/op
Iteration   6: 14.789 ns/op
Iteration   7: 14.763 ns/op
Iteration   8: 14.856 ns/op
Iteration   9: 14.833 ns/op
Iteration  10: 14.784 ns/op
Iteration  11: 14.831 ns/op
Iteration  12: 14.833 ns/op
Iteration  13: 14.891 ns/op
Iteration  14: 14.822 ns/op
Iteration  15: 14.808 ns/op
Iteration  16: 14.776 ns/op
Iteration  17: 14.819 ns/op
Iteration  18: 14.785 ns/op
Iteration  19: 14.810 ns/op
Iteration  20: 14.787 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.727 ns/op
# Warmup Iteration   2: 14.719 ns/op
# Warmup Iteration   3: 14.705 ns/op
# Warmup Iteration   4: 14.723 ns/op
# Warmup Iteration   5: 14.729 ns/op
Iteration   1: 14.693 ns/op
Iteration   2: 14.755 ns/op
Iteration   3: 14.703 ns/op
Iteration   4: 14.729 ns/op
Iteration   5: 14.695 ns/op
Iteration   6: 14.657 ns/op
Iteration   7: 14.707 ns/op
Iteration   8: 14.693 ns/op
Iteration   9: 14.689 ns/op
Iteration  10: 14.687 ns/op
Iteration  11: 14.691 ns/op
Iteration  12: 14.699 ns/op
Iteration  13: 14.702 ns/op
Iteration  14: 14.693 ns/op
Iteration  15: 14.690 ns/op
Iteration  16: 14.688 ns/op
Iteration  17: 14.677 ns/op
Iteration  18: 14.712 ns/op
Iteration  19: 14.707 ns/op
Iteration  20: 14.679 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.684 ns/op
# Warmup Iteration   2: 14.706 ns/op
# Warmup Iteration   3: 14.669 ns/op
# Warmup Iteration   4: 14.677 ns/op
# Warmup Iteration   5: 14.628 ns/op
Iteration   1: 14.686 ns/op
Iteration   2: 14.688 ns/op
Iteration   3: 14.690 ns/op
Iteration   4: 14.679 ns/op
Iteration   5: 14.695 ns/op
Iteration   6: 14.632 ns/op
Iteration   7: 14.650 ns/op
Iteration   8: 14.614 ns/op
Iteration   9: 14.602 ns/op
Iteration  10: 14.607 ns/op
Iteration  11: 14.637 ns/op
Iteration  12: 14.696 ns/op
Iteration  13: 14.690 ns/op
Iteration  14: 14.672 ns/op
Iteration  15: 14.677 ns/op
Iteration  16: 14.700 ns/op
Iteration  17: 14.643 ns/op
Iteration  18: 14.685 ns/op
Iteration  19: 14.690 ns/op
Iteration  20: 14.714 ns/op


Result "benchmark.StringContains.stringContains":
  14.632 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (14.293, 14.632, 14.891), stdev = 0.171
  CI (99.9%): [14.574, 14.690] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  8CZRw^5Fi#[D0
+ H??$zWZtU1.A]v	http "B|%NO@G40g
7NinKBH_8<U&WFa  avgt  100  456.153 ± 1.839  ns/op
StringContains.stringContains     http  8CZRw^5Fi#[D0
+ H??$zWZtU1.A]v	http "B|%NO@G40g
7NinKBH_8<U&WFa  avgt  100   14.632 ± 0.058  ns/op

Benchmark result is saved to http_64_0.5_1.csv
