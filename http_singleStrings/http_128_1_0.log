# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = cl7!PCH8Ci4?}jtL;R8jXVzhO[=zJJ)yuO&y2W>ry 
\c@4`DB0;GKD5}4l7mv` 8+a'&xt|3Hx0Qk!xh#
os6O7`hy9{
bJ_T)t	lIj[r|\S]rJ^fC,{O=<;F<CM->)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 895.161 ns/op
# Warmup Iteration   2: 900.160 ns/op
# Warmup Iteration   3: 897.683 ns/op
# Warmup Iteration   4: 895.280 ns/op
# Warmup Iteration   5: 894.131 ns/op
Iteration   1: 851.651 ns/op
Iteration   2: 816.692 ns/op
Iteration   3: 816.866 ns/op
Iteration   4: 817.465 ns/op
Iteration   5: 824.116 ns/op
Iteration   6: 816.769 ns/op
Iteration   7: 816.716 ns/op
Iteration   8: 817.097 ns/op
Iteration   9: 816.778 ns/op
Iteration  10: 827.302 ns/op
Iteration  11: 818.027 ns/op
Iteration  12: 817.452 ns/op
Iteration  13: 817.705 ns/op
Iteration  14: 817.882 ns/op
Iteration  15: 831.039 ns/op
Iteration  16: 817.011 ns/op
Iteration  17: 816.747 ns/op
Iteration  18: 816.852 ns/op
Iteration  19: 816.850 ns/op
Iteration  20: 834.464 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 912.896 ns/op
# Warmup Iteration   2: 898.776 ns/op
# Warmup Iteration   3: 897.265 ns/op
# Warmup Iteration   4: 896.931 ns/op
# Warmup Iteration   5: 896.627 ns/op
Iteration   1: 857.396 ns/op
Iteration   2: 823.105 ns/op
Iteration   3: 823.131 ns/op
Iteration   4: 823.362 ns/op
Iteration   5: 824.579 ns/op
Iteration   6: 829.248 ns/op
Iteration   7: 823.101 ns/op
Iteration   8: 823.536 ns/op
Iteration   9: 823.306 ns/op
Iteration  10: 833.468 ns/op
Iteration  11: 823.583 ns/op
Iteration  12: 823.059 ns/op
Iteration  13: 823.157 ns/op
Iteration  14: 823.122 ns/op
Iteration  15: 836.585 ns/op
Iteration  16: 822.974 ns/op
Iteration  17: 823.043 ns/op
Iteration  18: 822.993 ns/op
Iteration  19: 823.038 ns/op
Iteration  20: 840.792 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 858.309 ns/op
# Warmup Iteration   2: 853.694 ns/op
# Warmup Iteration   3: 849.866 ns/op
# Warmup Iteration   4: 849.622 ns/op
# Warmup Iteration   5: 849.503 ns/op
Iteration   1: 788.309 ns/op
Iteration   2: 775.249 ns/op
Iteration   3: 775.721 ns/op
Iteration   4: 775.770 ns/op
Iteration   5: 782.668 ns/op
Iteration   6: 775.058 ns/op
Iteration   7: 775.546 ns/op
Iteration   8: 776.067 ns/op
Iteration   9: 785.185 ns/op
Iteration  10: 775.384 ns/op
Iteration  11: 775.430 ns/op
Iteration  12: 774.993 ns/op
Iteration  13: 775.230 ns/op
Iteration  14: 787.888 ns/op
Iteration  15: 775.173 ns/op
Iteration  16: 775.050 ns/op
Iteration  17: 775.156 ns/op
Iteration  18: 775.535 ns/op
Iteration  19: 790.389 ns/op
Iteration  20: 776.847 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 903.514 ns/op
# Warmup Iteration   2: 894.545 ns/op
# Warmup Iteration   3: 894.278 ns/op
# Warmup Iteration   4: 894.959 ns/op
# Warmup Iteration   5: 894.111 ns/op
Iteration   1: 855.482 ns/op
Iteration   2: 819.561 ns/op
Iteration   3: 819.912 ns/op
Iteration   4: 819.604 ns/op
Iteration   5: 826.913 ns/op
Iteration   6: 819.379 ns/op
Iteration   7: 819.444 ns/op
Iteration   8: 819.434 ns/op
Iteration   9: 819.567 ns/op
Iteration  10: 830.407 ns/op
Iteration  11: 822.887 ns/op
Iteration  12: 819.921 ns/op
Iteration  13: 819.345 ns/op
Iteration  14: 819.449 ns/op
Iteration  15: 832.849 ns/op
Iteration  16: 819.134 ns/op
Iteration  17: 820.192 ns/op
Iteration  18: 819.227 ns/op
Iteration  19: 819.181 ns/op
Iteration  20: 837.071 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 903.510 ns/op
# Warmup Iteration   2: 895.868 ns/op
# Warmup Iteration   3: 895.487 ns/op
# Warmup Iteration   4: 895.275 ns/op
# Warmup Iteration   5: 895.024 ns/op
Iteration   1: 854.144 ns/op
Iteration   2: 822.353 ns/op
Iteration   3: 822.265 ns/op
Iteration   4: 822.277 ns/op
Iteration   5: 829.631 ns/op
Iteration   6: 822.711 ns/op
Iteration   7: 822.371 ns/op
Iteration   8: 822.757 ns/op
Iteration   9: 822.459 ns/op
Iteration  10: 832.299 ns/op
Iteration  11: 822.278 ns/op
Iteration  12: 822.516 ns/op
Iteration  13: 822.193 ns/op
Iteration  14: 822.395 ns/op
Iteration  15: 835.726 ns/op
Iteration  16: 822.180 ns/op
Iteration  17: 822.169 ns/op
Iteration  18: 822.123 ns/op
Iteration  19: 822.221 ns/op
Iteration  20: 840.011 ns/op


Result "benchmark.StringContains.regexMatches":
  815.447 ±(99.9%) 6.925 ns/op [Average]
  (min, avg, max) = (774.993, 815.447, 857.396), stdev = 20.417
  CI (99.9%): [808.523, 822.372] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = cl7!PCH8Ci4?}jtL;R8jXVzhO[=zJJ)yuO&y2W>ry 
\c@4`DB0;GKD5}4l7mv` 8+a'&xt|3Hx0Qk!xh#
os6O7`hy9{
bJ_T)t	lIj[r|\S]rJ^fC,{O=<;F<CM->)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.359 ns/op
# Warmup Iteration   2: 24.623 ns/op
# Warmup Iteration   3: 24.567 ns/op
# Warmup Iteration   4: 24.588 ns/op
# Warmup Iteration   5: 24.568 ns/op
Iteration   1: 24.579 ns/op
Iteration   2: 24.563 ns/op
Iteration   3: 24.576 ns/op
Iteration   4: 24.569 ns/op
Iteration   5: 24.568 ns/op
Iteration   6: 24.572 ns/op
Iteration   7: 24.594 ns/op
Iteration   8: 24.580 ns/op
Iteration   9: 24.570 ns/op
Iteration  10: 24.574 ns/op
Iteration  11: 24.582 ns/op
Iteration  12: 24.591 ns/op
Iteration  13: 24.563 ns/op
Iteration  14: 24.564 ns/op
Iteration  15: 24.573 ns/op
Iteration  16: 24.603 ns/op
Iteration  17: 24.581 ns/op
Iteration  18: 24.575 ns/op
Iteration  19: 24.571 ns/op
Iteration  20: 24.585 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.375 ns/op
# Warmup Iteration   2: 24.626 ns/op
# Warmup Iteration   3: 24.582 ns/op
# Warmup Iteration   4: 24.585 ns/op
# Warmup Iteration   5: 24.596 ns/op
Iteration   1: 24.598 ns/op
Iteration   2: 24.597 ns/op
Iteration   3: 24.597 ns/op
Iteration   4: 24.570 ns/op
Iteration   5: 24.572 ns/op
Iteration   6: 24.570 ns/op
Iteration   7: 24.571 ns/op
Iteration   8: 24.597 ns/op
Iteration   9: 24.580 ns/op
Iteration  10: 24.574 ns/op
Iteration  11: 24.573 ns/op
Iteration  12: 24.576 ns/op
Iteration  13: 24.590 ns/op
Iteration  14: 24.570 ns/op
Iteration  15: 24.576 ns/op
Iteration  16: 24.573 ns/op
Iteration  17: 24.576 ns/op
Iteration  18: 24.574 ns/op
Iteration  19: 24.578 ns/op
Iteration  20: 24.574 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.513 ns/op
# Warmup Iteration   2: 24.662 ns/op
# Warmup Iteration   3: 25.399 ns/op
# Warmup Iteration   4: 25.348 ns/op
# Warmup Iteration   5: 25.350 ns/op
Iteration   1: 25.353 ns/op
Iteration   2: 25.345 ns/op
Iteration   3: 25.357 ns/op
Iteration   4: 25.355 ns/op
Iteration   5: 25.358 ns/op
Iteration   6: 25.326 ns/op
Iteration   7: 25.348 ns/op
Iteration   8: 25.388 ns/op
Iteration   9: 25.348 ns/op
Iteration  10: 25.337 ns/op
Iteration  11: 25.359 ns/op
Iteration  12: 25.348 ns/op
Iteration  13: 25.339 ns/op
Iteration  14: 25.347 ns/op
Iteration  15: 25.336 ns/op
Iteration  16: 25.363 ns/op
Iteration  17: 25.352 ns/op
Iteration  18: 25.345 ns/op
Iteration  19: 25.346 ns/op
Iteration  20: 25.398 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.465 ns/op
# Warmup Iteration   2: 24.625 ns/op
# Warmup Iteration   3: 24.580 ns/op
# Warmup Iteration   4: 24.566 ns/op
# Warmup Iteration   5: 24.579 ns/op
Iteration   1: 24.574 ns/op
Iteration   2: 24.579 ns/op
Iteration   3: 24.565 ns/op
Iteration   4: 24.564 ns/op
Iteration   5: 24.576 ns/op
Iteration   6: 24.577 ns/op
Iteration   7: 24.582 ns/op
Iteration   8: 24.582 ns/op
Iteration   9: 24.586 ns/op
Iteration  10: 24.564 ns/op
Iteration  11: 24.567 ns/op
Iteration  12: 24.564 ns/op
Iteration  13: 24.569 ns/op
Iteration  14: 24.566 ns/op
Iteration  15: 24.565 ns/op
Iteration  16: 24.569 ns/op
Iteration  17: 24.569 ns/op
Iteration  18: 24.565 ns/op
Iteration  19: 24.566 ns/op
Iteration  20: 24.577 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.494 ns/op
# Warmup Iteration   2: 24.650 ns/op
# Warmup Iteration   3: 24.585 ns/op
# Warmup Iteration   4: 24.598 ns/op
# Warmup Iteration   5: 24.587 ns/op
Iteration   1: 24.585 ns/op
Iteration   2: 24.578 ns/op
Iteration   3: 24.590 ns/op
Iteration   4: 24.590 ns/op
Iteration   5: 24.582 ns/op
Iteration   6: 24.585 ns/op
Iteration   7: 24.577 ns/op
Iteration   8: 24.612 ns/op
Iteration   9: 24.584 ns/op
Iteration  10: 24.607 ns/op
Iteration  11: 24.579 ns/op
Iteration  12: 24.583 ns/op
Iteration  13: 24.590 ns/op
Iteration  14: 24.583 ns/op
Iteration  15: 24.586 ns/op
Iteration  16: 24.580 ns/op
Iteration  17: 24.584 ns/op
Iteration  18: 24.590 ns/op
Iteration  19: 24.600 ns/op
Iteration  20: 24.583 ns/op


Result "benchmark.StringContains.stringContains":
  24.733 ±(99.9%) 0.106 ns/op [Average]
  (min, avg, max) = (24.563, 24.733, 25.398), stdev = 0.311
  CI (99.9%): [24.628, 24.839] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  cl7!PCH8Ci4?}jtL;R8jXVzhO[=zJJ)yuO&y2W>ry 
\c@4`DB0;GKD5}4l7mv` 8+a'&xt|3Hx0Qk!xh#
os6O7`hy9{
bJ_T)t	lIj[r|\S]rJ^fC,{O=<;F<CM->  avgt  100  815.447 ± 6.925  ns/op
StringContains.stringContains     http  cl7!PCH8Ci4?}jtL;R8jXVzhO[=zJJ)yuO&y2W>ry 
\c@4`DB0;GKD5}4l7mv` 8+a'&xt|3Hx0Qk!xh#
os6O7`hy9{
bJ_T)t	lIj[r|\S]rJ^fC,{O=<;F<CM->  avgt  100   24.733 ± 0.106  ns/op

Benchmark result is saved to http_128_1_0.csv
