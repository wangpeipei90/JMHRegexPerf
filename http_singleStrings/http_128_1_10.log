# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = l3rQWHt4Twg;gbCTLY	`/z[c%Hl`yjY)ikU"%YpvR!${l5 }p!rLG?l)c>'UxR1Rk4 w5U8^M>{J}o5I!qSX<UQB4,`+^
|H{7@'Q'\L80eB75Y7[zRG5P4+=Jj)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 383.055 ns/op
# Warmup Iteration   2: 375.131 ns/op
# Warmup Iteration   3: 314.260 ns/op
# Warmup Iteration   4: 296.596 ns/op
# Warmup Iteration   5: 294.883 ns/op
Iteration   1: 298.245 ns/op
Iteration   2: 294.128 ns/op
Iteration   3: 299.829 ns/op
Iteration   4: 294.236 ns/op
Iteration   5: 300.907 ns/op
Iteration   6: 294.870 ns/op
Iteration   7: 301.609 ns/op
Iteration   8: 295.472 ns/op
Iteration   9: 293.959 ns/op
Iteration  10: 295.315 ns/op
Iteration  11: 294.289 ns/op
Iteration  12: 295.488 ns/op
Iteration  13: 294.050 ns/op
Iteration  14: 295.477 ns/op
Iteration  15: 294.036 ns/op
Iteration  16: 295.468 ns/op
Iteration  17: 293.928 ns/op
Iteration  18: 296.552 ns/op
Iteration  19: 293.926 ns/op
Iteration  20: 295.885 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 335.278 ns/op
# Warmup Iteration   2: 329.548 ns/op
# Warmup Iteration   3: 253.995 ns/op
# Warmup Iteration   4: 254.926 ns/op
# Warmup Iteration   5: 255.746 ns/op
Iteration   1: 252.616 ns/op
Iteration   2: 256.690 ns/op
Iteration   3: 258.179 ns/op
Iteration   4: 252.589 ns/op
Iteration   5: 259.781 ns/op
Iteration   6: 252.701 ns/op
Iteration   7: 253.801 ns/op
Iteration   8: 253.695 ns/op
Iteration   9: 252.582 ns/op
Iteration  10: 253.695 ns/op
Iteration  11: 252.607 ns/op
Iteration  12: 253.824 ns/op
Iteration  13: 253.647 ns/op
Iteration  14: 252.550 ns/op
Iteration  15: 253.910 ns/op
Iteration  16: 253.855 ns/op
Iteration  17: 252.503 ns/op
Iteration  18: 253.920 ns/op
Iteration  19: 252.489 ns/op
Iteration  20: 253.744 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 373.773 ns/op
# Warmup Iteration   2: 371.928 ns/op
# Warmup Iteration   3: 310.720 ns/op
# Warmup Iteration   4: 294.487 ns/op
# Warmup Iteration   5: 292.317 ns/op
Iteration   1: 296.849 ns/op
Iteration   2: 291.922 ns/op
Iteration   3: 297.079 ns/op
Iteration   4: 292.360 ns/op
Iteration   5: 297.953 ns/op
Iteration   6: 300.302 ns/op
Iteration   7: 292.098 ns/op
Iteration   8: 293.759 ns/op
Iteration   9: 292.081 ns/op
Iteration  10: 293.494 ns/op
Iteration  11: 292.195 ns/op
Iteration  12: 293.814 ns/op
Iteration  13: 292.095 ns/op
Iteration  14: 293.505 ns/op
Iteration  15: 292.128 ns/op
Iteration  16: 294.059 ns/op
Iteration  17: 292.146 ns/op
Iteration  18: 293.719 ns/op
Iteration  19: 292.371 ns/op
Iteration  20: 293.925 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 342.961 ns/op
# Warmup Iteration   2: 338.458 ns/op
# Warmup Iteration   3: 267.734 ns/op
# Warmup Iteration   4: 265.123 ns/op
# Warmup Iteration   5: 262.571 ns/op
Iteration   1: 266.019 ns/op
Iteration   2: 266.937 ns/op
Iteration   3: 262.544 ns/op
Iteration   4: 268.311 ns/op
Iteration   5: 269.822 ns/op
Iteration   6: 262.482 ns/op
Iteration   7: 263.896 ns/op
Iteration   8: 262.621 ns/op
Iteration   9: 265.644 ns/op
Iteration  10: 262.565 ns/op
Iteration  11: 263.901 ns/op
Iteration  12: 264.160 ns/op
Iteration  13: 262.580 ns/op
Iteration  14: 267.079 ns/op
Iteration  15: 262.605 ns/op
Iteration  16: 264.065 ns/op
Iteration  17: 264.304 ns/op
Iteration  18: 262.705 ns/op
Iteration  19: 264.352 ns/op
Iteration  20: 262.692 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 344.297 ns/op
# Warmup Iteration   2: 344.176 ns/op
# Warmup Iteration   3: 270.193 ns/op
# Warmup Iteration   4: 264.495 ns/op
# Warmup Iteration   5: 261.720 ns/op
Iteration   1: 267.385 ns/op
Iteration   2: 266.120 ns/op
Iteration   3: 262.001 ns/op
Iteration   4: 267.466 ns/op
Iteration   5: 269.262 ns/op
Iteration   6: 261.746 ns/op
Iteration   7: 263.366 ns/op
Iteration   8: 261.777 ns/op
Iteration   9: 263.951 ns/op
Iteration  10: 264.958 ns/op
Iteration  11: 261.792 ns/op
Iteration  12: 263.086 ns/op
Iteration  13: 261.835 ns/op
Iteration  14: 263.027 ns/op
Iteration  15: 261.604 ns/op
Iteration  16: 262.888 ns/op
Iteration  17: 263.235 ns/op
Iteration  18: 261.753 ns/op
Iteration  19: 263.057 ns/op
Iteration  20: 261.735 ns/op


Result "benchmark.StringContains.regexMatches":
  274.362 ±(99.9%) 5.900 ns/op [Average]
  (min, avg, max) = (252.489, 274.362, 301.609), stdev = 17.396
  CI (99.9%): [268.462, 280.262] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = l3rQWHt4Twg;gbCTLY	`/z[c%Hl`yjY)ikU"%YpvR!${l5 }p!rLG?l)c>'UxR1Rk4 w5U8^M>{J}o5I!qSX<UQB4,`+^
|H{7@'Q'\L80eB75Y7[zRG5P4+=Jj)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.450 ns/op
# Warmup Iteration   2: 24.626 ns/op
# Warmup Iteration   3: 24.574 ns/op
# Warmup Iteration   4: 24.569 ns/op
# Warmup Iteration   5: 24.577 ns/op
Iteration   1: 24.600 ns/op
Iteration   2: 24.567 ns/op
Iteration   3: 24.574 ns/op
Iteration   4: 24.581 ns/op
Iteration   5: 24.575 ns/op
Iteration   6: 24.583 ns/op
Iteration   7: 24.566 ns/op
Iteration   8: 24.573 ns/op
Iteration   9: 24.574 ns/op
Iteration  10: 24.577 ns/op
Iteration  11: 24.565 ns/op
Iteration  12: 24.566 ns/op
Iteration  13: 24.564 ns/op
Iteration  14: 24.564 ns/op
Iteration  15: 24.576 ns/op
Iteration  16: 24.574 ns/op
Iteration  17: 24.568 ns/op
Iteration  18: 24.564 ns/op
Iteration  19: 24.571 ns/op
Iteration  20: 24.570 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.492 ns/op
# Warmup Iteration   2: 24.624 ns/op
# Warmup Iteration   3: 24.565 ns/op
# Warmup Iteration   4: 24.594 ns/op
# Warmup Iteration   5: 24.578 ns/op
Iteration   1: 24.580 ns/op
Iteration   2: 24.565 ns/op
Iteration   3: 24.585 ns/op
Iteration   4: 24.591 ns/op
Iteration   5: 24.564 ns/op
Iteration   6: 24.571 ns/op
Iteration   7: 24.581 ns/op
Iteration   8: 24.592 ns/op
Iteration   9: 24.594 ns/op
Iteration  10: 24.634 ns/op
Iteration  11: 24.584 ns/op
Iteration  12: 24.567 ns/op
Iteration  13: 24.593 ns/op
Iteration  14: 24.580 ns/op
Iteration  15: 24.567 ns/op
Iteration  16: 24.594 ns/op
Iteration  17: 24.575 ns/op
Iteration  18: 24.563 ns/op
Iteration  19: 24.580 ns/op
Iteration  20: 24.586 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.454 ns/op
# Warmup Iteration   2: 24.629 ns/op
# Warmup Iteration   3: 25.297 ns/op
# Warmup Iteration   4: 25.300 ns/op
# Warmup Iteration   5: 25.305 ns/op
Iteration   1: 25.318 ns/op
Iteration   2: 25.309 ns/op
Iteration   3: 25.284 ns/op
Iteration   4: 25.305 ns/op
Iteration   5: 25.271 ns/op
Iteration   6: 25.292 ns/op
Iteration   7: 25.292 ns/op
Iteration   8: 25.278 ns/op
Iteration   9: 25.300 ns/op
Iteration  10: 25.297 ns/op
Iteration  11: 25.321 ns/op
Iteration  12: 25.311 ns/op
Iteration  13: 25.312 ns/op
Iteration  14: 25.309 ns/op
Iteration  15: 25.320 ns/op
Iteration  16: 25.312 ns/op
Iteration  17: 25.315 ns/op
Iteration  18: 25.312 ns/op
Iteration  19: 25.318 ns/op
Iteration  20: 25.315 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.506 ns/op
# Warmup Iteration   2: 24.669 ns/op
# Warmup Iteration   3: 24.578 ns/op
# Warmup Iteration   4: 24.575 ns/op
# Warmup Iteration   5: 24.588 ns/op
Iteration   1: 24.593 ns/op
Iteration   2: 24.597 ns/op
Iteration   3: 24.586 ns/op
Iteration   4: 24.587 ns/op
Iteration   5: 24.576 ns/op
Iteration   6: 24.571 ns/op
Iteration   7: 24.571 ns/op
Iteration   8: 24.611 ns/op
Iteration   9: 24.580 ns/op
Iteration  10: 24.572 ns/op
Iteration  11: 24.577 ns/op
Iteration  12: 24.570 ns/op
Iteration  13: 24.568 ns/op
Iteration  14: 24.571 ns/op
Iteration  15: 24.583 ns/op
Iteration  16: 24.572 ns/op
Iteration  17: 24.600 ns/op
Iteration  18: 24.568 ns/op
Iteration  19: 24.622 ns/op
Iteration  20: 24.610 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.271 ns/op
# Warmup Iteration   2: 24.641 ns/op
# Warmup Iteration   3: 24.575 ns/op
# Warmup Iteration   4: 24.596 ns/op
# Warmup Iteration   5: 24.586 ns/op
Iteration   1: 24.580 ns/op
Iteration   2: 24.577 ns/op
Iteration   3: 24.583 ns/op
Iteration   4: 24.586 ns/op
Iteration   5: 24.579 ns/op
Iteration   6: 24.578 ns/op
Iteration   7: 24.578 ns/op
Iteration   8: 24.580 ns/op
Iteration   9: 24.579 ns/op
Iteration  10: 24.582 ns/op
Iteration  11: 24.581 ns/op
Iteration  12: 24.602 ns/op
Iteration  13: 24.582 ns/op
Iteration  14: 24.580 ns/op
Iteration  15: 24.579 ns/op
Iteration  16: 24.590 ns/op
Iteration  17: 24.604 ns/op
Iteration  18: 24.584 ns/op
Iteration  19: 24.583 ns/op
Iteration  20: 24.587 ns/op


Result "benchmark.StringContains.stringContains":
  24.726 ±(99.9%) 0.099 ns/op [Average]
  (min, avg, max) = (24.563, 24.726, 25.321), stdev = 0.291
  CI (99.9%): [24.627, 24.824] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  l3rQWHt4Twg;gbCTLY	`/z[c%Hl`yjY)ikU"%YpvR!${l5 }p!rLG?l)c>'UxR1Rk4 w5U8^M>{J}o5I!qSX<UQB4,`+^
|H{7@'Q'\L80eB75Y7[zRG5P4+=Jj  avgt  100  274.362 ± 5.900  ns/op
StringContains.stringContains     http  l3rQWHt4Twg;gbCTLY	`/z[c%Hl`yjY)ikU"%YpvR!${l5 }p!rLG?l)c>'UxR1Rk4 w5U8^M>{J}o5I!qSX<UQB4,`+^
|H{7@'Q'\L80eB75Y7[zRG5P4+=Jj  avgt  100   24.726 ± 0.099  ns/op

Benchmark result is saved to http_128_1_10.csv
