# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpq>m"Spn4	[v=)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 339.121 ns/op
# Warmup Iteration   2: 349.435 ns/op
# Warmup Iteration   3: 261.904 ns/op
# Warmup Iteration   4: 257.965 ns/op
# Warmup Iteration   5: 258.989 ns/op
Iteration   1: 255.314 ns/op
Iteration   2: 260.208 ns/op
Iteration   3: 255.108 ns/op
Iteration   4: 261.855 ns/op
Iteration   5: 263.745 ns/op
Iteration   6: 255.101 ns/op
Iteration   7: 256.786 ns/op
Iteration   8: 256.898 ns/op
Iteration   9: 257.037 ns/op
Iteration  10: 256.810 ns/op
Iteration  11: 255.918 ns/op
Iteration  12: 276.395 ns/op
Iteration  13: 255.480 ns/op
Iteration  14: 256.776 ns/op
Iteration  15: 256.707 ns/op
Iteration  16: 255.508 ns/op
Iteration  17: 258.911 ns/op
Iteration  18: 255.366 ns/op
Iteration  19: 256.992 ns/op
Iteration  20: 259.573 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 333.854 ns/op
# Warmup Iteration   2: 336.892 ns/op
# Warmup Iteration   3: 257.217 ns/op
# Warmup Iteration   4: 257.047 ns/op
# Warmup Iteration   5: 257.703 ns/op
Iteration   1: 254.639 ns/op
Iteration   2: 258.680 ns/op
Iteration   3: 258.203 ns/op
Iteration   4: 256.586 ns/op
Iteration   5: 262.037 ns/op
Iteration   6: 254.402 ns/op
Iteration   7: 255.718 ns/op
Iteration   8: 255.551 ns/op
Iteration   9: 254.330 ns/op
Iteration  10: 255.637 ns/op
Iteration  11: 254.355 ns/op
Iteration  12: 255.678 ns/op
Iteration  13: 255.479 ns/op
Iteration  14: 254.464 ns/op
Iteration  15: 255.838 ns/op
Iteration  16: 254.513 ns/op
Iteration  17: 256.044 ns/op
Iteration  18: 255.615 ns/op
Iteration  19: 254.335 ns/op
Iteration  20: 255.475 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 332.461 ns/op
# Warmup Iteration   2: 345.209 ns/op
# Warmup Iteration   3: 259.416 ns/op
# Warmup Iteration   4: 258.391 ns/op
# Warmup Iteration   5: 259.002 ns/op
Iteration   1: 255.542 ns/op
Iteration   2: 259.794 ns/op
Iteration   3: 259.195 ns/op
Iteration   4: 258.018 ns/op
Iteration   5: 263.127 ns/op
Iteration   6: 255.749 ns/op
Iteration   7: 258.703 ns/op
Iteration   8: 257.313 ns/op
Iteration   9: 255.771 ns/op
Iteration  10: 257.403 ns/op
Iteration  11: 255.507 ns/op
Iteration  12: 262.692 ns/op
Iteration  13: 257.475 ns/op
Iteration  14: 256.734 ns/op
Iteration  15: 257.958 ns/op
Iteration  16: 256.066 ns/op
Iteration  17: 257.849 ns/op
Iteration  18: 257.811 ns/op
Iteration  19: 255.943 ns/op
Iteration  20: 257.148 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 335.852 ns/op
# Warmup Iteration   2: 344.923 ns/op
# Warmup Iteration   3: 261.113 ns/op
# Warmup Iteration   4: 258.532 ns/op
# Warmup Iteration   5: 259.009 ns/op
Iteration   1: 255.678 ns/op
Iteration   2: 260.053 ns/op
Iteration   3: 255.771 ns/op
Iteration   4: 261.050 ns/op
Iteration   5: 263.132 ns/op
Iteration   6: 255.674 ns/op
Iteration   7: 256.674 ns/op
Iteration   8: 255.602 ns/op
Iteration   9: 256.590 ns/op
Iteration  10: 256.785 ns/op
Iteration  11: 255.493 ns/op
Iteration  12: 257.114 ns/op
Iteration  13: 256.911 ns/op
Iteration  14: 255.379 ns/op
Iteration  15: 256.387 ns/op
Iteration  16: 255.604 ns/op
Iteration  17: 256.637 ns/op
Iteration  18: 256.716 ns/op
Iteration  19: 255.661 ns/op
Iteration  20: 257.861 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 330.631 ns/op
# Warmup Iteration   2: 338.399 ns/op
# Warmup Iteration   3: 257.264 ns/op
# Warmup Iteration   4: 257.128 ns/op
# Warmup Iteration   5: 258.030 ns/op
Iteration   1: 254.384 ns/op
Iteration   2: 258.809 ns/op
Iteration   3: 257.509 ns/op
Iteration   4: 256.798 ns/op
Iteration   5: 261.815 ns/op
Iteration   6: 254.382 ns/op
Iteration   7: 255.753 ns/op
Iteration   8: 255.877 ns/op
Iteration   9: 254.742 ns/op
Iteration  10: 256.335 ns/op
Iteration  11: 254.158 ns/op
Iteration  12: 256.072 ns/op
Iteration  13: 258.388 ns/op
Iteration  14: 254.320 ns/op
Iteration  15: 255.838 ns/op
Iteration  16: 254.413 ns/op
Iteration  17: 255.729 ns/op
Iteration  18: 255.921 ns/op
Iteration  19: 254.536 ns/op
Iteration  20: 256.183 ns/op


Result "benchmark.StringContains.regexMatches":
  257.026 ±(99.9%) 0.988 ns/op [Average]
  (min, avg, max) = (254.158, 257.026, 276.395), stdev = 2.913
  CI (99.9%): [256.038, 258.014] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpq>m"Spn4	[v=)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.189 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.868 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.864 ns/op
Iteration   1: 9.854 ns/op
Iteration   2: 9.859 ns/op
Iteration   3: 9.859 ns/op
Iteration   4: 9.856 ns/op
Iteration   5: 9.866 ns/op
Iteration   6: 9.860 ns/op
Iteration   7: 9.863 ns/op
Iteration   8: 9.855 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.863 ns/op
Iteration  11: 9.858 ns/op
Iteration  12: 9.849 ns/op
Iteration  13: 9.874 ns/op
Iteration  14: 9.871 ns/op
Iteration  15: 9.878 ns/op
Iteration  16: 9.850 ns/op
Iteration  17: 9.863 ns/op
Iteration  18: 9.868 ns/op
Iteration  19: 9.857 ns/op
Iteration  20: 9.883 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.215 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.932 ns/op
# Warmup Iteration   4: 9.940 ns/op
# Warmup Iteration   5: 9.926 ns/op
Iteration   1: 9.926 ns/op
Iteration   2: 9.945 ns/op
Iteration   3: 9.901 ns/op
Iteration   4: 9.918 ns/op
Iteration   5: 9.937 ns/op
Iteration   6: 9.938 ns/op
Iteration   7: 9.920 ns/op
Iteration   8: 9.930 ns/op
Iteration   9: 9.933 ns/op
Iteration  10: 9.944 ns/op
Iteration  11: 9.927 ns/op
Iteration  12: 9.930 ns/op
Iteration  13: 9.917 ns/op
Iteration  14: 9.928 ns/op
Iteration  15: 9.923 ns/op
Iteration  16: 9.943 ns/op
Iteration  17: 9.911 ns/op
Iteration  18: 9.903 ns/op
Iteration  19: 9.917 ns/op
Iteration  20: 9.915 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.188 ns/op
# Warmup Iteration   2: 9.716 ns/op
# Warmup Iteration   3: 9.859 ns/op
# Warmup Iteration   4: 9.866 ns/op
# Warmup Iteration   5: 9.874 ns/op
Iteration   1: 9.863 ns/op
Iteration   2: 9.847 ns/op
Iteration   3: 9.865 ns/op
Iteration   4: 9.854 ns/op
Iteration   5: 9.849 ns/op
Iteration   6: 9.848 ns/op
Iteration   7: 9.850 ns/op
Iteration   8: 9.849 ns/op
Iteration   9: 9.852 ns/op
Iteration  10: 9.864 ns/op
Iteration  11: 9.850 ns/op
Iteration  12: 9.848 ns/op
Iteration  13: 9.843 ns/op
Iteration  14: 9.850 ns/op
Iteration  15: 9.845 ns/op
Iteration  16: 9.878 ns/op
Iteration  17: 9.852 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.879 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.501 ns/op
# Warmup Iteration   2: 9.753 ns/op
# Warmup Iteration   3: 9.990 ns/op
# Warmup Iteration   4: 9.987 ns/op
# Warmup Iteration   5: 9.970 ns/op
Iteration   1: 9.993 ns/op
Iteration   2: 9.996 ns/op
Iteration   3: 9.980 ns/op
Iteration   4: 9.977 ns/op
Iteration   5: 9.982 ns/op
Iteration   6: 9.971 ns/op
Iteration   7: 9.971 ns/op
Iteration   8: 10.003 ns/op
Iteration   9: 9.985 ns/op
Iteration  10: 10.005 ns/op
Iteration  11: 10.004 ns/op
Iteration  12: 9.980 ns/op
Iteration  13: 9.979 ns/op
Iteration  14: 9.981 ns/op
Iteration  15: 9.992 ns/op
Iteration  16: 9.987 ns/op
Iteration  17: 9.989 ns/op
Iteration  18: 9.989 ns/op
Iteration  19: 9.976 ns/op
Iteration  20: 10.019 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.224 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.853 ns/op
# Warmup Iteration   5: 9.846 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.880 ns/op
Iteration   3: 9.863 ns/op
Iteration   4: 9.878 ns/op
Iteration   5: 9.874 ns/op
Iteration   6: 9.887 ns/op
Iteration   7: 9.886 ns/op
Iteration   8: 9.855 ns/op
Iteration   9: 9.880 ns/op
Iteration  10: 9.857 ns/op
Iteration  11: 9.880 ns/op
Iteration  12: 9.863 ns/op
Iteration  13: 9.864 ns/op
Iteration  14: 9.875 ns/op
Iteration  15: 9.857 ns/op
Iteration  16: 9.858 ns/op
Iteration  17: 9.879 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.869 ns/op
Iteration  20: 9.865 ns/op


Result "benchmark.StringContains.stringContains":
  9.901 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (9.843, 9.901, 10.019), stdev = 0.051
  CI (99.9%): [9.883, 9.918] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpq>m"Spn4	[v=  avgt  100  257.026 ± 0.988  ns/op
StringContains.stringContains     http  httpq>m"Spn4	[v=  avgt  100    9.901 ± 0.017  ns/op

Benchmark result is saved to http_16_0_10.csv
