# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpz+UY_]\F-Sy)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 336.596 ns/op
# Warmup Iteration   2: 346.401 ns/op
# Warmup Iteration   3: 259.264 ns/op
# Warmup Iteration   4: 256.690 ns/op
# Warmup Iteration   5: 257.586 ns/op
Iteration   1: 254.219 ns/op
Iteration   2: 259.420 ns/op
Iteration   3: 258.206 ns/op
Iteration   4: 256.608 ns/op
Iteration   5: 262.971 ns/op
Iteration   6: 254.217 ns/op
Iteration   7: 255.937 ns/op
Iteration   8: 255.517 ns/op
Iteration   9: 253.875 ns/op
Iteration  10: 255.115 ns/op
Iteration  11: 254.338 ns/op
Iteration  12: 256.080 ns/op
Iteration  13: 255.245 ns/op
Iteration  14: 253.677 ns/op
Iteration  15: 256.519 ns/op
Iteration  16: 253.993 ns/op
Iteration  17: 255.111 ns/op
Iteration  18: 255.176 ns/op
Iteration  19: 253.960 ns/op
Iteration  20: 255.201 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 335.952 ns/op
# Warmup Iteration   2: 344.655 ns/op
# Warmup Iteration   3: 260.251 ns/op
# Warmup Iteration   4: 258.185 ns/op
# Warmup Iteration   5: 258.793 ns/op
Iteration   1: 255.494 ns/op
Iteration   2: 260.291 ns/op
Iteration   3: 255.964 ns/op
Iteration   4: 261.039 ns/op
Iteration   5: 263.086 ns/op
Iteration   6: 255.668 ns/op
Iteration   7: 257.130 ns/op
Iteration   8: 255.735 ns/op
Iteration   9: 256.944 ns/op
Iteration  10: 256.932 ns/op
Iteration  11: 255.411 ns/op
Iteration  12: 256.976 ns/op
Iteration  13: 257.163 ns/op
Iteration  14: 255.898 ns/op
Iteration  15: 258.028 ns/op
Iteration  16: 255.713 ns/op
Iteration  17: 260.201 ns/op
Iteration  18: 261.062 ns/op
Iteration  19: 255.702 ns/op
Iteration  20: 266.159 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 329.288 ns/op
# Warmup Iteration   2: 337.386 ns/op
# Warmup Iteration   3: 257.294 ns/op
# Warmup Iteration   4: 256.381 ns/op
# Warmup Iteration   5: 257.141 ns/op
Iteration   1: 254.006 ns/op
Iteration   2: 258.043 ns/op
Iteration   3: 257.912 ns/op
Iteration   4: 254.669 ns/op
Iteration   5: 260.715 ns/op
Iteration   6: 253.869 ns/op
Iteration   7: 255.214 ns/op
Iteration   8: 255.262 ns/op
Iteration   9: 253.996 ns/op
Iteration  10: 255.079 ns/op
Iteration  11: 254.142 ns/op
Iteration  12: 255.296 ns/op
Iteration  13: 255.121 ns/op
Iteration  14: 253.506 ns/op
Iteration  15: 254.863 ns/op
Iteration  16: 253.641 ns/op
Iteration  17: 254.988 ns/op
Iteration  18: 255.303 ns/op
Iteration  19: 254.200 ns/op
Iteration  20: 255.400 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 333.308 ns/op
# Warmup Iteration   2: 337.205 ns/op
# Warmup Iteration   3: 256.920 ns/op
# Warmup Iteration   4: 256.574 ns/op
# Warmup Iteration   5: 257.629 ns/op
Iteration   1: 254.304 ns/op
Iteration   2: 258.603 ns/op
Iteration   3: 259.833 ns/op
Iteration   4: 253.973 ns/op
Iteration   5: 261.370 ns/op
Iteration   6: 254.095 ns/op
Iteration   7: 255.062 ns/op
Iteration   8: 255.486 ns/op
Iteration   9: 256.012 ns/op
Iteration  10: 256.460 ns/op
Iteration  11: 253.831 ns/op
Iteration  12: 255.381 ns/op
Iteration  13: 255.211 ns/op
Iteration  14: 254.019 ns/op
Iteration  15: 255.444 ns/op
Iteration  16: 254.251 ns/op
Iteration  17: 255.382 ns/op
Iteration  18: 255.396 ns/op
Iteration  19: 254.062 ns/op
Iteration  20: 255.358 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 336.248 ns/op
# Warmup Iteration   2: 344.615 ns/op
# Warmup Iteration   3: 261.110 ns/op
# Warmup Iteration   4: 259.500 ns/op
# Warmup Iteration   5: 258.974 ns/op
Iteration   1: 255.529 ns/op
Iteration   2: 259.951 ns/op
Iteration   3: 255.738 ns/op
Iteration   4: 261.148 ns/op
Iteration   5: 262.936 ns/op
Iteration   6: 255.936 ns/op
Iteration   7: 256.730 ns/op
Iteration   8: 255.329 ns/op
Iteration   9: 257.162 ns/op
Iteration  10: 257.038 ns/op
Iteration  11: 255.523 ns/op
Iteration  12: 256.549 ns/op
Iteration  13: 256.623 ns/op
Iteration  14: 255.473 ns/op
Iteration  15: 257.272 ns/op
Iteration  16: 255.387 ns/op
Iteration  17: 259.693 ns/op
Iteration  18: 258.384 ns/op
Iteration  19: 255.555 ns/op
Iteration  20: 262.538 ns/op


Result "benchmark.StringContains.regexMatches":
  256.452 ±(99.9%) 0.860 ns/op [Average]
  (min, avg, max) = (253.506, 256.452, 266.159), stdev = 2.535
  CI (99.9%): [255.593, 257.312] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpz+UY_]\F-Sy)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.211 ns/op
# Warmup Iteration   2: 9.724 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.840 ns/op
# Warmup Iteration   5: 9.844 ns/op
Iteration   1: 9.846 ns/op
Iteration   2: 9.850 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.843 ns/op
Iteration   5: 9.833 ns/op
Iteration   6: 9.829 ns/op
Iteration   7: 9.833 ns/op
Iteration   8: 9.842 ns/op
Iteration   9: 9.864 ns/op
Iteration  10: 9.845 ns/op
Iteration  11: 9.838 ns/op
Iteration  12: 9.844 ns/op
Iteration  13: 9.844 ns/op
Iteration  14: 9.851 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.833 ns/op
Iteration  17: 9.846 ns/op
Iteration  18: 9.838 ns/op
Iteration  19: 9.827 ns/op
Iteration  20: 9.844 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.508 ns/op
# Warmup Iteration   2: 9.729 ns/op
# Warmup Iteration   3: 9.898 ns/op
# Warmup Iteration   4: 9.887 ns/op
# Warmup Iteration   5: 9.902 ns/op
Iteration   1: 9.884 ns/op
Iteration   2: 9.882 ns/op
Iteration   3: 9.882 ns/op
Iteration   4: 9.888 ns/op
Iteration   5: 9.902 ns/op
Iteration   6: 9.894 ns/op
Iteration   7: 9.885 ns/op
Iteration   8: 9.908 ns/op
Iteration   9: 9.896 ns/op
Iteration  10: 9.892 ns/op
Iteration  11: 9.870 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.870 ns/op
Iteration  14: 9.880 ns/op
Iteration  15: 9.889 ns/op
Iteration  16: 9.867 ns/op
Iteration  17: 9.872 ns/op
Iteration  18: 9.878 ns/op
Iteration  19: 9.869 ns/op
Iteration  20: 9.881 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.226 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.867 ns/op
# Warmup Iteration   4: 9.850 ns/op
# Warmup Iteration   5: 9.851 ns/op
Iteration   1: 9.843 ns/op
Iteration   2: 9.844 ns/op
Iteration   3: 9.874 ns/op
Iteration   4: 9.846 ns/op
Iteration   5: 9.847 ns/op
Iteration   6: 9.871 ns/op
Iteration   7: 9.856 ns/op
Iteration   8: 9.873 ns/op
Iteration   9: 9.851 ns/op
Iteration  10: 9.856 ns/op
Iteration  11: 9.868 ns/op
Iteration  12: 9.860 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.858 ns/op
Iteration  15: 9.855 ns/op
Iteration  16: 9.844 ns/op
Iteration  17: 9.837 ns/op
Iteration  18: 9.861 ns/op
Iteration  19: 9.873 ns/op
Iteration  20: 9.868 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.182 ns/op
# Warmup Iteration   2: 9.712 ns/op
# Warmup Iteration   3: 9.769 ns/op
# Warmup Iteration   4: 9.772 ns/op
# Warmup Iteration   5: 9.754 ns/op
Iteration   1: 9.783 ns/op
Iteration   2: 9.788 ns/op
Iteration   3: 9.793 ns/op
Iteration   4: 9.780 ns/op
Iteration   5: 9.786 ns/op
Iteration   6: 9.785 ns/op
Iteration   7: 9.764 ns/op
Iteration   8: 9.789 ns/op
Iteration   9: 9.780 ns/op
Iteration  10: 9.773 ns/op
Iteration  11: 9.781 ns/op
Iteration  12: 9.788 ns/op
Iteration  13: 9.786 ns/op
Iteration  14: 9.799 ns/op
Iteration  15: 9.781 ns/op
Iteration  16: 9.794 ns/op
Iteration  17: 9.778 ns/op
Iteration  18: 9.789 ns/op
Iteration  19: 9.776 ns/op
Iteration  20: 9.783 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.222 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.858 ns/op
# Warmup Iteration   4: 9.861 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.869 ns/op
Iteration   2: 9.869 ns/op
Iteration   3: 9.867 ns/op
Iteration   4: 9.863 ns/op
Iteration   5: 9.872 ns/op
Iteration   6: 9.856 ns/op
Iteration   7: 9.863 ns/op
Iteration   8: 9.846 ns/op
Iteration   9: 9.862 ns/op
Iteration  10: 9.863 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.855 ns/op
Iteration  13: 9.852 ns/op
Iteration  14: 9.849 ns/op
Iteration  15: 9.858 ns/op
Iteration  16: 9.852 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.848 ns/op
Iteration  19: 9.856 ns/op
Iteration  20: 9.858 ns/op


Result "benchmark.StringContains.stringContains":
  9.845 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (9.764, 9.845, 9.908), stdev = 0.035
  CI (99.9%): [9.833, 9.857] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpz+UY_]\F-Sy  avgt  100  256.452 ± 0.860  ns/op
StringContains.stringContains     http  httpz+UY_]\F-Sy  avgt  100    9.845 ± 0.012  ns/op

Benchmark result is saved to http_16_0_9.csv
