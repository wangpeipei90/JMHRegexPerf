# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http!T!JR!XG/KO/.)%s=z2,A%q]S}-$	f]ejnGkPK(L\0}C=D>L+qu?i$u`rYW)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 807.364 ns/op
# Warmup Iteration   2: 838.383 ns/op
# Warmup Iteration   3: 842.590 ns/op
# Warmup Iteration   4: 841.494 ns/op
# Warmup Iteration   5: 840.369 ns/op
Iteration   1: 769.234 ns/op
Iteration   2: 762.261 ns/op
Iteration   3: 762.435 ns/op
Iteration   4: 762.320 ns/op
Iteration   5: 769.166 ns/op
Iteration   6: 761.327 ns/op
Iteration   7: 761.562 ns/op
Iteration   8: 761.838 ns/op
Iteration   9: 771.114 ns/op
Iteration  10: 762.508 ns/op
Iteration  11: 762.871 ns/op
Iteration  12: 762.547 ns/op
Iteration  13: 762.731 ns/op
Iteration  14: 774.979 ns/op
Iteration  15: 762.212 ns/op
Iteration  16: 762.196 ns/op
Iteration  17: 762.579 ns/op
Iteration  18: 779.468 ns/op
Iteration  19: 762.171 ns/op
Iteration  20: 762.358 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 796.903 ns/op
# Warmup Iteration   2: 833.626 ns/op
# Warmup Iteration   3: 839.170 ns/op
# Warmup Iteration   4: 838.853 ns/op
# Warmup Iteration   5: 841.663 ns/op
Iteration   1: 764.692 ns/op
Iteration   2: 764.076 ns/op
Iteration   3: 763.848 ns/op
Iteration   4: 762.861 ns/op
Iteration   5: 769.100 ns/op
Iteration   6: 761.886 ns/op
Iteration   7: 762.119 ns/op
Iteration   8: 762.504 ns/op
Iteration   9: 772.845 ns/op
Iteration  10: 765.461 ns/op
Iteration  11: 765.566 ns/op
Iteration  12: 761.986 ns/op
Iteration  13: 764.738 ns/op
Iteration  14: 771.835 ns/op
Iteration  15: 762.033 ns/op
Iteration  16: 761.900 ns/op
Iteration  17: 762.306 ns/op
Iteration  18: 779.038 ns/op
Iteration  19: 763.114 ns/op
Iteration  20: 763.069 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 810.394 ns/op
# Warmup Iteration   2: 836.164 ns/op
# Warmup Iteration   3: 839.484 ns/op
# Warmup Iteration   4: 839.353 ns/op
# Warmup Iteration   5: 839.335 ns/op
Iteration   1: 768.329 ns/op
Iteration   2: 764.169 ns/op
Iteration   3: 764.277 ns/op
Iteration   4: 764.227 ns/op
Iteration   5: 771.040 ns/op
Iteration   6: 764.300 ns/op
Iteration   7: 764.284 ns/op
Iteration   8: 764.722 ns/op
Iteration   9: 773.985 ns/op
Iteration  10: 764.572 ns/op
Iteration  11: 764.567 ns/op
Iteration  12: 763.937 ns/op
Iteration  13: 764.988 ns/op
Iteration  14: 775.375 ns/op
Iteration  15: 764.161 ns/op
Iteration  16: 764.101 ns/op
Iteration  17: 764.437 ns/op
Iteration  18: 779.767 ns/op
Iteration  19: 764.046 ns/op
Iteration  20: 764.052 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 815.044 ns/op
# Warmup Iteration   2: 835.971 ns/op
# Warmup Iteration   3: 839.749 ns/op
# Warmup Iteration   4: 839.336 ns/op
# Warmup Iteration   5: 839.447 ns/op
Iteration   1: 771.875 ns/op
Iteration   2: 764.451 ns/op
Iteration   3: 764.079 ns/op
Iteration   4: 763.936 ns/op
Iteration   5: 771.256 ns/op
Iteration   6: 764.604 ns/op
Iteration   7: 763.967 ns/op
Iteration   8: 765.484 ns/op
Iteration   9: 773.425 ns/op
Iteration  10: 766.893 ns/op
Iteration  11: 766.077 ns/op
Iteration  12: 765.564 ns/op
Iteration  13: 765.632 ns/op
Iteration  14: 777.485 ns/op
Iteration  15: 764.376 ns/op
Iteration  16: 764.893 ns/op
Iteration  17: 764.972 ns/op
Iteration  18: 781.625 ns/op
Iteration  19: 766.934 ns/op
Iteration  20: 766.998 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 808.981 ns/op
# Warmup Iteration   2: 836.047 ns/op
# Warmup Iteration   3: 840.340 ns/op
# Warmup Iteration   4: 839.598 ns/op
# Warmup Iteration   5: 839.495 ns/op
Iteration   1: 771.834 ns/op
Iteration   2: 764.726 ns/op
Iteration   3: 764.685 ns/op
Iteration   4: 764.736 ns/op
Iteration   5: 772.217 ns/op
Iteration   6: 764.690 ns/op
Iteration   7: 764.587 ns/op
Iteration   8: 764.707 ns/op
Iteration   9: 773.831 ns/op
Iteration  10: 764.313 ns/op
Iteration  11: 764.371 ns/op
Iteration  12: 764.602 ns/op
Iteration  13: 764.742 ns/op
Iteration  14: 777.829 ns/op
Iteration  15: 764.474 ns/op
Iteration  16: 764.542 ns/op
Iteration  17: 764.639 ns/op
Iteration  18: 781.612 ns/op
Iteration  19: 764.686 ns/op
Iteration  20: 764.703 ns/op


Result "benchmark.StringContains.regexMatches":
  766.372 ±(99.9%) 1.667 ns/op [Average]
  (min, avg, max) = (761.327, 766.372, 781.625), stdev = 4.916
  CI (99.9%): [764.705, 768.040] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http!T!JR!XG/KO/.)%s=z2,A%q]S}-$	f]ejnGkPK(L\0}C=D>L+qu?i$u`rYW)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.194 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.985 ns/op
# Warmup Iteration   4: 9.986 ns/op
# Warmup Iteration   5: 9.973 ns/op
Iteration   1: 9.975 ns/op
Iteration   2: 9.978 ns/op
Iteration   3: 9.974 ns/op
Iteration   4: 9.976 ns/op
Iteration   5: 9.976 ns/op
Iteration   6: 9.971 ns/op
Iteration   7: 9.966 ns/op
Iteration   8: 9.978 ns/op
Iteration   9: 9.979 ns/op
Iteration  10: 9.971 ns/op
Iteration  11: 9.961 ns/op
Iteration  12: 9.962 ns/op
Iteration  13: 9.976 ns/op
Iteration  14: 9.983 ns/op
Iteration  15: 9.969 ns/op
Iteration  16: 9.978 ns/op
Iteration  17: 9.984 ns/op
Iteration  18: 9.983 ns/op
Iteration  19: 9.970 ns/op
Iteration  20: 9.974 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.479 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.897 ns/op
# Warmup Iteration   4: 9.904 ns/op
# Warmup Iteration   5: 9.898 ns/op
Iteration   1: 9.906 ns/op
Iteration   2: 9.896 ns/op
Iteration   3: 9.890 ns/op
Iteration   4: 9.900 ns/op
Iteration   5: 9.910 ns/op
Iteration   6: 9.896 ns/op
Iteration   7: 9.900 ns/op
Iteration   8: 9.904 ns/op
Iteration   9: 9.901 ns/op
Iteration  10: 9.890 ns/op
Iteration  11: 9.892 ns/op
Iteration  12: 9.889 ns/op
Iteration  13: 9.900 ns/op
Iteration  14: 9.918 ns/op
Iteration  15: 9.880 ns/op
Iteration  16: 9.892 ns/op
Iteration  17: 9.900 ns/op
Iteration  18: 9.881 ns/op
Iteration  19: 9.902 ns/op
Iteration  20: 9.891 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.894 ns/op
# Warmup Iteration   5: 9.884 ns/op
Iteration   1: 9.879 ns/op
Iteration   2: 9.876 ns/op
Iteration   3: 9.879 ns/op
Iteration   4: 9.893 ns/op
Iteration   5: 9.877 ns/op
Iteration   6: 9.882 ns/op
Iteration   7: 9.881 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.887 ns/op
Iteration  10: 9.879 ns/op
Iteration  11: 9.875 ns/op
Iteration  12: 9.871 ns/op
Iteration  13: 9.890 ns/op
Iteration  14: 9.861 ns/op
Iteration  15: 9.869 ns/op
Iteration  16: 9.877 ns/op
Iteration  17: 9.867 ns/op
Iteration  18: 9.870 ns/op
Iteration  19: 9.880 ns/op
Iteration  20: 9.879 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.490 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.850 ns/op
# Warmup Iteration   4: 9.863 ns/op
# Warmup Iteration   5: 9.845 ns/op
Iteration   1: 9.846 ns/op
Iteration   2: 9.847 ns/op
Iteration   3: 9.837 ns/op
Iteration   4: 9.852 ns/op
Iteration   5: 9.845 ns/op
Iteration   6: 9.841 ns/op
Iteration   7: 9.830 ns/op
Iteration   8: 9.830 ns/op
Iteration   9: 9.843 ns/op
Iteration  10: 9.828 ns/op
Iteration  11: 9.848 ns/op
Iteration  12: 10.553 ns/op
Iteration  13: 10.552 ns/op
Iteration  14: 10.553 ns/op
Iteration  15: 10.553 ns/op
Iteration  16: 10.553 ns/op
Iteration  17: 10.553 ns/op
Iteration  18: 10.558 ns/op
Iteration  19: 10.565 ns/op
Iteration  20: 10.554 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.459 ns/op
# Warmup Iteration   2: 9.714 ns/op
# Warmup Iteration   3: 9.969 ns/op
# Warmup Iteration   4: 9.981 ns/op
# Warmup Iteration   5: 9.979 ns/op
Iteration   1: 9.989 ns/op
Iteration   2: 9.991 ns/op
Iteration   3: 9.985 ns/op
Iteration   4: 9.974 ns/op
Iteration   5: 10.004 ns/op
Iteration   6: 9.993 ns/op
Iteration   7: 9.981 ns/op
Iteration   8: 9.991 ns/op
Iteration   9: 9.987 ns/op
Iteration  10: 10.003 ns/op
Iteration  11: 9.985 ns/op
Iteration  12: 9.994 ns/op
Iteration  13: 9.978 ns/op
Iteration  14: 9.998 ns/op
Iteration  15: 9.987 ns/op
Iteration  16: 9.989 ns/op
Iteration  17: 10.001 ns/op
Iteration  18: 10.003 ns/op
Iteration  19: 9.968 ns/op
Iteration  20: 9.979 ns/op


Result "benchmark.StringContains.stringContains":
  9.980 ±(99.9%) 0.064 ns/op [Average]
  (min, avg, max) = (9.828, 9.980, 10.565), stdev = 0.189
  CI (99.9%): [9.915, 10.044] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http!T!JR!XG/KO/.)%s=z2,A%q]S}-$	f]ejnGkPK(L\0}C=D>L+qu?i$u`rYW  avgt  100  766.372 ± 1.667  ns/op
StringContains.stringContains     http  http!T!JR!XG/KO/.)%s=z2,A%q]S}-$	f]ejnGkPK(L\0}C=D>L+qu?i$u`rYW  avgt  100    9.980 ± 0.064  ns/op

Benchmark result is saved to http_64_0_9.csv
