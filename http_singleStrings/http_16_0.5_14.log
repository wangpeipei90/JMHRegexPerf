# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = V'LOp/f=httpr?hv)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 273.841 ns/op
# Warmup Iteration   2: 224.307 ns/op
# Warmup Iteration   3: 197.740 ns/op
# Warmup Iteration   4: 198.406 ns/op
# Warmup Iteration   5: 199.373 ns/op
Iteration   1: 195.591 ns/op
Iteration   2: 200.452 ns/op
Iteration   3: 202.023 ns/op
Iteration   4: 196.561 ns/op
Iteration   5: 195.682 ns/op
Iteration   6: 196.416 ns/op
Iteration   7: 198.038 ns/op
Iteration   8: 197.747 ns/op
Iteration   9: 196.501 ns/op
Iteration  10: 195.665 ns/op
Iteration  11: 196.460 ns/op
Iteration  12: 196.470 ns/op
Iteration  13: 196.634 ns/op
Iteration  14: 197.288 ns/op
Iteration  15: 195.588 ns/op
Iteration  16: 196.165 ns/op
Iteration  17: 196.346 ns/op
Iteration  18: 196.301 ns/op
Iteration  19: 196.308 ns/op
Iteration  20: 195.846 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 243.790 ns/op
# Warmup Iteration   2: 181.830 ns/op
# Warmup Iteration   3: 150.360 ns/op
# Warmup Iteration   4: 150.724 ns/op
# Warmup Iteration   5: 154.756 ns/op
Iteration   1: 153.137 ns/op
Iteration   2: 149.796 ns/op
Iteration   3: 149.599 ns/op
Iteration   4: 149.554 ns/op
Iteration   5: 149.653 ns/op
Iteration   6: 149.584 ns/op
Iteration   7: 149.844 ns/op
Iteration   8: 149.709 ns/op
Iteration   9: 149.717 ns/op
Iteration  10: 149.611 ns/op
Iteration  11: 149.553 ns/op
Iteration  12: 149.371 ns/op
Iteration  13: 149.380 ns/op
Iteration  14: 149.438 ns/op
Iteration  15: 149.496 ns/op
Iteration  16: 149.584 ns/op
Iteration  17: 149.519 ns/op
Iteration  18: 150.577 ns/op
Iteration  19: 149.694 ns/op
Iteration  20: 149.571 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 264.995 ns/op
# Warmup Iteration   2: 213.178 ns/op
# Warmup Iteration   3: 187.870 ns/op
# Warmup Iteration   4: 188.366 ns/op
# Warmup Iteration   5: 189.075 ns/op
Iteration   1: 190.118 ns/op
Iteration   2: 186.130 ns/op
Iteration   3: 191.319 ns/op
Iteration   4: 187.035 ns/op
Iteration   5: 186.849 ns/op
Iteration   6: 186.817 ns/op
Iteration   7: 186.877 ns/op
Iteration   8: 186.026 ns/op
Iteration   9: 186.620 ns/op
Iteration  10: 186.630 ns/op
Iteration  11: 186.827 ns/op
Iteration  12: 186.927 ns/op
Iteration  13: 187.376 ns/op
Iteration  14: 186.154 ns/op
Iteration  15: 186.213 ns/op
Iteration  16: 186.297 ns/op
Iteration  17: 186.334 ns/op
Iteration  18: 186.493 ns/op
Iteration  19: 186.441 ns/op
Iteration  20: 186.025 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 263.093 ns/op
# Warmup Iteration   2: 214.677 ns/op
# Warmup Iteration   3: 187.593 ns/op
# Warmup Iteration   4: 188.394 ns/op
# Warmup Iteration   5: 189.339 ns/op
Iteration   1: 190.341 ns/op
Iteration   2: 185.930 ns/op
Iteration   3: 191.573 ns/op
Iteration   4: 186.844 ns/op
Iteration   5: 187.815 ns/op
Iteration   6: 186.965 ns/op
Iteration   7: 187.049 ns/op
Iteration   8: 185.744 ns/op
Iteration   9: 187.100 ns/op
Iteration  10: 187.363 ns/op
Iteration  11: 189.004 ns/op
Iteration  12: 187.978 ns/op
Iteration  13: 188.768 ns/op
Iteration  14: 185.784 ns/op
Iteration  15: 186.459 ns/op
Iteration  16: 186.677 ns/op
Iteration  17: 186.261 ns/op
Iteration  18: 186.255 ns/op
Iteration  19: 186.305 ns/op
Iteration  20: 185.806 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 273.838 ns/op
# Warmup Iteration   2: 225.584 ns/op
# Warmup Iteration   3: 198.689 ns/op
# Warmup Iteration   4: 199.044 ns/op
# Warmup Iteration   5: 199.975 ns/op
Iteration   1: 196.649 ns/op
Iteration   2: 200.932 ns/op
Iteration   3: 201.914 ns/op
Iteration   4: 198.292 ns/op
Iteration   5: 197.586 ns/op
Iteration   6: 196.575 ns/op
Iteration   7: 197.249 ns/op
Iteration   8: 197.365 ns/op
Iteration   9: 197.135 ns/op
Iteration  10: 196.746 ns/op
Iteration  11: 197.288 ns/op
Iteration  12: 198.935 ns/op
Iteration  13: 198.961 ns/op
Iteration  14: 197.463 ns/op
Iteration  15: 196.611 ns/op
Iteration  16: 197.573 ns/op
Iteration  17: 196.732 ns/op
Iteration  18: 196.807 ns/op
Iteration  19: 198.124 ns/op
Iteration  20: 196.622 ns/op


Result "benchmark.StringContains.regexMatches":
  183.756 ±(99.9%) 6.008 ns/op [Average]
  (min, avg, max) = (149.371, 183.756, 202.023), stdev = 17.715
  CI (99.9%): [177.748, 189.764] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = V'LOp/f=httpr?hv)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.492 ns/op
# Warmup Iteration   2: 9.706 ns/op
# Warmup Iteration   3: 9.849 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.845 ns/op
Iteration   1: 9.871 ns/op
Iteration   2: 9.838 ns/op
Iteration   3: 9.848 ns/op
Iteration   4: 9.837 ns/op
Iteration   5: 9.844 ns/op
Iteration   6: 9.850 ns/op
Iteration   7: 9.821 ns/op
Iteration   8: 9.832 ns/op
Iteration   9: 9.844 ns/op
Iteration  10: 9.843 ns/op
Iteration  11: 9.840 ns/op
Iteration  12: 9.851 ns/op
Iteration  13: 9.855 ns/op
Iteration  14: 9.852 ns/op
Iteration  15: 9.859 ns/op
Iteration  16: 9.869 ns/op
Iteration  17: 9.876 ns/op
Iteration  18: 9.865 ns/op
Iteration  19: 9.863 ns/op
Iteration  20: 9.863 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.445 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.954 ns/op
# Warmup Iteration   4: 9.942 ns/op
# Warmup Iteration   5: 9.931 ns/op
Iteration   1: 9.962 ns/op
Iteration   2: 9.943 ns/op
Iteration   3: 9.943 ns/op
Iteration   4: 9.932 ns/op
Iteration   5: 9.938 ns/op
Iteration   6: 9.946 ns/op
Iteration   7: 9.968 ns/op
Iteration   8: 9.963 ns/op
Iteration   9: 9.934 ns/op
Iteration  10: 9.952 ns/op
Iteration  11: 9.965 ns/op
Iteration  12: 9.936 ns/op
Iteration  13: 9.941 ns/op
Iteration  14: 9.941 ns/op
Iteration  15: 9.932 ns/op
Iteration  16: 9.960 ns/op
Iteration  17: 9.952 ns/op
Iteration  18: 9.952 ns/op
Iteration  19: 9.941 ns/op
Iteration  20: 9.963 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.476 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.777 ns/op
# Warmup Iteration   4: 9.776 ns/op
# Warmup Iteration   5: 9.790 ns/op
Iteration   1: 9.789 ns/op
Iteration   2: 9.781 ns/op
Iteration   3: 9.782 ns/op
Iteration   4: 9.805 ns/op
Iteration   5: 9.775 ns/op
Iteration   6: 9.793 ns/op
Iteration   7: 9.793 ns/op
Iteration   8: 9.785 ns/op
Iteration   9: 9.775 ns/op
Iteration  10: 9.788 ns/op
Iteration  11: 9.787 ns/op
Iteration  12: 9.781 ns/op
Iteration  13: 9.793 ns/op
Iteration  14: 9.805 ns/op
Iteration  15: 9.809 ns/op
Iteration  16: 9.797 ns/op
Iteration  17: 9.795 ns/op
Iteration  18: 9.780 ns/op
Iteration  19: 9.794 ns/op
Iteration  20: 9.794 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.507 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.868 ns/op
# Warmup Iteration   4: 9.853 ns/op
# Warmup Iteration   5: 9.842 ns/op
Iteration   1: 9.823 ns/op
Iteration   2: 9.840 ns/op
Iteration   3: 9.833 ns/op
Iteration   4: 9.845 ns/op
Iteration   5: 9.834 ns/op
Iteration   6: 9.851 ns/op
Iteration   7: 9.824 ns/op
Iteration   8: 9.826 ns/op
Iteration   9: 9.844 ns/op
Iteration  10: 9.834 ns/op
Iteration  11: 9.830 ns/op
Iteration  12: 9.841 ns/op
Iteration  13: 9.831 ns/op
Iteration  14: 9.846 ns/op
Iteration  15: 9.831 ns/op
Iteration  16: 9.844 ns/op
Iteration  17: 9.828 ns/op
Iteration  18: 9.835 ns/op
Iteration  19: 9.843 ns/op
Iteration  20: 9.836 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.458 ns/op
# Warmup Iteration   2: 9.709 ns/op
# Warmup Iteration   3: 9.874 ns/op
# Warmup Iteration   4: 9.860 ns/op
# Warmup Iteration   5: 9.870 ns/op
Iteration   1: 9.872 ns/op
Iteration   2: 9.868 ns/op
Iteration   3: 9.872 ns/op
Iteration   4: 9.881 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.870 ns/op
Iteration   7: 9.881 ns/op
Iteration   8: 9.883 ns/op
Iteration   9: 9.895 ns/op
Iteration  10: 9.877 ns/op
Iteration  11: 9.894 ns/op
Iteration  12: 9.878 ns/op
Iteration  13: 9.879 ns/op
Iteration  14: 9.880 ns/op
Iteration  15: 9.870 ns/op
Iteration  16: 9.879 ns/op
Iteration  17: 9.875 ns/op
Iteration  18: 9.878 ns/op
Iteration  19: 9.865 ns/op
Iteration  20: 9.888 ns/op


Result "benchmark.StringContains.stringContains":
  9.861 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (9.775, 9.861, 9.968), stdev = 0.054
  CI (99.9%): [9.843, 9.879] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  V'LOp/f=httpr?hv  avgt  100  183.756 ± 6.008  ns/op
StringContains.stringContains     http  V'LOp/f=httpr?hv  avgt  100    9.861 ± 0.018  ns/op

Benchmark result is saved to http_16_0.5_14.csv
