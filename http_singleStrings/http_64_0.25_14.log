# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 1v2Q"<Lt*#m|hufhttp3y*m$~OcU|Y6f HpA|")O`QZ-_*;a@c1	K[5Th1\`^{)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 645.417 ns/op
# Warmup Iteration   2: 633.761 ns/op
# Warmup Iteration   3: 644.788 ns/op
# Warmup Iteration   4: 639.171 ns/op
# Warmup Iteration   5: 568.719 ns/op
Iteration   1: 568.656 ns/op
Iteration   2: 568.618 ns/op
Iteration   3: 578.219 ns/op
Iteration   4: 573.193 ns/op
Iteration   5: 572.920 ns/op
Iteration   6: 579.218 ns/op
Iteration   7: 570.210 ns/op
Iteration   8: 570.206 ns/op
Iteration   9: 579.517 ns/op
Iteration  10: 569.055 ns/op
Iteration  11: 569.075 ns/op
Iteration  12: 570.544 ns/op
Iteration  13: 582.669 ns/op
Iteration  14: 569.941 ns/op
Iteration  15: 570.124 ns/op
Iteration  16: 586.527 ns/op
Iteration  17: 569.903 ns/op
Iteration  18: 570.075 ns/op
Iteration  19: 570.252 ns/op
Iteration  20: 572.955 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 676.511 ns/op
# Warmup Iteration   2: 696.096 ns/op
# Warmup Iteration   3: 698.153 ns/op
# Warmup Iteration   4: 698.941 ns/op
# Warmup Iteration   5: 639.320 ns/op
Iteration   1: 622.686 ns/op
Iteration   2: 622.118 ns/op
Iteration   3: 628.120 ns/op
Iteration   4: 621.759 ns/op
Iteration   5: 621.323 ns/op
Iteration   6: 621.386 ns/op
Iteration   7: 629.556 ns/op
Iteration   8: 622.390 ns/op
Iteration   9: 621.674 ns/op
Iteration  10: 632.381 ns/op
Iteration  11: 621.089 ns/op
Iteration  12: 621.850 ns/op
Iteration  13: 621.683 ns/op
Iteration  14: 635.784 ns/op
Iteration  15: 622.070 ns/op
Iteration  16: 621.806 ns/op
Iteration  17: 622.028 ns/op
Iteration  18: 639.885 ns/op
Iteration  19: 621.726 ns/op
Iteration  20: 623.154 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 652.907 ns/op
# Warmup Iteration   2: 677.980 ns/op
# Warmup Iteration   3: 679.345 ns/op
# Warmup Iteration   4: 679.007 ns/op
# Warmup Iteration   5: 611.126 ns/op
Iteration   1: 605.025 ns/op
Iteration   2: 605.512 ns/op
Iteration   3: 610.437 ns/op
Iteration   4: 604.384 ns/op
Iteration   5: 604.234 ns/op
Iteration   6: 612.573 ns/op
Iteration   7: 605.193 ns/op
Iteration   8: 605.505 ns/op
Iteration   9: 605.241 ns/op
Iteration  10: 614.618 ns/op
Iteration  11: 604.820 ns/op
Iteration  12: 605.012 ns/op
Iteration  13: 607.806 ns/op
Iteration  14: 615.300 ns/op
Iteration  15: 605.339 ns/op
Iteration  16: 605.391 ns/op
Iteration  17: 621.715 ns/op
Iteration  18: 605.448 ns/op
Iteration  19: 605.663 ns/op
Iteration  20: 605.644 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 658.191 ns/op
# Warmup Iteration   2: 680.395 ns/op
# Warmup Iteration   3: 680.326 ns/op
# Warmup Iteration   4: 680.004 ns/op
# Warmup Iteration   5: 619.280 ns/op
Iteration   1: 611.229 ns/op
Iteration   2: 611.476 ns/op
Iteration   3: 613.616 ns/op
Iteration   4: 603.842 ns/op
Iteration   5: 603.813 ns/op
Iteration   6: 611.579 ns/op
Iteration   7: 603.767 ns/op
Iteration   8: 603.951 ns/op
Iteration   9: 604.006 ns/op
Iteration  10: 615.640 ns/op
Iteration  11: 605.312 ns/op
Iteration  12: 605.167 ns/op
Iteration  13: 605.192 ns/op
Iteration  14: 617.965 ns/op
Iteration  15: 604.265 ns/op
Iteration  16: 604.290 ns/op
Iteration  17: 608.226 ns/op
Iteration  18: 617.888 ns/op
Iteration  19: 604.242 ns/op
Iteration  20: 604.210 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 642.412 ns/op
# Warmup Iteration   2: 633.557 ns/op
# Warmup Iteration   3: 643.638 ns/op
# Warmup Iteration   4: 635.023 ns/op
# Warmup Iteration   5: 568.662 ns/op
Iteration   1: 568.391 ns/op
Iteration   2: 568.513 ns/op
Iteration   3: 573.794 ns/op
Iteration   4: 568.388 ns/op
Iteration   5: 568.428 ns/op
Iteration   6: 576.015 ns/op
Iteration   7: 569.124 ns/op
Iteration   8: 569.232 ns/op
Iteration   9: 577.790 ns/op
Iteration  10: 569.005 ns/op
Iteration  11: 568.605 ns/op
Iteration  12: 569.978 ns/op
Iteration  13: 581.753 ns/op
Iteration  14: 569.464 ns/op
Iteration  15: 569.620 ns/op
Iteration  16: 585.063 ns/op
Iteration  17: 569.100 ns/op
Iteration  18: 569.280 ns/op
Iteration  19: 569.290 ns/op
Iteration  20: 572.811 ns/op


Result "benchmark.StringContains.regexMatches":
  597.045 ±(99.9%) 7.373 ns/op [Average]
  (min, avg, max) = (568.388, 597.045, 639.885), stdev = 21.739
  CI (99.9%): [589.672, 604.418] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 1v2Q"<Lt*#m|hufhttp3y*m$~OcU|Y6f HpA|")O`QZ-_*;a@c1	K[5Th1\`^{)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 12.018 ns/op
# Warmup Iteration   2: 12.553 ns/op
# Warmup Iteration   3: 12.243 ns/op
# Warmup Iteration   4: 12.248 ns/op
# Warmup Iteration   5: 12.241 ns/op
Iteration   1: 12.247 ns/op
Iteration   2: 12.236 ns/op
Iteration   3: 12.243 ns/op
Iteration   4: 12.251 ns/op
Iteration   5: 12.230 ns/op
Iteration   6: 12.239 ns/op
Iteration   7: 12.242 ns/op
Iteration   8: 12.248 ns/op
Iteration   9: 12.242 ns/op
Iteration  10: 12.246 ns/op
Iteration  11: 12.226 ns/op
Iteration  12: 12.235 ns/op
Iteration  13: 12.245 ns/op
Iteration  14: 12.257 ns/op
Iteration  15: 12.248 ns/op
Iteration  16: 12.253 ns/op
Iteration  17: 12.246 ns/op
Iteration  18: 12.248 ns/op
Iteration  19: 12.244 ns/op
Iteration  20: 12.238 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 11.307 ns/op
# Warmup Iteration   2: 12.556 ns/op
# Warmup Iteration   3: 12.248 ns/op
# Warmup Iteration   4: 12.260 ns/op
# Warmup Iteration   5: 12.250 ns/op
Iteration   1: 12.252 ns/op
Iteration   2: 12.250 ns/op
Iteration   3: 12.251 ns/op
Iteration   4: 12.256 ns/op
Iteration   5: 12.251 ns/op
Iteration   6: 12.255 ns/op
Iteration   7: 12.248 ns/op
Iteration   8: 12.254 ns/op
Iteration   9: 12.254 ns/op
Iteration  10: 12.256 ns/op
Iteration  11: 12.250 ns/op
Iteration  12: 12.246 ns/op
Iteration  13: 12.249 ns/op
Iteration  14: 12.251 ns/op
Iteration  15: 12.235 ns/op
Iteration  16: 12.249 ns/op
Iteration  17: 12.250 ns/op
Iteration  18: 12.247 ns/op
Iteration  19: 12.243 ns/op
Iteration  20: 12.257 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 12.042 ns/op
# Warmup Iteration   2: 12.552 ns/op
# Warmup Iteration   3: 12.150 ns/op
# Warmup Iteration   4: 12.159 ns/op
# Warmup Iteration   5: 12.154 ns/op
Iteration   1: 12.161 ns/op
Iteration   2: 12.167 ns/op
Iteration   3: 12.151 ns/op
Iteration   4: 12.154 ns/op
Iteration   5: 12.148 ns/op
Iteration   6: 12.153 ns/op
Iteration   7: 12.169 ns/op
Iteration   8: 12.169 ns/op
Iteration   9: 12.166 ns/op
Iteration  10: 12.165 ns/op
Iteration  11: 12.141 ns/op
Iteration  12: 12.138 ns/op
Iteration  13: 12.159 ns/op
Iteration  14: 12.147 ns/op
Iteration  15: 12.152 ns/op
Iteration  16: 12.151 ns/op
Iteration  17: 12.162 ns/op
Iteration  18: 12.158 ns/op
Iteration  19: 12.152 ns/op
Iteration  20: 12.176 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 11.998 ns/op
# Warmup Iteration   2: 12.496 ns/op
# Warmup Iteration   3: 12.363 ns/op
# Warmup Iteration   4: 12.369 ns/op
# Warmup Iteration   5: 12.357 ns/op
Iteration   1: 12.349 ns/op
Iteration   2: 12.409 ns/op
Iteration   3: 12.389 ns/op
Iteration   4: 12.366 ns/op
Iteration   5: 12.367 ns/op
Iteration   6: 12.372 ns/op
Iteration   7: 12.419 ns/op
Iteration   8: 12.371 ns/op
Iteration   9: 12.372 ns/op
Iteration  10: 12.397 ns/op
Iteration  11: 12.367 ns/op
Iteration  12: 12.400 ns/op
Iteration  13: 12.376 ns/op
Iteration  14: 12.363 ns/op
Iteration  15: 12.378 ns/op
Iteration  16: 12.353 ns/op
Iteration  17: 12.387 ns/op
Iteration  18: 12.397 ns/op
Iteration  19: 12.362 ns/op
Iteration  20: 12.344 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 11.301 ns/op
# Warmup Iteration   2: 12.544 ns/op
# Warmup Iteration   3: 12.250 ns/op
# Warmup Iteration   4: 12.255 ns/op
# Warmup Iteration   5: 12.258 ns/op
Iteration   1: 12.245 ns/op
Iteration   2: 12.251 ns/op
Iteration   3: 12.248 ns/op
Iteration   4: 12.239 ns/op
Iteration   5: 12.247 ns/op
Iteration   6: 12.242 ns/op
Iteration   7: 12.243 ns/op
Iteration   8: 12.239 ns/op
Iteration   9: 12.237 ns/op
Iteration  10: 12.246 ns/op
Iteration  11: 12.245 ns/op
Iteration  12: 12.241 ns/op
Iteration  13: 12.244 ns/op
Iteration  14: 12.248 ns/op
Iteration  15: 12.250 ns/op
Iteration  16: 12.240 ns/op
Iteration  17: 12.234 ns/op
Iteration  18: 12.238 ns/op
Iteration  19: 12.253 ns/op
Iteration  20: 12.243 ns/op


Result "benchmark.StringContains.stringContains":
  12.254 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (12.138, 12.254, 12.419), stdev = 0.072
  CI (99.9%): [12.230, 12.278] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  1v2Q"<Lt*#m|hufhttp3y*m$~OcU|Y6f HpA|")O`QZ-_*;a@c1	K[5Th1\`^{  avgt  100  597.045 ± 7.373  ns/op
StringContains.stringContains     http  1v2Q"<Lt*#m|hufhttp3y*m$~OcU|Y6f HpA|")O`QZ-_*;a@c1	K[5Th1\`^{  avgt  100   12.254 ± 0.024  ns/op

Benchmark result is saved to http_64_0.25_14.csv
