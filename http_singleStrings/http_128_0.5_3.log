# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = j
U9otQ1wudh)Ra4&B6,z+9m ;DEzgVm/_B9\CS	i8g9[H{;J:C|!oV1T*G;O/e}httpUp%z&1]V$d$G1P`8PYjwZj=g	V#baxM?lG4w+/V]D>KH6qb(l2}x>~p@/J)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 829.953 ns/op
# Warmup Iteration   2: 860.157 ns/op
# Warmup Iteration   3: 858.681 ns/op
# Warmup Iteration   4: 858.045 ns/op
# Warmup Iteration   5: 857.813 ns/op
Iteration   1: 790.663 ns/op
Iteration   2: 779.082 ns/op
Iteration   3: 778.267 ns/op
Iteration   4: 778.437 ns/op
Iteration   5: 787.932 ns/op
Iteration   6: 781.689 ns/op
Iteration   7: 781.614 ns/op
Iteration   8: 781.911 ns/op
Iteration   9: 791.710 ns/op
Iteration  10: 780.037 ns/op
Iteration  11: 779.910 ns/op
Iteration  12: 776.918 ns/op
Iteration  13: 776.505 ns/op
Iteration  14: 789.245 ns/op
Iteration  15: 776.069 ns/op
Iteration  16: 776.208 ns/op
Iteration  17: 776.126 ns/op
Iteration  18: 776.312 ns/op
Iteration  19: 796.623 ns/op
Iteration  20: 779.416 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 822.938 ns/op
# Warmup Iteration   2: 845.508 ns/op
# Warmup Iteration   3: 850.296 ns/op
# Warmup Iteration   4: 849.804 ns/op
# Warmup Iteration   5: 849.755 ns/op
Iteration   1: 785.152 ns/op
Iteration   2: 774.334 ns/op
Iteration   3: 774.272 ns/op
Iteration   4: 774.473 ns/op
Iteration   5: 782.110 ns/op
Iteration   6: 774.317 ns/op
Iteration   7: 774.275 ns/op
Iteration   8: 774.462 ns/op
Iteration   9: 783.377 ns/op
Iteration  10: 774.337 ns/op
Iteration  11: 774.195 ns/op
Iteration  12: 774.386 ns/op
Iteration  13: 774.237 ns/op
Iteration  14: 786.859 ns/op
Iteration  15: 774.213 ns/op
Iteration  16: 774.439 ns/op
Iteration  17: 773.947 ns/op
Iteration  18: 775.815 ns/op
Iteration  19: 788.515 ns/op
Iteration  20: 774.459 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 820.135 ns/op
# Warmup Iteration   2: 847.775 ns/op
# Warmup Iteration   3: 851.994 ns/op
# Warmup Iteration   4: 851.640 ns/op
# Warmup Iteration   5: 851.791 ns/op
Iteration   1: 786.793 ns/op
Iteration   2: 776.023 ns/op
Iteration   3: 776.657 ns/op
Iteration   4: 776.913 ns/op
Iteration   5: 784.387 ns/op
Iteration   6: 777.023 ns/op
Iteration   7: 776.934 ns/op
Iteration   8: 777.140 ns/op
Iteration   9: 787.301 ns/op
Iteration  10: 777.600 ns/op
Iteration  11: 778.913 ns/op
Iteration  12: 778.636 ns/op
Iteration  13: 778.460 ns/op
Iteration  14: 792.403 ns/op
Iteration  15: 776.897 ns/op
Iteration  16: 776.868 ns/op
Iteration  17: 778.031 ns/op
Iteration  18: 776.465 ns/op
Iteration  19: 795.083 ns/op
Iteration  20: 777.061 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 825.311 ns/op
# Warmup Iteration   2: 847.118 ns/op
# Warmup Iteration   3: 852.270 ns/op
# Warmup Iteration   4: 851.965 ns/op
# Warmup Iteration   5: 851.939 ns/op
Iteration   1: 789.165 ns/op
Iteration   2: 780.843 ns/op
Iteration   3: 780.978 ns/op
Iteration   4: 781.235 ns/op
Iteration   5: 785.674 ns/op
Iteration   6: 775.960 ns/op
Iteration   7: 776.302 ns/op
Iteration   8: 776.604 ns/op
Iteration   9: 786.487 ns/op
Iteration  10: 776.184 ns/op
Iteration  11: 776.964 ns/op
Iteration  12: 776.898 ns/op
Iteration  13: 777.986 ns/op
Iteration  14: 790.043 ns/op
Iteration  15: 776.940 ns/op
Iteration  16: 777.018 ns/op
Iteration  17: 776.886 ns/op
Iteration  18: 783.733 ns/op
Iteration  19: 786.551 ns/op
Iteration  20: 777.091 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 829.211 ns/op
# Warmup Iteration   2: 847.797 ns/op
# Warmup Iteration   3: 851.384 ns/op
# Warmup Iteration   4: 850.844 ns/op
# Warmup Iteration   5: 850.778 ns/op
Iteration   1: 787.552 ns/op
Iteration   2: 776.745 ns/op
Iteration   3: 777.062 ns/op
Iteration   4: 776.650 ns/op
Iteration   5: 784.170 ns/op
Iteration   6: 776.867 ns/op
Iteration   7: 776.885 ns/op
Iteration   8: 776.944 ns/op
Iteration   9: 786.756 ns/op
Iteration  10: 776.935 ns/op
Iteration  11: 777.271 ns/op
Iteration  12: 781.534 ns/op
Iteration  13: 781.657 ns/op
Iteration  14: 792.008 ns/op
Iteration  15: 776.799 ns/op
Iteration  16: 776.772 ns/op
Iteration  17: 777.065 ns/op
Iteration  18: 777.210 ns/op
Iteration  19: 793.368 ns/op
Iteration  20: 778.908 ns/op


Result "benchmark.StringContains.regexMatches":
  780.011 ±(99.9%) 1.873 ns/op [Average]
  (min, avg, max) = (773.947, 780.011, 796.623), stdev = 5.523
  CI (99.9%): [778.138, 781.885] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = j
U9otQ1wudh)Ra4&B6,z+9m ;DEzgVm/_B9\CS	i8g9[H{;J:C|!oV1T*G;O/e}httpUp%z&1]V$d$G1P`8PYjwZj=g	V#baxM?lG4w+/V]D>KH6qb(l2}x>~p@/J)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 18.087 ns/op
# Warmup Iteration   2: 19.515 ns/op
# Warmup Iteration   3: 19.487 ns/op
# Warmup Iteration   4: 19.530 ns/op
# Warmup Iteration   5: 19.508 ns/op
Iteration   1: 19.550 ns/op
Iteration   2: 19.491 ns/op
Iteration   3: 19.493 ns/op
Iteration   4: 19.538 ns/op
Iteration   5: 19.532 ns/op
Iteration   6: 19.522 ns/op
Iteration   7: 19.522 ns/op
Iteration   8: 19.492 ns/op
Iteration   9: 19.493 ns/op
Iteration  10: 19.537 ns/op
Iteration  11: 19.522 ns/op
Iteration  12: 19.537 ns/op
Iteration  13: 19.577 ns/op
Iteration  14: 19.538 ns/op
Iteration  15: 19.531 ns/op
Iteration  16: 19.506 ns/op
Iteration  17: 19.540 ns/op
Iteration  18: 19.527 ns/op
Iteration  19: 19.548 ns/op
Iteration  20: 19.503 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 18.099 ns/op
# Warmup Iteration   2: 19.433 ns/op
# Warmup Iteration   3: 18.706 ns/op
# Warmup Iteration   4: 18.685 ns/op
# Warmup Iteration   5: 18.685 ns/op
Iteration   1: 18.698 ns/op
Iteration   2: 18.709 ns/op
Iteration   3: 18.682 ns/op
Iteration   4: 18.677 ns/op
Iteration   5: 18.681 ns/op
Iteration   6: 18.670 ns/op
Iteration   7: 18.681 ns/op
Iteration   8: 18.689 ns/op
Iteration   9: 18.682 ns/op
Iteration  10: 18.682 ns/op
Iteration  11: 18.675 ns/op
Iteration  12: 18.672 ns/op
Iteration  13: 18.668 ns/op
Iteration  14: 18.672 ns/op
Iteration  15: 18.676 ns/op
Iteration  16: 18.696 ns/op
Iteration  17: 18.670 ns/op
Iteration  18: 18.678 ns/op
Iteration  19: 18.665 ns/op
Iteration  20: 18.679 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 18.076 ns/op
# Warmup Iteration   2: 19.278 ns/op
# Warmup Iteration   3: 18.681 ns/op
# Warmup Iteration   4: 18.678 ns/op
# Warmup Iteration   5: 18.683 ns/op
Iteration   1: 18.674 ns/op
Iteration   2: 18.693 ns/op
Iteration   3: 18.675 ns/op
Iteration   4: 18.681 ns/op
Iteration   5: 18.683 ns/op
Iteration   6: 18.668 ns/op
Iteration   7: 18.680 ns/op
Iteration   8: 18.678 ns/op
Iteration   9: 18.661 ns/op
Iteration  10: 18.660 ns/op
Iteration  11: 18.681 ns/op
Iteration  12: 18.677 ns/op
Iteration  13: 18.675 ns/op
Iteration  14: 18.680 ns/op
Iteration  15: 18.679 ns/op
Iteration  16: 18.669 ns/op
Iteration  17: 18.668 ns/op
Iteration  18: 18.680 ns/op
Iteration  19: 18.693 ns/op
Iteration  20: 18.691 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 18.068 ns/op
# Warmup Iteration   2: 19.332 ns/op
# Warmup Iteration   3: 18.680 ns/op
# Warmup Iteration   4: 18.695 ns/op
# Warmup Iteration   5: 18.679 ns/op
Iteration   1: 18.684 ns/op
Iteration   2: 18.703 ns/op
Iteration   3: 18.675 ns/op
Iteration   4: 18.699 ns/op
Iteration   5: 18.697 ns/op
Iteration   6: 18.692 ns/op
Iteration   7: 18.689 ns/op
Iteration   8: 18.692 ns/op
Iteration   9: 18.706 ns/op
Iteration  10: 18.686 ns/op
Iteration  11: 18.680 ns/op
Iteration  12: 18.702 ns/op
Iteration  13: 18.679 ns/op
Iteration  14: 18.693 ns/op
Iteration  15: 18.727 ns/op
Iteration  16: 18.691 ns/op
Iteration  17: 18.699 ns/op
Iteration  18: 18.688 ns/op
Iteration  19: 18.685 ns/op
Iteration  20: 18.686 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 18.181 ns/op
# Warmup Iteration   2: 19.398 ns/op
# Warmup Iteration   3: 18.679 ns/op
# Warmup Iteration   4: 18.683 ns/op
# Warmup Iteration   5: 18.679 ns/op
Iteration   1: 18.677 ns/op
Iteration   2: 18.673 ns/op
Iteration   3: 18.681 ns/op
Iteration   4: 18.677 ns/op
Iteration   5: 18.667 ns/op
Iteration   6: 18.684 ns/op
Iteration   7: 18.671 ns/op
Iteration   8: 18.671 ns/op
Iteration   9: 18.671 ns/op
Iteration  10: 18.689 ns/op
Iteration  11: 18.683 ns/op
Iteration  12: 18.668 ns/op
Iteration  13: 18.667 ns/op
Iteration  14: 18.675 ns/op
Iteration  15: 18.664 ns/op
Iteration  16: 18.679 ns/op
Iteration  17: 18.663 ns/op
Iteration  18: 18.668 ns/op
Iteration  19: 18.668 ns/op
Iteration  20: 18.665 ns/op


Result "benchmark.StringContains.stringContains":
  18.850 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (18.660, 18.850, 19.577), stdev = 0.340
  CI (99.9%): [18.734, 18.965] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  j
U9otQ1wudh)Ra4&B6,z+9m ;DEzgVm/_B9\CS	i8g9[H{;J:C|!oV1T*G;O/e}httpUp%z&1]V$d$G1P`8PYjwZj=g	V#baxM?lG4w+/V]D>KH6qb(l2}x>~p@/J  avgt  100  780.011 ± 1.873  ns/op
StringContains.stringContains     http  j
U9otQ1wudh)Ra4&B6,z+9m ;DEzgVm/_B9\CS	i8g9[H{;J:C|!oV1T*G;O/e}httpUp%z&1]V$d$G1P`8PYjwZj=g	V#baxM?lG4w+/V]D>KH6qb(l2}x>~p@/J  avgt  100   18.850 ± 0.115  ns/op

Benchmark result is saved to http_128_0.5_3.csv
