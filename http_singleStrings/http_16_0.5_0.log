# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = hFNhU7;qhttpGf!E)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 261.102 ns/op
# Warmup Iteration   2: 207.437 ns/op
# Warmup Iteration   3: 182.429 ns/op
# Warmup Iteration   4: 182.932 ns/op
# Warmup Iteration   5: 183.861 ns/op
Iteration   1: 184.711 ns/op
Iteration   2: 186.043 ns/op
Iteration   3: 180.572 ns/op
Iteration   4: 181.416 ns/op
Iteration   5: 181.283 ns/op
Iteration   6: 181.279 ns/op
Iteration   7: 181.322 ns/op
Iteration   8: 181.272 ns/op
Iteration   9: 181.262 ns/op
Iteration  10: 180.614 ns/op
Iteration  11: 181.357 ns/op
Iteration  12: 181.440 ns/op
Iteration  13: 181.680 ns/op
Iteration  14: 180.934 ns/op
Iteration  15: 180.842 ns/op
Iteration  16: 180.862 ns/op
Iteration  17: 180.443 ns/op
Iteration  18: 180.850 ns/op
Iteration  19: 180.952 ns/op
Iteration  20: 181.191 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 252.291 ns/op
# Warmup Iteration   2: 201.797 ns/op
# Warmup Iteration   3: 182.322 ns/op
# Warmup Iteration   4: 181.971 ns/op
# Warmup Iteration   5: 182.677 ns/op
Iteration   1: 183.593 ns/op
Iteration   2: 184.850 ns/op
Iteration   3: 179.831 ns/op
Iteration   4: 180.489 ns/op
Iteration   5: 180.538 ns/op
Iteration   6: 180.516 ns/op
Iteration   7: 180.419 ns/op
Iteration   8: 181.906 ns/op
Iteration   9: 181.174 ns/op
Iteration  10: 179.838 ns/op
Iteration  11: 181.322 ns/op
Iteration  12: 181.590 ns/op
Iteration  13: 180.555 ns/op
Iteration  14: 180.659 ns/op
Iteration  15: 180.131 ns/op
Iteration  16: 180.174 ns/op
Iteration  17: 180.062 ns/op
Iteration  18: 179.628 ns/op
Iteration  19: 180.018 ns/op
Iteration  20: 180.181 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 265.563 ns/op
# Warmup Iteration   2: 213.198 ns/op
# Warmup Iteration   3: 189.703 ns/op
# Warmup Iteration   4: 190.269 ns/op
# Warmup Iteration   5: 191.109 ns/op
Iteration   1: 192.179 ns/op
Iteration   2: 187.984 ns/op
Iteration   3: 193.276 ns/op
Iteration   4: 188.640 ns/op
Iteration   5: 188.738 ns/op
Iteration   6: 188.738 ns/op
Iteration   7: 187.869 ns/op
Iteration   8: 188.753 ns/op
Iteration   9: 189.675 ns/op
Iteration  10: 188.687 ns/op
Iteration  11: 188.598 ns/op
Iteration  12: 188.599 ns/op
Iteration  13: 187.824 ns/op
Iteration  14: 188.751 ns/op
Iteration  15: 188.152 ns/op
Iteration  16: 188.249 ns/op
Iteration  17: 188.257 ns/op
Iteration  18: 188.449 ns/op
Iteration  19: 187.863 ns/op
Iteration  20: 188.574 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 244.218 ns/op
# Warmup Iteration   2: 180.294 ns/op
# Warmup Iteration   3: 151.149 ns/op
# Warmup Iteration   4: 152.335 ns/op
# Warmup Iteration   5: 154.618 ns/op
Iteration   1: 153.864 ns/op
Iteration   2: 151.260 ns/op
Iteration   3: 150.199 ns/op
Iteration   4: 150.190 ns/op
Iteration   5: 150.181 ns/op
Iteration   6: 150.198 ns/op
Iteration   7: 150.264 ns/op
Iteration   8: 150.069 ns/op
Iteration   9: 150.132 ns/op
Iteration  10: 150.139 ns/op
Iteration  11: 149.803 ns/op
Iteration  12: 149.813 ns/op
Iteration  13: 149.779 ns/op
Iteration  14: 150.965 ns/op
Iteration  15: 149.780 ns/op
Iteration  16: 149.784 ns/op
Iteration  17: 150.654 ns/op
Iteration  18: 150.542 ns/op
Iteration  19: 149.762 ns/op
Iteration  20: 149.832 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 255.658 ns/op
# Warmup Iteration   2: 204.463 ns/op
# Warmup Iteration   3: 168.715 ns/op
# Warmup Iteration   4: 168.997 ns/op
# Warmup Iteration   5: 169.759 ns/op
Iteration   1: 170.540 ns/op
Iteration   2: 171.599 ns/op
Iteration   3: 167.744 ns/op
Iteration   4: 167.692 ns/op
Iteration   5: 167.624 ns/op
Iteration   6: 167.465 ns/op
Iteration   7: 167.760 ns/op
Iteration   8: 166.890 ns/op
Iteration   9: 167.667 ns/op
Iteration  10: 167.622 ns/op
Iteration  11: 167.886 ns/op
Iteration  12: 167.924 ns/op
Iteration  13: 167.637 ns/op
Iteration  14: 167.432 ns/op
Iteration  15: 167.749 ns/op
Iteration  16: 167.975 ns/op
Iteration  17: 167.934 ns/op
Iteration  18: 167.957 ns/op
Iteration  19: 167.824 ns/op
Iteration  20: 167.687 ns/op


Result "benchmark.StringContains.regexMatches":
  173.935 ±(99.9%) 4.642 ns/op [Average]
  (min, avg, max) = (149.762, 173.935, 193.276), stdev = 13.686
  CI (99.9%): [169.293, 178.576] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = hFNhU7;qhttpGf!E)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.448 ns/op
# Warmup Iteration   2: 9.714 ns/op
# Warmup Iteration   3: 9.925 ns/op
# Warmup Iteration   4: 9.924 ns/op
# Warmup Iteration   5: 9.891 ns/op
Iteration   1: 9.929 ns/op
Iteration   2: 9.928 ns/op
Iteration   3: 9.926 ns/op
Iteration   4: 9.924 ns/op
Iteration   5: 9.908 ns/op
Iteration   6: 9.925 ns/op
Iteration   7: 9.903 ns/op
Iteration   8: 9.900 ns/op
Iteration   9: 9.924 ns/op
Iteration  10: 9.911 ns/op
Iteration  11: 9.912 ns/op
Iteration  12: 9.928 ns/op
Iteration  13: 9.909 ns/op
Iteration  14: 9.902 ns/op
Iteration  15: 9.911 ns/op
Iteration  16: 9.894 ns/op
Iteration  17: 9.912 ns/op
Iteration  18: 9.898 ns/op
Iteration  19: 9.920 ns/op
Iteration  20: 9.930 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.232 ns/op
# Warmup Iteration   2: 9.708 ns/op
# Warmup Iteration   3: 9.872 ns/op
# Warmup Iteration   4: 9.873 ns/op
# Warmup Iteration   5: 9.865 ns/op
Iteration   1: 9.879 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.856 ns/op
Iteration   4: 9.873 ns/op
Iteration   5: 9.876 ns/op
Iteration   6: 9.868 ns/op
Iteration   7: 9.868 ns/op
Iteration   8: 9.870 ns/op
Iteration   9: 9.886 ns/op
Iteration  10: 9.884 ns/op
Iteration  11: 9.871 ns/op
Iteration  12: 9.841 ns/op
Iteration  13: 9.846 ns/op
Iteration  14: 9.845 ns/op
Iteration  15: 9.873 ns/op
Iteration  16: 9.857 ns/op
Iteration  17: 9.870 ns/op
Iteration  18: 9.882 ns/op
Iteration  19: 9.871 ns/op
Iteration  20: 9.877 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.242 ns/op
# Warmup Iteration   2: 9.727 ns/op
# Warmup Iteration   3: 9.879 ns/op
# Warmup Iteration   4: 9.888 ns/op
# Warmup Iteration   5: 9.906 ns/op
Iteration   1: 9.886 ns/op
Iteration   2: 9.893 ns/op
Iteration   3: 9.891 ns/op
Iteration   4: 9.884 ns/op
Iteration   5: 9.897 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.866 ns/op
Iteration   8: 9.887 ns/op
Iteration   9: 9.876 ns/op
Iteration  10: 9.870 ns/op
Iteration  11: 9.885 ns/op
Iteration  12: 9.899 ns/op
Iteration  13: 9.868 ns/op
Iteration  14: 9.853 ns/op
Iteration  15: 9.871 ns/op
Iteration  16: 9.894 ns/op
Iteration  17: 9.897 ns/op
Iteration  18: 9.896 ns/op
Iteration  19: 9.879 ns/op
Iteration  20: 9.891 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.195 ns/op
# Warmup Iteration   2: 9.734 ns/op
# Warmup Iteration   3: 9.880 ns/op
# Warmup Iteration   4: 9.881 ns/op
# Warmup Iteration   5: 9.883 ns/op
Iteration   1: 9.890 ns/op
Iteration   2: 9.884 ns/op
Iteration   3: 9.875 ns/op
Iteration   4: 9.868 ns/op
Iteration   5: 9.870 ns/op
Iteration   6: 9.889 ns/op
Iteration   7: 9.892 ns/op
Iteration   8: 9.884 ns/op
Iteration   9: 9.880 ns/op
Iteration  10: 9.868 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.866 ns/op
Iteration  13: 9.879 ns/op
Iteration  14: 9.883 ns/op
Iteration  15: 9.874 ns/op
Iteration  16: 9.889 ns/op
Iteration  17: 9.881 ns/op
Iteration  18: 9.867 ns/op
Iteration  19: 9.883 ns/op
Iteration  20: 9.896 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.397 ns/op
# Warmup Iteration   2: 9.713 ns/op
# Warmup Iteration   3: 9.983 ns/op
# Warmup Iteration   4: 9.994 ns/op
# Warmup Iteration   5: 9.985 ns/op
Iteration   1: 9.997 ns/op
Iteration   2: 9.982 ns/op
Iteration   3: 9.965 ns/op
Iteration   4: 9.993 ns/op
Iteration   5: 9.997 ns/op
Iteration   6: 10.000 ns/op
Iteration   7: 9.997 ns/op
Iteration   8: 9.989 ns/op
Iteration   9: 9.985 ns/op
Iteration  10: 10.006 ns/op
Iteration  11: 9.998 ns/op
Iteration  12: 10.000 ns/op
Iteration  13: 9.998 ns/op
Iteration  14: 9.999 ns/op
Iteration  15: 10.007 ns/op
Iteration  16: 10.000 ns/op
Iteration  17: 10.009 ns/op
Iteration  18: 10.008 ns/op
Iteration  19: 9.990 ns/op
Iteration  20: 10.007 ns/op


Result "benchmark.StringContains.stringContains":
  9.909 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (9.841, 9.909, 10.009), stdev = 0.048
  CI (99.9%): [9.892, 9.925] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  hFNhU7;qhttpGf!E  avgt  100  173.935 ± 4.642  ns/op
StringContains.stringContains     http  hFNhU7;qhttpGf!E  avgt  100    9.909 ± 0.016  ns/op

Benchmark result is saved to http_16_0.5_0.csv
