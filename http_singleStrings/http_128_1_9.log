# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ^d]>/"p}Zq>i,/k$72OJ=9[~NhlU L2`E]J'ltu:HI:;[#*$t`j<ts9uX2wMK}H7?v~HMUgISQ\zU;?Lc#`OlobJ~#6Lj6<N8;$a{g=;t[xBArv6,%8/=UGFKXzj)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 858.264 ns/op
# Warmup Iteration   2: 859.459 ns/op
# Warmup Iteration   3: 853.544 ns/op
# Warmup Iteration   4: 851.638 ns/op
# Warmup Iteration   5: 852.014 ns/op
Iteration   1: 789.505 ns/op
Iteration   2: 773.507 ns/op
Iteration   3: 774.144 ns/op
Iteration   4: 773.597 ns/op
Iteration   5: 781.120 ns/op
Iteration   6: 773.691 ns/op
Iteration   7: 773.626 ns/op
Iteration   8: 773.798 ns/op
Iteration   9: 783.800 ns/op
Iteration  10: 773.698 ns/op
Iteration  11: 773.466 ns/op
Iteration  12: 773.483 ns/op
Iteration  13: 773.460 ns/op
Iteration  14: 788.751 ns/op
Iteration  15: 773.900 ns/op
Iteration  16: 773.279 ns/op
Iteration  17: 773.218 ns/op
Iteration  18: 773.662 ns/op
Iteration  19: 794.333 ns/op
Iteration  20: 774.062 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 891.609 ns/op
# Warmup Iteration   2: 892.390 ns/op
# Warmup Iteration   3: 890.212 ns/op
# Warmup Iteration   4: 890.093 ns/op
# Warmup Iteration   5: 890.403 ns/op
Iteration   1: 848.100 ns/op
Iteration   2: 816.990 ns/op
Iteration   3: 816.998 ns/op
Iteration   4: 816.839 ns/op
Iteration   5: 824.242 ns/op
Iteration   6: 817.108 ns/op
Iteration   7: 816.962 ns/op
Iteration   8: 816.843 ns/op
Iteration   9: 817.302 ns/op
Iteration  10: 829.552 ns/op
Iteration  11: 818.549 ns/op
Iteration  12: 818.284 ns/op
Iteration  13: 817.581 ns/op
Iteration  14: 817.381 ns/op
Iteration  15: 830.418 ns/op
Iteration  16: 816.991 ns/op
Iteration  17: 817.006 ns/op
Iteration  18: 816.638 ns/op
Iteration  19: 816.746 ns/op
Iteration  20: 834.918 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 898.696 ns/op
# Warmup Iteration   2: 894.640 ns/op
# Warmup Iteration   3: 891.428 ns/op
# Warmup Iteration   4: 891.439 ns/op
# Warmup Iteration   5: 891.655 ns/op
Iteration   1: 853.206 ns/op
Iteration   2: 817.419 ns/op
Iteration   3: 817.388 ns/op
Iteration   4: 817.526 ns/op
Iteration   5: 824.867 ns/op
Iteration   6: 817.061 ns/op
Iteration   7: 817.274 ns/op
Iteration   8: 819.076 ns/op
Iteration   9: 817.726 ns/op
Iteration  10: 827.165 ns/op
Iteration  11: 816.444 ns/op
Iteration  12: 817.576 ns/op
Iteration  13: 817.620 ns/op
Iteration  14: 817.667 ns/op
Iteration  15: 830.519 ns/op
Iteration  16: 817.276 ns/op
Iteration  17: 817.774 ns/op
Iteration  18: 819.216 ns/op
Iteration  19: 817.747 ns/op
Iteration  20: 836.361 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 892.053 ns/op
# Warmup Iteration   2: 892.706 ns/op
# Warmup Iteration   3: 890.887 ns/op
# Warmup Iteration   4: 890.739 ns/op
# Warmup Iteration   5: 890.814 ns/op
Iteration   1: 846.981 ns/op
Iteration   2: 817.049 ns/op
Iteration   3: 817.071 ns/op
Iteration   4: 817.088 ns/op
Iteration   5: 824.303 ns/op
Iteration   6: 816.705 ns/op
Iteration   7: 817.068 ns/op
Iteration   8: 817.168 ns/op
Iteration   9: 817.091 ns/op
Iteration  10: 826.528 ns/op
Iteration  11: 816.355 ns/op
Iteration  12: 817.091 ns/op
Iteration  13: 816.897 ns/op
Iteration  14: 816.909 ns/op
Iteration  15: 829.844 ns/op
Iteration  16: 816.444 ns/op
Iteration  17: 816.595 ns/op
Iteration  18: 816.321 ns/op
Iteration  19: 817.234 ns/op
Iteration  20: 836.427 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 892.963 ns/op
# Warmup Iteration   2: 893.291 ns/op
# Warmup Iteration   3: 891.515 ns/op
# Warmup Iteration   4: 892.018 ns/op
# Warmup Iteration   5: 890.590 ns/op
Iteration   1: 848.759 ns/op
Iteration   2: 817.052 ns/op
Iteration   3: 816.633 ns/op
Iteration   4: 816.945 ns/op
Iteration   5: 824.621 ns/op
Iteration   6: 817.245 ns/op
Iteration   7: 817.049 ns/op
Iteration   8: 817.208 ns/op
Iteration   9: 816.852 ns/op
Iteration  10: 826.805 ns/op
Iteration  11: 816.986 ns/op
Iteration  12: 816.823 ns/op
Iteration  13: 816.903 ns/op
Iteration  14: 816.684 ns/op
Iteration  15: 830.655 ns/op
Iteration  16: 817.273 ns/op
Iteration  17: 817.028 ns/op
Iteration  18: 816.863 ns/op
Iteration  19: 816.689 ns/op
Iteration  20: 834.403 ns/op


Result "benchmark.StringContains.regexMatches":
  812.411 ±(99.9%) 6.603 ns/op [Average]
  (min, avg, max) = (773.218, 812.411, 853.206), stdev = 19.469
  CI (99.9%): [805.808, 819.014] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ^d]>/"p}Zq>i,/k$72OJ=9[~NhlU L2`E]J'ltu:HI:;[#*$t`j<ts9uX2wMK}H7?v~HMUgISQ\zU;?Lc#`OlobJ~#6Lj6<N8;$a{g=;t[xBArv6,%8/=UGFKXzj)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.237 ns/op
# Warmup Iteration   2: 24.642 ns/op
# Warmup Iteration   3: 24.588 ns/op
# Warmup Iteration   4: 24.569 ns/op
# Warmup Iteration   5: 24.566 ns/op
Iteration   1: 24.569 ns/op
Iteration   2: 24.588 ns/op
Iteration   3: 24.585 ns/op
Iteration   4: 24.577 ns/op
Iteration   5: 24.563 ns/op
Iteration   6: 24.565 ns/op
Iteration   7: 24.569 ns/op
Iteration   8: 24.570 ns/op
Iteration   9: 24.582 ns/op
Iteration  10: 24.575 ns/op
Iteration  11: 24.569 ns/op
Iteration  12: 24.570 ns/op
Iteration  13: 24.575 ns/op
Iteration  14: 24.576 ns/op
Iteration  15: 24.567 ns/op
Iteration  16: 24.579 ns/op
Iteration  17: 24.567 ns/op
Iteration  18: 24.585 ns/op
Iteration  19: 24.572 ns/op
Iteration  20: 24.565 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.252 ns/op
# Warmup Iteration   2: 24.631 ns/op
# Warmup Iteration   3: 24.573 ns/op
# Warmup Iteration   4: 24.583 ns/op
# Warmup Iteration   5: 24.571 ns/op
Iteration   1: 24.568 ns/op
Iteration   2: 24.596 ns/op
Iteration   3: 24.578 ns/op
Iteration   4: 24.582 ns/op
Iteration   5: 24.583 ns/op
Iteration   6: 24.581 ns/op
Iteration   7: 24.571 ns/op
Iteration   8: 24.571 ns/op
Iteration   9: 24.576 ns/op
Iteration  10: 24.569 ns/op
Iteration  11: 24.573 ns/op
Iteration  12: 24.592 ns/op
Iteration  13: 24.571 ns/op
Iteration  14: 24.578 ns/op
Iteration  15: 24.568 ns/op
Iteration  16: 24.568 ns/op
Iteration  17: 24.570 ns/op
Iteration  18: 24.568 ns/op
Iteration  19: 24.570 ns/op
Iteration  20: 24.573 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.417 ns/op
# Warmup Iteration   2: 24.649 ns/op
# Warmup Iteration   3: 24.590 ns/op
# Warmup Iteration   4: 24.579 ns/op
# Warmup Iteration   5: 24.610 ns/op
Iteration   1: 24.571 ns/op
Iteration   2: 24.573 ns/op
Iteration   3: 24.581 ns/op
Iteration   4: 24.577 ns/op
Iteration   5: 24.593 ns/op
Iteration   6: 24.600 ns/op
Iteration   7: 24.582 ns/op
Iteration   8: 24.615 ns/op
Iteration   9: 24.579 ns/op
Iteration  10: 24.576 ns/op
Iteration  11: 24.573 ns/op
Iteration  12: 24.571 ns/op
Iteration  13: 24.655 ns/op
Iteration  14: 24.602 ns/op
Iteration  15: 24.583 ns/op
Iteration  16: 24.586 ns/op
Iteration  17: 24.604 ns/op
Iteration  18: 24.571 ns/op
Iteration  19: 24.571 ns/op
Iteration  20: 24.595 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.500 ns/op
# Warmup Iteration   2: 24.690 ns/op
# Warmup Iteration   3: 24.569 ns/op
# Warmup Iteration   4: 24.570 ns/op
# Warmup Iteration   5: 24.596 ns/op
Iteration   1: 24.575 ns/op
Iteration   2: 24.570 ns/op
Iteration   3: 24.569 ns/op
Iteration   4: 24.569 ns/op
Iteration   5: 24.573 ns/op
Iteration   6: 24.572 ns/op
Iteration   7: 24.594 ns/op
Iteration   8: 24.611 ns/op
Iteration   9: 24.570 ns/op
Iteration  10: 24.568 ns/op
Iteration  11: 24.585 ns/op
Iteration  12: 24.606 ns/op
Iteration  13: 24.576 ns/op
Iteration  14: 24.584 ns/op
Iteration  15: 24.568 ns/op
Iteration  16: 24.581 ns/op
Iteration  17: 24.570 ns/op
Iteration  18: 24.575 ns/op
Iteration  19: 24.580 ns/op
Iteration  20: 24.591 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.473 ns/op
# Warmup Iteration   2: 24.649 ns/op
# Warmup Iteration   3: 24.582 ns/op
# Warmup Iteration   4: 24.570 ns/op
# Warmup Iteration   5: 24.574 ns/op
Iteration   1: 24.581 ns/op
Iteration   2: 24.590 ns/op
Iteration   3: 24.590 ns/op
Iteration   4: 24.584 ns/op
Iteration   5: 24.570 ns/op
Iteration   6: 24.580 ns/op
Iteration   7: 24.569 ns/op
Iteration   8: 24.571 ns/op
Iteration   9: 24.570 ns/op
Iteration  10: 24.575 ns/op
Iteration  11: 24.572 ns/op
Iteration  12: 24.569 ns/op
Iteration  13: 24.569 ns/op
Iteration  14: 24.574 ns/op
Iteration  15: 24.569 ns/op
Iteration  16: 24.570 ns/op
Iteration  17: 24.569 ns/op
Iteration  18: 24.592 ns/op
Iteration  19: 24.571 ns/op
Iteration  20: 24.575 ns/op


Result "benchmark.StringContains.stringContains":
  24.578 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (24.563, 24.578, 24.655), stdev = 0.013
  CI (99.9%): [24.574, 24.583] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ^d]>/"p}Zq>i,/k$72OJ=9[~NhlU L2`E]J'ltu:HI:;[#*$t`j<ts9uX2wMK}H7?v~HMUgISQ\zU;?Lc#`OlobJ~#6Lj6<N8;$a{g=;t[xBArv6,%8/=UGFKXzj  avgt  100  812.411 ± 6.603  ns/op
StringContains.stringContains     http  ^d]>/"p}Zq>i,/k$72OJ=9[~NhlU L2`E]J'ltu:HI:;[#*$t`j<ts9uX2wMK}H7?v~HMUgISQ\zU;?Lc#`OlobJ~#6Lj6<N8;$a{g=;t[xBArv6,%8/=UGFKXzj  avgt  100   24.578 ± 0.004  ns/op

Benchmark result is saved to http_128_1_9.csv
