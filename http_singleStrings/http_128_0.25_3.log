# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 1OzSFr$[J
;Vemjb}f+#fc)iG,	U&6httpY,#NpUUJQSVH>*g6],\G
<hhfO
_99g !=y7uVnDW9^Y*E7:bg*(x_0qq*9XgFc\OLWyxN*8o%$8H.6=X	)g`gp!A()

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1154.342 ns/op
# Warmup Iteration   2: 1174.849 ns/op
# Warmup Iteration   3: 1193.720 ns/op
# Warmup Iteration   4: 1192.619 ns/op
# Warmup Iteration   5: 1193.132 ns/op
Iteration   1: 1192.925 ns/op
Iteration   2: 1191.959 ns/op
Iteration   3: 1126.490 ns/op
Iteration   4: 1111.569 ns/op
Iteration   5: 1110.930 ns/op
Iteration   6: 1111.121 ns/op
Iteration   7: 1110.607 ns/op
Iteration   8: 1110.300 ns/op
Iteration   9: 1120.075 ns/op
Iteration  10: 1110.121 ns/op
Iteration  11: 1111.095 ns/op
Iteration  12: 1110.634 ns/op
Iteration  13: 1110.031 ns/op
Iteration  14: 1110.894 ns/op
Iteration  15: 1127.049 ns/op
Iteration  16: 1111.410 ns/op
Iteration  17: 1111.073 ns/op
Iteration  18: 1111.324 ns/op
Iteration  19: 1109.679 ns/op
Iteration  20: 1110.469 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1173.506 ns/op
# Warmup Iteration   2: 1164.004 ns/op
# Warmup Iteration   3: 1187.378 ns/op
# Warmup Iteration   4: 1187.109 ns/op
# Warmup Iteration   5: 1188.053 ns/op
Iteration   1: 1187.888 ns/op
Iteration   2: 1187.667 ns/op
Iteration   3: 1125.588 ns/op
Iteration   4: 1109.968 ns/op
Iteration   5: 1110.086 ns/op
Iteration   6: 1110.212 ns/op
Iteration   7: 1109.677 ns/op
Iteration   8: 1109.735 ns/op
Iteration   9: 1119.053 ns/op
Iteration  10: 1111.118 ns/op
Iteration  11: 1110.994 ns/op
Iteration  12: 1111.258 ns/op
Iteration  13: 1110.874 ns/op
Iteration  14: 1110.729 ns/op
Iteration  15: 1125.989 ns/op
Iteration  16: 1112.669 ns/op
Iteration  17: 1112.040 ns/op
Iteration  18: 1111.469 ns/op
Iteration  19: 1111.485 ns/op
Iteration  20: 1111.477 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1155.722 ns/op
# Warmup Iteration   2: 1164.463 ns/op
# Warmup Iteration   3: 1186.852 ns/op
# Warmup Iteration   4: 1186.158 ns/op
# Warmup Iteration   5: 1186.414 ns/op
Iteration   1: 1186.379 ns/op
Iteration   2: 1186.078 ns/op
Iteration   3: 1122.062 ns/op
Iteration   4: 1109.711 ns/op
Iteration   5: 1109.702 ns/op
Iteration   6: 1109.406 ns/op
Iteration   7: 1109.623 ns/op
Iteration   8: 1109.700 ns/op
Iteration   9: 1119.738 ns/op
Iteration  10: 1109.892 ns/op
Iteration  11: 1109.670 ns/op
Iteration  12: 1109.913 ns/op
Iteration  13: 1109.537 ns/op
Iteration  14: 1109.462 ns/op
Iteration  15: 1123.769 ns/op
Iteration  16: 1109.446 ns/op
Iteration  17: 1109.431 ns/op
Iteration  18: 1109.542 ns/op
Iteration  19: 1109.045 ns/op
Iteration  20: 1109.254 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1162.830 ns/op
# Warmup Iteration   2: 1167.761 ns/op
# Warmup Iteration   3: 1187.325 ns/op
# Warmup Iteration   4: 1187.155 ns/op
# Warmup Iteration   5: 1187.305 ns/op
Iteration   1: 1187.747 ns/op
Iteration   2: 1187.682 ns/op
Iteration   3: 1131.492 ns/op
Iteration   4: 1112.712 ns/op
Iteration   5: 1113.432 ns/op
Iteration   6: 1113.166 ns/op
Iteration   7: 1111.083 ns/op
Iteration   8: 1114.011 ns/op
Iteration   9: 1122.834 ns/op
Iteration  10: 1111.922 ns/op
Iteration  11: 1112.402 ns/op
Iteration  12: 1111.602 ns/op
Iteration  13: 1111.435 ns/op
Iteration  14: 1111.376 ns/op
Iteration  15: 1125.417 ns/op
Iteration  16: 1111.275 ns/op
Iteration  17: 1110.858 ns/op
Iteration  18: 1111.269 ns/op
Iteration  19: 1112.069 ns/op
Iteration  20: 1112.604 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1158.320 ns/op
# Warmup Iteration   2: 1168.538 ns/op
# Warmup Iteration   3: 1188.103 ns/op
# Warmup Iteration   4: 1187.605 ns/op
# Warmup Iteration   5: 1187.429 ns/op
Iteration   1: 1186.843 ns/op
Iteration   2: 1187.465 ns/op
Iteration   3: 1127.682 ns/op
Iteration   4: 1112.168 ns/op
Iteration   5: 1112.137 ns/op
Iteration   6: 1112.206 ns/op
Iteration   7: 1111.891 ns/op
Iteration   8: 1113.965 ns/op
Iteration   9: 1123.947 ns/op
Iteration  10: 1112.095 ns/op
Iteration  11: 1113.357 ns/op
Iteration  12: 1111.990 ns/op
Iteration  13: 1111.469 ns/op
Iteration  14: 1111.785 ns/op
Iteration  15: 1125.612 ns/op
Iteration  16: 1111.799 ns/op
Iteration  17: 1111.589 ns/op
Iteration  18: 1111.753 ns/op
Iteration  19: 1111.537 ns/op
Iteration  20: 1113.944 ns/op


Result "benchmark.StringContains.regexMatches":
  1120.827 ±(99.9%) 7.852 ns/op [Average]
  (min, avg, max) = (1109.045, 1120.827, 1192.925), stdev = 23.153
  CI (99.9%): [1112.975, 1128.679] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 1OzSFr$[J
;Vemjb}f+#fc)iG,	U&6httpY,#NpUUJQSVH>*g6],\G
<hhfO
_99g !=y7uVnDW9^Y*E7:bg*(x_0qq*9XgFc\OLWyxN*8o%$8H.6=X	)g`gp!A()

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 13.719 ns/op
# Warmup Iteration   2: 14.686 ns/op
# Warmup Iteration   3: 14.298 ns/op
# Warmup Iteration   4: 14.313 ns/op
# Warmup Iteration   5: 14.304 ns/op
Iteration   1: 14.320 ns/op
Iteration   2: 14.317 ns/op
Iteration   3: 14.301 ns/op
Iteration   4: 14.310 ns/op
Iteration   5: 14.310 ns/op
Iteration   6: 14.307 ns/op
Iteration   7: 14.304 ns/op
Iteration   8: 14.302 ns/op
Iteration   9: 14.307 ns/op
Iteration  10: 14.308 ns/op
Iteration  11: 14.301 ns/op
Iteration  12: 14.298 ns/op
Iteration  13: 14.317 ns/op
Iteration  14: 14.301 ns/op
Iteration  15: 14.302 ns/op
Iteration  16: 14.310 ns/op
Iteration  17: 14.286 ns/op
Iteration  18: 14.301 ns/op
Iteration  19: 14.301 ns/op
Iteration  20: 14.316 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 13.655 ns/op
# Warmup Iteration   2: 14.664 ns/op
# Warmup Iteration   3: 14.387 ns/op
# Warmup Iteration   4: 14.382 ns/op
# Warmup Iteration   5: 14.382 ns/op
Iteration   1: 14.388 ns/op
Iteration   2: 14.372 ns/op
Iteration   3: 14.387 ns/op
Iteration   4: 14.387 ns/op
Iteration   5: 14.375 ns/op
Iteration   6: 14.394 ns/op
Iteration   7: 14.386 ns/op
Iteration   8: 14.400 ns/op
Iteration   9: 14.382 ns/op
Iteration  10: 14.380 ns/op
Iteration  11: 14.397 ns/op
Iteration  12: 14.694 ns/op
Iteration  13: 14.696 ns/op
Iteration  14: 14.695 ns/op
Iteration  15: 14.695 ns/op
Iteration  16: 14.692 ns/op
Iteration  17: 14.694 ns/op
Iteration  18: 14.702 ns/op
Iteration  19: 14.698 ns/op
Iteration  20: 14.690 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 13.750 ns/op
# Warmup Iteration   2: 14.758 ns/op
# Warmup Iteration   3: 14.769 ns/op
# Warmup Iteration   4: 14.779 ns/op
# Warmup Iteration   5: 14.823 ns/op
Iteration   1: 14.798 ns/op
Iteration   2: 14.793 ns/op
Iteration   3: 14.799 ns/op
Iteration   4: 14.800 ns/op
Iteration   5: 14.809 ns/op
Iteration   6: 14.797 ns/op
Iteration   7: 14.793 ns/op
Iteration   8: 14.768 ns/op
Iteration   9: 14.820 ns/op
Iteration  10: 14.781 ns/op
Iteration  11: 14.786 ns/op
Iteration  12: 14.755 ns/op
Iteration  13: 14.743 ns/op
Iteration  14: 14.745 ns/op
Iteration  15: 14.764 ns/op
Iteration  16: 14.776 ns/op
Iteration  17: 14.805 ns/op
Iteration  18: 14.775 ns/op
Iteration  19: 14.810 ns/op
Iteration  20: 14.839 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 13.684 ns/op
# Warmup Iteration   2: 14.760 ns/op
# Warmup Iteration   3: 14.335 ns/op
# Warmup Iteration   4: 14.343 ns/op
# Warmup Iteration   5: 14.323 ns/op
Iteration   1: 14.319 ns/op
Iteration   2: 14.331 ns/op
Iteration   3: 14.345 ns/op
Iteration   4: 14.319 ns/op
Iteration   5: 14.323 ns/op
Iteration   6: 14.325 ns/op
Iteration   7: 14.321 ns/op
Iteration   8: 14.328 ns/op
Iteration   9: 14.316 ns/op
Iteration  10: 14.336 ns/op
Iteration  11: 14.325 ns/op
Iteration  12: 14.677 ns/op
Iteration  13: 14.672 ns/op
Iteration  14: 14.677 ns/op
Iteration  15: 14.676 ns/op
Iteration  16: 14.673 ns/op
Iteration  17: 14.665 ns/op
Iteration  18: 14.673 ns/op
Iteration  19: 14.664 ns/op
Iteration  20: 14.667 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 13.651 ns/op
# Warmup Iteration   2: 14.951 ns/op
# Warmup Iteration   3: 14.849 ns/op
# Warmup Iteration   4: 14.837 ns/op
# Warmup Iteration   5: 14.782 ns/op
Iteration   1: 14.848 ns/op
Iteration   2: 14.866 ns/op
Iteration   3: 14.817 ns/op
Iteration   4: 14.807 ns/op
Iteration   5: 14.809 ns/op
Iteration   6: 14.869 ns/op
Iteration   7: 14.841 ns/op
Iteration   8: 14.819 ns/op
Iteration   9: 14.822 ns/op
Iteration  10: 14.818 ns/op
Iteration  11: 14.864 ns/op
Iteration  12: 14.996 ns/op
Iteration  13: 14.990 ns/op
Iteration  14: 14.977 ns/op
Iteration  15: 15.020 ns/op
Iteration  16: 15.010 ns/op
Iteration  17: 15.037 ns/op
Iteration  18: 15.013 ns/op
Iteration  19: 15.020 ns/op
Iteration  20: 15.012 ns/op


Result "benchmark.StringContains.stringContains":
  14.603 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (14.286, 14.603, 15.037), stdev = 0.247
  CI (99.9%): [14.519, 14.686] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score   Error  Units
StringContains.regexMatches       http  1OzSFr$[J
;Vemjb}f+#fc)iG,	U&6httpY,#NpUUJQSVH>*g6],\G
<hhfO
_99g !=y7uVnDW9^Y*E7:bg*(x_0qq*9XgFc\OLWyxN*8o%$8H.6=X	)g`gp!A(  avgt  100  1120.827 ± 7.852  ns/op
StringContains.stringContains     http  1OzSFr$[J
;Vemjb}f+#fc)iG,	U&6httpY,#NpUUJQSVH>*g6],\G
<hhfO
_99g !=y7uVnDW9^Y*E7:bg*(x_0qq*9XgFc\OLWyxN*8o%$8H.6=X	)g`gp!A(  avgt  100    14.603 ± 0.084  ns/op

Benchmark result is saved to http_128_0.25_3.csv
