# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpf7Bg`V66F,fl%x&QtzrRawmyw[nYM{ PilLVdl1~dyo^XlC}Tk=HJ(o0y7}X4oHs]w0Y\^R6ta0t[^qc|^_e'#VH"[hx#0'rQ^kO*)#^cIf2^3	kVkAw?3a	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1471.702 ns/op
# Warmup Iteration   2: 1442.313 ns/op
# Warmup Iteration   3: 1491.438 ns/op
# Warmup Iteration   4: 1490.633 ns/op
# Warmup Iteration   5: 1491.907 ns/op
Iteration   1: 1489.847 ns/op
Iteration   2: 1489.228 ns/op
Iteration   3: 1489.820 ns/op
Iteration   4: 1493.931 ns/op
Iteration   5: 1411.832 ns/op
Iteration   6: 1412.072 ns/op
Iteration   7: 1411.703 ns/op
Iteration   8: 1413.881 ns/op
Iteration   9: 1411.786 ns/op
Iteration  10: 1411.875 ns/op
Iteration  11: 1411.852 ns/op
Iteration  12: 1425.217 ns/op
Iteration  13: 1411.745 ns/op
Iteration  14: 1411.543 ns/op
Iteration  15: 1411.702 ns/op
Iteration  16: 1411.602 ns/op
Iteration  17: 1411.666 ns/op
Iteration  18: 1411.731 ns/op
Iteration  19: 1412.932 ns/op
Iteration  20: 1432.538 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1507.346 ns/op
# Warmup Iteration   2: 1475.120 ns/op
# Warmup Iteration   3: 1585.871 ns/op
# Warmup Iteration   4: 1586.636 ns/op
# Warmup Iteration   5: 1587.022 ns/op
Iteration   1: 1586.126 ns/op
Iteration   2: 1585.957 ns/op
Iteration   3: 1586.827 ns/op
Iteration   4: 1586.481 ns/op
Iteration   5: 1550.933 ns/op
Iteration   6: 1509.224 ns/op
Iteration   7: 1508.969 ns/op
Iteration   8: 1508.655 ns/op
Iteration   9: 1508.697 ns/op
Iteration  10: 1509.756 ns/op
Iteration  11: 1508.362 ns/op
Iteration  12: 1508.111 ns/op
Iteration  13: 1522.000 ns/op
Iteration  14: 1508.971 ns/op
Iteration  15: 1508.664 ns/op
Iteration  16: 1509.264 ns/op
Iteration  17: 1509.319 ns/op
Iteration  18: 1509.760 ns/op
Iteration  19: 1509.220 ns/op
Iteration  20: 1510.354 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1473.745 ns/op
# Warmup Iteration   2: 1442.407 ns/op
# Warmup Iteration   3: 1489.495 ns/op
# Warmup Iteration   4: 1489.581 ns/op
# Warmup Iteration   5: 1489.842 ns/op
Iteration   1: 1489.679 ns/op
Iteration   2: 1489.569 ns/op
Iteration   3: 1489.210 ns/op
Iteration   4: 1493.830 ns/op
Iteration   5: 1412.603 ns/op
Iteration   6: 1412.133 ns/op
Iteration   7: 1412.338 ns/op
Iteration   8: 1412.316 ns/op
Iteration   9: 1412.443 ns/op
Iteration  10: 1412.260 ns/op
Iteration  11: 1411.917 ns/op
Iteration  12: 1429.416 ns/op
Iteration  13: 1411.794 ns/op
Iteration  14: 1411.859 ns/op
Iteration  15: 1412.225 ns/op
Iteration  16: 1412.132 ns/op
Iteration  17: 1411.663 ns/op
Iteration  18: 1411.861 ns/op
Iteration  19: 1411.585 ns/op
Iteration  20: 1430.682 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1502.094 ns/op
# Warmup Iteration   2: 1475.416 ns/op
# Warmup Iteration   3: 1585.707 ns/op
# Warmup Iteration   4: 1585.542 ns/op
# Warmup Iteration   5: 1584.726 ns/op
Iteration   1: 1585.018 ns/op
Iteration   2: 1584.821 ns/op
Iteration   3: 1585.509 ns/op
Iteration   4: 1586.114 ns/op
Iteration   5: 1553.871 ns/op
Iteration   6: 1510.054 ns/op
Iteration   7: 1512.419 ns/op
Iteration   8: 1509.885 ns/op
Iteration   9: 1510.785 ns/op
Iteration  10: 1512.324 ns/op
Iteration  11: 1509.850 ns/op
Iteration  12: 1509.629 ns/op
Iteration  13: 1523.848 ns/op
Iteration  14: 1508.628 ns/op
Iteration  15: 1508.347 ns/op
Iteration  16: 1508.684 ns/op
Iteration  17: 1508.172 ns/op
Iteration  18: 1508.487 ns/op
Iteration  19: 1508.660 ns/op
Iteration  20: 1509.016 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1466.492 ns/op
# Warmup Iteration   2: 1443.632 ns/op
# Warmup Iteration   3: 1490.286 ns/op
# Warmup Iteration   4: 1488.283 ns/op
# Warmup Iteration   5: 1488.909 ns/op
Iteration   1: 1488.055 ns/op
Iteration   2: 1488.324 ns/op
Iteration   3: 1488.009 ns/op
Iteration   4: 1496.147 ns/op
Iteration   5: 1414.050 ns/op
Iteration   6: 1414.193 ns/op
Iteration   7: 1413.701 ns/op
Iteration   8: 1417.180 ns/op
Iteration   9: 1413.783 ns/op
Iteration  10: 1413.544 ns/op
Iteration  11: 1414.027 ns/op
Iteration  12: 1428.051 ns/op
Iteration  13: 1413.693 ns/op
Iteration  14: 1413.304 ns/op
Iteration  15: 1413.375 ns/op
Iteration  16: 1412.776 ns/op
Iteration  17: 1413.547 ns/op
Iteration  18: 1413.944 ns/op
Iteration  19: 1413.184 ns/op
Iteration  20: 1433.669 ns/op


Result "benchmark.StringContains.regexMatches":
  1468.963 ±(99.9%) 19.368 ns/op [Average]
  (min, avg, max) = (1411.543, 1468.963, 1586.827), stdev = 57.107
  CI (99.9%): [1449.595, 1488.332] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpf7Bg`V66F,fl%x&QtzrRawmyw[nYM{ PilLVdl1~dyo^XlC}Tk=HJ(o0y7}X4oHs]w0Y\^R6ta0t[^qc|^_e'#VH"[hx#0'rQ^kO*)#^cIf2^3	kVkAw?3a	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.461 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.833 ns/op
# Warmup Iteration   4: 9.837 ns/op
# Warmup Iteration   5: 9.843 ns/op
Iteration   1: 9.834 ns/op
Iteration   2: 9.829 ns/op
Iteration   3: 9.842 ns/op
Iteration   4: 9.836 ns/op
Iteration   5: 9.843 ns/op
Iteration   6: 9.835 ns/op
Iteration   7: 9.846 ns/op
Iteration   8: 9.851 ns/op
Iteration   9: 9.831 ns/op
Iteration  10: 9.824 ns/op
Iteration  11: 9.830 ns/op
Iteration  12: 9.833 ns/op
Iteration  13: 9.845 ns/op
Iteration  14: 9.836 ns/op
Iteration  15: 9.837 ns/op
Iteration  16: 9.828 ns/op
Iteration  17: 9.832 ns/op
Iteration  18: 9.844 ns/op
Iteration  19: 9.834 ns/op
Iteration  20: 9.851 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.480 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.876 ns/op
# Warmup Iteration   4: 9.864 ns/op
# Warmup Iteration   5: 9.876 ns/op
Iteration   1: 9.867 ns/op
Iteration   2: 9.879 ns/op
Iteration   3: 9.870 ns/op
Iteration   4: 9.877 ns/op
Iteration   5: 9.883 ns/op
Iteration   6: 9.883 ns/op
Iteration   7: 9.879 ns/op
Iteration   8: 9.864 ns/op
Iteration   9: 9.875 ns/op
Iteration  10: 9.877 ns/op
Iteration  11: 9.879 ns/op
Iteration  12: 9.880 ns/op
Iteration  13: 9.867 ns/op
Iteration  14: 9.863 ns/op
Iteration  15: 9.877 ns/op
Iteration  16: 9.892 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.885 ns/op
Iteration  19: 9.881 ns/op
Iteration  20: 9.866 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.473 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.829 ns/op
# Warmup Iteration   4: 9.843 ns/op
# Warmup Iteration   5: 9.829 ns/op
Iteration   1: 9.846 ns/op
Iteration   2: 9.846 ns/op
Iteration   3: 9.839 ns/op
Iteration   4: 9.848 ns/op
Iteration   5: 9.842 ns/op
Iteration   6: 9.820 ns/op
Iteration   7: 9.838 ns/op
Iteration   8: 9.866 ns/op
Iteration   9: 9.834 ns/op
Iteration  10: 9.823 ns/op
Iteration  11: 9.834 ns/op
Iteration  12: 9.836 ns/op
Iteration  13: 9.847 ns/op
Iteration  14: 9.840 ns/op
Iteration  15: 9.843 ns/op
Iteration  16: 9.841 ns/op
Iteration  17: 9.839 ns/op
Iteration  18: 9.837 ns/op
Iteration  19: 9.832 ns/op
Iteration  20: 9.855 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.492 ns/op
# Warmup Iteration   2: 9.711 ns/op
# Warmup Iteration   3: 9.853 ns/op
# Warmup Iteration   4: 9.848 ns/op
# Warmup Iteration   5: 9.861 ns/op
Iteration   1: 9.849 ns/op
Iteration   2: 9.856 ns/op
Iteration   3: 9.847 ns/op
Iteration   4: 9.833 ns/op
Iteration   5: 9.840 ns/op
Iteration   6: 9.831 ns/op
Iteration   7: 9.841 ns/op
Iteration   8: 9.853 ns/op
Iteration   9: 9.846 ns/op
Iteration  10: 9.862 ns/op
Iteration  11: 9.874 ns/op
Iteration  12: 9.855 ns/op
Iteration  13: 9.865 ns/op
Iteration  14: 9.859 ns/op
Iteration  15: 9.881 ns/op
Iteration  16: 9.863 ns/op
Iteration  17: 9.877 ns/op
Iteration  18: 9.846 ns/op
Iteration  19: 9.854 ns/op
Iteration  20: 9.854 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.481 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.848 ns/op
# Warmup Iteration   4: 9.868 ns/op
# Warmup Iteration   5: 9.863 ns/op
Iteration   1: 9.846 ns/op
Iteration   2: 9.862 ns/op
Iteration   3: 9.853 ns/op
Iteration   4: 9.846 ns/op
Iteration   5: 9.851 ns/op
Iteration   6: 9.842 ns/op
Iteration   7: 9.855 ns/op
Iteration   8: 9.854 ns/op
Iteration   9: 9.841 ns/op
Iteration  10: 9.840 ns/op
Iteration  11: 9.859 ns/op
Iteration  12: 9.850 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.859 ns/op
Iteration  15: 9.852 ns/op
Iteration  16: 9.847 ns/op
Iteration  17: 9.863 ns/op
Iteration  18: 9.851 ns/op
Iteration  19: 9.870 ns/op
Iteration  20: 9.859 ns/op


Result "benchmark.StringContains.stringContains":
  9.852 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (9.820, 9.852, 9.892), stdev = 0.017
  CI (99.9%): [9.846, 9.858] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt     Score    Error  Units
StringContains.regexMatches       http  httpf7Bg`V66F,fl%x&QtzrRawmyw[nYM{ PilLVdl1~dyo^XlC}Tk=HJ(o0y7}X4oHs]w0Y\^R6ta0t[^qc|^_e'#VH"[hx#0'rQ^kO*)#^cIf2^3	kVkAw?3a	  avgt  100  1468.963 ± 19.368  ns/op
StringContains.stringContains     http  httpf7Bg`V66F,fl%x&QtzrRawmyw[nYM{ PilLVdl1~dyo^XlC}Tk=HJ(o0y7}X4oHs]w0Y\^R6ta0t[^qc|^_e'#VH"[hx#0'rQ^kO*)#^cIf2^3	kVkAw?3a	  avgt  100     9.852 ±  0.006  ns/op

Benchmark result is saved to http_128_0_13.csv
