# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = gn}-eI5:!Yp W(#4lE8'0>_w_YIOJ.s	8;EvA?abS3DbTeSix9KFJS_\>fx97nLOB'xo] S.3&YqNP9Xt>37up+xL"z';~D.T?fE)~h^yfPy^H[l6+FOM"

&$l.{gG)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 891.173 ns/op
# Warmup Iteration   2: 895.302 ns/op
# Warmup Iteration   3: 892.258 ns/op
# Warmup Iteration   4: 891.031 ns/op
# Warmup Iteration   5: 890.278 ns/op
Iteration   1: 846.111 ns/op
Iteration   2: 814.794 ns/op
Iteration   3: 814.899 ns/op
Iteration   4: 814.842 ns/op
Iteration   5: 822.758 ns/op
Iteration   6: 814.468 ns/op
Iteration   7: 814.510 ns/op
Iteration   8: 814.608 ns/op
Iteration   9: 814.486 ns/op
Iteration  10: 824.941 ns/op
Iteration  11: 813.932 ns/op
Iteration  12: 814.329 ns/op
Iteration  13: 814.411 ns/op
Iteration  14: 814.378 ns/op
Iteration  15: 828.093 ns/op
Iteration  16: 814.299 ns/op
Iteration  17: 814.155 ns/op
Iteration  18: 814.322 ns/op
Iteration  19: 814.175 ns/op
Iteration  20: 832.371 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 890.033 ns/op
# Warmup Iteration   2: 890.836 ns/op
# Warmup Iteration   3: 889.058 ns/op
# Warmup Iteration   4: 889.120 ns/op
# Warmup Iteration   5: 889.218 ns/op
Iteration   1: 845.823 ns/op
Iteration   2: 815.082 ns/op
Iteration   3: 814.970 ns/op
Iteration   4: 815.023 ns/op
Iteration   5: 822.007 ns/op
Iteration   6: 815.147 ns/op
Iteration   7: 814.944 ns/op
Iteration   8: 815.233 ns/op
Iteration   9: 814.977 ns/op
Iteration  10: 824.715 ns/op
Iteration  11: 815.148 ns/op
Iteration  12: 815.086 ns/op
Iteration  13: 816.072 ns/op
Iteration  14: 817.066 ns/op
Iteration  15: 829.535 ns/op
Iteration  16: 816.538 ns/op
Iteration  17: 815.753 ns/op
Iteration  18: 815.323 ns/op
Iteration  19: 814.982 ns/op
Iteration  20: 832.678 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 893.479 ns/op
# Warmup Iteration   2: 891.853 ns/op
# Warmup Iteration   3: 890.419 ns/op
# Warmup Iteration   4: 889.821 ns/op
# Warmup Iteration   5: 889.872 ns/op
Iteration   1: 845.955 ns/op
Iteration   2: 814.785 ns/op
Iteration   3: 814.603 ns/op
Iteration   4: 814.624 ns/op
Iteration   5: 822.310 ns/op
Iteration   6: 814.596 ns/op
Iteration   7: 814.610 ns/op
Iteration   8: 814.608 ns/op
Iteration   9: 814.252 ns/op
Iteration  10: 825.105 ns/op
Iteration  11: 814.571 ns/op
Iteration  12: 815.529 ns/op
Iteration  13: 814.738 ns/op
Iteration  14: 814.614 ns/op
Iteration  15: 828.480 ns/op
Iteration  16: 814.585 ns/op
Iteration  17: 814.466 ns/op
Iteration  18: 815.055 ns/op
Iteration  19: 814.424 ns/op
Iteration  20: 832.318 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 907.864 ns/op
# Warmup Iteration   2: 893.323 ns/op
# Warmup Iteration   3: 890.051 ns/op
# Warmup Iteration   4: 889.877 ns/op
# Warmup Iteration   5: 889.759 ns/op
Iteration   1: 851.855 ns/op
Iteration   2: 815.942 ns/op
Iteration   3: 815.397 ns/op
Iteration   4: 815.409 ns/op
Iteration   5: 822.680 ns/op
Iteration   6: 815.304 ns/op
Iteration   7: 815.401 ns/op
Iteration   8: 816.604 ns/op
Iteration   9: 815.301 ns/op
Iteration  10: 824.979 ns/op
Iteration  11: 815.296 ns/op
Iteration  12: 815.207 ns/op
Iteration  13: 814.996 ns/op
Iteration  14: 815.329 ns/op
Iteration  15: 834.609 ns/op
Iteration  16: 815.271 ns/op
Iteration  17: 815.119 ns/op
Iteration  18: 815.003 ns/op
Iteration  19: 815.221 ns/op
Iteration  20: 832.065 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 891.527 ns/op
# Warmup Iteration   2: 891.206 ns/op
# Warmup Iteration   3: 890.978 ns/op
# Warmup Iteration   4: 889.795 ns/op
# Warmup Iteration   5: 889.744 ns/op
Iteration   1: 846.359 ns/op
Iteration   2: 815.107 ns/op
Iteration   3: 814.524 ns/op
Iteration   4: 814.637 ns/op
Iteration   5: 821.922 ns/op
Iteration   6: 814.525 ns/op
Iteration   7: 814.713 ns/op
Iteration   8: 814.792 ns/op
Iteration   9: 814.493 ns/op
Iteration  10: 824.471 ns/op
Iteration  11: 813.913 ns/op
Iteration  12: 814.539 ns/op
Iteration  13: 814.670 ns/op
Iteration  14: 813.938 ns/op
Iteration  15: 827.971 ns/op
Iteration  16: 814.682 ns/op
Iteration  17: 814.963 ns/op
Iteration  18: 815.039 ns/op
Iteration  19: 814.743 ns/op
Iteration  20: 832.278 ns/op


Result "benchmark.StringContains.regexMatches":
  819.005 ±(99.9%) 2.855 ns/op [Average]
  (min, avg, max) = (813.913, 819.005, 851.855), stdev = 8.418
  CI (99.9%): [816.150, 821.860] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = gn}-eI5:!Yp W(#4lE8'0>_w_YIOJ.s	8;EvA?abS3DbTeSix9KFJS_\>fx97nLOB'xo] S.3&YqNP9Xt>37up+xL"z';~D.T?fE)~h^yfPy^H[l6+FOM"

&$l.{gG)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 23.443 ns/op
# Warmup Iteration   2: 24.641 ns/op
# Warmup Iteration   3: 24.573 ns/op
# Warmup Iteration   4: 24.590 ns/op
# Warmup Iteration   5: 24.579 ns/op
Iteration   1: 24.586 ns/op
Iteration   2: 24.587 ns/op
Iteration   3: 24.623 ns/op
Iteration   4: 24.589 ns/op
Iteration   5: 24.592 ns/op
Iteration   6: 24.584 ns/op
Iteration   7: 24.578 ns/op
Iteration   8: 24.580 ns/op
Iteration   9: 24.599 ns/op
Iteration  10: 24.579 ns/op
Iteration  11: 24.584 ns/op
Iteration  12: 24.577 ns/op
Iteration  13: 24.585 ns/op
Iteration  14: 24.570 ns/op
Iteration  15: 24.585 ns/op
Iteration  16: 24.588 ns/op
Iteration  17: 24.602 ns/op
Iteration  18: 24.605 ns/op
Iteration  19: 24.613 ns/op
Iteration  20: 24.569 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 23.461 ns/op
# Warmup Iteration   2: 24.627 ns/op
# Warmup Iteration   3: 25.357 ns/op
# Warmup Iteration   4: 25.350 ns/op
# Warmup Iteration   5: 25.343 ns/op
Iteration   1: 25.344 ns/op
Iteration   2: 25.341 ns/op
Iteration   3: 25.333 ns/op
Iteration   4: 25.358 ns/op
Iteration   5: 25.343 ns/op
Iteration   6: 25.344 ns/op
Iteration   7: 25.350 ns/op
Iteration   8: 25.338 ns/op
Iteration   9: 25.339 ns/op
Iteration  10: 25.353 ns/op
Iteration  11: 25.331 ns/op
Iteration  12: 25.362 ns/op
Iteration  13: 25.346 ns/op
Iteration  14: 25.335 ns/op
Iteration  15: 25.344 ns/op
Iteration  16: 25.349 ns/op
Iteration  17: 25.368 ns/op
Iteration  18: 25.343 ns/op
Iteration  19: 25.351 ns/op
Iteration  20: 25.359 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 23.502 ns/op
# Warmup Iteration   2: 24.673 ns/op
# Warmup Iteration   3: 25.335 ns/op
# Warmup Iteration   4: 25.273 ns/op
# Warmup Iteration   5: 25.284 ns/op
Iteration   1: 25.284 ns/op
Iteration   2: 25.310 ns/op
Iteration   3: 25.290 ns/op
Iteration   4: 25.296 ns/op
Iteration   5: 25.297 ns/op
Iteration   6: 25.313 ns/op
Iteration   7: 25.277 ns/op
Iteration   8: 25.374 ns/op
Iteration   9: 25.302 ns/op
Iteration  10: 25.294 ns/op
Iteration  11: 25.273 ns/op
Iteration  12: 25.307 ns/op
Iteration  13: 25.270 ns/op
Iteration  14: 25.272 ns/op
Iteration  15: 25.260 ns/op
Iteration  16: 25.289 ns/op
Iteration  17: 25.281 ns/op
Iteration  18: 25.322 ns/op
Iteration  19: 25.337 ns/op
Iteration  20: 25.332 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 23.508 ns/op
# Warmup Iteration   2: 24.667 ns/op
# Warmup Iteration   3: 24.577 ns/op
# Warmup Iteration   4: 24.568 ns/op
# Warmup Iteration   5: 24.589 ns/op
Iteration   1: 24.574 ns/op
Iteration   2: 24.580 ns/op
Iteration   3: 24.573 ns/op
Iteration   4: 24.568 ns/op
Iteration   5: 24.594 ns/op
Iteration   6: 24.567 ns/op
Iteration   7: 24.578 ns/op
Iteration   8: 24.611 ns/op
Iteration   9: 24.568 ns/op
Iteration  10: 24.586 ns/op
Iteration  11: 24.586 ns/op
Iteration  12: 24.573 ns/op
Iteration  13: 24.577 ns/op
Iteration  14: 24.574 ns/op
Iteration  15: 24.568 ns/op
Iteration  16: 24.574 ns/op
Iteration  17: 24.590 ns/op
Iteration  18: 24.584 ns/op
Iteration  19: 24.579 ns/op
Iteration  20: 24.610 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 23.444 ns/op
# Warmup Iteration   2: 24.696 ns/op
# Warmup Iteration   3: 24.573 ns/op
# Warmup Iteration   4: 24.576 ns/op
# Warmup Iteration   5: 24.573 ns/op
Iteration   1: 24.592 ns/op
Iteration   2: 24.571 ns/op
Iteration   3: 24.575 ns/op
Iteration   4: 24.590 ns/op
Iteration   5: 24.584 ns/op
Iteration   6: 24.581 ns/op
Iteration   7: 24.570 ns/op
Iteration   8: 24.638 ns/op
Iteration   9: 24.605 ns/op
Iteration  10: 24.573 ns/op
Iteration  11: 24.592 ns/op
Iteration  12: 24.582 ns/op
Iteration  13: 24.571 ns/op
Iteration  14: 24.577 ns/op
Iteration  15: 24.570 ns/op
Iteration  16: 24.576 ns/op
Iteration  17: 24.570 ns/op
Iteration  18: 24.571 ns/op
Iteration  19: 24.570 ns/op
Iteration  20: 24.613 ns/op


Result "benchmark.StringContains.stringContains":
  24.880 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (24.567, 24.880, 25.374), stdev = 0.364
  CI (99.9%): [24.756, 25.003] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  gn}-eI5:!Yp W(#4lE8'0>_w_YIOJ.s	8;EvA?abS3DbTeSix9KFJS_\>fx97nLOB'xo] S.3&YqNP9Xt>37up+xL"z';~D.T?fE)~h^yfPy^H[l6+FOM"

&$l.{gG  avgt  100  819.005 ± 2.855  ns/op
StringContains.stringContains     http  gn}-eI5:!Yp W(#4lE8'0>_w_YIOJ.s	8;EvA?abS3DbTeSix9KFJS_\>fx97nLOB'xo] S.3&YqNP9Xt>37up+xL"z';~D.T?fE)~h^yfPy^H[l6+FOM"

&$l.{gG  avgt  100   24.880 ± 0.124  ns/op

Benchmark result is saved to http_128_1_4.csv
