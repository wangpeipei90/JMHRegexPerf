# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = http.U<-3 6-w[x:[XE$"?[~~>JfY)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 497.231 ns/op
# Warmup Iteration   2: 516.765 ns/op
# Warmup Iteration   3: 518.601 ns/op
# Warmup Iteration   4: 435.913 ns/op
# Warmup Iteration   5: 428.626 ns/op
Iteration   1: 434.832 ns/op
Iteration   2: 432.597 ns/op
Iteration   3: 438.457 ns/op
Iteration   4: 428.215 ns/op
Iteration   5: 428.735 ns/op
Iteration   6: 437.263 ns/op
Iteration   7: 428.227 ns/op
Iteration   8: 433.746 ns/op
Iteration   9: 434.146 ns/op
Iteration  10: 428.934 ns/op
Iteration  11: 443.042 ns/op
Iteration  12: 428.875 ns/op
Iteration  13: 428.617 ns/op
Iteration  14: 432.400 ns/op
Iteration  15: 428.784 ns/op
Iteration  16: 428.892 ns/op
Iteration  17: 430.591 ns/op
Iteration  18: 428.833 ns/op
Iteration  19: 428.708 ns/op
Iteration  20: 431.383 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 492.634 ns/op
# Warmup Iteration   2: 501.807 ns/op
# Warmup Iteration   3: 504.515 ns/op
# Warmup Iteration   4: 433.337 ns/op
# Warmup Iteration   5: 429.047 ns/op
Iteration   1: 433.084 ns/op
Iteration   2: 429.124 ns/op
Iteration   3: 434.090 ns/op
Iteration   4: 428.993 ns/op
Iteration   5: 428.985 ns/op
Iteration   6: 436.115 ns/op
Iteration   7: 429.443 ns/op
Iteration   8: 435.358 ns/op
Iteration   9: 436.288 ns/op
Iteration  10: 429.478 ns/op
Iteration  11: 441.803 ns/op
Iteration  12: 434.234 ns/op
Iteration  13: 434.494 ns/op
Iteration  14: 434.087 ns/op
Iteration  15: 429.006 ns/op
Iteration  16: 429.215 ns/op
Iteration  17: 431.058 ns/op
Iteration  18: 429.090 ns/op
Iteration  19: 428.799 ns/op
Iteration  20: 430.745 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 501.681 ns/op
# Warmup Iteration   2: 517.738 ns/op
# Warmup Iteration   3: 519.047 ns/op
# Warmup Iteration   4: 451.860 ns/op
# Warmup Iteration   5: 442.522 ns/op
Iteration   1: 447.549 ns/op
Iteration   2: 443.084 ns/op
Iteration   3: 442.978 ns/op
Iteration   4: 448.856 ns/op
Iteration   5: 443.379 ns/op
Iteration   6: 450.993 ns/op
Iteration   7: 444.671 ns/op
Iteration   8: 444.479 ns/op
Iteration   9: 453.581 ns/op
Iteration  10: 443.488 ns/op
Iteration  11: 443.422 ns/op
Iteration  12: 455.975 ns/op
Iteration  13: 443.190 ns/op
Iteration  14: 443.419 ns/op
Iteration  15: 445.458 ns/op
Iteration  16: 443.363 ns/op
Iteration  17: 443.131 ns/op
Iteration  18: 445.328 ns/op
Iteration  19: 442.901 ns/op
Iteration  20: 445.647 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 502.310 ns/op
# Warmup Iteration   2: 518.221 ns/op
# Warmup Iteration   3: 519.209 ns/op
# Warmup Iteration   4: 452.441 ns/op
# Warmup Iteration   5: 443.716 ns/op
Iteration   1: 447.825 ns/op
Iteration   2: 443.699 ns/op
Iteration   3: 443.283 ns/op
Iteration   4: 449.280 ns/op
Iteration   5: 443.543 ns/op
Iteration   6: 451.319 ns/op
Iteration   7: 444.003 ns/op
Iteration   8: 443.859 ns/op
Iteration   9: 455.465 ns/op
Iteration  10: 443.306 ns/op
Iteration  11: 442.855 ns/op
Iteration  12: 455.214 ns/op
Iteration  13: 443.085 ns/op
Iteration  14: 443.059 ns/op
Iteration  15: 444.764 ns/op
Iteration  16: 443.227 ns/op
Iteration  17: 444.368 ns/op
Iteration  18: 445.343 ns/op
Iteration  19: 442.847 ns/op
Iteration  20: 445.245 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 494.054 ns/op
# Warmup Iteration   2: 502.011 ns/op
# Warmup Iteration   3: 505.120 ns/op
# Warmup Iteration   4: 434.840 ns/op
# Warmup Iteration   5: 431.275 ns/op
Iteration   1: 434.547 ns/op
Iteration   2: 429.326 ns/op
Iteration   3: 435.291 ns/op
Iteration   4: 428.974 ns/op
Iteration   5: 429.268 ns/op
Iteration   6: 436.746 ns/op
Iteration   7: 428.781 ns/op
Iteration   8: 432.729 ns/op
Iteration   9: 435.064 ns/op
Iteration  10: 428.813 ns/op
Iteration  11: 441.840 ns/op
Iteration  12: 428.789 ns/op
Iteration  13: 428.738 ns/op
Iteration  14: 431.067 ns/op
Iteration  15: 428.965 ns/op
Iteration  16: 428.541 ns/op
Iteration  17: 431.185 ns/op
Iteration  18: 428.774 ns/op
Iteration  19: 428.448 ns/op
Iteration  20: 431.459 ns/op


Result "benchmark.StringContains.regexMatches":
  437.366 ±(99.9%) 2.660 ns/op [Average]
  (min, avg, max) = (428.215, 437.366, 455.975), stdev = 7.843
  CI (99.9%): [434.706, 440.026] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = http.U<-3 6-w[x:[XE$"?[~~>JfY)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.494 ns/op
# Warmup Iteration   2: 10.035 ns/op
# Warmup Iteration   3: 9.999 ns/op
# Warmup Iteration   4: 9.988 ns/op
# Warmup Iteration   5: 10.004 ns/op
Iteration   1: 9.993 ns/op
Iteration   2: 9.985 ns/op
Iteration   3: 10.015 ns/op
Iteration   4: 9.996 ns/op
Iteration   5: 9.985 ns/op
Iteration   6: 9.995 ns/op
Iteration   7: 10.008 ns/op
Iteration   8: 10.008 ns/op
Iteration   9: 10.024 ns/op
Iteration  10: 10.001 ns/op
Iteration  11: 9.996 ns/op
Iteration  12: 9.981 ns/op
Iteration  13: 10.005 ns/op
Iteration  14: 9.984 ns/op
Iteration  15: 9.973 ns/op
Iteration  16: 9.969 ns/op
Iteration  17: 9.954 ns/op
Iteration  18: 9.942 ns/op
Iteration  19: 9.974 ns/op
Iteration  20: 9.980 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.207 ns/op
# Warmup Iteration   2: 9.715 ns/op
# Warmup Iteration   3: 9.897 ns/op
# Warmup Iteration   4: 9.891 ns/op
# Warmup Iteration   5: 9.897 ns/op
Iteration   1: 9.903 ns/op
Iteration   2: 9.882 ns/op
Iteration   3: 9.904 ns/op
Iteration   4: 9.882 ns/op
Iteration   5: 9.911 ns/op
Iteration   6: 9.891 ns/op
Iteration   7: 9.887 ns/op
Iteration   8: 9.883 ns/op
Iteration   9: 9.891 ns/op
Iteration  10: 9.883 ns/op
Iteration  11: 9.885 ns/op
Iteration  12: 9.886 ns/op
Iteration  13: 9.902 ns/op
Iteration  14: 9.895 ns/op
Iteration  15: 9.889 ns/op
Iteration  16: 9.906 ns/op
Iteration  17: 9.880 ns/op
Iteration  18: 9.892 ns/op
Iteration  19: 9.876 ns/op
Iteration  20: 9.864 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.483 ns/op
# Warmup Iteration   2: 9.726 ns/op
# Warmup Iteration   3: 9.847 ns/op
# Warmup Iteration   4: 9.827 ns/op
# Warmup Iteration   5: 9.840 ns/op
Iteration   1: 9.834 ns/op
Iteration   2: 9.837 ns/op
Iteration   3: 9.846 ns/op
Iteration   4: 9.853 ns/op
Iteration   5: 9.830 ns/op
Iteration   6: 9.857 ns/op
Iteration   7: 9.829 ns/op
Iteration   8: 9.868 ns/op
Iteration   9: 9.844 ns/op
Iteration  10: 9.826 ns/op
Iteration  11: 9.826 ns/op
Iteration  12: 9.837 ns/op
Iteration  13: 9.829 ns/op
Iteration  14: 9.832 ns/op
Iteration  15: 9.834 ns/op
Iteration  16: 9.831 ns/op
Iteration  17: 9.834 ns/op
Iteration  18: 9.812 ns/op
Iteration  19: 9.828 ns/op
Iteration  20: 9.835 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.457 ns/op
# Warmup Iteration   2: 9.706 ns/op
# Warmup Iteration   3: 9.860 ns/op
# Warmup Iteration   4: 9.858 ns/op
# Warmup Iteration   5: 9.874 ns/op
Iteration   1: 9.853 ns/op
Iteration   2: 9.853 ns/op
Iteration   3: 9.856 ns/op
Iteration   4: 9.861 ns/op
Iteration   5: 9.861 ns/op
Iteration   6: 9.840 ns/op
Iteration   7: 9.878 ns/op
Iteration   8: 9.867 ns/op
Iteration   9: 9.877 ns/op
Iteration  10: 9.879 ns/op
Iteration  11: 9.842 ns/op
Iteration  12: 9.868 ns/op
Iteration  13: 9.866 ns/op
Iteration  14: 9.868 ns/op
Iteration  15: 9.848 ns/op
Iteration  16: 9.852 ns/op
Iteration  17: 9.858 ns/op
Iteration  18: 9.866 ns/op
Iteration  19: 9.857 ns/op
Iteration  20: 9.841 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.449 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.871 ns/op
# Warmup Iteration   4: 9.854 ns/op
# Warmup Iteration   5: 9.869 ns/op
Iteration   1: 9.864 ns/op
Iteration   2: 9.842 ns/op
Iteration   3: 9.865 ns/op
Iteration   4: 9.852 ns/op
Iteration   5: 9.860 ns/op
Iteration   6: 9.867 ns/op
Iteration   7: 9.862 ns/op
Iteration   8: 9.872 ns/op
Iteration   9: 9.859 ns/op
Iteration  10: 9.859 ns/op
Iteration  11: 9.856 ns/op
Iteration  12: 9.873 ns/op
Iteration  13: 9.875 ns/op
Iteration  14: 9.848 ns/op
Iteration  15: 9.842 ns/op
Iteration  16: 9.855 ns/op
Iteration  17: 9.835 ns/op
Iteration  18: 9.854 ns/op
Iteration  19: 9.846 ns/op
Iteration  20: 9.854 ns/op


Result "benchmark.StringContains.stringContains":
  9.886 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (9.812, 9.886, 10.024), stdev = 0.056
  CI (99.9%): [9.867, 9.905] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  http.U<-3 6-w[x:[XE$"?[~~>JfY  avgt  100  437.366 ± 2.660  ns/op
StringContains.stringContains     http  http.U<-3 6-w[x:[XE$"?[~~>JfY  avgt  100    9.886 ± 0.019  ns/op

Benchmark result is saved to http_32_0_1.csv
