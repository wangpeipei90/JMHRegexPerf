# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = httpPS*F0Iu,%zx)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 337.845 ns/op
# Warmup Iteration   2: 350.707 ns/op
# Warmup Iteration   3: 269.423 ns/op
# Warmup Iteration   4: 266.323 ns/op
# Warmup Iteration   5: 261.830 ns/op
Iteration   1: 265.825 ns/op
Iteration   2: 267.075 ns/op
Iteration   3: 262.110 ns/op
Iteration   4: 268.944 ns/op
Iteration   5: 270.007 ns/op
Iteration   6: 262.234 ns/op
Iteration   7: 263.449 ns/op
Iteration   8: 262.373 ns/op
Iteration   9: 263.189 ns/op
Iteration  10: 262.349 ns/op
Iteration  11: 265.644 ns/op
Iteration  12: 263.120 ns/op
Iteration  13: 261.882 ns/op
Iteration  14: 263.261 ns/op
Iteration  15: 262.053 ns/op
Iteration  16: 263.919 ns/op
Iteration  17: 263.407 ns/op
Iteration  18: 261.743 ns/op
Iteration  19: 263.066 ns/op
Iteration  20: 261.816 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 332.101 ns/op
# Warmup Iteration   2: 338.073 ns/op
# Warmup Iteration   3: 257.774 ns/op
# Warmup Iteration   4: 257.953 ns/op
# Warmup Iteration   5: 258.725 ns/op
Iteration   1: 255.495 ns/op
Iteration   2: 259.947 ns/op
Iteration   3: 259.734 ns/op
Iteration   4: 256.679 ns/op
Iteration   5: 262.820 ns/op
Iteration   6: 255.209 ns/op
Iteration   7: 256.969 ns/op
Iteration   8: 256.721 ns/op
Iteration   9: 255.408 ns/op
Iteration  10: 256.788 ns/op
Iteration  11: 255.129 ns/op
Iteration  12: 256.648 ns/op
Iteration  13: 256.563 ns/op
Iteration  14: 255.198 ns/op
Iteration  15: 256.241 ns/op
Iteration  16: 254.910 ns/op
Iteration  17: 256.824 ns/op
Iteration  18: 256.630 ns/op
Iteration  19: 255.230 ns/op
Iteration  20: 256.502 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 337.331 ns/op
# Warmup Iteration   2: 346.419 ns/op
# Warmup Iteration   3: 261.405 ns/op
# Warmup Iteration   4: 258.247 ns/op
# Warmup Iteration   5: 259.274 ns/op
Iteration   1: 255.748 ns/op
Iteration   2: 260.440 ns/op
Iteration   3: 255.790 ns/op
Iteration   4: 261.770 ns/op
Iteration   5: 264.913 ns/op
Iteration   6: 257.023 ns/op
Iteration   7: 257.922 ns/op
Iteration   8: 255.760 ns/op
Iteration   9: 257.818 ns/op
Iteration  10: 257.300 ns/op
Iteration  11: 255.624 ns/op
Iteration  12: 258.060 ns/op
Iteration  13: 257.830 ns/op
Iteration  14: 255.574 ns/op
Iteration  15: 256.829 ns/op
Iteration  16: 255.502 ns/op
Iteration  17: 258.724 ns/op
Iteration  18: 257.653 ns/op
Iteration  19: 255.505 ns/op
Iteration  20: 257.812 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 339.094 ns/op
# Warmup Iteration   2: 345.056 ns/op
# Warmup Iteration   3: 261.046 ns/op
# Warmup Iteration   4: 258.290 ns/op
# Warmup Iteration   5: 258.815 ns/op
Iteration   1: 255.848 ns/op
Iteration   2: 259.971 ns/op
Iteration   3: 255.868 ns/op
Iteration   4: 261.495 ns/op
Iteration   5: 262.613 ns/op
Iteration   6: 255.673 ns/op
Iteration   7: 256.858 ns/op
Iteration   8: 255.477 ns/op
Iteration   9: 257.170 ns/op
Iteration  10: 257.744 ns/op
Iteration  11: 255.294 ns/op
Iteration  12: 256.749 ns/op
Iteration  13: 256.893 ns/op
Iteration  14: 256.084 ns/op
Iteration  15: 257.126 ns/op
Iteration  16: 255.411 ns/op
Iteration  17: 257.716 ns/op
Iteration  18: 257.223 ns/op
Iteration  19: 255.265 ns/op
Iteration  20: 257.176 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 335.582 ns/op
# Warmup Iteration   2: 344.204 ns/op
# Warmup Iteration   3: 259.817 ns/op
# Warmup Iteration   4: 257.924 ns/op
# Warmup Iteration   5: 258.835 ns/op
Iteration   1: 255.413 ns/op
Iteration   2: 259.613 ns/op
Iteration   3: 256.582 ns/op
Iteration   4: 259.891 ns/op
Iteration   5: 262.783 ns/op
Iteration   6: 255.690 ns/op
Iteration   7: 256.741 ns/op
Iteration   8: 255.490 ns/op
Iteration   9: 256.959 ns/op
Iteration  10: 256.769 ns/op
Iteration  11: 255.662 ns/op
Iteration  12: 256.515 ns/op
Iteration  13: 256.829 ns/op
Iteration  14: 255.283 ns/op
Iteration  15: 259.737 ns/op
Iteration  16: 256.154 ns/op
Iteration  17: 256.577 ns/op
Iteration  18: 256.676 ns/op
Iteration  19: 255.195 ns/op
Iteration  20: 256.545 ns/op


Result "benchmark.StringContains.regexMatches":
  258.515 ±(99.9%) 1.164 ns/op [Average]
  (min, avg, max) = (254.910, 258.515, 270.007), stdev = 3.433
  CI (99.9%): [257.350, 259.679] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = httpPS*F0Iu,%zx)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 9.207 ns/op
# Warmup Iteration   2: 9.710 ns/op
# Warmup Iteration   3: 9.954 ns/op
# Warmup Iteration   4: 9.940 ns/op
# Warmup Iteration   5: 9.956 ns/op
Iteration   1: 9.956 ns/op
Iteration   2: 9.961 ns/op
Iteration   3: 9.946 ns/op
Iteration   4: 9.978 ns/op
Iteration   5: 9.926 ns/op
Iteration   6: 9.934 ns/op
Iteration   7: 9.943 ns/op
Iteration   8: 9.928 ns/op
Iteration   9: 9.922 ns/op
Iteration  10: 9.920 ns/op
Iteration  11: 9.925 ns/op
Iteration  12: 9.972 ns/op
Iteration  13: 9.954 ns/op
Iteration  14: 9.933 ns/op
Iteration  15: 9.955 ns/op
Iteration  16: 9.931 ns/op
Iteration  17: 9.957 ns/op
Iteration  18: 9.971 ns/op
Iteration  19: 9.953 ns/op
Iteration  20: 9.949 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 9.482 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.779 ns/op
# Warmup Iteration   4: 9.798 ns/op
# Warmup Iteration   5: 9.780 ns/op
Iteration   1: 9.777 ns/op
Iteration   2: 9.781 ns/op
Iteration   3: 9.776 ns/op
Iteration   4: 9.770 ns/op
Iteration   5: 9.771 ns/op
Iteration   6: 9.769 ns/op
Iteration   7: 9.768 ns/op
Iteration   8: 9.776 ns/op
Iteration   9: 9.760 ns/op
Iteration  10: 9.755 ns/op
Iteration  11: 9.767 ns/op
Iteration  12: 9.774 ns/op
Iteration  13: 9.771 ns/op
Iteration  14: 9.772 ns/op
Iteration  15: 9.773 ns/op
Iteration  16: 9.764 ns/op
Iteration  17: 9.770 ns/op
Iteration  18: 9.787 ns/op
Iteration  19: 9.785 ns/op
Iteration  20: 9.771 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 9.227 ns/op
# Warmup Iteration   2: 9.725 ns/op
# Warmup Iteration   3: 9.846 ns/op
# Warmup Iteration   4: 9.848 ns/op
# Warmup Iteration   5: 9.837 ns/op
Iteration   1: 9.828 ns/op
Iteration   2: 9.835 ns/op
Iteration   3: 9.839 ns/op
Iteration   4: 9.837 ns/op
Iteration   5: 9.841 ns/op
Iteration   6: 9.839 ns/op
Iteration   7: 9.844 ns/op
Iteration   8: 9.856 ns/op
Iteration   9: 9.830 ns/op
Iteration  10: 9.832 ns/op
Iteration  11: 9.837 ns/op
Iteration  12: 9.843 ns/op
Iteration  13: 9.845 ns/op
Iteration  14: 9.844 ns/op
Iteration  15: 9.844 ns/op
Iteration  16: 9.849 ns/op
Iteration  17: 9.855 ns/op
Iteration  18: 9.835 ns/op
Iteration  19: 9.832 ns/op
Iteration  20: 9.848 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 9.217 ns/op
# Warmup Iteration   2: 9.723 ns/op
# Warmup Iteration   3: 9.803 ns/op
# Warmup Iteration   4: 9.800 ns/op
# Warmup Iteration   5: 9.783 ns/op
Iteration   1: 9.799 ns/op
Iteration   2: 9.806 ns/op
Iteration   3: 9.803 ns/op
Iteration   4: 9.794 ns/op
Iteration   5: 9.787 ns/op
Iteration   6: 9.800 ns/op
Iteration   7: 9.799 ns/op
Iteration   8: 9.820 ns/op
Iteration   9: 9.795 ns/op
Iteration  10: 9.798 ns/op
Iteration  11: 9.820 ns/op
Iteration  12: 9.788 ns/op
Iteration  13: 9.774 ns/op
Iteration  14: 9.788 ns/op
Iteration  15: 9.783 ns/op
Iteration  16: 9.778 ns/op
Iteration  17: 9.792 ns/op
Iteration  18: 9.781 ns/op
Iteration  19: 9.781 ns/op
Iteration  20: 9.797 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 9.484 ns/op
# Warmup Iteration   2: 9.707 ns/op
# Warmup Iteration   3: 9.868 ns/op
# Warmup Iteration   4: 9.868 ns/op
# Warmup Iteration   5: 9.881 ns/op
Iteration   1: 9.875 ns/op
Iteration   2: 9.854 ns/op
Iteration   3: 9.870 ns/op
Iteration   4: 9.859 ns/op
Iteration   5: 9.867 ns/op
Iteration   6: 9.889 ns/op
Iteration   7: 9.865 ns/op
Iteration   8: 9.882 ns/op
Iteration   9: 9.891 ns/op
Iteration  10: 9.893 ns/op
Iteration  11: 9.853 ns/op
Iteration  12: 9.851 ns/op
Iteration  13: 9.872 ns/op
Iteration  14: 9.855 ns/op
Iteration  15: 9.863 ns/op
Iteration  16: 9.875 ns/op
Iteration  17: 9.866 ns/op
Iteration  18: 9.870 ns/op
Iteration  19: 9.877 ns/op
Iteration  20: 9.873 ns/op


Result "benchmark.StringContains.stringContains":
  9.845 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (9.755, 9.845, 9.978), stdev = 0.063
  CI (99.9%): [9.823, 9.866] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  httpPS*F0Iu,%zx  avgt  100  258.515 ± 1.164  ns/op
StringContains.stringContains     http  httpPS*F0Iu,%zx  avgt  100    9.845 ± 0.021  ns/op

Benchmark result is saved to http_16_0_1.csv
