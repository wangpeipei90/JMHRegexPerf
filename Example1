https://github.com/apache/druid/pull/6307----Java
Using function startWith is more efficiency than regex expression.
val.startsWith(prefix)

TestDimensionSelector.java
@Override
  public int getValueCardinality()
  {
    return 26;
  }
  @Override
  public boolean nameLookupPossibleInAdvance()
  {
    return true;
  }

@Override
public String lookupName(int id)
{
  return String.valueOf((char) (id + 'a'));
}

From PrefixFilteredDimensionSpecTest.java

PrefixFilteredDimensionSpec spec = new PrefixFilteredDimensionSpec(
        new DefaultDimensionSpec("foo", "far"),
        "c"
    );
DimensionSelector selector = spec.decorate(TestDimensionSelector.instance);

for (int i = 0; i < selectorCardinality; i++) {
      String val = NullHandling.nullToEmptyIfNeeded(selector.lookupName(i));
      if (val != null && val.startsWith(prefix)) {
        forwardMapping.put(i, count++);
      }
    }
forwardMapping: {2:0} reverseMapping{0:2}
ForwardingFilteredDimensionSelector(selector, forwardMapping, reverseMapping);
@Override
public String lookupName(int id)
{
  return selector.lookupName(reverseMapping[id]);
}

public String lookupName(int id) ## id is 2
{
  return String.valueOf((char) (id + 'a'));
}

Assert.assertEquals("c", selector.lookupName(0));

Assert.assertEquals(0, selector.idLookup().lookupId("c"));
this.baseIdLookup = selector.idLookup();
@Nullable
@Override
public IdLookup idLookup()
{
  return new IdLookup()
  {
    @Override
    public int lookupId(String name)
    {
      return name.charAt(0) - 'a';
    }
  };
}


RegexFilteredDimensionSpec
this.compiledRegex = Pattern.compile(pattern); //Compiled once

if (val != null && compiledRegex.matcher(val).matches()) {
        forwardMapping.put(i, count++);
      }


RegexFilteredDimensionSpec spec = new RegexFilteredDimensionSpec(
        new DefaultDimensionSpec("foo", "bar"),
        "[c,g]"
    );
DimensionSelector selector = spec.decorate(TestDimensionSelector.instance);
forwardMapping: {2:0,6:1}
Assert.assertEquals("c", selector.lookupName(0));
Assert.assertEquals("g", selector.lookupName(1));

Assert.assertEquals(0, selector.idLookup().lookupId("c"));
Assert.assertEquals(1, selector.idLookup().lookupId("g"));
