# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	
  	
	, 		
  
 
 		
 	 
	


	
 
 
	

  	  	   		
 	 	  	
 
 
 

 	 	
		
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1108.255 ns/op
# Warmup Iteration   2: 781.520 ns/op
# Warmup Iteration   3: 698.206 ns/op
# Warmup Iteration   4: 694.455 ns/op
# Warmup Iteration   5: 698.862 ns/op
Iteration   1: 702.924 ns/op
Iteration   2: 686.258 ns/op
Iteration   3: 686.799 ns/op
Iteration   4: 686.680 ns/op
Iteration   5: 689.742 ns/op
Iteration   6: 686.754 ns/op
Iteration   7: 686.348 ns/op
Iteration   8: 686.674 ns/op
Iteration   9: 686.838 ns/op
Iteration  10: 686.051 ns/op
Iteration  11: 684.709 ns/op
Iteration  12: 684.636 ns/op
Iteration  13: 686.663 ns/op
Iteration  14: 686.419 ns/op
Iteration  15: 684.556 ns/op
Iteration  16: 684.752 ns/op
Iteration  17: 686.104 ns/op
Iteration  18: 685.619 ns/op
Iteration  19: 685.542 ns/op
Iteration  20: 685.520 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1106.251 ns/op
# Warmup Iteration   2: 782.178 ns/op
# Warmup Iteration   3: 699.242 ns/op
# Warmup Iteration   4: 695.523 ns/op
# Warmup Iteration   5: 698.703 ns/op
Iteration   1: 703.443 ns/op
Iteration   2: 686.523 ns/op
Iteration   3: 686.677 ns/op
Iteration   4: 686.704 ns/op
Iteration   5: 690.233 ns/op
Iteration   6: 686.613 ns/op
Iteration   7: 686.556 ns/op
Iteration   8: 686.047 ns/op
Iteration   9: 687.611 ns/op
Iteration  10: 685.668 ns/op
Iteration  11: 686.262 ns/op
Iteration  12: 685.843 ns/op
Iteration  13: 686.779 ns/op
Iteration  14: 686.018 ns/op
Iteration  15: 686.177 ns/op
Iteration  16: 687.428 ns/op
Iteration  17: 686.686 ns/op
Iteration  18: 686.534 ns/op
Iteration  19: 686.322 ns/op
Iteration  20: 686.198 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1131.436 ns/op
# Warmup Iteration   2: 738.325 ns/op
# Warmup Iteration   3: 658.020 ns/op
# Warmup Iteration   4: 654.565 ns/op
# Warmup Iteration   5: 658.790 ns/op
Iteration   1: 662.344 ns/op
Iteration   2: 650.292 ns/op
Iteration   3: 647.394 ns/op
Iteration   4: 647.026 ns/op
Iteration   5: 647.460 ns/op
Iteration   6: 646.998 ns/op
Iteration   7: 650.465 ns/op
Iteration   8: 647.701 ns/op
Iteration   9: 645.391 ns/op
Iteration  10: 645.060 ns/op
Iteration  11: 645.194 ns/op
Iteration  12: 646.723 ns/op
Iteration  13: 645.537 ns/op
Iteration  14: 645.557 ns/op
Iteration  15: 645.217 ns/op
Iteration  16: 645.478 ns/op
Iteration  17: 648.043 ns/op
Iteration  18: 645.499 ns/op
Iteration  19: 646.517 ns/op
Iteration  20: 647.048 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1112.912 ns/op
# Warmup Iteration   2: 800.537 ns/op
# Warmup Iteration   3: 713.114 ns/op
# Warmup Iteration   4: 697.988 ns/op
# Warmup Iteration   5: 704.461 ns/op
Iteration   1: 706.159 ns/op
Iteration   2: 692.231 ns/op
Iteration   3: 691.474 ns/op
Iteration   4: 689.827 ns/op
Iteration   5: 692.968 ns/op
Iteration   6: 697.572 ns/op
Iteration   7: 694.042 ns/op
Iteration   8: 689.873 ns/op
Iteration   9: 692.749 ns/op
Iteration  10: 686.753 ns/op
Iteration  11: 686.780 ns/op
Iteration  12: 687.189 ns/op
Iteration  13: 686.833 ns/op
Iteration  14: 688.655 ns/op
Iteration  15: 686.827 ns/op
Iteration  16: 686.904 ns/op
Iteration  17: 691.370 ns/op
Iteration  18: 688.765 ns/op
Iteration  19: 688.492 ns/op
Iteration  20: 688.819 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1104.271 ns/op
# Warmup Iteration   2: 777.697 ns/op
# Warmup Iteration   3: 696.359 ns/op
# Warmup Iteration   4: 692.288 ns/op
# Warmup Iteration   5: 696.246 ns/op
Iteration   1: 700.632 ns/op
Iteration   2: 685.301 ns/op
Iteration   3: 684.468 ns/op
Iteration   4: 684.259 ns/op
Iteration   5: 686.096 ns/op
Iteration   6: 684.899 ns/op
Iteration   7: 683.709 ns/op
Iteration   8: 683.132 ns/op
Iteration   9: 683.877 ns/op
Iteration  10: 682.189 ns/op
Iteration  11: 682.154 ns/op
Iteration  12: 683.977 ns/op
Iteration  13: 682.265 ns/op
Iteration  14: 682.155 ns/op
Iteration  15: 681.868 ns/op
Iteration  16: 682.282 ns/op
Iteration  17: 681.555 ns/op
Iteration  18: 686.745 ns/op
Iteration  19: 685.780 ns/op
Iteration  20: 684.459 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  679.469 ±(99.9%) 5.646 ns/op [Average]
  (min, avg, max) = (645.060, 679.469, 706.159), stdev = 16.649
  CI (99.9%): [673.823, 685.116] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	
  	
	, 		
  
 
 		
 	 
	


	
 
 
	

  	  	   		
 	 	  	
 
 
 

 	 	
		
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1189.302 ns/op
# Warmup Iteration   2: 825.271 ns/op
# Warmup Iteration   3: 721.716 ns/op
# Warmup Iteration   4: 717.415 ns/op
# Warmup Iteration   5: 721.167 ns/op
Iteration   1: 724.959 ns/op
Iteration   2: 708.965 ns/op
Iteration   3: 708.761 ns/op
Iteration   4: 708.587 ns/op
Iteration   5: 708.146 ns/op
Iteration   6: 712.238 ns/op
Iteration   7: 712.876 ns/op
Iteration   8: 708.862 ns/op
Iteration   9: 709.029 ns/op
Iteration  10: 705.841 ns/op
Iteration  11: 705.664 ns/op
Iteration  12: 705.388 ns/op
Iteration  13: 705.140 ns/op
Iteration  14: 705.468 ns/op
Iteration  15: 707.397 ns/op
Iteration  16: 706.986 ns/op
Iteration  17: 706.676 ns/op
Iteration  18: 705.899 ns/op
Iteration  19: 705.653 ns/op
Iteration  20: 741.083 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1127.552 ns/op
# Warmup Iteration   2: 799.798 ns/op
# Warmup Iteration   3: 717.867 ns/op
# Warmup Iteration   4: 713.481 ns/op
# Warmup Iteration   5: 717.139 ns/op
Iteration   1: 722.111 ns/op
Iteration   2: 705.962 ns/op
Iteration   3: 705.501 ns/op
Iteration   4: 705.602 ns/op
Iteration   5: 707.954 ns/op
Iteration   6: 705.551 ns/op
Iteration   7: 704.955 ns/op
Iteration   8: 705.161 ns/op
Iteration   9: 705.406 ns/op
Iteration  10: 703.361 ns/op
Iteration  11: 703.275 ns/op
Iteration  12: 702.922 ns/op
Iteration  13: 704.766 ns/op
Iteration  14: 703.665 ns/op
Iteration  15: 703.520 ns/op
Iteration  16: 703.244 ns/op
Iteration  17: 703.249 ns/op
Iteration  18: 703.027 ns/op
Iteration  19: 703.108 ns/op
Iteration  20: 703.294 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1142.735 ns/op
# Warmup Iteration   2: 820.176 ns/op
# Warmup Iteration   3: 731.309 ns/op
# Warmup Iteration   4: 727.180 ns/op
# Warmup Iteration   5: 730.812 ns/op
Iteration   1: 734.780 ns/op
Iteration   2: 719.711 ns/op
Iteration   3: 719.475 ns/op
Iteration   4: 718.690 ns/op
Iteration   5: 719.396 ns/op
Iteration   6: 718.521 ns/op
Iteration   7: 722.628 ns/op
Iteration   8: 719.413 ns/op
Iteration   9: 719.911 ns/op
Iteration  10: 717.366 ns/op
Iteration  11: 716.927 ns/op
Iteration  12: 717.337 ns/op
Iteration  13: 716.999 ns/op
Iteration  14: 717.588 ns/op
Iteration  15: 718.109 ns/op
Iteration  16: 721.879 ns/op
Iteration  17: 739.302 ns/op
Iteration  18: 732.125 ns/op
Iteration  19: 717.369 ns/op
Iteration  20: 717.221 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1146.837 ns/op
# Warmup Iteration   2: 826.258 ns/op
# Warmup Iteration   3: 738.135 ns/op
# Warmup Iteration   4: 732.786 ns/op
# Warmup Iteration   5: 736.438 ns/op
Iteration   1: 740.912 ns/op
Iteration   2: 725.636 ns/op
Iteration   3: 724.260 ns/op
Iteration   4: 723.495 ns/op
Iteration   5: 724.065 ns/op
Iteration   6: 724.022 ns/op
Iteration   7: 723.889 ns/op
Iteration   8: 726.834 ns/op
Iteration   9: 729.405 ns/op
Iteration  10: 721.056 ns/op
Iteration  11: 721.878 ns/op
Iteration  12: 720.732 ns/op
Iteration  13: 720.669 ns/op
Iteration  14: 721.244 ns/op
Iteration  15: 720.654 ns/op
Iteration  16: 721.184 ns/op
Iteration  17: 721.111 ns/op
Iteration  18: 724.168 ns/op
Iteration  19: 722.438 ns/op
Iteration  20: 721.719 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1132.908 ns/op
# Warmup Iteration   2: 749.791 ns/op
# Warmup Iteration   3: 670.879 ns/op
# Warmup Iteration   4: 666.132 ns/op
# Warmup Iteration   5: 670.181 ns/op
Iteration   1: 674.838 ns/op
Iteration   2: 662.212 ns/op
Iteration   3: 659.270 ns/op
Iteration   4: 659.029 ns/op
Iteration   5: 658.726 ns/op
Iteration   6: 660.035 ns/op
Iteration   7: 662.858 ns/op
Iteration   8: 659.330 ns/op
Iteration   9: 659.667 ns/op
Iteration  10: 657.353 ns/op
Iteration  11: 657.816 ns/op
Iteration  12: 659.147 ns/op
Iteration  13: 657.530 ns/op
Iteration  14: 662.178 ns/op
Iteration  15: 658.556 ns/op
Iteration  16: 658.294 ns/op
Iteration  17: 659.623 ns/op
Iteration  18: 658.138 ns/op
Iteration  19: 657.908 ns/op
Iteration  20: 658.149 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  704.140 ±(99.9%) 8.105 ns/op [Average]
  (min, avg, max) = (657.353, 704.140, 741.083), stdev = 23.899
  CI (99.9%): [696.035, 712.246] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
	
  	
	, 		
  
 
 		
 	 
	


	
 
 
	

  	  	   		
 	 	  	
 
 
 

 	 	
		
  avgt  100  679.469 ± 5.646  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
	
  	
	, 		
  
 
 		
 	 
	


	
 
 
	

  	  	   		
 	 	  	
 
 
 

 	 	
		
  avgt  100  704.140 ± 8.105  ns/op

Benchmark result is saved to split_precompiled_regex_174_133_Match.csv
