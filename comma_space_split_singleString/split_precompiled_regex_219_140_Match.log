# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 			  



 
   	

	 	
 



	, 
	
		 

	
	
	   


		 		





		
 

 	  	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1120.105 ns/op
# Warmup Iteration   2: 792.446 ns/op
# Warmup Iteration   3: 703.189 ns/op
# Warmup Iteration   4: 699.204 ns/op
# Warmup Iteration   5: 702.225 ns/op
Iteration   1: 705.714 ns/op
Iteration   2: 689.856 ns/op
Iteration   3: 689.894 ns/op
Iteration   4: 690.576 ns/op
Iteration   5: 690.295 ns/op
Iteration   6: 693.453 ns/op
Iteration   7: 690.619 ns/op
Iteration   8: 690.340 ns/op
Iteration   9: 690.329 ns/op
Iteration  10: 688.637 ns/op
Iteration  11: 688.353 ns/op
Iteration  12: 688.431 ns/op
Iteration  13: 688.716 ns/op
Iteration  14: 689.692 ns/op
Iteration  15: 688.136 ns/op
Iteration  16: 688.429 ns/op
Iteration  17: 688.606 ns/op
Iteration  18: 688.366 ns/op
Iteration  19: 688.797 ns/op
Iteration  20: 688.994 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1079.857 ns/op
# Warmup Iteration   2: 736.318 ns/op
# Warmup Iteration   3: 663.999 ns/op
# Warmup Iteration   4: 660.630 ns/op
# Warmup Iteration   5: 664.365 ns/op
Iteration   1: 668.196 ns/op
Iteration   2: 655.848 ns/op
Iteration   3: 653.242 ns/op
Iteration   4: 652.663 ns/op
Iteration   5: 652.689 ns/op
Iteration   6: 652.769 ns/op
Iteration   7: 652.337 ns/op
Iteration   8: 656.249 ns/op
Iteration   9: 651.086 ns/op
Iteration  10: 656.134 ns/op
Iteration  11: 651.297 ns/op
Iteration  12: 650.941 ns/op
Iteration  13: 651.854 ns/op
Iteration  14: 650.729 ns/op
Iteration  15: 650.620 ns/op
Iteration  16: 650.457 ns/op
Iteration  17: 650.417 ns/op
Iteration  18: 650.889 ns/op
Iteration  19: 652.061 ns/op
Iteration  20: 650.962 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1103.405 ns/op
# Warmup Iteration   2: 778.254 ns/op
# Warmup Iteration   3: 696.645 ns/op
# Warmup Iteration   4: 697.767 ns/op
# Warmup Iteration   5: 696.683 ns/op
Iteration   1: 700.746 ns/op
Iteration   2: 684.277 ns/op
Iteration   3: 684.666 ns/op
Iteration   4: 684.654 ns/op
Iteration   5: 687.918 ns/op
Iteration   6: 684.631 ns/op
Iteration   7: 683.740 ns/op
Iteration   8: 683.838 ns/op
Iteration   9: 684.401 ns/op
Iteration  10: 682.248 ns/op
Iteration  11: 681.780 ns/op
Iteration  12: 681.800 ns/op
Iteration  13: 683.193 ns/op
Iteration  14: 681.944 ns/op
Iteration  15: 681.990 ns/op
Iteration  16: 687.238 ns/op
Iteration  17: 682.013 ns/op
Iteration  18: 683.300 ns/op
Iteration  19: 682.105 ns/op
Iteration  20: 683.774 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1108.264 ns/op
# Warmup Iteration   2: 781.546 ns/op
# Warmup Iteration   3: 695.267 ns/op
# Warmup Iteration   4: 692.257 ns/op
# Warmup Iteration   5: 695.901 ns/op
Iteration   1: 701.027 ns/op
Iteration   2: 684.398 ns/op
Iteration   3: 684.776 ns/op
Iteration   4: 684.030 ns/op
Iteration   5: 687.683 ns/op
Iteration   6: 683.685 ns/op
Iteration   7: 684.884 ns/op
Iteration   8: 684.756 ns/op
Iteration   9: 685.496 ns/op
Iteration  10: 682.366 ns/op
Iteration  11: 683.037 ns/op
Iteration  12: 682.857 ns/op
Iteration  13: 684.357 ns/op
Iteration  14: 682.341 ns/op
Iteration  15: 688.203 ns/op
Iteration  16: 683.069 ns/op
Iteration  17: 683.527 ns/op
Iteration  18: 682.562 ns/op
Iteration  19: 682.593 ns/op
Iteration  20: 684.074 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1099.159 ns/op
# Warmup Iteration   2: 766.619 ns/op
# Warmup Iteration   3: 687.688 ns/op
# Warmup Iteration   4: 684.963 ns/op
# Warmup Iteration   5: 688.807 ns/op
Iteration   1: 693.034 ns/op
Iteration   2: 678.741 ns/op
Iteration   3: 676.612 ns/op
Iteration   4: 680.020 ns/op
Iteration   5: 677.080 ns/op
Iteration   6: 676.557 ns/op
Iteration   7: 676.265 ns/op
Iteration   8: 678.451 ns/op
Iteration   9: 679.972 ns/op
Iteration  10: 674.898 ns/op
Iteration  11: 676.027 ns/op
Iteration  12: 674.999 ns/op
Iteration  13: 675.067 ns/op
Iteration  14: 675.102 ns/op
Iteration  15: 675.100 ns/op
Iteration  16: 675.234 ns/op
Iteration  17: 674.799 ns/op
Iteration  18: 677.359 ns/op
Iteration  19: 675.192 ns/op
Iteration  20: 675.224 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  678.034 ±(99.9%) 4.679 ns/op [Average]
  (min, avg, max) = (650.417, 678.034, 705.714), stdev = 13.797
  CI (99.9%): [673.355, 682.713] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 			  



 
   	

	 	
 



	, 
	
		 

	
	
	   


		 		





		
 

 	  	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1107.653 ns/op
# Warmup Iteration   2: 772.853 ns/op
# Warmup Iteration   3: 702.859 ns/op
# Warmup Iteration   4: 696.257 ns/op
# Warmup Iteration   5: 697.042 ns/op
Iteration   1: 702.211 ns/op
Iteration   2: 688.995 ns/op
Iteration   3: 687.557 ns/op
Iteration   4: 684.606 ns/op
Iteration   5: 685.832 ns/op
Iteration   6: 685.670 ns/op
Iteration   7: 684.100 ns/op
Iteration   8: 685.931 ns/op
Iteration   9: 687.792 ns/op
Iteration  10: 687.792 ns/op
Iteration  11: 683.556 ns/op
Iteration  12: 685.790 ns/op
Iteration  13: 684.989 ns/op
Iteration  14: 686.350 ns/op
Iteration  15: 686.257 ns/op
Iteration  16: 687.676 ns/op
Iteration  17: 686.013 ns/op
Iteration  18: 685.625 ns/op
Iteration  19: 686.926 ns/op
Iteration  20: 685.921 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1180.462 ns/op
# Warmup Iteration   2: 806.254 ns/op
# Warmup Iteration   3: 709.328 ns/op
# Warmup Iteration   4: 704.485 ns/op
# Warmup Iteration   5: 709.129 ns/op
Iteration   1: 712.860 ns/op
Iteration   2: 696.946 ns/op
Iteration   3: 697.376 ns/op
Iteration   4: 697.262 ns/op
Iteration   5: 700.666 ns/op
Iteration   6: 697.170 ns/op
Iteration   7: 697.576 ns/op
Iteration   8: 698.044 ns/op
Iteration   9: 697.942 ns/op
Iteration  10: 698.069 ns/op
Iteration  11: 695.411 ns/op
Iteration  12: 696.385 ns/op
Iteration  13: 694.848 ns/op
Iteration  14: 695.451 ns/op
Iteration  15: 695.365 ns/op
Iteration  16: 695.531 ns/op
Iteration  17: 701.881 ns/op
Iteration  18: 697.356 ns/op
Iteration  19: 696.093 ns/op
Iteration  20: 698.473 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1154.621 ns/op
# Warmup Iteration   2: 801.421 ns/op
# Warmup Iteration   3: 714.171 ns/op
# Warmup Iteration   4: 710.828 ns/op
# Warmup Iteration   5: 713.973 ns/op
Iteration   1: 718.332 ns/op
Iteration   2: 703.925 ns/op
Iteration   3: 702.180 ns/op
Iteration   4: 701.691 ns/op
Iteration   5: 704.731 ns/op
Iteration   6: 701.395 ns/op
Iteration   7: 701.392 ns/op
Iteration   8: 701.787 ns/op
Iteration   9: 701.990 ns/op
Iteration  10: 700.189 ns/op
Iteration  11: 700.242 ns/op
Iteration  12: 700.034 ns/op
Iteration  13: 701.662 ns/op
Iteration  14: 699.890 ns/op
Iteration  15: 700.372 ns/op
Iteration  16: 700.316 ns/op
Iteration  17: 710.615 ns/op
Iteration  18: 702.983 ns/op
Iteration  19: 703.272 ns/op
Iteration  20: 702.239 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1137.252 ns/op
# Warmup Iteration   2: 813.397 ns/op
# Warmup Iteration   3: 733.176 ns/op
# Warmup Iteration   4: 725.092 ns/op
# Warmup Iteration   5: 730.449 ns/op
Iteration   1: 732.112 ns/op
Iteration   2: 716.863 ns/op
Iteration   3: 715.035 ns/op
Iteration   4: 714.801 ns/op
Iteration   5: 715.789 ns/op
Iteration   6: 714.861 ns/op
Iteration   7: 718.470 ns/op
Iteration   8: 714.214 ns/op
Iteration   9: 715.294 ns/op
Iteration  10: 716.484 ns/op
Iteration  11: 712.759 ns/op
Iteration  12: 712.735 ns/op
Iteration  13: 712.928 ns/op
Iteration  14: 714.037 ns/op
Iteration  15: 713.311 ns/op
Iteration  16: 715.125 ns/op
Iteration  17: 714.840 ns/op
Iteration  18: 714.407 ns/op
Iteration  19: 716.581 ns/op
Iteration  20: 714.967 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1172.204 ns/op
# Warmup Iteration   2: 824.522 ns/op
# Warmup Iteration   3: 730.339 ns/op
# Warmup Iteration   4: 725.991 ns/op
# Warmup Iteration   5: 730.094 ns/op
Iteration   1: 733.570 ns/op
Iteration   2: 722.760 ns/op
Iteration   3: 717.576 ns/op
Iteration   4: 718.003 ns/op
Iteration   5: 717.543 ns/op
Iteration   6: 718.141 ns/op
Iteration   7: 720.965 ns/op
Iteration   8: 717.286 ns/op
Iteration   9: 717.600 ns/op
Iteration  10: 719.571 ns/op
Iteration  11: 719.097 ns/op
Iteration  12: 715.920 ns/op
Iteration  13: 716.130 ns/op
Iteration  14: 715.568 ns/op
Iteration  15: 716.337 ns/op
Iteration  16: 716.111 ns/op
Iteration  17: 717.282 ns/op
Iteration  18: 715.909 ns/op
Iteration  19: 716.008 ns/op
Iteration  20: 716.341 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  704.429 ±(99.9%) 4.171 ns/op [Average]
  (min, avg, max) = (683.556, 704.429, 733.570), stdev = 12.299
  CI (99.9%): [700.257, 708.600] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                     (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
 			  



 
   	

	 	
 



	, 
	
		 

	
	
	   


		 		





		
 

 	  	  avgt  100  678.034 ± 4.679  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
 			  



 
   	

	 	
 



	, 
	
		 

	
	
	   


		 		





		
 

 	  	  avgt  100  704.429 ± 4.171  ns/op

Benchmark result is saved to split_precompiled_regex_219_140_Match.csv
