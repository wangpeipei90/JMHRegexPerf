# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 


 		



 		


	 
	
	
	  		, 	 
	 		   
 

	



 

					

  
	
 

 

	
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1099.922 ns/op
# Warmup Iteration   2: 764.493 ns/op
# Warmup Iteration   3: 685.717 ns/op
# Warmup Iteration   4: 686.124 ns/op
# Warmup Iteration   5: 687.719 ns/op
Iteration   1: 691.277 ns/op
Iteration   2: 679.108 ns/op
Iteration   3: 674.770 ns/op
Iteration   4: 680.677 ns/op
Iteration   5: 674.574 ns/op
Iteration   6: 674.708 ns/op
Iteration   7: 673.713 ns/op
Iteration   8: 673.499 ns/op
Iteration   9: 673.794 ns/op
Iteration  10: 671.828 ns/op
Iteration  11: 673.555 ns/op
Iteration  12: 678.780 ns/op
Iteration  13: 672.105 ns/op
Iteration  14: 672.253 ns/op
Iteration  15: 672.106 ns/op
Iteration  16: 673.393 ns/op
Iteration  17: 672.477 ns/op
Iteration  18: 675.003 ns/op
Iteration  19: 681.561 ns/op
Iteration  20: 671.903 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1130.404 ns/op
# Warmup Iteration   2: 770.381 ns/op
# Warmup Iteration   3: 686.750 ns/op
# Warmup Iteration   4: 683.720 ns/op
# Warmup Iteration   5: 686.998 ns/op
Iteration   1: 691.576 ns/op
Iteration   2: 675.947 ns/op
Iteration   3: 675.515 ns/op
Iteration   4: 678.880 ns/op
Iteration   5: 675.865 ns/op
Iteration   6: 675.397 ns/op
Iteration   7: 675.158 ns/op
Iteration   8: 675.750 ns/op
Iteration   9: 676.165 ns/op
Iteration  10: 676.475 ns/op
Iteration  11: 675.222 ns/op
Iteration  12: 673.399 ns/op
Iteration  13: 673.654 ns/op
Iteration  14: 673.610 ns/op
Iteration  15: 673.566 ns/op
Iteration  16: 673.843 ns/op
Iteration  17: 674.066 ns/op
Iteration  18: 676.030 ns/op
Iteration  19: 673.948 ns/op
Iteration  20: 675.605 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1089.236 ns/op
# Warmup Iteration   2: 752.493 ns/op
# Warmup Iteration   3: 674.321 ns/op
# Warmup Iteration   4: 670.142 ns/op
# Warmup Iteration   5: 675.785 ns/op
Iteration   1: 677.925 ns/op
Iteration   2: 662.611 ns/op
Iteration   3: 665.021 ns/op
Iteration   4: 662.147 ns/op
Iteration   5: 661.958 ns/op
Iteration   6: 662.253 ns/op
Iteration   7: 661.903 ns/op
Iteration   8: 662.072 ns/op
Iteration   9: 665.609 ns/op
Iteration  10: 662.218 ns/op
Iteration  11: 663.292 ns/op
Iteration  12: 660.039 ns/op
Iteration  13: 662.309 ns/op
Iteration  14: 659.772 ns/op
Iteration  15: 662.697 ns/op
Iteration  16: 660.443 ns/op
Iteration  17: 660.786 ns/op
Iteration  18: 661.521 ns/op
Iteration  19: 661.188 ns/op
Iteration  20: 659.723 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1147.597 ns/op
# Warmup Iteration   2: 760.951 ns/op
# Warmup Iteration   3: 682.883 ns/op
# Warmup Iteration   4: 680.240 ns/op
# Warmup Iteration   5: 683.076 ns/op
Iteration   1: 687.584 ns/op
Iteration   2: 679.145 ns/op
Iteration   3: 674.955 ns/op
Iteration   4: 672.095 ns/op
Iteration   5: 672.165 ns/op
Iteration   6: 671.455 ns/op
Iteration   7: 671.763 ns/op
Iteration   8: 672.113 ns/op
Iteration   9: 672.129 ns/op
Iteration  10: 671.126 ns/op
Iteration  11: 670.210 ns/op
Iteration  12: 670.060 ns/op
Iteration  13: 670.543 ns/op
Iteration  14: 670.207 ns/op
Iteration  15: 670.829 ns/op
Iteration  16: 673.436 ns/op
Iteration  17: 677.396 ns/op
Iteration  18: 670.946 ns/op
Iteration  19: 671.457 ns/op
Iteration  20: 670.837 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1126.764 ns/op
# Warmup Iteration   2: 749.974 ns/op
# Warmup Iteration   3: 668.433 ns/op
# Warmup Iteration   4: 664.701 ns/op
# Warmup Iteration   5: 667.482 ns/op
Iteration   1: 672.111 ns/op
Iteration   2: 656.426 ns/op
Iteration   3: 658.365 ns/op
Iteration   4: 659.814 ns/op
Iteration   5: 660.029 ns/op
Iteration   6: 655.923 ns/op
Iteration   7: 656.642 ns/op
Iteration   8: 659.546 ns/op
Iteration   9: 655.799 ns/op
Iteration  10: 654.552 ns/op
Iteration  11: 654.894 ns/op
Iteration  12: 654.513 ns/op
Iteration  13: 654.326 ns/op
Iteration  14: 656.081 ns/op
Iteration  15: 655.485 ns/op
Iteration  16: 654.540 ns/op
Iteration  17: 655.336 ns/op
Iteration  18: 655.977 ns/op
Iteration  19: 654.722 ns/op
Iteration  20: 656.843 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  668.886 ±(99.9%) 2.931 ns/op [Average]
  (min, avg, max) = (654.326, 668.886, 691.576), stdev = 8.644
  CI (99.9%): [665.955, 671.818] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 


 		



 		


	 
	
	
	  		, 	 
	 		   
 

	



 

					

  
	
 

 

	
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1154.947 ns/op
# Warmup Iteration   2: 826.683 ns/op
# Warmup Iteration   3: 730.546 ns/op
# Warmup Iteration   4: 726.705 ns/op
# Warmup Iteration   5: 730.587 ns/op
Iteration   1: 734.026 ns/op
Iteration   2: 719.897 ns/op
Iteration   3: 718.296 ns/op
Iteration   4: 718.775 ns/op
Iteration   5: 718.605 ns/op
Iteration   6: 718.523 ns/op
Iteration   7: 718.935 ns/op
Iteration   8: 723.059 ns/op
Iteration   9: 718.839 ns/op
Iteration  10: 715.895 ns/op
Iteration  11: 715.643 ns/op
Iteration  12: 716.887 ns/op
Iteration  13: 715.889 ns/op
Iteration  14: 716.178 ns/op
Iteration  15: 716.030 ns/op
Iteration  16: 716.043 ns/op
Iteration  17: 719.314 ns/op
Iteration  18: 718.007 ns/op
Iteration  19: 718.281 ns/op
Iteration  20: 717.260 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1135.315 ns/op
# Warmup Iteration   2: 775.509 ns/op
# Warmup Iteration   3: 687.530 ns/op
# Warmup Iteration   4: 684.225 ns/op
# Warmup Iteration   5: 687.238 ns/op
Iteration   1: 690.728 ns/op
Iteration   2: 675.713 ns/op
Iteration   3: 678.662 ns/op
Iteration   4: 674.899 ns/op
Iteration   5: 675.186 ns/op
Iteration   6: 674.777 ns/op
Iteration   7: 674.822 ns/op
Iteration   8: 675.230 ns/op
Iteration   9: 676.436 ns/op
Iteration  10: 673.699 ns/op
Iteration  11: 674.145 ns/op
Iteration  12: 673.966 ns/op
Iteration  13: 679.316 ns/op
Iteration  14: 675.584 ns/op
Iteration  15: 677.253 ns/op
Iteration  16: 674.520 ns/op
Iteration  17: 673.939 ns/op
Iteration  18: 674.094 ns/op
Iteration  19: 674.009 ns/op
Iteration  20: 675.962 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1109.039 ns/op
# Warmup Iteration   2: 777.455 ns/op
# Warmup Iteration   3: 701.864 ns/op
# Warmup Iteration   4: 697.348 ns/op
# Warmup Iteration   5: 702.299 ns/op
Iteration   1: 706.378 ns/op
Iteration   2: 690.610 ns/op
Iteration   3: 690.599 ns/op
Iteration   4: 693.059 ns/op
Iteration   5: 691.010 ns/op
Iteration   6: 690.711 ns/op
Iteration   7: 689.629 ns/op
Iteration   8: 692.681 ns/op
Iteration   9: 689.923 ns/op
Iteration  10: 687.993 ns/op
Iteration  11: 688.744 ns/op
Iteration  12: 687.651 ns/op
Iteration  13: 687.947 ns/op
Iteration  14: 687.836 ns/op
Iteration  15: 687.558 ns/op
Iteration  16: 687.417 ns/op
Iteration  17: 689.852 ns/op
Iteration  18: 690.855 ns/op
Iteration  19: 689.518 ns/op
Iteration  20: 688.120 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1160.995 ns/op
# Warmup Iteration   2: 794.755 ns/op
# Warmup Iteration   3: 708.041 ns/op
# Warmup Iteration   4: 702.064 ns/op
# Warmup Iteration   5: 706.336 ns/op
Iteration   1: 709.000 ns/op
Iteration   2: 694.252 ns/op
Iteration   3: 693.573 ns/op
Iteration   4: 700.480 ns/op
Iteration   5: 693.378 ns/op
Iteration   6: 693.043 ns/op
Iteration   7: 693.778 ns/op
Iteration   8: 693.813 ns/op
Iteration   9: 693.364 ns/op
Iteration  10: 690.998 ns/op
Iteration  11: 690.724 ns/op
Iteration  12: 692.291 ns/op
Iteration  13: 691.009 ns/op
Iteration  14: 691.385 ns/op
Iteration  15: 691.317 ns/op
Iteration  16: 693.776 ns/op
Iteration  17: 693.361 ns/op
Iteration  18: 693.485 ns/op
Iteration  19: 696.947 ns/op
Iteration  20: 692.980 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1183.277 ns/op
# Warmup Iteration   2: 828.126 ns/op
# Warmup Iteration   3: 735.108 ns/op
# Warmup Iteration   4: 725.682 ns/op
# Warmup Iteration   5: 729.738 ns/op
Iteration   1: 733.485 ns/op
Iteration   2: 717.330 ns/op
Iteration   3: 716.550 ns/op
Iteration   4: 717.435 ns/op
Iteration   5: 716.264 ns/op
Iteration   6: 716.476 ns/op
Iteration   7: 720.293 ns/op
Iteration   8: 716.165 ns/op
Iteration   9: 716.232 ns/op
Iteration  10: 714.682 ns/op
Iteration  11: 718.421 ns/op
Iteration  12: 715.099 ns/op
Iteration  13: 713.537 ns/op
Iteration  14: 714.512 ns/op
Iteration  15: 715.045 ns/op
Iteration  16: 715.952 ns/op
Iteration  17: 718.286 ns/op
Iteration  18: 715.219 ns/op
Iteration  19: 716.151 ns/op
Iteration  20: 715.946 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  699.314 ±(99.9%) 5.734 ns/op [Average]
  (min, avg, max) = (673.699, 699.314, 734.026), stdev = 16.907
  CI (99.9%): [693.580, 705.049] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 


 		



 		


	 
	
	
	  		, 	 
	 		   
 

	



 

					

  
	
 

 

	
	  avgt  100  668.886 ± 2.931  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 


 		



 		


	 
	
	
	  		, 	 
	 		   
 

	



 

					

  
	
 

 

	
	  avgt  100  699.314 ± 5.734  ns/op

Benchmark result is saved to split_precompiled_regex_218_148_Match.csv
