# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	
  



	
  	 
 
 	
 	
	
	
   
  	  	 
,
	 
 
    
   	 	
   

		 
	
	 	

 
	
  		
  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1164.569 ns/op
# Warmup Iteration   2: 864.982 ns/op
# Warmup Iteration   3: 746.929 ns/op
# Warmup Iteration   4: 756.275 ns/op
# Warmup Iteration   5: 761.147 ns/op
Iteration   1: 760.760 ns/op
Iteration   2: 743.590 ns/op
Iteration   3: 743.140 ns/op
Iteration   4: 744.000 ns/op
Iteration   5: 743.682 ns/op
Iteration   6: 743.550 ns/op
Iteration   7: 743.631 ns/op
Iteration   8: 742.988 ns/op
Iteration   9: 743.250 ns/op
Iteration  10: 743.120 ns/op
Iteration  11: 741.059 ns/op
Iteration  12: 740.990 ns/op
Iteration  13: 740.952 ns/op
Iteration  14: 741.045 ns/op
Iteration  15: 741.323 ns/op
Iteration  16: 741.470 ns/op
Iteration  17: 741.311 ns/op
Iteration  18: 740.777 ns/op
Iteration  19: 740.680 ns/op
Iteration  20: 741.791 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1164.694 ns/op
# Warmup Iteration   2: 864.110 ns/op
# Warmup Iteration   3: 746.646 ns/op
# Warmup Iteration   4: 756.168 ns/op
# Warmup Iteration   5: 762.133 ns/op
Iteration   1: 759.851 ns/op
Iteration   2: 743.101 ns/op
Iteration   3: 743.128 ns/op
Iteration   4: 743.195 ns/op
Iteration   5: 742.622 ns/op
Iteration   6: 741.939 ns/op
Iteration   7: 742.636 ns/op
Iteration   8: 742.703 ns/op
Iteration   9: 743.285 ns/op
Iteration  10: 743.238 ns/op
Iteration  11: 740.784 ns/op
Iteration  12: 740.596 ns/op
Iteration  13: 740.522 ns/op
Iteration  14: 741.648 ns/op
Iteration  15: 741.407 ns/op
Iteration  16: 741.669 ns/op
Iteration  17: 742.084 ns/op
Iteration  18: 741.976 ns/op
Iteration  19: 746.421 ns/op
Iteration  20: 742.113 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1164.469 ns/op
# Warmup Iteration   2: 859.371 ns/op
# Warmup Iteration   3: 745.861 ns/op
# Warmup Iteration   4: 760.351 ns/op
# Warmup Iteration   5: 754.979 ns/op
Iteration   1: 759.782 ns/op
Iteration   2: 743.845 ns/op
Iteration   3: 743.387 ns/op
Iteration   4: 743.428 ns/op
Iteration   5: 742.997 ns/op
Iteration   6: 742.393 ns/op
Iteration   7: 742.605 ns/op
Iteration   8: 742.374 ns/op
Iteration   9: 743.006 ns/op
Iteration  10: 743.194 ns/op
Iteration  11: 742.094 ns/op
Iteration  12: 741.516 ns/op
Iteration  13: 741.625 ns/op
Iteration  14: 741.622 ns/op
Iteration  15: 741.356 ns/op
Iteration  16: 743.357 ns/op
Iteration  17: 740.826 ns/op
Iteration  18: 741.070 ns/op
Iteration  19: 740.897 ns/op
Iteration  20: 743.353 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1166.953 ns/op
# Warmup Iteration   2: 865.121 ns/op
# Warmup Iteration   3: 750.020 ns/op
# Warmup Iteration   4: 756.718 ns/op
# Warmup Iteration   5: 766.134 ns/op
Iteration   1: 763.030 ns/op
Iteration   2: 745.708 ns/op
Iteration   3: 746.063 ns/op
Iteration   4: 746.118 ns/op
Iteration   5: 746.149 ns/op
Iteration   6: 745.667 ns/op
Iteration   7: 745.327 ns/op
Iteration   8: 745.267 ns/op
Iteration   9: 746.116 ns/op
Iteration  10: 745.780 ns/op
Iteration  11: 743.377 ns/op
Iteration  12: 743.313 ns/op
Iteration  13: 743.333 ns/op
Iteration  14: 743.295 ns/op
Iteration  15: 743.554 ns/op
Iteration  16: 743.732 ns/op
Iteration  17: 744.127 ns/op
Iteration  18: 745.025 ns/op
Iteration  19: 745.858 ns/op
Iteration  20: 745.691 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1167.284 ns/op
# Warmup Iteration   2: 868.294 ns/op
# Warmup Iteration   3: 748.843 ns/op
# Warmup Iteration   4: 758.772 ns/op
# Warmup Iteration   5: 763.885 ns/op
Iteration   1: 762.947 ns/op
Iteration   2: 753.323 ns/op
Iteration   3: 746.645 ns/op
Iteration   4: 745.042 ns/op
Iteration   5: 744.569 ns/op
Iteration   6: 745.548 ns/op
Iteration   7: 745.016 ns/op
Iteration   8: 744.764 ns/op
Iteration   9: 744.980 ns/op
Iteration  10: 745.732 ns/op
Iteration  11: 742.711 ns/op
Iteration  12: 742.556 ns/op
Iteration  13: 743.159 ns/op
Iteration  14: 749.636 ns/op
Iteration  15: 743.434 ns/op
Iteration  16: 743.114 ns/op
Iteration  17: 743.726 ns/op
Iteration  18: 743.631 ns/op
Iteration  19: 743.244 ns/op
Iteration  20: 742.690 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  744.258 Â±(99.9%) 1.491 ns/op [Average]
  (min, avg, max) = (740.522, 744.258, 763.030), stdev = 4.398
  CI (99.9%): [742.766, 745.749] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	
  



	
  	 
 
 	
 	
	
	
   
  	  	 
,
	 
 
    
   	 	
   

		 
	
	 	

 
	
  		
  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1195.973 ns/op
# Warmup Iteration   2: 896.692 ns/op
# Warmup Iteration   3: 776.575 ns/op
# Warmup Iteration   4: 779.315 ns/op
# Warmup Iteration   5: 798.923 ns/op
Iteration   1: 790.695 ns/op
Iteration   2: 772.735 ns/op
Iteration   3: 772.371 ns/op
Iteration   4: 772.939 ns/op
Iteration   5: 776.564 ns/op
Iteration   6: 772.160 ns/op
Iteration   7: 772.330 ns/op
Iteration   8: 772.546 ns/op
Iteration   9: 772.778 ns/op
Iteration  10: 772.545 ns/op
Iteration  11: 770.091 ns/op
Iteration  12: 770.099 ns/op
Iteration  13: 777.194 ns/op
Iteration  14: 770.431 ns/op
Iteration  15: 769.992 ns/op
Iteration  16: 769.794 ns/op
Iteration  17: 770.256 ns/op
Iteration  18: 771.014 ns/op
Iteration  19: 771.061 ns/op
Iteration  20: 770.593 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1187.293 ns/op
# Warmup Iteration   2: 877.335 ns/op
# Warmup Iteration   3: 766.198 ns/op
# Warmup Iteration   4: 780.443 ns/op
# Warmup Iteration   5: 775.288 ns/op
Iteration   1: 779.512 ns/op
Iteration   2: 761.159 ns/op
Iteration   3: 762.372 ns/op
Iteration   4: 761.963 ns/op
Iteration   5: 761.972 ns/op
Iteration   6: 762.025 ns/op
Iteration   7: 761.542 ns/op
Iteration   8: 761.360 ns/op
Iteration   9: 761.765 ns/op
Iteration  10: 761.473 ns/op
Iteration  11: 761.743 ns/op
Iteration  12: 768.305 ns/op
Iteration  13: 759.870 ns/op
Iteration  14: 759.442 ns/op
Iteration  15: 759.387 ns/op
Iteration  16: 759.843 ns/op
Iteration  17: 759.719 ns/op
Iteration  18: 760.230 ns/op
Iteration  19: 759.640 ns/op
Iteration  20: 759.639 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1222.145 ns/op
# Warmup Iteration   2: 897.398 ns/op
# Warmup Iteration   3: 771.066 ns/op
# Warmup Iteration   4: 773.596 ns/op
# Warmup Iteration   5: 793.710 ns/op
Iteration   1: 784.979 ns/op
Iteration   2: 767.398 ns/op
Iteration   3: 767.394 ns/op
Iteration   4: 767.457 ns/op
Iteration   5: 766.590 ns/op
Iteration   6: 767.007 ns/op
Iteration   7: 767.409 ns/op
Iteration   8: 767.405 ns/op
Iteration   9: 767.439 ns/op
Iteration  10: 767.192 ns/op
Iteration  11: 766.466 ns/op
Iteration  12: 764.305 ns/op
Iteration  13: 765.611 ns/op
Iteration  14: 764.530 ns/op
Iteration  15: 764.942 ns/op
Iteration  16: 764.849 ns/op
Iteration  17: 765.205 ns/op
Iteration  18: 770.751 ns/op
Iteration  19: 765.004 ns/op
Iteration  20: 765.450 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1233.839 ns/op
# Warmup Iteration   2: 894.351 ns/op
# Warmup Iteration   3: 765.195 ns/op
# Warmup Iteration   4: 770.558 ns/op
# Warmup Iteration   5: 785.638 ns/op
Iteration   1: 780.203 ns/op
Iteration   2: 763.308 ns/op
Iteration   3: 762.325 ns/op
Iteration   4: 762.063 ns/op
Iteration   5: 762.268 ns/op
Iteration   6: 762.013 ns/op
Iteration   7: 761.904 ns/op
Iteration   8: 762.270 ns/op
Iteration   9: 761.973 ns/op
Iteration  10: 762.543 ns/op
Iteration  11: 761.560 ns/op
Iteration  12: 760.486 ns/op
Iteration  13: 759.617 ns/op
Iteration  14: 759.760 ns/op
Iteration  15: 761.208 ns/op
Iteration  16: 759.683 ns/op
Iteration  17: 760.154 ns/op
Iteration  18: 760.114 ns/op
Iteration  19: 760.947 ns/op
Iteration  20: 760.462 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1276.718 ns/op
# Warmup Iteration   2: 984.263 ns/op
# Warmup Iteration   3: 833.372 ns/op
# Warmup Iteration   4: 835.903 ns/op
# Warmup Iteration   5: 838.636 ns/op
Iteration   1: 843.139 ns/op
Iteration   2: 847.668 ns/op
Iteration   3: 832.990 ns/op
Iteration   4: 829.703 ns/op
Iteration   5: 829.072 ns/op
Iteration   6: 830.629 ns/op
Iteration   7: 829.986 ns/op
Iteration   8: 829.942 ns/op
Iteration   9: 830.403 ns/op
Iteration  10: 831.082 ns/op
Iteration  11: 839.763 ns/op
Iteration  12: 829.731 ns/op
Iteration  13: 828.187 ns/op
Iteration  14: 828.049 ns/op
Iteration  15: 827.557 ns/op
Iteration  16: 825.458 ns/op
Iteration  17: 828.424 ns/op
Iteration  18: 829.673 ns/op
Iteration  19: 829.615 ns/op
Iteration  20: 829.088 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  779.235 Â±(99.9%) 9.146 ns/op [Average]
  (min, avg, max) = (759.387, 779.235, 847.668), stdev = 26.967
  CI (99.9%): [770.090, 788.381] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	
  



	
  	 
 
 	
 	
	
	
   
  	  	 
,
	 
 
    
   	 	
   

		 
	
	 	

 
	
  		
    avgt  100  744.258 Â± 1.491  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	
  



	
  	 
 
 	
 	
	
	
   
  	  	 
,
	 
 
    
   	 	
   

		 
	
	 	

 
	
  		
    avgt  100  779.235 Â± 9.146  ns/op

Benchmark result is saved to split_precompiled_regex_233_197_Match.csv
