# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	
  		  	
				
		

 

	  	  	  	,	
	     
   	 


	

 	

 	 
	
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1037.804 ns/op
# Warmup Iteration   2: 681.144 ns/op
# Warmup Iteration   3: 607.782 ns/op
# Warmup Iteration   4: 610.552 ns/op
# Warmup Iteration   5: 632.421 ns/op
Iteration   1: 603.312 ns/op
Iteration   2: 603.127 ns/op
Iteration   3: 603.518 ns/op
Iteration   4: 605.520 ns/op
Iteration   5: 603.120 ns/op
Iteration   6: 603.065 ns/op
Iteration   7: 606.607 ns/op
Iteration   8: 601.150 ns/op
Iteration   9: 601.126 ns/op
Iteration  10: 600.830 ns/op
Iteration  11: 601.539 ns/op
Iteration  12: 600.662 ns/op
Iteration  13: 600.704 ns/op
Iteration  14: 602.239 ns/op
Iteration  15: 601.102 ns/op
Iteration  16: 604.791 ns/op
Iteration  17: 601.633 ns/op
Iteration  18: 603.405 ns/op
Iteration  19: 601.891 ns/op
Iteration  20: 601.581 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1010.162 ns/op
# Warmup Iteration   2: 659.778 ns/op
# Warmup Iteration   3: 598.202 ns/op
# Warmup Iteration   4: 600.782 ns/op
# Warmup Iteration   5: 621.747 ns/op
Iteration   1: 593.656 ns/op
Iteration   2: 593.920 ns/op
Iteration   3: 596.883 ns/op
Iteration   4: 593.800 ns/op
Iteration   5: 593.463 ns/op
Iteration   6: 593.374 ns/op
Iteration   7: 597.293 ns/op
Iteration   8: 591.270 ns/op
Iteration   9: 591.182 ns/op
Iteration  10: 592.008 ns/op
Iteration  11: 591.015 ns/op
Iteration  12: 591.282 ns/op
Iteration  13: 594.569 ns/op
Iteration  14: 591.815 ns/op
Iteration  15: 592.529 ns/op
Iteration  16: 594.078 ns/op
Iteration  17: 592.332 ns/op
Iteration  18: 591.884 ns/op
Iteration  19: 591.638 ns/op
Iteration  20: 592.686 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1014.899 ns/op
# Warmup Iteration   2: 665.105 ns/op
# Warmup Iteration   3: 596.633 ns/op
# Warmup Iteration   4: 599.567 ns/op
# Warmup Iteration   5: 622.948 ns/op
Iteration   1: 591.876 ns/op
Iteration   2: 592.078 ns/op
Iteration   3: 595.894 ns/op
Iteration   4: 591.769 ns/op
Iteration   5: 592.121 ns/op
Iteration   6: 595.742 ns/op
Iteration   7: 593.317 ns/op
Iteration   8: 590.195 ns/op
Iteration   9: 593.833 ns/op
Iteration  10: 592.618 ns/op
Iteration  11: 590.130 ns/op
Iteration  12: 590.130 ns/op
Iteration  13: 591.309 ns/op
Iteration  14: 589.773 ns/op
Iteration  15: 589.796 ns/op
Iteration  16: 591.127 ns/op
Iteration  17: 590.385 ns/op
Iteration  18: 590.479 ns/op
Iteration  19: 590.358 ns/op
Iteration  20: 592.864 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1037.455 ns/op
# Warmup Iteration   2: 698.685 ns/op
# Warmup Iteration   3: 627.136 ns/op
# Warmup Iteration   4: 629.322 ns/op
# Warmup Iteration   5: 636.626 ns/op
Iteration   1: 638.587 ns/op
Iteration   2: 622.380 ns/op
Iteration   3: 622.328 ns/op
Iteration   4: 622.393 ns/op
Iteration   5: 625.164 ns/op
Iteration   6: 622.277 ns/op
Iteration   7: 622.760 ns/op
Iteration   8: 622.666 ns/op
Iteration   9: 623.895 ns/op
Iteration  10: 620.602 ns/op
Iteration  11: 620.580 ns/op
Iteration  12: 620.432 ns/op
Iteration  13: 621.649 ns/op
Iteration  14: 620.303 ns/op
Iteration  15: 620.235 ns/op
Iteration  16: 625.113 ns/op
Iteration  17: 623.713 ns/op
Iteration  18: 620.686 ns/op
Iteration  19: 620.353 ns/op
Iteration  20: 620.396 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1027.008 ns/op
# Warmup Iteration   2: 679.941 ns/op
# Warmup Iteration   3: 611.013 ns/op
# Warmup Iteration   4: 613.261 ns/op
# Warmup Iteration   5: 633.943 ns/op
Iteration   1: 606.742 ns/op
Iteration   2: 605.210 ns/op
Iteration   3: 604.859 ns/op
Iteration   4: 607.972 ns/op
Iteration   5: 605.381 ns/op
Iteration   6: 605.921 ns/op
Iteration   7: 608.135 ns/op
Iteration   8: 602.934 ns/op
Iteration   9: 603.254 ns/op
Iteration  10: 605.439 ns/op
Iteration  11: 607.527 ns/op
Iteration  12: 603.922 ns/op
Iteration  13: 603.936 ns/op
Iteration  14: 603.364 ns/op
Iteration  15: 605.284 ns/op
Iteration  16: 604.289 ns/op
Iteration  17: 603.717 ns/op
Iteration  18: 605.376 ns/op
Iteration  19: 604.930 ns/op
Iteration  20: 605.352 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  603.074 ±(99.9%) 3.884 ns/op [Average]
  (min, avg, max) = (589.773, 603.074, 638.587), stdev = 11.453
  CI (99.9%): [599.190, 606.959] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	
  		  	
				
		

 

	  	  	  	,	
	     
   	 


	

 	

 	 
	
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1056.593 ns/op
# Warmup Iteration   2: 678.408 ns/op
# Warmup Iteration   3: 607.636 ns/op
# Warmup Iteration   4: 610.085 ns/op
# Warmup Iteration   5: 631.549 ns/op
Iteration   1: 603.145 ns/op
Iteration   2: 603.211 ns/op
Iteration   3: 606.265 ns/op
Iteration   4: 603.162 ns/op
Iteration   5: 603.024 ns/op
Iteration   6: 606.123 ns/op
Iteration   7: 606.080 ns/op
Iteration   8: 601.424 ns/op
Iteration   9: 604.460 ns/op
Iteration  10: 603.344 ns/op
Iteration  11: 601.466 ns/op
Iteration  12: 601.077 ns/op
Iteration  13: 602.491 ns/op
Iteration  14: 601.879 ns/op
Iteration  15: 601.951 ns/op
Iteration  16: 603.611 ns/op
Iteration  17: 600.861 ns/op
Iteration  18: 601.168 ns/op
Iteration  19: 602.824 ns/op
Iteration  20: 602.150 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1079.054 ns/op
# Warmup Iteration   2: 682.604 ns/op
# Warmup Iteration   3: 609.249 ns/op
# Warmup Iteration   4: 611.808 ns/op
# Warmup Iteration   5: 632.068 ns/op
Iteration   1: 604.431 ns/op
Iteration   2: 604.460 ns/op
Iteration   3: 607.171 ns/op
Iteration   4: 603.634 ns/op
Iteration   5: 604.685 ns/op
Iteration   6: 606.597 ns/op
Iteration   7: 603.914 ns/op
Iteration   8: 601.753 ns/op
Iteration   9: 601.518 ns/op
Iteration  10: 602.408 ns/op
Iteration  11: 601.710 ns/op
Iteration  12: 601.723 ns/op
Iteration  13: 602.792 ns/op
Iteration  14: 602.605 ns/op
Iteration  15: 602.170 ns/op
Iteration  16: 603.862 ns/op
Iteration  17: 607.656 ns/op
Iteration  18: 604.080 ns/op
Iteration  19: 604.837 ns/op
Iteration  20: 603.626 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1035.658 ns/op
# Warmup Iteration   2: 683.727 ns/op
# Warmup Iteration   3: 621.077 ns/op
# Warmup Iteration   4: 623.644 ns/op
# Warmup Iteration   5: 643.298 ns/op
Iteration   1: 616.203 ns/op
Iteration   2: 616.168 ns/op
Iteration   3: 616.180 ns/op
Iteration   4: 619.256 ns/op
Iteration   5: 616.393 ns/op
Iteration   6: 615.566 ns/op
Iteration   7: 619.215 ns/op
Iteration   8: 614.621 ns/op
Iteration   9: 614.900 ns/op
Iteration  10: 614.732 ns/op
Iteration  11: 615.974 ns/op
Iteration  12: 614.788 ns/op
Iteration  13: 615.083 ns/op
Iteration  14: 615.795 ns/op
Iteration  15: 614.794 ns/op
Iteration  16: 614.901 ns/op
Iteration  17: 619.005 ns/op
Iteration  18: 617.876 ns/op
Iteration  19: 617.169 ns/op
Iteration  20: 614.456 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1083.363 ns/op
# Warmup Iteration   2: 686.661 ns/op
# Warmup Iteration   3: 610.596 ns/op
# Warmup Iteration   4: 614.419 ns/op
# Warmup Iteration   5: 635.796 ns/op
Iteration   1: 606.249 ns/op
Iteration   2: 606.327 ns/op
Iteration   3: 609.755 ns/op
Iteration   4: 606.118 ns/op
Iteration   5: 605.983 ns/op
Iteration   6: 605.800 ns/op
Iteration   7: 608.180 ns/op
Iteration   8: 604.425 ns/op
Iteration   9: 604.431 ns/op
Iteration  10: 610.816 ns/op
Iteration  11: 605.179 ns/op
Iteration  12: 604.783 ns/op
Iteration  13: 606.172 ns/op
Iteration  14: 605.389 ns/op
Iteration  15: 605.996 ns/op
Iteration  16: 628.842 ns/op
Iteration  17: 625.761 ns/op
Iteration  18: 607.198 ns/op
Iteration  19: 626.092 ns/op
Iteration  20: 606.050 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1063.236 ns/op
# Warmup Iteration   2: 717.038 ns/op
# Warmup Iteration   3: 647.664 ns/op
# Warmup Iteration   4: 650.334 ns/op
# Warmup Iteration   5: 652.797 ns/op
Iteration   1: 660.844 ns/op
Iteration   2: 642.763 ns/op
Iteration   3: 643.291 ns/op
Iteration   4: 643.065 ns/op
Iteration   5: 646.506 ns/op
Iteration   6: 642.838 ns/op
Iteration   7: 643.134 ns/op
Iteration   8: 643.043 ns/op
Iteration   9: 641.218 ns/op
Iteration  10: 642.299 ns/op
Iteration  11: 641.003 ns/op
Iteration  12: 640.744 ns/op
Iteration  13: 641.107 ns/op
Iteration  14: 643.555 ns/op
Iteration  15: 643.156 ns/op
Iteration  16: 641.858 ns/op
Iteration  17: 641.571 ns/op
Iteration  18: 643.174 ns/op
Iteration  19: 641.465 ns/op
Iteration  20: 642.417 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  615.170 ±(99.9%) 5.266 ns/op [Average]
  (min, avg, max) = (600.861, 615.170, 660.844), stdev = 15.526
  CI (99.9%): [609.905, 620.436] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	
  		  	
				
		

 

	  	  	  	,	
	     
   	 


	

 	

 	 
	
		  avgt  100  603.074 ± 3.884  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	
  		  	
				
		

 

	  	  	  	,	
	     
   	 


	

 	

 	 
	
		  avgt  100  615.170 ± 5.266  ns/op

Benchmark result is saved to split_precompiled_regex_2_112_Match.csv
