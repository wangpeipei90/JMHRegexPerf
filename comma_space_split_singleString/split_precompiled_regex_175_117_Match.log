# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	

	  	


 	

	
 


	
 
   	 	, 	 

 


		 	

	

  
  
   	
	  		
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1096.715 ns/op
# Warmup Iteration   2: 693.887 ns/op
# Warmup Iteration   3: 620.954 ns/op
# Warmup Iteration   4: 623.972 ns/op
# Warmup Iteration   5: 645.119 ns/op
Iteration   1: 622.377 ns/op
Iteration   2: 616.249 ns/op
Iteration   3: 616.355 ns/op
Iteration   4: 619.537 ns/op
Iteration   5: 616.227 ns/op
Iteration   6: 616.173 ns/op
Iteration   7: 615.941 ns/op
Iteration   8: 617.706 ns/op
Iteration   9: 613.862 ns/op
Iteration  10: 613.779 ns/op
Iteration  11: 613.840 ns/op
Iteration  12: 614.775 ns/op
Iteration  13: 614.041 ns/op
Iteration  14: 614.478 ns/op
Iteration  15: 614.455 ns/op
Iteration  16: 616.090 ns/op
Iteration  17: 614.415 ns/op
Iteration  18: 614.282 ns/op
Iteration  19: 614.283 ns/op
Iteration  20: 616.969 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1049.883 ns/op
# Warmup Iteration   2: 704.710 ns/op
# Warmup Iteration   3: 629.892 ns/op
# Warmup Iteration   4: 632.256 ns/op
# Warmup Iteration   5: 636.279 ns/op
Iteration   1: 643.011 ns/op
Iteration   2: 625.459 ns/op
Iteration   3: 625.816 ns/op
Iteration   4: 625.202 ns/op
Iteration   5: 628.421 ns/op
Iteration   6: 624.838 ns/op
Iteration   7: 625.670 ns/op
Iteration   8: 625.392 ns/op
Iteration   9: 624.500 ns/op
Iteration  10: 622.917 ns/op
Iteration  11: 623.042 ns/op
Iteration  12: 623.132 ns/op
Iteration  13: 623.238 ns/op
Iteration  14: 623.816 ns/op
Iteration  15: 623.210 ns/op
Iteration  16: 623.264 ns/op
Iteration  17: 623.256 ns/op
Iteration  18: 624.701 ns/op
Iteration  19: 623.065 ns/op
Iteration  20: 623.646 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1045.332 ns/op
# Warmup Iteration   2: 705.739 ns/op
# Warmup Iteration   3: 631.617 ns/op
# Warmup Iteration   4: 633.763 ns/op
# Warmup Iteration   5: 638.104 ns/op
Iteration   1: 648.089 ns/op
Iteration   2: 627.139 ns/op
Iteration   3: 627.107 ns/op
Iteration   4: 626.830 ns/op
Iteration   5: 629.252 ns/op
Iteration   6: 626.516 ns/op
Iteration   7: 626.457 ns/op
Iteration   8: 626.677 ns/op
Iteration   9: 629.444 ns/op
Iteration  10: 625.600 ns/op
Iteration  11: 624.826 ns/op
Iteration  12: 624.817 ns/op
Iteration  13: 627.490 ns/op
Iteration  14: 626.267 ns/op
Iteration  15: 626.012 ns/op
Iteration  16: 625.476 ns/op
Iteration  17: 625.402 ns/op
Iteration  18: 626.322 ns/op
Iteration  19: 625.412 ns/op
Iteration  20: 625.229 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1079.240 ns/op
# Warmup Iteration   2: 690.420 ns/op
# Warmup Iteration   3: 615.646 ns/op
# Warmup Iteration   4: 618.207 ns/op
# Warmup Iteration   5: 639.229 ns/op
Iteration   1: 611.173 ns/op
Iteration   2: 610.851 ns/op
Iteration   3: 610.877 ns/op
Iteration   4: 613.546 ns/op
Iteration   5: 611.170 ns/op
Iteration   6: 611.090 ns/op
Iteration   7: 611.376 ns/op
Iteration   8: 612.834 ns/op
Iteration   9: 609.320 ns/op
Iteration  10: 609.407 ns/op
Iteration  11: 610.353 ns/op
Iteration  12: 610.365 ns/op
Iteration  13: 609.434 ns/op
Iteration  14: 610.065 ns/op
Iteration  15: 611.064 ns/op
Iteration  16: 611.570 ns/op
Iteration  17: 610.565 ns/op
Iteration  18: 611.052 ns/op
Iteration  19: 614.050 ns/op
Iteration  20: 611.100 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1028.474 ns/op
# Warmup Iteration   2: 682.572 ns/op
# Warmup Iteration   3: 616.875 ns/op
# Warmup Iteration   4: 616.505 ns/op
# Warmup Iteration   5: 637.069 ns/op
Iteration   1: 611.124 ns/op
Iteration   2: 609.279 ns/op
Iteration   3: 608.725 ns/op
Iteration   4: 611.221 ns/op
Iteration   5: 609.193 ns/op
Iteration   6: 608.990 ns/op
Iteration   7: 609.447 ns/op
Iteration   8: 609.786 ns/op
Iteration   9: 607.503 ns/op
Iteration  10: 613.004 ns/op
Iteration  11: 607.343 ns/op
Iteration  12: 608.899 ns/op
Iteration  13: 607.644 ns/op
Iteration  14: 607.825 ns/op
Iteration  15: 614.698 ns/op
Iteration  16: 608.143 ns/op
Iteration  17: 607.767 ns/op
Iteration  18: 609.485 ns/op
Iteration  19: 612.428 ns/op
Iteration  20: 609.290 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  617.849 ±(99.9%) 2.723 ns/op [Average]
  (min, avg, max) = (607.343, 617.849, 648.089), stdev = 8.028
  CI (99.9%): [615.126, 620.571] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	

	  	


 	

	
 


	
 
   	 	, 	 

 


		 	

	

  
  
   	
	  		
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1080.128 ns/op
# Warmup Iteration   2: 742.311 ns/op
# Warmup Iteration   3: 668.713 ns/op
# Warmup Iteration   4: 666.547 ns/op
# Warmup Iteration   5: 669.901 ns/op
Iteration   1: 673.619 ns/op
Iteration   2: 662.719 ns/op
Iteration   3: 658.229 ns/op
Iteration   4: 659.057 ns/op
Iteration   5: 659.664 ns/op
Iteration   6: 658.745 ns/op
Iteration   7: 661.752 ns/op
Iteration   8: 658.324 ns/op
Iteration   9: 657.120 ns/op
Iteration  10: 656.758 ns/op
Iteration  11: 657.251 ns/op
Iteration  12: 659.554 ns/op
Iteration  13: 657.724 ns/op
Iteration  14: 658.362 ns/op
Iteration  15: 657.933 ns/op
Iteration  16: 659.841 ns/op
Iteration  17: 657.981 ns/op
Iteration  18: 658.687 ns/op
Iteration  19: 657.779 ns/op
Iteration  20: 658.696 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1112.472 ns/op
# Warmup Iteration   2: 720.536 ns/op
# Warmup Iteration   3: 643.923 ns/op
# Warmup Iteration   4: 643.276 ns/op
# Warmup Iteration   5: 646.876 ns/op
Iteration   1: 655.018 ns/op
Iteration   2: 635.568 ns/op
Iteration   3: 635.437 ns/op
Iteration   4: 635.597 ns/op
Iteration   5: 638.382 ns/op
Iteration   6: 635.606 ns/op
Iteration   7: 635.550 ns/op
Iteration   8: 638.573 ns/op
Iteration   9: 635.125 ns/op
Iteration  10: 633.755 ns/op
Iteration  11: 633.870 ns/op
Iteration  12: 633.724 ns/op
Iteration  13: 635.628 ns/op
Iteration  14: 635.316 ns/op
Iteration  15: 634.248 ns/op
Iteration  16: 634.897 ns/op
Iteration  17: 636.768 ns/op
Iteration  18: 633.811 ns/op
Iteration  19: 636.447 ns/op
Iteration  20: 636.791 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1062.600 ns/op
# Warmup Iteration   2: 718.970 ns/op
# Warmup Iteration   3: 646.675 ns/op
# Warmup Iteration   4: 649.181 ns/op
# Warmup Iteration   5: 652.553 ns/op
Iteration   1: 659.242 ns/op
Iteration   2: 641.253 ns/op
Iteration   3: 640.903 ns/op
Iteration   4: 641.529 ns/op
Iteration   5: 644.484 ns/op
Iteration   6: 641.229 ns/op
Iteration   7: 641.518 ns/op
Iteration   8: 641.558 ns/op
Iteration   9: 640.889 ns/op
Iteration  10: 639.669 ns/op
Iteration  11: 639.940 ns/op
Iteration  12: 639.933 ns/op
Iteration  13: 640.068 ns/op
Iteration  14: 642.391 ns/op
Iteration  15: 640.287 ns/op
Iteration  16: 640.033 ns/op
Iteration  17: 640.775 ns/op
Iteration  18: 644.686 ns/op
Iteration  19: 641.505 ns/op
Iteration  20: 639.870 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1107.480 ns/op
# Warmup Iteration   2: 734.161 ns/op
# Warmup Iteration   3: 665.242 ns/op
# Warmup Iteration   4: 661.845 ns/op
# Warmup Iteration   5: 665.226 ns/op
Iteration   1: 669.378 ns/op
Iteration   2: 657.715 ns/op
Iteration   3: 654.249 ns/op
Iteration   4: 654.011 ns/op
Iteration   5: 653.831 ns/op
Iteration   6: 655.664 ns/op
Iteration   7: 653.859 ns/op
Iteration   8: 654.614 ns/op
Iteration   9: 656.054 ns/op
Iteration  10: 652.236 ns/op
Iteration  11: 653.777 ns/op
Iteration  12: 657.568 ns/op
Iteration  13: 652.320 ns/op
Iteration  14: 653.416 ns/op
Iteration  15: 652.243 ns/op
Iteration  16: 653.758 ns/op
Iteration  17: 653.522 ns/op
Iteration  18: 654.362 ns/op
Iteration  19: 654.264 ns/op
Iteration  20: 654.323 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1069.532 ns/op
# Warmup Iteration   2: 741.515 ns/op
# Warmup Iteration   3: 657.890 ns/op
# Warmup Iteration   4: 660.320 ns/op
# Warmup Iteration   5: 662.497 ns/op
Iteration   1: 669.299 ns/op
Iteration   2: 652.357 ns/op
Iteration   3: 654.511 ns/op
Iteration   4: 654.068 ns/op
Iteration   5: 652.336 ns/op
Iteration   6: 654.798 ns/op
Iteration   7: 652.288 ns/op
Iteration   8: 652.596 ns/op
Iteration   9: 650.467 ns/op
Iteration  10: 650.225 ns/op
Iteration  11: 651.566 ns/op
Iteration  12: 650.352 ns/op
Iteration  13: 650.468 ns/op
Iteration  14: 651.686 ns/op
Iteration  15: 654.101 ns/op
Iteration  16: 651.819 ns/op
Iteration  17: 651.713 ns/op
Iteration  18: 651.514 ns/op
Iteration  19: 651.213 ns/op
Iteration  20: 653.693 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  649.239 ±(99.9%) 3.216 ns/op [Average]
  (min, avg, max) = (633.724, 649.239, 673.619), stdev = 9.482
  CI (99.9%): [646.023, 652.455] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	

	  	


 	

	
 


	
 
   	 	, 	 

 


		 	

	

  
  
   	
	  		
		  avgt  100  617.849 ± 2.723  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	

	  	


 	

	
 


	
 
   	 	, 	 

 


		 	

	

  
  
   	
	  		
		  avgt  100  649.239 ± 3.216  ns/op

Benchmark result is saved to split_precompiled_regex_175_117_Match.csv
