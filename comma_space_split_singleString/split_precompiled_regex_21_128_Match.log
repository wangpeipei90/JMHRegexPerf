# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
	 	
	 

	 


  	 
 	 
 			   
  ,
		 		  
		

	
 		 	
 
  		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1051.181 ns/op
# Warmup Iteration   2: 698.567 ns/op
# Warmup Iteration   3: 620.908 ns/op
# Warmup Iteration   4: 623.440 ns/op
# Warmup Iteration   5: 634.792 ns/op
Iteration   1: 631.080 ns/op
Iteration   2: 615.675 ns/op
Iteration   3: 614.919 ns/op
Iteration   4: 614.229 ns/op
Iteration   5: 617.522 ns/op
Iteration   6: 615.167 ns/op
Iteration   7: 614.422 ns/op
Iteration   8: 614.982 ns/op
Iteration   9: 614.097 ns/op
Iteration  10: 613.083 ns/op
Iteration  11: 613.157 ns/op
Iteration  12: 614.430 ns/op
Iteration  13: 613.217 ns/op
Iteration  14: 618.759 ns/op
Iteration  15: 614.193 ns/op
Iteration  16: 619.938 ns/op
Iteration  17: 615.060 ns/op
Iteration  18: 613.442 ns/op
Iteration  19: 613.453 ns/op
Iteration  20: 619.569 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1055.516 ns/op
# Warmup Iteration   2: 719.937 ns/op
# Warmup Iteration   3: 642.005 ns/op
# Warmup Iteration   4: 645.210 ns/op
# Warmup Iteration   5: 649.026 ns/op
Iteration   1: 656.714 ns/op
Iteration   2: 637.558 ns/op
Iteration   3: 637.832 ns/op
Iteration   4: 637.270 ns/op
Iteration   5: 643.027 ns/op
Iteration   6: 639.804 ns/op
Iteration   7: 636.460 ns/op
Iteration   8: 636.226 ns/op
Iteration   9: 634.343 ns/op
Iteration  10: 634.167 ns/op
Iteration  11: 635.435 ns/op
Iteration  12: 634.256 ns/op
Iteration  13: 634.477 ns/op
Iteration  14: 634.740 ns/op
Iteration  15: 636.309 ns/op
Iteration  16: 635.135 ns/op
Iteration  17: 635.272 ns/op
Iteration  18: 635.920 ns/op
Iteration  19: 634.505 ns/op
Iteration  20: 639.367 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1072.815 ns/op
# Warmup Iteration   2: 732.957 ns/op
# Warmup Iteration   3: 660.881 ns/op
# Warmup Iteration   4: 657.678 ns/op
# Warmup Iteration   5: 661.080 ns/op
Iteration   1: 664.912 ns/op
Iteration   2: 652.867 ns/op
Iteration   3: 648.975 ns/op
Iteration   4: 648.883 ns/op
Iteration   5: 648.587 ns/op
Iteration   6: 649.364 ns/op
Iteration   7: 656.007 ns/op
Iteration   8: 649.936 ns/op
Iteration   9: 647.847 ns/op
Iteration  10: 655.069 ns/op
Iteration  11: 647.661 ns/op
Iteration  12: 647.265 ns/op
Iteration  13: 649.464 ns/op
Iteration  14: 647.335 ns/op
Iteration  15: 648.431 ns/op
Iteration  16: 647.945 ns/op
Iteration  17: 647.505 ns/op
Iteration  18: 652.613 ns/op
Iteration  19: 649.023 ns/op
Iteration  20: 648.841 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1069.931 ns/op
# Warmup Iteration   2: 728.120 ns/op
# Warmup Iteration   3: 661.324 ns/op
# Warmup Iteration   4: 658.181 ns/op
# Warmup Iteration   5: 662.307 ns/op
Iteration   1: 665.308 ns/op
Iteration   2: 653.967 ns/op
Iteration   3: 649.798 ns/op
Iteration   4: 650.726 ns/op
Iteration   5: 649.908 ns/op
Iteration   6: 650.974 ns/op
Iteration   7: 655.904 ns/op
Iteration   8: 650.756 ns/op
Iteration   9: 649.357 ns/op
Iteration  10: 649.035 ns/op
Iteration  11: 649.157 ns/op
Iteration  12: 648.245 ns/op
Iteration  13: 654.664 ns/op
Iteration  14: 648.725 ns/op
Iteration  15: 648.140 ns/op
Iteration  16: 648.230 ns/op
Iteration  17: 648.261 ns/op
Iteration  18: 650.600 ns/op
Iteration  19: 648.325 ns/op
Iteration  20: 648.970 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1054.740 ns/op
# Warmup Iteration   2: 714.053 ns/op
# Warmup Iteration   3: 639.484 ns/op
# Warmup Iteration   4: 642.709 ns/op
# Warmup Iteration   5: 646.041 ns/op
Iteration   1: 653.267 ns/op
Iteration   2: 635.638 ns/op
Iteration   3: 634.312 ns/op
Iteration   4: 634.846 ns/op
Iteration   5: 634.883 ns/op
Iteration   6: 638.315 ns/op
Iteration   7: 634.946 ns/op
Iteration   8: 635.673 ns/op
Iteration   9: 633.508 ns/op
Iteration  10: 638.253 ns/op
Iteration  11: 634.488 ns/op
Iteration  12: 633.944 ns/op
Iteration  13: 633.619 ns/op
Iteration  14: 634.066 ns/op
Iteration  15: 635.871 ns/op
Iteration  16: 633.745 ns/op
Iteration  17: 634.313 ns/op
Iteration  18: 633.133 ns/op
Iteration  19: 637.293 ns/op
Iteration  20: 636.879 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  638.178 ±(99.9%) 4.573 ns/op [Average]
  (min, avg, max) = (613.083, 638.178, 665.308), stdev = 13.485
  CI (99.9%): [633.604, 642.751] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
	 	
	 

	 


  	 
 	 
 			   
  ,
		 		  
		

	
 		 	
 
  		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1139.790 ns/op
# Warmup Iteration   2: 774.736 ns/op
# Warmup Iteration   3: 694.316 ns/op
# Warmup Iteration   4: 689.168 ns/op
# Warmup Iteration   5: 692.295 ns/op
Iteration   1: 696.681 ns/op
Iteration   2: 681.487 ns/op
Iteration   3: 683.263 ns/op
Iteration   4: 680.818 ns/op
Iteration   5: 681.179 ns/op
Iteration   6: 681.199 ns/op
Iteration   7: 681.399 ns/op
Iteration   8: 681.563 ns/op
Iteration   9: 688.613 ns/op
Iteration  10: 679.350 ns/op
Iteration  11: 679.386 ns/op
Iteration  12: 679.370 ns/op
Iteration  13: 679.249 ns/op
Iteration  14: 679.948 ns/op
Iteration  15: 680.066 ns/op
Iteration  16: 682.946 ns/op
Iteration  17: 680.460 ns/op
Iteration  18: 679.563 ns/op
Iteration  19: 680.250 ns/op
Iteration  20: 679.761 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1063.482 ns/op
# Warmup Iteration   2: 722.089 ns/op
# Warmup Iteration   3: 651.262 ns/op
# Warmup Iteration   4: 653.962 ns/op
# Warmup Iteration   5: 657.704 ns/op
Iteration   1: 664.162 ns/op
Iteration   2: 646.672 ns/op
Iteration   3: 646.267 ns/op
Iteration   4: 646.657 ns/op
Iteration   5: 646.033 ns/op
Iteration   6: 649.217 ns/op
Iteration   7: 646.988 ns/op
Iteration   8: 646.691 ns/op
Iteration   9: 649.782 ns/op
Iteration  10: 648.747 ns/op
Iteration  11: 645.116 ns/op
Iteration  12: 645.005 ns/op
Iteration  13: 644.783 ns/op
Iteration  14: 646.780 ns/op
Iteration  15: 645.535 ns/op
Iteration  16: 644.880 ns/op
Iteration  17: 647.687 ns/op
Iteration  18: 645.630 ns/op
Iteration  19: 649.382 ns/op
Iteration  20: 646.339 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1105.312 ns/op
# Warmup Iteration   2: 731.214 ns/op
# Warmup Iteration   3: 663.045 ns/op
# Warmup Iteration   4: 659.211 ns/op
# Warmup Iteration   5: 662.405 ns/op
Iteration   1: 669.663 ns/op
Iteration   2: 651.376 ns/op
Iteration   3: 654.145 ns/op
Iteration   4: 654.055 ns/op
Iteration   5: 651.260 ns/op
Iteration   6: 654.502 ns/op
Iteration   7: 651.936 ns/op
Iteration   8: 656.273 ns/op
Iteration   9: 653.378 ns/op
Iteration  10: 650.031 ns/op
Iteration  11: 650.302 ns/op
Iteration  12: 649.929 ns/op
Iteration  13: 649.982 ns/op
Iteration  14: 649.766 ns/op
Iteration  15: 651.632 ns/op
Iteration  16: 651.379 ns/op
Iteration  17: 652.074 ns/op
Iteration  18: 651.821 ns/op
Iteration  19: 651.087 ns/op
Iteration  20: 654.714 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1097.755 ns/op
# Warmup Iteration   2: 748.073 ns/op
# Warmup Iteration   3: 679.204 ns/op
# Warmup Iteration   4: 675.315 ns/op
# Warmup Iteration   5: 678.867 ns/op
Iteration   1: 683.206 ns/op
Iteration   2: 670.040 ns/op
Iteration   3: 667.122 ns/op
Iteration   4: 666.818 ns/op
Iteration   5: 666.344 ns/op
Iteration   6: 666.324 ns/op
Iteration   7: 670.874 ns/op
Iteration   8: 670.243 ns/op
Iteration   9: 664.876 ns/op
Iteration  10: 664.905 ns/op
Iteration  11: 667.376 ns/op
Iteration  12: 674.352 ns/op
Iteration  13: 669.177 ns/op
Iteration  14: 665.932 ns/op
Iteration  15: 665.656 ns/op
Iteration  16: 665.384 ns/op
Iteration  17: 665.258 ns/op
Iteration  18: 667.458 ns/op
Iteration  19: 668.758 ns/op
Iteration  20: 670.455 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1117.871 ns/op
# Warmup Iteration   2: 751.291 ns/op
# Warmup Iteration   3: 677.751 ns/op
# Warmup Iteration   4: 673.708 ns/op
# Warmup Iteration   5: 677.513 ns/op
Iteration   1: 680.906 ns/op
Iteration   2: 668.690 ns/op
Iteration   3: 665.521 ns/op
Iteration   4: 665.486 ns/op
Iteration   5: 666.092 ns/op
Iteration   6: 665.756 ns/op
Iteration   7: 668.572 ns/op
Iteration   8: 666.314 ns/op
Iteration   9: 663.716 ns/op
Iteration  10: 663.332 ns/op
Iteration  11: 663.485 ns/op
Iteration  12: 663.382 ns/op
Iteration  13: 668.667 ns/op
Iteration  14: 663.291 ns/op
Iteration  15: 663.823 ns/op
Iteration  16: 663.955 ns/op
Iteration  17: 664.359 ns/op
Iteration  18: 665.749 ns/op
Iteration  19: 664.192 ns/op
Iteration  20: 663.757 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  663.378 ±(99.9%) 4.346 ns/op [Average]
  (min, avg, max) = (644.783, 663.378, 696.681), stdev = 12.814
  CI (99.9%): [659.032, 667.724] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
	 	
	 

	 


  	 
 	 
 			   
  ,
		 		  
		

	
 		 	
 
  		  avgt  100  638.178 ± 4.573  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
	 	
	 

	 


  	 
 	 
 			   
  ,
		 		  
		

	
 		 	
 
  		  avgt  100  663.378 ± 4.346  ns/op

Benchmark result is saved to split_precompiled_regex_21_128_Match.csv
