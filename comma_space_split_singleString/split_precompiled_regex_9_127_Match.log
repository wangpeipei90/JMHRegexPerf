# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   

 		 
 			
 	 
 ,  			
   	  


 
 

	 
	 		
		  	   
  	   

	 
 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1067.340 ns/op
# Warmup Iteration   2: 714.636 ns/op
# Warmup Iteration   3: 632.043 ns/op
# Warmup Iteration   4: 634.852 ns/op
# Warmup Iteration   5: 637.984 ns/op
Iteration   1: 645.497 ns/op
Iteration   2: 627.202 ns/op
Iteration   3: 627.052 ns/op
Iteration   4: 626.907 ns/op
Iteration   5: 629.732 ns/op
Iteration   6: 633.515 ns/op
Iteration   7: 627.564 ns/op
Iteration   8: 627.350 ns/op
Iteration   9: 625.291 ns/op
Iteration  10: 626.289 ns/op
Iteration  11: 630.131 ns/op
Iteration  12: 625.649 ns/op
Iteration  13: 625.553 ns/op
Iteration  14: 628.464 ns/op
Iteration  15: 625.775 ns/op
Iteration  16: 626.105 ns/op
Iteration  17: 626.054 ns/op
Iteration  18: 628.837 ns/op
Iteration  19: 627.208 ns/op
Iteration  20: 627.607 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1094.221 ns/op
# Warmup Iteration   2: 718.947 ns/op
# Warmup Iteration   3: 655.624 ns/op
# Warmup Iteration   4: 644.080 ns/op
# Warmup Iteration   5: 645.681 ns/op
Iteration   1: 653.155 ns/op
Iteration   2: 641.981 ns/op
Iteration   3: 637.424 ns/op
Iteration   4: 634.495 ns/op
Iteration   5: 637.038 ns/op
Iteration   6: 637.555 ns/op
Iteration   7: 634.611 ns/op
Iteration   8: 634.300 ns/op
Iteration   9: 635.779 ns/op
Iteration  10: 631.972 ns/op
Iteration  11: 632.975 ns/op
Iteration  12: 631.753 ns/op
Iteration  13: 631.506 ns/op
Iteration  14: 633.225 ns/op
Iteration  15: 633.068 ns/op
Iteration  16: 632.264 ns/op
Iteration  17: 639.459 ns/op
Iteration  18: 632.558 ns/op
Iteration  19: 633.106 ns/op
Iteration  20: 634.231 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1046.490 ns/op
# Warmup Iteration   2: 708.287 ns/op
# Warmup Iteration   3: 632.791 ns/op
# Warmup Iteration   4: 634.465 ns/op
# Warmup Iteration   5: 637.299 ns/op
Iteration   1: 642.981 ns/op
Iteration   2: 626.397 ns/op
Iteration   3: 626.970 ns/op
Iteration   4: 626.979 ns/op
Iteration   5: 629.547 ns/op
Iteration   6: 626.493 ns/op
Iteration   7: 626.920 ns/op
Iteration   8: 626.580 ns/op
Iteration   9: 625.709 ns/op
Iteration  10: 625.927 ns/op
Iteration  11: 625.065 ns/op
Iteration  12: 625.077 ns/op
Iteration  13: 624.928 ns/op
Iteration  14: 626.869 ns/op
Iteration  15: 629.306 ns/op
Iteration  16: 627.707 ns/op
Iteration  17: 625.747 ns/op
Iteration  18: 629.838 ns/op
Iteration  19: 626.121 ns/op
Iteration  20: 625.917 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1049.674 ns/op
# Warmup Iteration   2: 706.680 ns/op
# Warmup Iteration   3: 631.133 ns/op
# Warmup Iteration   4: 633.768 ns/op
# Warmup Iteration   5: 636.878 ns/op
Iteration   1: 643.189 ns/op
Iteration   2: 626.393 ns/op
Iteration   3: 625.929 ns/op
Iteration   4: 625.862 ns/op
Iteration   5: 628.489 ns/op
Iteration   6: 626.092 ns/op
Iteration   7: 626.541 ns/op
Iteration   8: 626.516 ns/op
Iteration   9: 625.902 ns/op
Iteration  10: 624.410 ns/op
Iteration  11: 624.627 ns/op
Iteration  12: 624.683 ns/op
Iteration  13: 624.882 ns/op
Iteration  14: 627.191 ns/op
Iteration  15: 626.297 ns/op
Iteration  16: 625.120 ns/op
Iteration  17: 626.330 ns/op
Iteration  18: 630.371 ns/op
Iteration  19: 625.026 ns/op
Iteration  20: 625.445 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1072.929 ns/op
# Warmup Iteration   2: 717.336 ns/op
# Warmup Iteration   3: 644.360 ns/op
# Warmup Iteration   4: 641.602 ns/op
# Warmup Iteration   5: 645.053 ns/op
Iteration   1: 652.497 ns/op
Iteration   2: 633.343 ns/op
Iteration   3: 633.810 ns/op
Iteration   4: 634.396 ns/op
Iteration   5: 634.288 ns/op
Iteration   6: 636.112 ns/op
Iteration   7: 633.654 ns/op
Iteration   8: 634.066 ns/op
Iteration   9: 632.934 ns/op
Iteration  10: 633.148 ns/op
Iteration  11: 631.885 ns/op
Iteration  12: 631.531 ns/op
Iteration  13: 631.772 ns/op
Iteration  14: 631.652 ns/op
Iteration  15: 635.550 ns/op
Iteration  16: 632.273 ns/op
Iteration  17: 632.991 ns/op
Iteration  18: 633.001 ns/op
Iteration  19: 633.569 ns/op
Iteration  20: 637.227 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  630.603 ±(99.9%) 1.925 ns/op [Average]
  (min, avg, max) = (624.410, 630.603, 653.155), stdev = 5.676
  CI (99.9%): [628.678, 632.528] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   

 		 
 			
 	 
 ,  			
   	  


 
 

	 
	 		
		  	   
  	   

	 
 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1116.855 ns/op
# Warmup Iteration   2: 731.806 ns/op
# Warmup Iteration   3: 659.103 ns/op
# Warmup Iteration   4: 657.610 ns/op
# Warmup Iteration   5: 661.235 ns/op
Iteration   1: 666.196 ns/op
Iteration   2: 648.176 ns/op
Iteration   3: 647.287 ns/op
Iteration   4: 647.493 ns/op
Iteration   5: 648.100 ns/op
Iteration   6: 651.134 ns/op
Iteration   7: 648.094 ns/op
Iteration   8: 650.513 ns/op
Iteration   9: 645.385 ns/op
Iteration  10: 648.118 ns/op
Iteration  11: 646.341 ns/op
Iteration  12: 646.714 ns/op
Iteration  13: 646.360 ns/op
Iteration  14: 646.518 ns/op
Iteration  15: 649.940 ns/op
Iteration  16: 647.521 ns/op
Iteration  17: 646.718 ns/op
Iteration  18: 646.924 ns/op
Iteration  19: 650.503 ns/op
Iteration  20: 647.158 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1083.469 ns/op
# Warmup Iteration   2: 736.313 ns/op
# Warmup Iteration   3: 667.693 ns/op
# Warmup Iteration   4: 666.014 ns/op
# Warmup Iteration   5: 668.945 ns/op
Iteration   1: 673.381 ns/op
Iteration   2: 660.192 ns/op
Iteration   3: 657.177 ns/op
Iteration   4: 657.031 ns/op
Iteration   5: 656.914 ns/op
Iteration   6: 657.362 ns/op
Iteration   7: 661.227 ns/op
Iteration   8: 658.145 ns/op
Iteration   9: 660.986 ns/op
Iteration  10: 655.946 ns/op
Iteration  11: 657.966 ns/op
Iteration  12: 655.988 ns/op
Iteration  13: 655.893 ns/op
Iteration  14: 661.217 ns/op
Iteration  15: 656.518 ns/op
Iteration  16: 658.267 ns/op
Iteration  17: 657.254 ns/op
Iteration  18: 656.257 ns/op
Iteration  19: 656.391 ns/op
Iteration  20: 656.330 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1069.883 ns/op
# Warmup Iteration   2: 728.167 ns/op
# Warmup Iteration   3: 656.101 ns/op
# Warmup Iteration   4: 658.584 ns/op
# Warmup Iteration   5: 662.473 ns/op
Iteration   1: 669.218 ns/op
Iteration   2: 650.850 ns/op
Iteration   3: 650.632 ns/op
Iteration   4: 650.733 ns/op
Iteration   5: 650.809 ns/op
Iteration   6: 652.976 ns/op
Iteration   7: 651.362 ns/op
Iteration   8: 651.251 ns/op
Iteration   9: 656.648 ns/op
Iteration  10: 649.144 ns/op
Iteration  11: 651.755 ns/op
Iteration  12: 648.848 ns/op
Iteration  13: 649.261 ns/op
Iteration  14: 648.744 ns/op
Iteration  15: 650.370 ns/op
Iteration  16: 649.184 ns/op
Iteration  17: 649.967 ns/op
Iteration  18: 649.366 ns/op
Iteration  19: 649.313 ns/op
Iteration  20: 651.181 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1108.929 ns/op
# Warmup Iteration   2: 730.163 ns/op
# Warmup Iteration   3: 655.719 ns/op
# Warmup Iteration   4: 652.005 ns/op
# Warmup Iteration   5: 655.377 ns/op
Iteration   1: 662.569 ns/op
Iteration   2: 644.173 ns/op
Iteration   3: 644.520 ns/op
Iteration   4: 644.786 ns/op
Iteration   5: 644.614 ns/op
Iteration   6: 647.775 ns/op
Iteration   7: 644.531 ns/op
Iteration   8: 644.698 ns/op
Iteration   9: 643.030 ns/op
Iteration  10: 644.275 ns/op
Iteration  11: 642.803 ns/op
Iteration  12: 642.960 ns/op
Iteration  13: 644.081 ns/op
Iteration  14: 646.396 ns/op
Iteration  15: 643.565 ns/op
Iteration  16: 643.586 ns/op
Iteration  17: 643.750 ns/op
Iteration  18: 643.310 ns/op
Iteration  19: 645.474 ns/op
Iteration  20: 643.936 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1099.259 ns/op
# Warmup Iteration   2: 734.569 ns/op
# Warmup Iteration   3: 657.935 ns/op
# Warmup Iteration   4: 660.554 ns/op
# Warmup Iteration   5: 663.768 ns/op
Iteration   1: 672.547 ns/op
Iteration   2: 653.491 ns/op
Iteration   3: 652.731 ns/op
Iteration   4: 652.998 ns/op
Iteration   5: 652.587 ns/op
Iteration   6: 655.600 ns/op
Iteration   7: 652.453 ns/op
Iteration   8: 652.734 ns/op
Iteration   9: 651.360 ns/op
Iteration  10: 650.687 ns/op
Iteration  11: 652.959 ns/op
Iteration  12: 650.313 ns/op
Iteration  13: 650.444 ns/op
Iteration  14: 651.105 ns/op
Iteration  15: 652.671 ns/op
Iteration  16: 651.902 ns/op
Iteration  17: 652.181 ns/op
Iteration  18: 655.451 ns/op
Iteration  19: 653.212 ns/op
Iteration  20: 656.238 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  651.557 ±(99.9%) 2.109 ns/op [Average]
  (min, avg, max) = (642.803, 651.557, 673.381), stdev = 6.219
  CI (99.9%): [649.448, 653.667] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    

 		 
 			
 	 
 ,  			
   	  


 
 

	 
	 		
		  	   
  	   

	 
   avgt  100  630.603 ± 1.925  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    

 		 
 			
 	 
 ,  			
   	  


 
 

	 
	 		
		  	   
  	   

	 
   avgt  100  651.557 ± 2.109  ns/op

Benchmark result is saved to split_precompiled_regex_9_127_Match.csv
