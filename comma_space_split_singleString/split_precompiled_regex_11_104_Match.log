# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	

  	
  			


  
 
	 
 	 		 	

  
 , 
 	
	
	  

  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1056.724 ns/op
# Warmup Iteration   2: 677.336 ns/op
# Warmup Iteration   3: 603.366 ns/op
# Warmup Iteration   4: 605.794 ns/op
# Warmup Iteration   5: 627.475 ns/op
Iteration   1: 598.765 ns/op
Iteration   2: 598.639 ns/op
Iteration   3: 598.761 ns/op
Iteration   4: 601.638 ns/op
Iteration   5: 599.330 ns/op
Iteration   6: 598.598 ns/op
Iteration   7: 599.908 ns/op
Iteration   8: 596.115 ns/op
Iteration   9: 595.685 ns/op
Iteration  10: 601.549 ns/op
Iteration  11: 595.786 ns/op
Iteration  12: 595.895 ns/op
Iteration  13: 595.945 ns/op
Iteration  14: 597.185 ns/op
Iteration  15: 596.143 ns/op
Iteration  16: 596.632 ns/op
Iteration  17: 599.190 ns/op
Iteration  18: 597.800 ns/op
Iteration  19: 597.620 ns/op
Iteration  20: 597.860 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1009.155 ns/op
# Warmup Iteration   2: 653.785 ns/op
# Warmup Iteration   3: 595.772 ns/op
# Warmup Iteration   4: 595.562 ns/op
# Warmup Iteration   5: 612.893 ns/op
Iteration   1: 586.871 ns/op
Iteration   2: 586.712 ns/op
Iteration   3: 589.475 ns/op
Iteration   4: 586.774 ns/op
Iteration   5: 586.219 ns/op
Iteration   6: 589.371 ns/op
Iteration   7: 587.292 ns/op
Iteration   8: 586.019 ns/op
Iteration   9: 594.208 ns/op
Iteration  10: 589.311 ns/op
Iteration  11: 587.380 ns/op
Iteration  12: 588.427 ns/op
Iteration  13: 586.322 ns/op
Iteration  14: 587.529 ns/op
Iteration  15: 587.057 ns/op
Iteration  16: 589.087 ns/op
Iteration  17: 587.800 ns/op
Iteration  18: 588.079 ns/op
Iteration  19: 591.250 ns/op
Iteration  20: 588.292 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1002.010 ns/op
# Warmup Iteration   2: 646.784 ns/op
# Warmup Iteration   3: 589.350 ns/op
# Warmup Iteration   4: 604.527 ns/op
# Warmup Iteration   5: 598.133 ns/op
Iteration   1: 584.985 ns/op
Iteration   2: 585.027 ns/op
Iteration   3: 589.231 ns/op
Iteration   4: 584.145 ns/op
Iteration   5: 585.267 ns/op
Iteration   6: 589.796 ns/op
Iteration   7: 585.698 ns/op
Iteration   8: 583.448 ns/op
Iteration   9: 584.258 ns/op
Iteration  10: 583.047 ns/op
Iteration  11: 583.066 ns/op
Iteration  12: 585.796 ns/op
Iteration  13: 586.635 ns/op
Iteration  14: 583.328 ns/op
Iteration  15: 584.994 ns/op
Iteration  16: 583.633 ns/op
Iteration  17: 583.896 ns/op
Iteration  18: 585.913 ns/op
Iteration  19: 583.422 ns/op
Iteration  20: 583.617 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1018.787 ns/op
# Warmup Iteration   2: 669.589 ns/op
# Warmup Iteration   3: 605.193 ns/op
# Warmup Iteration   4: 607.359 ns/op
# Warmup Iteration   5: 628.131 ns/op
Iteration   1: 600.171 ns/op
Iteration   2: 600.137 ns/op
Iteration   3: 599.986 ns/op
Iteration   4: 603.459 ns/op
Iteration   5: 600.231 ns/op
Iteration   6: 599.947 ns/op
Iteration   7: 603.476 ns/op
Iteration   8: 604.948 ns/op
Iteration   9: 600.173 ns/op
Iteration  10: 598.898 ns/op
Iteration  11: 599.962 ns/op
Iteration  12: 598.240 ns/op
Iteration  13: 599.289 ns/op
Iteration  14: 601.690 ns/op
Iteration  15: 599.123 ns/op
Iteration  16: 599.042 ns/op
Iteration  17: 602.705 ns/op
Iteration  18: 600.339 ns/op
Iteration  19: 602.542 ns/op
Iteration  20: 603.236 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1009.135 ns/op
# Warmup Iteration   2: 645.818 ns/op
# Warmup Iteration   3: 589.015 ns/op
# Warmup Iteration   4: 599.331 ns/op
# Warmup Iteration   5: 603.103 ns/op
Iteration   1: 584.274 ns/op
Iteration   2: 583.907 ns/op
Iteration   3: 586.569 ns/op
Iteration   4: 584.535 ns/op
Iteration   5: 584.050 ns/op
Iteration   6: 586.609 ns/op
Iteration   7: 584.489 ns/op
Iteration   8: 582.884 ns/op
Iteration   9: 584.953 ns/op
Iteration  10: 583.056 ns/op
Iteration  11: 582.858 ns/op
Iteration  12: 585.127 ns/op
Iteration  13: 583.270 ns/op
Iteration  14: 583.512 ns/op
Iteration  15: 584.730 ns/op
Iteration  16: 583.111 ns/op
Iteration  17: 583.385 ns/op
Iteration  18: 584.669 ns/op
Iteration  19: 582.137 ns/op
Iteration  20: 584.393 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  591.218 ±(99.9%) 2.421 ns/op [Average]
  (min, avg, max) = (582.137, 591.218, 604.948), stdev = 7.138
  CI (99.9%): [588.798, 593.639] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	

  	
  			


  
 
	 
 	 		 	

  
 , 
 	
	
	  

  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1025.615 ns/op
# Warmup Iteration   2: 660.375 ns/op
# Warmup Iteration   3: 602.847 ns/op
# Warmup Iteration   4: 618.568 ns/op
# Warmup Iteration   5: 612.010 ns/op
Iteration   1: 598.132 ns/op
Iteration   2: 598.215 ns/op
Iteration   3: 601.562 ns/op
Iteration   4: 598.108 ns/op
Iteration   5: 597.732 ns/op
Iteration   6: 601.125 ns/op
Iteration   7: 598.429 ns/op
Iteration   8: 596.670 ns/op
Iteration   9: 597.382 ns/op
Iteration  10: 596.445 ns/op
Iteration  11: 596.337 ns/op
Iteration  12: 597.476 ns/op
Iteration  13: 596.784 ns/op
Iteration  14: 596.783 ns/op
Iteration  15: 598.323 ns/op
Iteration  16: 596.831 ns/op
Iteration  17: 597.619 ns/op
Iteration  18: 600.975 ns/op
Iteration  19: 598.049 ns/op
Iteration  20: 597.356 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1023.571 ns/op
# Warmup Iteration   2: 656.944 ns/op
# Warmup Iteration   3: 598.470 ns/op
# Warmup Iteration   4: 621.399 ns/op
# Warmup Iteration   5: 612.701 ns/op
Iteration   1: 593.457 ns/op
Iteration   2: 599.428 ns/op
Iteration   3: 601.506 ns/op
Iteration   4: 595.023 ns/op
Iteration   5: 602.400 ns/op
Iteration   6: 595.603 ns/op
Iteration   7: 592.685 ns/op
Iteration   8: 590.897 ns/op
Iteration   9: 597.146 ns/op
Iteration  10: 591.204 ns/op
Iteration  11: 591.127 ns/op
Iteration  12: 593.061 ns/op
Iteration  13: 590.823 ns/op
Iteration  14: 592.852 ns/op
Iteration  15: 593.017 ns/op
Iteration  16: 591.350 ns/op
Iteration  17: 591.016 ns/op
Iteration  18: 625.842 ns/op
Iteration  19: 591.999 ns/op
Iteration  20: 593.625 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1075.098 ns/op
# Warmup Iteration   2: 687.138 ns/op
# Warmup Iteration   3: 612.438 ns/op
# Warmup Iteration   4: 614.461 ns/op
# Warmup Iteration   5: 635.597 ns/op
Iteration   1: 607.380 ns/op
Iteration   2: 612.982 ns/op
Iteration   3: 610.187 ns/op
Iteration   4: 607.509 ns/op
Iteration   5: 607.129 ns/op
Iteration   6: 607.458 ns/op
Iteration   7: 610.168 ns/op
Iteration   8: 605.716 ns/op
Iteration   9: 605.804 ns/op
Iteration  10: 607.302 ns/op
Iteration  11: 605.956 ns/op
Iteration  12: 605.980 ns/op
Iteration  13: 612.166 ns/op
Iteration  14: 606.404 ns/op
Iteration  15: 605.938 ns/op
Iteration  16: 605.895 ns/op
Iteration  17: 608.094 ns/op
Iteration  18: 606.870 ns/op
Iteration  19: 607.756 ns/op
Iteration  20: 609.964 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1009.281 ns/op
# Warmup Iteration   2: 652.635 ns/op
# Warmup Iteration   3: 598.568 ns/op
# Warmup Iteration   4: 616.151 ns/op
# Warmup Iteration   5: 607.256 ns/op
Iteration   1: 593.587 ns/op
Iteration   2: 596.553 ns/op
Iteration   3: 593.598 ns/op
Iteration   4: 593.645 ns/op
Iteration   5: 596.750 ns/op
Iteration   6: 593.439 ns/op
Iteration   7: 593.882 ns/op
Iteration   8: 592.569 ns/op
Iteration   9: 591.724 ns/op
Iteration  10: 591.313 ns/op
Iteration  11: 593.028 ns/op
Iteration  12: 592.105 ns/op
Iteration  13: 596.913 ns/op
Iteration  14: 593.488 ns/op
Iteration  15: 591.546 ns/op
Iteration  16: 592.267 ns/op
Iteration  17: 593.761 ns/op
Iteration  18: 593.022 ns/op
Iteration  19: 593.151 ns/op
Iteration  20: 595.234 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1054.394 ns/op
# Warmup Iteration   2: 654.955 ns/op
# Warmup Iteration   3: 589.283 ns/op
# Warmup Iteration   4: 606.138 ns/op
# Warmup Iteration   5: 597.223 ns/op
Iteration   1: 583.975 ns/op
Iteration   2: 586.321 ns/op
Iteration   3: 583.681 ns/op
Iteration   4: 583.781 ns/op
Iteration   5: 587.218 ns/op
Iteration   6: 584.018 ns/op
Iteration   7: 583.921 ns/op
Iteration   8: 584.042 ns/op
Iteration   9: 582.015 ns/op
Iteration  10: 581.969 ns/op
Iteration  11: 583.583 ns/op
Iteration  12: 582.006 ns/op
Iteration  13: 587.735 ns/op
Iteration  14: 583.052 ns/op
Iteration  15: 582.298 ns/op
Iteration  16: 584.043 ns/op
Iteration  17: 582.171 ns/op
Iteration  18: 582.830 ns/op
Iteration  19: 584.061 ns/op
Iteration  20: 583.027 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  595.784 ±(99.9%) 2.932 ns/op [Average]
  (min, avg, max) = (581.969, 595.784, 625.842), stdev = 8.646
  CI (99.9%): [592.852, 598.716] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	

  	
  			


  
 
	 
 	 		 	

  
 , 
 	
	
	  

    avgt  100  591.218 ± 2.421  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	

  	
  			


  
 
	 
 	 		 	

  
 , 
 	
	
	  

    avgt  100  595.784 ± 2.932  ns/op

Benchmark result is saved to split_precompiled_regex_11_104_Match.csv
