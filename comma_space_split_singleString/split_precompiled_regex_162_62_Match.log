# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	  		
 
	
	
	
 		 		
			

		 
,
 		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 928.210 ns/op
# Warmup Iteration   2: 539.901 ns/op
# Warmup Iteration   3: 517.005 ns/op
# Warmup Iteration   4: 512.994 ns/op
# Warmup Iteration   5: 518.760 ns/op
Iteration   1: 504.196 ns/op
Iteration   2: 506.342 ns/op
Iteration   3: 504.161 ns/op
Iteration   4: 506.483 ns/op
Iteration   5: 504.356 ns/op
Iteration   6: 506.554 ns/op
Iteration   7: 505.547 ns/op
Iteration   8: 504.068 ns/op
Iteration   9: 503.415 ns/op
Iteration  10: 504.811 ns/op
Iteration  11: 504.377 ns/op
Iteration  12: 503.221 ns/op
Iteration  13: 505.014 ns/op
Iteration  14: 504.010 ns/op
Iteration  15: 506.684 ns/op
Iteration  16: 504.231 ns/op
Iteration  17: 506.593 ns/op
Iteration  18: 504.362 ns/op
Iteration  19: 505.998 ns/op
Iteration  20: 503.728 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 918.554 ns/op
# Warmup Iteration   2: 537.718 ns/op
# Warmup Iteration   3: 516.350 ns/op
# Warmup Iteration   4: 512.489 ns/op
# Warmup Iteration   5: 517.906 ns/op
Iteration   1: 503.825 ns/op
Iteration   2: 505.720 ns/op
Iteration   3: 503.604 ns/op
Iteration   4: 505.822 ns/op
Iteration   5: 502.921 ns/op
Iteration   6: 504.447 ns/op
Iteration   7: 501.939 ns/op
Iteration   8: 502.981 ns/op
Iteration   9: 503.258 ns/op
Iteration  10: 502.038 ns/op
Iteration  11: 510.140 ns/op
Iteration  12: 502.543 ns/op
Iteration  13: 504.550 ns/op
Iteration  14: 502.201 ns/op
Iteration  15: 504.399 ns/op
Iteration  16: 502.503 ns/op
Iteration  17: 506.286 ns/op
Iteration  18: 503.306 ns/op
Iteration  19: 507.695 ns/op
Iteration  20: 502.492 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 920.221 ns/op
# Warmup Iteration   2: 534.346 ns/op
# Warmup Iteration   3: 511.590 ns/op
# Warmup Iteration   4: 507.828 ns/op
# Warmup Iteration   5: 513.858 ns/op
Iteration   1: 500.095 ns/op
Iteration   2: 501.544 ns/op
Iteration   3: 499.779 ns/op
Iteration   4: 502.157 ns/op
Iteration   5: 499.825 ns/op
Iteration   6: 500.203 ns/op
Iteration   7: 498.958 ns/op
Iteration   8: 498.070 ns/op
Iteration   9: 498.859 ns/op
Iteration  10: 497.885 ns/op
Iteration  11: 499.603 ns/op
Iteration  12: 498.025 ns/op
Iteration  13: 499.457 ns/op
Iteration  14: 498.582 ns/op
Iteration  15: 500.116 ns/op
Iteration  16: 500.345 ns/op
Iteration  17: 498.922 ns/op
Iteration  18: 502.217 ns/op
Iteration  19: 499.800 ns/op
Iteration  20: 500.604 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 923.715 ns/op
# Warmup Iteration   2: 541.944 ns/op
# Warmup Iteration   3: 520.142 ns/op
# Warmup Iteration   4: 518.363 ns/op
# Warmup Iteration   5: 524.369 ns/op
Iteration   1: 508.242 ns/op
Iteration   2: 510.920 ns/op
Iteration   3: 510.155 ns/op
Iteration   4: 511.526 ns/op
Iteration   5: 507.088 ns/op
Iteration   6: 508.683 ns/op
Iteration   7: 505.336 ns/op
Iteration   8: 506.139 ns/op
Iteration   9: 507.882 ns/op
Iteration  10: 507.177 ns/op
Iteration  11: 505.847 ns/op
Iteration  12: 506.663 ns/op
Iteration  13: 505.915 ns/op
Iteration  14: 508.086 ns/op
Iteration  15: 508.882 ns/op
Iteration  16: 506.246 ns/op
Iteration  17: 509.747 ns/op
Iteration  18: 505.882 ns/op
Iteration  19: 511.477 ns/op
Iteration  20: 506.179 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 919.458 ns/op
# Warmup Iteration   2: 542.427 ns/op
# Warmup Iteration   3: 516.654 ns/op
# Warmup Iteration   4: 512.336 ns/op
# Warmup Iteration   5: 518.548 ns/op
Iteration   1: 503.605 ns/op
Iteration   2: 506.103 ns/op
Iteration   3: 507.326 ns/op
Iteration   4: 506.901 ns/op
Iteration   5: 503.421 ns/op
Iteration   6: 505.260 ns/op
Iteration   7: 501.716 ns/op
Iteration   8: 503.251 ns/op
Iteration   9: 502.219 ns/op
Iteration  10: 504.357 ns/op
Iteration  11: 504.648 ns/op
Iteration  12: 502.236 ns/op
Iteration  13: 505.253 ns/op
Iteration  14: 502.315 ns/op
Iteration  15: 504.602 ns/op
Iteration  16: 502.251 ns/op
Iteration  17: 504.759 ns/op
Iteration  18: 502.525 ns/op
Iteration  19: 505.633 ns/op
Iteration  20: 503.515 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  504.158 ±(99.9%) 1.049 ns/op [Average]
  (min, avg, max) = (497.885, 504.158, 511.526), stdev = 3.093
  CI (99.9%): [503.109, 505.207] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	  		
 
	
	
	
 		 		
			

		 
,
 		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 958.269 ns/op
# Warmup Iteration   2: 556.516 ns/op
# Warmup Iteration   3: 520.230 ns/op
# Warmup Iteration   4: 516.364 ns/op
# Warmup Iteration   5: 520.408 ns/op
Iteration   1: 507.059 ns/op
Iteration   2: 512.391 ns/op
Iteration   3: 507.604 ns/op
Iteration   4: 510.710 ns/op
Iteration   5: 508.531 ns/op
Iteration   6: 509.969 ns/op
Iteration   7: 507.853 ns/op
Iteration   8: 506.781 ns/op
Iteration   9: 508.116 ns/op
Iteration  10: 506.891 ns/op
Iteration  11: 513.113 ns/op
Iteration  12: 506.586 ns/op
Iteration  13: 508.300 ns/op
Iteration  14: 507.030 ns/op
Iteration  15: 508.695 ns/op
Iteration  16: 510.469 ns/op
Iteration  17: 506.950 ns/op
Iteration  18: 510.351 ns/op
Iteration  19: 507.744 ns/op
Iteration  20: 510.402 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 961.562 ns/op
# Warmup Iteration   2: 545.032 ns/op
# Warmup Iteration   3: 516.096 ns/op
# Warmup Iteration   4: 512.335 ns/op
# Warmup Iteration   5: 519.789 ns/op
Iteration   1: 503.580 ns/op
Iteration   2: 505.385 ns/op
Iteration   3: 506.185 ns/op
Iteration   4: 503.054 ns/op
Iteration   5: 509.131 ns/op
Iteration   6: 502.166 ns/op
Iteration   7: 503.224 ns/op
Iteration   8: 502.539 ns/op
Iteration   9: 504.754 ns/op
Iteration  10: 504.320 ns/op
Iteration  11: 502.750 ns/op
Iteration  12: 505.713 ns/op
Iteration  13: 505.058 ns/op
Iteration  14: 504.192 ns/op
Iteration  15: 502.476 ns/op
Iteration  16: 504.576 ns/op
Iteration  17: 504.888 ns/op
Iteration  18: 503.632 ns/op
Iteration  19: 504.285 ns/op
Iteration  20: 503.101 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1000.969 ns/op
# Warmup Iteration   2: 603.701 ns/op
# Warmup Iteration   3: 555.781 ns/op
# Warmup Iteration   4: 570.654 ns/op
# Warmup Iteration   5: 564.416 ns/op
Iteration   1: 554.339 ns/op
Iteration   2: 551.466 ns/op
Iteration   3: 554.201 ns/op
Iteration   4: 551.245 ns/op
Iteration   5: 550.977 ns/op
Iteration   6: 555.359 ns/op
Iteration   7: 553.581 ns/op
Iteration   8: 551.743 ns/op
Iteration   9: 550.328 ns/op
Iteration  10: 556.084 ns/op
Iteration  11: 550.518 ns/op
Iteration  12: 550.916 ns/op
Iteration  13: 552.230 ns/op
Iteration  14: 550.248 ns/op
Iteration  15: 551.878 ns/op
Iteration  16: 550.314 ns/op
Iteration  17: 554.427 ns/op
Iteration  18: 550.395 ns/op
Iteration  19: 549.900 ns/op
Iteration  20: 552.213 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 991.590 ns/op
# Warmup Iteration   2: 572.068 ns/op
# Warmup Iteration   3: 540.062 ns/op
# Warmup Iteration   4: 535.072 ns/op
# Warmup Iteration   5: 543.091 ns/op
Iteration   1: 526.404 ns/op
Iteration   2: 528.870 ns/op
Iteration   3: 526.178 ns/op
Iteration   4: 528.142 ns/op
Iteration   5: 526.063 ns/op
Iteration   6: 528.721 ns/op
Iteration   7: 524.895 ns/op
Iteration   8: 526.958 ns/op
Iteration   9: 525.284 ns/op
Iteration  10: 526.480 ns/op
Iteration  11: 525.935 ns/op
Iteration  12: 527.309 ns/op
Iteration  13: 525.373 ns/op
Iteration  14: 528.979 ns/op
Iteration  15: 526.481 ns/op
Iteration  16: 532.916 ns/op
Iteration  17: 528.733 ns/op
Iteration  18: 528.741 ns/op
Iteration  19: 525.961 ns/op
Iteration  20: 527.147 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 973.704 ns/op
# Warmup Iteration   2: 551.753 ns/op
# Warmup Iteration   3: 520.211 ns/op
# Warmup Iteration   4: 515.743 ns/op
# Warmup Iteration   5: 521.497 ns/op
Iteration   1: 507.018 ns/op
Iteration   2: 512.019 ns/op
Iteration   3: 506.023 ns/op
Iteration   4: 509.377 ns/op
Iteration   5: 511.370 ns/op
Iteration   6: 504.451 ns/op
Iteration   7: 505.693 ns/op
Iteration   8: 504.100 ns/op
Iteration   9: 505.698 ns/op
Iteration  10: 504.468 ns/op
Iteration  11: 507.744 ns/op
Iteration  12: 504.992 ns/op
Iteration  13: 507.351 ns/op
Iteration  14: 507.518 ns/op
Iteration  15: 504.754 ns/op
Iteration  16: 507.470 ns/op
Iteration  17: 506.197 ns/op
Iteration  18: 508.250 ns/op
Iteration  19: 505.566 ns/op
Iteration  20: 507.861 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  519.864 ±(99.9%) 6.187 ns/op [Average]
  (min, avg, max) = (502.166, 519.864, 556.084), stdev = 18.243
  CI (99.9%): [513.677, 526.051] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 	  		
 
	
	
	
 		 		
			

		 
,
 		  avgt  100  504.158 ± 1.049  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 	  		
 
	
	
	
 		 		
			

		 
,
 		  avgt  100  519.864 ± 6.187  ns/op

Benchmark result is saved to split_precompiled_regex_162_62_Match.csv
