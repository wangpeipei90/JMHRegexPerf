# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 			
 	
  	  	 
 

		 

		
 , 
		

   
		
 		 


			 	

    	


 
 
 

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1102.802 ns/op
# Warmup Iteration   2: 723.575 ns/op
# Warmup Iteration   3: 646.589 ns/op
# Warmup Iteration   4: 642.336 ns/op
# Warmup Iteration   5: 645.415 ns/op
Iteration   1: 654.214 ns/op
Iteration   2: 639.158 ns/op
Iteration   3: 634.440 ns/op
Iteration   4: 634.753 ns/op
Iteration   5: 634.811 ns/op
Iteration   6: 639.928 ns/op
Iteration   7: 638.539 ns/op
Iteration   8: 635.135 ns/op
Iteration   9: 636.950 ns/op
Iteration  10: 632.715 ns/op
Iteration  11: 633.635 ns/op
Iteration  12: 632.551 ns/op
Iteration  13: 632.163 ns/op
Iteration  14: 637.111 ns/op
Iteration  15: 634.394 ns/op
Iteration  16: 632.686 ns/op
Iteration  17: 632.517 ns/op
Iteration  18: 632.422 ns/op
Iteration  19: 632.575 ns/op
Iteration  20: 634.394 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1042.140 ns/op
# Warmup Iteration   2: 702.209 ns/op
# Warmup Iteration   3: 629.459 ns/op
# Warmup Iteration   4: 631.471 ns/op
# Warmup Iteration   5: 635.011 ns/op
Iteration   1: 641.336 ns/op
Iteration   2: 625.797 ns/op
Iteration   3: 623.787 ns/op
Iteration   4: 623.669 ns/op
Iteration   5: 626.908 ns/op
Iteration   6: 624.363 ns/op
Iteration   7: 623.925 ns/op
Iteration   8: 624.300 ns/op
Iteration   9: 623.512 ns/op
Iteration  10: 622.344 ns/op
Iteration  11: 622.535 ns/op
Iteration  12: 622.873 ns/op
Iteration  13: 629.017 ns/op
Iteration  14: 622.790 ns/op
Iteration  15: 622.472 ns/op
Iteration  16: 623.111 ns/op
Iteration  17: 622.924 ns/op
Iteration  18: 624.579 ns/op
Iteration  19: 622.861 ns/op
Iteration  20: 622.905 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1043.224 ns/op
# Warmup Iteration   2: 705.739 ns/op
# Warmup Iteration   3: 632.457 ns/op
# Warmup Iteration   4: 634.312 ns/op
# Warmup Iteration   5: 638.220 ns/op
Iteration   1: 644.430 ns/op
Iteration   2: 627.617 ns/op
Iteration   3: 626.716 ns/op
Iteration   4: 626.913 ns/op
Iteration   5: 630.137 ns/op
Iteration   6: 627.394 ns/op
Iteration   7: 627.533 ns/op
Iteration   8: 627.646 ns/op
Iteration   9: 625.706 ns/op
Iteration  10: 626.878 ns/op
Iteration  11: 625.934 ns/op
Iteration  12: 625.524 ns/op
Iteration  13: 625.480 ns/op
Iteration  14: 626.461 ns/op
Iteration  15: 630.721 ns/op
Iteration  16: 626.010 ns/op
Iteration  17: 625.434 ns/op
Iteration  18: 627.221 ns/op
Iteration  19: 625.740 ns/op
Iteration  20: 625.707 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1040.214 ns/op
# Warmup Iteration   2: 699.207 ns/op
# Warmup Iteration   3: 628.601 ns/op
# Warmup Iteration   4: 631.171 ns/op
# Warmup Iteration   5: 637.698 ns/op
Iteration   1: 638.377 ns/op
Iteration   2: 624.047 ns/op
Iteration   3: 623.540 ns/op
Iteration   4: 623.949 ns/op
Iteration   5: 626.338 ns/op
Iteration   6: 623.103 ns/op
Iteration   7: 623.339 ns/op
Iteration   8: 623.762 ns/op
Iteration   9: 622.391 ns/op
Iteration  10: 621.450 ns/op
Iteration  11: 621.410 ns/op
Iteration  12: 626.265 ns/op
Iteration  13: 623.548 ns/op
Iteration  14: 621.351 ns/op
Iteration  15: 621.259 ns/op
Iteration  16: 621.018 ns/op
Iteration  17: 623.011 ns/op
Iteration  18: 621.826 ns/op
Iteration  19: 621.438 ns/op
Iteration  20: 621.627 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1048.467 ns/op
# Warmup Iteration   2: 710.334 ns/op
# Warmup Iteration   3: 634.806 ns/op
# Warmup Iteration   4: 637.123 ns/op
# Warmup Iteration   5: 640.360 ns/op
Iteration   1: 646.863 ns/op
Iteration   2: 629.007 ns/op
Iteration   3: 628.938 ns/op
Iteration   4: 629.288 ns/op
Iteration   5: 632.316 ns/op
Iteration   6: 629.011 ns/op
Iteration   7: 629.505 ns/op
Iteration   8: 629.520 ns/op
Iteration   9: 627.245 ns/op
Iteration  10: 628.444 ns/op
Iteration  11: 627.455 ns/op
Iteration  12: 627.081 ns/op
Iteration  13: 627.574 ns/op
Iteration  14: 630.145 ns/op
Iteration  15: 629.458 ns/op
Iteration  16: 629.196 ns/op
Iteration  17: 629.245 ns/op
Iteration  18: 628.309 ns/op
Iteration  19: 629.592 ns/op
Iteration  20: 628.448 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  628.360 ±(99.9%) 2.041 ns/op [Average]
  (min, avg, max) = (621.018, 628.360, 654.214), stdev = 6.017
  CI (99.9%): [626.319, 630.400] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 			
 	
  	  	 
 

		 

		
 , 
		

   
		
 		 


			 	

    	


 
 
 

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1129.096 ns/op
# Warmup Iteration   2: 758.883 ns/op
# Warmup Iteration   3: 687.687 ns/op
# Warmup Iteration   4: 683.920 ns/op
# Warmup Iteration   5: 687.407 ns/op
Iteration   1: 691.665 ns/op
Iteration   2: 684.659 ns/op
Iteration   3: 676.368 ns/op
Iteration   4: 676.201 ns/op
Iteration   5: 676.194 ns/op
Iteration   6: 676.365 ns/op
Iteration   7: 676.338 ns/op
Iteration   8: 678.368 ns/op
Iteration   9: 674.317 ns/op
Iteration  10: 675.317 ns/op
Iteration  11: 676.371 ns/op
Iteration  12: 675.357 ns/op
Iteration  13: 674.180 ns/op
Iteration  14: 676.095 ns/op
Iteration  15: 674.476 ns/op
Iteration  16: 674.878 ns/op
Iteration  17: 675.451 ns/op
Iteration  18: 675.454 ns/op
Iteration  19: 674.452 ns/op
Iteration  20: 677.056 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1114.959 ns/op
# Warmup Iteration   2: 753.590 ns/op
# Warmup Iteration   3: 679.931 ns/op
# Warmup Iteration   4: 674.032 ns/op
# Warmup Iteration   5: 676.511 ns/op
Iteration   1: 680.629 ns/op
Iteration   2: 669.113 ns/op
Iteration   3: 664.996 ns/op
Iteration   4: 664.821 ns/op
Iteration   5: 664.512 ns/op
Iteration   6: 666.139 ns/op
Iteration   7: 667.777 ns/op
Iteration   8: 668.666 ns/op
Iteration   9: 664.713 ns/op
Iteration  10: 663.210 ns/op
Iteration  11: 663.308 ns/op
Iteration  12: 663.404 ns/op
Iteration  13: 664.989 ns/op
Iteration  14: 663.713 ns/op
Iteration  15: 663.944 ns/op
Iteration  16: 668.124 ns/op
Iteration  17: 663.819 ns/op
Iteration  18: 667.933 ns/op
Iteration  19: 663.554 ns/op
Iteration  20: 664.526 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1069.799 ns/op
# Warmup Iteration   2: 750.025 ns/op
# Warmup Iteration   3: 673.317 ns/op
# Warmup Iteration   4: 666.308 ns/op
# Warmup Iteration   5: 665.562 ns/op
Iteration   1: 670.590 ns/op
Iteration   2: 660.509 ns/op
Iteration   3: 653.310 ns/op
Iteration   4: 653.479 ns/op
Iteration   5: 654.094 ns/op
Iteration   6: 653.480 ns/op
Iteration   7: 663.982 ns/op
Iteration   8: 654.715 ns/op
Iteration   9: 652.958 ns/op
Iteration  10: 651.604 ns/op
Iteration  11: 655.956 ns/op
Iteration  12: 653.507 ns/op
Iteration  13: 654.481 ns/op
Iteration  14: 651.639 ns/op
Iteration  15: 651.410 ns/op
Iteration  16: 653.762 ns/op
Iteration  17: 656.897 ns/op
Iteration  18: 656.732 ns/op
Iteration  19: 653.213 ns/op
Iteration  20: 652.594 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1114.844 ns/op
# Warmup Iteration   2: 736.845 ns/op
# Warmup Iteration   3: 662.982 ns/op
# Warmup Iteration   4: 659.385 ns/op
# Warmup Iteration   5: 663.215 ns/op
Iteration   1: 672.956 ns/op
Iteration   2: 651.809 ns/op
Iteration   3: 652.047 ns/op
Iteration   4: 652.086 ns/op
Iteration   5: 652.962 ns/op
Iteration   6: 654.104 ns/op
Iteration   7: 651.356 ns/op
Iteration   8: 656.286 ns/op
Iteration   9: 650.381 ns/op
Iteration  10: 650.321 ns/op
Iteration  11: 652.143 ns/op
Iteration  12: 649.962 ns/op
Iteration  13: 650.191 ns/op
Iteration  14: 650.754 ns/op
Iteration  15: 652.086 ns/op
Iteration  16: 654.712 ns/op
Iteration  17: 650.859 ns/op
Iteration  18: 650.811 ns/op
Iteration  19: 650.660 ns/op
Iteration  20: 652.112 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1067.276 ns/op
# Warmup Iteration   2: 732.231 ns/op
# Warmup Iteration   3: 659.645 ns/op
# Warmup Iteration   4: 660.310 ns/op
# Warmup Iteration   5: 664.984 ns/op
Iteration   1: 671.322 ns/op
Iteration   2: 652.557 ns/op
Iteration   3: 654.729 ns/op
Iteration   4: 652.587 ns/op
Iteration   5: 653.937 ns/op
Iteration   6: 656.556 ns/op
Iteration   7: 650.881 ns/op
Iteration   8: 651.049 ns/op
Iteration   9: 649.071 ns/op
Iteration  10: 648.480 ns/op
Iteration  11: 650.182 ns/op
Iteration  12: 650.169 ns/op
Iteration  13: 648.737 ns/op
Iteration  14: 649.345 ns/op
Iteration  15: 651.992 ns/op
Iteration  16: 649.609 ns/op
Iteration  17: 651.717 ns/op
Iteration  18: 648.820 ns/op
Iteration  19: 648.972 ns/op
Iteration  20: 652.481 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  660.722 ±(99.9%) 3.589 ns/op [Average]
  (min, avg, max) = (648.480, 660.722, 691.665), stdev = 10.582
  CI (99.9%): [657.133, 664.310] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  			
 	
  	  	 
 

		 

		
 , 
		

   
		
 		 


			 	

    	


 
 
 

  avgt  100  628.360 ± 2.041  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  			
 	
  	  	 
 

		 

		
 , 
		

   
		
 		 


			 	

    	


 
 
 

  avgt  100  660.722 ± 3.589  ns/op

Benchmark result is saved to split_precompiled_regex_67_128_Match.csv
