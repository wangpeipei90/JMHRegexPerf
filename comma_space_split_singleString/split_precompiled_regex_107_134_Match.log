# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
 		 
 
  			  	 	
	


				
,		
 
	    	 		

	 
 
  

 	  

	 
	   )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1082.223 ns/op
# Warmup Iteration   2: 744.684 ns/op
# Warmup Iteration   3: 669.486 ns/op
# Warmup Iteration   4: 665.603 ns/op
# Warmup Iteration   5: 669.462 ns/op
Iteration   1: 672.647 ns/op
Iteration   2: 657.273 ns/op
Iteration   3: 661.446 ns/op
Iteration   4: 658.527 ns/op
Iteration   5: 658.006 ns/op
Iteration   6: 657.668 ns/op
Iteration   7: 657.889 ns/op
Iteration   8: 661.599 ns/op
Iteration   9: 655.798 ns/op
Iteration  10: 655.704 ns/op
Iteration  11: 655.704 ns/op
Iteration  12: 656.344 ns/op
Iteration  13: 655.901 ns/op
Iteration  14: 657.443 ns/op
Iteration  15: 656.115 ns/op
Iteration  16: 655.957 ns/op
Iteration  17: 657.046 ns/op
Iteration  18: 656.586 ns/op
Iteration  19: 656.130 ns/op
Iteration  20: 658.174 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1090.767 ns/op
# Warmup Iteration   2: 754.467 ns/op
# Warmup Iteration   3: 677.343 ns/op
# Warmup Iteration   4: 673.532 ns/op
# Warmup Iteration   5: 677.449 ns/op
Iteration   1: 682.096 ns/op
Iteration   2: 665.507 ns/op
Iteration   3: 668.382 ns/op
Iteration   4: 665.735 ns/op
Iteration   5: 664.770 ns/op
Iteration   6: 665.304 ns/op
Iteration   7: 665.077 ns/op
Iteration   8: 665.605 ns/op
Iteration   9: 671.327 ns/op
Iteration  10: 663.003 ns/op
Iteration  11: 663.477 ns/op
Iteration  12: 663.119 ns/op
Iteration  13: 663.390 ns/op
Iteration  14: 663.932 ns/op
Iteration  15: 668.453 ns/op
Iteration  16: 664.951 ns/op
Iteration  17: 665.067 ns/op
Iteration  18: 664.330 ns/op
Iteration  19: 670.506 ns/op
Iteration  20: 666.437 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1077.551 ns/op
# Warmup Iteration   2: 744.769 ns/op
# Warmup Iteration   3: 670.405 ns/op
# Warmup Iteration   4: 666.873 ns/op
# Warmup Iteration   5: 670.522 ns/op
Iteration   1: 674.231 ns/op
Iteration   2: 659.542 ns/op
Iteration   3: 662.034 ns/op
Iteration   4: 659.181 ns/op
Iteration   5: 659.043 ns/op
Iteration   6: 659.023 ns/op
Iteration   7: 658.384 ns/op
Iteration   8: 662.681 ns/op
Iteration   9: 656.984 ns/op
Iteration  10: 661.916 ns/op
Iteration  11: 658.832 ns/op
Iteration  12: 657.057 ns/op
Iteration  13: 657.364 ns/op
Iteration  14: 658.765 ns/op
Iteration  15: 657.086 ns/op
Iteration  16: 658.415 ns/op
Iteration  17: 657.839 ns/op
Iteration  18: 657.528 ns/op
Iteration  19: 657.693 ns/op
Iteration  20: 659.016 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1080.882 ns/op
# Warmup Iteration   2: 745.208 ns/op
# Warmup Iteration   3: 673.023 ns/op
# Warmup Iteration   4: 669.850 ns/op
# Warmup Iteration   5: 672.530 ns/op
Iteration   1: 676.798 ns/op
Iteration   2: 661.630 ns/op
Iteration   3: 667.141 ns/op
Iteration   4: 663.459 ns/op
Iteration   5: 664.699 ns/op
Iteration   6: 661.483 ns/op
Iteration   7: 661.305 ns/op
Iteration   8: 661.396 ns/op
Iteration   9: 665.955 ns/op
Iteration  10: 658.887 ns/op
Iteration  11: 659.070 ns/op
Iteration  12: 658.926 ns/op
Iteration  13: 659.181 ns/op
Iteration  14: 658.911 ns/op
Iteration  15: 659.965 ns/op
Iteration  16: 658.719 ns/op
Iteration  17: 659.388 ns/op
Iteration  18: 659.405 ns/op
Iteration  19: 659.206 ns/op
Iteration  20: 661.054 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1057.897 ns/op
# Warmup Iteration   2: 716.978 ns/op
# Warmup Iteration   3: 638.281 ns/op
# Warmup Iteration   4: 640.795 ns/op
# Warmup Iteration   5: 644.149 ns/op
Iteration   1: 653.289 ns/op
Iteration   2: 631.928 ns/op
Iteration   3: 636.112 ns/op
Iteration   4: 633.419 ns/op
Iteration   5: 632.646 ns/op
Iteration   6: 635.949 ns/op
Iteration   7: 633.289 ns/op
Iteration   8: 633.963 ns/op
Iteration   9: 631.895 ns/op
Iteration  10: 633.621 ns/op
Iteration  11: 632.202 ns/op
Iteration  12: 631.938 ns/op
Iteration  13: 634.602 ns/op
Iteration  14: 632.330 ns/op
Iteration  15: 633.643 ns/op
Iteration  16: 631.475 ns/op
Iteration  17: 631.135 ns/op
Iteration  18: 632.016 ns/op
Iteration  19: 635.715 ns/op
Iteration  20: 633.770 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  656.066 ±(99.9%) 4.090 ns/op [Average]
  (min, avg, max) = (631.135, 656.066, 682.096), stdev = 12.059
  CI (99.9%): [651.976, 660.155] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
 		 
 
  			  	 	
	


				
,		
 
	    	 		

	 
 
  

 	  

	 
	   )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1140.670 ns/op
# Warmup Iteration   2: 788.024 ns/op
# Warmup Iteration   3: 702.860 ns/op
# Warmup Iteration   4: 698.927 ns/op
# Warmup Iteration   5: 701.989 ns/op
Iteration   1: 706.684 ns/op
Iteration   2: 690.080 ns/op
Iteration   3: 689.773 ns/op
Iteration   4: 692.640 ns/op
Iteration   5: 689.610 ns/op
Iteration   6: 689.784 ns/op
Iteration   7: 689.592 ns/op
Iteration   8: 689.643 ns/op
Iteration   9: 689.364 ns/op
Iteration  10: 687.934 ns/op
Iteration  11: 688.912 ns/op
Iteration  12: 687.698 ns/op
Iteration  13: 687.715 ns/op
Iteration  14: 687.605 ns/op
Iteration  15: 687.407 ns/op
Iteration  16: 693.133 ns/op
Iteration  17: 689.500 ns/op
Iteration  18: 687.820 ns/op
Iteration  19: 687.927 ns/op
Iteration  20: 688.519 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1115.723 ns/op
# Warmup Iteration   2: 777.435 ns/op
# Warmup Iteration   3: 698.118 ns/op
# Warmup Iteration   4: 693.887 ns/op
# Warmup Iteration   5: 697.771 ns/op
Iteration   1: 702.248 ns/op
Iteration   2: 686.026 ns/op
Iteration   3: 688.949 ns/op
Iteration   4: 685.830 ns/op
Iteration   5: 685.213 ns/op
Iteration   6: 685.985 ns/op
Iteration   7: 686.455 ns/op
Iteration   8: 685.635 ns/op
Iteration   9: 686.178 ns/op
Iteration  10: 685.336 ns/op
Iteration  11: 685.283 ns/op
Iteration  12: 685.864 ns/op
Iteration  13: 693.164 ns/op
Iteration  14: 684.984 ns/op
Iteration  15: 685.297 ns/op
Iteration  16: 685.180 ns/op
Iteration  17: 687.503 ns/op
Iteration  18: 685.526 ns/op
Iteration  19: 685.513 ns/op
Iteration  20: 685.833 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1115.970 ns/op
# Warmup Iteration   2: 746.694 ns/op
# Warmup Iteration   3: 672.198 ns/op
# Warmup Iteration   4: 672.119 ns/op
# Warmup Iteration   5: 671.732 ns/op
Iteration   1: 676.686 ns/op
Iteration   2: 664.301 ns/op
Iteration   3: 660.346 ns/op
Iteration   4: 660.090 ns/op
Iteration   5: 660.464 ns/op
Iteration   6: 660.656 ns/op
Iteration   7: 663.409 ns/op
Iteration   8: 660.578 ns/op
Iteration   9: 657.716 ns/op
Iteration  10: 657.975 ns/op
Iteration  11: 657.431 ns/op
Iteration  12: 659.499 ns/op
Iteration  13: 658.139 ns/op
Iteration  14: 658.683 ns/op
Iteration  15: 658.731 ns/op
Iteration  16: 658.655 ns/op
Iteration  17: 691.512 ns/op
Iteration  18: 669.487 ns/op
Iteration  19: 658.658 ns/op
Iteration  20: 659.587 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1117.379 ns/op
# Warmup Iteration   2: 776.719 ns/op
# Warmup Iteration   3: 699.960 ns/op
# Warmup Iteration   4: 696.278 ns/op
# Warmup Iteration   5: 700.350 ns/op
Iteration   1: 704.031 ns/op
Iteration   2: 687.797 ns/op
Iteration   3: 687.502 ns/op
Iteration   4: 690.830 ns/op
Iteration   5: 687.937 ns/op
Iteration   6: 688.388 ns/op
Iteration   7: 688.765 ns/op
Iteration   8: 689.956 ns/op
Iteration   9: 694.209 ns/op
Iteration  10: 689.298 ns/op
Iteration  11: 686.814 ns/op
Iteration  12: 687.288 ns/op
Iteration  13: 687.598 ns/op
Iteration  14: 688.335 ns/op
Iteration  15: 687.750 ns/op
Iteration  16: 687.780 ns/op
Iteration  17: 688.515 ns/op
Iteration  18: 688.354 ns/op
Iteration  19: 686.994 ns/op
Iteration  20: 687.375 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1112.956 ns/op
# Warmup Iteration   2: 743.470 ns/op
# Warmup Iteration   3: 672.065 ns/op
# Warmup Iteration   4: 664.666 ns/op
# Warmup Iteration   5: 668.469 ns/op
Iteration   1: 672.311 ns/op
Iteration   2: 660.443 ns/op
Iteration   3: 656.094 ns/op
Iteration   4: 656.639 ns/op
Iteration   5: 658.942 ns/op
Iteration   6: 657.373 ns/op
Iteration   7: 661.178 ns/op
Iteration   8: 657.201 ns/op
Iteration   9: 655.546 ns/op
Iteration  10: 655.016 ns/op
Iteration  11: 655.003 ns/op
Iteration  12: 658.017 ns/op
Iteration  13: 654.909 ns/op
Iteration  14: 655.916 ns/op
Iteration  15: 655.563 ns/op
Iteration  16: 657.197 ns/op
Iteration  17: 655.640 ns/op
Iteration  18: 655.700 ns/op
Iteration  19: 655.563 ns/op
Iteration  20: 655.808 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  677.315 ±(99.9%) 5.134 ns/op [Average]
  (min, avg, max) = (654.909, 677.315, 706.684), stdev = 15.138
  CI (99.9%): [672.181, 682.449] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 
 		 
 
  			  	 	
	


				
,		
 
	    	 		

	 
 
  

 	  

	 
	     avgt  100  656.066 ± 4.090  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 
 		 
 
  			  	 	
	


				
,		
 
	    	 		

	 
 
  

 	  

	 
	     avgt  100  677.315 ± 5.134  ns/op

Benchmark result is saved to split_precompiled_regex_107_134_Match.csv
