# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 
		  


  			

 	  

 
	 	  			 

,  	
 
	 
 	       	  
 	
	
 

 
 	  	 
	
		 
 
		 


 	
   	
 

  			)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1341.851 ns/op
# Warmup Iteration   2: 1058.909 ns/op
# Warmup Iteration   3: 874.493 ns/op
# Warmup Iteration   4: 877.925 ns/op
# Warmup Iteration   5: 880.922 ns/op
Iteration   1: 888.500 ns/op
Iteration   2: 890.992 ns/op
Iteration   3: 872.356 ns/op
Iteration   4: 865.402 ns/op
Iteration   5: 873.814 ns/op
Iteration   6: 872.177 ns/op
Iteration   7: 870.089 ns/op
Iteration   8: 873.392 ns/op
Iteration   9: 870.233 ns/op
Iteration  10: 875.198 ns/op
Iteration  11: 875.584 ns/op
Iteration  12: 870.362 ns/op
Iteration  13: 865.722 ns/op
Iteration  14: 870.709 ns/op
Iteration  15: 867.028 ns/op
Iteration  16: 867.154 ns/op
Iteration  17: 866.956 ns/op
Iteration  18: 866.900 ns/op
Iteration  19: 867.920 ns/op
Iteration  20: 867.848 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1265.528 ns/op
# Warmup Iteration   2: 956.277 ns/op
# Warmup Iteration   3: 805.225 ns/op
# Warmup Iteration   4: 807.320 ns/op
# Warmup Iteration   5: 810.269 ns/op
Iteration   1: 815.282 ns/op
Iteration   2: 819.683 ns/op
Iteration   3: 801.932 ns/op
Iteration   4: 800.637 ns/op
Iteration   5: 801.085 ns/op
Iteration   6: 800.365 ns/op
Iteration   7: 800.942 ns/op
Iteration   8: 801.724 ns/op
Iteration   9: 801.638 ns/op
Iteration  10: 804.322 ns/op
Iteration  11: 809.715 ns/op
Iteration  12: 798.975 ns/op
Iteration  13: 799.158 ns/op
Iteration  14: 798.523 ns/op
Iteration  15: 799.290 ns/op
Iteration  16: 799.599 ns/op
Iteration  17: 799.974 ns/op
Iteration  18: 800.788 ns/op
Iteration  19: 800.726 ns/op
Iteration  20: 800.453 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1268.016 ns/op
# Warmup Iteration   2: 948.682 ns/op
# Warmup Iteration   3: 804.307 ns/op
# Warmup Iteration   4: 808.591 ns/op
# Warmup Iteration   5: 810.387 ns/op
Iteration   1: 817.900 ns/op
Iteration   2: 819.642 ns/op
Iteration   3: 800.072 ns/op
Iteration   4: 800.316 ns/op
Iteration   5: 800.451 ns/op
Iteration   6: 800.129 ns/op
Iteration   7: 800.006 ns/op
Iteration   8: 802.756 ns/op
Iteration   9: 806.090 ns/op
Iteration  10: 812.047 ns/op
Iteration  11: 804.929 ns/op
Iteration  12: 803.923 ns/op
Iteration  13: 808.688 ns/op
Iteration  14: 803.638 ns/op
Iteration  15: 803.520 ns/op
Iteration  16: 800.207 ns/op
Iteration  17: 800.057 ns/op
Iteration  18: 800.049 ns/op
Iteration  19: 805.497 ns/op
Iteration  20: 797.608 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1254.590 ns/op
# Warmup Iteration   2: 936.592 ns/op
# Warmup Iteration   3: 791.488 ns/op
# Warmup Iteration   4: 793.417 ns/op
# Warmup Iteration   5: 796.262 ns/op
Iteration   1: 800.947 ns/op
Iteration   2: 806.410 ns/op
Iteration   3: 787.183 ns/op
Iteration   4: 786.661 ns/op
Iteration   5: 786.771 ns/op
Iteration   6: 786.856 ns/op
Iteration   7: 786.781 ns/op
Iteration   8: 787.273 ns/op
Iteration   9: 786.823 ns/op
Iteration  10: 786.858 ns/op
Iteration  11: 788.144 ns/op
Iteration  12: 792.816 ns/op
Iteration  13: 790.539 ns/op
Iteration  14: 786.347 ns/op
Iteration  15: 785.714 ns/op
Iteration  16: 785.896 ns/op
Iteration  17: 786.412 ns/op
Iteration  18: 788.941 ns/op
Iteration  19: 788.470 ns/op
Iteration  20: 788.116 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1236.839 ns/op
# Warmup Iteration   2: 931.396 ns/op
# Warmup Iteration   3: 791.524 ns/op
# Warmup Iteration   4: 793.363 ns/op
# Warmup Iteration   5: 796.011 ns/op
Iteration   1: 800.290 ns/op
Iteration   2: 807.426 ns/op
Iteration   3: 788.117 ns/op
Iteration   4: 788.368 ns/op
Iteration   5: 787.163 ns/op
Iteration   6: 787.466 ns/op
Iteration   7: 790.029 ns/op
Iteration   8: 788.123 ns/op
Iteration   9: 790.312 ns/op
Iteration  10: 790.295 ns/op
Iteration  11: 789.376 ns/op
Iteration  12: 784.821 ns/op
Iteration  13: 785.413 ns/op
Iteration  14: 787.158 ns/op
Iteration  15: 787.566 ns/op
Iteration  16: 785.814 ns/op
Iteration  17: 785.857 ns/op
Iteration  18: 786.314 ns/op
Iteration  19: 785.982 ns/op
Iteration  20: 784.886 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  811.454 Â±(99.9%) 10.718 ns/op [Average]
  (min, avg, max) = (784.821, 811.454, 890.992), stdev = 31.603
  CI (99.9%): [800.736, 822.172] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 
		  


  			

 	  

 
	 	  			 

,  	
 
	 
 	       	  
 	
	
 

 
 	  	 
	
		 
 
		 


 	
   	
 

  			)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1250.000 ns/op
# Warmup Iteration   2: 945.005 ns/op
# Warmup Iteration   3: 809.755 ns/op
# Warmup Iteration   4: 816.529 ns/op
# Warmup Iteration   5: 819.907 ns/op
Iteration   1: 818.083 ns/op
Iteration   2: 823.258 ns/op
Iteration   3: 808.251 ns/op
Iteration   4: 807.595 ns/op
Iteration   5: 807.084 ns/op
Iteration   6: 805.964 ns/op
Iteration   7: 803.633 ns/op
Iteration   8: 803.990 ns/op
Iteration   9: 803.676 ns/op
Iteration  10: 803.749 ns/op
Iteration  11: 803.076 ns/op
Iteration  12: 800.358 ns/op
Iteration  13: 800.300 ns/op
Iteration  14: 799.930 ns/op
Iteration  15: 800.636 ns/op
Iteration  16: 801.627 ns/op
Iteration  17: 800.212 ns/op
Iteration  18: 800.656 ns/op
Iteration  19: 800.851 ns/op
Iteration  20: 801.342 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1263.246 ns/op
# Warmup Iteration   2: 976.466 ns/op
# Warmup Iteration   3: 832.179 ns/op
# Warmup Iteration   4: 834.504 ns/op
# Warmup Iteration   5: 838.178 ns/op
Iteration   1: 842.739 ns/op
Iteration   2: 847.762 ns/op
Iteration   3: 830.014 ns/op
Iteration   4: 828.892 ns/op
Iteration   5: 828.608 ns/op
Iteration   6: 828.261 ns/op
Iteration   7: 828.627 ns/op
Iteration   8: 829.141 ns/op
Iteration   9: 828.667 ns/op
Iteration  10: 828.791 ns/op
Iteration  11: 828.751 ns/op
Iteration  12: 827.329 ns/op
Iteration  13: 833.441 ns/op
Iteration  14: 826.933 ns/op
Iteration  15: 826.770 ns/op
Iteration  16: 825.018 ns/op
Iteration  17: 827.772 ns/op
Iteration  18: 827.163 ns/op
Iteration  19: 827.925 ns/op
Iteration  20: 828.673 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1267.016 ns/op
# Warmup Iteration   2: 976.071 ns/op
# Warmup Iteration   3: 819.248 ns/op
# Warmup Iteration   4: 820.746 ns/op
# Warmup Iteration   5: 824.410 ns/op
Iteration   1: 829.674 ns/op
Iteration   2: 834.501 ns/op
Iteration   3: 815.716 ns/op
Iteration   4: 815.627 ns/op
Iteration   5: 815.507 ns/op
Iteration   6: 815.734 ns/op
Iteration   7: 815.343 ns/op
Iteration   8: 820.303 ns/op
Iteration   9: 815.459 ns/op
Iteration  10: 815.612 ns/op
Iteration  11: 817.849 ns/op
Iteration  12: 825.441 ns/op
Iteration  13: 814.315 ns/op
Iteration  14: 815.384 ns/op
Iteration  15: 814.976 ns/op
Iteration  16: 815.074 ns/op
Iteration  17: 842.493 ns/op
Iteration  18: 838.747 ns/op
Iteration  19: 813.796 ns/op
Iteration  20: 814.618 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1255.319 ns/op
# Warmup Iteration   2: 948.376 ns/op
# Warmup Iteration   3: 809.215 ns/op
# Warmup Iteration   4: 811.508 ns/op
# Warmup Iteration   5: 814.224 ns/op
Iteration   1: 818.619 ns/op
Iteration   2: 822.998 ns/op
Iteration   3: 804.539 ns/op
Iteration   4: 804.497 ns/op
Iteration   5: 805.582 ns/op
Iteration   6: 809.435 ns/op
Iteration   7: 805.000 ns/op
Iteration   8: 805.681 ns/op
Iteration   9: 804.906 ns/op
Iteration  10: 806.077 ns/op
Iteration  11: 805.882 ns/op
Iteration  12: 807.801 ns/op
Iteration  13: 804.142 ns/op
Iteration  14: 802.656 ns/op
Iteration  15: 805.800 ns/op
Iteration  16: 805.273 ns/op
Iteration  17: 803.552 ns/op
Iteration  18: 804.084 ns/op
Iteration  19: 805.023 ns/op
Iteration  20: 805.323 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1241.042 ns/op
# Warmup Iteration   2: 929.977 ns/op
# Warmup Iteration   3: 790.807 ns/op
# Warmup Iteration   4: 794.187 ns/op
# Warmup Iteration   5: 796.562 ns/op
Iteration   1: 801.232 ns/op
Iteration   2: 805.540 ns/op
Iteration   3: 787.522 ns/op
Iteration   4: 787.796 ns/op
Iteration   5: 787.664 ns/op
Iteration   6: 787.392 ns/op
Iteration   7: 787.687 ns/op
Iteration   8: 787.574 ns/op
Iteration   9: 787.776 ns/op
Iteration  10: 787.487 ns/op
Iteration  11: 788.769 ns/op
Iteration  12: 789.387 ns/op
Iteration  13: 784.549 ns/op
Iteration  14: 785.017 ns/op
Iteration  15: 784.934 ns/op
Iteration  16: 786.414 ns/op
Iteration  17: 791.419 ns/op
Iteration  18: 789.918 ns/op
Iteration  19: 785.840 ns/op
Iteration  20: 786.379 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  810.189 Â±(99.9%) 5.228 ns/op [Average]
  (min, avg, max) = (784.549, 810.189, 847.762), stdev = 15.415
  CI (99.9%): [804.961, 815.417] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                      (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

 
		  


  			

 	  

 
	 	  			 

,  	
 
	 
 	       	  
 	
	
 

 
 	  	 
	
		 
 
		 


 	
   	
 

  			  avgt  100  811.454 Â± 10.718  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

 
		  


  			

 	  

 
	 	  			 

,  	
 
	 
 	       	  
 	
	
 

 
 	  	 
	
		 
 
		 


 	
   	
 

  			  avgt  100  810.189 Â±  5.228  ns/op

Benchmark result is saved to split_precompiled_regex_148_221_Match.csv
