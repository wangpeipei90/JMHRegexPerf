# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	  	 	
	 	 

  

	 		
 
	 
 	 

, 
   	 
 	

		
  	
		
  


   
 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1070.493 ns/op
# Warmup Iteration   2: 730.193 ns/op
# Warmup Iteration   3: 659.027 ns/op
# Warmup Iteration   4: 655.167 ns/op
# Warmup Iteration   5: 658.716 ns/op
Iteration   1: 662.360 ns/op
Iteration   2: 650.324 ns/op
Iteration   3: 647.417 ns/op
Iteration   4: 647.493 ns/op
Iteration   5: 647.243 ns/op
Iteration   6: 647.142 ns/op
Iteration   7: 649.829 ns/op
Iteration   8: 646.886 ns/op
Iteration   9: 644.811 ns/op
Iteration  10: 644.628 ns/op
Iteration  11: 644.634 ns/op
Iteration  12: 646.260 ns/op
Iteration  13: 644.579 ns/op
Iteration  14: 645.101 ns/op
Iteration  15: 645.262 ns/op
Iteration  16: 645.066 ns/op
Iteration  17: 647.157 ns/op
Iteration  18: 645.017 ns/op
Iteration  19: 644.960 ns/op
Iteration  20: 645.135 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1135.437 ns/op
# Warmup Iteration   2: 743.127 ns/op
# Warmup Iteration   3: 661.030 ns/op
# Warmup Iteration   4: 657.380 ns/op
# Warmup Iteration   5: 662.224 ns/op
Iteration   1: 664.704 ns/op
Iteration   2: 653.401 ns/op
Iteration   3: 648.568 ns/op
Iteration   4: 649.424 ns/op
Iteration   5: 648.822 ns/op
Iteration   6: 649.340 ns/op
Iteration   7: 652.382 ns/op
Iteration   8: 649.580 ns/op
Iteration   9: 648.208 ns/op
Iteration  10: 648.215 ns/op
Iteration  11: 648.413 ns/op
Iteration  12: 648.274 ns/op
Iteration  13: 649.472 ns/op
Iteration  14: 648.205 ns/op
Iteration  15: 648.080 ns/op
Iteration  16: 647.944 ns/op
Iteration  17: 648.243 ns/op
Iteration  18: 649.416 ns/op
Iteration  19: 654.628 ns/op
Iteration  20: 649.373 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1112.411 ns/op
# Warmup Iteration   2: 736.756 ns/op
# Warmup Iteration   3: 661.721 ns/op
# Warmup Iteration   4: 659.132 ns/op
# Warmup Iteration   5: 662.413 ns/op
Iteration   1: 666.113 ns/op
Iteration   2: 654.643 ns/op
Iteration   3: 651.300 ns/op
Iteration   4: 651.307 ns/op
Iteration   5: 651.421 ns/op
Iteration   6: 650.519 ns/op
Iteration   7: 653.028 ns/op
Iteration   8: 650.253 ns/op
Iteration   9: 648.271 ns/op
Iteration  10: 647.956 ns/op
Iteration  11: 648.083 ns/op
Iteration  12: 647.789 ns/op
Iteration  13: 648.927 ns/op
Iteration  14: 647.813 ns/op
Iteration  15: 648.135 ns/op
Iteration  16: 648.477 ns/op
Iteration  17: 648.559 ns/op
Iteration  18: 650.197 ns/op
Iteration  19: 653.330 ns/op
Iteration  20: 649.281 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1062.495 ns/op
# Warmup Iteration   2: 724.385 ns/op
# Warmup Iteration   3: 658.936 ns/op
# Warmup Iteration   4: 656.055 ns/op
# Warmup Iteration   5: 659.011 ns/op
Iteration   1: 662.304 ns/op
Iteration   2: 650.729 ns/op
Iteration   3: 647.302 ns/op
Iteration   4: 647.430 ns/op
Iteration   5: 648.933 ns/op
Iteration   6: 653.759 ns/op
Iteration   7: 650.875 ns/op
Iteration   8: 647.554 ns/op
Iteration   9: 645.651 ns/op
Iteration  10: 645.097 ns/op
Iteration  11: 645.234 ns/op
Iteration  12: 646.262 ns/op
Iteration  13: 645.259 ns/op
Iteration  14: 645.095 ns/op
Iteration  15: 645.131 ns/op
Iteration  16: 645.731 ns/op
Iteration  17: 647.986 ns/op
Iteration  18: 646.757 ns/op
Iteration  19: 646.792 ns/op
Iteration  20: 646.821 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1062.986 ns/op
# Warmup Iteration   2: 717.435 ns/op
# Warmup Iteration   3: 646.929 ns/op
# Warmup Iteration   4: 645.369 ns/op
# Warmup Iteration   5: 649.797 ns/op
Iteration   1: 656.346 ns/op
Iteration   2: 638.989 ns/op
Iteration   3: 638.250 ns/op
Iteration   4: 638.658 ns/op
Iteration   5: 638.575 ns/op
Iteration   6: 641.090 ns/op
Iteration   7: 638.458 ns/op
Iteration   8: 640.218 ns/op
Iteration   9: 636.354 ns/op
Iteration  10: 636.018 ns/op
Iteration  11: 637.544 ns/op
Iteration  12: 636.119 ns/op
Iteration  13: 636.022 ns/op
Iteration  14: 635.929 ns/op
Iteration  15: 636.136 ns/op
Iteration  16: 645.508 ns/op
Iteration  17: 636.999 ns/op
Iteration  18: 638.586 ns/op
Iteration  19: 637.677 ns/op
Iteration  20: 639.981 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  647.056 ±(99.9%) 1.980 ns/op [Average]
  (min, avg, max) = (635.929, 647.056, 666.113), stdev = 5.838
  CI (99.9%): [645.076, 649.035] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	  	 	
	 	 

  

	 		
 
	 
 	 

, 
   	 
 	

		
  	
		
  


   
 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1116.897 ns/op
# Warmup Iteration   2: 753.766 ns/op
# Warmup Iteration   3: 681.651 ns/op
# Warmup Iteration   4: 678.516 ns/op
# Warmup Iteration   5: 681.170 ns/op
Iteration   1: 684.984 ns/op
Iteration   2: 678.417 ns/op
Iteration   3: 670.174 ns/op
Iteration   4: 670.334 ns/op
Iteration   5: 670.132 ns/op
Iteration   6: 670.066 ns/op
Iteration   7: 673.007 ns/op
Iteration   8: 669.397 ns/op
Iteration   9: 668.254 ns/op
Iteration  10: 668.760 ns/op
Iteration  11: 668.309 ns/op
Iteration  12: 668.185 ns/op
Iteration  13: 669.447 ns/op
Iteration  14: 673.134 ns/op
Iteration  15: 669.194 ns/op
Iteration  16: 674.425 ns/op
Iteration  17: 668.781 ns/op
Iteration  18: 667.931 ns/op
Iteration  19: 670.685 ns/op
Iteration  20: 668.866 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1113.167 ns/op
# Warmup Iteration   2: 752.009 ns/op
# Warmup Iteration   3: 677.409 ns/op
# Warmup Iteration   4: 673.971 ns/op
# Warmup Iteration   5: 678.186 ns/op
Iteration   1: 682.078 ns/op
Iteration   2: 672.061 ns/op
Iteration   3: 666.159 ns/op
Iteration   4: 666.744 ns/op
Iteration   5: 666.080 ns/op
Iteration   6: 666.530 ns/op
Iteration   7: 673.185 ns/op
Iteration   8: 666.447 ns/op
Iteration   9: 664.509 ns/op
Iteration  10: 664.427 ns/op
Iteration  11: 664.871 ns/op
Iteration  12: 664.585 ns/op
Iteration  13: 665.731 ns/op
Iteration  14: 663.328 ns/op
Iteration  15: 664.281 ns/op
Iteration  16: 664.199 ns/op
Iteration  17: 665.293 ns/op
Iteration  18: 665.750 ns/op
Iteration  19: 664.459 ns/op
Iteration  20: 663.984 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1094.228 ns/op
# Warmup Iteration   2: 751.765 ns/op
# Warmup Iteration   3: 682.868 ns/op
# Warmup Iteration   4: 679.864 ns/op
# Warmup Iteration   5: 682.841 ns/op
Iteration   1: 687.314 ns/op
Iteration   2: 674.474 ns/op
Iteration   3: 670.965 ns/op
Iteration   4: 671.102 ns/op
Iteration   5: 670.997 ns/op
Iteration   6: 670.345 ns/op
Iteration   7: 676.258 ns/op
Iteration   8: 674.789 ns/op
Iteration   9: 668.778 ns/op
Iteration  10: 668.770 ns/op
Iteration  11: 668.698 ns/op
Iteration  12: 668.405 ns/op
Iteration  13: 669.947 ns/op
Iteration  14: 669.446 ns/op
Iteration  15: 669.300 ns/op
Iteration  16: 669.124 ns/op
Iteration  17: 673.878 ns/op
Iteration  18: 668.721 ns/op
Iteration  19: 670.566 ns/op
Iteration  20: 668.579 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1092.039 ns/op
# Warmup Iteration   2: 751.851 ns/op
# Warmup Iteration   3: 681.830 ns/op
# Warmup Iteration   4: 681.389 ns/op
# Warmup Iteration   5: 680.852 ns/op
Iteration   1: 684.636 ns/op
Iteration   2: 672.633 ns/op
Iteration   3: 669.218 ns/op
Iteration   4: 669.516 ns/op
Iteration   5: 669.391 ns/op
Iteration   6: 669.466 ns/op
Iteration   7: 669.288 ns/op
Iteration   8: 672.185 ns/op
Iteration   9: 667.293 ns/op
Iteration  10: 667.354 ns/op
Iteration  11: 667.396 ns/op
Iteration  12: 667.118 ns/op
Iteration  13: 668.348 ns/op
Iteration  14: 667.865 ns/op
Iteration  15: 668.962 ns/op
Iteration  16: 668.065 ns/op
Iteration  17: 668.696 ns/op
Iteration  18: 668.207 ns/op
Iteration  19: 669.922 ns/op
Iteration  20: 668.168 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1122.844 ns/op
# Warmup Iteration   2: 758.485 ns/op
# Warmup Iteration   3: 685.258 ns/op
# Warmup Iteration   4: 678.098 ns/op
# Warmup Iteration   5: 681.423 ns/op
Iteration   1: 685.218 ns/op
Iteration   2: 674.127 ns/op
Iteration   3: 669.905 ns/op
Iteration   4: 671.916 ns/op
Iteration   5: 669.873 ns/op
Iteration   6: 669.983 ns/op
Iteration   7: 669.811 ns/op
Iteration   8: 672.893 ns/op
Iteration   9: 668.425 ns/op
Iteration  10: 667.997 ns/op
Iteration  11: 669.831 ns/op
Iteration  12: 668.056 ns/op
Iteration  13: 674.744 ns/op
Iteration  14: 668.841 ns/op
Iteration  15: 669.953 ns/op
Iteration  16: 668.438 ns/op
Iteration  17: 668.596 ns/op
Iteration  18: 668.847 ns/op
Iteration  19: 669.756 ns/op
Iteration  20: 668.271 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  669.968 ±(99.9%) 1.496 ns/op [Average]
  (min, avg, max) = (663.328, 669.968, 687.314), stdev = 4.411
  CI (99.9%): [668.472, 671.465] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	  	 	
	 	 

  

	 		
 
	 
 	 

, 
   	 
 	

		
  	
		
  


   
 	  avgt  100  647.056 ± 1.980  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	  	 	
	 	 

  

	 		
 
	 
 	 

, 
   	 
 	

		
  	
		
  


   
 	  avgt  100  669.968 ± 1.496  ns/op

Benchmark result is saved to split_precompiled_regex_97_136_Match.csv
