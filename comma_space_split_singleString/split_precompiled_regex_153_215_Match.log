# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
					

	

			 

 
 
		   


		 
	 	  		 
	 			

  
	 
,   	 
   

	   
   	 		
	

		 

 


	  	
						 

	    

  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1267.319 ns/op
# Warmup Iteration   2: 953.870 ns/op
# Warmup Iteration   3: 792.615 ns/op
# Warmup Iteration   4: 795.334 ns/op
# Warmup Iteration   5: 798.730 ns/op
Iteration   1: 802.995 ns/op
Iteration   2: 807.737 ns/op
Iteration   3: 789.170 ns/op
Iteration   4: 788.773 ns/op
Iteration   5: 788.798 ns/op
Iteration   6: 788.521 ns/op
Iteration   7: 789.080 ns/op
Iteration   8: 789.423 ns/op
Iteration   9: 790.105 ns/op
Iteration  10: 790.025 ns/op
Iteration  11: 798.518 ns/op
Iteration  12: 786.153 ns/op
Iteration  13: 786.283 ns/op
Iteration  14: 786.380 ns/op
Iteration  15: 787.214 ns/op
Iteration  16: 788.234 ns/op
Iteration  17: 788.157 ns/op
Iteration  18: 788.347 ns/op
Iteration  19: 788.309 ns/op
Iteration  20: 788.155 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1294.580 ns/op
# Warmup Iteration   2: 983.217 ns/op
# Warmup Iteration   3: 824.910 ns/op
# Warmup Iteration   4: 826.481 ns/op
# Warmup Iteration   5: 830.847 ns/op
Iteration   1: 834.879 ns/op
Iteration   2: 838.188 ns/op
Iteration   3: 821.044 ns/op
Iteration   4: 821.378 ns/op
Iteration   5: 821.106 ns/op
Iteration   6: 820.682 ns/op
Iteration   7: 821.450 ns/op
Iteration   8: 821.709 ns/op
Iteration   9: 821.370 ns/op
Iteration  10: 821.996 ns/op
Iteration  11: 817.465 ns/op
Iteration  12: 821.479 ns/op
Iteration  13: 819.302 ns/op
Iteration  14: 821.253 ns/op
Iteration  15: 819.691 ns/op
Iteration  16: 819.874 ns/op
Iteration  17: 820.764 ns/op
Iteration  18: 821.249 ns/op
Iteration  19: 820.886 ns/op
Iteration  20: 821.662 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1331.608 ns/op
# Warmup Iteration   2: 1041.020 ns/op
# Warmup Iteration   3: 864.934 ns/op
# Warmup Iteration   4: 867.019 ns/op
# Warmup Iteration   5: 870.962 ns/op
Iteration   1: 875.391 ns/op
Iteration   2: 881.132 ns/op
Iteration   3: 863.080 ns/op
Iteration   4: 864.480 ns/op
Iteration   5: 857.537 ns/op
Iteration   6: 860.038 ns/op
Iteration   7: 861.429 ns/op
Iteration   8: 861.757 ns/op
Iteration   9: 861.463 ns/op
Iteration  10: 861.092 ns/op
Iteration  11: 861.908 ns/op
Iteration  12: 862.896 ns/op
Iteration  13: 859.887 ns/op
Iteration  14: 857.713 ns/op
Iteration  15: 859.689 ns/op
Iteration  16: 859.521 ns/op
Iteration  17: 860.308 ns/op
Iteration  18: 860.155 ns/op
Iteration  19: 861.369 ns/op
Iteration  20: 860.601 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1338.604 ns/op
# Warmup Iteration   2: 1066.031 ns/op
# Warmup Iteration   3: 885.518 ns/op
# Warmup Iteration   4: 887.949 ns/op
# Warmup Iteration   5: 892.166 ns/op
Iteration   1: 896.139 ns/op
Iteration   2: 901.671 ns/op
Iteration   3: 876.843 ns/op
Iteration   4: 879.771 ns/op
Iteration   5: 881.661 ns/op
Iteration   6: 880.501 ns/op
Iteration   7: 881.279 ns/op
Iteration   8: 881.092 ns/op
Iteration   9: 880.421 ns/op
Iteration  10: 881.253 ns/op
Iteration  11: 877.209 ns/op
Iteration  12: 882.250 ns/op
Iteration  13: 890.734 ns/op
Iteration  14: 879.024 ns/op
Iteration  15: 878.588 ns/op
Iteration  16: 879.125 ns/op
Iteration  17: 878.845 ns/op
Iteration  18: 879.249 ns/op
Iteration  19: 878.871 ns/op
Iteration  20: 876.293 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1322.091 ns/op
# Warmup Iteration   2: 1034.770 ns/op
# Warmup Iteration   3: 864.681 ns/op
# Warmup Iteration   4: 865.542 ns/op
# Warmup Iteration   5: 869.150 ns/op
Iteration   1: 873.414 ns/op
Iteration   2: 878.365 ns/op
Iteration   3: 859.168 ns/op
Iteration   4: 857.828 ns/op
Iteration   5: 853.773 ns/op
Iteration   6: 857.482 ns/op
Iteration   7: 858.700 ns/op
Iteration   8: 863.346 ns/op
Iteration   9: 859.850 ns/op
Iteration  10: 861.151 ns/op
Iteration  11: 865.061 ns/op
Iteration  12: 876.607 ns/op
Iteration  13: 865.333 ns/op
Iteration  14: 859.103 ns/op
Iteration  15: 855.254 ns/op
Iteration  16: 858.231 ns/op
Iteration  17: 857.952 ns/op
Iteration  18: 858.158 ns/op
Iteration  19: 866.535 ns/op
Iteration  20: 858.018 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  843.934 Â±(99.9%) 11.429 ns/op [Average]
  (min, avg, max) = (786.153, 843.934, 901.671), stdev = 33.698
  CI (99.9%): [832.505, 855.363] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
					

	

			 

 
 
		   


		 
	 	  		 
	 			

  
	 
,   	 
   

	   
   	 		
	

		 

 


	  	
						 

	    

  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1335.102 ns/op
# Warmup Iteration   2: 1064.887 ns/op
# Warmup Iteration   3: 892.689 ns/op
# Warmup Iteration   4: 890.671 ns/op
# Warmup Iteration   5: 891.754 ns/op
Iteration   1: 899.086 ns/op
Iteration   2: 900.547 ns/op
Iteration   3: 881.290 ns/op
Iteration   4: 876.080 ns/op
Iteration   5: 883.103 ns/op
Iteration   6: 880.869 ns/op
Iteration   7: 880.454 ns/op
Iteration   8: 884.763 ns/op
Iteration   9: 881.809 ns/op
Iteration  10: 881.765 ns/op
Iteration  11: 880.472 ns/op
Iteration  12: 884.263 ns/op
Iteration  13: 879.003 ns/op
Iteration  14: 876.404 ns/op
Iteration  15: 879.208 ns/op
Iteration  16: 881.235 ns/op
Iteration  17: 881.224 ns/op
Iteration  18: 879.995 ns/op
Iteration  19: 879.622 ns/op
Iteration  20: 880.013 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1273.594 ns/op
# Warmup Iteration   2: 1009.981 ns/op
# Warmup Iteration   3: 861.788 ns/op
# Warmup Iteration   4: 864.071 ns/op
# Warmup Iteration   5: 868.397 ns/op
Iteration   1: 868.564 ns/op
Iteration   2: 883.704 ns/op
Iteration   3: 853.976 ns/op
Iteration   4: 863.725 ns/op
Iteration   5: 854.546 ns/op
Iteration   6: 854.296 ns/op
Iteration   7: 855.959 ns/op
Iteration   8: 847.428 ns/op
Iteration   9: 872.529 ns/op
Iteration  10: 851.850 ns/op
Iteration  11: 851.906 ns/op
Iteration  12: 851.998 ns/op
Iteration  13: 852.058 ns/op
Iteration  14: 849.194 ns/op
Iteration  15: 849.521 ns/op
Iteration  16: 856.128 ns/op
Iteration  17: 852.313 ns/op
Iteration  18: 850.260 ns/op
Iteration  19: 850.498 ns/op
Iteration  20: 851.678 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1318.433 ns/op
# Warmup Iteration   2: 1066.470 ns/op
# Warmup Iteration   3: 894.027 ns/op
# Warmup Iteration   4: 895.498 ns/op
# Warmup Iteration   5: 899.361 ns/op
Iteration   1: 903.571 ns/op
Iteration   2: 908.455 ns/op
Iteration   3: 887.973 ns/op
Iteration   4: 883.981 ns/op
Iteration   5: 888.947 ns/op
Iteration   6: 889.566 ns/op
Iteration   7: 888.690 ns/op
Iteration   8: 888.913 ns/op
Iteration   9: 892.813 ns/op
Iteration  10: 890.476 ns/op
Iteration  11: 899.635 ns/op
Iteration  12: 906.634 ns/op
Iteration  13: 883.676 ns/op
Iteration  14: 886.982 ns/op
Iteration  15: 887.362 ns/op
Iteration  16: 889.331 ns/op
Iteration  17: 890.101 ns/op
Iteration  18: 889.068 ns/op
Iteration  19: 886.095 ns/op
Iteration  20: 886.271 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1320.556 ns/op
# Warmup Iteration   2: 1043.097 ns/op
# Warmup Iteration   3: 872.102 ns/op
# Warmup Iteration   4: 871.645 ns/op
# Warmup Iteration   5: 874.386 ns/op
Iteration   1: 878.813 ns/op
Iteration   2: 884.145 ns/op
Iteration   3: 865.480 ns/op
Iteration   4: 865.033 ns/op
Iteration   5: 865.021 ns/op
Iteration   6: 860.587 ns/op
Iteration   7: 864.757 ns/op
Iteration   8: 864.891 ns/op
Iteration   9: 865.956 ns/op
Iteration  10: 873.027 ns/op
Iteration  11: 865.128 ns/op
Iteration  12: 865.219 ns/op
Iteration  13: 862.676 ns/op
Iteration  14: 862.083 ns/op
Iteration  15: 861.953 ns/op
Iteration  16: 862.487 ns/op
Iteration  17: 863.398 ns/op
Iteration  18: 860.215 ns/op
Iteration  19: 864.761 ns/op
Iteration  20: 865.073 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1254.945 ns/op
# Warmup Iteration   2: 971.997 ns/op
# Warmup Iteration   3: 827.828 ns/op
# Warmup Iteration   4: 830.306 ns/op
# Warmup Iteration   5: 833.469 ns/op
Iteration   1: 837.258 ns/op
Iteration   2: 842.658 ns/op
Iteration   3: 823.666 ns/op
Iteration   4: 823.351 ns/op
Iteration   5: 823.950 ns/op
Iteration   6: 828.238 ns/op
Iteration   7: 824.956 ns/op
Iteration   8: 829.216 ns/op
Iteration   9: 823.634 ns/op
Iteration  10: 824.231 ns/op
Iteration  11: 826.549 ns/op
Iteration  12: 821.203 ns/op
Iteration  13: 822.025 ns/op
Iteration  14: 821.730 ns/op
Iteration  15: 821.895 ns/op
Iteration  16: 821.990 ns/op
Iteration  17: 822.532 ns/op
Iteration  18: 823.358 ns/op
Iteration  19: 818.902 ns/op
Iteration  20: 822.699 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  864.266 Â±(99.9%) 8.207 ns/op [Average]
  (min, avg, max) = (818.902, 864.266, 908.455), stdev = 24.199
  CI (99.9%): [856.059, 872.473] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
					

	

			 

 
 
		   


		 
	 	  		 
	 			

  
	 
,   	 
   

	   
   	 		
	

		 

 


	  	
						 

	    

    avgt  100  843.934 Â± 11.429  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
					

	

			 

 
 
		   


		 
	 	  		 
	 			

  
	 
,   	 
   

	   
   	 		
	

		 

 


	  	
						 

	    

    avgt  100  864.266 Â±  8.207  ns/op

Benchmark result is saved to split_precompiled_regex_153_215_Match.csv
