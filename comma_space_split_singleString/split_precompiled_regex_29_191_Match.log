# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 	
	
 
 ,
 
  		
 

	
 	 
	
	

 
		  
		
 	  
 
	 		    	  	

			
	    

 

		  



				 		 	
	
	 	 	 
 
  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1246.694 ns/op
# Warmup Iteration   2: 901.881 ns/op
# Warmup Iteration   3: 772.675 ns/op
# Warmup Iteration   4: 773.404 ns/op
# Warmup Iteration   5: 778.261 ns/op
Iteration   1: 783.918 ns/op
Iteration   2: 779.931 ns/op
Iteration   3: 771.478 ns/op
Iteration   4: 767.785 ns/op
Iteration   5: 767.703 ns/op
Iteration   6: 767.827 ns/op
Iteration   7: 768.234 ns/op
Iteration   8: 768.237 ns/op
Iteration   9: 771.633 ns/op
Iteration  10: 767.057 ns/op
Iteration  11: 764.303 ns/op
Iteration  12: 764.247 ns/op
Iteration  13: 764.440 ns/op
Iteration  14: 764.364 ns/op
Iteration  15: 764.886 ns/op
Iteration  16: 764.724 ns/op
Iteration  17: 764.844 ns/op
Iteration  18: 764.467 ns/op
Iteration  19: 769.215 ns/op
Iteration  20: 767.525 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1284.247 ns/op
# Warmup Iteration   2: 971.709 ns/op
# Warmup Iteration   3: 818.967 ns/op
# Warmup Iteration   4: 822.318 ns/op
# Warmup Iteration   5: 825.681 ns/op
Iteration   1: 830.095 ns/op
Iteration   2: 834.965 ns/op
Iteration   3: 815.656 ns/op
Iteration   4: 815.413 ns/op
Iteration   5: 816.129 ns/op
Iteration   6: 815.039 ns/op
Iteration   7: 815.254 ns/op
Iteration   8: 815.300 ns/op
Iteration   9: 814.934 ns/op
Iteration  10: 815.033 ns/op
Iteration  11: 815.945 ns/op
Iteration  12: 812.790 ns/op
Iteration  13: 811.055 ns/op
Iteration  14: 814.842 ns/op
Iteration  15: 812.939 ns/op
Iteration  16: 814.408 ns/op
Iteration  17: 815.473 ns/op
Iteration  18: 813.130 ns/op
Iteration  19: 814.012 ns/op
Iteration  20: 814.795 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1244.596 ns/op
# Warmup Iteration   2: 972.138 ns/op
# Warmup Iteration   3: 822.136 ns/op
# Warmup Iteration   4: 824.085 ns/op
# Warmup Iteration   5: 827.404 ns/op
Iteration   1: 831.549 ns/op
Iteration   2: 836.584 ns/op
Iteration   3: 817.765 ns/op
Iteration   4: 818.581 ns/op
Iteration   5: 818.534 ns/op
Iteration   6: 818.406 ns/op
Iteration   7: 817.925 ns/op
Iteration   8: 818.183 ns/op
Iteration   9: 818.340 ns/op
Iteration  10: 817.925 ns/op
Iteration  11: 826.290 ns/op
Iteration  12: 814.049 ns/op
Iteration  13: 821.149 ns/op
Iteration  14: 816.362 ns/op
Iteration  15: 815.761 ns/op
Iteration  16: 815.555 ns/op
Iteration  17: 816.927 ns/op
Iteration  18: 818.264 ns/op
Iteration  19: 817.384 ns/op
Iteration  20: 817.721 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1238.940 ns/op
# Warmup Iteration   2: 975.334 ns/op
# Warmup Iteration   3: 820.525 ns/op
# Warmup Iteration   4: 823.008 ns/op
# Warmup Iteration   5: 826.104 ns/op
Iteration   1: 830.351 ns/op
Iteration   2: 835.640 ns/op
Iteration   3: 822.260 ns/op
Iteration   4: 820.020 ns/op
Iteration   5: 816.546 ns/op
Iteration   6: 816.634 ns/op
Iteration   7: 816.350 ns/op
Iteration   8: 816.273 ns/op
Iteration   9: 817.515 ns/op
Iteration  10: 816.778 ns/op
Iteration  11: 818.170 ns/op
Iteration  12: 812.221 ns/op
Iteration  13: 825.030 ns/op
Iteration  14: 815.105 ns/op
Iteration  15: 814.634 ns/op
Iteration  16: 818.771 ns/op
Iteration  17: 817.196 ns/op
Iteration  18: 813.892 ns/op
Iteration  19: 814.140 ns/op
Iteration  20: 814.898 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1240.845 ns/op
# Warmup Iteration   2: 972.474 ns/op
# Warmup Iteration   3: 821.723 ns/op
# Warmup Iteration   4: 824.162 ns/op
# Warmup Iteration   5: 827.087 ns/op
Iteration   1: 831.863 ns/op
Iteration   2: 837.159 ns/op
Iteration   3: 817.691 ns/op
Iteration   4: 817.687 ns/op
Iteration   5: 818.208 ns/op
Iteration   6: 818.607 ns/op
Iteration   7: 818.662 ns/op
Iteration   8: 818.889 ns/op
Iteration   9: 819.259 ns/op
Iteration  10: 819.163 ns/op
Iteration  11: 821.847 ns/op
Iteration  12: 814.215 ns/op
Iteration  13: 825.234 ns/op
Iteration  14: 816.389 ns/op
Iteration  15: 815.935 ns/op
Iteration  16: 817.571 ns/op
Iteration  17: 818.604 ns/op
Iteration  18: 818.862 ns/op
Iteration  19: 818.881 ns/op
Iteration  20: 818.403 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  808.628 Â±(99.9%) 7.123 ns/op [Average]
  (min, avg, max) = (764.247, 808.628, 837.159), stdev = 21.002
  CI (99.9%): [801.505, 815.751] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 	
	
 
 ,
 
  		
 

	
 	 
	
	

 
		  
		
 	  
 
	 		    	  	

			
	    

 

		  



				 		 	
	
	 	 	 
 
  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1254.733 ns/op
# Warmup Iteration   2: 930.046 ns/op
# Warmup Iteration   3: 809.549 ns/op
# Warmup Iteration   4: 799.709 ns/op
# Warmup Iteration   5: 802.247 ns/op
Iteration   1: 807.293 ns/op
Iteration   2: 810.830 ns/op
Iteration   3: 799.015 ns/op
Iteration   4: 792.949 ns/op
Iteration   5: 792.772 ns/op
Iteration   6: 792.874 ns/op
Iteration   7: 792.924 ns/op
Iteration   8: 792.636 ns/op
Iteration   9: 792.074 ns/op
Iteration  10: 792.208 ns/op
Iteration  11: 793.080 ns/op
Iteration  12: 790.236 ns/op
Iteration  13: 790.635 ns/op
Iteration  14: 792.702 ns/op
Iteration  15: 790.022 ns/op
Iteration  16: 790.150 ns/op
Iteration  17: 790.308 ns/op
Iteration  18: 790.282 ns/op
Iteration  19: 789.841 ns/op
Iteration  20: 790.138 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1191.596 ns/op
# Warmup Iteration   2: 854.336 ns/op
# Warmup Iteration   3: 741.885 ns/op
# Warmup Iteration   4: 757.377 ns/op
# Warmup Iteration   5: 751.467 ns/op
Iteration   1: 758.578 ns/op
Iteration   2: 738.544 ns/op
Iteration   3: 738.408 ns/op
Iteration   4: 737.907 ns/op
Iteration   5: 738.446 ns/op
Iteration   6: 738.003 ns/op
Iteration   7: 738.049 ns/op
Iteration   8: 737.571 ns/op
Iteration   9: 737.832 ns/op
Iteration  10: 738.249 ns/op
Iteration  11: 736.571 ns/op
Iteration  12: 739.523 ns/op
Iteration  13: 737.866 ns/op
Iteration  14: 739.490 ns/op
Iteration  15: 738.436 ns/op
Iteration  16: 739.323 ns/op
Iteration  17: 738.996 ns/op
Iteration  18: 737.821 ns/op
Iteration  19: 739.912 ns/op
Iteration  20: 741.962 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1317.250 ns/op
# Warmup Iteration   2: 1018.128 ns/op
# Warmup Iteration   3: 847.126 ns/op
# Warmup Iteration   4: 849.596 ns/op
# Warmup Iteration   5: 852.966 ns/op
Iteration   1: 857.551 ns/op
Iteration   2: 862.373 ns/op
Iteration   3: 844.504 ns/op
Iteration   4: 842.926 ns/op
Iteration   5: 843.330 ns/op
Iteration   6: 842.930 ns/op
Iteration   7: 843.159 ns/op
Iteration   8: 843.847 ns/op
Iteration   9: 843.938 ns/op
Iteration  10: 839.551 ns/op
Iteration  11: 843.946 ns/op
Iteration  12: 847.986 ns/op
Iteration  13: 844.763 ns/op
Iteration  14: 845.020 ns/op
Iteration  15: 841.669 ns/op
Iteration  16: 841.555 ns/op
Iteration  17: 842.470 ns/op
Iteration  18: 859.983 ns/op
Iteration  19: 841.781 ns/op
Iteration  20: 842.775 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1286.163 ns/op
# Warmup Iteration   2: 997.485 ns/op
# Warmup Iteration   3: 848.329 ns/op
# Warmup Iteration   4: 843.337 ns/op
# Warmup Iteration   5: 848.106 ns/op
Iteration   1: 851.134 ns/op
Iteration   2: 857.707 ns/op
Iteration   3: 837.295 ns/op
Iteration   4: 837.424 ns/op
Iteration   5: 837.271 ns/op
Iteration   6: 837.969 ns/op
Iteration   7: 837.164 ns/op
Iteration   8: 838.874 ns/op
Iteration   9: 836.882 ns/op
Iteration  10: 836.356 ns/op
Iteration  11: 839.548 ns/op
Iteration  12: 832.884 ns/op
Iteration  13: 837.158 ns/op
Iteration  14: 834.618 ns/op
Iteration  15: 836.494 ns/op
Iteration  16: 837.361 ns/op
Iteration  17: 836.869 ns/op
Iteration  18: 835.459 ns/op
Iteration  19: 835.377 ns/op
Iteration  20: 836.423 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1278.763 ns/op
# Warmup Iteration   2: 1004.982 ns/op
# Warmup Iteration   3: 851.774 ns/op
# Warmup Iteration   4: 854.417 ns/op
# Warmup Iteration   5: 857.684 ns/op
Iteration   1: 861.723 ns/op
Iteration   2: 866.266 ns/op
Iteration   3: 846.651 ns/op
Iteration   4: 847.657 ns/op
Iteration   5: 847.583 ns/op
Iteration   6: 847.462 ns/op
Iteration   7: 846.947 ns/op
Iteration   8: 847.654 ns/op
Iteration   9: 843.647 ns/op
Iteration  10: 847.848 ns/op
Iteration  11: 850.934 ns/op
Iteration  12: 856.314 ns/op
Iteration  13: 847.418 ns/op
Iteration  14: 852.578 ns/op
Iteration  15: 847.009 ns/op
Iteration  16: 850.618 ns/op
Iteration  17: 848.413 ns/op
Iteration  18: 847.999 ns/op
Iteration  19: 848.044 ns/op
Iteration  20: 847.929 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  813.515 Â±(99.9%) 14.471 ns/op [Average]
  (min, avg, max) = (736.571, 813.515, 866.266), stdev = 42.669
  CI (99.9%): [799.043, 827.986] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                        (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	 	
	
 
 ,
 
  		
 

	
 	 
	
	

 
		  
		
 	  
 
	 		    	  	

			
	    

 

		  



				 		 	
	
	 	 	 
 
    avgt  100  808.628 Â±  7.123  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	 	
	
 
 ,
 
  		
 

	
 	 
	
	

 
		  
		
 	  
 
	 		    	  	

			
	    

 

		  



				 		 	
	
	 	 	 
 
    avgt  100  813.515 Â± 14.471  ns/op

Benchmark result is saved to split_precompiled_regex_29_191_Match.csv
