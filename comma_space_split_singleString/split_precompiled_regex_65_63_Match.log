# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 				   
 
  
 	 ,	
  	 
 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 974.690 ns/op
# Warmup Iteration   2: 561.008 ns/op
# Warmup Iteration   3: 527.042 ns/op
# Warmup Iteration   4: 522.977 ns/op
# Warmup Iteration   5: 528.981 ns/op
Iteration   1: 514.067 ns/op
Iteration   2: 517.127 ns/op
Iteration   3: 513.871 ns/op
Iteration   4: 516.615 ns/op
Iteration   5: 514.417 ns/op
Iteration   6: 516.259 ns/op
Iteration   7: 513.403 ns/op
Iteration   8: 517.691 ns/op
Iteration   9: 513.621 ns/op
Iteration  10: 514.948 ns/op
Iteration  11: 513.460 ns/op
Iteration  12: 514.547 ns/op
Iteration  13: 513.359 ns/op
Iteration  14: 517.688 ns/op
Iteration  15: 516.009 ns/op
Iteration  16: 515.577 ns/op
Iteration  17: 513.860 ns/op
Iteration  18: 516.402 ns/op
Iteration  19: 514.912 ns/op
Iteration  20: 516.808 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 925.609 ns/op
# Warmup Iteration   2: 541.654 ns/op
# Warmup Iteration   3: 523.638 ns/op
# Warmup Iteration   4: 518.337 ns/op
# Warmup Iteration   5: 526.805 ns/op
Iteration   1: 510.506 ns/op
Iteration   2: 512.891 ns/op
Iteration   3: 510.542 ns/op
Iteration   4: 512.902 ns/op
Iteration   5: 510.315 ns/op
Iteration   6: 512.093 ns/op
Iteration   7: 509.753 ns/op
Iteration   8: 510.465 ns/op
Iteration   9: 509.761 ns/op
Iteration  10: 510.313 ns/op
Iteration  11: 509.628 ns/op
Iteration  12: 510.045 ns/op
Iteration  13: 509.230 ns/op
Iteration  14: 511.108 ns/op
Iteration  15: 509.234 ns/op
Iteration  16: 510.180 ns/op
Iteration  17: 509.795 ns/op
Iteration  18: 510.520 ns/op
Iteration  19: 509.952 ns/op
Iteration  20: 511.048 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 927.643 ns/op
# Warmup Iteration   2: 546.236 ns/op
# Warmup Iteration   3: 521.822 ns/op
# Warmup Iteration   4: 517.269 ns/op
# Warmup Iteration   5: 523.625 ns/op
Iteration   1: 508.913 ns/op
Iteration   2: 510.878 ns/op
Iteration   3: 509.111 ns/op
Iteration   4: 511.093 ns/op
Iteration   5: 509.218 ns/op
Iteration   6: 509.965 ns/op
Iteration   7: 507.654 ns/op
Iteration   8: 508.139 ns/op
Iteration   9: 507.569 ns/op
Iteration  10: 508.440 ns/op
Iteration  11: 507.645 ns/op
Iteration  12: 508.645 ns/op
Iteration  13: 507.664 ns/op
Iteration  14: 513.109 ns/op
Iteration  15: 508.569 ns/op
Iteration  16: 511.259 ns/op
Iteration  17: 509.204 ns/op
Iteration  18: 510.698 ns/op
Iteration  19: 508.505 ns/op
Iteration  20: 511.194 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 918.869 ns/op
# Warmup Iteration   2: 539.248 ns/op
# Warmup Iteration   3: 520.361 ns/op
# Warmup Iteration   4: 517.844 ns/op
# Warmup Iteration   5: 521.113 ns/op
Iteration   1: 506.112 ns/op
Iteration   2: 511.201 ns/op
Iteration   3: 506.226 ns/op
Iteration   4: 508.774 ns/op
Iteration   5: 506.659 ns/op
Iteration   6: 507.472 ns/op
Iteration   7: 504.562 ns/op
Iteration   8: 505.545 ns/op
Iteration   9: 504.967 ns/op
Iteration  10: 510.462 ns/op
Iteration  11: 505.063 ns/op
Iteration  12: 507.065 ns/op
Iteration  13: 504.268 ns/op
Iteration  14: 506.147 ns/op
Iteration  15: 506.063 ns/op
Iteration  16: 505.208 ns/op
Iteration  17: 506.212 ns/op
Iteration  18: 504.874 ns/op
Iteration  19: 506.548 ns/op
Iteration  20: 504.780 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 922.001 ns/op
# Warmup Iteration   2: 542.223 ns/op
# Warmup Iteration   3: 519.930 ns/op
# Warmup Iteration   4: 515.009 ns/op
# Warmup Iteration   5: 521.427 ns/op
Iteration   1: 507.572 ns/op
Iteration   2: 509.857 ns/op
Iteration   3: 507.537 ns/op
Iteration   4: 510.563 ns/op
Iteration   5: 507.663 ns/op
Iteration   6: 508.357 ns/op
Iteration   7: 506.225 ns/op
Iteration   8: 506.958 ns/op
Iteration   9: 506.273 ns/op
Iteration  10: 507.098 ns/op
Iteration  11: 506.153 ns/op
Iteration  12: 511.122 ns/op
Iteration  13: 506.472 ns/op
Iteration  14: 508.184 ns/op
Iteration  15: 507.909 ns/op
Iteration  16: 506.360 ns/op
Iteration  17: 508.443 ns/op
Iteration  18: 506.819 ns/op
Iteration  19: 508.460 ns/op
Iteration  20: 507.276 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  509.859 ±(99.9%) 1.145 ns/op [Average]
  (min, avg, max) = (504.268, 509.859, 517.691), stdev = 3.376
  CI (99.9%): [508.714, 511.004] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 				   
 
  
 	 ,	
  	 
 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 974.456 ns/op
# Warmup Iteration   2: 583.175 ns/op
# Warmup Iteration   3: 544.541 ns/op
# Warmup Iteration   4: 540.764 ns/op
# Warmup Iteration   5: 544.163 ns/op
Iteration   1: 534.040 ns/op
Iteration   2: 531.913 ns/op
Iteration   3: 534.776 ns/op
Iteration   4: 532.679 ns/op
Iteration   5: 534.841 ns/op
Iteration   6: 531.749 ns/op
Iteration   7: 530.123 ns/op
Iteration   8: 533.312 ns/op
Iteration   9: 530.549 ns/op
Iteration  10: 529.814 ns/op
Iteration  11: 530.785 ns/op
Iteration  12: 530.291 ns/op
Iteration  13: 530.673 ns/op
Iteration  14: 530.167 ns/op
Iteration  15: 531.940 ns/op
Iteration  16: 530.875 ns/op
Iteration  17: 534.910 ns/op
Iteration  18: 532.149 ns/op
Iteration  19: 534.054 ns/op
Iteration  20: 532.540 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 944.116 ns/op
# Warmup Iteration   2: 558.461 ns/op
# Warmup Iteration   3: 534.045 ns/op
# Warmup Iteration   4: 529.333 ns/op
# Warmup Iteration   5: 533.881 ns/op
Iteration   1: 520.222 ns/op
Iteration   2: 523.172 ns/op
Iteration   3: 521.827 ns/op
Iteration   4: 526.157 ns/op
Iteration   5: 520.221 ns/op
Iteration   6: 524.678 ns/op
Iteration   7: 518.274 ns/op
Iteration   8: 524.418 ns/op
Iteration   9: 518.706 ns/op
Iteration  10: 521.301 ns/op
Iteration  11: 519.020 ns/op
Iteration  12: 520.278 ns/op
Iteration  13: 518.497 ns/op
Iteration  14: 522.073 ns/op
Iteration  15: 519.611 ns/op
Iteration  16: 520.907 ns/op
Iteration  17: 519.129 ns/op
Iteration  18: 520.304 ns/op
Iteration  19: 518.934 ns/op
Iteration  20: 520.647 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 950.514 ns/op
# Warmup Iteration   2: 561.684 ns/op
# Warmup Iteration   3: 539.555 ns/op
# Warmup Iteration   4: 535.524 ns/op
# Warmup Iteration   5: 540.186 ns/op
Iteration   1: 526.386 ns/op
Iteration   2: 528.386 ns/op
Iteration   3: 526.248 ns/op
Iteration   4: 528.863 ns/op
Iteration   5: 526.143 ns/op
Iteration   6: 527.611 ns/op
Iteration   7: 524.792 ns/op
Iteration   8: 527.210 ns/op
Iteration   9: 525.233 ns/op
Iteration  10: 531.348 ns/op
Iteration  11: 526.923 ns/op
Iteration  12: 527.910 ns/op
Iteration  13: 526.154 ns/op
Iteration  14: 527.574 ns/op
Iteration  15: 525.715 ns/op
Iteration  16: 527.243 ns/op
Iteration  17: 528.393 ns/op
Iteration  18: 530.678 ns/op
Iteration  19: 525.697 ns/op
Iteration  20: 527.389 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 968.157 ns/op
# Warmup Iteration   2: 570.172 ns/op
# Warmup Iteration   3: 541.470 ns/op
# Warmup Iteration   4: 537.967 ns/op
# Warmup Iteration   5: 543.153 ns/op
Iteration   1: 528.692 ns/op
Iteration   2: 531.305 ns/op
Iteration   3: 529.208 ns/op
Iteration   4: 531.114 ns/op
Iteration   5: 527.902 ns/op
Iteration   6: 527.850 ns/op
Iteration   7: 527.357 ns/op
Iteration   8: 527.319 ns/op
Iteration   9: 526.692 ns/op
Iteration  10: 528.041 ns/op
Iteration  11: 526.775 ns/op
Iteration  12: 528.102 ns/op
Iteration  13: 526.965 ns/op
Iteration  14: 528.070 ns/op
Iteration  15: 528.331 ns/op
Iteration  16: 528.743 ns/op
Iteration  17: 528.564 ns/op
Iteration  18: 527.187 ns/op
Iteration  19: 529.632 ns/op
Iteration  20: 528.477 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 968.569 ns/op
# Warmup Iteration   2: 564.598 ns/op
# Warmup Iteration   3: 531.655 ns/op
# Warmup Iteration   4: 526.584 ns/op
# Warmup Iteration   5: 531.520 ns/op
Iteration   1: 517.698 ns/op
Iteration   2: 520.240 ns/op
Iteration   3: 517.829 ns/op
Iteration   4: 519.846 ns/op
Iteration   5: 520.229 ns/op
Iteration   6: 518.030 ns/op
Iteration   7: 514.980 ns/op
Iteration   8: 516.461 ns/op
Iteration   9: 515.129 ns/op
Iteration  10: 516.046 ns/op
Iteration  11: 515.614 ns/op
Iteration  12: 517.011 ns/op
Iteration  13: 515.432 ns/op
Iteration  14: 517.018 ns/op
Iteration  15: 517.497 ns/op
Iteration  16: 515.812 ns/op
Iteration  17: 519.489 ns/op
Iteration  18: 515.339 ns/op
Iteration  19: 517.693 ns/op
Iteration  20: 515.675 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  525.158 ±(99.9%) 1.925 ns/op [Average]
  (min, avg, max) = (514.980, 525.158, 534.910), stdev = 5.675
  CI (99.9%): [523.234, 527.083] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 				   
 
  
 	 ,	
  	 
   avgt  100  509.859 ± 1.145  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 				   
 
  
 	 ,	
  	 
   avgt  100  525.158 ± 1.925  ns/op

Benchmark result is saved to split_precompiled_regex_65_63_Match.csv
