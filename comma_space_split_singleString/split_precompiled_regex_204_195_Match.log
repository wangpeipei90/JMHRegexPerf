# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	   
	



 	
	

 

 	

   

 
				    

	
 
	 

	
 
	


 


 
 
	 	 


 
 

 	  	
	
 			   	
 	  
		  	  
 	,	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1278.491 ns/op
# Warmup Iteration   2: 965.136 ns/op
# Warmup Iteration   3: 812.437 ns/op
# Warmup Iteration   4: 815.038 ns/op
# Warmup Iteration   5: 818.179 ns/op
Iteration   1: 822.472 ns/op
Iteration   2: 827.757 ns/op
Iteration   3: 808.591 ns/op
Iteration   4: 808.454 ns/op
Iteration   5: 808.793 ns/op
Iteration   6: 808.929 ns/op
Iteration   7: 808.368 ns/op
Iteration   8: 807.769 ns/op
Iteration   9: 810.301 ns/op
Iteration  10: 809.483 ns/op
Iteration  11: 810.394 ns/op
Iteration  12: 812.776 ns/op
Iteration  13: 806.409 ns/op
Iteration  14: 806.432 ns/op
Iteration  15: 806.226 ns/op
Iteration  16: 803.962 ns/op
Iteration  17: 806.684 ns/op
Iteration  18: 806.935 ns/op
Iteration  19: 805.942 ns/op
Iteration  20: 807.160 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1191.484 ns/op
# Warmup Iteration   2: 899.870 ns/op
# Warmup Iteration   3: 773.181 ns/op
# Warmup Iteration   4: 775.755 ns/op
# Warmup Iteration   5: 778.976 ns/op
Iteration   1: 782.956 ns/op
Iteration   2: 790.833 ns/op
Iteration   3: 772.659 ns/op
Iteration   4: 771.215 ns/op
Iteration   5: 771.027 ns/op
Iteration   6: 773.845 ns/op
Iteration   7: 768.813 ns/op
Iteration   8: 769.338 ns/op
Iteration   9: 769.015 ns/op
Iteration  10: 768.440 ns/op
Iteration  11: 769.116 ns/op
Iteration  12: 767.695 ns/op
Iteration  13: 765.941 ns/op
Iteration  14: 765.733 ns/op
Iteration  15: 765.812 ns/op
Iteration  16: 766.100 ns/op
Iteration  17: 766.482 ns/op
Iteration  18: 766.053 ns/op
Iteration  19: 766.284 ns/op
Iteration  20: 768.963 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1197.502 ns/op
# Warmup Iteration   2: 906.087 ns/op
# Warmup Iteration   3: 774.285 ns/op
# Warmup Iteration   4: 776.788 ns/op
# Warmup Iteration   5: 779.051 ns/op
Iteration   1: 782.733 ns/op
Iteration   2: 787.768 ns/op
Iteration   3: 770.262 ns/op
Iteration   4: 769.973 ns/op
Iteration   5: 770.543 ns/op
Iteration   6: 770.180 ns/op
Iteration   7: 769.979 ns/op
Iteration   8: 770.029 ns/op
Iteration   9: 770.101 ns/op
Iteration  10: 770.219 ns/op
Iteration  11: 769.967 ns/op
Iteration  12: 767.587 ns/op
Iteration  13: 767.580 ns/op
Iteration  14: 767.673 ns/op
Iteration  15: 767.564 ns/op
Iteration  16: 768.536 ns/op
Iteration  17: 767.673 ns/op
Iteration  18: 767.666 ns/op
Iteration  19: 768.218 ns/op
Iteration  20: 768.699 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1197.293 ns/op
# Warmup Iteration   2: 904.401 ns/op
# Warmup Iteration   3: 775.617 ns/op
# Warmup Iteration   4: 778.794 ns/op
# Warmup Iteration   5: 782.103 ns/op
Iteration   1: 786.225 ns/op
Iteration   2: 790.145 ns/op
Iteration   3: 774.115 ns/op
Iteration   4: 772.142 ns/op
Iteration   5: 772.129 ns/op
Iteration   6: 772.207 ns/op
Iteration   7: 772.093 ns/op
Iteration   8: 772.532 ns/op
Iteration   9: 773.729 ns/op
Iteration  10: 772.858 ns/op
Iteration  11: 773.914 ns/op
Iteration  12: 779.308 ns/op
Iteration  13: 769.995 ns/op
Iteration  14: 769.181 ns/op
Iteration  15: 770.533 ns/op
Iteration  16: 770.321 ns/op
Iteration  17: 770.499 ns/op
Iteration  18: 769.286 ns/op
Iteration  19: 769.349 ns/op
Iteration  20: 770.487 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1201.184 ns/op
# Warmup Iteration   2: 907.061 ns/op
# Warmup Iteration   3: 775.196 ns/op
# Warmup Iteration   4: 777.517 ns/op
# Warmup Iteration   5: 781.346 ns/op
Iteration   1: 784.981 ns/op
Iteration   2: 788.953 ns/op
Iteration   3: 771.949 ns/op
Iteration   4: 771.553 ns/op
Iteration   5: 771.837 ns/op
Iteration   6: 771.167 ns/op
Iteration   7: 771.095 ns/op
Iteration   8: 771.126 ns/op
Iteration   9: 770.700 ns/op
Iteration  10: 771.376 ns/op
Iteration  11: 771.854 ns/op
Iteration  12: 771.152 ns/op
Iteration  13: 776.947 ns/op
Iteration  14: 770.527 ns/op
Iteration  15: 770.194 ns/op
Iteration  16: 770.144 ns/op
Iteration  17: 770.170 ns/op
Iteration  18: 769.772 ns/op
Iteration  19: 770.155 ns/op
Iteration  20: 769.796 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  779.396 Â±(99.9%) 5.502 ns/op [Average]
  (min, avg, max) = (765.733, 779.396, 827.757), stdev = 16.222
  CI (99.9%): [773.894, 784.898] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	   
	



 	
	

 

 	

   

 
				    

	
 
	 

	
 
	


 


 
 
	 	 


 
 

 	  	
	
 			   	
 	  
		  	  
 	,	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1268.791 ns/op
# Warmup Iteration   2: 942.574 ns/op
# Warmup Iteration   3: 793.839 ns/op
# Warmup Iteration   4: 796.670 ns/op
# Warmup Iteration   5: 799.920 ns/op
Iteration   1: 804.003 ns/op
Iteration   2: 808.490 ns/op
Iteration   3: 789.934 ns/op
Iteration   4: 790.212 ns/op
Iteration   5: 789.762 ns/op
Iteration   6: 789.994 ns/op
Iteration   7: 790.612 ns/op
Iteration   8: 790.416 ns/op
Iteration   9: 791.397 ns/op
Iteration  10: 790.703 ns/op
Iteration  11: 790.735 ns/op
Iteration  12: 787.211 ns/op
Iteration  13: 787.652 ns/op
Iteration  14: 787.731 ns/op
Iteration  15: 787.752 ns/op
Iteration  16: 787.565 ns/op
Iteration  17: 787.724 ns/op
Iteration  18: 788.032 ns/op
Iteration  19: 788.053 ns/op
Iteration  20: 788.183 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1259.153 ns/op
# Warmup Iteration   2: 944.733 ns/op
# Warmup Iteration   3: 801.543 ns/op
# Warmup Iteration   4: 804.332 ns/op
# Warmup Iteration   5: 807.739 ns/op
Iteration   1: 811.061 ns/op
Iteration   2: 817.308 ns/op
Iteration   3: 798.431 ns/op
Iteration   4: 798.536 ns/op
Iteration   5: 798.829 ns/op
Iteration   6: 798.336 ns/op
Iteration   7: 797.201 ns/op
Iteration   8: 798.291 ns/op
Iteration   9: 798.418 ns/op
Iteration  10: 798.783 ns/op
Iteration  11: 799.086 ns/op
Iteration  12: 795.966 ns/op
Iteration  13: 795.679 ns/op
Iteration  14: 795.140 ns/op
Iteration  15: 795.572 ns/op
Iteration  16: 795.899 ns/op
Iteration  17: 797.578 ns/op
Iteration  18: 798.416 ns/op
Iteration  19: 797.856 ns/op
Iteration  20: 797.380 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1248.604 ns/op
# Warmup Iteration   2: 939.235 ns/op
# Warmup Iteration   3: 801.126 ns/op
# Warmup Iteration   4: 803.773 ns/op
# Warmup Iteration   5: 806.708 ns/op
Iteration   1: 810.983 ns/op
Iteration   2: 816.650 ns/op
Iteration   3: 797.450 ns/op
Iteration   4: 796.893 ns/op
Iteration   5: 797.658 ns/op
Iteration   6: 798.615 ns/op
Iteration   7: 800.309 ns/op
Iteration   8: 798.776 ns/op
Iteration   9: 798.397 ns/op
Iteration  10: 798.315 ns/op
Iteration  11: 798.626 ns/op
Iteration  12: 801.259 ns/op
Iteration  13: 796.918 ns/op
Iteration  14: 797.001 ns/op
Iteration  15: 796.747 ns/op
Iteration  16: 804.084 ns/op
Iteration  17: 798.095 ns/op
Iteration  18: 797.543 ns/op
Iteration  19: 796.986 ns/op
Iteration  20: 798.052 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1251.982 ns/op
# Warmup Iteration   2: 940.102 ns/op
# Warmup Iteration   3: 804.114 ns/op
# Warmup Iteration   4: 807.261 ns/op
# Warmup Iteration   5: 809.855 ns/op
Iteration   1: 814.026 ns/op
Iteration   2: 819.881 ns/op
Iteration   3: 802.021 ns/op
Iteration   4: 801.151 ns/op
Iteration   5: 807.591 ns/op
Iteration   6: 802.734 ns/op
Iteration   7: 801.772 ns/op
Iteration   8: 801.336 ns/op
Iteration   9: 802.003 ns/op
Iteration  10: 802.409 ns/op
Iteration  11: 804.317 ns/op
Iteration  12: 806.224 ns/op
Iteration  13: 799.530 ns/op
Iteration  14: 800.385 ns/op
Iteration  15: 799.824 ns/op
Iteration  16: 799.805 ns/op
Iteration  17: 799.692 ns/op
Iteration  18: 800.520 ns/op
Iteration  19: 800.685 ns/op
Iteration  20: 800.204 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1228.736 ns/op
# Warmup Iteration   2: 928.525 ns/op
# Warmup Iteration   3: 795.164 ns/op
# Warmup Iteration   4: 797.613 ns/op
# Warmup Iteration   5: 800.655 ns/op
Iteration   1: 804.255 ns/op
Iteration   2: 808.766 ns/op
Iteration   3: 790.383 ns/op
Iteration   4: 790.998 ns/op
Iteration   5: 789.918 ns/op
Iteration   6: 791.578 ns/op
Iteration   7: 791.425 ns/op
Iteration   8: 790.505 ns/op
Iteration   9: 790.336 ns/op
Iteration  10: 791.193 ns/op
Iteration  11: 790.802 ns/op
Iteration  12: 787.608 ns/op
Iteration  13: 788.418 ns/op
Iteration  14: 788.450 ns/op
Iteration  15: 788.492 ns/op
Iteration  16: 788.926 ns/op
Iteration  17: 788.356 ns/op
Iteration  18: 788.775 ns/op
Iteration  19: 788.003 ns/op
Iteration  20: 789.469 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  796.920 Â±(99.9%) 2.450 ns/op [Average]
  (min, avg, max) = (787.211, 796.920, 819.881), stdev = 7.223
  CI (99.9%): [794.471, 799.370] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	   
	



 	
	

 

 	

   

 
				    

	
 
	 

	
 
	


 


 
 
	 	 


 
 

 	  	
	
 			   	
 	  
		  	  
 	,	  avgt  100  779.396 Â± 5.502  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	   
	



 	
	

 

 	

   

 
				    

	
 
	 

	
 
	


 


 
 
	 	 


 
 

 	  	
	
 			   	
 	  
		  	  
 	,	  avgt  100  796.920 Â± 2.450  ns/op

Benchmark result is saved to split_precompiled_regex_204_195_Match.csv
