# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		  


  			,	  
	  
  


	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 911.687 ns/op
# Warmup Iteration   2: 520.679 ns/op
# Warmup Iteration   3: 502.616 ns/op
# Warmup Iteration   4: 499.061 ns/op
# Warmup Iteration   5: 503.285 ns/op
Iteration   1: 489.581 ns/op
Iteration   2: 492.193 ns/op
Iteration   3: 491.830 ns/op
Iteration   4: 490.770 ns/op
Iteration   5: 492.019 ns/op
Iteration   6: 487.817 ns/op
Iteration   7: 488.279 ns/op
Iteration   8: 488.466 ns/op
Iteration   9: 487.482 ns/op
Iteration  10: 488.311 ns/op
Iteration  11: 487.656 ns/op
Iteration  12: 488.696 ns/op
Iteration  13: 488.253 ns/op
Iteration  14: 489.446 ns/op
Iteration  15: 489.517 ns/op
Iteration  16: 491.936 ns/op
Iteration  17: 490.375 ns/op
Iteration  18: 488.655 ns/op
Iteration  19: 491.660 ns/op
Iteration  20: 489.369 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 912.643 ns/op
# Warmup Iteration   2: 524.061 ns/op
# Warmup Iteration   3: 503.844 ns/op
# Warmup Iteration   4: 500.650 ns/op
# Warmup Iteration   5: 506.294 ns/op
Iteration   1: 491.854 ns/op
Iteration   2: 493.858 ns/op
Iteration   3: 493.408 ns/op
Iteration   4: 492.847 ns/op
Iteration   5: 493.863 ns/op
Iteration   6: 490.669 ns/op
Iteration   7: 490.812 ns/op
Iteration   8: 490.094 ns/op
Iteration   9: 491.320 ns/op
Iteration  10: 491.433 ns/op
Iteration  11: 490.241 ns/op
Iteration  12: 492.533 ns/op
Iteration  13: 491.615 ns/op
Iteration  14: 493.615 ns/op
Iteration  15: 491.377 ns/op
Iteration  16: 491.635 ns/op
Iteration  17: 494.128 ns/op
Iteration  18: 492.268 ns/op
Iteration  19: 492.081 ns/op
Iteration  20: 490.466 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 909.593 ns/op
# Warmup Iteration   2: 524.775 ns/op
# Warmup Iteration   3: 505.441 ns/op
# Warmup Iteration   4: 501.755 ns/op
# Warmup Iteration   5: 507.279 ns/op
Iteration   1: 495.215 ns/op
Iteration   2: 496.109 ns/op
Iteration   3: 495.513 ns/op
Iteration   4: 493.303 ns/op
Iteration   5: 495.698 ns/op
Iteration   6: 491.384 ns/op
Iteration   7: 493.978 ns/op
Iteration   8: 491.286 ns/op
Iteration   9: 492.223 ns/op
Iteration  10: 493.203 ns/op
Iteration  11: 493.479 ns/op
Iteration  12: 494.338 ns/op
Iteration  13: 492.044 ns/op
Iteration  14: 493.795 ns/op
Iteration  15: 493.167 ns/op
Iteration  16: 495.133 ns/op
Iteration  17: 492.475 ns/op
Iteration  18: 493.489 ns/op
Iteration  19: 493.532 ns/op
Iteration  20: 492.145 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 918.387 ns/op
# Warmup Iteration   2: 539.411 ns/op
# Warmup Iteration   3: 519.871 ns/op
# Warmup Iteration   4: 511.253 ns/op
# Warmup Iteration   5: 519.315 ns/op
Iteration   1: 503.137 ns/op
Iteration   2: 506.202 ns/op
Iteration   3: 503.940 ns/op
Iteration   4: 505.434 ns/op
Iteration   5: 503.622 ns/op
Iteration   6: 503.346 ns/op
Iteration   7: 500.663 ns/op
Iteration   8: 501.563 ns/op
Iteration   9: 502.501 ns/op
Iteration  10: 502.269 ns/op
Iteration  11: 504.063 ns/op
Iteration  12: 500.842 ns/op
Iteration  13: 503.386 ns/op
Iteration  14: 501.121 ns/op
Iteration  15: 502.179 ns/op
Iteration  16: 501.111 ns/op
Iteration  17: 502.491 ns/op
Iteration  18: 500.962 ns/op
Iteration  19: 502.272 ns/op
Iteration  20: 501.677 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 915.378 ns/op
# Warmup Iteration   2: 533.208 ns/op
# Warmup Iteration   3: 511.595 ns/op
# Warmup Iteration   4: 508.285 ns/op
# Warmup Iteration   5: 513.709 ns/op
Iteration   1: 498.694 ns/op
Iteration   2: 501.439 ns/op
Iteration   3: 498.728 ns/op
Iteration   4: 501.660 ns/op
Iteration   5: 501.780 ns/op
Iteration   6: 501.527 ns/op
Iteration   7: 498.468 ns/op
Iteration   8: 497.160 ns/op
Iteration   9: 498.093 ns/op
Iteration  10: 499.143 ns/op
Iteration  11: 503.643 ns/op
Iteration  12: 498.218 ns/op
Iteration  13: 500.227 ns/op
Iteration  14: 497.844 ns/op
Iteration  15: 500.246 ns/op
Iteration  16: 499.566 ns/op
Iteration  17: 497.688 ns/op
Iteration  18: 500.499 ns/op
Iteration  19: 497.977 ns/op
Iteration  20: 500.487 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  495.498 ±(99.9%) 1.736 ns/op [Average]
  (min, avg, max) = (487.482, 495.498, 506.202), stdev = 5.119
  CI (99.9%): [493.762, 497.234] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		  


  			,	  
	  
  


	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 935.978 ns/op
# Warmup Iteration   2: 529.853 ns/op
# Warmup Iteration   3: 507.177 ns/op
# Warmup Iteration   4: 502.531 ns/op
# Warmup Iteration   5: 508.935 ns/op
Iteration   1: 496.863 ns/op
Iteration   2: 494.113 ns/op
Iteration   3: 496.604 ns/op
Iteration   4: 494.209 ns/op
Iteration   5: 497.104 ns/op
Iteration   6: 493.455 ns/op
Iteration   7: 492.336 ns/op
Iteration   8: 493.252 ns/op
Iteration   9: 492.362 ns/op
Iteration  10: 493.160 ns/op
Iteration  11: 493.726 ns/op
Iteration  12: 496.913 ns/op
Iteration  13: 493.975 ns/op
Iteration  14: 492.612 ns/op
Iteration  15: 493.953 ns/op
Iteration  16: 494.743 ns/op
Iteration  17: 492.815 ns/op
Iteration  18: 494.624 ns/op
Iteration  19: 493.633 ns/op
Iteration  20: 496.075 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 934.790 ns/op
# Warmup Iteration   2: 548.162 ns/op
# Warmup Iteration   3: 529.631 ns/op
# Warmup Iteration   4: 524.193 ns/op
# Warmup Iteration   5: 530.121 ns/op
Iteration   1: 516.022 ns/op
Iteration   2: 518.751 ns/op
Iteration   3: 515.864 ns/op
Iteration   4: 520.264 ns/op
Iteration   5: 518.374 ns/op
Iteration   6: 525.997 ns/op
Iteration   7: 514.493 ns/op
Iteration   8: 515.186 ns/op
Iteration   9: 514.606 ns/op
Iteration  10: 516.368 ns/op
Iteration  11: 516.364 ns/op
Iteration  12: 515.371 ns/op
Iteration  13: 516.450 ns/op
Iteration  14: 515.331 ns/op
Iteration  15: 516.207 ns/op
Iteration  16: 515.163 ns/op
Iteration  17: 516.336 ns/op
Iteration  18: 515.177 ns/op
Iteration  19: 516.580 ns/op
Iteration  20: 518.690 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 967.789 ns/op
# Warmup Iteration   2: 540.653 ns/op
# Warmup Iteration   3: 513.252 ns/op
# Warmup Iteration   4: 509.485 ns/op
# Warmup Iteration   5: 514.493 ns/op
Iteration   1: 500.331 ns/op
Iteration   2: 502.676 ns/op
Iteration   3: 502.896 ns/op
Iteration   4: 500.621 ns/op
Iteration   5: 503.243 ns/op
Iteration   6: 499.633 ns/op
Iteration   7: 500.486 ns/op
Iteration   8: 499.373 ns/op
Iteration   9: 500.766 ns/op
Iteration  10: 502.948 ns/op
Iteration  11: 500.959 ns/op
Iteration  12: 502.339 ns/op
Iteration  13: 499.881 ns/op
Iteration  14: 502.276 ns/op
Iteration  15: 502.575 ns/op
Iteration  16: 499.075 ns/op
Iteration  17: 512.254 ns/op
Iteration  18: 499.312 ns/op
Iteration  19: 501.135 ns/op
Iteration  20: 498.672 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 942.239 ns/op
# Warmup Iteration   2: 534.529 ns/op
# Warmup Iteration   3: 514.734 ns/op
# Warmup Iteration   4: 509.625 ns/op
# Warmup Iteration   5: 514.687 ns/op
Iteration   1: 497.701 ns/op
Iteration   2: 501.269 ns/op
Iteration   3: 501.507 ns/op
Iteration   4: 497.575 ns/op
Iteration   5: 502.326 ns/op
Iteration   6: 501.170 ns/op
Iteration   7: 499.738 ns/op
Iteration   8: 497.826 ns/op
Iteration   9: 496.396 ns/op
Iteration  10: 498.307 ns/op
Iteration  11: 496.549 ns/op
Iteration  12: 498.698 ns/op
Iteration  13: 498.033 ns/op
Iteration  14: 496.706 ns/op
Iteration  15: 498.678 ns/op
Iteration  16: 496.574 ns/op
Iteration  17: 497.865 ns/op
Iteration  18: 496.419 ns/op
Iteration  19: 498.278 ns/op
Iteration  20: 498.992 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 960.844 ns/op
# Warmup Iteration   2: 548.747 ns/op
# Warmup Iteration   3: 525.164 ns/op
# Warmup Iteration   4: 520.007 ns/op
# Warmup Iteration   5: 526.634 ns/op
Iteration   1: 511.318 ns/op
Iteration   2: 513.283 ns/op
Iteration   3: 511.346 ns/op
Iteration   4: 517.585 ns/op
Iteration   5: 510.687 ns/op
Iteration   6: 512.079 ns/op
Iteration   7: 510.310 ns/op
Iteration   8: 509.691 ns/op
Iteration   9: 511.599 ns/op
Iteration  10: 510.248 ns/op
Iteration  11: 511.468 ns/op
Iteration  12: 510.095 ns/op
Iteration  13: 511.291 ns/op
Iteration  14: 509.969 ns/op
Iteration  15: 511.408 ns/op
Iteration  16: 512.149 ns/op
Iteration  17: 511.136 ns/op
Iteration  18: 512.573 ns/op
Iteration  19: 510.115 ns/op
Iteration  20: 512.746 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  504.573 ±(99.9%) 2.946 ns/op [Average]
  (min, avg, max) = (492.336, 504.573, 525.997), stdev = 8.687
  CI (99.9%): [501.626, 507.519] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		  


  			,	  
	  
  


	  avgt  100  495.498 ± 1.736  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		  


  			,	  
	  
  


	  avgt  100  504.573 ± 2.946  ns/op

Benchmark result is saved to split_precompiled_regex_31_50_Match.csv
