# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 			
 
   
   
	   

 

  	 
 	
,			 	
	 			 	 
	 	  


  		
  
	
 
   


 	
	 	
	 	 
  




	
	  
 
	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1268.276 ns/op
# Warmup Iteration   2: 940.126 ns/op
# Warmup Iteration   3: 793.614 ns/op
# Warmup Iteration   4: 796.395 ns/op
# Warmup Iteration   5: 800.622 ns/op
Iteration   1: 804.074 ns/op
Iteration   2: 808.904 ns/op
Iteration   3: 790.679 ns/op
Iteration   4: 790.285 ns/op
Iteration   5: 790.286 ns/op
Iteration   6: 790.541 ns/op
Iteration   7: 790.202 ns/op
Iteration   8: 790.222 ns/op
Iteration   9: 789.672 ns/op
Iteration  10: 790.580 ns/op
Iteration  11: 790.823 ns/op
Iteration  12: 788.091 ns/op
Iteration  13: 788.140 ns/op
Iteration  14: 788.371 ns/op
Iteration  15: 796.793 ns/op
Iteration  16: 788.826 ns/op
Iteration  17: 790.480 ns/op
Iteration  18: 790.078 ns/op
Iteration  19: 789.142 ns/op
Iteration  20: 788.864 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1210.729 ns/op
# Warmup Iteration   2: 869.054 ns/op
# Warmup Iteration   3: 744.120 ns/op
# Warmup Iteration   4: 753.114 ns/op
# Warmup Iteration   5: 758.117 ns/op
Iteration   1: 757.943 ns/op
Iteration   2: 746.544 ns/op
Iteration   3: 741.001 ns/op
Iteration   4: 740.093 ns/op
Iteration   5: 739.882 ns/op
Iteration   6: 740.620 ns/op
Iteration   7: 740.250 ns/op
Iteration   8: 740.851 ns/op
Iteration   9: 740.545 ns/op
Iteration  10: 740.731 ns/op
Iteration  11: 738.690 ns/op
Iteration  12: 739.928 ns/op
Iteration  13: 744.541 ns/op
Iteration  14: 739.050 ns/op
Iteration  15: 739.173 ns/op
Iteration  16: 738.985 ns/op
Iteration  17: 738.919 ns/op
Iteration  18: 743.727 ns/op
Iteration  19: 740.664 ns/op
Iteration  20: 739.167 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1241.741 ns/op
# Warmup Iteration   2: 915.572 ns/op
# Warmup Iteration   3: 779.517 ns/op
# Warmup Iteration   4: 781.695 ns/op
# Warmup Iteration   5: 784.874 ns/op
Iteration   1: 788.883 ns/op
Iteration   2: 793.250 ns/op
Iteration   3: 775.001 ns/op
Iteration   4: 775.668 ns/op
Iteration   5: 776.432 ns/op
Iteration   6: 775.812 ns/op
Iteration   7: 775.342 ns/op
Iteration   8: 775.008 ns/op
Iteration   9: 779.695 ns/op
Iteration  10: 776.813 ns/op
Iteration  11: 776.800 ns/op
Iteration  12: 778.433 ns/op
Iteration  13: 774.548 ns/op
Iteration  14: 775.113 ns/op
Iteration  15: 774.435 ns/op
Iteration  16: 775.029 ns/op
Iteration  17: 774.981 ns/op
Iteration  18: 775.321 ns/op
Iteration  19: 776.672 ns/op
Iteration  20: 776.347 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1252.989 ns/op
# Warmup Iteration   2: 918.375 ns/op
# Warmup Iteration   3: 781.809 ns/op
# Warmup Iteration   4: 783.790 ns/op
# Warmup Iteration   5: 787.317 ns/op
Iteration   1: 791.101 ns/op
Iteration   2: 796.734 ns/op
Iteration   3: 777.995 ns/op
Iteration   4: 778.227 ns/op
Iteration   5: 778.601 ns/op
Iteration   6: 778.175 ns/op
Iteration   7: 777.900 ns/op
Iteration   8: 778.013 ns/op
Iteration   9: 778.014 ns/op
Iteration  10: 779.449 ns/op
Iteration  11: 779.878 ns/op
Iteration  12: 789.383 ns/op
Iteration  13: 776.321 ns/op
Iteration  14: 776.392 ns/op
Iteration  15: 777.513 ns/op
Iteration  16: 776.746 ns/op
Iteration  17: 776.854 ns/op
Iteration  18: 776.853 ns/op
Iteration  19: 777.930 ns/op
Iteration  20: 784.968 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1240.215 ns/op
# Warmup Iteration   2: 909.598 ns/op
# Warmup Iteration   3: 776.522 ns/op
# Warmup Iteration   4: 782.916 ns/op
# Warmup Iteration   5: 781.388 ns/op
Iteration   1: 785.869 ns/op
Iteration   2: 793.425 ns/op
Iteration   3: 774.516 ns/op
Iteration   4: 772.037 ns/op
Iteration   5: 772.183 ns/op
Iteration   6: 771.969 ns/op
Iteration   7: 771.855 ns/op
Iteration   8: 771.687 ns/op
Iteration   9: 772.229 ns/op
Iteration  10: 772.484 ns/op
Iteration  11: 772.568 ns/op
Iteration  12: 771.373 ns/op
Iteration  13: 770.804 ns/op
Iteration  14: 771.071 ns/op
Iteration  15: 771.219 ns/op
Iteration  16: 771.114 ns/op
Iteration  17: 776.379 ns/op
Iteration  18: 787.944 ns/op
Iteration  19: 770.611 ns/op
Iteration  20: 771.146 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  773.155 Â±(99.9%) 6.011 ns/op [Average]
  (min, avg, max) = (738.690, 773.155, 808.904), stdev = 17.725
  CI (99.9%): [767.143, 779.166] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 			
 
   
   
	   

 

  	 
 	
,			 	
	 			 	 
	 	  


  		
  
	
 
   


 	
	 	
	 	 
  




	
	  
 
	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1235.057 ns/op
# Warmup Iteration   2: 939.689 ns/op
# Warmup Iteration   3: 807.950 ns/op
# Warmup Iteration   4: 809.532 ns/op
# Warmup Iteration   5: 812.816 ns/op
Iteration   1: 817.012 ns/op
Iteration   2: 822.368 ns/op
Iteration   3: 804.549 ns/op
Iteration   4: 802.865 ns/op
Iteration   5: 803.568 ns/op
Iteration   6: 803.493 ns/op
Iteration   7: 803.591 ns/op
Iteration   8: 807.588 ns/op
Iteration   9: 805.150 ns/op
Iteration  10: 805.048 ns/op
Iteration  11: 805.251 ns/op
Iteration  12: 801.011 ns/op
Iteration  13: 800.488 ns/op
Iteration  14: 800.667 ns/op
Iteration  15: 801.292 ns/op
Iteration  16: 800.863 ns/op
Iteration  17: 801.736 ns/op
Iteration  18: 803.275 ns/op
Iteration  19: 803.345 ns/op
Iteration  20: 802.897 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1252.623 ns/op
# Warmup Iteration   2: 941.152 ns/op
# Warmup Iteration   3: 795.115 ns/op
# Warmup Iteration   4: 796.735 ns/op
# Warmup Iteration   5: 800.357 ns/op
Iteration   1: 804.879 ns/op
Iteration   2: 809.562 ns/op
Iteration   3: 792.190 ns/op
Iteration   4: 791.504 ns/op
Iteration   5: 791.496 ns/op
Iteration   6: 791.087 ns/op
Iteration   7: 790.252 ns/op
Iteration   8: 790.978 ns/op
Iteration   9: 791.084 ns/op
Iteration  10: 790.671 ns/op
Iteration  11: 793.156 ns/op
Iteration  12: 791.523 ns/op
Iteration  13: 794.551 ns/op
Iteration  14: 789.594 ns/op
Iteration  15: 788.455 ns/op
Iteration  16: 787.969 ns/op
Iteration  17: 788.586 ns/op
Iteration  18: 788.520 ns/op
Iteration  19: 788.312 ns/op
Iteration  20: 788.928 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1237.764 ns/op
# Warmup Iteration   2: 923.745 ns/op
# Warmup Iteration   3: 790.326 ns/op
# Warmup Iteration   4: 789.445 ns/op
# Warmup Iteration   5: 792.939 ns/op
Iteration   1: 797.412 ns/op
Iteration   2: 802.098 ns/op
Iteration   3: 783.899 ns/op
Iteration   4: 784.234 ns/op
Iteration   5: 783.814 ns/op
Iteration   6: 784.219 ns/op
Iteration   7: 782.797 ns/op
Iteration   8: 783.337 ns/op
Iteration   9: 784.484 ns/op
Iteration  10: 783.648 ns/op
Iteration  11: 785.214 ns/op
Iteration  12: 782.732 ns/op
Iteration  13: 784.311 ns/op
Iteration  14: 782.780 ns/op
Iteration  15: 781.536 ns/op
Iteration  16: 781.613 ns/op
Iteration  17: 782.592 ns/op
Iteration  18: 782.502 ns/op
Iteration  19: 781.900 ns/op
Iteration  20: 781.968 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1245.404 ns/op
# Warmup Iteration   2: 943.248 ns/op
# Warmup Iteration   3: 809.581 ns/op
# Warmup Iteration   4: 815.235 ns/op
# Warmup Iteration   5: 813.995 ns/op
Iteration   1: 821.592 ns/op
Iteration   2: 822.511 ns/op
Iteration   3: 807.427 ns/op
Iteration   4: 803.957 ns/op
Iteration   5: 804.313 ns/op
Iteration   6: 804.042 ns/op
Iteration   7: 803.478 ns/op
Iteration   8: 803.323 ns/op
Iteration   9: 803.908 ns/op
Iteration  10: 804.052 ns/op
Iteration  11: 808.307 ns/op
Iteration  12: 801.316 ns/op
Iteration  13: 803.560 ns/op
Iteration  14: 802.196 ns/op
Iteration  15: 801.861 ns/op
Iteration  16: 802.535 ns/op
Iteration  17: 803.844 ns/op
Iteration  18: 801.289 ns/op
Iteration  19: 802.636 ns/op
Iteration  20: 801.677 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1240.112 ns/op
# Warmup Iteration   2: 945.484 ns/op
# Warmup Iteration   3: 809.074 ns/op
# Warmup Iteration   4: 810.983 ns/op
# Warmup Iteration   5: 814.282 ns/op
Iteration   1: 818.646 ns/op
Iteration   2: 823.844 ns/op
Iteration   3: 804.650 ns/op
Iteration   4: 805.018 ns/op
Iteration   5: 804.763 ns/op
Iteration   6: 804.671 ns/op
Iteration   7: 804.659 ns/op
Iteration   8: 805.763 ns/op
Iteration   9: 806.536 ns/op
Iteration  10: 804.449 ns/op
Iteration  11: 804.639 ns/op
Iteration  12: 804.288 ns/op
Iteration  13: 801.660 ns/op
Iteration  14: 801.485 ns/op
Iteration  15: 801.764 ns/op
Iteration  16: 801.563 ns/op
Iteration  17: 802.243 ns/op
Iteration  18: 802.301 ns/op
Iteration  19: 801.796 ns/op
Iteration  20: 808.809 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  798.578 Â±(99.9%) 3.453 ns/op [Average]
  (min, avg, max) = (781.536, 798.578, 823.844), stdev = 10.182
  CI (99.9%): [795.125, 802.032] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  			
 
   
   
	   

 

  	 
 	
,			 	
	 			 	 
	 	  


  		
  
	
 
   


 	
	 	
	 	 
  




	
	  
 
	   avgt  100  773.155 Â± 6.011  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  			
 
   
   
	   

 

  	 
 	
,			 	
	 			 	 
	 	  


  		
  
	
 
   


 	
	 	
	 	 
  




	
	  
 
	   avgt  100  798.578 Â± 3.453  ns/op

Benchmark result is saved to split_precompiled_regex_110_210_Match.csv
