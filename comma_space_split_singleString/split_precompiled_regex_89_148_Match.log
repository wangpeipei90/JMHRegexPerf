# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
   	
	

		
	
						
 ,			
	 

 
		 
   		 
 	  	
  
	 
	

 	  		

 

  
   )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1090.627 ns/op
# Warmup Iteration   2: 768.121 ns/op
# Warmup Iteration   3: 673.406 ns/op
# Warmup Iteration   4: 673.184 ns/op
# Warmup Iteration   5: 673.337 ns/op
Iteration   1: 682.754 ns/op
Iteration   2: 662.401 ns/op
Iteration   3: 668.131 ns/op
Iteration   4: 661.994 ns/op
Iteration   5: 660.046 ns/op
Iteration   6: 660.019 ns/op
Iteration   7: 660.499 ns/op
Iteration   8: 660.343 ns/op
Iteration   9: 661.253 ns/op
Iteration  10: 658.712 ns/op
Iteration  11: 658.938 ns/op
Iteration  12: 658.913 ns/op
Iteration  13: 658.866 ns/op
Iteration  14: 659.308 ns/op
Iteration  15: 660.320 ns/op
Iteration  16: 660.316 ns/op
Iteration  17: 658.976 ns/op
Iteration  18: 658.912 ns/op
Iteration  19: 658.682 ns/op
Iteration  20: 658.682 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1089.508 ns/op
# Warmup Iteration   2: 753.303 ns/op
# Warmup Iteration   3: 676.658 ns/op
# Warmup Iteration   4: 672.769 ns/op
# Warmup Iteration   5: 676.382 ns/op
Iteration   1: 680.278 ns/op
Iteration   2: 664.757 ns/op
Iteration   3: 667.807 ns/op
Iteration   4: 664.342 ns/op
Iteration   5: 664.624 ns/op
Iteration   6: 665.333 ns/op
Iteration   7: 664.688 ns/op
Iteration   8: 664.444 ns/op
Iteration   9: 666.971 ns/op
Iteration  10: 666.194 ns/op
Iteration  11: 662.391 ns/op
Iteration  12: 664.024 ns/op
Iteration  13: 662.229 ns/op
Iteration  14: 662.269 ns/op
Iteration  15: 663.868 ns/op
Iteration  16: 662.575 ns/op
Iteration  17: 662.848 ns/op
Iteration  18: 662.687 ns/op
Iteration  19: 663.237 ns/op
Iteration  20: 663.386 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1097.045 ns/op
# Warmup Iteration   2: 762.443 ns/op
# Warmup Iteration   3: 693.793 ns/op
# Warmup Iteration   4: 685.033 ns/op
# Warmup Iteration   5: 685.106 ns/op
Iteration   1: 692.959 ns/op
Iteration   2: 673.949 ns/op
Iteration   3: 673.186 ns/op
Iteration   4: 676.574 ns/op
Iteration   5: 673.414 ns/op
Iteration   6: 674.119 ns/op
Iteration   7: 673.406 ns/op
Iteration   8: 672.423 ns/op
Iteration   9: 672.753 ns/op
Iteration  10: 670.728 ns/op
Iteration  11: 671.632 ns/op
Iteration  12: 670.392 ns/op
Iteration  13: 670.428 ns/op
Iteration  14: 670.470 ns/op
Iteration  15: 670.551 ns/op
Iteration  16: 670.455 ns/op
Iteration  17: 677.519 ns/op
Iteration  18: 670.321 ns/op
Iteration  19: 672.838 ns/op
Iteration  20: 670.653 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1163.365 ns/op
# Warmup Iteration   2: 821.853 ns/op
# Warmup Iteration   3: 723.524 ns/op
# Warmup Iteration   4: 729.689 ns/op
# Warmup Iteration   5: 729.567 ns/op
Iteration   1: 735.365 ns/op
Iteration   2: 717.824 ns/op
Iteration   3: 717.704 ns/op
Iteration   4: 717.370 ns/op
Iteration   5: 716.863 ns/op
Iteration   6: 717.876 ns/op
Iteration   7: 717.664 ns/op
Iteration   8: 717.822 ns/op
Iteration   9: 717.802 ns/op
Iteration  10: 721.397 ns/op
Iteration  11: 715.237 ns/op
Iteration  12: 708.546 ns/op
Iteration  13: 717.721 ns/op
Iteration  14: 714.147 ns/op
Iteration  15: 713.693 ns/op
Iteration  16: 713.854 ns/op
Iteration  17: 713.418 ns/op
Iteration  18: 713.082 ns/op
Iteration  19: 713.412 ns/op
Iteration  20: 713.172 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1084.905 ns/op
# Warmup Iteration   2: 748.930 ns/op
# Warmup Iteration   3: 677.318 ns/op
# Warmup Iteration   4: 672.932 ns/op
# Warmup Iteration   5: 676.426 ns/op
Iteration   1: 680.581 ns/op
Iteration   2: 665.950 ns/op
Iteration   3: 668.966 ns/op
Iteration   4: 664.783 ns/op
Iteration   5: 665.141 ns/op
Iteration   6: 664.067 ns/op
Iteration   7: 664.146 ns/op
Iteration   8: 668.519 ns/op
Iteration   9: 669.459 ns/op
Iteration  10: 662.265 ns/op
Iteration  11: 662.295 ns/op
Iteration  12: 661.860 ns/op
Iteration  13: 666.771 ns/op
Iteration  14: 661.608 ns/op
Iteration  15: 662.826 ns/op
Iteration  16: 661.578 ns/op
Iteration  17: 661.656 ns/op
Iteration  18: 662.617 ns/op
Iteration  19: 662.443 ns/op
Iteration  20: 662.634 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  676.299 ±(99.9%) 7.199 ns/op [Average]
  (min, avg, max) = (658.682, 676.299, 735.365), stdev = 21.228
  CI (99.9%): [669.100, 683.499] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
   	
	

		
	
						
 ,			
	 

 
		 
   		 
 	  	
  
	 
	

 	  		

 

  
   )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1112.359 ns/op
# Warmup Iteration   2: 778.455 ns/op
# Warmup Iteration   3: 705.277 ns/op
# Warmup Iteration   4: 701.670 ns/op
# Warmup Iteration   5: 704.877 ns/op
Iteration   1: 708.461 ns/op
Iteration   2: 694.538 ns/op
Iteration   3: 693.639 ns/op
Iteration   4: 695.903 ns/op
Iteration   5: 693.515 ns/op
Iteration   6: 693.274 ns/op
Iteration   7: 693.142 ns/op
Iteration   8: 692.605 ns/op
Iteration   9: 693.165 ns/op
Iteration  10: 690.876 ns/op
Iteration  11: 692.163 ns/op
Iteration  12: 690.834 ns/op
Iteration  13: 691.129 ns/op
Iteration  14: 690.959 ns/op
Iteration  15: 693.586 ns/op
Iteration  16: 691.122 ns/op
Iteration  17: 691.907 ns/op
Iteration  18: 692.945 ns/op
Iteration  19: 691.282 ns/op
Iteration  20: 691.710 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1148.606 ns/op
# Warmup Iteration   2: 800.934 ns/op
# Warmup Iteration   3: 715.765 ns/op
# Warmup Iteration   4: 711.242 ns/op
# Warmup Iteration   5: 714.674 ns/op
Iteration   1: 719.326 ns/op
Iteration   2: 703.425 ns/op
Iteration   3: 703.286 ns/op
Iteration   4: 703.236 ns/op
Iteration   5: 706.965 ns/op
Iteration   6: 703.086 ns/op
Iteration   7: 703.158 ns/op
Iteration   8: 703.009 ns/op
Iteration   9: 703.680 ns/op
Iteration  10: 700.782 ns/op
Iteration  11: 700.881 ns/op
Iteration  12: 700.664 ns/op
Iteration  13: 702.797 ns/op
Iteration  14: 701.530 ns/op
Iteration  15: 700.726 ns/op
Iteration  16: 703.351 ns/op
Iteration  17: 706.736 ns/op
Iteration  18: 701.125 ns/op
Iteration  19: 701.617 ns/op
Iteration  20: 701.282 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1159.434 ns/op
# Warmup Iteration   2: 781.616 ns/op
# Warmup Iteration   3: 694.570 ns/op
# Warmup Iteration   4: 689.855 ns/op
# Warmup Iteration   5: 693.987 ns/op
Iteration   1: 698.625 ns/op
Iteration   2: 686.373 ns/op
Iteration   3: 684.813 ns/op
Iteration   4: 681.856 ns/op
Iteration   5: 682.306 ns/op
Iteration   6: 685.434 ns/op
Iteration   7: 682.630 ns/op
Iteration   8: 681.997 ns/op
Iteration   9: 683.162 ns/op
Iteration  10: 681.605 ns/op
Iteration  11: 680.681 ns/op
Iteration  12: 680.936 ns/op
Iteration  13: 684.910 ns/op
Iteration  14: 688.328 ns/op
Iteration  15: 681.047 ns/op
Iteration  16: 682.077 ns/op
Iteration  17: 682.551 ns/op
Iteration  18: 684.567 ns/op
Iteration  19: 683.945 ns/op
Iteration  20: 681.862 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1128.283 ns/op
# Warmup Iteration   2: 779.948 ns/op
# Warmup Iteration   3: 696.466 ns/op
# Warmup Iteration   4: 692.027 ns/op
# Warmup Iteration   5: 695.257 ns/op
Iteration   1: 699.174 ns/op
Iteration   2: 683.082 ns/op
Iteration   3: 685.817 ns/op
Iteration   4: 682.636 ns/op
Iteration   5: 683.183 ns/op
Iteration   6: 682.476 ns/op
Iteration   7: 682.860 ns/op
Iteration   8: 682.938 ns/op
Iteration   9: 683.210 ns/op
Iteration  10: 682.227 ns/op
Iteration  11: 681.316 ns/op
Iteration  12: 686.723 ns/op
Iteration  13: 682.365 ns/op
Iteration  14: 681.453 ns/op
Iteration  15: 681.371 ns/op
Iteration  16: 683.140 ns/op
Iteration  17: 683.520 ns/op
Iteration  18: 683.638 ns/op
Iteration  19: 683.572 ns/op
Iteration  20: 682.663 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1165.528 ns/op
# Warmup Iteration   2: 792.674 ns/op
# Warmup Iteration   3: 700.537 ns/op
# Warmup Iteration   4: 696.916 ns/op
# Warmup Iteration   5: 700.681 ns/op
Iteration   1: 708.492 ns/op
Iteration   2: 688.729 ns/op
Iteration   3: 689.811 ns/op
Iteration   4: 693.063 ns/op
Iteration   5: 692.499 ns/op
Iteration   6: 689.008 ns/op
Iteration   7: 688.963 ns/op
Iteration   8: 688.548 ns/op
Iteration   9: 688.878 ns/op
Iteration  10: 687.340 ns/op
Iteration  11: 688.121 ns/op
Iteration  12: 687.390 ns/op
Iteration  13: 687.134 ns/op
Iteration  14: 686.905 ns/op
Iteration  15: 687.397 ns/op
Iteration  16: 687.285 ns/op
Iteration  17: 689.183 ns/op
Iteration  18: 686.726 ns/op
Iteration  19: 686.962 ns/op
Iteration  20: 687.416 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  690.843 ±(99.9%) 2.833 ns/op [Average]
  (min, avg, max) = (680.681, 690.843, 719.326), stdev = 8.354
  CI (99.9%): [688.010, 693.677] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
   	
	

		
	
						
 ,			
	 

 
		 
   		 
 	  	
  
	 
	

 	  		

 

  
     avgt  100  676.299 ± 7.199  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
   	
	

		
	
						
 ,			
	 

 
		 
   		 
 	  	
  
	 
	

 	  		

 

  
     avgt  100  690.843 ± 2.833  ns/op

Benchmark result is saved to split_precompiled_regex_89_148_Match.csv
