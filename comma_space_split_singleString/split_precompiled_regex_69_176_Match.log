# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	


  	



 		

  	 		 		
	
		
				 	 		 	 
	

	
 
	 	 


 
  
		  
  
	 	


 		
			

	,	 	


		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1197.925 ns/op
# Warmup Iteration   2: 838.400 ns/op
# Warmup Iteration   3: 725.644 ns/op
# Warmup Iteration   4: 735.418 ns/op
# Warmup Iteration   5: 729.334 ns/op
Iteration   1: 733.420 ns/op
Iteration   2: 721.466 ns/op
Iteration   3: 716.926 ns/op
Iteration   4: 716.720 ns/op
Iteration   5: 717.065 ns/op
Iteration   6: 717.213 ns/op
Iteration   7: 716.723 ns/op
Iteration   8: 716.802 ns/op
Iteration   9: 716.613 ns/op
Iteration  10: 717.887 ns/op
Iteration  11: 714.973 ns/op
Iteration  12: 714.771 ns/op
Iteration  13: 715.113 ns/op
Iteration  14: 715.199 ns/op
Iteration  15: 715.057 ns/op
Iteration  16: 716.759 ns/op
Iteration  17: 715.753 ns/op
Iteration  18: 715.864 ns/op
Iteration  19: 719.548 ns/op
Iteration  20: 715.019 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1188.713 ns/op
# Warmup Iteration   2: 831.664 ns/op
# Warmup Iteration   3: 722.565 ns/op
# Warmup Iteration   4: 737.180 ns/op
# Warmup Iteration   5: 731.476 ns/op
Iteration   1: 739.362 ns/op
Iteration   2: 718.969 ns/op
Iteration   3: 718.480 ns/op
Iteration   4: 718.831 ns/op
Iteration   5: 720.422 ns/op
Iteration   6: 721.029 ns/op
Iteration   7: 717.880 ns/op
Iteration   8: 721.975 ns/op
Iteration   9: 718.930 ns/op
Iteration  10: 718.684 ns/op
Iteration  11: 718.543 ns/op
Iteration  12: 721.631 ns/op
Iteration  13: 715.830 ns/op
Iteration  14: 716.434 ns/op
Iteration  15: 716.103 ns/op
Iteration  16: 716.217 ns/op
Iteration  17: 716.165 ns/op
Iteration  18: 716.638 ns/op
Iteration  19: 716.605 ns/op
Iteration  20: 716.342 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1159.966 ns/op
# Warmup Iteration   2: 857.692 ns/op
# Warmup Iteration   3: 745.080 ns/op
# Warmup Iteration   4: 758.919 ns/op
# Warmup Iteration   5: 752.467 ns/op
Iteration   1: 757.847 ns/op
Iteration   2: 740.520 ns/op
Iteration   3: 740.556 ns/op
Iteration   4: 740.471 ns/op
Iteration   5: 740.393 ns/op
Iteration   6: 739.784 ns/op
Iteration   7: 745.016 ns/op
Iteration   8: 741.787 ns/op
Iteration   9: 740.081 ns/op
Iteration  10: 740.868 ns/op
Iteration  11: 738.882 ns/op
Iteration  12: 737.100 ns/op
Iteration  13: 737.322 ns/op
Iteration  14: 736.762 ns/op
Iteration  15: 736.660 ns/op
Iteration  16: 736.585 ns/op
Iteration  17: 736.877 ns/op
Iteration  18: 736.445 ns/op
Iteration  19: 736.423 ns/op
Iteration  20: 736.444 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1192.813 ns/op
# Warmup Iteration   2: 825.053 ns/op
# Warmup Iteration   3: 715.865 ns/op
# Warmup Iteration   4: 728.270 ns/op
# Warmup Iteration   5: 724.867 ns/op
Iteration   1: 728.170 ns/op
Iteration   2: 712.610 ns/op
Iteration   3: 711.811 ns/op
Iteration   4: 712.534 ns/op
Iteration   5: 712.429 ns/op
Iteration   6: 712.341 ns/op
Iteration   7: 711.577 ns/op
Iteration   8: 712.458 ns/op
Iteration   9: 715.673 ns/op
Iteration  10: 710.678 ns/op
Iteration  11: 710.478 ns/op
Iteration  12: 710.222 ns/op
Iteration  13: 710.269 ns/op
Iteration  14: 710.295 ns/op
Iteration  15: 710.046 ns/op
Iteration  16: 710.368 ns/op
Iteration  17: 710.421 ns/op
Iteration  18: 710.081 ns/op
Iteration  19: 710.004 ns/op
Iteration  20: 714.781 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1149.821 ns/op
# Warmup Iteration   2: 839.218 ns/op
# Warmup Iteration   3: 732.255 ns/op
# Warmup Iteration   4: 746.475 ns/op
# Warmup Iteration   5: 740.832 ns/op
Iteration   1: 745.183 ns/op
Iteration   2: 729.285 ns/op
Iteration   3: 732.922 ns/op
Iteration   4: 727.896 ns/op
Iteration   5: 727.843 ns/op
Iteration   6: 727.436 ns/op
Iteration   7: 727.909 ns/op
Iteration   8: 727.101 ns/op
Iteration   9: 730.237 ns/op
Iteration  10: 728.066 ns/op
Iteration  11: 725.893 ns/op
Iteration  12: 725.481 ns/op
Iteration  13: 725.920 ns/op
Iteration  14: 726.907 ns/op
Iteration  15: 725.406 ns/op
Iteration  16: 728.826 ns/op
Iteration  17: 729.763 ns/op
Iteration  18: 726.211 ns/op
Iteration  19: 726.347 ns/op
Iteration  20: 726.774 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  723.494 Â±(99.9%) 3.633 ns/op [Average]
  (min, avg, max) = (710.004, 723.494, 757.847), stdev = 10.711
  CI (99.9%): [719.862, 727.127] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	


  	



 		

  	 		 		
	
		
				 	 		 	 
	

	
 
	 	 


 
  
		  
  
	 	


 		
			

	,	 	


		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1212.992 ns/op
# Warmup Iteration   2: 856.964 ns/op
# Warmup Iteration   3: 737.800 ns/op
# Warmup Iteration   4: 753.723 ns/op
# Warmup Iteration   5: 745.700 ns/op
Iteration   1: 750.922 ns/op
Iteration   2: 735.368 ns/op
Iteration   3: 733.943 ns/op
Iteration   4: 733.856 ns/op
Iteration   5: 734.650 ns/op
Iteration   6: 733.900 ns/op
Iteration   7: 733.715 ns/op
Iteration   8: 734.020 ns/op
Iteration   9: 733.266 ns/op
Iteration  10: 733.665 ns/op
Iteration  11: 732.571 ns/op
Iteration  12: 733.471 ns/op
Iteration  13: 731.268 ns/op
Iteration  14: 731.386 ns/op
Iteration  15: 731.488 ns/op
Iteration  16: 732.164 ns/op
Iteration  17: 731.362 ns/op
Iteration  18: 733.662 ns/op
Iteration  19: 733.693 ns/op
Iteration  20: 732.442 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1179.820 ns/op
# Warmup Iteration   2: 858.222 ns/op
# Warmup Iteration   3: 742.545 ns/op
# Warmup Iteration   4: 757.307 ns/op
# Warmup Iteration   5: 752.047 ns/op
Iteration   1: 754.987 ns/op
Iteration   2: 738.740 ns/op
Iteration   3: 738.943 ns/op
Iteration   4: 738.746 ns/op
Iteration   5: 739.237 ns/op
Iteration   6: 739.039 ns/op
Iteration   7: 739.092 ns/op
Iteration   8: 738.557 ns/op
Iteration   9: 738.648 ns/op
Iteration  10: 739.874 ns/op
Iteration  11: 737.251 ns/op
Iteration  12: 738.021 ns/op
Iteration  13: 736.712 ns/op
Iteration  14: 736.804 ns/op
Iteration  15: 736.812 ns/op
Iteration  16: 736.420 ns/op
Iteration  17: 742.038 ns/op
Iteration  18: 736.953 ns/op
Iteration  19: 738.094 ns/op
Iteration  20: 761.166 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1211.138 ns/op
# Warmup Iteration   2: 877.997 ns/op
# Warmup Iteration   3: 758.381 ns/op
# Warmup Iteration   4: 773.443 ns/op
# Warmup Iteration   5: 769.500 ns/op
Iteration   1: 777.429 ns/op
Iteration   2: 754.463 ns/op
Iteration   3: 754.256 ns/op
Iteration   4: 754.758 ns/op
Iteration   5: 754.692 ns/op
Iteration   6: 754.563 ns/op
Iteration   7: 754.009 ns/op
Iteration   8: 754.203 ns/op
Iteration   9: 754.126 ns/op
Iteration  10: 754.417 ns/op
Iteration  11: 752.252 ns/op
Iteration  12: 752.650 ns/op
Iteration  13: 752.517 ns/op
Iteration  14: 752.923 ns/op
Iteration  15: 752.672 ns/op
Iteration  16: 752.558 ns/op
Iteration  17: 753.044 ns/op
Iteration  18: 753.335 ns/op
Iteration  19: 755.635 ns/op
Iteration  20: 758.466 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1218.840 ns/op
# Warmup Iteration   2: 863.926 ns/op
# Warmup Iteration   3: 743.821 ns/op
# Warmup Iteration   4: 758.153 ns/op
# Warmup Iteration   5: 752.699 ns/op
Iteration   1: 756.959 ns/op
Iteration   2: 740.030 ns/op
Iteration   3: 740.208 ns/op
Iteration   4: 739.890 ns/op
Iteration   5: 739.887 ns/op
Iteration   6: 739.486 ns/op
Iteration   7: 739.109 ns/op
Iteration   8: 739.762 ns/op
Iteration   9: 739.337 ns/op
Iteration  10: 740.465 ns/op
Iteration  11: 737.968 ns/op
Iteration  12: 736.943 ns/op
Iteration  13: 738.642 ns/op
Iteration  14: 737.069 ns/op
Iteration  15: 737.139 ns/op
Iteration  16: 737.284 ns/op
Iteration  17: 737.984 ns/op
Iteration  18: 738.112 ns/op
Iteration  19: 737.403 ns/op
Iteration  20: 738.039 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1216.483 ns/op
# Warmup Iteration   2: 886.953 ns/op
# Warmup Iteration   3: 764.807 ns/op
# Warmup Iteration   4: 773.924 ns/op
# Warmup Iteration   5: 779.971 ns/op
Iteration   1: 779.223 ns/op
Iteration   2: 760.833 ns/op
Iteration   3: 761.068 ns/op
Iteration   4: 761.437 ns/op
Iteration   5: 761.195 ns/op
Iteration   6: 762.829 ns/op
Iteration   7: 768.998 ns/op
Iteration   8: 762.132 ns/op
Iteration   9: 761.079 ns/op
Iteration  10: 764.248 ns/op
Iteration  11: 760.341 ns/op
Iteration  12: 759.741 ns/op
Iteration  13: 759.748 ns/op
Iteration  14: 759.514 ns/op
Iteration  15: 759.635 ns/op
Iteration  16: 760.161 ns/op
Iteration  17: 759.849 ns/op
Iteration  18: 759.866 ns/op
Iteration  19: 759.705 ns/op
Iteration  20: 760.024 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  746.233 Â±(99.9%) 3.969 ns/op [Average]
  (min, avg, max) = (731.268, 746.233, 779.223), stdev = 11.702
  CI (99.9%): [742.264, 750.201] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	


  	



 		

  	 		 		
	
		
				 	 		 	 
	

	
 
	 	 


 
  
		  
  
	 	


 		
			

	,	 	


		  avgt  100  723.494 Â± 3.633  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	


  	



 		

  	 		 		
	
		
				 	 		 	 
	

	
 
	 	 


 
  
		  
  
	 	


 		
			

	,	 	


		  avgt  100  746.233 Â± 3.969  ns/op

Benchmark result is saved to split_precompiled_regex_69_176_Match.csv
