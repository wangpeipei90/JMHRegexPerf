# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	    
	 
		 
, 		 	  
  
 	

    
 	 
 		 	

		 	  	    
	
			 	 
  		    	



	   
	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1272.698 ns/op
# Warmup Iteration   2: 949.928 ns/op
# Warmup Iteration   3: 801.038 ns/op
# Warmup Iteration   4: 804.600 ns/op
# Warmup Iteration   5: 806.276 ns/op
Iteration   1: 813.536 ns/op
Iteration   2: 817.504 ns/op
Iteration   3: 798.598 ns/op
Iteration   4: 799.117 ns/op
Iteration   5: 797.929 ns/op
Iteration   6: 801.113 ns/op
Iteration   7: 797.769 ns/op
Iteration   8: 800.513 ns/op
Iteration   9: 796.532 ns/op
Iteration  10: 797.224 ns/op
Iteration  11: 796.705 ns/op
Iteration  12: 796.245 ns/op
Iteration  13: 794.202 ns/op
Iteration  14: 793.851 ns/op
Iteration  15: 793.611 ns/op
Iteration  16: 800.968 ns/op
Iteration  17: 794.063 ns/op
Iteration  18: 796.179 ns/op
Iteration  19: 796.334 ns/op
Iteration  20: 796.529 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1228.410 ns/op
# Warmup Iteration   2: 902.666 ns/op
# Warmup Iteration   3: 752.295 ns/op
# Warmup Iteration   4: 754.300 ns/op
# Warmup Iteration   5: 774.330 ns/op
Iteration   1: 766.272 ns/op
Iteration   2: 751.800 ns/op
Iteration   3: 748.987 ns/op
Iteration   4: 748.092 ns/op
Iteration   5: 747.679 ns/op
Iteration   6: 747.961 ns/op
Iteration   7: 748.711 ns/op
Iteration   8: 748.561 ns/op
Iteration   9: 748.458 ns/op
Iteration  10: 748.200 ns/op
Iteration  11: 745.456 ns/op
Iteration  12: 745.404 ns/op
Iteration  13: 751.656 ns/op
Iteration  14: 745.619 ns/op
Iteration  15: 745.523 ns/op
Iteration  16: 745.284 ns/op
Iteration  17: 745.768 ns/op
Iteration  18: 745.569 ns/op
Iteration  19: 746.439 ns/op
Iteration  20: 747.123 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1257.042 ns/op
# Warmup Iteration   2: 937.679 ns/op
# Warmup Iteration   3: 799.184 ns/op
# Warmup Iteration   4: 801.797 ns/op
# Warmup Iteration   5: 804.208 ns/op
Iteration   1: 808.776 ns/op
Iteration   2: 813.365 ns/op
Iteration   3: 796.956 ns/op
Iteration   4: 795.080 ns/op
Iteration   5: 795.423 ns/op
Iteration   6: 794.617 ns/op
Iteration   7: 795.010 ns/op
Iteration   8: 796.051 ns/op
Iteration   9: 795.786 ns/op
Iteration  10: 795.980 ns/op
Iteration  11: 818.261 ns/op
Iteration  12: 797.582 ns/op
Iteration  13: 794.690 ns/op
Iteration  14: 794.458 ns/op
Iteration  15: 794.554 ns/op
Iteration  16: 799.374 ns/op
Iteration  17: 793.821 ns/op
Iteration  18: 802.416 ns/op
Iteration  19: 800.462 ns/op
Iteration  20: 816.628 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1262.029 ns/op
# Warmup Iteration   2: 938.989 ns/op
# Warmup Iteration   3: 799.678 ns/op
# Warmup Iteration   4: 798.755 ns/op
# Warmup Iteration   5: 801.544 ns/op
Iteration   1: 805.221 ns/op
Iteration   2: 811.380 ns/op
Iteration   3: 793.784 ns/op
Iteration   4: 792.521 ns/op
Iteration   5: 792.248 ns/op
Iteration   6: 792.058 ns/op
Iteration   7: 792.311 ns/op
Iteration   8: 792.594 ns/op
Iteration   9: 793.315 ns/op
Iteration  10: 793.192 ns/op
Iteration  11: 796.155 ns/op
Iteration  12: 797.894 ns/op
Iteration  13: 796.226 ns/op
Iteration  14: 790.586 ns/op
Iteration  15: 793.720 ns/op
Iteration  16: 790.817 ns/op
Iteration  17: 790.900 ns/op
Iteration  18: 792.133 ns/op
Iteration  19: 792.895 ns/op
Iteration  20: 792.688 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1240.329 ns/op
# Warmup Iteration   2: 882.048 ns/op
# Warmup Iteration   3: 749.240 ns/op
# Warmup Iteration   4: 752.568 ns/op
# Warmup Iteration   5: 771.590 ns/op
Iteration   1: 764.083 ns/op
Iteration   2: 746.321 ns/op
Iteration   3: 749.114 ns/op
Iteration   4: 746.112 ns/op
Iteration   5: 746.410 ns/op
Iteration   6: 746.216 ns/op
Iteration   7: 746.076 ns/op
Iteration   8: 746.047 ns/op
Iteration   9: 749.487 ns/op
Iteration  10: 746.478 ns/op
Iteration  11: 745.547 ns/op
Iteration  12: 743.966 ns/op
Iteration  13: 743.816 ns/op
Iteration  14: 744.201 ns/op
Iteration  15: 744.061 ns/op
Iteration  16: 743.850 ns/op
Iteration  17: 744.002 ns/op
Iteration  18: 743.789 ns/op
Iteration  19: 744.848 ns/op
Iteration  20: 746.253 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  777.697 Â±(99.9%) 8.649 ns/op [Average]
  (min, avg, max) = (743.789, 777.697, 818.261), stdev = 25.500
  CI (99.9%): [769.048, 786.345] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	    
	 
		 
, 		 	  
  
 	

    
 	 
 		 	

		 	  	    
	
			 	 
  		    	



	   
	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1262.784 ns/op
# Warmup Iteration   2: 965.862 ns/op
# Warmup Iteration   3: 818.944 ns/op
# Warmup Iteration   4: 821.862 ns/op
# Warmup Iteration   5: 824.936 ns/op
Iteration   1: 829.305 ns/op
Iteration   2: 833.794 ns/op
Iteration   3: 816.975 ns/op
Iteration   4: 815.833 ns/op
Iteration   5: 815.662 ns/op
Iteration   6: 815.255 ns/op
Iteration   7: 815.141 ns/op
Iteration   8: 815.343 ns/op
Iteration   9: 815.332 ns/op
Iteration  10: 816.671 ns/op
Iteration  11: 816.140 ns/op
Iteration  12: 818.047 ns/op
Iteration  13: 813.347 ns/op
Iteration  14: 812.112 ns/op
Iteration  15: 812.821 ns/op
Iteration  16: 814.008 ns/op
Iteration  17: 813.600 ns/op
Iteration  18: 813.245 ns/op
Iteration  19: 813.826 ns/op
Iteration  20: 814.041 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1239.804 ns/op
# Warmup Iteration   2: 953.859 ns/op
# Warmup Iteration   3: 810.737 ns/op
# Warmup Iteration   4: 812.727 ns/op
# Warmup Iteration   5: 815.596 ns/op
Iteration   1: 818.901 ns/op
Iteration   2: 824.564 ns/op
Iteration   3: 805.705 ns/op
Iteration   4: 806.082 ns/op
Iteration   5: 805.845 ns/op
Iteration   6: 805.862 ns/op
Iteration   7: 805.724 ns/op
Iteration   8: 805.738 ns/op
Iteration   9: 805.532 ns/op
Iteration  10: 805.465 ns/op
Iteration  11: 806.095 ns/op
Iteration  12: 804.538 ns/op
Iteration  13: 804.338 ns/op
Iteration  14: 804.237 ns/op
Iteration  15: 805.761 ns/op
Iteration  16: 805.257 ns/op
Iteration  17: 805.786 ns/op
Iteration  18: 804.587 ns/op
Iteration  19: 806.278 ns/op
Iteration  20: 805.870 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1270.061 ns/op
# Warmup Iteration   2: 962.102 ns/op
# Warmup Iteration   3: 816.707 ns/op
# Warmup Iteration   4: 818.326 ns/op
# Warmup Iteration   5: 821.927 ns/op
Iteration   1: 826.127 ns/op
Iteration   2: 830.747 ns/op
Iteration   3: 812.143 ns/op
Iteration   4: 811.887 ns/op
Iteration   5: 812.702 ns/op
Iteration   6: 812.671 ns/op
Iteration   7: 812.617 ns/op
Iteration   8: 812.212 ns/op
Iteration   9: 812.656 ns/op
Iteration  10: 812.512 ns/op
Iteration  11: 812.765 ns/op
Iteration  12: 809.539 ns/op
Iteration  13: 810.181 ns/op
Iteration  14: 810.093 ns/op
Iteration  15: 810.019 ns/op
Iteration  16: 810.306 ns/op
Iteration  17: 810.528 ns/op
Iteration  18: 809.842 ns/op
Iteration  19: 811.442 ns/op
Iteration  20: 816.780 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1282.487 ns/op
# Warmup Iteration   2: 959.543 ns/op
# Warmup Iteration   3: 808.987 ns/op
# Warmup Iteration   4: 812.340 ns/op
# Warmup Iteration   5: 814.399 ns/op
Iteration   1: 819.231 ns/op
Iteration   2: 824.351 ns/op
Iteration   3: 805.487 ns/op
Iteration   4: 805.341 ns/op
Iteration   5: 809.330 ns/op
Iteration   6: 806.171 ns/op
Iteration   7: 805.375 ns/op
Iteration   8: 805.062 ns/op
Iteration   9: 806.225 ns/op
Iteration  10: 807.447 ns/op
Iteration  11: 813.302 ns/op
Iteration  12: 804.131 ns/op
Iteration  13: 820.685 ns/op
Iteration  14: 804.654 ns/op
Iteration  15: 804.151 ns/op
Iteration  16: 803.542 ns/op
Iteration  17: 805.196 ns/op
Iteration  18: 805.753 ns/op
Iteration  19: 805.490 ns/op
Iteration  20: 805.165 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1282.771 ns/op
# Warmup Iteration   2: 977.467 ns/op
# Warmup Iteration   3: 821.836 ns/op
# Warmup Iteration   4: 825.110 ns/op
# Warmup Iteration   5: 827.344 ns/op
Iteration   1: 831.878 ns/op
Iteration   2: 838.056 ns/op
Iteration   3: 818.413 ns/op
Iteration   4: 818.810 ns/op
Iteration   5: 818.765 ns/op
Iteration   6: 818.419 ns/op
Iteration   7: 823.163 ns/op
Iteration   8: 818.887 ns/op
Iteration   9: 818.649 ns/op
Iteration  10: 823.696 ns/op
Iteration  11: 820.317 ns/op
Iteration  12: 819.860 ns/op
Iteration  13: 817.416 ns/op
Iteration  14: 818.446 ns/op
Iteration  15: 818.077 ns/op
Iteration  16: 817.879 ns/op
Iteration  17: 818.407 ns/op
Iteration  18: 818.170 ns/op
Iteration  19: 816.328 ns/op
Iteration  20: 817.751 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  813.179 Â±(99.9%) 2.502 ns/op [Average]
  (min, avg, max) = (803.542, 813.179, 838.056), stdev = 7.379
  CI (99.9%): [810.677, 815.682] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	    
	 
		 
, 		 	  
  
 	

    
 	 
 		 	

		 	  	    
	
			 	 
  		    	



	   
	   avgt  100  777.697 Â± 8.649  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	    
	 
		 
, 		 	  
  
 	

    
 	 
 		 	

		 	  	    
	
			 	 
  		    	



	   
	   avgt  100  813.179 Â± 2.502  ns/op

Benchmark result is saved to split_precompiled_regex_109_182_Match.csv
