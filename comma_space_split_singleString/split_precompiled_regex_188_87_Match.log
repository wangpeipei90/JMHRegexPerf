# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	    
	 	
 	 


		  	 	    	 	
 	
, 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 964.560 ns/op
# Warmup Iteration   2: 594.721 ns/op
# Warmup Iteration   3: 548.341 ns/op
# Warmup Iteration   4: 562.987 ns/op
# Warmup Iteration   5: 556.895 ns/op
Iteration   1: 546.446 ns/op
Iteration   2: 544.065 ns/op
Iteration   3: 543.629 ns/op
Iteration   4: 546.123 ns/op
Iteration   5: 543.424 ns/op
Iteration   6: 545.783 ns/op
Iteration   7: 541.748 ns/op
Iteration   8: 542.333 ns/op
Iteration   9: 541.525 ns/op
Iteration  10: 541.605 ns/op
Iteration  11: 542.428 ns/op
Iteration  12: 541.781 ns/op
Iteration  13: 542.448 ns/op
Iteration  14: 541.420 ns/op
Iteration  15: 543.937 ns/op
Iteration  16: 547.815 ns/op
Iteration  17: 541.960 ns/op
Iteration  18: 543.570 ns/op
Iteration  19: 542.192 ns/op
Iteration  20: 546.016 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 968.918 ns/op
# Warmup Iteration   2: 595.666 ns/op
# Warmup Iteration   3: 550.726 ns/op
# Warmup Iteration   4: 565.083 ns/op
# Warmup Iteration   5: 559.862 ns/op
Iteration   1: 549.087 ns/op
Iteration   2: 546.470 ns/op
Iteration   3: 546.777 ns/op
Iteration   4: 549.205 ns/op
Iteration   5: 546.963 ns/op
Iteration   6: 549.032 ns/op
Iteration   7: 545.093 ns/op
Iteration   8: 544.919 ns/op
Iteration   9: 545.672 ns/op
Iteration  10: 547.117 ns/op
Iteration  11: 548.735 ns/op
Iteration  12: 545.608 ns/op
Iteration  13: 546.592 ns/op
Iteration  14: 545.984 ns/op
Iteration  15: 545.622 ns/op
Iteration  16: 548.996 ns/op
Iteration  17: 546.979 ns/op
Iteration  18: 550.235 ns/op
Iteration  19: 547.293 ns/op
Iteration  20: 546.306 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 963.177 ns/op
# Warmup Iteration   2: 594.513 ns/op
# Warmup Iteration   3: 548.666 ns/op
# Warmup Iteration   4: 563.147 ns/op
# Warmup Iteration   5: 554.986 ns/op
Iteration   1: 546.367 ns/op
Iteration   2: 543.549 ns/op
Iteration   3: 543.954 ns/op
Iteration   4: 546.782 ns/op
Iteration   5: 544.157 ns/op
Iteration   6: 547.122 ns/op
Iteration   7: 542.247 ns/op
Iteration   8: 543.132 ns/op
Iteration   9: 541.874 ns/op
Iteration  10: 541.915 ns/op
Iteration  11: 543.526 ns/op
Iteration  12: 542.816 ns/op
Iteration  13: 543.810 ns/op
Iteration  14: 542.596 ns/op
Iteration  15: 544.250 ns/op
Iteration  16: 542.032 ns/op
Iteration  17: 542.115 ns/op
Iteration  18: 543.592 ns/op
Iteration  19: 542.377 ns/op
Iteration  20: 543.906 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 962.686 ns/op
# Warmup Iteration   2: 596.013 ns/op
# Warmup Iteration   3: 553.359 ns/op
# Warmup Iteration   4: 567.484 ns/op
# Warmup Iteration   5: 566.993 ns/op
Iteration   1: 551.787 ns/op
Iteration   2: 548.879 ns/op
Iteration   3: 548.787 ns/op
Iteration   4: 550.766 ns/op
Iteration   5: 548.446 ns/op
Iteration   6: 554.810 ns/op
Iteration   7: 546.956 ns/op
Iteration   8: 546.647 ns/op
Iteration   9: 547.661 ns/op
Iteration  10: 546.742 ns/op
Iteration  11: 548.728 ns/op
Iteration  12: 547.271 ns/op
Iteration  13: 547.515 ns/op
Iteration  14: 549.518 ns/op
Iteration  15: 547.547 ns/op
Iteration  16: 548.566 ns/op
Iteration  17: 546.987 ns/op
Iteration  18: 547.985 ns/op
Iteration  19: 547.488 ns/op
Iteration  20: 546.968 ns/op

# Run progress: 40.00% complete, ETA 00:02:32
# Fork: 5 of 5
# Warmup Iteration   1: 963.137 ns/op
# Warmup Iteration   2: 595.357 ns/op
# Warmup Iteration   3: 550.067 ns/op
# Warmup Iteration   4: 564.862 ns/op
# Warmup Iteration   5: 558.352 ns/op
Iteration   1: 548.237 ns/op
Iteration   2: 545.050 ns/op
Iteration   3: 545.586 ns/op
Iteration   4: 548.303 ns/op
Iteration   5: 545.453 ns/op
Iteration   6: 551.019 ns/op
Iteration   7: 543.799 ns/op
Iteration   8: 545.350 ns/op
Iteration   9: 543.233 ns/op
Iteration  10: 544.074 ns/op
Iteration  11: 545.112 ns/op
Iteration  12: 543.561 ns/op
Iteration  13: 545.339 ns/op
Iteration  14: 545.609 ns/op
Iteration  15: 544.477 ns/op
Iteration  16: 559.067 ns/op
Iteration  17: 547.136 ns/op
Iteration  18: 544.751 ns/op
Iteration  19: 545.817 ns/op
Iteration  20: 543.696 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  545.798 ±(99.9%) 1.004 ns/op [Average]
  (min, avg, max) = (541.420, 545.798, 559.067), stdev = 2.961
  CI (99.9%): [544.793, 546.802] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	    
	 	
 	 


		  	 	    	 	
 	
, 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1004.612 ns/op
# Warmup Iteration   2: 629.892 ns/op
# Warmup Iteration   3: 572.550 ns/op
# Warmup Iteration   4: 587.607 ns/op
# Warmup Iteration   5: 579.603 ns/op
Iteration   1: 568.031 ns/op
Iteration   2: 571.191 ns/op
Iteration   3: 567.440 ns/op
Iteration   4: 571.446 ns/op
Iteration   5: 567.354 ns/op
Iteration   6: 567.382 ns/op
Iteration   7: 569.509 ns/op
Iteration   8: 565.715 ns/op
Iteration   9: 569.671 ns/op
Iteration  10: 566.897 ns/op
Iteration  11: 566.720 ns/op
Iteration  12: 568.081 ns/op
Iteration  13: 566.525 ns/op
Iteration  14: 568.563 ns/op
Iteration  15: 566.357 ns/op
Iteration  16: 566.709 ns/op
Iteration  17: 568.501 ns/op
Iteration  18: 566.673 ns/op
Iteration  19: 572.268 ns/op
Iteration  20: 572.604 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 982.340 ns/op
# Warmup Iteration   2: 597.165 ns/op
# Warmup Iteration   3: 555.450 ns/op
# Warmup Iteration   4: 569.787 ns/op
# Warmup Iteration   5: 564.136 ns/op
Iteration   1: 553.993 ns/op
Iteration   2: 551.070 ns/op
Iteration   3: 553.477 ns/op
Iteration   4: 551.367 ns/op
Iteration   5: 551.293 ns/op
Iteration   6: 553.215 ns/op
Iteration   7: 549.582 ns/op
Iteration   8: 551.086 ns/op
Iteration   9: 549.773 ns/op
Iteration  10: 550.885 ns/op
Iteration  11: 549.758 ns/op
Iteration  12: 550.680 ns/op
Iteration  13: 549.630 ns/op
Iteration  14: 550.155 ns/op
Iteration  15: 551.994 ns/op
Iteration  16: 550.147 ns/op
Iteration  17: 552.233 ns/op
Iteration  18: 550.453 ns/op
Iteration  19: 554.110 ns/op
Iteration  20: 550.988 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1035.311 ns/op
# Warmup Iteration   2: 630.664 ns/op
# Warmup Iteration   3: 572.563 ns/op
# Warmup Iteration   4: 586.538 ns/op
# Warmup Iteration   5: 580.408 ns/op
Iteration   1: 566.966 ns/op
Iteration   2: 570.209 ns/op
Iteration   3: 567.652 ns/op
Iteration   4: 569.684 ns/op
Iteration   5: 567.045 ns/op
Iteration   6: 567.670 ns/op
Iteration   7: 568.247 ns/op
Iteration   8: 565.647 ns/op
Iteration   9: 566.924 ns/op
Iteration  10: 566.010 ns/op
Iteration  11: 565.655 ns/op
Iteration  12: 567.280 ns/op
Iteration  13: 565.915 ns/op
Iteration  14: 566.730 ns/op
Iteration  15: 565.599 ns/op
Iteration  16: 566.010 ns/op
Iteration  17: 582.523 ns/op
Iteration  18: 566.766 ns/op
Iteration  19: 571.553 ns/op
Iteration  20: 565.982 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1057.812 ns/op
# Warmup Iteration   2: 673.774 ns/op
# Warmup Iteration   3: 611.640 ns/op
# Warmup Iteration   4: 616.894 ns/op
# Warmup Iteration   5: 630.541 ns/op
Iteration   1: 610.352 ns/op
Iteration   2: 607.437 ns/op
Iteration   3: 609.783 ns/op
Iteration   4: 606.962 ns/op
Iteration   5: 606.213 ns/op
Iteration   6: 608.273 ns/op
Iteration   7: 605.951 ns/op
Iteration   8: 604.842 ns/op
Iteration   9: 609.454 ns/op
Iteration  10: 605.600 ns/op
Iteration  11: 604.948 ns/op
Iteration  12: 605.377 ns/op
Iteration  13: 609.224 ns/op
Iteration  14: 607.142 ns/op
Iteration  15: 606.155 ns/op
Iteration  16: 608.766 ns/op
Iteration  17: 608.169 ns/op
Iteration  18: 606.330 ns/op
Iteration  19: 610.781 ns/op
Iteration  20: 607.807 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 983.638 ns/op
# Warmup Iteration   2: 605.192 ns/op
# Warmup Iteration   3: 562.088 ns/op
# Warmup Iteration   4: 577.292 ns/op
# Warmup Iteration   5: 571.370 ns/op
Iteration   1: 561.239 ns/op
Iteration   2: 558.410 ns/op
Iteration   3: 557.395 ns/op
Iteration   4: 561.771 ns/op
Iteration   5: 557.521 ns/op
Iteration   6: 560.569 ns/op
Iteration   7: 556.400 ns/op
Iteration   8: 558.401 ns/op
Iteration   9: 556.187 ns/op
Iteration  10: 556.519 ns/op
Iteration  11: 557.602 ns/op
Iteration  12: 556.478 ns/op
Iteration  13: 562.431 ns/op
Iteration  14: 558.965 ns/op
Iteration  15: 556.231 ns/op
Iteration  16: 557.452 ns/op
Iteration  17: 557.649 ns/op
Iteration  18: 558.866 ns/op
Iteration  19: 557.483 ns/op
Iteration  20: 561.027 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  570.718 ±(99.9%) 6.678 ns/op [Average]
  (min, avg, max) = (549.582, 570.718, 610.781), stdev = 19.689
  CI (99.9%): [564.040, 577.395] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	    
	 	
 	 


		  	 	    	 	
 	
, 	  avgt  100  545.798 ± 1.004  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	    
	 	
 	 


		  	 	    	 	
 	
, 	  avgt  100  570.718 ± 6.678  ns/op

Benchmark result is saved to split_precompiled_regex_188_87_Match.csv
