# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  			
	
 		 	
			
	
	
	


 


 	
	  
    	  	  

	
		
,

	 	  
	 

			 

		

	  	 

			

 	 	  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1209.655 ns/op
# Warmup Iteration   2: 931.584 ns/op
# Warmup Iteration   3: 790.626 ns/op
# Warmup Iteration   4: 793.514 ns/op
# Warmup Iteration   5: 796.187 ns/op
Iteration   1: 803.688 ns/op
Iteration   2: 807.585 ns/op
Iteration   3: 788.176 ns/op
Iteration   4: 787.704 ns/op
Iteration   5: 786.784 ns/op
Iteration   6: 788.109 ns/op
Iteration   7: 787.589 ns/op
Iteration   8: 787.876 ns/op
Iteration   9: 788.286 ns/op
Iteration  10: 788.035 ns/op
Iteration  11: 789.693 ns/op
Iteration  12: 785.124 ns/op
Iteration  13: 785.457 ns/op
Iteration  14: 785.388 ns/op
Iteration  15: 789.927 ns/op
Iteration  16: 791.279 ns/op
Iteration  17: 786.577 ns/op
Iteration  18: 785.887 ns/op
Iteration  19: 786.385 ns/op
Iteration  20: 787.424 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1205.746 ns/op
# Warmup Iteration   2: 922.556 ns/op
# Warmup Iteration   3: 790.465 ns/op
# Warmup Iteration   4: 792.955 ns/op
# Warmup Iteration   5: 797.303 ns/op
Iteration   1: 802.741 ns/op
Iteration   2: 805.582 ns/op
Iteration   3: 788.207 ns/op
Iteration   4: 787.162 ns/op
Iteration   5: 787.479 ns/op
Iteration   6: 789.538 ns/op
Iteration   7: 786.919 ns/op
Iteration   8: 786.660 ns/op
Iteration   9: 787.315 ns/op
Iteration  10: 787.311 ns/op
Iteration  11: 788.061 ns/op
Iteration  12: 784.233 ns/op
Iteration  13: 785.396 ns/op
Iteration  14: 784.389 ns/op
Iteration  15: 784.460 ns/op
Iteration  16: 785.239 ns/op
Iteration  17: 786.460 ns/op
Iteration  18: 784.635 ns/op
Iteration  19: 784.479 ns/op
Iteration  20: 785.073 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1213.803 ns/op
# Warmup Iteration   2: 923.185 ns/op
# Warmup Iteration   3: 787.453 ns/op
# Warmup Iteration   4: 791.932 ns/op
# Warmup Iteration   5: 794.043 ns/op
Iteration   1: 798.262 ns/op
Iteration   2: 803.684 ns/op
Iteration   3: 787.448 ns/op
Iteration   4: 785.145 ns/op
Iteration   5: 784.072 ns/op
Iteration   6: 784.473 ns/op
Iteration   7: 784.515 ns/op
Iteration   8: 785.609 ns/op
Iteration   9: 785.318 ns/op
Iteration  10: 785.940 ns/op
Iteration  11: 786.545 ns/op
Iteration  12: 783.446 ns/op
Iteration  13: 783.426 ns/op
Iteration  14: 783.384 ns/op
Iteration  15: 783.783 ns/op
Iteration  16: 785.505 ns/op
Iteration  17: 785.871 ns/op
Iteration  18: 785.849 ns/op
Iteration  19: 785.788 ns/op
Iteration  20: 785.072 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1164.039 ns/op
# Warmup Iteration   2: 862.315 ns/op
# Warmup Iteration   3: 748.410 ns/op
# Warmup Iteration   4: 760.202 ns/op
# Warmup Iteration   5: 771.189 ns/op
Iteration   1: 761.765 ns/op
Iteration   2: 744.970 ns/op
Iteration   3: 744.969 ns/op
Iteration   4: 744.831 ns/op
Iteration   5: 744.437 ns/op
Iteration   6: 744.634 ns/op
Iteration   7: 744.738 ns/op
Iteration   8: 744.757 ns/op
Iteration   9: 745.037 ns/op
Iteration  10: 745.444 ns/op
Iteration  11: 743.160 ns/op
Iteration  12: 742.398 ns/op
Iteration  13: 742.239 ns/op
Iteration  14: 742.363 ns/op
Iteration  15: 742.466 ns/op
Iteration  16: 742.792 ns/op
Iteration  17: 742.983 ns/op
Iteration  18: 742.868 ns/op
Iteration  19: 743.006 ns/op
Iteration  20: 743.501 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1227.810 ns/op
# Warmup Iteration   2: 936.757 ns/op
# Warmup Iteration   3: 790.215 ns/op
# Warmup Iteration   4: 793.102 ns/op
# Warmup Iteration   5: 794.984 ns/op
Iteration   1: 799.951 ns/op
Iteration   2: 805.021 ns/op
Iteration   3: 786.594 ns/op
Iteration   4: 786.773 ns/op
Iteration   5: 786.462 ns/op
Iteration   6: 786.305 ns/op
Iteration   7: 786.870 ns/op
Iteration   8: 786.517 ns/op
Iteration   9: 785.938 ns/op
Iteration  10: 787.830 ns/op
Iteration  11: 788.715 ns/op
Iteration  12: 792.049 ns/op
Iteration  13: 795.276 ns/op
Iteration  14: 784.847 ns/op
Iteration  15: 784.654 ns/op
Iteration  16: 785.298 ns/op
Iteration  17: 785.246 ns/op
Iteration  18: 785.593 ns/op
Iteration  19: 785.312 ns/op
Iteration  20: 785.969 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  779.460 Â±(99.9%) 6.192 ns/op [Average]
  (min, avg, max) = (742.239, 779.460, 807.585), stdev = 18.256
  CI (99.9%): [773.269, 785.652] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  			
	
 		 	
			
	
	
	


 


 	
	  
    	  	  

	
		
,

	 	  
	 

			 

		

	  	 

			

 	 	  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1222.594 ns/op
# Warmup Iteration   2: 929.581 ns/op
# Warmup Iteration   3: 798.966 ns/op
# Warmup Iteration   4: 805.875 ns/op
# Warmup Iteration   5: 804.293 ns/op
Iteration   1: 808.853 ns/op
Iteration   2: 812.686 ns/op
Iteration   3: 794.369 ns/op
Iteration   4: 795.013 ns/op
Iteration   5: 794.718 ns/op
Iteration   6: 794.657 ns/op
Iteration   7: 794.921 ns/op
Iteration   8: 795.135 ns/op
Iteration   9: 799.873 ns/op
Iteration  10: 795.479 ns/op
Iteration  11: 795.002 ns/op
Iteration  12: 792.343 ns/op
Iteration  13: 793.135 ns/op
Iteration  14: 792.414 ns/op
Iteration  15: 792.634 ns/op
Iteration  16: 793.054 ns/op
Iteration  17: 793.191 ns/op
Iteration  18: 793.616 ns/op
Iteration  19: 793.429 ns/op
Iteration  20: 793.703 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1288.171 ns/op
# Warmup Iteration   2: 982.329 ns/op
# Warmup Iteration   3: 824.669 ns/op
# Warmup Iteration   4: 827.054 ns/op
# Warmup Iteration   5: 829.687 ns/op
Iteration   1: 834.742 ns/op
Iteration   2: 839.872 ns/op
Iteration   3: 819.564 ns/op
Iteration   4: 819.781 ns/op
Iteration   5: 820.011 ns/op
Iteration   6: 823.775 ns/op
Iteration   7: 819.957 ns/op
Iteration   8: 820.265 ns/op
Iteration   9: 821.471 ns/op
Iteration  10: 820.826 ns/op
Iteration  11: 824.237 ns/op
Iteration  12: 818.423 ns/op
Iteration  13: 818.347 ns/op
Iteration  14: 818.636 ns/op
Iteration  15: 817.930 ns/op
Iteration  16: 819.103 ns/op
Iteration  17: 820.019 ns/op
Iteration  18: 819.786 ns/op
Iteration  19: 819.875 ns/op
Iteration  20: 815.677 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1279.978 ns/op
# Warmup Iteration   2: 981.202 ns/op
# Warmup Iteration   3: 837.028 ns/op
# Warmup Iteration   4: 838.448 ns/op
# Warmup Iteration   5: 842.192 ns/op
Iteration   1: 846.550 ns/op
Iteration   2: 851.719 ns/op
Iteration   3: 835.546 ns/op
Iteration   4: 832.299 ns/op
Iteration   5: 832.105 ns/op
Iteration   6: 831.231 ns/op
Iteration   7: 831.820 ns/op
Iteration   8: 833.059 ns/op
Iteration   9: 835.344 ns/op
Iteration  10: 836.859 ns/op
Iteration  11: 839.052 ns/op
Iteration  12: 849.309 ns/op
Iteration  13: 831.356 ns/op
Iteration  14: 828.509 ns/op
Iteration  15: 831.432 ns/op
Iteration  16: 831.075 ns/op
Iteration  17: 831.703 ns/op
Iteration  18: 834.656 ns/op
Iteration  19: 834.459 ns/op
Iteration  20: 836.288 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1283.213 ns/op
# Warmup Iteration   2: 981.888 ns/op
# Warmup Iteration   3: 828.037 ns/op
# Warmup Iteration   4: 834.695 ns/op
# Warmup Iteration   5: 833.156 ns/op
Iteration   1: 837.229 ns/op
Iteration   2: 843.403 ns/op
Iteration   3: 823.370 ns/op
Iteration   4: 823.671 ns/op
Iteration   5: 824.338 ns/op
Iteration   6: 823.505 ns/op
Iteration   7: 823.457 ns/op
Iteration   8: 837.084 ns/op
Iteration   9: 824.545 ns/op
Iteration  10: 826.331 ns/op
Iteration  11: 823.575 ns/op
Iteration  12: 823.359 ns/op
Iteration  13: 821.446 ns/op
Iteration  14: 821.718 ns/op
Iteration  15: 821.212 ns/op
Iteration  16: 821.588 ns/op
Iteration  17: 821.896 ns/op
Iteration  18: 819.372 ns/op
Iteration  19: 823.414 ns/op
Iteration  20: 822.288 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1211.466 ns/op
# Warmup Iteration   2: 871.178 ns/op
# Warmup Iteration   3: 751.577 ns/op
# Warmup Iteration   4: 766.789 ns/op
# Warmup Iteration   5: 760.746 ns/op
Iteration   1: 765.683 ns/op
Iteration   2: 747.968 ns/op
Iteration   3: 748.207 ns/op
Iteration   4: 747.358 ns/op
Iteration   5: 748.692 ns/op
Iteration   6: 747.206 ns/op
Iteration   7: 747.742 ns/op
Iteration   8: 747.790 ns/op
Iteration   9: 746.975 ns/op
Iteration  10: 747.185 ns/op
Iteration  11: 744.951 ns/op
Iteration  12: 744.710 ns/op
Iteration  13: 744.439 ns/op
Iteration  14: 744.908 ns/op
Iteration  15: 744.684 ns/op
Iteration  16: 746.308 ns/op
Iteration  17: 744.579 ns/op
Iteration  18: 751.387 ns/op
Iteration  19: 746.119 ns/op
Iteration  20: 745.135 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  805.237 Â±(99.9%) 10.956 ns/op [Average]
  (min, avg, max) = (744.439, 805.237, 851.719), stdev = 32.303
  CI (99.9%): [794.282, 816.193] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                             (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   			
	
 		 	
			
	
	
	


 


 	
	  
    	  	  

	
		
,

	 	  
	 

			 

		

	  	 

			

 	 	    avgt  100  779.460 Â±  6.192  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   			
	
 		 	
			
	
	
	


 


 	
	  
    	  	  

	
		
,

	 	  
	 

			 

		

	  	 

			

 	 	    avgt  100  805.237 Â± 10.956  ns/op

Benchmark result is saved to split_precompiled_regex_185_196_Match.csv
