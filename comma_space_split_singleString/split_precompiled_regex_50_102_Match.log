# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	
	 

 	
  	
 	   	
		 	 	,	 	
	 
			
     
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1013.936 ns/op
# Warmup Iteration   2: 645.988 ns/op
# Warmup Iteration   3: 580.877 ns/op
# Warmup Iteration   4: 595.393 ns/op
# Warmup Iteration   5: 591.482 ns/op
Iteration   1: 575.534 ns/op
Iteration   2: 578.514 ns/op
Iteration   3: 575.240 ns/op
Iteration   4: 575.945 ns/op
Iteration   5: 578.261 ns/op
Iteration   6: 574.973 ns/op
Iteration   7: 575.467 ns/op
Iteration   8: 574.592 ns/op
Iteration   9: 573.494 ns/op
Iteration  10: 573.566 ns/op
Iteration  11: 574.604 ns/op
Iteration  12: 578.145 ns/op
Iteration  13: 573.878 ns/op
Iteration  14: 576.133 ns/op
Iteration  15: 573.801 ns/op
Iteration  16: 574.470 ns/op
Iteration  17: 576.467 ns/op
Iteration  18: 574.089 ns/op
Iteration  19: 574.758 ns/op
Iteration  20: 575.539 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 991.240 ns/op
# Warmup Iteration   2: 627.092 ns/op
# Warmup Iteration   3: 575.561 ns/op
# Warmup Iteration   4: 590.519 ns/op
# Warmup Iteration   5: 584.538 ns/op
Iteration   1: 571.796 ns/op
Iteration   2: 573.121 ns/op
Iteration   3: 570.063 ns/op
Iteration   4: 575.302 ns/op
Iteration   5: 573.030 ns/op
Iteration   6: 570.347 ns/op
Iteration   7: 571.037 ns/op
Iteration   8: 570.453 ns/op
Iteration   9: 569.127 ns/op
Iteration  10: 569.107 ns/op
Iteration  11: 574.406 ns/op
Iteration  12: 569.483 ns/op
Iteration  13: 572.005 ns/op
Iteration  14: 569.500 ns/op
Iteration  15: 569.890 ns/op
Iteration  16: 573.958 ns/op
Iteration  17: 571.050 ns/op
Iteration  18: 570.790 ns/op
Iteration  19: 572.007 ns/op
Iteration  20: 571.349 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 995.106 ns/op
# Warmup Iteration   2: 630.769 ns/op
# Warmup Iteration   3: 577.295 ns/op
# Warmup Iteration   4: 593.225 ns/op
# Warmup Iteration   5: 586.190 ns/op
Iteration   1: 572.835 ns/op
Iteration   2: 575.158 ns/op
Iteration   3: 572.383 ns/op
Iteration   4: 572.466 ns/op
Iteration   5: 575.385 ns/op
Iteration   6: 572.640 ns/op
Iteration   7: 573.497 ns/op
Iteration   8: 573.079 ns/op
Iteration   9: 570.678 ns/op
Iteration  10: 570.670 ns/op
Iteration  11: 571.722 ns/op
Iteration  12: 571.252 ns/op
Iteration  13: 571.453 ns/op
Iteration  14: 573.607 ns/op
Iteration  15: 571.279 ns/op
Iteration  16: 574.566 ns/op
Iteration  17: 572.003 ns/op
Iteration  18: 572.685 ns/op
Iteration  19: 575.362 ns/op
Iteration  20: 605.329 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 998.837 ns/op
# Warmup Iteration   2: 632.533 ns/op
# Warmup Iteration   3: 578.185 ns/op
# Warmup Iteration   4: 591.905 ns/op
# Warmup Iteration   5: 586.388 ns/op
Iteration   1: 572.295 ns/op
Iteration   2: 575.774 ns/op
Iteration   3: 573.142 ns/op
Iteration   4: 572.901 ns/op
Iteration   5: 575.483 ns/op
Iteration   6: 572.205 ns/op
Iteration   7: 573.160 ns/op
Iteration   8: 572.706 ns/op
Iteration   9: 571.742 ns/op
Iteration  10: 571.863 ns/op
Iteration  11: 572.773 ns/op
Iteration  12: 571.751 ns/op
Iteration  13: 573.694 ns/op
Iteration  14: 575.706 ns/op
Iteration  15: 573.709 ns/op
Iteration  16: 572.980 ns/op
Iteration  17: 574.384 ns/op
Iteration  18: 572.849 ns/op
Iteration  19: 575.834 ns/op
Iteration  20: 573.237 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1042.131 ns/op
# Warmup Iteration   2: 664.665 ns/op
# Warmup Iteration   3: 594.686 ns/op
# Warmup Iteration   4: 597.547 ns/op
# Warmup Iteration   5: 618.201 ns/op
Iteration   1: 590.314 ns/op
Iteration   2: 590.794 ns/op
Iteration   3: 594.174 ns/op
Iteration   4: 591.025 ns/op
Iteration   5: 591.319 ns/op
Iteration   6: 593.589 ns/op
Iteration   7: 592.969 ns/op
Iteration   8: 591.867 ns/op
Iteration   9: 588.298 ns/op
Iteration  10: 593.273 ns/op
Iteration  11: 588.614 ns/op
Iteration  12: 588.262 ns/op
Iteration  13: 589.742 ns/op
Iteration  14: 588.109 ns/op
Iteration  15: 588.241 ns/op
Iteration  16: 593.496 ns/op
Iteration  17: 589.184 ns/op
Iteration  18: 588.644 ns/op
Iteration  19: 590.650 ns/op
Iteration  20: 589.896 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  577.040 ±(99.9%) 2.652 ns/op [Average]
  (min, avg, max) = (569.107, 577.040, 605.329), stdev = 7.819
  CI (99.9%): [574.388, 579.692] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	
	 

 	
  	
 	   	
		 	 	,	 	
	 
			
     
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1052.202 ns/op
# Warmup Iteration   2: 649.677 ns/op
# Warmup Iteration   3: 587.031 ns/op
# Warmup Iteration   4: 602.546 ns/op
# Warmup Iteration   5: 595.542 ns/op
Iteration   1: 581.997 ns/op
Iteration   2: 583.965 ns/op
Iteration   3: 581.953 ns/op
Iteration   4: 581.964 ns/op
Iteration   5: 584.335 ns/op
Iteration   6: 582.194 ns/op
Iteration   7: 582.178 ns/op
Iteration   8: 581.234 ns/op
Iteration   9: 580.262 ns/op
Iteration  10: 581.136 ns/op
Iteration  11: 579.843 ns/op
Iteration  12: 579.889 ns/op
Iteration  13: 581.413 ns/op
Iteration  14: 580.618 ns/op
Iteration  15: 580.268 ns/op
Iteration  16: 585.697 ns/op
Iteration  17: 582.724 ns/op
Iteration  18: 580.995 ns/op
Iteration  19: 582.310 ns/op
Iteration  20: 581.142 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1062.775 ns/op
# Warmup Iteration   2: 664.472 ns/op
# Warmup Iteration   3: 599.186 ns/op
# Warmup Iteration   4: 610.212 ns/op
# Warmup Iteration   5: 609.706 ns/op
Iteration   1: 593.325 ns/op
Iteration   2: 592.883 ns/op
Iteration   3: 595.229 ns/op
Iteration   4: 592.663 ns/op
Iteration   5: 592.666 ns/op
Iteration   6: 595.451 ns/op
Iteration   7: 593.009 ns/op
Iteration   8: 590.841 ns/op
Iteration   9: 592.008 ns/op
Iteration  10: 591.097 ns/op
Iteration  11: 591.170 ns/op
Iteration  12: 592.112 ns/op
Iteration  13: 591.004 ns/op
Iteration  14: 591.867 ns/op
Iteration  15: 590.957 ns/op
Iteration  16: 597.083 ns/op
Iteration  17: 594.316 ns/op
Iteration  18: 591.731 ns/op
Iteration  19: 591.676 ns/op
Iteration  20: 593.560 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1060.785 ns/op
# Warmup Iteration   2: 655.692 ns/op
# Warmup Iteration   3: 589.303 ns/op
# Warmup Iteration   4: 604.133 ns/op
# Warmup Iteration   5: 596.717 ns/op
Iteration   1: 584.619 ns/op
Iteration   2: 587.301 ns/op
Iteration   3: 584.233 ns/op
Iteration   4: 584.181 ns/op
Iteration   5: 586.572 ns/op
Iteration   6: 584.696 ns/op
Iteration   7: 584.527 ns/op
Iteration   8: 583.412 ns/op
Iteration   9: 582.528 ns/op
Iteration  10: 582.401 ns/op
Iteration  11: 583.126 ns/op
Iteration  12: 582.705 ns/op
Iteration  13: 583.162 ns/op
Iteration  14: 591.060 ns/op
Iteration  15: 583.015 ns/op
Iteration  16: 587.151 ns/op
Iteration  17: 584.861 ns/op
Iteration  18: 584.807 ns/op
Iteration  19: 585.119 ns/op
Iteration  20: 583.134 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1056.668 ns/op
# Warmup Iteration   2: 669.484 ns/op
# Warmup Iteration   3: 597.158 ns/op
# Warmup Iteration   4: 610.899 ns/op
# Warmup Iteration   5: 615.397 ns/op
Iteration   1: 597.402 ns/op
Iteration   2: 592.882 ns/op
Iteration   3: 597.093 ns/op
Iteration   4: 592.121 ns/op
Iteration   5: 591.063 ns/op
Iteration   6: 595.316 ns/op
Iteration   7: 595.551 ns/op
Iteration   8: 594.321 ns/op
Iteration   9: 590.739 ns/op
Iteration  10: 589.421 ns/op
Iteration  11: 589.423 ns/op
Iteration  12: 590.503 ns/op
Iteration  13: 590.471 ns/op
Iteration  14: 590.185 ns/op
Iteration  15: 591.507 ns/op
Iteration  16: 589.506 ns/op
Iteration  17: 594.489 ns/op
Iteration  18: 590.890 ns/op
Iteration  19: 589.676 ns/op
Iteration  20: 592.957 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1047.885 ns/op
# Warmup Iteration   2: 658.692 ns/op
# Warmup Iteration   3: 595.544 ns/op
# Warmup Iteration   4: 611.203 ns/op
# Warmup Iteration   5: 605.035 ns/op
Iteration   1: 590.736 ns/op
Iteration   2: 593.226 ns/op
Iteration   3: 590.820 ns/op
Iteration   4: 590.582 ns/op
Iteration   5: 593.399 ns/op
Iteration   6: 591.342 ns/op
Iteration   7: 590.720 ns/op
Iteration   8: 590.661 ns/op
Iteration   9: 589.418 ns/op
Iteration  10: 593.847 ns/op
Iteration  11: 592.697 ns/op
Iteration  12: 590.414 ns/op
Iteration  13: 590.701 ns/op
Iteration  14: 593.218 ns/op
Iteration  15: 590.347 ns/op
Iteration  16: 590.160 ns/op
Iteration  17: 593.944 ns/op
Iteration  18: 590.828 ns/op
Iteration  19: 591.071 ns/op
Iteration  20: 591.850 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  588.589 ±(99.9%) 1.657 ns/op [Average]
  (min, avg, max) = (579.843, 588.589, 597.402), stdev = 4.885
  CI (99.9%): [586.932, 590.246] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	
	 

 	
  	
 	   	
		 	 	,	 	
	 
			
     
		  avgt  100  577.040 ± 2.652  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	
	 

 	
  	
 	   	
		 	 	,	 	
	 
			
     
		  avgt  100  588.589 ± 1.657  ns/op

Benchmark result is saved to split_precompiled_regex_50_102_Match.csv
