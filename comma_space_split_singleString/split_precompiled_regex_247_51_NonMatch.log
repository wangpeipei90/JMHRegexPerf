# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = *hh<I`eD@x)
o>x5Hx~e(OH[Bj(&b(-XT7 ${aqTWG"|T]A:)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1010.715 ns/op
# Warmup Iteration   2: 773.677 ns/op
# Warmup Iteration   3: 667.502 ns/op
# Warmup Iteration   4: 668.682 ns/op
# Warmup Iteration   5: 672.030 ns/op
Iteration   1: 675.714 ns/op
Iteration   2: 677.576 ns/op
Iteration   3: 665.348 ns/op
Iteration   4: 663.894 ns/op
Iteration   5: 663.763 ns/op
Iteration   6: 663.569 ns/op
Iteration   7: 663.536 ns/op
Iteration   8: 663.634 ns/op
Iteration   9: 664.129 ns/op
Iteration  10: 664.474 ns/op
Iteration  11: 663.922 ns/op
Iteration  12: 662.058 ns/op
Iteration  13: 662.148 ns/op
Iteration  14: 666.248 ns/op
Iteration  15: 661.665 ns/op
Iteration  16: 661.257 ns/op
Iteration  17: 661.400 ns/op
Iteration  18: 661.261 ns/op
Iteration  19: 661.718 ns/op
Iteration  20: 661.630 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1010.622 ns/op
# Warmup Iteration   2: 774.746 ns/op
# Warmup Iteration   3: 672.673 ns/op
# Warmup Iteration   4: 674.453 ns/op
# Warmup Iteration   5: 677.614 ns/op
Iteration   1: 681.049 ns/op
Iteration   2: 684.763 ns/op
Iteration   3: 670.403 ns/op
Iteration   4: 669.776 ns/op
Iteration   5: 669.427 ns/op
Iteration   6: 669.666 ns/op
Iteration   7: 671.421 ns/op
Iteration   8: 669.583 ns/op
Iteration   9: 669.005 ns/op
Iteration  10: 669.075 ns/op
Iteration  11: 669.458 ns/op
Iteration  12: 667.461 ns/op
Iteration  13: 667.370 ns/op
Iteration  14: 667.208 ns/op
Iteration  15: 667.184 ns/op
Iteration  16: 667.377 ns/op
Iteration  17: 667.374 ns/op
Iteration  18: 667.313 ns/op
Iteration  19: 668.517 ns/op
Iteration  20: 667.963 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1014.366 ns/op
# Warmup Iteration   2: 779.669 ns/op
# Warmup Iteration   3: 667.217 ns/op
# Warmup Iteration   4: 668.315 ns/op
# Warmup Iteration   5: 671.710 ns/op
Iteration   1: 676.563 ns/op
Iteration   2: 679.243 ns/op
Iteration   3: 664.095 ns/op
Iteration   4: 663.507 ns/op
Iteration   5: 663.559 ns/op
Iteration   6: 663.593 ns/op
Iteration   7: 662.802 ns/op
Iteration   8: 662.656 ns/op
Iteration   9: 663.232 ns/op
Iteration  10: 662.656 ns/op
Iteration  11: 662.398 ns/op
Iteration  12: 660.493 ns/op
Iteration  13: 660.405 ns/op
Iteration  14: 661.673 ns/op
Iteration  15: 660.738 ns/op
Iteration  16: 660.791 ns/op
Iteration  17: 660.746 ns/op
Iteration  18: 660.622 ns/op
Iteration  19: 665.355 ns/op
Iteration  20: 662.314 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1010.353 ns/op
# Warmup Iteration   2: 772.945 ns/op
# Warmup Iteration   3: 670.179 ns/op
# Warmup Iteration   4: 668.739 ns/op
# Warmup Iteration   5: 671.663 ns/op
Iteration   1: 674.907 ns/op
Iteration   2: 678.988 ns/op
Iteration   3: 664.406 ns/op
Iteration   4: 663.464 ns/op
Iteration   5: 663.171 ns/op
Iteration   6: 662.994 ns/op
Iteration   7: 663.308 ns/op
Iteration   8: 663.054 ns/op
Iteration   9: 662.167 ns/op
Iteration  10: 663.198 ns/op
Iteration  11: 663.169 ns/op
Iteration  12: 662.663 ns/op
Iteration  13: 662.924 ns/op
Iteration  14: 661.950 ns/op
Iteration  15: 662.057 ns/op
Iteration  16: 662.067 ns/op
Iteration  17: 662.413 ns/op
Iteration  18: 667.220 ns/op
Iteration  19: 663.005 ns/op
Iteration  20: 663.959 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1011.616 ns/op
# Warmup Iteration   2: 775.358 ns/op
# Warmup Iteration   3: 668.136 ns/op
# Warmup Iteration   4: 670.259 ns/op
# Warmup Iteration   5: 672.586 ns/op
Iteration   1: 676.046 ns/op
Iteration   2: 680.829 ns/op
Iteration   3: 665.223 ns/op
Iteration   4: 664.386 ns/op
Iteration   5: 664.368 ns/op
Iteration   6: 664.554 ns/op
Iteration   7: 664.899 ns/op
Iteration   8: 664.823 ns/op
Iteration   9: 664.557 ns/op
Iteration  10: 665.199 ns/op
Iteration  11: 665.223 ns/op
Iteration  12: 663.756 ns/op
Iteration  13: 663.278 ns/op
Iteration  14: 663.209 ns/op
Iteration  15: 662.652 ns/op
Iteration  16: 663.435 ns/op
Iteration  17: 663.387 ns/op
Iteration  18: 666.857 ns/op
Iteration  19: 664.189 ns/op
Iteration  20: 664.974 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  665.747 ±(99.9%) 1.709 ns/op [Average]
  (min, avg, max) = (660.405, 665.747, 684.763), stdev = 5.038
  CI (99.9%): [664.038, 667.456] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = *hh<I`eD@x)
o>x5Hx~e(OH[Bj(&b(-XT7 ${aqTWG"|T]A:)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1028.066 ns/op
# Warmup Iteration   2: 784.779 ns/op
# Warmup Iteration   3: 668.360 ns/op
# Warmup Iteration   4: 670.169 ns/op
# Warmup Iteration   5: 672.950 ns/op
Iteration   1: 676.847 ns/op
Iteration   2: 680.889 ns/op
Iteration   3: 664.327 ns/op
Iteration   4: 665.048 ns/op
Iteration   5: 664.515 ns/op
Iteration   6: 664.359 ns/op
Iteration   7: 667.958 ns/op
Iteration   8: 667.243 ns/op
Iteration   9: 664.657 ns/op
Iteration  10: 665.000 ns/op
Iteration  11: 665.161 ns/op
Iteration  12: 662.831 ns/op
Iteration  13: 662.885 ns/op
Iteration  14: 662.787 ns/op
Iteration  15: 663.535 ns/op
Iteration  16: 669.030 ns/op
Iteration  17: 662.913 ns/op
Iteration  18: 663.731 ns/op
Iteration  19: 662.986 ns/op
Iteration  20: 663.253 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1013.741 ns/op
# Warmup Iteration   2: 777.075 ns/op
# Warmup Iteration   3: 669.637 ns/op
# Warmup Iteration   4: 671.760 ns/op
# Warmup Iteration   5: 674.302 ns/op
Iteration   1: 677.705 ns/op
Iteration   2: 682.017 ns/op
Iteration   3: 667.738 ns/op
Iteration   4: 666.288 ns/op
Iteration   5: 666.006 ns/op
Iteration   6: 666.146 ns/op
Iteration   7: 665.623 ns/op
Iteration   8: 665.968 ns/op
Iteration   9: 665.658 ns/op
Iteration  10: 665.779 ns/op
Iteration  11: 666.342 ns/op
Iteration  12: 664.601 ns/op
Iteration  13: 669.794 ns/op
Iteration  14: 664.925 ns/op
Iteration  15: 664.583 ns/op
Iteration  16: 665.288 ns/op
Iteration  17: 664.735 ns/op
Iteration  18: 664.459 ns/op
Iteration  19: 665.384 ns/op
Iteration  20: 665.070 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1016.565 ns/op
# Warmup Iteration   2: 784.224 ns/op
# Warmup Iteration   3: 673.542 ns/op
# Warmup Iteration   4: 675.071 ns/op
# Warmup Iteration   5: 677.998 ns/op
Iteration   1: 681.399 ns/op
Iteration   2: 686.005 ns/op
Iteration   3: 671.802 ns/op
Iteration   4: 671.256 ns/op
Iteration   5: 670.300 ns/op
Iteration   6: 670.161 ns/op
Iteration   7: 670.382 ns/op
Iteration   8: 669.753 ns/op
Iteration   9: 670.422 ns/op
Iteration  10: 671.158 ns/op
Iteration  11: 670.383 ns/op
Iteration  12: 667.975 ns/op
Iteration  13: 668.025 ns/op
Iteration  14: 667.895 ns/op
Iteration  15: 667.957 ns/op
Iteration  16: 668.498 ns/op
Iteration  17: 677.629 ns/op
Iteration  18: 668.735 ns/op
Iteration  19: 668.872 ns/op
Iteration  20: 668.009 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1013.952 ns/op
# Warmup Iteration   2: 774.407 ns/op
# Warmup Iteration   3: 668.962 ns/op
# Warmup Iteration   4: 671.918 ns/op
# Warmup Iteration   5: 674.883 ns/op
Iteration   1: 677.518 ns/op
Iteration   2: 681.347 ns/op
Iteration   3: 667.622 ns/op
Iteration   4: 666.298 ns/op
Iteration   5: 666.181 ns/op
Iteration   6: 666.259 ns/op
Iteration   7: 665.657 ns/op
Iteration   8: 666.087 ns/op
Iteration   9: 665.825 ns/op
Iteration  10: 665.577 ns/op
Iteration  11: 666.343 ns/op
Iteration  12: 668.655 ns/op
Iteration  13: 664.917 ns/op
Iteration  14: 664.902 ns/op
Iteration  15: 665.437 ns/op
Iteration  16: 665.020 ns/op
Iteration  17: 665.891 ns/op
Iteration  18: 665.727 ns/op
Iteration  19: 665.789 ns/op
Iteration  20: 666.420 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1010.636 ns/op
# Warmup Iteration   2: 770.945 ns/op
# Warmup Iteration   3: 663.475 ns/op
# Warmup Iteration   4: 664.973 ns/op
# Warmup Iteration   5: 672.942 ns/op
Iteration   1: 673.679 ns/op
Iteration   2: 667.825 ns/op
Iteration   3: 661.783 ns/op
Iteration   4: 660.304 ns/op
Iteration   5: 663.849 ns/op
Iteration   6: 660.593 ns/op
Iteration   7: 660.753 ns/op
Iteration   8: 660.550 ns/op
Iteration   9: 660.307 ns/op
Iteration  10: 661.306 ns/op
Iteration  11: 660.096 ns/op
Iteration  12: 658.776 ns/op
Iteration  13: 658.766 ns/op
Iteration  14: 658.847 ns/op
Iteration  15: 658.668 ns/op
Iteration  16: 658.594 ns/op
Iteration  17: 659.512 ns/op
Iteration  18: 659.661 ns/op
Iteration  19: 659.558 ns/op
Iteration  20: 659.645 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  666.612 ±(99.9%) 1.846 ns/op [Average]
  (min, avg, max) = (658.594, 666.612, 686.005), stdev = 5.442
  CI (99.9%): [664.767, 668.458] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  *hh<I`eD@x)
o>x5Hx~e(OH[Bj(&b(-XT7 ${aqTWG"|T]A:  avgt  100  665.747 ± 1.709  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  *hh<I`eD@x)
o>x5Hx~e(OH[Bj(&b(-XT7 ${aqTWG"|T]A:  avgt  100  666.612 ± 1.846  ns/op

Benchmark result is saved to split_precompiled_regex_247_51_NonMatch.csv
