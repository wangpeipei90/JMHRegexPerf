# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
,	

 
	
 		
 	
	
  
 	 	

	
		  	
	 			 


 	



	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1069.426 ns/op
# Warmup Iteration   2: 726.100 ns/op
# Warmup Iteration   3: 656.094 ns/op
# Warmup Iteration   4: 651.975 ns/op
# Warmup Iteration   5: 655.345 ns/op
Iteration   1: 661.367 ns/op
Iteration   2: 647.989 ns/op
Iteration   3: 643.724 ns/op
Iteration   4: 643.715 ns/op
Iteration   5: 644.447 ns/op
Iteration   6: 643.934 ns/op
Iteration   7: 646.238 ns/op
Iteration   8: 643.213 ns/op
Iteration   9: 641.169 ns/op
Iteration  10: 641.355 ns/op
Iteration  11: 641.825 ns/op
Iteration  12: 642.722 ns/op
Iteration  13: 641.330 ns/op
Iteration  14: 641.508 ns/op
Iteration  15: 641.798 ns/op
Iteration  16: 641.853 ns/op
Iteration  17: 643.044 ns/op
Iteration  18: 642.088 ns/op
Iteration  19: 641.467 ns/op
Iteration  20: 641.920 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1062.190 ns/op
# Warmup Iteration   2: 720.781 ns/op
# Warmup Iteration   3: 652.329 ns/op
# Warmup Iteration   4: 649.938 ns/op
# Warmup Iteration   5: 653.751 ns/op
Iteration   1: 657.867 ns/op
Iteration   2: 645.098 ns/op
Iteration   3: 641.830 ns/op
Iteration   4: 641.870 ns/op
Iteration   5: 641.791 ns/op
Iteration   6: 642.209 ns/op
Iteration   7: 645.455 ns/op
Iteration   8: 642.387 ns/op
Iteration   9: 640.193 ns/op
Iteration  10: 640.240 ns/op
Iteration  11: 641.015 ns/op
Iteration  12: 639.691 ns/op
Iteration  13: 642.360 ns/op
Iteration  14: 641.095 ns/op
Iteration  15: 640.342 ns/op
Iteration  16: 642.102 ns/op
Iteration  17: 640.739 ns/op
Iteration  18: 641.220 ns/op
Iteration  19: 641.175 ns/op
Iteration  20: 641.379 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1064.892 ns/op
# Warmup Iteration   2: 722.312 ns/op
# Warmup Iteration   3: 659.470 ns/op
# Warmup Iteration   4: 651.857 ns/op
# Warmup Iteration   5: 657.478 ns/op
Iteration   1: 659.182 ns/op
Iteration   2: 650.764 ns/op
Iteration   3: 646.560 ns/op
Iteration   4: 644.554 ns/op
Iteration   5: 646.344 ns/op
Iteration   6: 645.418 ns/op
Iteration   7: 658.277 ns/op
Iteration   8: 643.908 ns/op
Iteration   9: 645.660 ns/op
Iteration  10: 641.498 ns/op
Iteration  11: 641.857 ns/op
Iteration  12: 643.366 ns/op
Iteration  13: 642.650 ns/op
Iteration  14: 641.444 ns/op
Iteration  15: 642.015 ns/op
Iteration  16: 641.438 ns/op
Iteration  17: 644.386 ns/op
Iteration  18: 642.118 ns/op
Iteration  19: 642.853 ns/op
Iteration  20: 641.770 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1059.310 ns/op
# Warmup Iteration   2: 720.987 ns/op
# Warmup Iteration   3: 649.239 ns/op
# Warmup Iteration   4: 647.863 ns/op
# Warmup Iteration   5: 651.560 ns/op
Iteration   1: 656.346 ns/op
Iteration   2: 645.155 ns/op
Iteration   3: 641.128 ns/op
Iteration   4: 641.039 ns/op
Iteration   5: 640.838 ns/op
Iteration   6: 643.439 ns/op
Iteration   7: 640.342 ns/op
Iteration   8: 640.399 ns/op
Iteration   9: 637.792 ns/op
Iteration  10: 637.831 ns/op
Iteration  11: 638.842 ns/op
Iteration  12: 637.757 ns/op
Iteration  13: 638.467 ns/op
Iteration  14: 638.737 ns/op
Iteration  15: 639.994 ns/op
Iteration  16: 641.293 ns/op
Iteration  17: 639.627 ns/op
Iteration  18: 639.256 ns/op
Iteration  19: 639.622 ns/op
Iteration  20: 639.720 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1067.016 ns/op
# Warmup Iteration   2: 724.070 ns/op
# Warmup Iteration   3: 655.655 ns/op
# Warmup Iteration   4: 651.389 ns/op
# Warmup Iteration   5: 654.881 ns/op
Iteration   1: 658.700 ns/op
Iteration   2: 646.487 ns/op
Iteration   3: 643.467 ns/op
Iteration   4: 642.984 ns/op
Iteration   5: 643.623 ns/op
Iteration   6: 643.357 ns/op
Iteration   7: 646.437 ns/op
Iteration   8: 643.843 ns/op
Iteration   9: 641.968 ns/op
Iteration  10: 642.134 ns/op
Iteration  11: 642.042 ns/op
Iteration  12: 643.394 ns/op
Iteration  13: 647.768 ns/op
Iteration  14: 642.257 ns/op
Iteration  15: 643.402 ns/op
Iteration  16: 642.490 ns/op
Iteration  17: 644.492 ns/op
Iteration  18: 643.009 ns/op
Iteration  19: 643.966 ns/op
Iteration  20: 643.224 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  643.395 ±(99.9%) 1.521 ns/op [Average]
  (min, avg, max) = (637.757, 643.395, 661.367), stdev = 4.484
  CI (99.9%): [641.874, 644.916] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
,	

 
	
 		
 	
	
  
 	 	

	
		  	
	 			 


 	



	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1081.780 ns/op
# Warmup Iteration   2: 736.644 ns/op
# Warmup Iteration   3: 656.732 ns/op
# Warmup Iteration   4: 659.725 ns/op
# Warmup Iteration   5: 662.818 ns/op
Iteration   1: 671.063 ns/op
Iteration   2: 651.483 ns/op
Iteration   3: 651.517 ns/op
Iteration   4: 651.489 ns/op
Iteration   5: 651.458 ns/op
Iteration   6: 653.788 ns/op
Iteration   7: 650.752 ns/op
Iteration   8: 654.161 ns/op
Iteration   9: 650.165 ns/op
Iteration  10: 649.745 ns/op
Iteration  11: 651.797 ns/op
Iteration  12: 650.522 ns/op
Iteration  13: 650.572 ns/op
Iteration  14: 651.084 ns/op
Iteration  15: 654.494 ns/op
Iteration  16: 651.217 ns/op
Iteration  17: 651.786 ns/op
Iteration  18: 651.937 ns/op
Iteration  19: 652.008 ns/op
Iteration  20: 655.394 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1140.223 ns/op
# Warmup Iteration   2: 746.909 ns/op
# Warmup Iteration   3: 666.793 ns/op
# Warmup Iteration   4: 661.975 ns/op
# Warmup Iteration   5: 666.119 ns/op
Iteration   1: 669.529 ns/op
Iteration   2: 659.064 ns/op
Iteration   3: 657.326 ns/op
Iteration   4: 654.643 ns/op
Iteration   5: 654.804 ns/op
Iteration   6: 654.518 ns/op
Iteration   7: 660.921 ns/op
Iteration   8: 654.314 ns/op
Iteration   9: 652.658 ns/op
Iteration  10: 652.436 ns/op
Iteration  11: 653.684 ns/op
Iteration  12: 652.737 ns/op
Iteration  13: 652.490 ns/op
Iteration  14: 652.712 ns/op
Iteration  15: 652.627 ns/op
Iteration  16: 654.456 ns/op
Iteration  17: 653.575 ns/op
Iteration  18: 653.703 ns/op
Iteration  19: 654.701 ns/op
Iteration  20: 655.176 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1071.223 ns/op
# Warmup Iteration   2: 730.107 ns/op
# Warmup Iteration   3: 654.718 ns/op
# Warmup Iteration   4: 657.488 ns/op
# Warmup Iteration   5: 660.928 ns/op
Iteration   1: 668.058 ns/op
Iteration   2: 650.211 ns/op
Iteration   3: 649.744 ns/op
Iteration   4: 649.642 ns/op
Iteration   5: 649.603 ns/op
Iteration   6: 653.437 ns/op
Iteration   7: 653.105 ns/op
Iteration   8: 650.630 ns/op
Iteration   9: 648.353 ns/op
Iteration  10: 649.545 ns/op
Iteration  11: 648.505 ns/op
Iteration  12: 648.445 ns/op
Iteration  13: 648.630 ns/op
Iteration  14: 648.806 ns/op
Iteration  15: 650.962 ns/op
Iteration  16: 649.021 ns/op
Iteration  17: 649.937 ns/op
Iteration  18: 650.796 ns/op
Iteration  19: 649.843 ns/op
Iteration  20: 651.326 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1104.740 ns/op
# Warmup Iteration   2: 741.600 ns/op
# Warmup Iteration   3: 672.385 ns/op
# Warmup Iteration   4: 669.730 ns/op
# Warmup Iteration   5: 672.763 ns/op
Iteration   1: 676.048 ns/op
Iteration   2: 664.274 ns/op
Iteration   3: 661.391 ns/op
Iteration   4: 661.910 ns/op
Iteration   5: 661.193 ns/op
Iteration   6: 661.351 ns/op
Iteration   7: 664.217 ns/op
Iteration   8: 661.318 ns/op
Iteration   9: 659.705 ns/op
Iteration  10: 659.287 ns/op
Iteration  11: 658.588 ns/op
Iteration  12: 659.981 ns/op
Iteration  13: 658.913 ns/op
Iteration  14: 658.855 ns/op
Iteration  15: 659.097 ns/op
Iteration  16: 664.675 ns/op
Iteration  17: 662.673 ns/op
Iteration  18: 659.646 ns/op
Iteration  19: 659.392 ns/op
Iteration  20: 660.133 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1118.106 ns/op
# Warmup Iteration   2: 747.408 ns/op
# Warmup Iteration   3: 677.015 ns/op
# Warmup Iteration   4: 670.747 ns/op
# Warmup Iteration   5: 674.369 ns/op
Iteration   1: 678.825 ns/op
Iteration   2: 667.076 ns/op
Iteration   3: 662.726 ns/op
Iteration   4: 662.885 ns/op
Iteration   5: 662.613 ns/op
Iteration   6: 662.141 ns/op
Iteration   7: 666.114 ns/op
Iteration   8: 663.140 ns/op
Iteration   9: 666.827 ns/op
Iteration  10: 661.209 ns/op
Iteration  11: 666.680 ns/op
Iteration  12: 662.262 ns/op
Iteration  13: 661.214 ns/op
Iteration  14: 661.339 ns/op
Iteration  15: 661.649 ns/op
Iteration  16: 660.819 ns/op
Iteration  17: 663.293 ns/op
Iteration  18: 661.710 ns/op
Iteration  19: 661.645 ns/op
Iteration  20: 662.141 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  656.901 ±(99.9%) 2.195 ns/op [Average]
  (min, avg, max) = (648.353, 656.901, 678.825), stdev = 6.472
  CI (99.9%): [654.706, 659.095] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
,	

 
	
 		
 	
	
  
 	 	

	
		  	
	 			 


 	



	  avgt  100  643.395 ± 1.521  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
,	

 
	
 		
 	
	
  
 	 	

	
		  	
	 			 


 	



	  avgt  100  656.901 ± 2.195  ns/op

Benchmark result is saved to split_precompiled_regex_20_111_Match.csv
