# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 			 

 			 		
 	
 	

 



	 	

 	
	  	 	  
 
  		,		 
 		
	   	  		


	 	

 
		  
	
 	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1114.484 ns/op
# Warmup Iteration   2: 788.970 ns/op
# Warmup Iteration   3: 705.479 ns/op
# Warmup Iteration   4: 697.807 ns/op
# Warmup Iteration   5: 701.778 ns/op
Iteration   1: 706.741 ns/op
Iteration   2: 695.774 ns/op
Iteration   3: 690.227 ns/op
Iteration   4: 690.079 ns/op
Iteration   5: 693.177 ns/op
Iteration   6: 689.425 ns/op
Iteration   7: 689.440 ns/op
Iteration   8: 689.633 ns/op
Iteration   9: 689.942 ns/op
Iteration  10: 697.879 ns/op
Iteration  11: 687.717 ns/op
Iteration  12: 690.488 ns/op
Iteration  13: 689.633 ns/op
Iteration  14: 688.655 ns/op
Iteration  15: 688.170 ns/op
Iteration  16: 688.813 ns/op
Iteration  17: 687.839 ns/op
Iteration  18: 687.475 ns/op
Iteration  19: 687.523 ns/op
Iteration  20: 687.671 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1114.649 ns/op
# Warmup Iteration   2: 790.627 ns/op
# Warmup Iteration   3: 705.922 ns/op
# Warmup Iteration   4: 699.641 ns/op
# Warmup Iteration   5: 703.842 ns/op
Iteration   1: 709.176 ns/op
Iteration   2: 692.874 ns/op
Iteration   3: 692.049 ns/op
Iteration   4: 693.029 ns/op
Iteration   5: 692.180 ns/op
Iteration   6: 696.008 ns/op
Iteration   7: 692.823 ns/op
Iteration   8: 693.318 ns/op
Iteration   9: 696.419 ns/op
Iteration  10: 691.007 ns/op
Iteration  11: 690.782 ns/op
Iteration  12: 690.769 ns/op
Iteration  13: 690.714 ns/op
Iteration  14: 693.050 ns/op
Iteration  15: 691.439 ns/op
Iteration  16: 692.838 ns/op
Iteration  17: 691.377 ns/op
Iteration  18: 691.842 ns/op
Iteration  19: 691.516 ns/op
Iteration  20: 690.971 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1204.393 ns/op
# Warmup Iteration   2: 860.121 ns/op
# Warmup Iteration   3: 731.420 ns/op
# Warmup Iteration   4: 746.460 ns/op
# Warmup Iteration   5: 741.019 ns/op
Iteration   1: 746.620 ns/op
Iteration   2: 732.879 ns/op
Iteration   3: 728.893 ns/op
Iteration   4: 729.040 ns/op
Iteration   5: 729.115 ns/op
Iteration   6: 730.504 ns/op
Iteration   7: 728.723 ns/op
Iteration   8: 728.698 ns/op
Iteration   9: 728.878 ns/op
Iteration  10: 729.190 ns/op
Iteration  11: 732.040 ns/op
Iteration  12: 726.147 ns/op
Iteration  13: 726.168 ns/op
Iteration  14: 727.813 ns/op
Iteration  15: 726.599 ns/op
Iteration  16: 726.642 ns/op
Iteration  17: 735.626 ns/op
Iteration  18: 727.116 ns/op
Iteration  19: 731.876 ns/op
Iteration  20: 730.135 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1130.773 ns/op
# Warmup Iteration   2: 834.634 ns/op
# Warmup Iteration   3: 721.464 ns/op
# Warmup Iteration   4: 737.348 ns/op
# Warmup Iteration   5: 730.722 ns/op
Iteration   1: 736.643 ns/op
Iteration   2: 719.776 ns/op
Iteration   3: 718.110 ns/op
Iteration   4: 717.747 ns/op
Iteration   5: 717.933 ns/op
Iteration   6: 717.972 ns/op
Iteration   7: 717.790 ns/op
Iteration   8: 717.564 ns/op
Iteration   9: 717.043 ns/op
Iteration  10: 717.837 ns/op
Iteration  11: 716.700 ns/op
Iteration  12: 715.482 ns/op
Iteration  13: 716.122 ns/op
Iteration  14: 716.045 ns/op
Iteration  15: 715.861 ns/op
Iteration  16: 716.192 ns/op
Iteration  17: 716.441 ns/op
Iteration  18: 716.123 ns/op
Iteration  19: 715.713 ns/op
Iteration  20: 716.042 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1144.147 ns/op
# Warmup Iteration   2: 835.420 ns/op
# Warmup Iteration   3: 729.153 ns/op
# Warmup Iteration   4: 744.049 ns/op
# Warmup Iteration   5: 738.689 ns/op
Iteration   1: 742.859 ns/op
Iteration   2: 726.242 ns/op
Iteration   3: 725.948 ns/op
Iteration   4: 725.705 ns/op
Iteration   5: 725.742 ns/op
Iteration   6: 725.504 ns/op
Iteration   7: 725.187 ns/op
Iteration   8: 725.697 ns/op
Iteration   9: 725.455 ns/op
Iteration  10: 725.891 ns/op
Iteration  11: 723.519 ns/op
Iteration  12: 723.492 ns/op
Iteration  13: 724.540 ns/op
Iteration  14: 722.971 ns/op
Iteration  15: 724.376 ns/op
Iteration  16: 723.857 ns/op
Iteration  17: 724.128 ns/op
Iteration  18: 724.472 ns/op
Iteration  19: 725.221 ns/op
Iteration  20: 725.278 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  711.584 Â±(99.9%) 5.800 ns/op [Average]
  (min, avg, max) = (687.475, 711.584, 746.620), stdev = 17.101
  CI (99.9%): [705.784, 717.384] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 			 

 			 		
 	
 	

 



	 	

 	
	  	 	  
 
  		,		 
 		
	   	  		


	 	

 
		  
	
 	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1191.511 ns/op
# Warmup Iteration   2: 824.292 ns/op
# Warmup Iteration   3: 722.269 ns/op
# Warmup Iteration   4: 718.425 ns/op
# Warmup Iteration   5: 721.968 ns/op
Iteration   1: 726.641 ns/op
Iteration   2: 710.212 ns/op
Iteration   3: 711.318 ns/op
Iteration   4: 710.694 ns/op
Iteration   5: 709.902 ns/op
Iteration   6: 712.436 ns/op
Iteration   7: 709.285 ns/op
Iteration   8: 709.916 ns/op
Iteration   9: 709.958 ns/op
Iteration  10: 707.468 ns/op
Iteration  11: 712.801 ns/op
Iteration  12: 707.074 ns/op
Iteration  13: 707.216 ns/op
Iteration  14: 707.609 ns/op
Iteration  15: 708.824 ns/op
Iteration  16: 707.671 ns/op
Iteration  17: 708.083 ns/op
Iteration  18: 709.419 ns/op
Iteration  19: 709.848 ns/op
Iteration  20: 709.715 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1190.579 ns/op
# Warmup Iteration   2: 855.627 ns/op
# Warmup Iteration   3: 740.586 ns/op
# Warmup Iteration   4: 754.025 ns/op
# Warmup Iteration   5: 749.412 ns/op
Iteration   1: 754.202 ns/op
Iteration   2: 737.233 ns/op
Iteration   3: 736.634 ns/op
Iteration   4: 736.963 ns/op
Iteration   5: 736.936 ns/op
Iteration   6: 736.579 ns/op
Iteration   7: 737.500 ns/op
Iteration   8: 737.666 ns/op
Iteration   9: 737.068 ns/op
Iteration  10: 737.082 ns/op
Iteration  11: 737.290 ns/op
Iteration  12: 740.940 ns/op
Iteration  13: 736.465 ns/op
Iteration  14: 735.087 ns/op
Iteration  15: 736.216 ns/op
Iteration  16: 735.853 ns/op
Iteration  17: 738.863 ns/op
Iteration  18: 735.824 ns/op
Iteration  19: 735.671 ns/op
Iteration  20: 735.972 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1219.550 ns/op
# Warmup Iteration   2: 870.415 ns/op
# Warmup Iteration   3: 752.376 ns/op
# Warmup Iteration   4: 768.749 ns/op
# Warmup Iteration   5: 762.026 ns/op
Iteration   1: 766.720 ns/op
Iteration   2: 752.247 ns/op
Iteration   3: 748.128 ns/op
Iteration   4: 748.847 ns/op
Iteration   5: 748.211 ns/op
Iteration   6: 748.463 ns/op
Iteration   7: 748.241 ns/op
Iteration   8: 748.301 ns/op
Iteration   9: 748.574 ns/op
Iteration  10: 749.580 ns/op
Iteration  11: 746.426 ns/op
Iteration  12: 747.974 ns/op
Iteration  13: 753.347 ns/op
Iteration  14: 744.675 ns/op
Iteration  15: 745.921 ns/op
Iteration  16: 744.651 ns/op
Iteration  17: 745.803 ns/op
Iteration  18: 745.166 ns/op
Iteration  19: 745.824 ns/op
Iteration  20: 745.881 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1212.621 ns/op
# Warmup Iteration   2: 879.109 ns/op
# Warmup Iteration   3: 757.564 ns/op
# Warmup Iteration   4: 767.567 ns/op
# Warmup Iteration   5: 768.659 ns/op
Iteration   1: 773.159 ns/op
Iteration   2: 755.914 ns/op
Iteration   3: 753.842 ns/op
Iteration   4: 750.473 ns/op
Iteration   5: 754.381 ns/op
Iteration   6: 754.654 ns/op
Iteration   7: 753.988 ns/op
Iteration   8: 753.033 ns/op
Iteration   9: 753.826 ns/op
Iteration  10: 748.801 ns/op
Iteration  11: 747.108 ns/op
Iteration  12: 747.208 ns/op
Iteration  13: 746.896 ns/op
Iteration  14: 746.686 ns/op
Iteration  15: 746.560 ns/op
Iteration  16: 746.501 ns/op
Iteration  17: 747.365 ns/op
Iteration  18: 746.359 ns/op
Iteration  19: 746.048 ns/op
Iteration  20: 754.100 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1194.925 ns/op
# Warmup Iteration   2: 828.768 ns/op
# Warmup Iteration   3: 725.560 ns/op
# Warmup Iteration   4: 718.784 ns/op
# Warmup Iteration   5: 723.212 ns/op
Iteration   1: 726.738 ns/op
Iteration   2: 711.005 ns/op
Iteration   3: 714.360 ns/op
Iteration   4: 710.561 ns/op
Iteration   5: 714.551 ns/op
Iteration   6: 710.611 ns/op
Iteration   7: 718.628 ns/op
Iteration   8: 710.700 ns/op
Iteration   9: 714.261 ns/op
Iteration  10: 712.123 ns/op
Iteration  11: 708.304 ns/op
Iteration  12: 709.031 ns/op
Iteration  13: 708.630 ns/op
Iteration  14: 708.627 ns/op
Iteration  15: 708.888 ns/op
Iteration  16: 711.656 ns/op
Iteration  17: 710.525 ns/op
Iteration  18: 709.121 ns/op
Iteration  19: 710.058 ns/op
Iteration  20: 710.539 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  732.009 Â±(99.9%) 6.225 ns/op [Average]
  (min, avg, max) = (707.074, 732.009, 773.159), stdev = 18.354
  CI (99.9%): [725.785, 738.234] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  			 

 			 		
 	
 	

 



	 	

 	
	  	 	  
 
  		,		 
 		
	   	  		


	 	

 
		  
	
 	   avgt  100  711.584 Â± 5.800  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  			 

 			 		
 	
 	

 



	 	

 	
	  	 	  
 
  		,		 
 		
	   	  		


	 	

 
		  
	
 	   avgt  100  732.009 Â± 6.225  ns/op

Benchmark result is saved to split_precompiled_regex_182_165_Match.csv
