# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 


  		

 


		,
	


	


 


	
		

   
 

	  		 

 
	 



  
	  	 
  
	 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1145.971 ns/op
# Warmup Iteration   2: 830.944 ns/op
# Warmup Iteration   3: 724.147 ns/op
# Warmup Iteration   4: 737.112 ns/op
# Warmup Iteration   5: 731.531 ns/op
Iteration   1: 735.749 ns/op
Iteration   2: 718.705 ns/op
Iteration   3: 719.246 ns/op
Iteration   4: 719.267 ns/op
Iteration   5: 719.402 ns/op
Iteration   6: 719.124 ns/op
Iteration   7: 718.924 ns/op
Iteration   8: 719.538 ns/op
Iteration   9: 718.543 ns/op
Iteration  10: 719.356 ns/op
Iteration  11: 720.944 ns/op
Iteration  12: 716.435 ns/op
Iteration  13: 715.979 ns/op
Iteration  14: 715.991 ns/op
Iteration  15: 716.746 ns/op
Iteration  16: 716.470 ns/op
Iteration  17: 717.328 ns/op
Iteration  18: 717.039 ns/op
Iteration  19: 717.735 ns/op
Iteration  20: 718.026 ns/op

# Run progress: 10.00% complete, ETA 00:03:47
# Fork: 2 of 5
# Warmup Iteration   1: 1143.315 ns/op
# Warmup Iteration   2: 827.278 ns/op
# Warmup Iteration   3: 724.578 ns/op
# Warmup Iteration   4: 735.156 ns/op
# Warmup Iteration   5: 731.745 ns/op
Iteration   1: 736.210 ns/op
Iteration   2: 719.674 ns/op
Iteration   3: 718.990 ns/op
Iteration   4: 719.435 ns/op
Iteration   5: 719.540 ns/op
Iteration   6: 719.726 ns/op
Iteration   7: 719.576 ns/op
Iteration   8: 719.825 ns/op
Iteration   9: 719.992 ns/op
Iteration  10: 720.285 ns/op
Iteration  11: 719.150 ns/op
Iteration  12: 720.857 ns/op
Iteration  13: 719.391 ns/op
Iteration  14: 718.030 ns/op
Iteration  15: 717.798 ns/op
Iteration  16: 718.773 ns/op
Iteration  17: 718.616 ns/op
Iteration  18: 718.605 ns/op
Iteration  19: 718.789 ns/op
Iteration  20: 719.763 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1142.869 ns/op
# Warmup Iteration   2: 771.533 ns/op
# Warmup Iteration   3: 681.871 ns/op
# Warmup Iteration   4: 678.257 ns/op
# Warmup Iteration   5: 682.099 ns/op
Iteration   1: 685.836 ns/op
Iteration   2: 672.311 ns/op
Iteration   3: 673.319 ns/op
Iteration   4: 670.028 ns/op
Iteration   5: 670.142 ns/op
Iteration   6: 670.308 ns/op
Iteration   7: 670.528 ns/op
Iteration   8: 670.001 ns/op
Iteration   9: 670.232 ns/op
Iteration  10: 669.680 ns/op
Iteration  11: 668.478 ns/op
Iteration  12: 668.103 ns/op
Iteration  13: 668.030 ns/op
Iteration  14: 668.491 ns/op
Iteration  15: 668.253 ns/op
Iteration  16: 669.713 ns/op
Iteration  17: 668.577 ns/op
Iteration  18: 668.959 ns/op
Iteration  19: 670.055 ns/op
Iteration  20: 670.052 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1193.191 ns/op
# Warmup Iteration   2: 829.457 ns/op
# Warmup Iteration   3: 715.320 ns/op
# Warmup Iteration   4: 730.219 ns/op
# Warmup Iteration   5: 724.233 ns/op
Iteration   1: 729.326 ns/op
Iteration   2: 711.999 ns/op
Iteration   3: 711.774 ns/op
Iteration   4: 712.302 ns/op
Iteration   5: 712.076 ns/op
Iteration   6: 712.145 ns/op
Iteration   7: 711.755 ns/op
Iteration   8: 711.212 ns/op
Iteration   9: 712.470 ns/op
Iteration  10: 717.879 ns/op
Iteration  11: 710.914 ns/op
Iteration  12: 710.830 ns/op
Iteration  13: 711.324 ns/op
Iteration  14: 711.272 ns/op
Iteration  15: 710.997 ns/op
Iteration  16: 711.482 ns/op
Iteration  17: 711.137 ns/op
Iteration  18: 711.375 ns/op
Iteration  19: 712.340 ns/op
Iteration  20: 712.051 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1137.905 ns/op
# Warmup Iteration   2: 830.670 ns/op
# Warmup Iteration   3: 723.761 ns/op
# Warmup Iteration   4: 737.974 ns/op
# Warmup Iteration   5: 732.112 ns/op
Iteration   1: 736.876 ns/op
Iteration   2: 720.100 ns/op
Iteration   3: 720.114 ns/op
Iteration   4: 720.203 ns/op
Iteration   5: 720.432 ns/op
Iteration   6: 720.558 ns/op
Iteration   7: 719.705 ns/op
Iteration   8: 720.084 ns/op
Iteration   9: 720.376 ns/op
Iteration  10: 720.011 ns/op
Iteration  11: 719.300 ns/op
Iteration  12: 719.611 ns/op
Iteration  13: 717.968 ns/op
Iteration  14: 717.890 ns/op
Iteration  15: 718.100 ns/op
Iteration  16: 724.201 ns/op
Iteration  17: 717.806 ns/op
Iteration  18: 720.013 ns/op
Iteration  19: 718.380 ns/op
Iteration  20: 720.350 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  708.634 ±(99.9%) 6.694 ns/op [Average]
  (min, avg, max) = (668.030, 708.634, 736.876), stdev = 19.738
  CI (99.9%): [701.940, 715.328] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 


  		

 


		,
	


	


 


	
		

   
 

	  		 

 
	 



  
	  	 
  
	 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1172.086 ns/op
# Warmup Iteration   2: 858.930 ns/op
# Warmup Iteration   3: 752.469 ns/op
# Warmup Iteration   4: 767.341 ns/op
# Warmup Iteration   5: 761.995 ns/op
Iteration   1: 766.473 ns/op
Iteration   2: 749.334 ns/op
Iteration   3: 748.933 ns/op
Iteration   4: 748.244 ns/op
Iteration   5: 748.107 ns/op
Iteration   6: 748.282 ns/op
Iteration   7: 748.184 ns/op
Iteration   8: 748.579 ns/op
Iteration   9: 748.828 ns/op
Iteration  10: 749.189 ns/op
Iteration  11: 745.922 ns/op
Iteration  12: 746.170 ns/op
Iteration  13: 746.539 ns/op
Iteration  14: 746.472 ns/op
Iteration  15: 747.524 ns/op
Iteration  16: 746.778 ns/op
Iteration  17: 747.661 ns/op
Iteration  18: 747.320 ns/op
Iteration  19: 751.874 ns/op
Iteration  20: 748.082 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1198.004 ns/op
# Warmup Iteration   2: 848.702 ns/op
# Warmup Iteration   3: 733.820 ns/op
# Warmup Iteration   4: 748.688 ns/op
# Warmup Iteration   5: 743.452 ns/op
Iteration   1: 748.105 ns/op
Iteration   2: 730.862 ns/op
Iteration   3: 730.789 ns/op
Iteration   4: 730.202 ns/op
Iteration   5: 730.681 ns/op
Iteration   6: 734.256 ns/op
Iteration   7: 730.615 ns/op
Iteration   8: 729.972 ns/op
Iteration   9: 730.275 ns/op
Iteration  10: 731.861 ns/op
Iteration  11: 734.003 ns/op
Iteration  12: 728.771 ns/op
Iteration  13: 729.178 ns/op
Iteration  14: 729.002 ns/op
Iteration  15: 728.507 ns/op
Iteration  16: 728.669 ns/op
Iteration  17: 728.441 ns/op
Iteration  18: 728.319 ns/op
Iteration  19: 729.012 ns/op
Iteration  20: 728.723 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1169.949 ns/op
# Warmup Iteration   2: 863.791 ns/op
# Warmup Iteration   3: 752.886 ns/op
# Warmup Iteration   4: 768.878 ns/op
# Warmup Iteration   5: 763.021 ns/op
Iteration   1: 766.874 ns/op
Iteration   2: 749.833 ns/op
Iteration   3: 749.892 ns/op
Iteration   4: 749.771 ns/op
Iteration   5: 749.917 ns/op
Iteration   6: 750.012 ns/op
Iteration   7: 749.808 ns/op
Iteration   8: 750.351 ns/op
Iteration   9: 749.738 ns/op
Iteration  10: 750.702 ns/op
Iteration  11: 750.815 ns/op
Iteration  12: 748.049 ns/op
Iteration  13: 747.676 ns/op
Iteration  14: 747.795 ns/op
Iteration  15: 748.367 ns/op
Iteration  16: 753.533 ns/op
Iteration  17: 755.993 ns/op
Iteration  18: 763.190 ns/op
Iteration  19: 750.549 ns/op
Iteration  20: 749.164 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1163.011 ns/op
# Warmup Iteration   2: 849.456 ns/op
# Warmup Iteration   3: 746.362 ns/op
# Warmup Iteration   4: 760.477 ns/op
# Warmup Iteration   5: 755.014 ns/op
Iteration   1: 760.046 ns/op
Iteration   2: 743.596 ns/op
Iteration   3: 742.880 ns/op
Iteration   4: 742.413 ns/op
Iteration   5: 742.924 ns/op
Iteration   6: 742.799 ns/op
Iteration   7: 742.720 ns/op
Iteration   8: 742.481 ns/op
Iteration   9: 742.241 ns/op
Iteration  10: 743.987 ns/op
Iteration  11: 740.306 ns/op
Iteration  12: 739.912 ns/op
Iteration  13: 748.007 ns/op
Iteration  14: 740.330 ns/op
Iteration  15: 742.915 ns/op
Iteration  16: 740.303 ns/op
Iteration  17: 740.507 ns/op
Iteration  18: 740.320 ns/op
Iteration  19: 740.173 ns/op
Iteration  20: 740.806 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1217.563 ns/op
# Warmup Iteration   2: 877.797 ns/op
# Warmup Iteration   3: 755.135 ns/op
# Warmup Iteration   4: 769.712 ns/op
# Warmup Iteration   5: 763.971 ns/op
Iteration   1: 768.955 ns/op
Iteration   2: 751.659 ns/op
Iteration   3: 751.887 ns/op
Iteration   4: 751.885 ns/op
Iteration   5: 751.308 ns/op
Iteration   6: 752.778 ns/op
Iteration   7: 751.591 ns/op
Iteration   8: 751.262 ns/op
Iteration   9: 751.413 ns/op
Iteration  10: 751.795 ns/op
Iteration  11: 750.557 ns/op
Iteration  12: 750.472 ns/op
Iteration  13: 752.066 ns/op
Iteration  14: 750.441 ns/op
Iteration  15: 750.443 ns/op
Iteration  16: 750.781 ns/op
Iteration  17: 750.293 ns/op
Iteration  18: 751.842 ns/op
Iteration  19: 750.806 ns/op
Iteration  20: 750.307 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  745.330 ±(99.9%) 3.060 ns/op [Average]
  (min, avg, max) = (728.319, 745.330, 768.955), stdev = 9.022
  CI (99.9%): [742.270, 748.390] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 


  		

 


		,
	


	


 


	
		

   
 

	  		 

 
	 



  
	  	 
  
	 	  avgt  100  708.634 ± 6.694  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 


  		

 


		,
	


	


 


	
		

   
 

	  		 

 
	 



  
	  	 
  
	 	  avgt  100  745.330 ± 3.060  ns/op

Benchmark result is saved to split_precompiled_regex_143_151_Match.csv
