# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 
	 
	 	
 
	
		 
				
	

	 
   	

 
 
	 

	 
	   	 	
	
	

	 			
	
	
		

 


  


	 			


,	 


	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1214.202 ns/op
# Warmup Iteration   2: 867.697 ns/op
# Warmup Iteration   3: 743.540 ns/op
# Warmup Iteration   4: 753.969 ns/op
# Warmup Iteration   5: 755.879 ns/op
Iteration   1: 757.337 ns/op
Iteration   2: 740.358 ns/op
Iteration   3: 740.140 ns/op
Iteration   4: 740.602 ns/op
Iteration   5: 740.693 ns/op
Iteration   6: 741.073 ns/op
Iteration   7: 740.336 ns/op
Iteration   8: 740.310 ns/op
Iteration   9: 740.158 ns/op
Iteration  10: 740.061 ns/op
Iteration  11: 741.287 ns/op
Iteration  12: 738.249 ns/op
Iteration  13: 739.345 ns/op
Iteration  14: 739.145 ns/op
Iteration  15: 738.191 ns/op
Iteration  16: 738.104 ns/op
Iteration  17: 738.488 ns/op
Iteration  18: 738.089 ns/op
Iteration  19: 738.484 ns/op
Iteration  20: 737.460 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1177.704 ns/op
# Warmup Iteration   2: 817.531 ns/op
# Warmup Iteration   3: 716.987 ns/op
# Warmup Iteration   4: 720.510 ns/op
# Warmup Iteration   5: 720.522 ns/op
Iteration   1: 725.576 ns/op
Iteration   2: 708.135 ns/op
Iteration   3: 707.985 ns/op
Iteration   4: 707.234 ns/op
Iteration   5: 707.461 ns/op
Iteration   6: 708.066 ns/op
Iteration   7: 708.470 ns/op
Iteration   8: 708.444 ns/op
Iteration   9: 711.658 ns/op
Iteration  10: 706.448 ns/op
Iteration  11: 706.485 ns/op
Iteration  12: 706.239 ns/op
Iteration  13: 706.331 ns/op
Iteration  14: 706.232 ns/op
Iteration  15: 711.978 ns/op
Iteration  16: 706.556 ns/op
Iteration  17: 706.380 ns/op
Iteration  18: 707.536 ns/op
Iteration  19: 708.200 ns/op
Iteration  20: 706.986 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1274.196 ns/op
# Warmup Iteration   2: 968.141 ns/op
# Warmup Iteration   3: 812.164 ns/op
# Warmup Iteration   4: 814.399 ns/op
# Warmup Iteration   5: 823.366 ns/op
Iteration   1: 824.714 ns/op
Iteration   2: 828.094 ns/op
Iteration   3: 809.704 ns/op
Iteration   4: 808.471 ns/op
Iteration   5: 808.041 ns/op
Iteration   6: 808.479 ns/op
Iteration   7: 808.089 ns/op
Iteration   8: 807.737 ns/op
Iteration   9: 808.395 ns/op
Iteration  10: 812.911 ns/op
Iteration  11: 809.096 ns/op
Iteration  12: 814.707 ns/op
Iteration  13: 806.685 ns/op
Iteration  14: 806.613 ns/op
Iteration  15: 806.465 ns/op
Iteration  16: 804.704 ns/op
Iteration  17: 806.084 ns/op
Iteration  18: 807.286 ns/op
Iteration  19: 806.861 ns/op
Iteration  20: 807.542 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1175.166 ns/op
# Warmup Iteration   2: 816.440 ns/op
# Warmup Iteration   3: 719.540 ns/op
# Warmup Iteration   4: 715.480 ns/op
# Warmup Iteration   5: 720.003 ns/op
Iteration   1: 724.403 ns/op
Iteration   2: 707.653 ns/op
Iteration   3: 707.174 ns/op
Iteration   4: 706.962 ns/op
Iteration   5: 706.742 ns/op
Iteration   6: 706.523 ns/op
Iteration   7: 710.015 ns/op
Iteration   8: 709.849 ns/op
Iteration   9: 706.877 ns/op
Iteration  10: 704.665 ns/op
Iteration  11: 705.102 ns/op
Iteration  12: 704.521 ns/op
Iteration  13: 704.531 ns/op
Iteration  14: 704.594 ns/op
Iteration  15: 704.194 ns/op
Iteration  16: 704.456 ns/op
Iteration  17: 704.652 ns/op
Iteration  18: 705.066 ns/op
Iteration  19: 707.043 ns/op
Iteration  20: 705.518 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1274.987 ns/op
# Warmup Iteration   2: 959.707 ns/op
# Warmup Iteration   3: 808.025 ns/op
# Warmup Iteration   4: 810.821 ns/op
# Warmup Iteration   5: 815.015 ns/op
Iteration   1: 818.449 ns/op
Iteration   2: 823.162 ns/op
Iteration   3: 804.502 ns/op
Iteration   4: 804.304 ns/op
Iteration   5: 804.150 ns/op
Iteration   6: 804.580 ns/op
Iteration   7: 804.406 ns/op
Iteration   8: 807.505 ns/op
Iteration   9: 810.006 ns/op
Iteration  10: 809.005 ns/op
Iteration  11: 809.241 ns/op
Iteration  12: 804.265 ns/op
Iteration  13: 802.482 ns/op
Iteration  14: 804.497 ns/op
Iteration  15: 802.362 ns/op
Iteration  16: 802.712 ns/op
Iteration  17: 799.987 ns/op
Iteration  18: 802.548 ns/op
Iteration  19: 802.631 ns/op
Iteration  20: 809.898 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  754.522 Â±(99.9%) 15.596 ns/op [Average]
  (min, avg, max) = (704.194, 754.522, 828.094), stdev = 45.985
  CI (99.9%): [738.926, 770.118] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 
	 
	 	
 
	
		 
				
	

	 
   	

 
 
	 

	 
	   	 	
	
	

	 			
	
	
		

 


  


	 			


,	 


	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1267.342 ns/op
# Warmup Iteration   2: 926.023 ns/op
# Warmup Iteration   3: 794.325 ns/op
# Warmup Iteration   4: 800.672 ns/op
# Warmup Iteration   5: 809.584 ns/op
Iteration   1: 813.296 ns/op
Iteration   2: 800.899 ns/op
Iteration   3: 801.304 ns/op
Iteration   4: 791.214 ns/op
Iteration   5: 791.566 ns/op
Iteration   6: 791.748 ns/op
Iteration   7: 792.895 ns/op
Iteration   8: 794.896 ns/op
Iteration   9: 791.513 ns/op
Iteration  10: 792.283 ns/op
Iteration  11: 795.565 ns/op
Iteration  12: 788.553 ns/op
Iteration  13: 789.346 ns/op
Iteration  14: 788.770 ns/op
Iteration  15: 790.719 ns/op
Iteration  16: 789.267 ns/op
Iteration  17: 789.712 ns/op
Iteration  18: 789.188 ns/op
Iteration  19: 788.929 ns/op
Iteration  20: 789.639 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1239.719 ns/op
# Warmup Iteration   2: 925.091 ns/op
# Warmup Iteration   3: 789.193 ns/op
# Warmup Iteration   4: 792.241 ns/op
# Warmup Iteration   5: 793.520 ns/op
Iteration   1: 798.358 ns/op
Iteration   2: 803.212 ns/op
Iteration   3: 784.624 ns/op
Iteration   4: 785.106 ns/op
Iteration   5: 785.222 ns/op
Iteration   6: 784.838 ns/op
Iteration   7: 784.890 ns/op
Iteration   8: 784.333 ns/op
Iteration   9: 785.102 ns/op
Iteration  10: 784.379 ns/op
Iteration  11: 785.361 ns/op
Iteration  12: 782.972 ns/op
Iteration  13: 782.961 ns/op
Iteration  14: 785.607 ns/op
Iteration  15: 783.204 ns/op
Iteration  16: 783.343 ns/op
Iteration  17: 783.189 ns/op
Iteration  18: 782.734 ns/op
Iteration  19: 789.300 ns/op
Iteration  20: 784.875 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1214.495 ns/op
# Warmup Iteration   2: 898.251 ns/op
# Warmup Iteration   3: 769.052 ns/op
# Warmup Iteration   4: 771.956 ns/op
# Warmup Iteration   5: 791.995 ns/op
Iteration   1: 783.603 ns/op
Iteration   2: 766.294 ns/op
Iteration   3: 765.683 ns/op
Iteration   4: 765.763 ns/op
Iteration   5: 765.715 ns/op
Iteration   6: 766.054 ns/op
Iteration   7: 764.381 ns/op
Iteration   8: 765.669 ns/op
Iteration   9: 765.174 ns/op
Iteration  10: 764.764 ns/op
Iteration  11: 764.009 ns/op
Iteration  12: 764.025 ns/op
Iteration  13: 763.462 ns/op
Iteration  14: 763.639 ns/op
Iteration  15: 763.207 ns/op
Iteration  16: 763.918 ns/op
Iteration  17: 764.826 ns/op
Iteration  18: 765.420 ns/op
Iteration  19: 764.051 ns/op
Iteration  20: 764.955 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1264.676 ns/op
# Warmup Iteration   2: 985.542 ns/op
# Warmup Iteration   3: 840.576 ns/op
# Warmup Iteration   4: 843.137 ns/op
# Warmup Iteration   5: 846.882 ns/op
Iteration   1: 851.123 ns/op
Iteration   2: 856.880 ns/op
Iteration   3: 835.801 ns/op
Iteration   4: 835.736 ns/op
Iteration   5: 836.058 ns/op
Iteration   6: 835.537 ns/op
Iteration   7: 835.946 ns/op
Iteration   8: 835.619 ns/op
Iteration   9: 835.512 ns/op
Iteration  10: 835.771 ns/op
Iteration  11: 837.502 ns/op
Iteration  12: 835.177 ns/op
Iteration  13: 832.043 ns/op
Iteration  14: 834.014 ns/op
Iteration  15: 834.219 ns/op
Iteration  16: 835.968 ns/op
Iteration  17: 834.618 ns/op
Iteration  18: 834.328 ns/op
Iteration  19: 834.160 ns/op
Iteration  20: 834.713 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1258.482 ns/op
# Warmup Iteration   2: 949.144 ns/op
# Warmup Iteration   3: 806.260 ns/op
# Warmup Iteration   4: 808.836 ns/op
# Warmup Iteration   5: 811.591 ns/op
Iteration   1: 816.425 ns/op
Iteration   2: 828.484 ns/op
Iteration   3: 809.144 ns/op
Iteration   4: 804.039 ns/op
Iteration   5: 803.196 ns/op
Iteration   6: 804.220 ns/op
Iteration   7: 807.197 ns/op
Iteration   8: 803.574 ns/op
Iteration   9: 804.984 ns/op
Iteration  10: 811.737 ns/op
Iteration  11: 807.341 ns/op
Iteration  12: 802.201 ns/op
Iteration  13: 801.708 ns/op
Iteration  14: 801.174 ns/op
Iteration  15: 802.441 ns/op
Iteration  16: 802.090 ns/op
Iteration  17: 801.879 ns/op
Iteration  18: 801.761 ns/op
Iteration  19: 801.260 ns/op
Iteration  20: 802.515 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  797.576 Â±(99.9%) 8.271 ns/op [Average]
  (min, avg, max) = (763.207, 797.576, 856.880), stdev = 24.388
  CI (99.9%): [789.305, 805.847] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                 (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 
	 
	 	
 
	
		 
				
	

	 
   	

 
 
	 

	 
	   	 	
	
	

	 			
	
	
		

 


  


	 			


,	 


	  avgt  100  754.522 Â± 15.596  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 
	 
	 	
 
	
		 
				
	

	 
   	

 
 
	 

	 
	   	 	
	
	

	 			
	
	
		

 


  


	 			


,	 


	  avgt  100  797.576 Â±  8.271  ns/op

Benchmark result is saved to split_precompiled_regex_226_200_Match.csv
