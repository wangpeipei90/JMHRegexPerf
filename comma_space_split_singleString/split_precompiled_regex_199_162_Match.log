# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	 	
	  
 
		



  	
		 
	


, 
	 
 	 
	
	 
		  
			 
 	
   		 
 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1150.483 ns/op
# Warmup Iteration   2: 852.131 ns/op
# Warmup Iteration   3: 732.776 ns/op
# Warmup Iteration   4: 746.522 ns/op
# Warmup Iteration   5: 741.271 ns/op
Iteration   1: 745.339 ns/op
Iteration   2: 729.131 ns/op
Iteration   3: 728.858 ns/op
Iteration   4: 729.423 ns/op
Iteration   5: 729.601 ns/op
Iteration   6: 729.078 ns/op
Iteration   7: 729.371 ns/op
Iteration   8: 728.609 ns/op
Iteration   9: 728.979 ns/op
Iteration  10: 729.182 ns/op
Iteration  11: 727.258 ns/op
Iteration  12: 727.198 ns/op
Iteration  13: 727.254 ns/op
Iteration  14: 727.095 ns/op
Iteration  15: 728.806 ns/op
Iteration  16: 727.506 ns/op
Iteration  17: 733.728 ns/op
Iteration  18: 727.946 ns/op
Iteration  19: 727.744 ns/op
Iteration  20: 729.972 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1100.714 ns/op
# Warmup Iteration   2: 779.738 ns/op
# Warmup Iteration   3: 700.812 ns/op
# Warmup Iteration   4: 692.769 ns/op
# Warmup Iteration   5: 694.551 ns/op
Iteration   1: 698.269 ns/op
Iteration   2: 683.237 ns/op
Iteration   3: 682.189 ns/op
Iteration   4: 682.074 ns/op
Iteration   5: 685.790 ns/op
Iteration   6: 682.232 ns/op
Iteration   7: 681.781 ns/op
Iteration   8: 682.392 ns/op
Iteration   9: 682.393 ns/op
Iteration  10: 680.399 ns/op
Iteration  11: 680.214 ns/op
Iteration  12: 682.017 ns/op
Iteration  13: 680.718 ns/op
Iteration  14: 680.273 ns/op
Iteration  15: 680.493 ns/op
Iteration  16: 680.301 ns/op
Iteration  17: 680.554 ns/op
Iteration  18: 680.575 ns/op
Iteration  19: 680.958 ns/op
Iteration  20: 683.004 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1102.273 ns/op
# Warmup Iteration   2: 770.978 ns/op
# Warmup Iteration   3: 693.000 ns/op
# Warmup Iteration   4: 688.531 ns/op
# Warmup Iteration   5: 692.376 ns/op
Iteration   1: 697.084 ns/op
Iteration   2: 683.102 ns/op
Iteration   3: 681.172 ns/op
Iteration   4: 684.481 ns/op
Iteration   5: 681.629 ns/op
Iteration   6: 681.723 ns/op
Iteration   7: 681.061 ns/op
Iteration   8: 681.279 ns/op
Iteration   9: 681.040 ns/op
Iteration  10: 679.832 ns/op
Iteration  11: 679.168 ns/op
Iteration  12: 680.417 ns/op
Iteration  13: 679.347 ns/op
Iteration  14: 684.518 ns/op
Iteration  15: 679.237 ns/op
Iteration  16: 679.424 ns/op
Iteration  17: 680.496 ns/op
Iteration  18: 679.424 ns/op
Iteration  19: 681.938 ns/op
Iteration  20: 679.405 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1099.589 ns/op
# Warmup Iteration   2: 771.143 ns/op
# Warmup Iteration   3: 692.354 ns/op
# Warmup Iteration   4: 689.433 ns/op
# Warmup Iteration   5: 692.828 ns/op
Iteration   1: 696.892 ns/op
Iteration   2: 682.144 ns/op
Iteration   3: 680.517 ns/op
Iteration   4: 683.826 ns/op
Iteration   5: 680.797 ns/op
Iteration   6: 679.933 ns/op
Iteration   7: 681.718 ns/op
Iteration   8: 687.187 ns/op
Iteration   9: 681.041 ns/op
Iteration  10: 679.239 ns/op
Iteration  11: 678.766 ns/op
Iteration  12: 679.913 ns/op
Iteration  13: 679.714 ns/op
Iteration  14: 679.705 ns/op
Iteration  15: 679.782 ns/op
Iteration  16: 679.639 ns/op
Iteration  17: 679.340 ns/op
Iteration  18: 679.938 ns/op
Iteration  19: 682.250 ns/op
Iteration  20: 681.187 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1101.586 ns/op
# Warmup Iteration   2: 768.078 ns/op
# Warmup Iteration   3: 686.669 ns/op
# Warmup Iteration   4: 683.609 ns/op
# Warmup Iteration   5: 687.213 ns/op
Iteration   1: 691.400 ns/op
Iteration   2: 675.318 ns/op
Iteration   3: 675.263 ns/op
Iteration   4: 677.654 ns/op
Iteration   5: 675.011 ns/op
Iteration   6: 675.089 ns/op
Iteration   7: 675.232 ns/op
Iteration   8: 675.614 ns/op
Iteration   9: 676.806 ns/op
Iteration  10: 674.008 ns/op
Iteration  11: 674.670 ns/op
Iteration  12: 673.291 ns/op
Iteration  13: 673.278 ns/op
Iteration  14: 673.787 ns/op
Iteration  15: 673.342 ns/op
Iteration  16: 673.491 ns/op
Iteration  17: 673.489 ns/op
Iteration  18: 675.397 ns/op
Iteration  19: 673.359 ns/op
Iteration  20: 673.950 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  690.207 Â±(99.9%) 6.898 ns/op [Average]
  (min, avg, max) = (673.278, 690.207, 745.339), stdev = 20.339
  CI (99.9%): [683.309, 697.105] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	 	
	  
 
		



  	
		 
	


, 
	 
 	 
	
	 
		  
			 
 	
   		 
 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1222.756 ns/op
# Warmup Iteration   2: 887.410 ns/op
# Warmup Iteration   3: 762.506 ns/op
# Warmup Iteration   4: 772.310 ns/op
# Warmup Iteration   5: 777.452 ns/op
Iteration   1: 777.333 ns/op
Iteration   2: 760.208 ns/op
Iteration   3: 760.194 ns/op
Iteration   4: 758.419 ns/op
Iteration   5: 759.571 ns/op
Iteration   6: 759.262 ns/op
Iteration   7: 759.804 ns/op
Iteration   8: 758.689 ns/op
Iteration   9: 759.877 ns/op
Iteration  10: 759.224 ns/op
Iteration  11: 758.615 ns/op
Iteration  12: 757.623 ns/op
Iteration  13: 756.868 ns/op
Iteration  14: 757.413 ns/op
Iteration  15: 757.437 ns/op
Iteration  16: 757.443 ns/op
Iteration  17: 761.534 ns/op
Iteration  18: 759.379 ns/op
Iteration  19: 760.012 ns/op
Iteration  20: 759.733 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1158.422 ns/op
# Warmup Iteration   2: 808.630 ns/op
# Warmup Iteration   3: 723.601 ns/op
# Warmup Iteration   4: 715.516 ns/op
# Warmup Iteration   5: 721.201 ns/op
Iteration   1: 722.845 ns/op
Iteration   2: 709.294 ns/op
Iteration   3: 706.313 ns/op
Iteration   4: 707.016 ns/op
Iteration   5: 707.032 ns/op
Iteration   6: 710.777 ns/op
Iteration   7: 707.462 ns/op
Iteration   8: 706.726 ns/op
Iteration   9: 706.840 ns/op
Iteration  10: 707.071 ns/op
Iteration  11: 704.632 ns/op
Iteration  12: 703.030 ns/op
Iteration  13: 703.812 ns/op
Iteration  14: 705.366 ns/op
Iteration  15: 703.692 ns/op
Iteration  16: 705.683 ns/op
Iteration  17: 706.038 ns/op
Iteration  18: 704.528 ns/op
Iteration  19: 704.793 ns/op
Iteration  20: 705.936 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1170.130 ns/op
# Warmup Iteration   2: 803.810 ns/op
# Warmup Iteration   3: 709.030 ns/op
# Warmup Iteration   4: 704.084 ns/op
# Warmup Iteration   5: 707.801 ns/op
Iteration   1: 710.322 ns/op
Iteration   2: 703.504 ns/op
Iteration   3: 696.601 ns/op
Iteration   4: 696.301 ns/op
Iteration   5: 699.570 ns/op
Iteration   6: 696.449 ns/op
Iteration   7: 695.346 ns/op
Iteration   8: 695.967 ns/op
Iteration   9: 695.878 ns/op
Iteration  10: 697.297 ns/op
Iteration  11: 693.728 ns/op
Iteration  12: 695.454 ns/op
Iteration  13: 693.781 ns/op
Iteration  14: 693.536 ns/op
Iteration  15: 694.967 ns/op
Iteration  16: 694.481 ns/op
Iteration  17: 695.390 ns/op
Iteration  18: 694.703 ns/op
Iteration  19: 701.463 ns/op
Iteration  20: 694.634 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1131.371 ns/op
# Warmup Iteration   2: 804.866 ns/op
# Warmup Iteration   3: 723.490 ns/op
# Warmup Iteration   4: 720.063 ns/op
# Warmup Iteration   5: 723.494 ns/op
Iteration   1: 730.654 ns/op
Iteration   2: 713.516 ns/op
Iteration   3: 711.817 ns/op
Iteration   4: 710.980 ns/op
Iteration   5: 711.169 ns/op
Iteration   6: 714.778 ns/op
Iteration   7: 711.188 ns/op
Iteration   8: 711.532 ns/op
Iteration   9: 711.328 ns/op
Iteration  10: 708.686 ns/op
Iteration  11: 708.862 ns/op
Iteration  12: 709.242 ns/op
Iteration  13: 709.050 ns/op
Iteration  14: 709.298 ns/op
Iteration  15: 710.946 ns/op
Iteration  16: 708.751 ns/op
Iteration  17: 714.047 ns/op
Iteration  18: 709.229 ns/op
Iteration  19: 709.152 ns/op
Iteration  20: 709.202 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1127.750 ns/op
# Warmup Iteration   2: 795.364 ns/op
# Warmup Iteration   3: 713.677 ns/op
# Warmup Iteration   4: 709.851 ns/op
# Warmup Iteration   5: 713.356 ns/op
Iteration   1: 717.498 ns/op
Iteration   2: 706.335 ns/op
Iteration   3: 701.404 ns/op
Iteration   4: 701.352 ns/op
Iteration   5: 704.510 ns/op
Iteration   6: 702.043 ns/op
Iteration   7: 702.546 ns/op
Iteration   8: 702.067 ns/op
Iteration   9: 701.920 ns/op
Iteration  10: 699.869 ns/op
Iteration  11: 700.252 ns/op
Iteration  12: 699.722 ns/op
Iteration  13: 700.756 ns/op
Iteration  14: 700.393 ns/op
Iteration  15: 705.751 ns/op
Iteration  16: 701.293 ns/op
Iteration  17: 701.451 ns/op
Iteration  18: 702.474 ns/op
Iteration  19: 702.037 ns/op
Iteration  20: 701.753 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  715.657 Â±(99.9%) 7.852 ns/op [Average]
  (min, avg, max) = (693.536, 715.657, 777.333), stdev = 23.152
  CI (99.9%): [707.805, 723.510] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	 	
	  
 
		



  	
		 
	


, 
	 
 	 
	
	 
		  
			 
 	
   		 
 
  avgt  100  690.207 Â± 6.898  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	 	
	  
 
		



  	
		 
	


, 
	 
 	 
	
	 
		  
			 
 	
   		 
 
  avgt  100  715.657 Â± 7.852  ns/op

Benchmark result is saved to split_precompiled_regex_199_162_Match.csv
