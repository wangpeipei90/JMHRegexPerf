# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =      	
		,
			
 
 
 	 
	   
    
	
	  	 
  	

	 		 		
 

 
		  	 
  
	  			 
	 



  
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1286.767 ns/op
# Warmup Iteration   2: 980.946 ns/op
# Warmup Iteration   3: 826.662 ns/op
# Warmup Iteration   4: 829.211 ns/op
# Warmup Iteration   5: 831.844 ns/op
Iteration   1: 836.698 ns/op
Iteration   2: 841.925 ns/op
Iteration   3: 825.373 ns/op
Iteration   4: 821.767 ns/op
Iteration   5: 822.671 ns/op
Iteration   6: 822.175 ns/op
Iteration   7: 822.759 ns/op
Iteration   8: 827.162 ns/op
Iteration   9: 823.389 ns/op
Iteration  10: 818.560 ns/op
Iteration  11: 823.223 ns/op
Iteration  12: 823.181 ns/op
Iteration  13: 820.824 ns/op
Iteration  14: 820.759 ns/op
Iteration  15: 821.013 ns/op
Iteration  16: 821.336 ns/op
Iteration  17: 820.448 ns/op
Iteration  18: 822.636 ns/op
Iteration  19: 821.699 ns/op
Iteration  20: 821.031 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1195.930 ns/op
# Warmup Iteration   2: 851.764 ns/op
# Warmup Iteration   3: 734.150 ns/op
# Warmup Iteration   4: 748.777 ns/op
# Warmup Iteration   5: 742.348 ns/op
Iteration   1: 747.180 ns/op
Iteration   2: 730.772 ns/op
Iteration   3: 730.705 ns/op
Iteration   4: 730.858 ns/op
Iteration   5: 730.721 ns/op
Iteration   6: 731.098 ns/op
Iteration   7: 730.687 ns/op
Iteration   8: 730.626 ns/op
Iteration   9: 731.270 ns/op
Iteration  10: 731.158 ns/op
Iteration  11: 728.082 ns/op
Iteration  12: 728.330 ns/op
Iteration  13: 727.877 ns/op
Iteration  14: 727.662 ns/op
Iteration  15: 728.467 ns/op
Iteration  16: 731.536 ns/op
Iteration  17: 728.336 ns/op
Iteration  18: 728.672 ns/op
Iteration  19: 728.586 ns/op
Iteration  20: 728.392 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1240.668 ns/op
# Warmup Iteration   2: 974.317 ns/op
# Warmup Iteration   3: 825.379 ns/op
# Warmup Iteration   4: 828.963 ns/op
# Warmup Iteration   5: 831.209 ns/op
Iteration   1: 835.771 ns/op
Iteration   2: 841.000 ns/op
Iteration   3: 821.587 ns/op
Iteration   4: 820.682 ns/op
Iteration   5: 820.712 ns/op
Iteration   6: 820.687 ns/op
Iteration   7: 820.965 ns/op
Iteration   8: 821.190 ns/op
Iteration   9: 821.074 ns/op
Iteration  10: 821.016 ns/op
Iteration  11: 817.265 ns/op
Iteration  12: 828.520 ns/op
Iteration  13: 822.007 ns/op
Iteration  14: 819.014 ns/op
Iteration  15: 818.259 ns/op
Iteration  16: 818.877 ns/op
Iteration  17: 819.244 ns/op
Iteration  18: 820.635 ns/op
Iteration  19: 820.508 ns/op
Iteration  20: 820.508 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1282.536 ns/op
# Warmup Iteration   2: 980.320 ns/op
# Warmup Iteration   3: 824.017 ns/op
# Warmup Iteration   4: 827.248 ns/op
# Warmup Iteration   5: 830.329 ns/op
Iteration   1: 834.683 ns/op
Iteration   2: 838.489 ns/op
Iteration   3: 821.645 ns/op
Iteration   4: 820.836 ns/op
Iteration   5: 821.212 ns/op
Iteration   6: 820.970 ns/op
Iteration   7: 821.156 ns/op
Iteration   8: 820.843 ns/op
Iteration   9: 821.177 ns/op
Iteration  10: 820.609 ns/op
Iteration  11: 817.299 ns/op
Iteration  12: 821.400 ns/op
Iteration  13: 818.967 ns/op
Iteration  14: 819.277 ns/op
Iteration  15: 818.787 ns/op
Iteration  16: 818.830 ns/op
Iteration  17: 819.287 ns/op
Iteration  18: 818.995 ns/op
Iteration  19: 821.558 ns/op
Iteration  20: 818.912 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1248.714 ns/op
# Warmup Iteration   2: 916.313 ns/op
# Warmup Iteration   3: 780.829 ns/op
# Warmup Iteration   4: 783.120 ns/op
# Warmup Iteration   5: 786.272 ns/op
Iteration   1: 790.108 ns/op
Iteration   2: 794.968 ns/op
Iteration   3: 777.465 ns/op
Iteration   4: 776.892 ns/op
Iteration   5: 777.121 ns/op
Iteration   6: 776.505 ns/op
Iteration   7: 777.262 ns/op
Iteration   8: 777.223 ns/op
Iteration   9: 777.725 ns/op
Iteration  10: 777.506 ns/op
Iteration  11: 780.569 ns/op
Iteration  12: 775.486 ns/op
Iteration  13: 776.426 ns/op
Iteration  14: 775.205 ns/op
Iteration  15: 775.440 ns/op
Iteration  16: 775.630 ns/op
Iteration  17: 775.709 ns/op
Iteration  18: 778.577 ns/op
Iteration  19: 777.540 ns/op
Iteration  20: 777.406 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  795.449 Â±(99.9%) 12.626 ns/op [Average]
  (min, avg, max) = (727.662, 795.449, 841.925), stdev = 37.229
  CI (99.9%): [782.822, 808.075] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =      	
		,
			
 
 
 	 
	   
    
	
	  	 
  	

	 		 		
 

 
		  	 
  
	  			 
	 



  
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1324.066 ns/op
# Warmup Iteration   2: 1009.374 ns/op
# Warmup Iteration   3: 842.256 ns/op
# Warmup Iteration   4: 843.540 ns/op
# Warmup Iteration   5: 846.786 ns/op
Iteration   1: 852.002 ns/op
Iteration   2: 856.371 ns/op
Iteration   3: 836.954 ns/op
Iteration   4: 836.947 ns/op
Iteration   5: 836.644 ns/op
Iteration   6: 836.747 ns/op
Iteration   7: 837.953 ns/op
Iteration   8: 837.377 ns/op
Iteration   9: 837.524 ns/op
Iteration  10: 839.074 ns/op
Iteration  11: 833.476 ns/op
Iteration  12: 837.710 ns/op
Iteration  13: 834.707 ns/op
Iteration  14: 834.862 ns/op
Iteration  15: 834.784 ns/op
Iteration  16: 835.414 ns/op
Iteration  17: 836.390 ns/op
Iteration  18: 836.134 ns/op
Iteration  19: 835.681 ns/op
Iteration  20: 836.974 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1311.176 ns/op
# Warmup Iteration   2: 1000.975 ns/op
# Warmup Iteration   3: 839.188 ns/op
# Warmup Iteration   4: 841.501 ns/op
# Warmup Iteration   5: 845.550 ns/op
Iteration   1: 849.589 ns/op
Iteration   2: 854.587 ns/op
Iteration   3: 836.474 ns/op
Iteration   4: 835.484 ns/op
Iteration   5: 835.217 ns/op
Iteration   6: 834.691 ns/op
Iteration   7: 835.015 ns/op
Iteration   8: 835.173 ns/op
Iteration   9: 834.054 ns/op
Iteration  10: 834.610 ns/op
Iteration  11: 838.372 ns/op
Iteration  12: 830.033 ns/op
Iteration  13: 832.936 ns/op
Iteration  14: 832.098 ns/op
Iteration  15: 832.701 ns/op
Iteration  16: 832.392 ns/op
Iteration  17: 833.248 ns/op
Iteration  18: 834.821 ns/op
Iteration  19: 834.604 ns/op
Iteration  20: 833.059 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1279.214 ns/op
# Warmup Iteration   2: 1010.796 ns/op
# Warmup Iteration   3: 856.277 ns/op
# Warmup Iteration   4: 858.222 ns/op
# Warmup Iteration   5: 861.151 ns/op
Iteration   1: 865.742 ns/op
Iteration   2: 870.218 ns/op
Iteration   3: 853.615 ns/op
Iteration   4: 852.252 ns/op
Iteration   5: 853.074 ns/op
Iteration   6: 853.864 ns/op
Iteration   7: 855.235 ns/op
Iteration   8: 847.881 ns/op
Iteration   9: 852.051 ns/op
Iteration  10: 852.226 ns/op
Iteration  11: 852.128 ns/op
Iteration  12: 852.407 ns/op
Iteration  13: 856.226 ns/op
Iteration  14: 849.888 ns/op
Iteration  15: 850.133 ns/op
Iteration  16: 849.781 ns/op
Iteration  17: 851.350 ns/op
Iteration  18: 851.667 ns/op
Iteration  19: 850.986 ns/op
Iteration  20: 851.462 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1313.413 ns/op
# Warmup Iteration   2: 1010.452 ns/op
# Warmup Iteration   3: 843.225 ns/op
# Warmup Iteration   4: 844.539 ns/op
# Warmup Iteration   5: 848.330 ns/op
Iteration   1: 852.555 ns/op
Iteration   2: 857.472 ns/op
Iteration   3: 838.831 ns/op
Iteration   4: 838.553 ns/op
Iteration   5: 839.616 ns/op
Iteration   6: 841.460 ns/op
Iteration   7: 845.594 ns/op
Iteration   8: 847.526 ns/op
Iteration   9: 849.848 ns/op
Iteration  10: 844.310 ns/op
Iteration  11: 835.473 ns/op
Iteration  12: 839.729 ns/op
Iteration  13: 840.749 ns/op
Iteration  14: 839.778 ns/op
Iteration  15: 835.913 ns/op
Iteration  16: 842.862 ns/op
Iteration  17: 837.066 ns/op
Iteration  18: 837.556 ns/op
Iteration  19: 836.648 ns/op
Iteration  20: 838.116 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1274.127 ns/op
# Warmup Iteration   2: 1001.732 ns/op
# Warmup Iteration   3: 846.751 ns/op
# Warmup Iteration   4: 848.967 ns/op
# Warmup Iteration   5: 851.408 ns/op
Iteration   1: 855.631 ns/op
Iteration   2: 861.425 ns/op
Iteration   3: 841.787 ns/op
Iteration   4: 841.699 ns/op
Iteration   5: 842.159 ns/op
Iteration   6: 841.406 ns/op
Iteration   7: 840.614 ns/op
Iteration   8: 841.430 ns/op
Iteration   9: 853.399 ns/op
Iteration  10: 841.591 ns/op
Iteration  11: 837.179 ns/op
Iteration  12: 840.729 ns/op
Iteration  13: 840.016 ns/op
Iteration  14: 839.063 ns/op
Iteration  15: 839.063 ns/op
Iteration  16: 844.717 ns/op
Iteration  17: 839.106 ns/op
Iteration  18: 839.638 ns/op
Iteration  19: 840.393 ns/op
Iteration  20: 839.222 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  842.550 Â±(99.9%) 2.837 ns/op [Average]
  (min, avg, max) = (830.033, 842.550, 870.218), stdev = 8.364
  CI (99.9%): [839.713, 845.387] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                           (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*       	
		,
			
 
 
 	 
	   
    
	
	  	 
  	

	 		 		
 

 
		  	 
  
	  			 
	 



  
	  avgt  100  795.449 Â± 12.626  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*       	
		,
			
 
 
 	 
	   
    
	
	  	 
  	

	 		 		
 

 
		  	 
  
	  			 
	 



  
	  avgt  100  842.550 Â±  2.837  ns/op

Benchmark result is saved to split_precompiled_regex_3_194_Match.csv
