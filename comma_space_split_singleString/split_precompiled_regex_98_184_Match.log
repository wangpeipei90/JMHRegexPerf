# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 		
			
 
	 

 									 	
		 
 	
  
 	
	 		 

	  
  
		,   
 



 

	

 
			


	

	

  			

 

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1144.959 ns/op
# Warmup Iteration   2: 835.711 ns/op
# Warmup Iteration   3: 726.342 ns/op
# Warmup Iteration   4: 745.610 ns/op
# Warmup Iteration   5: 735.859 ns/op
Iteration   1: 739.549 ns/op
Iteration   2: 722.599 ns/op
Iteration   3: 722.534 ns/op
Iteration   4: 722.428 ns/op
Iteration   5: 722.824 ns/op
Iteration   6: 722.395 ns/op
Iteration   7: 722.489 ns/op
Iteration   8: 722.383 ns/op
Iteration   9: 722.344 ns/op
Iteration  10: 722.937 ns/op
Iteration  11: 723.163 ns/op
Iteration  12: 720.377 ns/op
Iteration  13: 721.241 ns/op
Iteration  14: 726.023 ns/op
Iteration  15: 721.144 ns/op
Iteration  16: 720.467 ns/op
Iteration  17: 720.390 ns/op
Iteration  18: 720.597 ns/op
Iteration  19: 720.019 ns/op
Iteration  20: 720.837 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1207.529 ns/op
# Warmup Iteration   2: 869.425 ns/op
# Warmup Iteration   3: 748.372 ns/op
# Warmup Iteration   4: 758.234 ns/op
# Warmup Iteration   5: 763.602 ns/op
Iteration   1: 763.401 ns/op
Iteration   2: 746.037 ns/op
Iteration   3: 748.011 ns/op
Iteration   4: 745.162 ns/op
Iteration   5: 745.031 ns/op
Iteration   6: 744.627 ns/op
Iteration   7: 745.070 ns/op
Iteration   8: 745.096 ns/op
Iteration   9: 744.773 ns/op
Iteration  10: 745.751 ns/op
Iteration  11: 743.517 ns/op
Iteration  12: 743.150 ns/op
Iteration  13: 743.269 ns/op
Iteration  14: 742.831 ns/op
Iteration  15: 748.933 ns/op
Iteration  16: 743.314 ns/op
Iteration  17: 743.707 ns/op
Iteration  18: 743.475 ns/op
Iteration  19: 743.824 ns/op
Iteration  20: 744.207 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1189.748 ns/op
# Warmup Iteration   2: 897.406 ns/op
# Warmup Iteration   3: 768.611 ns/op
# Warmup Iteration   4: 770.915 ns/op
# Warmup Iteration   5: 773.713 ns/op
Iteration   1: 778.859 ns/op
Iteration   2: 781.273 ns/op
Iteration   3: 764.746 ns/op
Iteration   4: 765.032 ns/op
Iteration   5: 765.504 ns/op
Iteration   6: 764.240 ns/op
Iteration   7: 764.491 ns/op
Iteration   8: 764.985 ns/op
Iteration   9: 764.810 ns/op
Iteration  10: 768.559 ns/op
Iteration  11: 762.836 ns/op
Iteration  12: 762.743 ns/op
Iteration  13: 762.572 ns/op
Iteration  14: 762.940 ns/op
Iteration  15: 762.666 ns/op
Iteration  16: 763.202 ns/op
Iteration  17: 762.976 ns/op
Iteration  18: 762.515 ns/op
Iteration  19: 762.666 ns/op
Iteration  20: 762.611 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1204.078 ns/op
# Warmup Iteration   2: 878.642 ns/op
# Warmup Iteration   3: 745.549 ns/op
# Warmup Iteration   4: 752.049 ns/op
# Warmup Iteration   5: 762.545 ns/op
Iteration   1: 759.200 ns/op
Iteration   2: 741.362 ns/op
Iteration   3: 741.940 ns/op
Iteration   4: 741.957 ns/op
Iteration   5: 742.365 ns/op
Iteration   6: 740.594 ns/op
Iteration   7: 740.799 ns/op
Iteration   8: 741.054 ns/op
Iteration   9: 741.203 ns/op
Iteration  10: 741.319 ns/op
Iteration  11: 739.316 ns/op
Iteration  12: 739.920 ns/op
Iteration  13: 744.446 ns/op
Iteration  14: 739.270 ns/op
Iteration  15: 739.557 ns/op
Iteration  16: 739.881 ns/op
Iteration  17: 740.246 ns/op
Iteration  18: 740.043 ns/op
Iteration  19: 739.904 ns/op
Iteration  20: 740.329 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1206.670 ns/op
# Warmup Iteration   2: 846.999 ns/op
# Warmup Iteration   3: 729.660 ns/op
# Warmup Iteration   4: 744.137 ns/op
# Warmup Iteration   5: 743.126 ns/op
Iteration   1: 743.197 ns/op
Iteration   2: 726.267 ns/op
Iteration   3: 726.184 ns/op
Iteration   4: 726.085 ns/op
Iteration   5: 726.114 ns/op
Iteration   6: 726.344 ns/op
Iteration   7: 726.002 ns/op
Iteration   8: 726.242 ns/op
Iteration   9: 725.898 ns/op
Iteration  10: 726.223 ns/op
Iteration  11: 723.986 ns/op
Iteration  12: 723.540 ns/op
Iteration  13: 723.699 ns/op
Iteration  14: 724.829 ns/op
Iteration  15: 723.712 ns/op
Iteration  16: 725.101 ns/op
Iteration  17: 724.542 ns/op
Iteration  18: 725.029 ns/op
Iteration  19: 724.338 ns/op
Iteration  20: 725.929 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  740.381 Â±(99.9%) 5.424 ns/op [Average]
  (min, avg, max) = (720.019, 740.381, 781.273), stdev = 15.993
  CI (99.9%): [734.957, 745.805] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 		
			
 
	 

 									 	
		 
 	
  
 	
	 		 

	  
  
		,   
 



 

	

 
			


	

	

  			

 

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1200.381 ns/op
# Warmup Iteration   2: 868.244 ns/op
# Warmup Iteration   3: 752.025 ns/op
# Warmup Iteration   4: 767.892 ns/op
# Warmup Iteration   5: 761.514 ns/op
Iteration   1: 766.492 ns/op
Iteration   2: 748.730 ns/op
Iteration   3: 748.979 ns/op
Iteration   4: 748.436 ns/op
Iteration   5: 748.627 ns/op
Iteration   6: 748.426 ns/op
Iteration   7: 748.577 ns/op
Iteration   8: 754.862 ns/op
Iteration   9: 748.925 ns/op
Iteration  10: 749.110 ns/op
Iteration  11: 750.850 ns/op
Iteration  12: 746.660 ns/op
Iteration  13: 746.749 ns/op
Iteration  14: 746.460 ns/op
Iteration  15: 746.287 ns/op
Iteration  16: 748.731 ns/op
Iteration  17: 747.118 ns/op
Iteration  18: 746.784 ns/op
Iteration  19: 747.894 ns/op
Iteration  20: 747.379 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1217.483 ns/op
# Warmup Iteration   2: 894.296 ns/op
# Warmup Iteration   3: 766.906 ns/op
# Warmup Iteration   4: 772.710 ns/op
# Warmup Iteration   5: 785.503 ns/op
Iteration   1: 780.808 ns/op
Iteration   2: 763.002 ns/op
Iteration   3: 763.003 ns/op
Iteration   4: 764.030 ns/op
Iteration   5: 762.816 ns/op
Iteration   6: 763.138 ns/op
Iteration   7: 762.929 ns/op
Iteration   8: 762.525 ns/op
Iteration   9: 762.782 ns/op
Iteration  10: 762.825 ns/op
Iteration  11: 760.315 ns/op
Iteration  12: 760.047 ns/op
Iteration  13: 760.033 ns/op
Iteration  14: 759.967 ns/op
Iteration  15: 759.894 ns/op
Iteration  16: 759.927 ns/op
Iteration  17: 759.891 ns/op
Iteration  18: 759.936 ns/op
Iteration  19: 760.279 ns/op
Iteration  20: 760.370 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1158.012 ns/op
# Warmup Iteration   2: 833.799 ns/op
# Warmup Iteration   3: 740.972 ns/op
# Warmup Iteration   4: 736.342 ns/op
# Warmup Iteration   5: 740.407 ns/op
Iteration   1: 743.912 ns/op
Iteration   2: 731.710 ns/op
Iteration   3: 727.509 ns/op
Iteration   4: 727.756 ns/op
Iteration   5: 727.903 ns/op
Iteration   6: 727.822 ns/op
Iteration   7: 727.426 ns/op
Iteration   8: 728.526 ns/op
Iteration   9: 733.848 ns/op
Iteration  10: 729.149 ns/op
Iteration  11: 726.053 ns/op
Iteration  12: 726.007 ns/op
Iteration  13: 725.781 ns/op
Iteration  14: 726.250 ns/op
Iteration  15: 731.473 ns/op
Iteration  16: 725.827 ns/op
Iteration  17: 726.353 ns/op
Iteration  18: 750.821 ns/op
Iteration  19: 729.631 ns/op
Iteration  20: 727.488 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1220.823 ns/op
# Warmup Iteration   2: 890.887 ns/op
# Warmup Iteration   3: 767.391 ns/op
# Warmup Iteration   4: 769.488 ns/op
# Warmup Iteration   5: 789.087 ns/op
Iteration   1: 780.114 ns/op
Iteration   2: 764.568 ns/op
Iteration   3: 763.201 ns/op
Iteration   4: 762.450 ns/op
Iteration   5: 763.235 ns/op
Iteration   6: 768.619 ns/op
Iteration   7: 763.667 ns/op
Iteration   8: 764.231 ns/op
Iteration   9: 763.204 ns/op
Iteration  10: 765.038 ns/op
Iteration  11: 760.444 ns/op
Iteration  12: 760.425 ns/op
Iteration  13: 760.754 ns/op
Iteration  14: 760.635 ns/op
Iteration  15: 761.670 ns/op
Iteration  16: 761.761 ns/op
Iteration  17: 763.130 ns/op
Iteration  18: 762.575 ns/op
Iteration  19: 761.477 ns/op
Iteration  20: 760.833 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1253.340 ns/op
# Warmup Iteration   2: 965.591 ns/op
# Warmup Iteration   3: 817.646 ns/op
# Warmup Iteration   4: 820.879 ns/op
# Warmup Iteration   5: 823.888 ns/op
Iteration   1: 828.049 ns/op
Iteration   2: 833.672 ns/op
Iteration   3: 814.054 ns/op
Iteration   4: 813.761 ns/op
Iteration   5: 814.168 ns/op
Iteration   6: 814.074 ns/op
Iteration   7: 814.459 ns/op
Iteration   8: 815.027 ns/op
Iteration   9: 815.793 ns/op
Iteration  10: 824.805 ns/op
Iteration  11: 819.409 ns/op
Iteration  12: 812.765 ns/op
Iteration  13: 812.285 ns/op
Iteration  14: 816.243 ns/op
Iteration  15: 813.759 ns/op
Iteration  16: 813.040 ns/op
Iteration  17: 814.157 ns/op
Iteration  18: 812.853 ns/op
Iteration  19: 813.571 ns/op
Iteration  20: 815.263 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  764.391 Â±(99.9%) 9.948 ns/op [Average]
  (min, avg, max) = (725.781, 764.391, 833.672), stdev = 29.332
  CI (99.9%): [754.443, 774.339] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 		
			
 
	 

 									 	
		 
 	
  
 	
	 		 

	  
  
		,   
 



 

	

 
			


	

	

  			

 

  avgt  100  740.381 Â± 5.424  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 		
			
 
	 

 									 	
		 
 	
  
 	
	 		 

	  
  
		,   
 



 

	

 
			


	

	

  			

 

  avgt  100  764.391 Â± 9.948  ns/op

Benchmark result is saved to split_precompiled_regex_98_184_Match.csv
