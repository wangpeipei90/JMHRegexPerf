# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 	   	  
  		
		
		 
 		

 
  			 	 

  	
	  
 



	
		
		
   	 		
			
	   
		
 ,	
	
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1129.659 ns/op
# Warmup Iteration   2: 805.799 ns/op
# Warmup Iteration   3: 715.649 ns/op
# Warmup Iteration   4: 712.067 ns/op
# Warmup Iteration   5: 715.670 ns/op
Iteration   1: 719.866 ns/op
Iteration   2: 703.843 ns/op
Iteration   3: 703.144 ns/op
Iteration   4: 702.656 ns/op
Iteration   5: 702.743 ns/op
Iteration   6: 702.926 ns/op
Iteration   7: 705.914 ns/op
Iteration   8: 702.808 ns/op
Iteration   9: 705.549 ns/op
Iteration  10: 700.938 ns/op
Iteration  11: 700.972 ns/op
Iteration  12: 700.929 ns/op
Iteration  13: 701.037 ns/op
Iteration  14: 701.003 ns/op
Iteration  15: 701.257 ns/op
Iteration  16: 701.512 ns/op
Iteration  17: 702.680 ns/op
Iteration  18: 701.588 ns/op
Iteration  19: 702.363 ns/op
Iteration  20: 701.798 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1176.474 ns/op
# Warmup Iteration   2: 802.094 ns/op
# Warmup Iteration   3: 704.985 ns/op
# Warmup Iteration   4: 702.107 ns/op
# Warmup Iteration   5: 705.968 ns/op
Iteration   1: 709.730 ns/op
Iteration   2: 694.309 ns/op
Iteration   3: 693.790 ns/op
Iteration   4: 693.915 ns/op
Iteration   5: 693.559 ns/op
Iteration   6: 696.839 ns/op
Iteration   7: 693.747 ns/op
Iteration   8: 692.755 ns/op
Iteration   9: 693.045 ns/op
Iteration  10: 691.286 ns/op
Iteration  11: 697.761 ns/op
Iteration  12: 691.496 ns/op
Iteration  13: 691.722 ns/op
Iteration  14: 691.632 ns/op
Iteration  15: 692.852 ns/op
Iteration  16: 691.463 ns/op
Iteration  17: 691.838 ns/op
Iteration  18: 691.808 ns/op
Iteration  19: 691.690 ns/op
Iteration  20: 692.519 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1125.707 ns/op
# Warmup Iteration   2: 742.060 ns/op
# Warmup Iteration   3: 664.104 ns/op
# Warmup Iteration   4: 661.138 ns/op
# Warmup Iteration   5: 664.654 ns/op
Iteration   1: 669.173 ns/op
Iteration   2: 656.603 ns/op
Iteration   3: 653.365 ns/op
Iteration   4: 652.754 ns/op
Iteration   5: 660.095 ns/op
Iteration   6: 652.457 ns/op
Iteration   7: 652.961 ns/op
Iteration   8: 656.068 ns/op
Iteration   9: 651.494 ns/op
Iteration  10: 651.428 ns/op
Iteration  11: 651.529 ns/op
Iteration  12: 651.769 ns/op
Iteration  13: 653.136 ns/op
Iteration  14: 651.738 ns/op
Iteration  15: 651.507 ns/op
Iteration  16: 651.509 ns/op
Iteration  17: 652.013 ns/op
Iteration  18: 652.549 ns/op
Iteration  19: 653.336 ns/op
Iteration  20: 652.217 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1169.488 ns/op
# Warmup Iteration   2: 806.470 ns/op
# Warmup Iteration   3: 710.425 ns/op
# Warmup Iteration   4: 706.601 ns/op
# Warmup Iteration   5: 710.326 ns/op
Iteration   1: 714.438 ns/op
Iteration   2: 699.904 ns/op
Iteration   3: 698.592 ns/op
Iteration   4: 699.064 ns/op
Iteration   5: 698.550 ns/op
Iteration   6: 698.309 ns/op
Iteration   7: 701.620 ns/op
Iteration   8: 698.321 ns/op
Iteration   9: 699.126 ns/op
Iteration  10: 696.108 ns/op
Iteration  11: 696.277 ns/op
Iteration  12: 696.313 ns/op
Iteration  13: 696.028 ns/op
Iteration  14: 695.710 ns/op
Iteration  15: 695.607 ns/op
Iteration  16: 697.038 ns/op
Iteration  17: 696.680 ns/op
Iteration  18: 696.928 ns/op
Iteration  19: 696.535 ns/op
Iteration  20: 697.768 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1123.581 ns/op
# Warmup Iteration   2: 803.643 ns/op
# Warmup Iteration   3: 715.936 ns/op
# Warmup Iteration   4: 712.360 ns/op
# Warmup Iteration   5: 715.757 ns/op
Iteration   1: 720.241 ns/op
Iteration   2: 704.478 ns/op
Iteration   3: 703.840 ns/op
Iteration   4: 703.492 ns/op
Iteration   5: 703.623 ns/op
Iteration   6: 703.305 ns/op
Iteration   7: 711.164 ns/op
Iteration   8: 703.474 ns/op
Iteration   9: 703.701 ns/op
Iteration  10: 701.605 ns/op
Iteration  11: 701.219 ns/op
Iteration  12: 705.304 ns/op
Iteration  13: 702.867 ns/op
Iteration  14: 706.157 ns/op
Iteration  15: 702.797 ns/op
Iteration  16: 706.719 ns/op
Iteration  17: 703.703 ns/op
Iteration  18: 703.057 ns/op
Iteration  19: 701.453 ns/op
Iteration  20: 707.156 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  690.893 Â±(99.9%) 6.591 ns/op [Average]
  (min, avg, max) = (651.428, 690.893, 720.241), stdev = 19.433
  CI (99.9%): [684.302, 697.483] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 	   	  
  		
		
		 
 		

 
  			 	 

  	
	  
 



	
		
		
   	 		
			
	   
		
 ,	
	
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1184.458 ns/op
# Warmup Iteration   2: 848.470 ns/op
# Warmup Iteration   3: 739.346 ns/op
# Warmup Iteration   4: 754.473 ns/op
# Warmup Iteration   5: 748.719 ns/op
Iteration   1: 753.198 ns/op
Iteration   2: 735.898 ns/op
Iteration   3: 736.350 ns/op
Iteration   4: 735.053 ns/op
Iteration   5: 735.369 ns/op
Iteration   6: 735.612 ns/op
Iteration   7: 735.795 ns/op
Iteration   8: 735.818 ns/op
Iteration   9: 735.629 ns/op
Iteration  10: 738.650 ns/op
Iteration  11: 734.739 ns/op
Iteration  12: 733.616 ns/op
Iteration  13: 733.589 ns/op
Iteration  14: 733.282 ns/op
Iteration  15: 733.784 ns/op
Iteration  16: 734.473 ns/op
Iteration  17: 734.654 ns/op
Iteration  18: 734.882 ns/op
Iteration  19: 734.611 ns/op
Iteration  20: 733.589 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1194.356 ns/op
# Warmup Iteration   2: 860.462 ns/op
# Warmup Iteration   3: 745.541 ns/op
# Warmup Iteration   4: 760.097 ns/op
# Warmup Iteration   5: 753.793 ns/op
Iteration   1: 758.363 ns/op
Iteration   2: 740.927 ns/op
Iteration   3: 740.549 ns/op
Iteration   4: 740.182 ns/op
Iteration   5: 740.770 ns/op
Iteration   6: 740.525 ns/op
Iteration   7: 740.475 ns/op
Iteration   8: 740.474 ns/op
Iteration   9: 740.181 ns/op
Iteration  10: 740.489 ns/op
Iteration  11: 737.924 ns/op
Iteration  12: 739.182 ns/op
Iteration  13: 740.306 ns/op
Iteration  14: 738.933 ns/op
Iteration  15: 739.147 ns/op
Iteration  16: 738.870 ns/op
Iteration  17: 739.524 ns/op
Iteration  18: 739.722 ns/op
Iteration  19: 739.834 ns/op
Iteration  20: 739.830 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1213.716 ns/op
# Warmup Iteration   2: 883.423 ns/op
# Warmup Iteration   3: 769.059 ns/op
# Warmup Iteration   4: 772.764 ns/op
# Warmup Iteration   5: 785.261 ns/op
Iteration   1: 779.317 ns/op
Iteration   2: 761.182 ns/op
Iteration   3: 761.182 ns/op
Iteration   4: 761.529 ns/op
Iteration   5: 761.472 ns/op
Iteration   6: 760.992 ns/op
Iteration   7: 761.328 ns/op
Iteration   8: 761.529 ns/op
Iteration   9: 761.446 ns/op
Iteration  10: 762.766 ns/op
Iteration  11: 760.471 ns/op
Iteration  12: 758.806 ns/op
Iteration  13: 758.438 ns/op
Iteration  14: 758.770 ns/op
Iteration  15: 758.937 ns/op
Iteration  16: 759.091 ns/op
Iteration  17: 765.803 ns/op
Iteration  18: 761.037 ns/op
Iteration  19: 760.615 ns/op
Iteration  20: 759.310 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1196.471 ns/op
# Warmup Iteration   2: 857.111 ns/op
# Warmup Iteration   3: 741.590 ns/op
# Warmup Iteration   4: 756.789 ns/op
# Warmup Iteration   5: 751.340 ns/op
Iteration   1: 756.351 ns/op
Iteration   2: 739.266 ns/op
Iteration   3: 737.857 ns/op
Iteration   4: 738.015 ns/op
Iteration   5: 737.920 ns/op
Iteration   6: 737.943 ns/op
Iteration   7: 738.220 ns/op
Iteration   8: 737.182 ns/op
Iteration   9: 737.703 ns/op
Iteration  10: 737.480 ns/op
Iteration  11: 735.495 ns/op
Iteration  12: 737.212 ns/op
Iteration  13: 735.312 ns/op
Iteration  14: 735.099 ns/op
Iteration  15: 734.895 ns/op
Iteration  16: 735.427 ns/op
Iteration  17: 736.715 ns/op
Iteration  18: 738.144 ns/op
Iteration  19: 736.237 ns/op
Iteration  20: 736.443 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1196.943 ns/op
# Warmup Iteration   2: 837.716 ns/op
# Warmup Iteration   3: 728.233 ns/op
# Warmup Iteration   4: 735.564 ns/op
# Warmup Iteration   5: 732.289 ns/op
Iteration   1: 736.399 ns/op
Iteration   2: 719.934 ns/op
Iteration   3: 720.520 ns/op
Iteration   4: 720.136 ns/op
Iteration   5: 720.443 ns/op
Iteration   6: 719.884 ns/op
Iteration   7: 721.176 ns/op
Iteration   8: 729.695 ns/op
Iteration   9: 720.198 ns/op
Iteration  10: 718.173 ns/op
Iteration  11: 717.824 ns/op
Iteration  12: 717.807 ns/op
Iteration  13: 717.648 ns/op
Iteration  14: 718.120 ns/op
Iteration  15: 718.098 ns/op
Iteration  16: 717.883 ns/op
Iteration  17: 718.193 ns/op
Iteration  18: 719.439 ns/op
Iteration  19: 718.068 ns/op
Iteration  20: 718.574 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  739.360 Â±(99.9%) 4.739 ns/op [Average]
  (min, avg, max) = (717.648, 739.360, 779.317), stdev = 13.972
  CI (99.9%): [734.621, 744.098] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
 	   	  
  		
		
		 
 		

 
  			 	 

  	
	  
 



	
		
		
   	 		
			
	   
		
 ,	
	
	  avgt  100  690.893 Â± 6.591  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
 	   	  
  		
		
		 
 		

 
  			 	 

  	
	  
 



	
		
		
   	 		
			
	   
		
 ,	
	
	  avgt  100  739.360 Â± 4.739  ns/op

Benchmark result is saved to split_precompiled_regex_68_166_Match.csv
