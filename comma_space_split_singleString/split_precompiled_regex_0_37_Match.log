# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
  
	
	  , 
	 		 
	 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 918.673 ns/op
# Warmup Iteration   2: 485.300 ns/op
# Warmup Iteration   3: 471.930 ns/op
# Warmup Iteration   4: 482.370 ns/op
# Warmup Iteration   5: 460.971 ns/op
Iteration   1: 467.083 ns/op
Iteration   2: 462.950 ns/op
Iteration   3: 460.828 ns/op
Iteration   4: 462.455 ns/op
Iteration   5: 461.366 ns/op
Iteration   6: 459.292 ns/op
Iteration   7: 459.682 ns/op
Iteration   8: 460.002 ns/op
Iteration   9: 459.006 ns/op
Iteration  10: 459.943 ns/op
Iteration  11: 460.665 ns/op
Iteration  12: 459.529 ns/op
Iteration  13: 460.193 ns/op
Iteration  14: 461.194 ns/op
Iteration  15: 460.081 ns/op
Iteration  16: 461.990 ns/op
Iteration  17: 462.670 ns/op
Iteration  18: 460.977 ns/op
Iteration  19: 463.229 ns/op
Iteration  20: 462.321 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 903.652 ns/op
# Warmup Iteration   2: 495.636 ns/op
# Warmup Iteration   3: 467.867 ns/op
# Warmup Iteration   4: 476.946 ns/op
# Warmup Iteration   5: 453.974 ns/op
Iteration   1: 459.815 ns/op
Iteration   2: 457.861 ns/op
Iteration   3: 453.973 ns/op
Iteration   4: 456.140 ns/op
Iteration   5: 457.789 ns/op
Iteration   6: 454.008 ns/op
Iteration   7: 451.843 ns/op
Iteration   8: 456.566 ns/op
Iteration   9: 454.458 ns/op
Iteration  10: 452.385 ns/op
Iteration  11: 453.280 ns/op
Iteration  12: 453.315 ns/op
Iteration  13: 452.775 ns/op
Iteration  14: 454.542 ns/op
Iteration  15: 454.340 ns/op
Iteration  16: 454.473 ns/op
Iteration  17: 452.840 ns/op
Iteration  18: 454.613 ns/op
Iteration  19: 454.995 ns/op
Iteration  20: 452.925 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 904.261 ns/op
# Warmup Iteration   2: 471.985 ns/op
# Warmup Iteration   3: 458.128 ns/op
# Warmup Iteration   4: 467.161 ns/op
# Warmup Iteration   5: 449.091 ns/op
Iteration   1: 446.613 ns/op
Iteration   2: 449.173 ns/op
Iteration   3: 449.188 ns/op
Iteration   4: 445.794 ns/op
Iteration   5: 446.941 ns/op
Iteration   6: 446.405 ns/op
Iteration   7: 446.410 ns/op
Iteration   8: 445.504 ns/op
Iteration   9: 447.797 ns/op
Iteration  10: 449.763 ns/op
Iteration  11: 446.865 ns/op
Iteration  12: 444.161 ns/op
Iteration  13: 445.465 ns/op
Iteration  14: 447.459 ns/op
Iteration  15: 445.334 ns/op
Iteration  16: 447.426 ns/op
Iteration  17: 447.757 ns/op
Iteration  18: 447.625 ns/op
Iteration  19: 444.970 ns/op
Iteration  20: 446.767 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 914.974 ns/op
# Warmup Iteration   2: 478.769 ns/op
# Warmup Iteration   3: 460.261 ns/op
# Warmup Iteration   4: 468.776 ns/op
# Warmup Iteration   5: 449.515 ns/op
Iteration   1: 450.208 ns/op
Iteration   2: 449.960 ns/op
Iteration   3: 451.556 ns/op
Iteration   4: 449.579 ns/op
Iteration   5: 449.125 ns/op
Iteration   6: 447.345 ns/op
Iteration   7: 448.327 ns/op
Iteration   8: 447.515 ns/op
Iteration   9: 448.618 ns/op
Iteration  10: 450.838 ns/op
Iteration  11: 447.354 ns/op
Iteration  12: 448.834 ns/op
Iteration  13: 449.078 ns/op
Iteration  14: 448.054 ns/op
Iteration  15: 447.391 ns/op
Iteration  16: 449.641 ns/op
Iteration  17: 447.855 ns/op
Iteration  18: 446.633 ns/op
Iteration  19: 448.106 ns/op
Iteration  20: 449.847 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 916.661 ns/op
# Warmup Iteration   2: 474.972 ns/op
# Warmup Iteration   3: 460.946 ns/op
# Warmup Iteration   4: 470.949 ns/op
# Warmup Iteration   5: 450.608 ns/op
Iteration   1: 452.571 ns/op
Iteration   2: 452.293 ns/op
Iteration   3: 453.785 ns/op
Iteration   4: 450.285 ns/op
Iteration   5: 453.627 ns/op
Iteration   6: 453.272 ns/op
Iteration   7: 448.505 ns/op
Iteration   8: 449.788 ns/op
Iteration   9: 449.790 ns/op
Iteration  10: 450.140 ns/op
Iteration  11: 448.969 ns/op
Iteration  12: 450.289 ns/op
Iteration  13: 450.189 ns/op
Iteration  14: 448.998 ns/op
Iteration  15: 450.706 ns/op
Iteration  16: 450.255 ns/op
Iteration  17: 451.207 ns/op
Iteration  18: 449.141 ns/op
Iteration  19: 451.114 ns/op
Iteration  20: 456.002 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  452.526 ±(99.9%) 1.828 ns/op [Average]
  (min, avg, max) = (444.161, 452.526, 467.083), stdev = 5.389
  CI (99.9%): [450.698, 454.354] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
  
	
	  , 
	 		 
	 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 935.195 ns/op
# Warmup Iteration   2: 504.401 ns/op
# Warmup Iteration   3: 485.539 ns/op
# Warmup Iteration   4: 501.624 ns/op
# Warmup Iteration   5: 473.398 ns/op
Iteration   1: 478.601 ns/op
Iteration   2: 478.773 ns/op
Iteration   3: 476.113 ns/op
Iteration   4: 478.062 ns/op
Iteration   5: 478.689 ns/op
Iteration   6: 471.810 ns/op
Iteration   7: 473.112 ns/op
Iteration   8: 476.760 ns/op
Iteration   9: 471.726 ns/op
Iteration  10: 474.317 ns/op
Iteration  11: 473.645 ns/op
Iteration  12: 472.879 ns/op
Iteration  13: 474.992 ns/op
Iteration  14: 474.391 ns/op
Iteration  15: 472.951 ns/op
Iteration  16: 474.609 ns/op
Iteration  17: 476.348 ns/op
Iteration  18: 473.593 ns/op
Iteration  19: 476.170 ns/op
Iteration  20: 476.202 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 914.975 ns/op
# Warmup Iteration   2: 483.599 ns/op
# Warmup Iteration   3: 469.891 ns/op
# Warmup Iteration   4: 479.051 ns/op
# Warmup Iteration   5: 458.507 ns/op
Iteration   1: 460.513 ns/op
Iteration   2: 460.563 ns/op
Iteration   3: 460.296 ns/op
Iteration   4: 458.312 ns/op
Iteration   5: 461.377 ns/op
Iteration   6: 460.624 ns/op
Iteration   7: 458.056 ns/op
Iteration   8: 456.939 ns/op
Iteration   9: 458.491 ns/op
Iteration  10: 459.439 ns/op
Iteration  11: 457.423 ns/op
Iteration  12: 459.102 ns/op
Iteration  13: 459.572 ns/op
Iteration  14: 460.020 ns/op
Iteration  15: 458.394 ns/op
Iteration  16: 460.705 ns/op
Iteration  17: 460.724 ns/op
Iteration  18: 457.647 ns/op
Iteration  19: 459.062 ns/op
Iteration  20: 460.742 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 931.966 ns/op
# Warmup Iteration   2: 503.940 ns/op
# Warmup Iteration   3: 486.249 ns/op
# Warmup Iteration   4: 495.946 ns/op
# Warmup Iteration   5: 474.779 ns/op
Iteration   1: 476.381 ns/op
Iteration   2: 476.831 ns/op
Iteration   3: 475.048 ns/op
Iteration   4: 480.939 ns/op
Iteration   5: 478.609 ns/op
Iteration   6: 473.025 ns/op
Iteration   7: 474.255 ns/op
Iteration   8: 474.700 ns/op
Iteration   9: 473.600 ns/op
Iteration  10: 474.257 ns/op
Iteration  11: 475.016 ns/op
Iteration  12: 473.311 ns/op
Iteration  13: 475.272 ns/op
Iteration  14: 475.953 ns/op
Iteration  15: 473.903 ns/op
Iteration  16: 477.120 ns/op
Iteration  17: 476.835 ns/op
Iteration  18: 473.766 ns/op
Iteration  19: 476.728 ns/op
Iteration  20: 476.939 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 928.824 ns/op
# Warmup Iteration   2: 495.296 ns/op
# Warmup Iteration   3: 479.293 ns/op
# Warmup Iteration   4: 487.727 ns/op
# Warmup Iteration   5: 466.649 ns/op
Iteration   1: 468.837 ns/op
Iteration   2: 469.126 ns/op
Iteration   3: 466.252 ns/op
Iteration   4: 468.665 ns/op
Iteration   5: 468.446 ns/op
Iteration   6: 464.422 ns/op
Iteration   7: 464.872 ns/op
Iteration   8: 465.801 ns/op
Iteration   9: 465.775 ns/op
Iteration  10: 464.581 ns/op
Iteration  11: 465.512 ns/op
Iteration  12: 466.510 ns/op
Iteration  13: 464.721 ns/op
Iteration  14: 466.187 ns/op
Iteration  15: 466.192 ns/op
Iteration  16: 464.788 ns/op
Iteration  17: 466.387 ns/op
Iteration  18: 468.501 ns/op
Iteration  19: 467.876 ns/op
Iteration  20: 466.057 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 907.632 ns/op
# Warmup Iteration   2: 501.077 ns/op
# Warmup Iteration   3: 500.079 ns/op
# Warmup Iteration   4: 507.824 ns/op
# Warmup Iteration   5: 486.844 ns/op
Iteration   1: 487.691 ns/op
Iteration   2: 483.287 ns/op
Iteration   3: 486.569 ns/op
Iteration   4: 485.786 ns/op
Iteration   5: 483.156 ns/op
Iteration   6: 481.941 ns/op
Iteration   7: 481.659 ns/op
Iteration   8: 479.830 ns/op
Iteration   9: 480.718 ns/op
Iteration  10: 480.858 ns/op
Iteration  11: 484.656 ns/op
Iteration  12: 482.554 ns/op
Iteration  13: 487.018 ns/op
Iteration  14: 479.269 ns/op
Iteration  15: 482.510 ns/op
Iteration  16: 479.899 ns/op
Iteration  17: 483.797 ns/op
Iteration  18: 482.690 ns/op
Iteration  19: 480.051 ns/op
Iteration  20: 481.511 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  471.892 ±(99.9%) 2.839 ns/op [Average]
  (min, avg, max) = (456.939, 471.892, 487.691), stdev = 8.372
  CI (99.9%): [469.053, 474.731] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
  
	
	  , 
	 		 
	 	  avgt  100  452.526 ± 1.828  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
  
	
	  , 
	 		 
	 	  avgt  100  471.892 ± 2.839  ns/op

Benchmark result is saved to split_precompiled_regex_0_37_Match.csv
