# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  



 
	
	 
	 	, 
 
		

		 
	 
  		   		
	
	  	
 	

 		 	  
   
   )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1122.582 ns/op
# Warmup Iteration   2: 739.683 ns/op
# Warmup Iteration   3: 662.637 ns/op
# Warmup Iteration   4: 658.040 ns/op
# Warmup Iteration   5: 661.050 ns/op
Iteration   1: 665.336 ns/op
Iteration   2: 658.039 ns/op
Iteration   3: 650.074 ns/op
Iteration   4: 650.675 ns/op
Iteration   5: 650.199 ns/op
Iteration   6: 650.647 ns/op
Iteration   7: 653.336 ns/op
Iteration   8: 650.297 ns/op
Iteration   9: 653.206 ns/op
Iteration  10: 648.215 ns/op
Iteration  11: 648.045 ns/op
Iteration  12: 647.904 ns/op
Iteration  13: 649.216 ns/op
Iteration  14: 648.693 ns/op
Iteration  15: 648.321 ns/op
Iteration  16: 649.762 ns/op
Iteration  17: 648.219 ns/op
Iteration  18: 649.984 ns/op
Iteration  19: 649.388 ns/op
Iteration  20: 649.191 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1102.598 ns/op
# Warmup Iteration   2: 775.193 ns/op
# Warmup Iteration   3: 691.870 ns/op
# Warmup Iteration   4: 687.789 ns/op
# Warmup Iteration   5: 691.051 ns/op
Iteration   1: 695.241 ns/op
Iteration   2: 680.148 ns/op
Iteration   3: 680.217 ns/op
Iteration   4: 683.038 ns/op
Iteration   5: 680.009 ns/op
Iteration   6: 679.995 ns/op
Iteration   7: 678.937 ns/op
Iteration   8: 678.734 ns/op
Iteration   9: 679.879 ns/op
Iteration  10: 678.413 ns/op
Iteration  11: 678.017 ns/op
Iteration  12: 679.666 ns/op
Iteration  13: 678.526 ns/op
Iteration  14: 680.397 ns/op
Iteration  15: 678.290 ns/op
Iteration  16: 678.169 ns/op
Iteration  17: 678.114 ns/op
Iteration  18: 678.511 ns/op
Iteration  19: 680.446 ns/op
Iteration  20: 679.017 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1125.027 ns/op
# Warmup Iteration   2: 740.253 ns/op
# Warmup Iteration   3: 664.243 ns/op
# Warmup Iteration   4: 660.768 ns/op
# Warmup Iteration   5: 664.133 ns/op
Iteration   1: 667.678 ns/op
Iteration   2: 657.836 ns/op
Iteration   3: 652.242 ns/op
Iteration   4: 651.969 ns/op
Iteration   5: 652.260 ns/op
Iteration   6: 652.604 ns/op
Iteration   7: 652.079 ns/op
Iteration   8: 658.406 ns/op
Iteration   9: 653.139 ns/op
Iteration  10: 651.150 ns/op
Iteration  11: 651.672 ns/op
Iteration  12: 651.120 ns/op
Iteration  13: 651.747 ns/op
Iteration  14: 650.356 ns/op
Iteration  15: 650.046 ns/op
Iteration  16: 649.971 ns/op
Iteration  17: 650.907 ns/op
Iteration  18: 652.083 ns/op
Iteration  19: 651.389 ns/op
Iteration  20: 650.655 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1114.377 ns/op
# Warmup Iteration   2: 783.320 ns/op
# Warmup Iteration   3: 695.847 ns/op
# Warmup Iteration   4: 692.057 ns/op
# Warmup Iteration   5: 696.130 ns/op
Iteration   1: 700.881 ns/op
Iteration   2: 684.041 ns/op
Iteration   3: 683.325 ns/op
Iteration   4: 683.590 ns/op
Iteration   5: 686.854 ns/op
Iteration   6: 683.499 ns/op
Iteration   7: 691.199 ns/op
Iteration   8: 686.265 ns/op
Iteration   9: 683.774 ns/op
Iteration  10: 682.726 ns/op
Iteration  11: 681.215 ns/op
Iteration  12: 681.327 ns/op
Iteration  13: 682.287 ns/op
Iteration  14: 681.422 ns/op
Iteration  15: 681.949 ns/op
Iteration  16: 681.473 ns/op
Iteration  17: 681.531 ns/op
Iteration  18: 681.877 ns/op
Iteration  19: 681.358 ns/op
Iteration  20: 683.518 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1111.493 ns/op
# Warmup Iteration   2: 779.248 ns/op
# Warmup Iteration   3: 696.271 ns/op
# Warmup Iteration   4: 688.466 ns/op
# Warmup Iteration   5: 692.687 ns/op
Iteration   1: 696.934 ns/op
Iteration   2: 680.817 ns/op
Iteration   3: 679.448 ns/op
Iteration   4: 682.629 ns/op
Iteration   5: 679.534 ns/op
Iteration   6: 680.155 ns/op
Iteration   7: 680.344 ns/op
Iteration   8: 680.094 ns/op
Iteration   9: 681.044 ns/op
Iteration  10: 681.550 ns/op
Iteration  11: 679.166 ns/op
Iteration  12: 679.945 ns/op
Iteration  13: 678.522 ns/op
Iteration  14: 678.498 ns/op
Iteration  15: 678.269 ns/op
Iteration  16: 677.658 ns/op
Iteration  17: 678.761 ns/op
Iteration  18: 679.617 ns/op
Iteration  19: 681.266 ns/op
Iteration  20: 679.260 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  669.794 ±(99.9%) 5.178 ns/op [Average]
  (min, avg, max) = (647.904, 669.794, 700.881), stdev = 15.269
  CI (99.9%): [664.616, 674.973] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  



 
	
	 
	 	, 
 
		

		 
	 
  		   		
	
	  	
 	

 		 	  
   
   )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1118.013 ns/op
# Warmup Iteration   2: 747.906 ns/op
# Warmup Iteration   3: 672.945 ns/op
# Warmup Iteration   4: 669.499 ns/op
# Warmup Iteration   5: 672.493 ns/op
Iteration   1: 677.483 ns/op
Iteration   2: 664.499 ns/op
Iteration   3: 661.074 ns/op
Iteration   4: 662.298 ns/op
Iteration   5: 661.540 ns/op
Iteration   6: 661.349 ns/op
Iteration   7: 664.060 ns/op
Iteration   8: 661.518 ns/op
Iteration   9: 659.638 ns/op
Iteration  10: 659.361 ns/op
Iteration  11: 659.353 ns/op
Iteration  12: 664.679 ns/op
Iteration  13: 658.540 ns/op
Iteration  14: 659.855 ns/op
Iteration  15: 659.745 ns/op
Iteration  16: 660.152 ns/op
Iteration  17: 661.577 ns/op
Iteration  18: 660.565 ns/op
Iteration  19: 660.140 ns/op
Iteration  20: 659.602 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1179.949 ns/op
# Warmup Iteration   2: 814.374 ns/op
# Warmup Iteration   3: 716.604 ns/op
# Warmup Iteration   4: 711.808 ns/op
# Warmup Iteration   5: 716.098 ns/op
Iteration   1: 719.216 ns/op
Iteration   2: 703.456 ns/op
Iteration   3: 703.127 ns/op
Iteration   4: 702.726 ns/op
Iteration   5: 703.644 ns/op
Iteration   6: 706.508 ns/op
Iteration   7: 706.897 ns/op
Iteration   8: 704.701 ns/op
Iteration   9: 704.166 ns/op
Iteration  10: 704.222 ns/op
Iteration  11: 702.184 ns/op
Iteration  12: 701.399 ns/op
Iteration  13: 701.397 ns/op
Iteration  14: 702.935 ns/op
Iteration  15: 701.564 ns/op
Iteration  16: 701.478 ns/op
Iteration  17: 701.385 ns/op
Iteration  18: 701.958 ns/op
Iteration  19: 701.186 ns/op
Iteration  20: 701.991 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1166.855 ns/op
# Warmup Iteration   2: 814.292 ns/op
# Warmup Iteration   3: 721.883 ns/op
# Warmup Iteration   4: 717.313 ns/op
# Warmup Iteration   5: 721.341 ns/op
Iteration   1: 725.103 ns/op
Iteration   2: 708.796 ns/op
Iteration   3: 708.707 ns/op
Iteration   4: 708.705 ns/op
Iteration   5: 709.006 ns/op
Iteration   6: 714.139 ns/op
Iteration   7: 708.889 ns/op
Iteration   8: 710.086 ns/op
Iteration   9: 710.129 ns/op
Iteration  10: 716.826 ns/op
Iteration  11: 707.840 ns/op
Iteration  12: 711.898 ns/op
Iteration  13: 708.437 ns/op
Iteration  14: 707.758 ns/op
Iteration  15: 709.597 ns/op
Iteration  16: 706.761 ns/op
Iteration  17: 707.186 ns/op
Iteration  18: 711.781 ns/op
Iteration  19: 712.206 ns/op
Iteration  20: 708.241 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1099.548 ns/op
# Warmup Iteration   2: 754.956 ns/op
# Warmup Iteration   3: 685.574 ns/op
# Warmup Iteration   4: 681.306 ns/op
# Warmup Iteration   5: 685.648 ns/op
Iteration   1: 689.496 ns/op
Iteration   2: 673.853 ns/op
Iteration   3: 677.230 ns/op
Iteration   4: 673.575 ns/op
Iteration   5: 673.458 ns/op
Iteration   6: 673.700 ns/op
Iteration   7: 673.347 ns/op
Iteration   8: 681.337 ns/op
Iteration   9: 672.224 ns/op
Iteration  10: 672.784 ns/op
Iteration  11: 672.102 ns/op
Iteration  12: 673.052 ns/op
Iteration  13: 672.409 ns/op
Iteration  14: 674.812 ns/op
Iteration  15: 673.080 ns/op
Iteration  16: 674.181 ns/op
Iteration  17: 673.629 ns/op
Iteration  18: 672.819 ns/op
Iteration  19: 672.453 ns/op
Iteration  20: 675.027 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1188.079 ns/op
# Warmup Iteration   2: 812.321 ns/op
# Warmup Iteration   3: 712.911 ns/op
# Warmup Iteration   4: 709.478 ns/op
# Warmup Iteration   5: 712.012 ns/op
Iteration   1: 716.132 ns/op
Iteration   2: 700.896 ns/op
Iteration   3: 700.153 ns/op
Iteration   4: 700.207 ns/op
Iteration   5: 704.183 ns/op
Iteration   6: 700.440 ns/op
Iteration   7: 700.255 ns/op
Iteration   8: 700.044 ns/op
Iteration   9: 700.625 ns/op
Iteration  10: 698.403 ns/op
Iteration  11: 698.061 ns/op
Iteration  12: 698.298 ns/op
Iteration  13: 700.601 ns/op
Iteration  14: 699.536 ns/op
Iteration  15: 698.600 ns/op
Iteration  16: 698.551 ns/op
Iteration  17: 698.916 ns/op
Iteration  18: 699.006 ns/op
Iteration  19: 698.884 ns/op
Iteration  20: 699.360 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  690.310 ±(99.9%) 6.520 ns/op [Average]
  (min, avg, max) = (658.540, 690.310, 725.103), stdev = 19.225
  CI (99.9%): [683.789, 696.830] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   



 
	
	 
	 	, 
 
		

		 
	 
  		   		
	
	  	
 	

 		 	  
   
     avgt  100  669.794 ± 5.178  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   



 
	
	 
	 	, 
 
		

		 
	 
  		   		
	
	  	
 	

 		 	  
   
     avgt  100  690.310 ± 6.520  ns/op

Benchmark result is saved to split_precompiled_regex_35_135_Match.csv
