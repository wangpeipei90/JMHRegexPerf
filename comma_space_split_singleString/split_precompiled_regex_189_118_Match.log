# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 	
 				  
	   
  
	
   
 
 
		 
 
 
	 


	  
 	  		 ,	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1062.654 ns/op
# Warmup Iteration   2: 684.396 ns/op
# Warmup Iteration   3: 607.480 ns/op
# Warmup Iteration   4: 610.268 ns/op
# Warmup Iteration   5: 631.869 ns/op
Iteration   1: 603.621 ns/op
Iteration   2: 604.634 ns/op
Iteration   3: 602.612 ns/op
Iteration   4: 606.197 ns/op
Iteration   5: 606.441 ns/op
Iteration   6: 606.950 ns/op
Iteration   7: 610.614 ns/op
Iteration   8: 602.246 ns/op
Iteration   9: 602.689 ns/op
Iteration  10: 601.450 ns/op
Iteration  11: 601.725 ns/op
Iteration  12: 600.710 ns/op
Iteration  13: 600.941 ns/op
Iteration  14: 602.239 ns/op
Iteration  15: 600.379 ns/op
Iteration  16: 601.372 ns/op
Iteration  17: 601.360 ns/op
Iteration  18: 603.064 ns/op
Iteration  19: 600.854 ns/op
Iteration  20: 601.026 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1026.606 ns/op
# Warmup Iteration   2: 682.375 ns/op
# Warmup Iteration   3: 616.725 ns/op
# Warmup Iteration   4: 621.002 ns/op
# Warmup Iteration   5: 642.007 ns/op
Iteration   1: 615.358 ns/op
Iteration   2: 614.112 ns/op
Iteration   3: 612.991 ns/op
Iteration   4: 616.637 ns/op
Iteration   5: 613.062 ns/op
Iteration   6: 612.482 ns/op
Iteration   7: 613.072 ns/op
Iteration   8: 616.241 ns/op
Iteration   9: 616.867 ns/op
Iteration  10: 612.043 ns/op
Iteration  11: 610.600 ns/op
Iteration  12: 612.585 ns/op
Iteration  13: 611.144 ns/op
Iteration  14: 614.284 ns/op
Iteration  15: 611.986 ns/op
Iteration  16: 614.282 ns/op
Iteration  17: 615.495 ns/op
Iteration  18: 613.444 ns/op
Iteration  19: 612.999 ns/op
Iteration  20: 613.700 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1016.571 ns/op
# Warmup Iteration   2: 665.664 ns/op
# Warmup Iteration   3: 600.418 ns/op
# Warmup Iteration   4: 604.336 ns/op
# Warmup Iteration   5: 626.846 ns/op
Iteration   1: 597.672 ns/op
Iteration   2: 598.536 ns/op
Iteration   3: 601.560 ns/op
Iteration   4: 597.746 ns/op
Iteration   5: 598.279 ns/op
Iteration   6: 597.972 ns/op
Iteration   7: 602.590 ns/op
Iteration   8: 598.455 ns/op
Iteration   9: 601.190 ns/op
Iteration  10: 598.433 ns/op
Iteration  11: 600.988 ns/op
Iteration  12: 596.347 ns/op
Iteration  13: 596.160 ns/op
Iteration  14: 597.194 ns/op
Iteration  15: 595.797 ns/op
Iteration  16: 596.482 ns/op
Iteration  17: 600.854 ns/op
Iteration  18: 598.651 ns/op
Iteration  19: 595.241 ns/op
Iteration  20: 598.223 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1039.156 ns/op
# Warmup Iteration   2: 692.733 ns/op
# Warmup Iteration   3: 621.047 ns/op
# Warmup Iteration   4: 624.188 ns/op
# Warmup Iteration   5: 645.151 ns/op
Iteration   1: 617.480 ns/op
Iteration   2: 616.535 ns/op
Iteration   3: 616.365 ns/op
Iteration   4: 619.468 ns/op
Iteration   5: 616.664 ns/op
Iteration   6: 616.503 ns/op
Iteration   7: 616.771 ns/op
Iteration   8: 617.891 ns/op
Iteration   9: 614.082 ns/op
Iteration  10: 613.960 ns/op
Iteration  11: 614.257 ns/op
Iteration  12: 615.696 ns/op
Iteration  13: 614.036 ns/op
Iteration  14: 614.378 ns/op
Iteration  15: 614.606 ns/op
Iteration  16: 615.710 ns/op
Iteration  17: 614.832 ns/op
Iteration  18: 614.978 ns/op
Iteration  19: 614.556 ns/op
Iteration  20: 617.565 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1035.660 ns/op
# Warmup Iteration   2: 690.729 ns/op
# Warmup Iteration   3: 622.270 ns/op
# Warmup Iteration   4: 624.505 ns/op
# Warmup Iteration   5: 641.301 ns/op
Iteration   1: 621.667 ns/op
Iteration   2: 617.722 ns/op
Iteration   3: 617.059 ns/op
Iteration   4: 617.320 ns/op
Iteration   5: 620.061 ns/op
Iteration   6: 617.182 ns/op
Iteration   7: 616.831 ns/op
Iteration   8: 618.069 ns/op
Iteration   9: 614.974 ns/op
Iteration  10: 614.896 ns/op
Iteration  11: 614.672 ns/op
Iteration  12: 616.070 ns/op
Iteration  13: 615.527 ns/op
Iteration  14: 615.534 ns/op
Iteration  15: 615.715 ns/op
Iteration  16: 617.294 ns/op
Iteration  17: 615.521 ns/op
Iteration  18: 615.716 ns/op
Iteration  19: 616.000 ns/op
Iteration  20: 624.023 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  609.611 ±(99.9%) 2.642 ns/op [Average]
  (min, avg, max) = (595.241, 609.611, 624.023), stdev = 7.791
  CI (99.9%): [606.968, 612.253] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 	
 				  
	   
  
	
   
 
 
		 
 
 
	 


	  
 	  		 ,	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1092.589 ns/op
# Warmup Iteration   2: 722.381 ns/op
# Warmup Iteration   3: 644.236 ns/op
# Warmup Iteration   4: 646.677 ns/op
# Warmup Iteration   5: 650.821 ns/op
Iteration   1: 657.730 ns/op
Iteration   2: 639.548 ns/op
Iteration   3: 639.375 ns/op
Iteration   4: 639.500 ns/op
Iteration   5: 650.899 ns/op
Iteration   6: 639.394 ns/op
Iteration   7: 639.967 ns/op
Iteration   8: 639.913 ns/op
Iteration   9: 640.243 ns/op
Iteration  10: 642.399 ns/op
Iteration  11: 640.250 ns/op
Iteration  12: 641.887 ns/op
Iteration  13: 639.105 ns/op
Iteration  14: 645.017 ns/op
Iteration  15: 638.999 ns/op
Iteration  16: 638.591 ns/op
Iteration  17: 638.839 ns/op
Iteration  18: 640.449 ns/op
Iteration  19: 638.009 ns/op
Iteration  20: 638.947 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1040.997 ns/op
# Warmup Iteration   2: 689.517 ns/op
# Warmup Iteration   3: 624.884 ns/op
# Warmup Iteration   4: 627.223 ns/op
# Warmup Iteration   5: 648.922 ns/op
Iteration   1: 620.932 ns/op
Iteration   2: 621.042 ns/op
Iteration   3: 621.669 ns/op
Iteration   4: 624.534 ns/op
Iteration   5: 621.747 ns/op
Iteration   6: 620.607 ns/op
Iteration   7: 626.509 ns/op
Iteration   8: 619.331 ns/op
Iteration   9: 619.343 ns/op
Iteration  10: 619.982 ns/op
Iteration  11: 621.555 ns/op
Iteration  12: 619.881 ns/op
Iteration  13: 620.997 ns/op
Iteration  14: 635.559 ns/op
Iteration  15: 621.681 ns/op
Iteration  16: 620.003 ns/op
Iteration  17: 626.516 ns/op
Iteration  18: 622.215 ns/op
Iteration  19: 622.173 ns/op
Iteration  20: 621.243 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1117.173 ns/op
# Warmup Iteration   2: 719.868 ns/op
# Warmup Iteration   3: 641.594 ns/op
# Warmup Iteration   4: 639.089 ns/op
# Warmup Iteration   5: 644.683 ns/op
Iteration   1: 649.522 ns/op
Iteration   2: 631.271 ns/op
Iteration   3: 632.871 ns/op
Iteration   4: 633.569 ns/op
Iteration   5: 635.727 ns/op
Iteration   6: 632.453 ns/op
Iteration   7: 631.603 ns/op
Iteration   8: 630.105 ns/op
Iteration   9: 629.463 ns/op
Iteration  10: 628.651 ns/op
Iteration  11: 628.943 ns/op
Iteration  12: 631.971 ns/op
Iteration  13: 630.006 ns/op
Iteration  14: 628.257 ns/op
Iteration  15: 628.469 ns/op
Iteration  16: 629.896 ns/op
Iteration  17: 634.002 ns/op
Iteration  18: 630.312 ns/op
Iteration  19: 629.499 ns/op
Iteration  20: 630.461 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1089.078 ns/op
# Warmup Iteration   2: 721.444 ns/op
# Warmup Iteration   3: 645.649 ns/op
# Warmup Iteration   4: 648.129 ns/op
# Warmup Iteration   5: 651.744 ns/op
Iteration   1: 659.154 ns/op
Iteration   2: 640.726 ns/op
Iteration   3: 640.327 ns/op
Iteration   4: 640.654 ns/op
Iteration   5: 642.928 ns/op
Iteration   6: 640.702 ns/op
Iteration   7: 640.266 ns/op
Iteration   8: 640.747 ns/op
Iteration   9: 639.258 ns/op
Iteration  10: 638.473 ns/op
Iteration  11: 638.526 ns/op
Iteration  12: 638.576 ns/op
Iteration  13: 638.951 ns/op
Iteration  14: 644.481 ns/op
Iteration  15: 639.715 ns/op
Iteration  16: 639.677 ns/op
Iteration  17: 640.671 ns/op
Iteration  18: 643.985 ns/op
Iteration  19: 639.611 ns/op
Iteration  20: 640.522 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1052.861 ns/op
# Warmup Iteration   2: 706.421 ns/op
# Warmup Iteration   3: 635.236 ns/op
# Warmup Iteration   4: 637.453 ns/op
# Warmup Iteration   5: 653.073 ns/op
Iteration   1: 635.133 ns/op
Iteration   2: 629.913 ns/op
Iteration   3: 629.843 ns/op
Iteration   4: 632.839 ns/op
Iteration   5: 629.562 ns/op
Iteration   6: 630.001 ns/op
Iteration   7: 632.703 ns/op
Iteration   8: 632.301 ns/op
Iteration   9: 627.603 ns/op
Iteration  10: 627.444 ns/op
Iteration  11: 627.689 ns/op
Iteration  12: 628.814 ns/op
Iteration  13: 627.509 ns/op
Iteration  14: 631.122 ns/op
Iteration  15: 626.462 ns/op
Iteration  16: 629.060 ns/op
Iteration  17: 626.477 ns/op
Iteration  18: 627.804 ns/op
Iteration  19: 627.256 ns/op
Iteration  20: 629.062 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  633.302 ±(99.9%) 2.844 ns/op [Average]
  (min, avg, max) = (619.331, 633.302, 659.154), stdev = 8.386
  CI (99.9%): [630.457, 636.146] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
 	
 				  
	   
  
	
   
 
 
		 
 
 
	 


	  
 	  		 ,	  avgt  100  609.611 ± 2.642  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
 	
 				  
	   
  
	
   
 
 
		 
 
 
	 


	  
 	  		 ,	  avgt  100  633.302 ± 2.844  ns/op

Benchmark result is saved to split_precompiled_regex_189_118_Match.csv
