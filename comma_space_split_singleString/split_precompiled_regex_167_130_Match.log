# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

	
 	 
	 
  
		 
 	
 		
  
		 	  	
 
  


	

	

  
 ,
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1056.037 ns/op
# Warmup Iteration   2: 723.201 ns/op
# Warmup Iteration   3: 637.320 ns/op
# Warmup Iteration   4: 640.339 ns/op
# Warmup Iteration   5: 643.093 ns/op
Iteration   1: 654.729 ns/op
Iteration   2: 633.312 ns/op
Iteration   3: 631.942 ns/op
Iteration   4: 632.111 ns/op
Iteration   5: 631.889 ns/op
Iteration   6: 636.040 ns/op
Iteration   7: 631.486 ns/op
Iteration   8: 631.727 ns/op
Iteration   9: 629.892 ns/op
Iteration  10: 631.107 ns/op
Iteration  11: 630.557 ns/op
Iteration  12: 630.157 ns/op
Iteration  13: 635.813 ns/op
Iteration  14: 629.905 ns/op
Iteration  15: 631.136 ns/op
Iteration  16: 630.896 ns/op
Iteration  17: 630.386 ns/op
Iteration  18: 630.650 ns/op
Iteration  19: 633.559 ns/op
Iteration  20: 631.029 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1056.722 ns/op
# Warmup Iteration   2: 715.059 ns/op
# Warmup Iteration   3: 640.771 ns/op
# Warmup Iteration   4: 642.560 ns/op
# Warmup Iteration   5: 645.486 ns/op
Iteration   1: 654.994 ns/op
Iteration   2: 635.357 ns/op
Iteration   3: 635.058 ns/op
Iteration   4: 635.241 ns/op
Iteration   5: 635.358 ns/op
Iteration   6: 638.230 ns/op
Iteration   7: 635.409 ns/op
Iteration   8: 635.558 ns/op
Iteration   9: 633.610 ns/op
Iteration  10: 639.384 ns/op
Iteration  11: 634.454 ns/op
Iteration  12: 633.666 ns/op
Iteration  13: 633.618 ns/op
Iteration  14: 636.664 ns/op
Iteration  15: 635.812 ns/op
Iteration  16: 634.212 ns/op
Iteration  17: 633.930 ns/op
Iteration  18: 634.332 ns/op
Iteration  19: 634.765 ns/op
Iteration  20: 637.224 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1061.894 ns/op
# Warmup Iteration   2: 717.836 ns/op
# Warmup Iteration   3: 653.068 ns/op
# Warmup Iteration   4: 648.317 ns/op
# Warmup Iteration   5: 651.365 ns/op
Iteration   1: 655.963 ns/op
Iteration   2: 643.232 ns/op
Iteration   3: 640.626 ns/op
Iteration   4: 640.614 ns/op
Iteration   5: 640.782 ns/op
Iteration   6: 643.533 ns/op
Iteration   7: 640.502 ns/op
Iteration   8: 641.301 ns/op
Iteration   9: 639.392 ns/op
Iteration  10: 639.339 ns/op
Iteration  11: 640.445 ns/op
Iteration  12: 638.862 ns/op
Iteration  13: 639.557 ns/op
Iteration  14: 639.147 ns/op
Iteration  15: 639.569 ns/op
Iteration  16: 643.030 ns/op
Iteration  17: 641.079 ns/op
Iteration  18: 641.297 ns/op
Iteration  19: 640.550 ns/op
Iteration  20: 640.239 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1034.704 ns/op
# Warmup Iteration   2: 686.622 ns/op
# Warmup Iteration   3: 617.730 ns/op
# Warmup Iteration   4: 619.568 ns/op
# Warmup Iteration   5: 640.887 ns/op
Iteration   1: 612.650 ns/op
Iteration   2: 612.804 ns/op
Iteration   3: 612.676 ns/op
Iteration   4: 615.565 ns/op
Iteration   5: 612.092 ns/op
Iteration   6: 612.328 ns/op
Iteration   7: 613.166 ns/op
Iteration   8: 613.470 ns/op
Iteration   9: 610.586 ns/op
Iteration  10: 610.610 ns/op
Iteration  11: 610.576 ns/op
Iteration  12: 611.524 ns/op
Iteration  13: 610.027 ns/op
Iteration  14: 610.024 ns/op
Iteration  15: 610.227 ns/op
Iteration  16: 617.320 ns/op
Iteration  17: 611.266 ns/op
Iteration  18: 612.265 ns/op
Iteration  19: 612.679 ns/op
Iteration  20: 611.634 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1063.044 ns/op
# Warmup Iteration   2: 717.657 ns/op
# Warmup Iteration   3: 655.818 ns/op
# Warmup Iteration   4: 647.414 ns/op
# Warmup Iteration   5: 649.374 ns/op
Iteration   1: 652.818 ns/op
Iteration   2: 641.181 ns/op
Iteration   3: 638.183 ns/op
Iteration   4: 638.189 ns/op
Iteration   5: 638.602 ns/op
Iteration   6: 640.990 ns/op
Iteration   7: 638.173 ns/op
Iteration   8: 638.695 ns/op
Iteration   9: 636.611 ns/op
Iteration  10: 636.868 ns/op
Iteration  11: 637.413 ns/op
Iteration  12: 636.047 ns/op
Iteration  13: 637.168 ns/op
Iteration  14: 637.004 ns/op
Iteration  15: 637.177 ns/op
Iteration  16: 638.431 ns/op
Iteration  17: 637.348 ns/op
Iteration  18: 638.053 ns/op
Iteration  19: 638.097 ns/op
Iteration  20: 638.254 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  632.331 ±(99.9%) 3.807 ns/op [Average]
  (min, avg, max) = (610.024, 632.331, 655.963), stdev = 11.224
  CI (99.9%): [628.524, 636.137] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

	
 	 
	 
  
		 
 	
 		
  
		 	  	
 
  


	

	

  
 ,
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1070.947 ns/op
# Warmup Iteration   2: 731.930 ns/op
# Warmup Iteration   3: 651.551 ns/op
# Warmup Iteration   4: 654.419 ns/op
# Warmup Iteration   5: 657.002 ns/op
Iteration   1: 664.462 ns/op
Iteration   2: 646.790 ns/op
Iteration   3: 646.300 ns/op
Iteration   4: 646.766 ns/op
Iteration   5: 646.784 ns/op
Iteration   6: 650.275 ns/op
Iteration   7: 646.364 ns/op
Iteration   8: 646.760 ns/op
Iteration   9: 645.065 ns/op
Iteration  10: 650.936 ns/op
Iteration  11: 645.036 ns/op
Iteration  12: 644.861 ns/op
Iteration  13: 644.684 ns/op
Iteration  14: 644.503 ns/op
Iteration  15: 646.314 ns/op
Iteration  16: 645.722 ns/op
Iteration  17: 645.701 ns/op
Iteration  18: 645.294 ns/op
Iteration  19: 647.959 ns/op
Iteration  20: 645.840 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1096.482 ns/op
# Warmup Iteration   2: 723.993 ns/op
# Warmup Iteration   3: 643.318 ns/op
# Warmup Iteration   4: 646.087 ns/op
# Warmup Iteration   5: 649.300 ns/op
Iteration   1: 656.967 ns/op
Iteration   2: 638.242 ns/op
Iteration   3: 638.437 ns/op
Iteration   4: 638.681 ns/op
Iteration   5: 642.080 ns/op
Iteration   6: 638.588 ns/op
Iteration   7: 640.307 ns/op
Iteration   8: 644.653 ns/op
Iteration   9: 640.941 ns/op
Iteration  10: 636.725 ns/op
Iteration  11: 637.239 ns/op
Iteration  12: 641.217 ns/op
Iteration  13: 636.539 ns/op
Iteration  14: 639.013 ns/op
Iteration  15: 636.890 ns/op
Iteration  16: 637.347 ns/op
Iteration  17: 637.710 ns/op
Iteration  18: 640.196 ns/op
Iteration  19: 637.455 ns/op
Iteration  20: 638.004 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1094.117 ns/op
# Warmup Iteration   2: 721.752 ns/op
# Warmup Iteration   3: 640.591 ns/op
# Warmup Iteration   4: 643.211 ns/op
# Warmup Iteration   5: 646.876 ns/op
Iteration   1: 652.580 ns/op
Iteration   2: 635.301 ns/op
Iteration   3: 634.915 ns/op
Iteration   4: 635.612 ns/op
Iteration   5: 638.417 ns/op
Iteration   6: 635.350 ns/op
Iteration   7: 635.610 ns/op
Iteration   8: 636.385 ns/op
Iteration   9: 637.244 ns/op
Iteration  10: 634.436 ns/op
Iteration  11: 634.025 ns/op
Iteration  12: 634.090 ns/op
Iteration  13: 636.724 ns/op
Iteration  14: 633.799 ns/op
Iteration  15: 657.279 ns/op
Iteration  16: 634.463 ns/op
Iteration  17: 641.292 ns/op
Iteration  18: 633.934 ns/op
Iteration  19: 640.819 ns/op
Iteration  20: 635.545 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1096.096 ns/op
# Warmup Iteration   2: 731.464 ns/op
# Warmup Iteration   3: 650.406 ns/op
# Warmup Iteration   4: 653.221 ns/op
# Warmup Iteration   5: 655.835 ns/op
Iteration   1: 665.330 ns/op
Iteration   2: 645.474 ns/op
Iteration   3: 644.943 ns/op
Iteration   4: 645.437 ns/op
Iteration   5: 645.660 ns/op
Iteration   6: 647.331 ns/op
Iteration   7: 644.867 ns/op
Iteration   8: 645.274 ns/op
Iteration   9: 643.739 ns/op
Iteration  10: 645.183 ns/op
Iteration  11: 643.670 ns/op
Iteration  12: 644.890 ns/op
Iteration  13: 645.537 ns/op
Iteration  14: 647.791 ns/op
Iteration  15: 646.595 ns/op
Iteration  16: 646.690 ns/op
Iteration  17: 651.066 ns/op
Iteration  18: 645.258 ns/op
Iteration  19: 646.259 ns/op
Iteration  20: 643.796 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1066.706 ns/op
# Warmup Iteration   2: 724.779 ns/op
# Warmup Iteration   3: 651.704 ns/op
# Warmup Iteration   4: 654.216 ns/op
# Warmup Iteration   5: 656.918 ns/op
Iteration   1: 664.252 ns/op
Iteration   2: 646.215 ns/op
Iteration   3: 645.959 ns/op
Iteration   4: 645.443 ns/op
Iteration   5: 645.885 ns/op
Iteration   6: 648.763 ns/op
Iteration   7: 645.796 ns/op
Iteration   8: 645.676 ns/op
Iteration   9: 644.079 ns/op
Iteration  10: 649.898 ns/op
Iteration  11: 643.991 ns/op
Iteration  12: 644.480 ns/op
Iteration  13: 644.165 ns/op
Iteration  14: 645.908 ns/op
Iteration  15: 644.948 ns/op
Iteration  16: 644.756 ns/op
Iteration  17: 645.253 ns/op
Iteration  18: 644.190 ns/op
Iteration  19: 646.928 ns/op
Iteration  20: 645.010 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  643.679 ±(99.9%) 2.118 ns/op [Average]
  (min, avg, max) = (633.799, 643.679, 665.330), stdev = 6.245
  CI (99.9%): [641.560, 645.797] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	

	
 	 
	 
  
		 
 	
 		
  
		 	  	
 
  


	

	

  
 ,
  avgt  100  632.331 ± 3.807  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	

	
 	 
	 
  
		 
 	
 		
  
		 	  	
 
  


	

	

  
 ,
  avgt  100  643.679 ± 2.118  ns/op

Benchmark result is saved to split_precompiled_regex_167_130_Match.csv
