# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = F>0'AvllnN2;4PV4$wvxhFz9X~=-Wx"6>0k5]ntW$_4ADMY;{Q1r(4=k/[Z(")

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1132.879 ns/op
# Warmup Iteration   2: 955.705 ns/op
# Warmup Iteration   3: 798.388 ns/op
# Warmup Iteration   4: 794.246 ns/op
# Warmup Iteration   5: 796.767 ns/op
Iteration   1: 800.894 ns/op
Iteration   2: 782.299 ns/op
Iteration   3: 805.352 ns/op
Iteration   4: 786.430 ns/op
Iteration   5: 786.549 ns/op
Iteration   6: 786.397 ns/op
Iteration   7: 785.954 ns/op
Iteration   8: 782.277 ns/op
Iteration   9: 785.637 ns/op
Iteration  10: 786.061 ns/op
Iteration  11: 787.066 ns/op
Iteration  12: 787.723 ns/op
Iteration  13: 790.009 ns/op
Iteration  14: 786.423 ns/op
Iteration  15: 782.723 ns/op
Iteration  16: 785.778 ns/op
Iteration  17: 784.570 ns/op
Iteration  18: 784.612 ns/op
Iteration  19: 785.305 ns/op
Iteration  20: 786.067 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1135.521 ns/op
# Warmup Iteration   2: 953.502 ns/op
# Warmup Iteration   3: 786.932 ns/op
# Warmup Iteration   4: 789.271 ns/op
# Warmup Iteration   5: 791.818 ns/op
Iteration   1: 796.244 ns/op
Iteration   2: 780.521 ns/op
Iteration   3: 800.187 ns/op
Iteration   4: 783.060 ns/op
Iteration   5: 782.897 ns/op
Iteration   6: 782.933 ns/op
Iteration   7: 783.181 ns/op
Iteration   8: 782.314 ns/op
Iteration   9: 779.412 ns/op
Iteration  10: 783.548 ns/op
Iteration  11: 783.516 ns/op
Iteration  12: 783.115 ns/op
Iteration  13: 785.446 ns/op
Iteration  14: 784.348 ns/op
Iteration  15: 783.223 ns/op
Iteration  16: 780.456 ns/op
Iteration  17: 783.029 ns/op
Iteration  18: 782.405 ns/op
Iteration  19: 783.596 ns/op
Iteration  20: 784.217 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1133.785 ns/op
# Warmup Iteration   2: 954.181 ns/op
# Warmup Iteration   3: 790.315 ns/op
# Warmup Iteration   4: 792.297 ns/op
# Warmup Iteration   5: 795.715 ns/op
Iteration   1: 799.117 ns/op
Iteration   2: 784.378 ns/op
Iteration   3: 802.876 ns/op
Iteration   4: 787.054 ns/op
Iteration   5: 785.462 ns/op
Iteration   6: 785.796 ns/op
Iteration   7: 787.770 ns/op
Iteration   8: 786.856 ns/op
Iteration   9: 781.956 ns/op
Iteration  10: 785.755 ns/op
Iteration  11: 786.671 ns/op
Iteration  12: 785.998 ns/op
Iteration  13: 791.290 ns/op
Iteration  14: 784.185 ns/op
Iteration  15: 781.942 ns/op
Iteration  16: 783.430 ns/op
Iteration  17: 783.708 ns/op
Iteration  18: 784.276 ns/op
Iteration  19: 784.529 ns/op
Iteration  20: 784.552 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1140.321 ns/op
# Warmup Iteration   2: 967.318 ns/op
# Warmup Iteration   3: 799.366 ns/op
# Warmup Iteration   4: 801.494 ns/op
# Warmup Iteration   5: 804.500 ns/op
Iteration   1: 808.750 ns/op
Iteration   2: 791.693 ns/op
Iteration   3: 813.463 ns/op
Iteration   4: 795.132 ns/op
Iteration   5: 794.956 ns/op
Iteration   6: 794.919 ns/op
Iteration   7: 795.106 ns/op
Iteration   8: 791.216 ns/op
Iteration   9: 794.964 ns/op
Iteration  10: 796.544 ns/op
Iteration  11: 795.773 ns/op
Iteration  12: 796.365 ns/op
Iteration  13: 795.811 ns/op
Iteration  14: 791.453 ns/op
Iteration  15: 801.436 ns/op
Iteration  16: 798.594 ns/op
Iteration  17: 793.284 ns/op
Iteration  18: 792.858 ns/op
Iteration  19: 793.322 ns/op
Iteration  20: 791.286 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1135.582 ns/op
# Warmup Iteration   2: 956.112 ns/op
# Warmup Iteration   3: 788.487 ns/op
# Warmup Iteration   4: 790.407 ns/op
# Warmup Iteration   5: 792.752 ns/op
Iteration   1: 797.298 ns/op
Iteration   2: 781.818 ns/op
Iteration   3: 800.004 ns/op
Iteration   4: 784.272 ns/op
Iteration   5: 783.753 ns/op
Iteration   6: 783.236 ns/op
Iteration   7: 783.466 ns/op
Iteration   8: 783.958 ns/op
Iteration   9: 779.829 ns/op
Iteration  10: 784.077 ns/op
Iteration  11: 783.634 ns/op
Iteration  12: 784.707 ns/op
Iteration  13: 784.922 ns/op
Iteration  14: 788.248 ns/op
Iteration  15: 782.022 ns/op
Iteration  16: 780.838 ns/op
Iteration  17: 786.994 ns/op
Iteration  18: 781.586 ns/op
Iteration  19: 782.836 ns/op
Iteration  20: 784.220 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  788.020 ±(99.9%) 2.306 ns/op [Average]
  (min, avg, max) = (779.412, 788.020, 813.463), stdev = 6.800
  CI (99.9%): [785.714, 790.326] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = F>0'AvllnN2;4PV4$wvxhFz9X~=-Wx"6>0k5]ntW$_4ADMY;{Q1r(4=k/[Z(")

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1136.052 ns/op
# Warmup Iteration   2: 954.429 ns/op
# Warmup Iteration   3: 787.191 ns/op
# Warmup Iteration   4: 791.165 ns/op
# Warmup Iteration   5: 792.631 ns/op
Iteration   1: 799.404 ns/op
Iteration   2: 780.681 ns/op
Iteration   3: 802.757 ns/op
Iteration   4: 783.870 ns/op
Iteration   5: 783.788 ns/op
Iteration   6: 783.981 ns/op
Iteration   7: 783.395 ns/op
Iteration   8: 783.801 ns/op
Iteration   9: 779.916 ns/op
Iteration  10: 783.595 ns/op
Iteration  11: 783.605 ns/op
Iteration  12: 784.048 ns/op
Iteration  13: 786.274 ns/op
Iteration  14: 785.583 ns/op
Iteration  15: 781.060 ns/op
Iteration  16: 779.561 ns/op
Iteration  17: 781.945 ns/op
Iteration  18: 781.357 ns/op
Iteration  19: 781.353 ns/op
Iteration  20: 781.554 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1145.261 ns/op
# Warmup Iteration   2: 961.229 ns/op
# Warmup Iteration   3: 794.600 ns/op
# Warmup Iteration   4: 797.065 ns/op
# Warmup Iteration   5: 799.629 ns/op
Iteration   1: 804.712 ns/op
Iteration   2: 786.682 ns/op
Iteration   3: 808.986 ns/op
Iteration   4: 790.661 ns/op
Iteration   5: 790.630 ns/op
Iteration   6: 790.680 ns/op
Iteration   7: 790.281 ns/op
Iteration   8: 786.860 ns/op
Iteration   9: 795.599 ns/op
Iteration  10: 791.115 ns/op
Iteration  11: 794.291 ns/op
Iteration  12: 791.319 ns/op
Iteration  13: 791.986 ns/op
Iteration  14: 795.966 ns/op
Iteration  15: 787.439 ns/op
Iteration  16: 792.484 ns/op
Iteration  17: 791.535 ns/op
Iteration  18: 789.991 ns/op
Iteration  19: 789.734 ns/op
Iteration  20: 790.471 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1139.724 ns/op
# Warmup Iteration   2: 958.608 ns/op
# Warmup Iteration   3: 796.351 ns/op
# Warmup Iteration   4: 798.449 ns/op
# Warmup Iteration   5: 803.624 ns/op
Iteration   1: 813.825 ns/op
Iteration   2: 788.098 ns/op
Iteration   3: 811.857 ns/op
Iteration   4: 792.665 ns/op
Iteration   5: 792.213 ns/op
Iteration   6: 791.604 ns/op
Iteration   7: 792.690 ns/op
Iteration   8: 788.075 ns/op
Iteration   9: 790.987 ns/op
Iteration  10: 794.027 ns/op
Iteration  11: 792.380 ns/op
Iteration  12: 796.209 ns/op
Iteration  13: 793.824 ns/op
Iteration  14: 787.852 ns/op
Iteration  15: 798.871 ns/op
Iteration  16: 790.161 ns/op
Iteration  17: 790.191 ns/op
Iteration  18: 796.213 ns/op
Iteration  19: 790.733 ns/op
Iteration  20: 789.990 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1138.340 ns/op
# Warmup Iteration   2: 959.329 ns/op
# Warmup Iteration   3: 796.634 ns/op
# Warmup Iteration   4: 798.561 ns/op
# Warmup Iteration   5: 802.390 ns/op
Iteration   1: 806.827 ns/op
Iteration   2: 789.269 ns/op
Iteration   3: 811.185 ns/op
Iteration   4: 794.672 ns/op
Iteration   5: 793.546 ns/op
Iteration   6: 793.252 ns/op
Iteration   7: 792.906 ns/op
Iteration   8: 789.462 ns/op
Iteration   9: 793.355 ns/op
Iteration  10: 793.472 ns/op
Iteration  11: 793.188 ns/op
Iteration  12: 798.844 ns/op
Iteration  13: 795.386 ns/op
Iteration  14: 789.304 ns/op
Iteration  15: 792.187 ns/op
Iteration  16: 791.870 ns/op
Iteration  17: 791.392 ns/op
Iteration  18: 792.006 ns/op
Iteration  19: 791.106 ns/op
Iteration  20: 791.734 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1146.139 ns/op
# Warmup Iteration   2: 961.724 ns/op
# Warmup Iteration   3: 797.084 ns/op
# Warmup Iteration   4: 799.288 ns/op
# Warmup Iteration   5: 802.542 ns/op
Iteration   1: 806.938 ns/op
Iteration   2: 789.658 ns/op
Iteration   3: 811.411 ns/op
Iteration   4: 794.142 ns/op
Iteration   5: 793.300 ns/op
Iteration   6: 793.674 ns/op
Iteration   7: 792.709 ns/op
Iteration   8: 789.912 ns/op
Iteration   9: 794.281 ns/op
Iteration  10: 805.609 ns/op
Iteration  11: 805.922 ns/op
Iteration  12: 815.707 ns/op
Iteration  13: 795.253 ns/op
Iteration  14: 790.106 ns/op
Iteration  15: 791.788 ns/op
Iteration  16: 792.998 ns/op
Iteration  17: 792.628 ns/op
Iteration  18: 800.665 ns/op
Iteration  19: 792.575 ns/op
Iteration  20: 789.949 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  792.496 ±(99.9%) 2.573 ns/op [Average]
  (min, avg, max) = (779.561, 792.496, 815.707), stdev = 7.588
  CI (99.9%): [789.923, 795.069] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  F>0'AvllnN2;4PV4$wvxhFz9X~=-Wx"6>0k5]ntW$_4ADMY;{Q1r(4=k/[Z("  avgt  100  788.020 ± 2.306  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  F>0'AvllnN2;4PV4$wvxhFz9X~=-Wx"6>0k5]ntW$_4ADMY;{Q1r(4=k/[Z("  avgt  100  792.496 ± 2.573  ns/op

Benchmark result is saved to split_precompiled_regex_157_62_NonMatch.csv
