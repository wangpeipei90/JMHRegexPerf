# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	  

  	
	
	
			 
 

		 
	   
  
  	

 , 		
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 976.328 ns/op
# Warmup Iteration   2: 606.084 ns/op
# Warmup Iteration   3: 552.655 ns/op
# Warmup Iteration   4: 566.462 ns/op
# Warmup Iteration   5: 558.899 ns/op
Iteration   1: 551.153 ns/op
Iteration   2: 548.861 ns/op
Iteration   3: 548.726 ns/op
Iteration   4: 551.740 ns/op
Iteration   5: 548.586 ns/op
Iteration   6: 550.898 ns/op
Iteration   7: 547.322 ns/op
Iteration   8: 547.349 ns/op
Iteration   9: 550.113 ns/op
Iteration  10: 547.266 ns/op
Iteration  11: 548.209 ns/op
Iteration  12: 547.488 ns/op
Iteration  13: 547.930 ns/op
Iteration  14: 549.927 ns/op
Iteration  15: 547.779 ns/op
Iteration  16: 550.071 ns/op
Iteration  17: 549.013 ns/op
Iteration  18: 548.860 ns/op
Iteration  19: 549.442 ns/op
Iteration  20: 548.820 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 977.781 ns/op
# Warmup Iteration   2: 595.709 ns/op
# Warmup Iteration   3: 547.777 ns/op
# Warmup Iteration   4: 561.905 ns/op
# Warmup Iteration   5: 556.198 ns/op
Iteration   1: 546.694 ns/op
Iteration   2: 543.779 ns/op
Iteration   3: 543.611 ns/op
Iteration   4: 546.222 ns/op
Iteration   5: 543.442 ns/op
Iteration   6: 546.255 ns/op
Iteration   7: 542.083 ns/op
Iteration   8: 542.936 ns/op
Iteration   9: 541.696 ns/op
Iteration  10: 545.983 ns/op
Iteration  11: 545.252 ns/op
Iteration  12: 543.082 ns/op
Iteration  13: 545.953 ns/op
Iteration  14: 541.418 ns/op
Iteration  15: 544.002 ns/op
Iteration  16: 541.893 ns/op
Iteration  17: 542.077 ns/op
Iteration  18: 544.988 ns/op
Iteration  19: 540.607 ns/op
Iteration  20: 542.686 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 961.766 ns/op
# Warmup Iteration   2: 588.967 ns/op
# Warmup Iteration   3: 543.724 ns/op
# Warmup Iteration   4: 558.005 ns/op
# Warmup Iteration   5: 551.847 ns/op
Iteration   1: 542.827 ns/op
Iteration   2: 539.561 ns/op
Iteration   3: 542.514 ns/op
Iteration   4: 540.151 ns/op
Iteration   5: 539.628 ns/op
Iteration   6: 542.766 ns/op
Iteration   7: 538.839 ns/op
Iteration   8: 539.807 ns/op
Iteration   9: 538.862 ns/op
Iteration  10: 539.436 ns/op
Iteration  11: 538.921 ns/op
Iteration  12: 539.326 ns/op
Iteration  13: 543.357 ns/op
Iteration  14: 540.542 ns/op
Iteration  15: 543.607 ns/op
Iteration  16: 540.634 ns/op
Iteration  17: 541.149 ns/op
Iteration  18: 539.219 ns/op
Iteration  19: 539.302 ns/op
Iteration  20: 540.970 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 961.114 ns/op
# Warmup Iteration   2: 597.213 ns/op
# Warmup Iteration   3: 551.500 ns/op
# Warmup Iteration   4: 569.995 ns/op
# Warmup Iteration   5: 560.301 ns/op
Iteration   1: 550.542 ns/op
Iteration   2: 547.692 ns/op
Iteration   3: 547.068 ns/op
Iteration   4: 549.129 ns/op
Iteration   5: 547.158 ns/op
Iteration   6: 552.969 ns/op
Iteration   7: 545.865 ns/op
Iteration   8: 545.751 ns/op
Iteration   9: 546.633 ns/op
Iteration  10: 545.624 ns/op
Iteration  11: 546.866 ns/op
Iteration  12: 545.667 ns/op
Iteration  13: 547.357 ns/op
Iteration  14: 545.907 ns/op
Iteration  15: 545.671 ns/op
Iteration  16: 547.595 ns/op
Iteration  17: 545.795 ns/op
Iteration  18: 546.823 ns/op
Iteration  19: 546.331 ns/op
Iteration  20: 545.711 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 957.309 ns/op
# Warmup Iteration   2: 583.597 ns/op
# Warmup Iteration   3: 542.845 ns/op
# Warmup Iteration   4: 557.253 ns/op
# Warmup Iteration   5: 551.353 ns/op
Iteration   1: 541.302 ns/op
Iteration   2: 538.333 ns/op
Iteration   3: 540.447 ns/op
Iteration   4: 537.787 ns/op
Iteration   5: 538.465 ns/op
Iteration   6: 545.202 ns/op
Iteration   7: 536.801 ns/op
Iteration   8: 538.582 ns/op
Iteration   9: 537.249 ns/op
Iteration  10: 538.362 ns/op
Iteration  11: 537.369 ns/op
Iteration  12: 536.851 ns/op
Iteration  13: 538.356 ns/op
Iteration  14: 536.895 ns/op
Iteration  15: 539.261 ns/op
Iteration  16: 537.537 ns/op
Iteration  17: 538.906 ns/op
Iteration  18: 537.506 ns/op
Iteration  19: 538.342 ns/op
Iteration  20: 537.724 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  543.791 ±(99.9%) 1.445 ns/op [Average]
  (min, avg, max) = (536.801, 543.791, 552.969), stdev = 4.262
  CI (99.9%): [542.345, 545.236] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	  

  	
	
	
			 
 

		 
	   
  
  	

 , 		
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 971.170 ns/op
# Warmup Iteration   2: 590.955 ns/op
# Warmup Iteration   3: 553.401 ns/op
# Warmup Iteration   4: 567.443 ns/op
# Warmup Iteration   5: 561.423 ns/op
Iteration   1: 551.172 ns/op
Iteration   2: 548.674 ns/op
Iteration   3: 551.072 ns/op
Iteration   4: 548.196 ns/op
Iteration   5: 550.799 ns/op
Iteration   6: 548.924 ns/op
Iteration   7: 547.453 ns/op
Iteration   8: 548.827 ns/op
Iteration   9: 547.549 ns/op
Iteration  10: 553.046 ns/op
Iteration  11: 548.165 ns/op
Iteration  12: 550.273 ns/op
Iteration  13: 548.604 ns/op
Iteration  14: 550.088 ns/op
Iteration  15: 548.056 ns/op
Iteration  16: 548.290 ns/op
Iteration  17: 549.515 ns/op
Iteration  18: 548.932 ns/op
Iteration  19: 552.604 ns/op
Iteration  20: 548.456 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1014.824 ns/op
# Warmup Iteration   2: 628.781 ns/op
# Warmup Iteration   3: 577.204 ns/op
# Warmup Iteration   4: 591.697 ns/op
# Warmup Iteration   5: 585.968 ns/op
Iteration   1: 571.988 ns/op
Iteration   2: 575.043 ns/op
Iteration   3: 571.867 ns/op
Iteration   4: 575.967 ns/op
Iteration   5: 572.353 ns/op
Iteration   6: 572.132 ns/op
Iteration   7: 575.675 ns/op
Iteration   8: 570.329 ns/op
Iteration   9: 570.082 ns/op
Iteration  10: 571.100 ns/op
Iteration  11: 571.066 ns/op
Iteration  12: 575.248 ns/op
Iteration  13: 571.941 ns/op
Iteration  14: 571.451 ns/op
Iteration  15: 575.751 ns/op
Iteration  16: 570.305 ns/op
Iteration  17: 573.122 ns/op
Iteration  18: 571.019 ns/op
Iteration  19: 571.145 ns/op
Iteration  20: 574.115 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1019.563 ns/op
# Warmup Iteration   2: 634.855 ns/op
# Warmup Iteration   3: 582.490 ns/op
# Warmup Iteration   4: 597.054 ns/op
# Warmup Iteration   5: 589.524 ns/op
Iteration   1: 576.494 ns/op
Iteration   2: 579.158 ns/op
Iteration   3: 576.395 ns/op
Iteration   4: 576.015 ns/op
Iteration   5: 578.466 ns/op
Iteration   6: 576.342 ns/op
Iteration   7: 577.255 ns/op
Iteration   8: 574.103 ns/op
Iteration   9: 574.041 ns/op
Iteration  10: 575.320 ns/op
Iteration  11: 574.959 ns/op
Iteration  12: 574.072 ns/op
Iteration  13: 579.455 ns/op
Iteration  14: 574.223 ns/op
Iteration  15: 576.616 ns/op
Iteration  16: 574.997 ns/op
Iteration  17: 575.045 ns/op
Iteration  18: 579.118 ns/op
Iteration  19: 576.087 ns/op
Iteration  20: 576.206 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1020.457 ns/op
# Warmup Iteration   2: 617.043 ns/op
# Warmup Iteration   3: 563.557 ns/op
# Warmup Iteration   4: 577.885 ns/op
# Warmup Iteration   5: 569.654 ns/op
Iteration   1: 558.951 ns/op
Iteration   2: 555.781 ns/op
Iteration   3: 556.320 ns/op
Iteration   4: 558.627 ns/op
Iteration   5: 556.687 ns/op
Iteration   6: 559.822 ns/op
Iteration   7: 555.358 ns/op
Iteration   8: 556.108 ns/op
Iteration   9: 554.810 ns/op
Iteration  10: 554.895 ns/op
Iteration  11: 556.548 ns/op
Iteration  12: 556.612 ns/op
Iteration  13: 558.735 ns/op
Iteration  14: 555.571 ns/op
Iteration  15: 556.264 ns/op
Iteration  16: 559.087 ns/op
Iteration  17: 556.420 ns/op
Iteration  18: 559.096 ns/op
Iteration  19: 556.182 ns/op
Iteration  20: 559.016 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 995.684 ns/op
# Warmup Iteration   2: 627.787 ns/op
# Warmup Iteration   3: 576.151 ns/op
# Warmup Iteration   4: 597.348 ns/op
# Warmup Iteration   5: 585.647 ns/op
Iteration   1: 571.712 ns/op
Iteration   2: 574.162 ns/op
Iteration   3: 571.971 ns/op
Iteration   4: 574.306 ns/op
Iteration   5: 571.862 ns/op
Iteration   6: 571.987 ns/op
Iteration   7: 573.169 ns/op
Iteration   8: 570.415 ns/op
Iteration   9: 570.344 ns/op
Iteration  10: 571.251 ns/op
Iteration  11: 570.005 ns/op
Iteration  12: 571.744 ns/op
Iteration  13: 570.698 ns/op
Iteration  14: 570.690 ns/op
Iteration  15: 572.197 ns/op
Iteration  16: 570.803 ns/op
Iteration  17: 576.005 ns/op
Iteration  18: 571.271 ns/op
Iteration  19: 570.577 ns/op
Iteration  20: 572.602 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  565.434 ±(99.9%) 3.572 ns/op [Average]
  (min, avg, max) = (547.453, 565.434, 579.455), stdev = 10.533
  CI (99.9%): [561.862, 569.007] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	  

  	
	
	
			 
 

		 
	   
  
  	

 , 		
  avgt  100  543.791 ± 1.445  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	  

  	
	
	
			 
 

		 
	   
  
  	

 , 		
  avgt  100  565.434 ± 3.572  ns/op

Benchmark result is saved to split_precompiled_regex_100_86_Match.csv
