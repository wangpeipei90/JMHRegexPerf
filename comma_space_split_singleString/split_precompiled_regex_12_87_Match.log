# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
       		 	 
,	 			 
 	     

 	  
			 		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 993.611 ns/op
# Warmup Iteration   2: 633.265 ns/op
# Warmup Iteration   3: 579.268 ns/op
# Warmup Iteration   4: 594.164 ns/op
# Warmup Iteration   5: 586.574 ns/op
Iteration   1: 573.832 ns/op
Iteration   2: 576.765 ns/op
Iteration   3: 574.221 ns/op
Iteration   4: 574.256 ns/op
Iteration   5: 577.082 ns/op
Iteration   6: 573.975 ns/op
Iteration   7: 574.006 ns/op
Iteration   8: 572.942 ns/op
Iteration   9: 572.055 ns/op
Iteration  10: 572.096 ns/op
Iteration  11: 577.679 ns/op
Iteration  12: 572.015 ns/op
Iteration  13: 572.532 ns/op
Iteration  14: 572.831 ns/op
Iteration  15: 572.118 ns/op
Iteration  16: 572.866 ns/op
Iteration  17: 575.228 ns/op
Iteration  18: 577.834 ns/op
Iteration  19: 572.884 ns/op
Iteration  20: 574.611 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1025.460 ns/op
# Warmup Iteration   2: 629.967 ns/op
# Warmup Iteration   3: 573.012 ns/op
# Warmup Iteration   4: 587.465 ns/op
# Warmup Iteration   5: 581.319 ns/op
Iteration   1: 568.197 ns/op
Iteration   2: 570.141 ns/op
Iteration   3: 568.486 ns/op
Iteration   4: 568.374 ns/op
Iteration   5: 571.289 ns/op
Iteration   6: 568.346 ns/op
Iteration   7: 570.209 ns/op
Iteration   8: 568.266 ns/op
Iteration   9: 566.663 ns/op
Iteration  10: 567.696 ns/op
Iteration  11: 571.691 ns/op
Iteration  12: 566.438 ns/op
Iteration  13: 567.838 ns/op
Iteration  14: 566.941 ns/op
Iteration  15: 566.828 ns/op
Iteration  16: 571.765 ns/op
Iteration  17: 570.791 ns/op
Iteration  18: 566.800 ns/op
Iteration  19: 569.905 ns/op
Iteration  20: 566.695 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 994.088 ns/op
# Warmup Iteration   2: 628.023 ns/op
# Warmup Iteration   3: 573.260 ns/op
# Warmup Iteration   4: 588.508 ns/op
# Warmup Iteration   5: 580.801 ns/op
Iteration   1: 568.363 ns/op
Iteration   2: 572.131 ns/op
Iteration   3: 568.342 ns/op
Iteration   4: 568.347 ns/op
Iteration   5: 572.317 ns/op
Iteration   6: 568.001 ns/op
Iteration   7: 568.579 ns/op
Iteration   8: 567.113 ns/op
Iteration   9: 565.700 ns/op
Iteration  10: 567.090 ns/op
Iteration  11: 566.283 ns/op
Iteration  12: 566.095 ns/op
Iteration  13: 569.372 ns/op
Iteration  14: 567.734 ns/op
Iteration  15: 567.565 ns/op
Iteration  16: 567.988 ns/op
Iteration  17: 566.358 ns/op
Iteration  18: 570.315 ns/op
Iteration  19: 573.941 ns/op
Iteration  20: 567.525 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 998.259 ns/op
# Warmup Iteration   2: 633.876 ns/op
# Warmup Iteration   3: 576.214 ns/op
# Warmup Iteration   4: 591.917 ns/op
# Warmup Iteration   5: 585.139 ns/op
Iteration   1: 571.451 ns/op
Iteration   2: 574.172 ns/op
Iteration   3: 571.337 ns/op
Iteration   4: 571.297 ns/op
Iteration   5: 573.611 ns/op
Iteration   6: 571.564 ns/op
Iteration   7: 571.114 ns/op
Iteration   8: 570.872 ns/op
Iteration   9: 569.449 ns/op
Iteration  10: 570.730 ns/op
Iteration  11: 570.856 ns/op
Iteration  12: 570.109 ns/op
Iteration  13: 569.686 ns/op
Iteration  14: 571.820 ns/op
Iteration  15: 569.747 ns/op
Iteration  16: 573.448 ns/op
Iteration  17: 571.135 ns/op
Iteration  18: 571.181 ns/op
Iteration  19: 572.529 ns/op
Iteration  20: 570.988 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 995.211 ns/op
# Warmup Iteration   2: 631.647 ns/op
# Warmup Iteration   3: 576.769 ns/op
# Warmup Iteration   4: 592.569 ns/op
# Warmup Iteration   5: 589.451 ns/op
Iteration   1: 577.520 ns/op
Iteration   2: 574.472 ns/op
Iteration   3: 572.040 ns/op
Iteration   4: 571.944 ns/op
Iteration   5: 574.131 ns/op
Iteration   6: 571.773 ns/op
Iteration   7: 572.625 ns/op
Iteration   8: 571.080 ns/op
Iteration   9: 569.913 ns/op
Iteration  10: 569.897 ns/op
Iteration  11: 575.189 ns/op
Iteration  12: 570.374 ns/op
Iteration  13: 570.755 ns/op
Iteration  14: 571.847 ns/op
Iteration  15: 570.042 ns/op
Iteration  16: 573.577 ns/op
Iteration  17: 570.866 ns/op
Iteration  18: 570.566 ns/op
Iteration  19: 572.827 ns/op
Iteration  20: 571.050 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  570.939 ±(99.9%) 0.955 ns/op [Average]
  (min, avg, max) = (565.700, 570.939, 577.834), stdev = 2.817
  CI (99.9%): [569.984, 571.895] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
       		 	 
,	 			 
 	     

 	  
			 		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1045.013 ns/op
# Warmup Iteration   2: 644.429 ns/op
# Warmup Iteration   3: 585.600 ns/op
# Warmup Iteration   4: 601.018 ns/op
# Warmup Iteration   5: 594.761 ns/op
Iteration   1: 581.068 ns/op
Iteration   2: 583.708 ns/op
Iteration   3: 580.916 ns/op
Iteration   4: 581.428 ns/op
Iteration   5: 583.531 ns/op
Iteration   6: 581.210 ns/op
Iteration   7: 580.729 ns/op
Iteration   8: 579.926 ns/op
Iteration   9: 578.813 ns/op
Iteration  10: 579.923 ns/op
Iteration  11: 578.884 ns/op
Iteration  12: 579.108 ns/op
Iteration  13: 580.467 ns/op
Iteration  14: 579.151 ns/op
Iteration  15: 579.444 ns/op
Iteration  16: 580.558 ns/op
Iteration  17: 579.070 ns/op
Iteration  18: 579.421 ns/op
Iteration  19: 580.500 ns/op
Iteration  20: 579.241 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1017.360 ns/op
# Warmup Iteration   2: 652.967 ns/op
# Warmup Iteration   3: 596.375 ns/op
# Warmup Iteration   4: 612.286 ns/op
# Warmup Iteration   5: 605.068 ns/op
Iteration   1: 591.671 ns/op
Iteration   2: 594.459 ns/op
Iteration   3: 591.656 ns/op
Iteration   4: 591.644 ns/op
Iteration   5: 594.334 ns/op
Iteration   6: 590.721 ns/op
Iteration   7: 591.427 ns/op
Iteration   8: 595.509 ns/op
Iteration   9: 591.615 ns/op
Iteration  10: 594.266 ns/op
Iteration  11: 592.999 ns/op
Iteration  12: 590.594 ns/op
Iteration  13: 590.832 ns/op
Iteration  14: 592.253 ns/op
Iteration  15: 590.574 ns/op
Iteration  16: 591.777 ns/op
Iteration  17: 595.298 ns/op
Iteration  18: 591.679 ns/op
Iteration  19: 591.882 ns/op
Iteration  20: 594.019 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1035.225 ns/op
# Warmup Iteration   2: 653.536 ns/op
# Warmup Iteration   3: 594.240 ns/op
# Warmup Iteration   4: 609.495 ns/op
# Warmup Iteration   5: 602.735 ns/op
Iteration   1: 589.477 ns/op
Iteration   2: 592.733 ns/op
Iteration   3: 589.521 ns/op
Iteration   4: 589.107 ns/op
Iteration   5: 592.085 ns/op
Iteration   6: 589.463 ns/op
Iteration   7: 589.567 ns/op
Iteration   8: 591.542 ns/op
Iteration   9: 587.340 ns/op
Iteration  10: 587.548 ns/op
Iteration  11: 591.679 ns/op
Iteration  12: 588.156 ns/op
Iteration  13: 588.125 ns/op
Iteration  14: 589.309 ns/op
Iteration  15: 587.707 ns/op
Iteration  16: 588.622 ns/op
Iteration  17: 592.694 ns/op
Iteration  18: 588.639 ns/op
Iteration  19: 587.898 ns/op
Iteration  20: 590.863 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1057.644 ns/op
# Warmup Iteration   2: 663.872 ns/op
# Warmup Iteration   3: 599.403 ns/op
# Warmup Iteration   4: 607.126 ns/op
# Warmup Iteration   5: 615.050 ns/op
Iteration   1: 594.270 ns/op
Iteration   2: 593.485 ns/op
Iteration   3: 597.340 ns/op
Iteration   4: 598.191 ns/op
Iteration   5: 594.036 ns/op
Iteration   6: 595.811 ns/op
Iteration   7: 592.949 ns/op
Iteration   8: 591.684 ns/op
Iteration   9: 592.967 ns/op
Iteration  10: 591.323 ns/op
Iteration  11: 591.677 ns/op
Iteration  12: 592.946 ns/op
Iteration  13: 591.458 ns/op
Iteration  14: 592.303 ns/op
Iteration  15: 592.626 ns/op
Iteration  16: 591.306 ns/op
Iteration  17: 591.149 ns/op
Iteration  18: 593.101 ns/op
Iteration  19: 591.293 ns/op
Iteration  20: 595.633 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 997.964 ns/op
# Warmup Iteration   2: 625.310 ns/op
# Warmup Iteration   3: 577.568 ns/op
# Warmup Iteration   4: 593.209 ns/op
# Warmup Iteration   5: 586.243 ns/op
Iteration   1: 573.719 ns/op
Iteration   2: 576.366 ns/op
Iteration   3: 572.997 ns/op
Iteration   4: 575.903 ns/op
Iteration   5: 572.899 ns/op
Iteration   6: 572.839 ns/op
Iteration   7: 575.633 ns/op
Iteration   8: 571.796 ns/op
Iteration   9: 571.560 ns/op
Iteration  10: 573.324 ns/op
Iteration  11: 571.934 ns/op
Iteration  12: 574.435 ns/op
Iteration  13: 572.667 ns/op
Iteration  14: 572.742 ns/op
Iteration  15: 575.225 ns/op
Iteration  16: 572.930 ns/op
Iteration  17: 573.051 ns/op
Iteration  18: 575.207 ns/op
Iteration  19: 572.877 ns/op
Iteration  20: 580.677 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  585.927 ±(99.9%) 2.642 ns/op [Average]
  (min, avg, max) = (571.560, 585.927, 598.191), stdev = 7.791
  CI (99.9%): [583.285, 588.569] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
       		 	 
,	 			 
 	     

 	  
			 		  avgt  100  570.939 ± 0.955  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
       		 	 
,	 			 
 	     

 	  
			 		  avgt  100  585.927 ± 2.642  ns/op

Benchmark result is saved to split_precompiled_regex_12_87_Match.csv
