# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	

			
	 
	   
	 	 		 
 



	 
 	    	
	   		 			
  			
 	,)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1038.328 ns/op
# Warmup Iteration   2: 681.657 ns/op
# Warmup Iteration   3: 612.845 ns/op
# Warmup Iteration   4: 615.300 ns/op
# Warmup Iteration   5: 637.566 ns/op
Iteration   1: 608.610 ns/op
Iteration   2: 607.307 ns/op
Iteration   3: 607.610 ns/op
Iteration   4: 610.558 ns/op
Iteration   5: 608.109 ns/op
Iteration   6: 607.914 ns/op
Iteration   7: 608.112 ns/op
Iteration   8: 609.170 ns/op
Iteration   9: 605.563 ns/op
Iteration  10: 605.480 ns/op
Iteration  11: 606.352 ns/op
Iteration  12: 605.472 ns/op
Iteration  13: 605.396 ns/op
Iteration  14: 605.400 ns/op
Iteration  15: 610.527 ns/op
Iteration  16: 605.304 ns/op
Iteration  17: 605.987 ns/op
Iteration  18: 605.948 ns/op
Iteration  19: 607.060 ns/op
Iteration  20: 605.824 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1032.439 ns/op
# Warmup Iteration   2: 681.822 ns/op
# Warmup Iteration   3: 613.257 ns/op
# Warmup Iteration   4: 620.800 ns/op
# Warmup Iteration   5: 637.019 ns/op
Iteration   1: 608.520 ns/op
Iteration   2: 608.094 ns/op
Iteration   3: 608.417 ns/op
Iteration   4: 610.628 ns/op
Iteration   5: 607.997 ns/op
Iteration   6: 607.553 ns/op
Iteration   7: 607.799 ns/op
Iteration   8: 609.127 ns/op
Iteration   9: 606.330 ns/op
Iteration  10: 606.798 ns/op
Iteration  11: 608.702 ns/op
Iteration  12: 609.802 ns/op
Iteration  13: 609.251 ns/op
Iteration  14: 608.512 ns/op
Iteration  15: 609.493 ns/op
Iteration  16: 607.087 ns/op
Iteration  17: 607.218 ns/op
Iteration  18: 607.548 ns/op
Iteration  19: 609.717 ns/op
Iteration  20: 608.561 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1025.904 ns/op
# Warmup Iteration   2: 661.709 ns/op
# Warmup Iteration   3: 595.258 ns/op
# Warmup Iteration   4: 597.037 ns/op
# Warmup Iteration   5: 618.956 ns/op
Iteration   1: 590.312 ns/op
Iteration   2: 589.949 ns/op
Iteration   3: 592.568 ns/op
Iteration   4: 589.880 ns/op
Iteration   5: 590.214 ns/op
Iteration   6: 592.480 ns/op
Iteration   7: 590.148 ns/op
Iteration   8: 589.612 ns/op
Iteration   9: 588.080 ns/op
Iteration  10: 589.083 ns/op
Iteration  11: 587.967 ns/op
Iteration  12: 587.960 ns/op
Iteration  13: 589.230 ns/op
Iteration  14: 592.915 ns/op
Iteration  15: 588.546 ns/op
Iteration  16: 590.546 ns/op
Iteration  17: 588.927 ns/op
Iteration  18: 589.967 ns/op
Iteration  19: 593.164 ns/op
Iteration  20: 589.880 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1010.159 ns/op
# Warmup Iteration   2: 656.233 ns/op
# Warmup Iteration   3: 592.518 ns/op
# Warmup Iteration   4: 598.408 ns/op
# Warmup Iteration   5: 610.952 ns/op
Iteration   1: 588.114 ns/op
Iteration   2: 588.042 ns/op
Iteration   3: 590.632 ns/op
Iteration   4: 588.097 ns/op
Iteration   5: 588.278 ns/op
Iteration   6: 590.787 ns/op
Iteration   7: 588.300 ns/op
Iteration   8: 593.293 ns/op
Iteration   9: 589.192 ns/op
Iteration  10: 586.184 ns/op
Iteration  11: 586.198 ns/op
Iteration  12: 587.535 ns/op
Iteration  13: 587.088 ns/op
Iteration  14: 586.137 ns/op
Iteration  15: 586.435 ns/op
Iteration  16: 589.116 ns/op
Iteration  17: 588.257 ns/op
Iteration  18: 587.984 ns/op
Iteration  19: 591.093 ns/op
Iteration  20: 588.073 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1035.474 ns/op
# Warmup Iteration   2: 684.253 ns/op
# Warmup Iteration   3: 613.268 ns/op
# Warmup Iteration   4: 615.744 ns/op
# Warmup Iteration   5: 636.945 ns/op
Iteration   1: 609.314 ns/op
Iteration   2: 609.197 ns/op
Iteration   3: 608.209 ns/op
Iteration   4: 615.629 ns/op
Iteration   5: 608.482 ns/op
Iteration   6: 608.689 ns/op
Iteration   7: 608.576 ns/op
Iteration   8: 609.546 ns/op
Iteration   9: 606.345 ns/op
Iteration  10: 606.203 ns/op
Iteration  11: 607.423 ns/op
Iteration  12: 605.820 ns/op
Iteration  13: 606.137 ns/op
Iteration  14: 606.091 ns/op
Iteration  15: 608.051 ns/op
Iteration  16: 607.200 ns/op
Iteration  17: 608.002 ns/op
Iteration  18: 608.069 ns/op
Iteration  19: 609.193 ns/op
Iteration  20: 607.473 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  600.428 ±(99.9%) 3.169 ns/op [Average]
  (min, avg, max) = (586.137, 600.428, 615.629), stdev = 9.343
  CI (99.9%): [597.259, 603.596] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	

			
	 
	   
	 	 		 
 



	 
 	    	
	   		 			
  			
 	,)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1058.371 ns/op
# Warmup Iteration   2: 684.738 ns/op
# Warmup Iteration   3: 617.669 ns/op
# Warmup Iteration   4: 620.308 ns/op
# Warmup Iteration   5: 640.933 ns/op
Iteration   1: 612.956 ns/op
Iteration   2: 612.675 ns/op
Iteration   3: 615.045 ns/op
Iteration   4: 612.593 ns/op
Iteration   5: 612.503 ns/op
Iteration   6: 613.127 ns/op
Iteration   7: 614.689 ns/op
Iteration   8: 611.989 ns/op
Iteration   9: 610.529 ns/op
Iteration  10: 613.637 ns/op
Iteration  11: 611.141 ns/op
Iteration  12: 611.005 ns/op
Iteration  13: 610.928 ns/op
Iteration  14: 612.091 ns/op
Iteration  15: 610.650 ns/op
Iteration  16: 610.830 ns/op
Iteration  17: 618.622 ns/op
Iteration  18: 618.810 ns/op
Iteration  19: 614.225 ns/op
Iteration  20: 611.754 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1097.267 ns/op
# Warmup Iteration   2: 708.003 ns/op
# Warmup Iteration   3: 626.694 ns/op
# Warmup Iteration   4: 629.029 ns/op
# Warmup Iteration   5: 651.092 ns/op
Iteration   1: 622.050 ns/op
Iteration   2: 622.179 ns/op
Iteration   3: 622.062 ns/op
Iteration   4: 627.147 ns/op
Iteration   5: 623.662 ns/op
Iteration   6: 622.437 ns/op
Iteration   7: 622.502 ns/op
Iteration   8: 625.157 ns/op
Iteration   9: 619.796 ns/op
Iteration  10: 620.069 ns/op
Iteration  11: 620.384 ns/op
Iteration  12: 621.696 ns/op
Iteration  13: 620.774 ns/op
Iteration  14: 621.553 ns/op
Iteration  15: 624.660 ns/op
Iteration  16: 621.337 ns/op
Iteration  17: 620.639 ns/op
Iteration  18: 620.711 ns/op
Iteration  19: 623.163 ns/op
Iteration  20: 620.966 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1065.192 ns/op
# Warmup Iteration   2: 687.247 ns/op
# Warmup Iteration   3: 617.070 ns/op
# Warmup Iteration   4: 619.352 ns/op
# Warmup Iteration   5: 641.283 ns/op
Iteration   1: 614.092 ns/op
Iteration   2: 612.612 ns/op
Iteration   3: 615.086 ns/op
Iteration   4: 612.395 ns/op
Iteration   5: 614.908 ns/op
Iteration   6: 611.761 ns/op
Iteration   7: 615.379 ns/op
Iteration   8: 610.533 ns/op
Iteration   9: 610.338 ns/op
Iteration  10: 611.982 ns/op
Iteration  11: 610.654 ns/op
Iteration  12: 610.313 ns/op
Iteration  13: 610.428 ns/op
Iteration  14: 611.808 ns/op
Iteration  15: 610.459 ns/op
Iteration  16: 610.827 ns/op
Iteration  17: 616.436 ns/op
Iteration  18: 609.914 ns/op
Iteration  19: 610.846 ns/op
Iteration  20: 615.196 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1081.812 ns/op
# Warmup Iteration   2: 726.701 ns/op
# Warmup Iteration   3: 640.232 ns/op
# Warmup Iteration   4: 648.495 ns/op
# Warmup Iteration   5: 645.729 ns/op
Iteration   1: 655.991 ns/op
Iteration   2: 639.507 ns/op
Iteration   3: 639.472 ns/op
Iteration   4: 636.093 ns/op
Iteration   5: 642.701 ns/op
Iteration   6: 634.009 ns/op
Iteration   7: 634.719 ns/op
Iteration   8: 636.343 ns/op
Iteration   9: 639.148 ns/op
Iteration  10: 631.643 ns/op
Iteration  11: 631.458 ns/op
Iteration  12: 631.762 ns/op
Iteration  13: 637.883 ns/op
Iteration  14: 632.569 ns/op
Iteration  15: 633.698 ns/op
Iteration  16: 633.958 ns/op
Iteration  17: 636.893 ns/op
Iteration  18: 633.010 ns/op
Iteration  19: 633.652 ns/op
Iteration  20: 633.591 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1026.030 ns/op
# Warmup Iteration   2: 661.598 ns/op
# Warmup Iteration   3: 602.123 ns/op
# Warmup Iteration   4: 617.833 ns/op
# Warmup Iteration   5: 612.049 ns/op
Iteration   1: 598.004 ns/op
Iteration   2: 597.202 ns/op
Iteration   3: 600.113 ns/op
Iteration   4: 596.850 ns/op
Iteration   5: 597.364 ns/op
Iteration   6: 599.717 ns/op
Iteration   7: 597.080 ns/op
Iteration   8: 595.281 ns/op
Iteration   9: 595.641 ns/op
Iteration  10: 595.052 ns/op
Iteration  11: 595.235 ns/op
Iteration  12: 596.022 ns/op
Iteration  13: 595.089 ns/op
Iteration  14: 595.815 ns/op
Iteration  15: 598.000 ns/op
Iteration  16: 596.771 ns/op
Iteration  17: 596.295 ns/op
Iteration  18: 598.545 ns/op
Iteration  19: 596.805 ns/op
Iteration  20: 597.208 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  616.149 ±(99.9%) 4.536 ns/op [Average]
  (min, avg, max) = (595.052, 616.149, 655.991), stdev = 13.375
  CI (99.9%): [611.613, 620.685] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	

			
	 
	   
	 	 		 
 



	 
 	    	
	   		 			
  			
 	,  avgt  100  600.428 ± 3.169  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	

			
	 
	   
	 	 		 
 



	 
 	    	
	   		 			
  			
 	,  avgt  100  616.149 ± 4.536  ns/op

Benchmark result is saved to split_precompiled_regex_235_118_Match.csv
