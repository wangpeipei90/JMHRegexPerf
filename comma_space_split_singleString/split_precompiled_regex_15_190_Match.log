# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	 	
	  


			,



	 	  

  		
	 
  
	  
 
 

	   
	
  
 		 
	   	
	




 	

		

		 	
	
 
	

 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1145.754 ns/op
# Warmup Iteration   2: 831.840 ns/op
# Warmup Iteration   3: 725.502 ns/op
# Warmup Iteration   4: 739.141 ns/op
# Warmup Iteration   5: 734.319 ns/op
Iteration   1: 739.478 ns/op
Iteration   2: 722.277 ns/op
Iteration   3: 722.105 ns/op
Iteration   4: 721.218 ns/op
Iteration   5: 722.382 ns/op
Iteration   6: 722.594 ns/op
Iteration   7: 722.335 ns/op
Iteration   8: 721.871 ns/op
Iteration   9: 721.874 ns/op
Iteration  10: 722.112 ns/op
Iteration  11: 719.623 ns/op
Iteration  12: 720.705 ns/op
Iteration  13: 719.466 ns/op
Iteration  14: 719.505 ns/op
Iteration  15: 725.800 ns/op
Iteration  16: 720.416 ns/op
Iteration  17: 725.277 ns/op
Iteration  18: 722.275 ns/op
Iteration  19: 721.707 ns/op
Iteration  20: 721.541 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1244.186 ns/op
# Warmup Iteration   2: 912.989 ns/op
# Warmup Iteration   3: 773.520 ns/op
# Warmup Iteration   4: 777.300 ns/op
# Warmup Iteration   5: 778.989 ns/op
Iteration   1: 786.331 ns/op
Iteration   2: 787.474 ns/op
Iteration   3: 770.021 ns/op
Iteration   4: 769.332 ns/op
Iteration   5: 772.565 ns/op
Iteration   6: 769.238 ns/op
Iteration   7: 769.411 ns/op
Iteration   8: 772.776 ns/op
Iteration   9: 769.459 ns/op
Iteration  10: 769.599 ns/op
Iteration  11: 769.775 ns/op
Iteration  12: 766.934 ns/op
Iteration  13: 766.940 ns/op
Iteration  14: 766.435 ns/op
Iteration  15: 766.487 ns/op
Iteration  16: 766.664 ns/op
Iteration  17: 767.138 ns/op
Iteration  18: 767.212 ns/op
Iteration  19: 769.229 ns/op
Iteration  20: 771.290 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1226.743 ns/op
# Warmup Iteration   2: 955.472 ns/op
# Warmup Iteration   3: 813.235 ns/op
# Warmup Iteration   4: 815.813 ns/op
# Warmup Iteration   5: 818.941 ns/op
Iteration   1: 823.417 ns/op
Iteration   2: 828.199 ns/op
Iteration   3: 809.779 ns/op
Iteration   4: 809.106 ns/op
Iteration   5: 809.780 ns/op
Iteration   6: 809.788 ns/op
Iteration   7: 810.370 ns/op
Iteration   8: 810.668 ns/op
Iteration   9: 811.203 ns/op
Iteration  10: 812.272 ns/op
Iteration  11: 814.176 ns/op
Iteration  12: 808.097 ns/op
Iteration  13: 807.732 ns/op
Iteration  14: 807.904 ns/op
Iteration  15: 809.238 ns/op
Iteration  16: 804.798 ns/op
Iteration  17: 808.436 ns/op
Iteration  18: 807.432 ns/op
Iteration  19: 806.762 ns/op
Iteration  20: 807.349 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1239.767 ns/op
# Warmup Iteration   2: 928.657 ns/op
# Warmup Iteration   3: 764.236 ns/op
# Warmup Iteration   4: 766.902 ns/op
# Warmup Iteration   5: 769.811 ns/op
Iteration   1: 778.379 ns/op
Iteration   2: 781.583 ns/op
Iteration   3: 760.950 ns/op
Iteration   4: 760.939 ns/op
Iteration   5: 760.798 ns/op
Iteration   6: 760.314 ns/op
Iteration   7: 760.366 ns/op
Iteration   8: 764.287 ns/op
Iteration   9: 761.466 ns/op
Iteration  10: 760.327 ns/op
Iteration  11: 759.068 ns/op
Iteration  12: 759.000 ns/op
Iteration  13: 758.941 ns/op
Iteration  14: 758.876 ns/op
Iteration  15: 759.379 ns/op
Iteration  16: 759.062 ns/op
Iteration  17: 759.554 ns/op
Iteration  18: 764.537 ns/op
Iteration  19: 759.555 ns/op
Iteration  20: 759.708 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1243.652 ns/op
# Warmup Iteration   2: 930.139 ns/op
# Warmup Iteration   3: 770.986 ns/op
# Warmup Iteration   4: 778.973 ns/op
# Warmup Iteration   5: 775.680 ns/op
Iteration   1: 781.391 ns/op
Iteration   2: 784.022 ns/op
Iteration   3: 767.084 ns/op
Iteration   4: 766.353 ns/op
Iteration   5: 766.171 ns/op
Iteration   6: 767.300 ns/op
Iteration   7: 766.395 ns/op
Iteration   8: 769.275 ns/op
Iteration   9: 766.021 ns/op
Iteration  10: 765.223 ns/op
Iteration  11: 766.628 ns/op
Iteration  12: 764.030 ns/op
Iteration  13: 763.552 ns/op
Iteration  14: 763.658 ns/op
Iteration  15: 763.349 ns/op
Iteration  16: 763.698 ns/op
Iteration  17: 766.915 ns/op
Iteration  18: 764.824 ns/op
Iteration  19: 764.442 ns/op
Iteration  20: 764.648 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  766.774 Â±(99.9%) 9.715 ns/op [Average]
  (min, avg, max) = (719.466, 766.774, 828.199), stdev = 28.644
  CI (99.9%): [757.060, 776.489] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	 	
	  


			,



	 	  

  		
	 
  
	  
 
 

	   
	
  
 		 
	   	
	




 	

		

		 	
	
 
	

 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1276.108 ns/op
# Warmup Iteration   2: 998.182 ns/op
# Warmup Iteration   3: 849.492 ns/op
# Warmup Iteration   4: 850.451 ns/op
# Warmup Iteration   5: 853.938 ns/op
Iteration   1: 856.264 ns/op
Iteration   2: 860.799 ns/op
Iteration   3: 841.201 ns/op
Iteration   4: 841.501 ns/op
Iteration   5: 840.773 ns/op
Iteration   6: 840.193 ns/op
Iteration   7: 840.739 ns/op
Iteration   8: 840.270 ns/op
Iteration   9: 842.149 ns/op
Iteration  10: 843.699 ns/op
Iteration  11: 841.735 ns/op
Iteration  12: 841.312 ns/op
Iteration  13: 838.193 ns/op
Iteration  14: 839.597 ns/op
Iteration  15: 839.996 ns/op
Iteration  16: 841.032 ns/op
Iteration  17: 839.099 ns/op
Iteration  18: 839.196 ns/op
Iteration  19: 840.165 ns/op
Iteration  20: 841.695 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1187.044 ns/op
# Warmup Iteration   2: 867.381 ns/op
# Warmup Iteration   3: 754.222 ns/op
# Warmup Iteration   4: 769.256 ns/op
# Warmup Iteration   5: 763.234 ns/op
Iteration   1: 768.515 ns/op
Iteration   2: 750.890 ns/op
Iteration   3: 750.381 ns/op
Iteration   4: 750.573 ns/op
Iteration   5: 750.026 ns/op
Iteration   6: 750.720 ns/op
Iteration   7: 749.849 ns/op
Iteration   8: 750.015 ns/op
Iteration   9: 750.812 ns/op
Iteration  10: 751.079 ns/op
Iteration  11: 748.454 ns/op
Iteration  12: 748.170 ns/op
Iteration  13: 748.602 ns/op
Iteration  14: 748.021 ns/op
Iteration  15: 748.866 ns/op
Iteration  16: 749.906 ns/op
Iteration  17: 748.376 ns/op
Iteration  18: 748.480 ns/op
Iteration  19: 749.644 ns/op
Iteration  20: 748.912 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1182.254 ns/op
# Warmup Iteration   2: 867.919 ns/op
# Warmup Iteration   3: 753.992 ns/op
# Warmup Iteration   4: 768.693 ns/op
# Warmup Iteration   5: 762.520 ns/op
Iteration   1: 767.622 ns/op
Iteration   2: 750.424 ns/op
Iteration   3: 749.783 ns/op
Iteration   4: 751.601 ns/op
Iteration   5: 750.354 ns/op
Iteration   6: 750.008 ns/op
Iteration   7: 751.041 ns/op
Iteration   8: 753.456 ns/op
Iteration   9: 752.479 ns/op
Iteration  10: 750.620 ns/op
Iteration  11: 748.372 ns/op
Iteration  12: 749.011 ns/op
Iteration  13: 748.415 ns/op
Iteration  14: 748.358 ns/op
Iteration  15: 747.867 ns/op
Iteration  16: 750.252 ns/op
Iteration  17: 749.629 ns/op
Iteration  18: 749.028 ns/op
Iteration  19: 749.261 ns/op
Iteration  20: 752.471 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1193.039 ns/op
# Warmup Iteration   2: 872.493 ns/op
# Warmup Iteration   3: 756.834 ns/op
# Warmup Iteration   4: 776.131 ns/op
# Warmup Iteration   5: 766.539 ns/op
Iteration   1: 770.658 ns/op
Iteration   2: 753.686 ns/op
Iteration   3: 753.802 ns/op
Iteration   4: 753.259 ns/op
Iteration   5: 753.702 ns/op
Iteration   6: 753.114 ns/op
Iteration   7: 752.690 ns/op
Iteration   8: 752.252 ns/op
Iteration   9: 752.567 ns/op
Iteration  10: 752.396 ns/op
Iteration  11: 750.116 ns/op
Iteration  12: 750.157 ns/op
Iteration  13: 749.878 ns/op
Iteration  14: 750.502 ns/op
Iteration  15: 750.165 ns/op
Iteration  16: 750.389 ns/op
Iteration  17: 750.722 ns/op
Iteration  18: 753.710 ns/op
Iteration  19: 752.016 ns/op
Iteration  20: 750.669 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1216.282 ns/op
# Warmup Iteration   2: 859.376 ns/op
# Warmup Iteration   3: 739.470 ns/op
# Warmup Iteration   4: 755.048 ns/op
# Warmup Iteration   5: 748.869 ns/op
Iteration   1: 753.383 ns/op
Iteration   2: 735.674 ns/op
Iteration   3: 736.356 ns/op
Iteration   4: 736.105 ns/op
Iteration   5: 739.357 ns/op
Iteration   6: 739.053 ns/op
Iteration   7: 735.745 ns/op
Iteration   8: 735.827 ns/op
Iteration   9: 735.568 ns/op
Iteration  10: 736.357 ns/op
Iteration  11: 733.498 ns/op
Iteration  12: 735.148 ns/op
Iteration  13: 737.601 ns/op
Iteration  14: 734.333 ns/op
Iteration  15: 734.161 ns/op
Iteration  16: 742.368 ns/op
Iteration  17: 735.030 ns/op
Iteration  18: 734.176 ns/op
Iteration  19: 738.767 ns/op
Iteration  20: 734.254 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  766.792 Â±(99.9%) 13.131 ns/op [Average]
  (min, avg, max) = (733.498, 766.792, 860.799), stdev = 38.716
  CI (99.9%): [753.661, 779.922] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                       (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	 	
	  


			,



	 	  

  		
	 
  
	  
 
 

	   
	
  
 		 
	   	
	




 	

		

		 	
	
 
	

   avgt  100  766.774 Â±  9.715  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	 	
	  


			,



	 	  

  		
	 
  
	  
 
 

	   
	
  
 		 
	   	
	




 	

		

		 	
	
 
	

   avgt  100  766.792 Â± 13.131  ns/op

Benchmark result is saved to split_precompiled_regex_15_190_Match.csv
