# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  		
			  	

	 
 	

 

  
	
 	 	


 
 ,		
 

 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 983.401 ns/op
# Warmup Iteration   2: 614.696 ns/op
# Warmup Iteration   3: 561.344 ns/op
# Warmup Iteration   4: 576.298 ns/op
# Warmup Iteration   5: 571.019 ns/op
Iteration   1: 558.569 ns/op
Iteration   2: 559.811 ns/op
Iteration   3: 557.213 ns/op
Iteration   4: 559.617 ns/op
Iteration   5: 557.887 ns/op
Iteration   6: 557.390 ns/op
Iteration   7: 558.084 ns/op
Iteration   8: 555.052 ns/op
Iteration   9: 556.071 ns/op
Iteration  10: 554.963 ns/op
Iteration  11: 555.005 ns/op
Iteration  12: 555.839 ns/op
Iteration  13: 554.929 ns/op
Iteration  14: 555.381 ns/op
Iteration  15: 556.396 ns/op
Iteration  16: 555.021 ns/op
Iteration  17: 558.657 ns/op
Iteration  18: 556.728 ns/op
Iteration  19: 556.954 ns/op
Iteration  20: 559.782 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 986.039 ns/op
# Warmup Iteration   2: 621.456 ns/op
# Warmup Iteration   3: 569.458 ns/op
# Warmup Iteration   4: 584.678 ns/op
# Warmup Iteration   5: 578.598 ns/op
Iteration   1: 565.772 ns/op
Iteration   2: 567.887 ns/op
Iteration   3: 565.401 ns/op
Iteration   4: 565.491 ns/op
Iteration   5: 568.350 ns/op
Iteration   6: 565.247 ns/op
Iteration   7: 566.037 ns/op
Iteration   8: 567.723 ns/op
Iteration   9: 563.483 ns/op
Iteration  10: 564.398 ns/op
Iteration  11: 563.037 ns/op
Iteration  12: 562.944 ns/op
Iteration  13: 564.717 ns/op
Iteration  14: 563.829 ns/op
Iteration  15: 564.961 ns/op
Iteration  16: 565.607 ns/op
Iteration  17: 564.076 ns/op
Iteration  18: 568.052 ns/op
Iteration  19: 564.992 ns/op
Iteration  20: 565.123 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 971.747 ns/op
# Warmup Iteration   2: 610.264 ns/op
# Warmup Iteration   3: 559.564 ns/op
# Warmup Iteration   4: 574.006 ns/op
# Warmup Iteration   5: 567.838 ns/op
Iteration   1: 555.168 ns/op
Iteration   2: 557.273 ns/op
Iteration   3: 555.528 ns/op
Iteration   4: 558.253 ns/op
Iteration   5: 555.471 ns/op
Iteration   6: 555.614 ns/op
Iteration   7: 557.259 ns/op
Iteration   8: 554.199 ns/op
Iteration   9: 555.312 ns/op
Iteration  10: 557.232 ns/op
Iteration  11: 554.264 ns/op
Iteration  12: 555.617 ns/op
Iteration  13: 557.058 ns/op
Iteration  14: 557.037 ns/op
Iteration  15: 556.834 ns/op
Iteration  16: 555.875 ns/op
Iteration  17: 558.581 ns/op
Iteration  18: 555.444 ns/op
Iteration  19: 555.907 ns/op
Iteration  20: 557.324 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 984.818 ns/op
# Warmup Iteration   2: 621.171 ns/op
# Warmup Iteration   3: 568.637 ns/op
# Warmup Iteration   4: 583.927 ns/op
# Warmup Iteration   5: 577.604 ns/op
Iteration   1: 564.301 ns/op
Iteration   2: 567.508 ns/op
Iteration   3: 564.508 ns/op
Iteration   4: 564.427 ns/op
Iteration   5: 566.847 ns/op
Iteration   6: 563.520 ns/op
Iteration   7: 564.682 ns/op
Iteration   8: 561.894 ns/op
Iteration   9: 562.038 ns/op
Iteration  10: 563.134 ns/op
Iteration  11: 561.618 ns/op
Iteration  12: 562.049 ns/op
Iteration  13: 563.879 ns/op
Iteration  14: 562.322 ns/op
Iteration  15: 563.108 ns/op
Iteration  16: 562.036 ns/op
Iteration  17: 562.565 ns/op
Iteration  18: 564.178 ns/op
Iteration  19: 562.723 ns/op
Iteration  20: 562.922 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 974.534 ns/op
# Warmup Iteration   2: 606.266 ns/op
# Warmup Iteration   3: 559.129 ns/op
# Warmup Iteration   4: 573.793 ns/op
# Warmup Iteration   5: 568.090 ns/op
Iteration   1: 557.415 ns/op
Iteration   2: 554.094 ns/op
Iteration   3: 554.284 ns/op
Iteration   4: 556.660 ns/op
Iteration   5: 554.426 ns/op
Iteration   6: 553.888 ns/op
Iteration   7: 555.456 ns/op
Iteration   8: 552.783 ns/op
Iteration   9: 553.985 ns/op
Iteration  10: 552.748 ns/op
Iteration  11: 552.864 ns/op
Iteration  12: 558.382 ns/op
Iteration  13: 553.412 ns/op
Iteration  14: 554.502 ns/op
Iteration  15: 553.474 ns/op
Iteration  16: 554.247 ns/op
Iteration  17: 555.464 ns/op
Iteration  18: 557.313 ns/op
Iteration  19: 565.828 ns/op
Iteration  20: 561.244 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  559.545 ±(99.9%) 1.534 ns/op [Average]
  (min, avg, max) = (552.748, 559.545, 568.350), stdev = 4.523
  CI (99.9%): [558.011, 561.079] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  		
			  	

	 
 	

 

  
	
 	 	


 
 ,		
 

 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1029.998 ns/op
# Warmup Iteration   2: 645.011 ns/op
# Warmup Iteration   3: 587.814 ns/op
# Warmup Iteration   4: 603.101 ns/op
# Warmup Iteration   5: 596.505 ns/op
Iteration   1: 583.564 ns/op
Iteration   2: 586.494 ns/op
Iteration   3: 583.560 ns/op
Iteration   4: 583.676 ns/op
Iteration   5: 586.167 ns/op
Iteration   6: 583.390 ns/op
Iteration   7: 583.394 ns/op
Iteration   8: 582.705 ns/op
Iteration   9: 581.501 ns/op
Iteration  10: 581.603 ns/op
Iteration  11: 582.606 ns/op
Iteration  12: 582.378 ns/op
Iteration  13: 583.551 ns/op
Iteration  14: 582.794 ns/op
Iteration  15: 583.151 ns/op
Iteration  16: 587.050 ns/op
Iteration  17: 582.561 ns/op
Iteration  18: 583.090 ns/op
Iteration  19: 586.347 ns/op
Iteration  20: 584.344 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1039.542 ns/op
# Warmup Iteration   2: 638.080 ns/op
# Warmup Iteration   3: 578.829 ns/op
# Warmup Iteration   4: 593.978 ns/op
# Warmup Iteration   5: 587.867 ns/op
Iteration   1: 574.472 ns/op
Iteration   2: 576.518 ns/op
Iteration   3: 574.742 ns/op
Iteration   4: 574.251 ns/op
Iteration   5: 577.028 ns/op
Iteration   6: 574.243 ns/op
Iteration   7: 575.684 ns/op
Iteration   8: 572.309 ns/op
Iteration   9: 576.008 ns/op
Iteration  10: 575.235 ns/op
Iteration  11: 572.650 ns/op
Iteration  12: 573.892 ns/op
Iteration  13: 572.416 ns/op
Iteration  14: 574.208 ns/op
Iteration  15: 575.260 ns/op
Iteration  16: 573.629 ns/op
Iteration  17: 573.671 ns/op
Iteration  18: 575.316 ns/op
Iteration  19: 573.373 ns/op
Iteration  20: 575.178 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 984.882 ns/op
# Warmup Iteration   2: 609.282 ns/op
# Warmup Iteration   3: 566.709 ns/op
# Warmup Iteration   4: 582.317 ns/op
# Warmup Iteration   5: 577.132 ns/op
Iteration   1: 564.769 ns/op
Iteration   2: 561.933 ns/op
Iteration   3: 566.151 ns/op
Iteration   4: 566.282 ns/op
Iteration   5: 563.304 ns/op
Iteration   6: 565.076 ns/op
Iteration   7: 562.538 ns/op
Iteration   8: 561.115 ns/op
Iteration   9: 571.068 ns/op
Iteration  10: 560.954 ns/op
Iteration  11: 563.764 ns/op
Iteration  12: 561.890 ns/op
Iteration  13: 561.701 ns/op
Iteration  14: 563.463 ns/op
Iteration  15: 561.028 ns/op
Iteration  16: 564.841 ns/op
Iteration  17: 563.178 ns/op
Iteration  18: 561.607 ns/op
Iteration  19: 562.968 ns/op
Iteration  20: 561.085 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1003.251 ns/op
# Warmup Iteration   2: 628.628 ns/op
# Warmup Iteration   3: 579.738 ns/op
# Warmup Iteration   4: 593.919 ns/op
# Warmup Iteration   5: 587.728 ns/op
Iteration   1: 574.394 ns/op
Iteration   2: 579.533 ns/op
Iteration   3: 574.760 ns/op
Iteration   4: 577.211 ns/op
Iteration   5: 574.439 ns/op
Iteration   6: 573.936 ns/op
Iteration   7: 576.106 ns/op
Iteration   8: 572.303 ns/op
Iteration   9: 572.081 ns/op
Iteration  10: 573.365 ns/op
Iteration  11: 575.800 ns/op
Iteration  12: 575.864 ns/op
Iteration  13: 572.844 ns/op
Iteration  14: 572.545 ns/op
Iteration  15: 574.067 ns/op
Iteration  16: 572.764 ns/op
Iteration  17: 573.063 ns/op
Iteration  18: 575.939 ns/op
Iteration  19: 573.282 ns/op
Iteration  20: 577.150 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1028.544 ns/op
# Warmup Iteration   2: 630.521 ns/op
# Warmup Iteration   3: 570.267 ns/op
# Warmup Iteration   4: 584.888 ns/op
# Warmup Iteration   5: 579.116 ns/op
Iteration   1: 566.004 ns/op
Iteration   2: 568.959 ns/op
Iteration   3: 565.288 ns/op
Iteration   4: 567.468 ns/op
Iteration   5: 566.980 ns/op
Iteration   6: 568.086 ns/op
Iteration   7: 568.524 ns/op
Iteration   8: 563.765 ns/op
Iteration   9: 564.790 ns/op
Iteration  10: 563.907 ns/op
Iteration  11: 563.846 ns/op
Iteration  12: 566.191 ns/op
Iteration  13: 567.739 ns/op
Iteration  14: 566.222 ns/op
Iteration  15: 564.137 ns/op
Iteration  16: 564.167 ns/op
Iteration  17: 566.479 ns/op
Iteration  18: 564.291 ns/op
Iteration  19: 566.814 ns/op
Iteration  20: 565.761 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  572.436 ±(99.9%) 2.526 ns/op [Average]
  (min, avg, max) = (560.954, 572.436, 587.050), stdev = 7.447
  CI (99.9%): [569.910, 574.962] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                     (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   		
			  	

	 
 	

 

  
	
 	 	


 
 ,		
 

   avgt  100  559.545 ± 1.534  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   		
			  	

	 
 	

 

  
	
 	 	


 
 ,		
 

   avgt  100  572.436 ± 2.526  ns/op

Benchmark result is saved to split_precompiled_regex_45_92_Match.csv
