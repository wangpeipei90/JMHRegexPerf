# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 					  	    
	 ,		  	
  	 	
  
		
 
	
		  
		


	 
 		 	 	
	  
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1074.103 ns/op
# Warmup Iteration   2: 725.932 ns/op
# Warmup Iteration   3: 655.470 ns/op
# Warmup Iteration   4: 650.299 ns/op
# Warmup Iteration   5: 654.636 ns/op
Iteration   1: 658.349 ns/op
Iteration   2: 646.244 ns/op
Iteration   3: 643.122 ns/op
Iteration   4: 643.076 ns/op
Iteration   5: 643.703 ns/op
Iteration   6: 643.567 ns/op
Iteration   7: 645.878 ns/op
Iteration   8: 643.776 ns/op
Iteration   9: 641.326 ns/op
Iteration  10: 641.126 ns/op
Iteration  11: 641.273 ns/op
Iteration  12: 642.211 ns/op
Iteration  13: 641.642 ns/op
Iteration  14: 641.526 ns/op
Iteration  15: 642.338 ns/op
Iteration  16: 642.061 ns/op
Iteration  17: 644.188 ns/op
Iteration  18: 642.234 ns/op
Iteration  19: 641.969 ns/op
Iteration  20: 641.820 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1058.572 ns/op
# Warmup Iteration   2: 725.031 ns/op
# Warmup Iteration   3: 647.143 ns/op
# Warmup Iteration   4: 650.046 ns/op
# Warmup Iteration   5: 652.742 ns/op
Iteration   1: 662.677 ns/op
Iteration   2: 640.842 ns/op
Iteration   3: 642.037 ns/op
Iteration   4: 642.062 ns/op
Iteration   5: 642.076 ns/op
Iteration   6: 645.232 ns/op
Iteration   7: 641.826 ns/op
Iteration   8: 641.943 ns/op
Iteration   9: 639.738 ns/op
Iteration  10: 639.335 ns/op
Iteration  11: 640.797 ns/op
Iteration  12: 639.201 ns/op
Iteration  13: 639.746 ns/op
Iteration  14: 639.806 ns/op
Iteration  15: 640.068 ns/op
Iteration  16: 642.080 ns/op
Iteration  17: 640.225 ns/op
Iteration  18: 641.764 ns/op
Iteration  19: 642.998 ns/op
Iteration  20: 640.470 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1067.516 ns/op
# Warmup Iteration   2: 729.780 ns/op
# Warmup Iteration   3: 659.972 ns/op
# Warmup Iteration   4: 656.194 ns/op
# Warmup Iteration   5: 660.226 ns/op
Iteration   1: 664.423 ns/op
Iteration   2: 652.757 ns/op
Iteration   3: 648.999 ns/op
Iteration   4: 649.252 ns/op
Iteration   5: 648.589 ns/op
Iteration   6: 648.865 ns/op
Iteration   7: 650.697 ns/op
Iteration   8: 648.569 ns/op
Iteration   9: 647.172 ns/op
Iteration  10: 646.099 ns/op
Iteration  11: 645.976 ns/op
Iteration  12: 647.265 ns/op
Iteration  13: 645.822 ns/op
Iteration  14: 646.233 ns/op
Iteration  15: 646.028 ns/op
Iteration  16: 646.398 ns/op
Iteration  17: 653.322 ns/op
Iteration  18: 648.123 ns/op
Iteration  19: 646.958 ns/op
Iteration  20: 646.409 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1067.899 ns/op
# Warmup Iteration   2: 728.734 ns/op
# Warmup Iteration   3: 660.908 ns/op
# Warmup Iteration   4: 657.559 ns/op
# Warmup Iteration   5: 660.374 ns/op
Iteration   1: 664.799 ns/op
Iteration   2: 652.708 ns/op
Iteration   3: 649.434 ns/op
Iteration   4: 649.010 ns/op
Iteration   5: 648.905 ns/op
Iteration   6: 649.390 ns/op
Iteration   7: 653.648 ns/op
Iteration   8: 650.022 ns/op
Iteration   9: 647.556 ns/op
Iteration  10: 647.685 ns/op
Iteration  11: 647.845 ns/op
Iteration  12: 647.745 ns/op
Iteration  13: 649.378 ns/op
Iteration  14: 648.214 ns/op
Iteration  15: 650.265 ns/op
Iteration  16: 648.882 ns/op
Iteration  17: 648.416 ns/op
Iteration  18: 651.869 ns/op
Iteration  19: 649.852 ns/op
Iteration  20: 649.795 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1065.323 ns/op
# Warmup Iteration   2: 726.321 ns/op
# Warmup Iteration   3: 660.539 ns/op
# Warmup Iteration   4: 657.763 ns/op
# Warmup Iteration   5: 660.009 ns/op
Iteration   1: 663.829 ns/op
Iteration   2: 653.775 ns/op
Iteration   3: 649.837 ns/op
Iteration   4: 648.199 ns/op
Iteration   5: 647.715 ns/op
Iteration   6: 647.803 ns/op
Iteration   7: 650.929 ns/op
Iteration   8: 647.665 ns/op
Iteration   9: 646.340 ns/op
Iteration  10: 646.370 ns/op
Iteration  11: 646.299 ns/op
Iteration  12: 647.388 ns/op
Iteration  13: 646.686 ns/op
Iteration  14: 646.522 ns/op
Iteration  15: 646.642 ns/op
Iteration  16: 646.394 ns/op
Iteration  17: 649.171 ns/op
Iteration  18: 646.757 ns/op
Iteration  19: 647.075 ns/op
Iteration  20: 648.482 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  646.736 ±(99.9%) 1.770 ns/op [Average]
  (min, avg, max) = (639.201, 646.736, 664.799), stdev = 5.218
  CI (99.9%): [644.966, 648.506] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 					  	    
	 ,		  	
  	 	
  
		
 
	
		  
		


	 
 		 	 	
	  
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1132.770 ns/op
# Warmup Iteration   2: 758.305 ns/op
# Warmup Iteration   3: 677.491 ns/op
# Warmup Iteration   4: 674.755 ns/op
# Warmup Iteration   5: 678.209 ns/op
Iteration   1: 682.007 ns/op
Iteration   2: 670.604 ns/op
Iteration   3: 667.164 ns/op
Iteration   4: 666.444 ns/op
Iteration   5: 666.525 ns/op
Iteration   6: 667.000 ns/op
Iteration   7: 669.158 ns/op
Iteration   8: 674.556 ns/op
Iteration   9: 667.796 ns/op
Iteration  10: 664.676 ns/op
Iteration  11: 665.085 ns/op
Iteration  12: 664.654 ns/op
Iteration  13: 666.894 ns/op
Iteration  14: 665.316 ns/op
Iteration  15: 665.269 ns/op
Iteration  16: 666.002 ns/op
Iteration  17: 664.999 ns/op
Iteration  18: 668.808 ns/op
Iteration  19: 666.598 ns/op
Iteration  20: 666.516 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1134.245 ns/op
# Warmup Iteration   2: 747.749 ns/op
# Warmup Iteration   3: 664.081 ns/op
# Warmup Iteration   4: 661.360 ns/op
# Warmup Iteration   5: 663.495 ns/op
Iteration   1: 668.020 ns/op
Iteration   2: 655.931 ns/op
Iteration   3: 653.244 ns/op
Iteration   4: 652.413 ns/op
Iteration   5: 654.140 ns/op
Iteration   6: 652.269 ns/op
Iteration   7: 655.566 ns/op
Iteration   8: 660.711 ns/op
Iteration   9: 652.904 ns/op
Iteration  10: 650.789 ns/op
Iteration  11: 650.874 ns/op
Iteration  12: 654.609 ns/op
Iteration  13: 652.084 ns/op
Iteration  14: 653.461 ns/op
Iteration  15: 650.673 ns/op
Iteration  16: 649.904 ns/op
Iteration  17: 650.153 ns/op
Iteration  18: 651.241 ns/op
Iteration  19: 654.723 ns/op
Iteration  20: 652.604 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1081.715 ns/op
# Warmup Iteration   2: 732.774 ns/op
# Warmup Iteration   3: 662.471 ns/op
# Warmup Iteration   4: 661.513 ns/op
# Warmup Iteration   5: 664.610 ns/op
Iteration   1: 671.270 ns/op
Iteration   2: 652.607 ns/op
Iteration   3: 652.622 ns/op
Iteration   4: 652.001 ns/op
Iteration   5: 652.437 ns/op
Iteration   6: 655.712 ns/op
Iteration   7: 652.422 ns/op
Iteration   8: 652.558 ns/op
Iteration   9: 650.574 ns/op
Iteration  10: 650.665 ns/op
Iteration  11: 651.921 ns/op
Iteration  12: 650.717 ns/op
Iteration  13: 651.464 ns/op
Iteration  14: 651.943 ns/op
Iteration  15: 654.217 ns/op
Iteration  16: 653.676 ns/op
Iteration  17: 653.375 ns/op
Iteration  18: 653.335 ns/op
Iteration  19: 652.973 ns/op
Iteration  20: 656.691 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1125.466 ns/op
# Warmup Iteration   2: 765.201 ns/op
# Warmup Iteration   3: 688.954 ns/op
# Warmup Iteration   4: 685.366 ns/op
# Warmup Iteration   5: 688.809 ns/op
Iteration   1: 693.155 ns/op
Iteration   2: 679.897 ns/op
Iteration   3: 680.311 ns/op
Iteration   4: 676.996 ns/op
Iteration   5: 677.361 ns/op
Iteration   6: 676.688 ns/op
Iteration   7: 677.041 ns/op
Iteration   8: 678.167 ns/op
Iteration   9: 680.057 ns/op
Iteration  10: 675.863 ns/op
Iteration  11: 677.503 ns/op
Iteration  12: 675.909 ns/op
Iteration  13: 675.643 ns/op
Iteration  14: 676.148 ns/op
Iteration  15: 677.994 ns/op
Iteration  16: 676.224 ns/op
Iteration  17: 675.961 ns/op
Iteration  18: 676.070 ns/op
Iteration  19: 676.738 ns/op
Iteration  20: 683.983 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1134.831 ns/op
# Warmup Iteration   2: 755.420 ns/op
# Warmup Iteration   3: 675.241 ns/op
# Warmup Iteration   4: 672.014 ns/op
# Warmup Iteration   5: 675.415 ns/op
Iteration   1: 678.681 ns/op
Iteration   2: 667.216 ns/op
Iteration   3: 663.404 ns/op
Iteration   4: 663.046 ns/op
Iteration   5: 663.276 ns/op
Iteration   6: 663.470 ns/op
Iteration   7: 667.168 ns/op
Iteration   8: 664.168 ns/op
Iteration   9: 661.400 ns/op
Iteration  10: 661.805 ns/op
Iteration  11: 661.997 ns/op
Iteration  12: 662.546 ns/op
Iteration  13: 663.722 ns/op
Iteration  14: 661.850 ns/op
Iteration  15: 666.985 ns/op
Iteration  16: 663.053 ns/op
Iteration  17: 663.075 ns/op
Iteration  18: 663.176 ns/op
Iteration  19: 662.452 ns/op
Iteration  20: 663.074 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  663.588 ±(99.9%) 3.448 ns/op [Average]
  (min, avg, max) = (649.904, 663.588, 693.155), stdev = 10.166
  CI (99.9%): [660.141, 667.036] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  					  	    
	 ,		  	
  	 	
  
		
 
	
		  
		


	 
 		 	 	
	  
  avgt  100  646.736 ± 1.770  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  					  	    
	 ,		  	
  	 	
  
		
 
	
		  
		


	 
 		 	 	
	  
  avgt  100  663.588 ± 3.448  ns/op

Benchmark result is saved to split_precompiled_regex_82_136_Match.csv
