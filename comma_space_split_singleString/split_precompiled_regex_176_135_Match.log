# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	,


	 
 	


 

 	  		

 


  
 
		

 
 	 	 
	 
  	  
	 
  
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1111.457 ns/op
# Warmup Iteration   2: 793.262 ns/op
# Warmup Iteration   3: 704.555 ns/op
# Warmup Iteration   4: 701.181 ns/op
# Warmup Iteration   5: 703.684 ns/op
Iteration   1: 708.531 ns/op
Iteration   2: 694.188 ns/op
Iteration   3: 694.549 ns/op
Iteration   4: 692.759 ns/op
Iteration   5: 691.752 ns/op
Iteration   6: 696.191 ns/op
Iteration   7: 692.423 ns/op
Iteration   8: 692.424 ns/op
Iteration   9: 692.678 ns/op
Iteration  10: 696.653 ns/op
Iteration  11: 690.283 ns/op
Iteration  12: 690.489 ns/op
Iteration  13: 693.255 ns/op
Iteration  14: 691.929 ns/op
Iteration  15: 690.251 ns/op
Iteration  16: 690.388 ns/op
Iteration  17: 690.150 ns/op
Iteration  18: 690.129 ns/op
Iteration  19: 689.989 ns/op
Iteration  20: 690.549 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1111.304 ns/op
# Warmup Iteration   2: 788.993 ns/op
# Warmup Iteration   3: 704.858 ns/op
# Warmup Iteration   4: 701.069 ns/op
# Warmup Iteration   5: 704.440 ns/op
Iteration   1: 709.349 ns/op
Iteration   2: 693.693 ns/op
Iteration   3: 693.073 ns/op
Iteration   4: 693.192 ns/op
Iteration   5: 693.245 ns/op
Iteration   6: 696.651 ns/op
Iteration   7: 693.038 ns/op
Iteration   8: 692.984 ns/op
Iteration   9: 693.687 ns/op
Iteration  10: 692.233 ns/op
Iteration  11: 693.567 ns/op
Iteration  12: 691.019 ns/op
Iteration  13: 690.897 ns/op
Iteration  14: 692.222 ns/op
Iteration  15: 690.938 ns/op
Iteration  16: 696.027 ns/op
Iteration  17: 691.571 ns/op
Iteration  18: 691.907 ns/op
Iteration  19: 691.553 ns/op
Iteration  20: 691.865 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1112.919 ns/op
# Warmup Iteration   2: 791.460 ns/op
# Warmup Iteration   3: 705.706 ns/op
# Warmup Iteration   4: 701.637 ns/op
# Warmup Iteration   5: 705.645 ns/op
Iteration   1: 710.271 ns/op
Iteration   2: 693.272 ns/op
Iteration   3: 693.296 ns/op
Iteration   4: 693.263 ns/op
Iteration   5: 693.614 ns/op
Iteration   6: 698.257 ns/op
Iteration   7: 693.982 ns/op
Iteration   8: 694.350 ns/op
Iteration   9: 694.372 ns/op
Iteration  10: 692.933 ns/op
Iteration  11: 691.574 ns/op
Iteration  12: 692.006 ns/op
Iteration  13: 692.403 ns/op
Iteration  14: 693.175 ns/op
Iteration  15: 695.698 ns/op
Iteration  16: 692.300 ns/op
Iteration  17: 692.079 ns/op
Iteration  18: 691.842 ns/op
Iteration  19: 692.035 ns/op
Iteration  20: 691.845 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1116.461 ns/op
# Warmup Iteration   2: 795.500 ns/op
# Warmup Iteration   3: 707.277 ns/op
# Warmup Iteration   4: 703.229 ns/op
# Warmup Iteration   5: 706.596 ns/op
Iteration   1: 710.863 ns/op
Iteration   2: 694.798 ns/op
Iteration   3: 695.196 ns/op
Iteration   4: 695.660 ns/op
Iteration   5: 695.447 ns/op
Iteration   6: 698.552 ns/op
Iteration   7: 695.171 ns/op
Iteration   8: 695.528 ns/op
Iteration   9: 695.156 ns/op
Iteration  10: 695.249 ns/op
Iteration  11: 693.536 ns/op
Iteration  12: 698.642 ns/op
Iteration  13: 693.294 ns/op
Iteration  14: 693.199 ns/op
Iteration  15: 694.492 ns/op
Iteration  16: 693.086 ns/op
Iteration  17: 693.213 ns/op
Iteration  18: 693.052 ns/op
Iteration  19: 693.435 ns/op
Iteration  20: 697.445 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1111.482 ns/op
# Warmup Iteration   2: 790.521 ns/op
# Warmup Iteration   3: 703.406 ns/op
# Warmup Iteration   4: 697.872 ns/op
# Warmup Iteration   5: 703.917 ns/op
Iteration   1: 708.028 ns/op
Iteration   2: 693.960 ns/op
Iteration   3: 693.459 ns/op
Iteration   4: 694.276 ns/op
Iteration   5: 689.003 ns/op
Iteration   6: 693.841 ns/op
Iteration   7: 689.494 ns/op
Iteration   8: 688.800 ns/op
Iteration   9: 689.165 ns/op
Iteration  10: 686.934 ns/op
Iteration  11: 687.226 ns/op
Iteration  12: 686.835 ns/op
Iteration  13: 686.438 ns/op
Iteration  14: 687.940 ns/op
Iteration  15: 686.795 ns/op
Iteration  16: 686.723 ns/op
Iteration  17: 686.927 ns/op
Iteration  18: 690.674 ns/op
Iteration  19: 687.925 ns/op
Iteration  20: 687.702 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  693.320 ±(99.9%) 1.550 ns/op [Average]
  (min, avg, max) = (686.438, 693.320, 710.863), stdev = 4.569
  CI (99.9%): [691.770, 694.870] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	,


	 
 	


 

 	  		

 


  
 
		

 
 	 	 
	 
  	  
	 
  
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1177.180 ns/op
# Warmup Iteration   2: 833.560 ns/op
# Warmup Iteration   3: 736.477 ns/op
# Warmup Iteration   4: 733.313 ns/op
# Warmup Iteration   5: 736.645 ns/op
Iteration   1: 740.544 ns/op
Iteration   2: 724.908 ns/op
Iteration   3: 724.132 ns/op
Iteration   4: 723.986 ns/op
Iteration   5: 724.143 ns/op
Iteration   6: 724.436 ns/op
Iteration   7: 724.443 ns/op
Iteration   8: 727.333 ns/op
Iteration   9: 724.274 ns/op
Iteration  10: 722.119 ns/op
Iteration  11: 721.997 ns/op
Iteration  12: 727.431 ns/op
Iteration  13: 722.465 ns/op
Iteration  14: 722.226 ns/op
Iteration  15: 722.523 ns/op
Iteration  16: 722.581 ns/op
Iteration  17: 722.985 ns/op
Iteration  18: 723.123 ns/op
Iteration  19: 725.149 ns/op
Iteration  20: 724.556 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1123.386 ns/op
# Warmup Iteration   2: 759.788 ns/op
# Warmup Iteration   3: 682.884 ns/op
# Warmup Iteration   4: 679.233 ns/op
# Warmup Iteration   5: 686.968 ns/op
Iteration   1: 685.722 ns/op
Iteration   2: 670.984 ns/op
Iteration   3: 673.925 ns/op
Iteration   4: 675.787 ns/op
Iteration   5: 672.085 ns/op
Iteration   6: 670.502 ns/op
Iteration   7: 670.820 ns/op
Iteration   8: 674.462 ns/op
Iteration   9: 669.417 ns/op
Iteration  10: 669.668 ns/op
Iteration  11: 669.119 ns/op
Iteration  12: 669.498 ns/op
Iteration  13: 669.804 ns/op
Iteration  14: 672.453 ns/op
Iteration  15: 676.659 ns/op
Iteration  16: 669.537 ns/op
Iteration  17: 670.167 ns/op
Iteration  18: 670.596 ns/op
Iteration  19: 672.944 ns/op
Iteration  20: 669.756 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1136.303 ns/op
# Warmup Iteration   2: 763.430 ns/op
# Warmup Iteration   3: 680.713 ns/op
# Warmup Iteration   4: 676.490 ns/op
# Warmup Iteration   5: 680.202 ns/op
Iteration   1: 683.188 ns/op
Iteration   2: 668.906 ns/op
Iteration   3: 671.303 ns/op
Iteration   4: 668.501 ns/op
Iteration   5: 667.971 ns/op
Iteration   6: 668.136 ns/op
Iteration   7: 668.261 ns/op
Iteration   8: 671.758 ns/op
Iteration   9: 667.704 ns/op
Iteration  10: 666.507 ns/op
Iteration  11: 666.758 ns/op
Iteration  12: 666.584 ns/op
Iteration  13: 668.361 ns/op
Iteration  14: 667.446 ns/op
Iteration  15: 667.569 ns/op
Iteration  16: 667.733 ns/op
Iteration  17: 668.204 ns/op
Iteration  18: 667.000 ns/op
Iteration  19: 669.167 ns/op
Iteration  20: 667.027 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1189.462 ns/op
# Warmup Iteration   2: 823.285 ns/op
# Warmup Iteration   3: 724.115 ns/op
# Warmup Iteration   4: 720.523 ns/op
# Warmup Iteration   5: 723.861 ns/op
Iteration   1: 728.732 ns/op
Iteration   2: 712.568 ns/op
Iteration   3: 711.944 ns/op
Iteration   4: 711.694 ns/op
Iteration   5: 711.838 ns/op
Iteration   6: 714.998 ns/op
Iteration   7: 711.415 ns/op
Iteration   8: 711.508 ns/op
Iteration   9: 711.736 ns/op
Iteration  10: 711.567 ns/op
Iteration  11: 708.935 ns/op
Iteration  12: 709.233 ns/op
Iteration  13: 711.576 ns/op
Iteration  14: 717.052 ns/op
Iteration  15: 713.523 ns/op
Iteration  16: 709.518 ns/op
Iteration  17: 709.176 ns/op
Iteration  18: 710.363 ns/op
Iteration  19: 710.070 ns/op
Iteration  20: 713.795 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1138.741 ns/op
# Warmup Iteration   2: 825.226 ns/op
# Warmup Iteration   3: 739.040 ns/op
# Warmup Iteration   4: 736.708 ns/op
# Warmup Iteration   5: 734.593 ns/op
Iteration   1: 743.737 ns/op
Iteration   2: 722.432 ns/op
Iteration   3: 722.536 ns/op
Iteration   4: 722.528 ns/op
Iteration   5: 721.797 ns/op
Iteration   6: 721.690 ns/op
Iteration   7: 721.540 ns/op
Iteration   8: 724.599 ns/op
Iteration   9: 722.281 ns/op
Iteration  10: 720.541 ns/op
Iteration  11: 720.097 ns/op
Iteration  12: 720.003 ns/op
Iteration  13: 719.665 ns/op
Iteration  14: 719.931 ns/op
Iteration  15: 720.109 ns/op
Iteration  16: 720.100 ns/op
Iteration  17: 720.444 ns/op
Iteration  18: 722.239 ns/op
Iteration  19: 721.399 ns/op
Iteration  20: 720.934 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  700.172 ±(99.9%) 8.487 ns/op [Average]
  (min, avg, max) = (666.507, 700.172, 743.737), stdev = 25.023
  CI (99.9%): [691.685, 708.659] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	,


	 
 	


 

 	  		

 


  
 
		

 
 	 	 
	 
  	  
	 
  
		  avgt  100  693.320 ± 1.550  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	,


	 
 	


 

 	  		

 


  
 
		

 
 	 	 
	 
  	  
	 
  
		  avgt  100  700.172 ± 8.487  ns/op

Benchmark result is saved to split_precompiled_regex_176_135_Match.csv
