# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 		
	
 	,  




	

 		
	
 
	

 				

 		  	

    	 

		

		

 
 	
	 		
 
 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1253.429 ns/op
# Warmup Iteration   2: 935.659 ns/op
# Warmup Iteration   3: 791.474 ns/op
# Warmup Iteration   4: 794.265 ns/op
# Warmup Iteration   5: 797.489 ns/op
Iteration   1: 801.144 ns/op
Iteration   2: 805.542 ns/op
Iteration   3: 788.007 ns/op
Iteration   4: 787.328 ns/op
Iteration   5: 787.898 ns/op
Iteration   6: 787.787 ns/op
Iteration   7: 787.192 ns/op
Iteration   8: 788.379 ns/op
Iteration   9: 788.204 ns/op
Iteration  10: 788.358 ns/op
Iteration  11: 799.863 ns/op
Iteration  12: 786.513 ns/op
Iteration  13: 786.126 ns/op
Iteration  14: 785.981 ns/op
Iteration  15: 786.962 ns/op
Iteration  16: 786.478 ns/op
Iteration  17: 786.995 ns/op
Iteration  18: 786.288 ns/op
Iteration  19: 786.989 ns/op
Iteration  20: 786.767 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1219.182 ns/op
# Warmup Iteration   2: 851.864 ns/op
# Warmup Iteration   3: 743.521 ns/op
# Warmup Iteration   4: 747.138 ns/op
# Warmup Iteration   5: 746.832 ns/op
Iteration   1: 750.622 ns/op
Iteration   2: 746.505 ns/op
Iteration   3: 733.679 ns/op
Iteration   4: 733.504 ns/op
Iteration   5: 733.503 ns/op
Iteration   6: 733.874 ns/op
Iteration   7: 733.259 ns/op
Iteration   8: 734.084 ns/op
Iteration   9: 733.980 ns/op
Iteration  10: 737.299 ns/op
Iteration  11: 731.853 ns/op
Iteration  12: 731.717 ns/op
Iteration  13: 731.355 ns/op
Iteration  14: 733.252 ns/op
Iteration  15: 736.936 ns/op
Iteration  16: 733.250 ns/op
Iteration  17: 731.850 ns/op
Iteration  18: 731.503 ns/op
Iteration  19: 732.270 ns/op
Iteration  20: 731.645 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1115.586 ns/op
# Warmup Iteration   2: 795.244 ns/op
# Warmup Iteration   3: 710.461 ns/op
# Warmup Iteration   4: 705.666 ns/op
# Warmup Iteration   5: 709.178 ns/op
Iteration   1: 713.242 ns/op
Iteration   2: 703.446 ns/op
Iteration   3: 697.291 ns/op
Iteration   4: 697.558 ns/op
Iteration   5: 697.004 ns/op
Iteration   6: 696.980 ns/op
Iteration   7: 700.215 ns/op
Iteration   8: 696.506 ns/op
Iteration   9: 696.594 ns/op
Iteration  10: 694.808 ns/op
Iteration  11: 694.903 ns/op
Iteration  12: 694.931 ns/op
Iteration  13: 695.304 ns/op
Iteration  14: 695.459 ns/op
Iteration  15: 695.431 ns/op
Iteration  16: 698.280 ns/op
Iteration  17: 695.842 ns/op
Iteration  18: 698.126 ns/op
Iteration  19: 696.912 ns/op
Iteration  20: 695.427 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1211.243 ns/op
# Warmup Iteration   2: 864.202 ns/op
# Warmup Iteration   3: 740.675 ns/op
# Warmup Iteration   4: 755.199 ns/op
# Warmup Iteration   5: 750.082 ns/op
Iteration   1: 754.565 ns/op
Iteration   2: 737.690 ns/op
Iteration   3: 737.409 ns/op
Iteration   4: 737.239 ns/op
Iteration   5: 737.748 ns/op
Iteration   6: 737.070 ns/op
Iteration   7: 737.559 ns/op
Iteration   8: 744.202 ns/op
Iteration   9: 737.756 ns/op
Iteration  10: 737.819 ns/op
Iteration  11: 739.915 ns/op
Iteration  12: 736.401 ns/op
Iteration  13: 735.761 ns/op
Iteration  14: 738.340 ns/op
Iteration  15: 737.816 ns/op
Iteration  16: 737.414 ns/op
Iteration  17: 737.607 ns/op
Iteration  18: 735.813 ns/op
Iteration  19: 735.057 ns/op
Iteration  20: 737.680 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1167.425 ns/op
# Warmup Iteration   2: 806.922 ns/op
# Warmup Iteration   3: 711.132 ns/op
# Warmup Iteration   4: 707.427 ns/op
# Warmup Iteration   5: 711.456 ns/op
Iteration   1: 716.375 ns/op
Iteration   2: 699.417 ns/op
Iteration   3: 699.126 ns/op
Iteration   4: 699.664 ns/op
Iteration   5: 700.102 ns/op
Iteration   6: 698.763 ns/op
Iteration   7: 707.325 ns/op
Iteration   8: 699.773 ns/op
Iteration   9: 700.224 ns/op
Iteration  10: 697.637 ns/op
Iteration  11: 700.362 ns/op
Iteration  12: 698.625 ns/op
Iteration  13: 698.020 ns/op
Iteration  14: 699.380 ns/op
Iteration  15: 699.746 ns/op
Iteration  16: 699.821 ns/op
Iteration  17: 702.752 ns/op
Iteration  18: 698.216 ns/op
Iteration  19: 697.986 ns/op
Iteration  20: 698.112 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  732.213 Â±(99.9%) 11.426 ns/op [Average]
  (min, avg, max) = (694.808, 732.213, 805.542), stdev = 33.689
  CI (99.9%): [720.787, 743.638] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 		
	
 	,  




	

 		
	
 
	

 				

 		  	

    	 

		

		

 
 	
	 		
 
 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1234.643 ns/op
# Warmup Iteration   2: 902.001 ns/op
# Warmup Iteration   3: 765.103 ns/op
# Warmup Iteration   4: 767.537 ns/op
# Warmup Iteration   5: 788.756 ns/op
Iteration   1: 779.695 ns/op
Iteration   2: 760.930 ns/op
Iteration   3: 760.559 ns/op
Iteration   4: 760.600 ns/op
Iteration   5: 760.774 ns/op
Iteration   6: 760.445 ns/op
Iteration   7: 760.007 ns/op
Iteration   8: 760.525 ns/op
Iteration   9: 760.372 ns/op
Iteration  10: 760.710 ns/op
Iteration  11: 758.410 ns/op
Iteration  12: 757.995 ns/op
Iteration  13: 758.206 ns/op
Iteration  14: 757.977 ns/op
Iteration  15: 757.939 ns/op
Iteration  16: 758.137 ns/op
Iteration  17: 758.085 ns/op
Iteration  18: 758.111 ns/op
Iteration  19: 758.311 ns/op
Iteration  20: 758.620 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1232.749 ns/op
# Warmup Iteration   2: 895.726 ns/op
# Warmup Iteration   3: 766.415 ns/op
# Warmup Iteration   4: 767.946 ns/op
# Warmup Iteration   5: 789.226 ns/op
Iteration   1: 780.423 ns/op
Iteration   2: 762.828 ns/op
Iteration   3: 765.934 ns/op
Iteration   4: 761.882 ns/op
Iteration   5: 761.628 ns/op
Iteration   6: 762.390 ns/op
Iteration   7: 761.770 ns/op
Iteration   8: 762.000 ns/op
Iteration   9: 761.611 ns/op
Iteration  10: 761.985 ns/op
Iteration  11: 761.535 ns/op
Iteration  12: 759.674 ns/op
Iteration  13: 759.459 ns/op
Iteration  14: 762.471 ns/op
Iteration  15: 759.325 ns/op
Iteration  16: 759.902 ns/op
Iteration  17: 761.688 ns/op
Iteration  18: 762.912 ns/op
Iteration  19: 759.409 ns/op
Iteration  20: 760.722 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1190.309 ns/op
# Warmup Iteration   2: 825.204 ns/op
# Warmup Iteration   3: 725.712 ns/op
# Warmup Iteration   4: 721.878 ns/op
# Warmup Iteration   5: 725.571 ns/op
Iteration   1: 730.115 ns/op
Iteration   2: 714.107 ns/op
Iteration   3: 713.049 ns/op
Iteration   4: 713.087 ns/op
Iteration   5: 712.719 ns/op
Iteration   6: 712.626 ns/op
Iteration   7: 718.541 ns/op
Iteration   8: 713.094 ns/op
Iteration   9: 713.373 ns/op
Iteration  10: 711.390 ns/op
Iteration  11: 711.162 ns/op
Iteration  12: 711.853 ns/op
Iteration  13: 711.977 ns/op
Iteration  14: 711.702 ns/op
Iteration  15: 711.856 ns/op
Iteration  16: 715.508 ns/op
Iteration  17: 712.170 ns/op
Iteration  18: 712.012 ns/op
Iteration  19: 712.735 ns/op
Iteration  20: 712.874 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1197.671 ns/op
# Warmup Iteration   2: 847.423 ns/op
# Warmup Iteration   3: 731.481 ns/op
# Warmup Iteration   4: 746.024 ns/op
# Warmup Iteration   5: 740.023 ns/op
Iteration   1: 744.279 ns/op
Iteration   2: 727.779 ns/op
Iteration   3: 727.596 ns/op
Iteration   4: 727.389 ns/op
Iteration   5: 727.276 ns/op
Iteration   6: 728.339 ns/op
Iteration   7: 728.881 ns/op
Iteration   8: 727.923 ns/op
Iteration   9: 730.859 ns/op
Iteration  10: 724.856 ns/op
Iteration  11: 725.058 ns/op
Iteration  12: 724.380 ns/op
Iteration  13: 724.568 ns/op
Iteration  14: 725.303 ns/op
Iteration  15: 732.432 ns/op
Iteration  16: 725.135 ns/op
Iteration  17: 724.669 ns/op
Iteration  18: 726.687 ns/op
Iteration  19: 726.989 ns/op
Iteration  20: 725.565 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1179.355 ns/op
# Warmup Iteration   2: 820.109 ns/op
# Warmup Iteration   3: 722.060 ns/op
# Warmup Iteration   4: 718.511 ns/op
# Warmup Iteration   5: 722.490 ns/op
Iteration   1: 726.379 ns/op
Iteration   2: 711.081 ns/op
Iteration   3: 710.709 ns/op
Iteration   4: 710.734 ns/op
Iteration   5: 713.023 ns/op
Iteration   6: 713.878 ns/op
Iteration   7: 709.797 ns/op
Iteration   8: 713.297 ns/op
Iteration   9: 711.712 ns/op
Iteration  10: 710.274 ns/op
Iteration  11: 709.828 ns/op
Iteration  12: 708.969 ns/op
Iteration  13: 708.679 ns/op
Iteration  14: 708.582 ns/op
Iteration  15: 710.072 ns/op
Iteration  16: 708.134 ns/op
Iteration  17: 708.927 ns/op
Iteration  18: 708.568 ns/op
Iteration  19: 708.909 ns/op
Iteration  20: 709.022 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  735.084 Â±(99.9%) 7.717 ns/op [Average]
  (min, avg, max) = (708.134, 735.084, 780.423), stdev = 22.754
  CI (99.9%): [727.367, 742.801] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                         (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 		
	
 	,  




	

 		
	
 
	

 				

 		  	

    	 

		

		

 
 	
	 		
 
   avgt  100  732.213 Â± 11.426  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 		
	
 	,  




	

 		
	
 
	

 				

 		  	

    	 

		

		

 
 	
	 		
 
   avgt  100  735.084 Â±  7.717  ns/op

Benchmark result is saved to split_precompiled_regex_137_176_Match.csv
