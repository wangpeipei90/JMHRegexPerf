# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = ,	

  
 

 	 

	
	    
 	  

	  
			 			
 
	

		

	 


 		
	
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1045.166 ns/op
# Warmup Iteration   2: 699.361 ns/op
# Warmup Iteration   3: 621.240 ns/op
# Warmup Iteration   4: 620.413 ns/op
# Warmup Iteration   5: 631.163 ns/op
Iteration   1: 626.268 ns/op
Iteration   2: 612.454 ns/op
Iteration   3: 612.650 ns/op
Iteration   4: 612.463 ns/op
Iteration   5: 614.730 ns/op
Iteration   6: 612.508 ns/op
Iteration   7: 612.545 ns/op
Iteration   8: 613.435 ns/op
Iteration   9: 610.621 ns/op
Iteration  10: 612.074 ns/op
Iteration  11: 610.709 ns/op
Iteration  12: 611.725 ns/op
Iteration  13: 610.744 ns/op
Iteration  14: 611.141 ns/op
Iteration  15: 610.860 ns/op
Iteration  16: 612.827 ns/op
Iteration  17: 610.940 ns/op
Iteration  18: 611.552 ns/op
Iteration  19: 616.133 ns/op
Iteration  20: 613.318 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1073.950 ns/op
# Warmup Iteration   2: 742.423 ns/op
# Warmup Iteration   3: 672.053 ns/op
# Warmup Iteration   4: 669.386 ns/op
# Warmup Iteration   5: 671.673 ns/op
Iteration   1: 675.661 ns/op
Iteration   2: 662.250 ns/op
Iteration   3: 663.231 ns/op
Iteration   4: 659.741 ns/op
Iteration   5: 660.529 ns/op
Iteration   6: 660.398 ns/op
Iteration   7: 659.328 ns/op
Iteration   8: 663.377 ns/op
Iteration   9: 658.618 ns/op
Iteration  10: 658.486 ns/op
Iteration  11: 658.310 ns/op
Iteration  12: 658.357 ns/op
Iteration  13: 658.651 ns/op
Iteration  14: 659.862 ns/op
Iteration  15: 659.107 ns/op
Iteration  16: 658.681 ns/op
Iteration  17: 659.331 ns/op
Iteration  18: 658.757 ns/op
Iteration  19: 659.319 ns/op
Iteration  20: 661.986 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1034.299 ns/op
# Warmup Iteration   2: 691.203 ns/op
# Warmup Iteration   3: 621.147 ns/op
# Warmup Iteration   4: 624.612 ns/op
# Warmup Iteration   5: 640.707 ns/op
Iteration   1: 620.539 ns/op
Iteration   2: 615.617 ns/op
Iteration   3: 616.303 ns/op
Iteration   4: 618.864 ns/op
Iteration   5: 616.660 ns/op
Iteration   6: 616.426 ns/op
Iteration   7: 616.296 ns/op
Iteration   8: 621.863 ns/op
Iteration   9: 614.875 ns/op
Iteration  10: 614.385 ns/op
Iteration  11: 614.252 ns/op
Iteration  12: 616.333 ns/op
Iteration  13: 614.603 ns/op
Iteration  14: 615.398 ns/op
Iteration  15: 615.709 ns/op
Iteration  16: 617.335 ns/op
Iteration  17: 614.728 ns/op
Iteration  18: 615.227 ns/op
Iteration  19: 616.012 ns/op
Iteration  20: 618.941 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1033.089 ns/op
# Warmup Iteration   2: 692.428 ns/op
# Warmup Iteration   3: 621.430 ns/op
# Warmup Iteration   4: 623.096 ns/op
# Warmup Iteration   5: 637.652 ns/op
Iteration   1: 622.541 ns/op
Iteration   2: 616.627 ns/op
Iteration   3: 616.908 ns/op
Iteration   4: 616.417 ns/op
Iteration   5: 619.039 ns/op
Iteration   6: 616.689 ns/op
Iteration   7: 615.846 ns/op
Iteration   8: 618.095 ns/op
Iteration   9: 615.406 ns/op
Iteration  10: 614.895 ns/op
Iteration  11: 614.176 ns/op
Iteration  12: 615.727 ns/op
Iteration  13: 614.553 ns/op
Iteration  14: 614.235 ns/op
Iteration  15: 614.779 ns/op
Iteration  16: 615.913 ns/op
Iteration  17: 615.188 ns/op
Iteration  18: 614.153 ns/op
Iteration  19: 614.596 ns/op
Iteration  20: 615.891 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1034.513 ns/op
# Warmup Iteration   2: 695.126 ns/op
# Warmup Iteration   3: 622.862 ns/op
# Warmup Iteration   4: 625.242 ns/op
# Warmup Iteration   5: 639.239 ns/op
Iteration   1: 625.004 ns/op
Iteration   2: 618.281 ns/op
Iteration   3: 618.295 ns/op
Iteration   4: 618.011 ns/op
Iteration   5: 620.674 ns/op
Iteration   6: 618.224 ns/op
Iteration   7: 618.120 ns/op
Iteration   8: 621.043 ns/op
Iteration   9: 622.929 ns/op
Iteration  10: 616.393 ns/op
Iteration  11: 617.423 ns/op
Iteration  12: 617.389 ns/op
Iteration  13: 619.447 ns/op
Iteration  14: 617.278 ns/op
Iteration  15: 616.631 ns/op
Iteration  16: 617.323 ns/op
Iteration  17: 618.680 ns/op
Iteration  18: 617.934 ns/op
Iteration  19: 617.767 ns/op
Iteration  20: 617.627 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  625.002 ±(99.9%) 6.187 ns/op [Average]
  (min, avg, max) = (610.621, 625.002, 675.661), stdev = 18.242
  CI (99.9%): [618.815, 631.189] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = ,	

  
 

 	 

	
	    
 	  

	  
			 			
 
	

		

	 


 		
	
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1082.879 ns/op
# Warmup Iteration   2: 724.079 ns/op
# Warmup Iteration   3: 647.576 ns/op
# Warmup Iteration   4: 650.286 ns/op
# Warmup Iteration   5: 653.712 ns/op
Iteration   1: 659.647 ns/op
Iteration   2: 642.262 ns/op
Iteration   3: 642.226 ns/op
Iteration   4: 642.120 ns/op
Iteration   5: 645.068 ns/op
Iteration   6: 642.128 ns/op
Iteration   7: 642.428 ns/op
Iteration   8: 642.032 ns/op
Iteration   9: 640.618 ns/op
Iteration  10: 641.547 ns/op
Iteration  11: 640.818 ns/op
Iteration  12: 640.446 ns/op
Iteration  13: 640.882 ns/op
Iteration  14: 642.651 ns/op
Iteration  15: 641.430 ns/op
Iteration  16: 641.159 ns/op
Iteration  17: 646.051 ns/op
Iteration  18: 642.353 ns/op
Iteration  19: 641.153 ns/op
Iteration  20: 640.914 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1095.408 ns/op
# Warmup Iteration   2: 711.241 ns/op
# Warmup Iteration   3: 630.875 ns/op
# Warmup Iteration   4: 632.808 ns/op
# Warmup Iteration   5: 649.431 ns/op
Iteration   1: 631.706 ns/op
Iteration   2: 626.358 ns/op
Iteration   3: 625.966 ns/op
Iteration   4: 629.214 ns/op
Iteration   5: 625.908 ns/op
Iteration   6: 625.589 ns/op
Iteration   7: 625.757 ns/op
Iteration   8: 627.592 ns/op
Iteration   9: 623.725 ns/op
Iteration  10: 623.834 ns/op
Iteration  11: 624.066 ns/op
Iteration  12: 625.711 ns/op
Iteration  13: 623.698 ns/op
Iteration  14: 624.845 ns/op
Iteration  15: 624.505 ns/op
Iteration  16: 626.914 ns/op
Iteration  17: 626.458 ns/op
Iteration  18: 626.066 ns/op
Iteration  19: 626.743 ns/op
Iteration  20: 626.107 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1062.261 ns/op
# Warmup Iteration   2: 715.543 ns/op
# Warmup Iteration   3: 636.100 ns/op
# Warmup Iteration   4: 639.288 ns/op
# Warmup Iteration   5: 646.117 ns/op
Iteration   1: 649.395 ns/op
Iteration   2: 632.937 ns/op
Iteration   3: 631.316 ns/op
Iteration   4: 631.373 ns/op
Iteration   5: 634.171 ns/op
Iteration   6: 630.634 ns/op
Iteration   7: 630.760 ns/op
Iteration   8: 631.117 ns/op
Iteration   9: 635.962 ns/op
Iteration  10: 630.243 ns/op
Iteration  11: 630.954 ns/op
Iteration  12: 629.688 ns/op
Iteration  13: 631.734 ns/op
Iteration  14: 629.676 ns/op
Iteration  15: 630.181 ns/op
Iteration  16: 630.766 ns/op
Iteration  17: 633.259 ns/op
Iteration  18: 630.601 ns/op
Iteration  19: 630.155 ns/op
Iteration  20: 635.871 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1090.708 ns/op
# Warmup Iteration   2: 711.518 ns/op
# Warmup Iteration   3: 633.927 ns/op
# Warmup Iteration   4: 635.585 ns/op
# Warmup Iteration   5: 646.816 ns/op
Iteration   1: 636.367 ns/op
Iteration   2: 628.677 ns/op
Iteration   3: 628.137 ns/op
Iteration   4: 631.128 ns/op
Iteration   5: 628.493 ns/op
Iteration   6: 628.169 ns/op
Iteration   7: 628.229 ns/op
Iteration   8: 629.365 ns/op
Iteration   9: 625.637 ns/op
Iteration  10: 626.019 ns/op
Iteration  11: 627.094 ns/op
Iteration  12: 627.586 ns/op
Iteration  13: 626.795 ns/op
Iteration  14: 627.032 ns/op
Iteration  15: 626.652 ns/op
Iteration  16: 628.238 ns/op
Iteration  17: 627.461 ns/op
Iteration  18: 626.726 ns/op
Iteration  19: 627.501 ns/op
Iteration  20: 629.363 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1086.089 ns/op
# Warmup Iteration   2: 721.177 ns/op
# Warmup Iteration   3: 644.641 ns/op
# Warmup Iteration   4: 646.464 ns/op
# Warmup Iteration   5: 650.624 ns/op
Iteration   1: 658.746 ns/op
Iteration   2: 644.067 ns/op
Iteration   3: 639.028 ns/op
Iteration   4: 638.669 ns/op
Iteration   5: 641.699 ns/op
Iteration   6: 638.962 ns/op
Iteration   7: 638.712 ns/op
Iteration   8: 639.409 ns/op
Iteration   9: 638.789 ns/op
Iteration  10: 637.931 ns/op
Iteration  11: 638.188 ns/op
Iteration  12: 637.750 ns/op
Iteration  13: 638.369 ns/op
Iteration  14: 639.744 ns/op
Iteration  15: 638.091 ns/op
Iteration  16: 638.050 ns/op
Iteration  17: 639.179 ns/op
Iteration  18: 642.049 ns/op
Iteration  19: 639.037 ns/op
Iteration  20: 639.447 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  634.001 ±(99.9%) 2.556 ns/op [Average]
  (min, avg, max) = (623.698, 634.001, 659.647), stdev = 7.537
  CI (99.9%): [631.445, 636.557] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  ,	

  
 

 	 

	
	    
 	  

	  
			 			
 
	

		

	 


 		
	
  avgt  100  625.002 ± 6.187  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  ,	

  
 

 	 

	
	    
 	  

	  
			 			
 
	

		

	 


 		
	
  avgt  100  634.001 ± 2.556  ns/op

Benchmark result is saved to split_precompiled_regex_240_119_Match.csv
