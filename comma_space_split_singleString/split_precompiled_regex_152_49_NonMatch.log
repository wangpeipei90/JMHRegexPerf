# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = VRxdXfnNDbweB=<~X\Wjp,g#kUr`(pb)xu%@J4h+h:}*T)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1500.230 ns/op
# Warmup Iteration   2: 1315.798 ns/op
# Warmup Iteration   3: 1057.104 ns/op
# Warmup Iteration   4: 1059.832 ns/op
# Warmup Iteration   5: 1046.414 ns/op
Iteration   1: 1063.710 ns/op
Iteration   2: 1074.800 ns/op
Iteration   3: 1077.989 ns/op
Iteration   4: 1047.492 ns/op
Iteration   5: 1053.089 ns/op
Iteration   6: 1060.032 ns/op
Iteration   7: 1051.190 ns/op
Iteration   8: 1056.142 ns/op
Iteration   9: 1046.421 ns/op
Iteration  10: 1052.069 ns/op
Iteration  11: 1051.972 ns/op
Iteration  12: 1050.461 ns/op
Iteration  13: 1046.169 ns/op
Iteration  14: 1066.755 ns/op
Iteration  15: 1053.532 ns/op
Iteration  16: 1071.727 ns/op
Iteration  17: 1049.022 ns/op
Iteration  18: 1046.671 ns/op
Iteration  19: 1059.568 ns/op
Iteration  20: 1051.279 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1563.045 ns/op
# Warmup Iteration   2: 1414.015 ns/op
# Warmup Iteration   3: 1128.811 ns/op
# Warmup Iteration   4: 1118.821 ns/op
# Warmup Iteration   5: 1133.032 ns/op
Iteration   1: 1137.765 ns/op
Iteration   2: 1143.239 ns/op
Iteration   3: 1118.193 ns/op
Iteration   4: 1149.842 ns/op
Iteration   5: 1124.937 ns/op
Iteration   6: 1123.256 ns/op
Iteration   7: 1118.977 ns/op
Iteration   8: 1123.682 ns/op
Iteration   9: 1123.589 ns/op
Iteration  10: 1119.389 ns/op
Iteration  11: 1124.443 ns/op
Iteration  12: 1124.180 ns/op
Iteration  13: 1125.641 ns/op
Iteration  14: 1118.339 ns/op
Iteration  15: 1124.646 ns/op
Iteration  16: 1123.973 ns/op
Iteration  17: 1122.549 ns/op
Iteration  18: 1118.728 ns/op
Iteration  19: 1121.254 ns/op
Iteration  20: 1139.292 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1505.881 ns/op
# Warmup Iteration   2: 1342.378 ns/op
# Warmup Iteration   3: 1062.025 ns/op
# Warmup Iteration   4: 1056.041 ns/op
# Warmup Iteration   5: 1064.285 ns/op
Iteration   1: 1069.903 ns/op
Iteration   2: 1075.337 ns/op
Iteration   3: 1081.380 ns/op
Iteration   4: 1051.777 ns/op
Iteration   5: 1055.660 ns/op
Iteration   6: 1055.921 ns/op
Iteration   7: 1055.796 ns/op
Iteration   8: 1054.719 ns/op
Iteration   9: 1050.464 ns/op
Iteration  10: 1054.816 ns/op
Iteration  11: 1054.518 ns/op
Iteration  12: 1054.721 ns/op
Iteration  13: 1050.343 ns/op
Iteration  14: 1055.872 ns/op
Iteration  15: 1056.423 ns/op
Iteration  16: 1052.455 ns/op
Iteration  17: 1054.267 ns/op
Iteration  18: 1050.153 ns/op
Iteration  19: 1053.294 ns/op
Iteration  20: 1053.035 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1557.839 ns/op
# Warmup Iteration   2: 1404.334 ns/op
# Warmup Iteration   3: 1127.681 ns/op
# Warmup Iteration   4: 1117.048 ns/op
# Warmup Iteration   5: 1131.381 ns/op
Iteration   1: 1136.511 ns/op
Iteration   2: 1141.464 ns/op
Iteration   3: 1117.800 ns/op
Iteration   4: 1148.614 ns/op
Iteration   5: 1123.186 ns/op
Iteration   6: 1122.601 ns/op
Iteration   7: 1116.864 ns/op
Iteration   8: 1123.161 ns/op
Iteration   9: 1122.171 ns/op
Iteration  10: 1117.867 ns/op
Iteration  11: 1122.170 ns/op
Iteration  12: 1122.381 ns/op
Iteration  13: 1122.655 ns/op
Iteration  14: 1117.327 ns/op
Iteration  15: 1122.272 ns/op
Iteration  16: 1126.244 ns/op
Iteration  17: 1120.316 ns/op
Iteration  18: 1117.445 ns/op
Iteration  19: 1119.964 ns/op
Iteration  20: 1122.861 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1428.096 ns/op
# Warmup Iteration   2: 1199.825 ns/op
# Warmup Iteration   3: 984.343 ns/op
# Warmup Iteration   4: 987.422 ns/op
# Warmup Iteration   5: 991.382 ns/op
Iteration   1: 991.454 ns/op
Iteration   2: 981.222 ns/op
Iteration   3: 1002.329 ns/op
Iteration   4: 984.941 ns/op
Iteration   5: 984.677 ns/op
Iteration   6: 979.395 ns/op
Iteration   7: 974.431 ns/op
Iteration   8: 989.170 ns/op
Iteration   9: 981.254 ns/op
Iteration  10: 982.851 ns/op
Iteration  11: 985.014 ns/op
Iteration  12: 982.679 ns/op
Iteration  13: 973.797 ns/op
Iteration  14: 980.755 ns/op
Iteration  15: 975.480 ns/op
Iteration  16: 975.499 ns/op
Iteration  17: 975.845 ns/op
Iteration  18: 979.017 ns/op
Iteration  19: 973.648 ns/op
Iteration  20: 977.773 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  1069.120 ±(99.9%) 18.432 ns/op [Average]
  (min, avg, max) = (973.648, 1069.120, 1149.842), stdev = 54.346
  CI (99.9%): [1050.688, 1087.551] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = VRxdXfnNDbweB=<~X\Wjp,g#kUr`(pb)xu%@J4h+h:}*T)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1535.664 ns/op
# Warmup Iteration   2: 1318.627 ns/op
# Warmup Iteration   3: 1065.157 ns/op
# Warmup Iteration   4: 1066.720 ns/op
# Warmup Iteration   5: 1052.920 ns/op
Iteration   1: 1071.340 ns/op
Iteration   2: 1076.245 ns/op
Iteration   3: 1083.611 ns/op
Iteration   4: 1058.354 ns/op
Iteration   5: 1054.166 ns/op
Iteration   6: 1058.709 ns/op
Iteration   7: 1058.046 ns/op
Iteration   8: 1058.181 ns/op
Iteration   9: 1057.892 ns/op
Iteration  10: 1053.155 ns/op
Iteration  11: 1058.049 ns/op
Iteration  12: 1058.886 ns/op
Iteration  13: 1058.447 ns/op
Iteration  14: 1053.837 ns/op
Iteration  15: 1059.123 ns/op
Iteration  16: 1063.161 ns/op
Iteration  17: 1063.565 ns/op
Iteration  18: 1059.024 ns/op
Iteration  19: 1053.930 ns/op
Iteration  20: 1057.456 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1606.863 ns/op
# Warmup Iteration   2: 1411.286 ns/op
# Warmup Iteration   3: 1132.805 ns/op
# Warmup Iteration   4: 1119.856 ns/op
# Warmup Iteration   5: 1140.456 ns/op
Iteration   1: 1139.308 ns/op
Iteration   2: 1147.621 ns/op
Iteration   3: 1154.446 ns/op
Iteration   4: 1120.578 ns/op
Iteration   5: 1133.166 ns/op
Iteration   6: 1126.900 ns/op
Iteration   7: 1120.473 ns/op
Iteration   8: 1126.372 ns/op
Iteration   9: 1126.869 ns/op
Iteration  10: 1130.985 ns/op
Iteration  11: 1120.600 ns/op
Iteration  12: 1128.407 ns/op
Iteration  13: 1127.851 ns/op
Iteration  14: 1131.479 ns/op
Iteration  15: 1125.185 ns/op
Iteration  16: 1134.833 ns/op
Iteration  17: 1123.593 ns/op
Iteration  18: 1123.685 ns/op
Iteration  19: 1120.284 ns/op
Iteration  20: 1123.831 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1553.901 ns/op
# Warmup Iteration   2: 1314.584 ns/op
# Warmup Iteration   3: 1059.253 ns/op
# Warmup Iteration   4: 1062.495 ns/op
# Warmup Iteration   5: 1049.333 ns/op
Iteration   1: 1066.811 ns/op
Iteration   2: 1071.565 ns/op
Iteration   3: 1078.846 ns/op
Iteration   4: 1054.311 ns/op
Iteration   5: 1049.160 ns/op
Iteration   6: 1053.911 ns/op
Iteration   7: 1057.153 ns/op
Iteration   8: 1053.017 ns/op
Iteration   9: 1053.815 ns/op
Iteration  10: 1048.826 ns/op
Iteration  11: 1053.921 ns/op
Iteration  12: 1055.012 ns/op
Iteration  13: 1055.957 ns/op
Iteration  14: 1067.209 ns/op
Iteration  15: 1048.498 ns/op
Iteration  16: 1050.761 ns/op
Iteration  17: 1051.394 ns/op
Iteration  18: 1051.113 ns/op
Iteration  19: 1051.562 ns/op
Iteration  20: 1048.671 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1478.778 ns/op
# Warmup Iteration   2: 1209.730 ns/op
# Warmup Iteration   3: 987.899 ns/op
# Warmup Iteration   4: 991.084 ns/op
# Warmup Iteration   5: 994.047 ns/op
Iteration   1: 999.651 ns/op
Iteration   2: 978.096 ns/op
Iteration   3: 1005.935 ns/op
Iteration   4: 983.433 ns/op
Iteration   5: 984.280 ns/op
Iteration   6: 987.563 ns/op
Iteration   7: 983.846 ns/op
Iteration   8: 978.831 ns/op
Iteration   9: 986.258 ns/op
Iteration  10: 987.121 ns/op
Iteration  11: 983.923 ns/op
Iteration  12: 983.278 ns/op
Iteration  13: 984.843 ns/op
Iteration  14: 983.756 ns/op
Iteration  15: 978.714 ns/op
Iteration  16: 982.740 ns/op
Iteration  17: 981.999 ns/op
Iteration  18: 981.529 ns/op
Iteration  19: 982.158 ns/op
Iteration  20: 983.305 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1485.954 ns/op
# Warmup Iteration   2: 1208.510 ns/op
# Warmup Iteration   3: 985.167 ns/op
# Warmup Iteration   4: 989.786 ns/op
# Warmup Iteration   5: 1001.163 ns/op
Iteration   1: 1000.549 ns/op
Iteration   2: 975.885 ns/op
Iteration   3: 1004.306 ns/op
Iteration   4: 982.668 ns/op
Iteration   5: 981.158 ns/op
Iteration   6: 981.323 ns/op
Iteration   7: 981.163 ns/op
Iteration   8: 981.774 ns/op
Iteration   9: 975.965 ns/op
Iteration  10: 981.808 ns/op
Iteration  11: 981.935 ns/op
Iteration  12: 981.478 ns/op
Iteration  13: 982.796 ns/op
Iteration  14: 982.380 ns/op
Iteration  15: 975.963 ns/op
Iteration  16: 977.951 ns/op
Iteration  17: 977.925 ns/op
Iteration  18: 978.284 ns/op
Iteration  19: 980.010 ns/op
Iteration  20: 979.151 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  1042.689 ±(99.9%) 18.845 ns/op [Average]
  (min, avg, max) = (975.885, 1042.689, 1154.446), stdev = 55.565
  CI (99.9%): [1023.844, 1061.534] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                          (trimmed)  Mode  Cnt     Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  VRxdXfnNDbweB=<~X\Wjp,g#kUr`(pb)xu%@J4h+h:}*T  avgt  100  1069.120 ± 18.432  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  VRxdXfnNDbweB=<~X\Wjp,g#kUr`(pb)xu%@J4h+h:}*T  avgt  100  1042.689 ± 18.845  ns/op

Benchmark result is saved to split_precompiled_regex_152_49_NonMatch.csv
