# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	

			     
	 
	 	
	 	 
 	 


	 
	

  			
	 	 		 ,		 	
 	
	
   		 
	 	
				
   

 	
	  			



	 	

 		 
	 		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1254.821 ns/op
# Warmup Iteration   2: 937.765 ns/op
# Warmup Iteration   3: 790.853 ns/op
# Warmup Iteration   4: 792.908 ns/op
# Warmup Iteration   5: 795.728 ns/op
Iteration   1: 799.788 ns/op
Iteration   2: 805.983 ns/op
Iteration   3: 786.846 ns/op
Iteration   4: 786.545 ns/op
Iteration   5: 786.525 ns/op
Iteration   6: 786.496 ns/op
Iteration   7: 790.127 ns/op
Iteration   8: 786.877 ns/op
Iteration   9: 786.683 ns/op
Iteration  10: 787.048 ns/op
Iteration  11: 792.524 ns/op
Iteration  12: 785.101 ns/op
Iteration  13: 785.259 ns/op
Iteration  14: 785.034 ns/op
Iteration  15: 784.783 ns/op
Iteration  16: 785.296 ns/op
Iteration  17: 786.313 ns/op
Iteration  18: 785.566 ns/op
Iteration  19: 790.401 ns/op
Iteration  20: 788.206 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1243.861 ns/op
# Warmup Iteration   2: 914.470 ns/op
# Warmup Iteration   3: 780.951 ns/op
# Warmup Iteration   4: 781.926 ns/op
# Warmup Iteration   5: 784.345 ns/op
Iteration   1: 789.294 ns/op
Iteration   2: 794.407 ns/op
Iteration   3: 775.893 ns/op
Iteration   4: 775.508 ns/op
Iteration   5: 775.669 ns/op
Iteration   6: 775.894 ns/op
Iteration   7: 776.227 ns/op
Iteration   8: 776.218 ns/op
Iteration   9: 776.344 ns/op
Iteration  10: 776.459 ns/op
Iteration  11: 777.336 ns/op
Iteration  12: 786.969 ns/op
Iteration  13: 774.517 ns/op
Iteration  14: 773.939 ns/op
Iteration  15: 774.890 ns/op
Iteration  16: 774.198 ns/op
Iteration  17: 774.084 ns/op
Iteration  18: 774.359 ns/op
Iteration  19: 773.996 ns/op
Iteration  20: 775.235 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1341.158 ns/op
# Warmup Iteration   2: 1057.001 ns/op
# Warmup Iteration   3: 878.075 ns/op
# Warmup Iteration   4: 880.660 ns/op
# Warmup Iteration   5: 884.855 ns/op
Iteration   1: 889.256 ns/op
Iteration   2: 894.318 ns/op
Iteration   3: 874.677 ns/op
Iteration   4: 869.304 ns/op
Iteration   5: 873.599 ns/op
Iteration   6: 873.746 ns/op
Iteration   7: 873.767 ns/op
Iteration   8: 874.146 ns/op
Iteration   9: 874.868 ns/op
Iteration  10: 874.631 ns/op
Iteration  11: 876.231 ns/op
Iteration  12: 869.949 ns/op
Iteration  13: 877.576 ns/op
Iteration  14: 878.234 ns/op
Iteration  15: 871.784 ns/op
Iteration  16: 872.291 ns/op
Iteration  17: 872.137 ns/op
Iteration  18: 874.454 ns/op
Iteration  19: 874.803 ns/op
Iteration  20: 874.320 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1354.507 ns/op
# Warmup Iteration   2: 1096.553 ns/op
# Warmup Iteration   3: 905.476 ns/op
# Warmup Iteration   4: 907.774 ns/op
# Warmup Iteration   5: 911.892 ns/op
Iteration   1: 916.416 ns/op
Iteration   2: 922.081 ns/op
Iteration   3: 900.101 ns/op
Iteration   4: 908.632 ns/op
Iteration   5: 901.110 ns/op
Iteration   6: 900.191 ns/op
Iteration   7: 899.963 ns/op
Iteration   8: 899.932 ns/op
Iteration   9: 900.003 ns/op
Iteration  10: 896.646 ns/op
Iteration  11: 899.955 ns/op
Iteration  12: 900.090 ns/op
Iteration  13: 904.519 ns/op
Iteration  14: 898.579 ns/op
Iteration  15: 898.647 ns/op
Iteration  16: 899.201 ns/op
Iteration  17: 896.356 ns/op
Iteration  18: 898.244 ns/op
Iteration  19: 898.808 ns/op
Iteration  20: 899.029 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1346.015 ns/op
# Warmup Iteration   2: 1064.374 ns/op
# Warmup Iteration   3: 877.129 ns/op
# Warmup Iteration   4: 879.546 ns/op
# Warmup Iteration   5: 884.020 ns/op
Iteration   1: 888.203 ns/op
Iteration   2: 892.296 ns/op
Iteration   3: 873.304 ns/op
Iteration   4: 868.827 ns/op
Iteration   5: 872.085 ns/op
Iteration   6: 871.410 ns/op
Iteration   7: 872.554 ns/op
Iteration   8: 873.405 ns/op
Iteration   9: 873.709 ns/op
Iteration  10: 875.777 ns/op
Iteration  11: 877.535 ns/op
Iteration  12: 868.973 ns/op
Iteration  13: 873.415 ns/op
Iteration  14: 876.812 ns/op
Iteration  15: 870.939 ns/op
Iteration  16: 873.365 ns/op
Iteration  17: 872.923 ns/op
Iteration  18: 873.312 ns/op
Iteration  19: 871.434 ns/op
Iteration  20: 870.844 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  843.666 Â±(99.9%) 17.343 ns/op [Average]
  (min, avg, max) = (773.939, 843.666, 922.081), stdev = 51.136
  CI (99.9%): [826.323, 861.008] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	

			     
	 
	 	
	 	 
 	 


	 
	

  			
	 	 		 ,		 	
 	
	
   		 
	 	
				
   

 	
	  			



	 	

 		 
	 		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1248.058 ns/op
# Warmup Iteration   2: 928.216 ns/op
# Warmup Iteration   3: 791.481 ns/op
# Warmup Iteration   4: 793.046 ns/op
# Warmup Iteration   5: 796.751 ns/op
Iteration   1: 801.116 ns/op
Iteration   2: 805.024 ns/op
Iteration   3: 787.356 ns/op
Iteration   4: 787.484 ns/op
Iteration   5: 787.649 ns/op
Iteration   6: 787.277 ns/op
Iteration   7: 786.957 ns/op
Iteration   8: 787.799 ns/op
Iteration   9: 787.661 ns/op
Iteration  10: 787.456 ns/op
Iteration  11: 787.613 ns/op
Iteration  12: 785.665 ns/op
Iteration  13: 789.574 ns/op
Iteration  14: 784.584 ns/op
Iteration  15: 784.713 ns/op
Iteration  16: 784.977 ns/op
Iteration  17: 785.111 ns/op
Iteration  18: 785.235 ns/op
Iteration  19: 785.248 ns/op
Iteration  20: 785.190 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1344.588 ns/op
# Warmup Iteration   2: 1092.043 ns/op
# Warmup Iteration   3: 906.036 ns/op
# Warmup Iteration   4: 907.791 ns/op
# Warmup Iteration   5: 911.636 ns/op
Iteration   1: 916.957 ns/op
Iteration   2: 922.797 ns/op
Iteration   3: 897.439 ns/op
Iteration   4: 901.320 ns/op
Iteration   5: 900.591 ns/op
Iteration   6: 902.030 ns/op
Iteration   7: 902.284 ns/op
Iteration   8: 902.848 ns/op
Iteration   9: 901.999 ns/op
Iteration  10: 902.874 ns/op
Iteration  11: 898.018 ns/op
Iteration  12: 902.964 ns/op
Iteration  13: 903.357 ns/op
Iteration  14: 899.745 ns/op
Iteration  15: 899.425 ns/op
Iteration  16: 901.101 ns/op
Iteration  17: 901.658 ns/op
Iteration  18: 900.816 ns/op
Iteration  19: 900.887 ns/op
Iteration  20: 898.051 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1341.880 ns/op
# Warmup Iteration   2: 1073.857 ns/op
# Warmup Iteration   3: 894.167 ns/op
# Warmup Iteration   4: 897.432 ns/op
# Warmup Iteration   5: 901.030 ns/op
Iteration   1: 905.979 ns/op
Iteration   2: 910.944 ns/op
Iteration   3: 890.642 ns/op
Iteration   4: 886.146 ns/op
Iteration   5: 890.543 ns/op
Iteration   6: 890.307 ns/op
Iteration   7: 890.791 ns/op
Iteration   8: 890.357 ns/op
Iteration   9: 891.822 ns/op
Iteration  10: 891.128 ns/op
Iteration  11: 891.860 ns/op
Iteration  12: 895.007 ns/op
Iteration  13: 886.401 ns/op
Iteration  14: 892.453 ns/op
Iteration  15: 888.246 ns/op
Iteration  16: 887.972 ns/op
Iteration  17: 892.030 ns/op
Iteration  18: 887.904 ns/op
Iteration  19: 888.054 ns/op
Iteration  20: 889.134 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1242.851 ns/op
# Warmup Iteration   2: 939.321 ns/op
# Warmup Iteration   3: 792.219 ns/op
# Warmup Iteration   4: 794.817 ns/op
# Warmup Iteration   5: 797.907 ns/op
Iteration   1: 802.405 ns/op
Iteration   2: 807.126 ns/op
Iteration   3: 788.550 ns/op
Iteration   4: 788.932 ns/op
Iteration   5: 788.883 ns/op
Iteration   6: 788.730 ns/op
Iteration   7: 790.226 ns/op
Iteration   8: 788.811 ns/op
Iteration   9: 788.415 ns/op
Iteration  10: 788.794 ns/op
Iteration  11: 788.818 ns/op
Iteration  12: 787.898 ns/op
Iteration  13: 786.486 ns/op
Iteration  14: 786.164 ns/op
Iteration  15: 786.084 ns/op
Iteration  16: 786.269 ns/op
Iteration  17: 786.751 ns/op
Iteration  18: 786.873 ns/op
Iteration  19: 787.135 ns/op
Iteration  20: 786.332 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1319.704 ns/op
# Warmup Iteration   2: 1036.850 ns/op
# Warmup Iteration   3: 866.350 ns/op
# Warmup Iteration   4: 868.021 ns/op
# Warmup Iteration   5: 870.720 ns/op
Iteration   1: 876.171 ns/op
Iteration   2: 881.172 ns/op
Iteration   3: 861.599 ns/op
Iteration   4: 861.181 ns/op
Iteration   5: 861.152 ns/op
Iteration   6: 861.172 ns/op
Iteration   7: 856.793 ns/op
Iteration   8: 865.032 ns/op
Iteration   9: 861.605 ns/op
Iteration  10: 862.032 ns/op
Iteration  11: 862.262 ns/op
Iteration  12: 862.230 ns/op
Iteration  13: 865.888 ns/op
Iteration  14: 858.799 ns/op
Iteration  15: 859.786 ns/op
Iteration  16: 859.729 ns/op
Iteration  17: 859.288 ns/op
Iteration  18: 860.393 ns/op
Iteration  19: 857.202 ns/op
Iteration  20: 861.456 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  847.032 Â±(99.9%) 16.913 ns/op [Average]
  (min, avg, max) = (784.584, 847.032, 922.797), stdev = 49.867
  CI (99.9%): [830.119, 863.945] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                       (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 	

			     
	 
	 	
	 	 
 	 


	 
	

  			
	 	 		 ,		 	
 	
	
   		 
	 	
				
   

 	
	  			



	 	

 		 
	 		  avgt  100  843.666 Â± 17.343  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 	

			     
	 
	 	
	 	 
 	 


	 
	

  			
	 	 		 ,		 	
 	
	
   		 
	 	
				
   

 	
	  			



	 	

 		 
	 		  avgt  100  847.032 Â± 16.913  ns/op

Benchmark result is saved to split_precompiled_regex_66_222_Match.csv
