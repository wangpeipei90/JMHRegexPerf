# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	
	
 		


 
		



			
	
	

 
	


	 

 		 
 
		



    ,
		   
	
 	 
 		
 	 	    		 		 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1176.493 ns/op
# Warmup Iteration   2: 869.138 ns/op
# Warmup Iteration   3: 744.971 ns/op
# Warmup Iteration   4: 755.204 ns/op
# Warmup Iteration   5: 758.781 ns/op
Iteration   1: 759.413 ns/op
Iteration   2: 740.803 ns/op
Iteration   3: 741.121 ns/op
Iteration   4: 741.047 ns/op
Iteration   5: 741.703 ns/op
Iteration   6: 740.845 ns/op
Iteration   7: 741.044 ns/op
Iteration   8: 741.147 ns/op
Iteration   9: 740.890 ns/op
Iteration  10: 741.255 ns/op
Iteration  11: 744.732 ns/op
Iteration  12: 739.906 ns/op
Iteration  13: 738.454 ns/op
Iteration  14: 738.695 ns/op
Iteration  15: 738.582 ns/op
Iteration  16: 738.835 ns/op
Iteration  17: 738.947 ns/op
Iteration  18: 739.091 ns/op
Iteration  19: 738.655 ns/op
Iteration  20: 740.104 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1117.730 ns/op
# Warmup Iteration   2: 797.799 ns/op
# Warmup Iteration   3: 711.098 ns/op
# Warmup Iteration   4: 708.022 ns/op
# Warmup Iteration   5: 711.621 ns/op
Iteration   1: 716.051 ns/op
Iteration   2: 699.918 ns/op
Iteration   3: 699.426 ns/op
Iteration   4: 699.849 ns/op
Iteration   5: 699.589 ns/op
Iteration   6: 699.129 ns/op
Iteration   7: 703.044 ns/op
Iteration   8: 699.967 ns/op
Iteration   9: 699.283 ns/op
Iteration  10: 697.320 ns/op
Iteration  11: 705.640 ns/op
Iteration  12: 697.683 ns/op
Iteration  13: 698.079 ns/op
Iteration  14: 698.283 ns/op
Iteration  15: 698.207 ns/op
Iteration  16: 700.441 ns/op
Iteration  17: 699.043 ns/op
Iteration  18: 698.763 ns/op
Iteration  19: 698.692 ns/op
Iteration  20: 699.332 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1197.056 ns/op
# Warmup Iteration   2: 857.967 ns/op
# Warmup Iteration   3: 744.808 ns/op
# Warmup Iteration   4: 757.978 ns/op
# Warmup Iteration   5: 753.254 ns/op
Iteration   1: 757.757 ns/op
Iteration   2: 742.269 ns/op
Iteration   3: 740.822 ns/op
Iteration   4: 740.518 ns/op
Iteration   5: 740.763 ns/op
Iteration   6: 740.756 ns/op
Iteration   7: 740.646 ns/op
Iteration   8: 740.870 ns/op
Iteration   9: 741.003 ns/op
Iteration  10: 741.115 ns/op
Iteration  11: 738.975 ns/op
Iteration  12: 738.538 ns/op
Iteration  13: 738.419 ns/op
Iteration  14: 744.163 ns/op
Iteration  15: 739.414 ns/op
Iteration  16: 739.472 ns/op
Iteration  17: 738.224 ns/op
Iteration  18: 738.123 ns/op
Iteration  19: 738.071 ns/op
Iteration  20: 739.481 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1128.956 ns/op
# Warmup Iteration   2: 805.824 ns/op
# Warmup Iteration   3: 712.246 ns/op
# Warmup Iteration   4: 707.977 ns/op
# Warmup Iteration   5: 711.578 ns/op
Iteration   1: 716.099 ns/op
Iteration   2: 699.832 ns/op
Iteration   3: 699.843 ns/op
Iteration   4: 699.774 ns/op
Iteration   5: 699.904 ns/op
Iteration   6: 699.981 ns/op
Iteration   7: 702.876 ns/op
Iteration   8: 699.703 ns/op
Iteration   9: 699.333 ns/op
Iteration  10: 697.859 ns/op
Iteration  11: 697.641 ns/op
Iteration  12: 697.585 ns/op
Iteration  13: 698.646 ns/op
Iteration  14: 697.968 ns/op
Iteration  15: 697.770 ns/op
Iteration  16: 699.782 ns/op
Iteration  17: 697.602 ns/op
Iteration  18: 697.508 ns/op
Iteration  19: 697.690 ns/op
Iteration  20: 697.915 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1116.490 ns/op
# Warmup Iteration   2: 800.186 ns/op
# Warmup Iteration   3: 714.144 ns/op
# Warmup Iteration   4: 707.610 ns/op
# Warmup Iteration   5: 711.946 ns/op
Iteration   1: 715.517 ns/op
Iteration   2: 699.956 ns/op
Iteration   3: 701.880 ns/op
Iteration   4: 699.072 ns/op
Iteration   5: 701.656 ns/op
Iteration   6: 699.229 ns/op
Iteration   7: 705.981 ns/op
Iteration   8: 699.986 ns/op
Iteration   9: 700.234 ns/op
Iteration  10: 700.589 ns/op
Iteration  11: 697.225 ns/op
Iteration  12: 702.275 ns/op
Iteration  13: 697.643 ns/op
Iteration  14: 697.282 ns/op
Iteration  15: 696.479 ns/op
Iteration  16: 699.917 ns/op
Iteration  17: 698.371 ns/op
Iteration  18: 698.653 ns/op
Iteration  19: 698.607 ns/op
Iteration  20: 697.537 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  716.558 Â±(99.9%) 6.979 ns/op [Average]
  (min, avg, max) = (696.479, 716.558, 759.413), stdev = 20.577
  CI (99.9%): [709.579, 723.537] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	
	
 		


 
		



			
	
	

 
	


	 

 		 
 
		



    ,
		   
	
 	 
 		
 	 	    		 		 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1167.318 ns/op
# Warmup Iteration   2: 821.254 ns/op
# Warmup Iteration   3: 726.873 ns/op
# Warmup Iteration   4: 722.592 ns/op
# Warmup Iteration   5: 726.700 ns/op
Iteration   1: 730.897 ns/op
Iteration   2: 714.026 ns/op
Iteration   3: 713.997 ns/op
Iteration   4: 715.616 ns/op
Iteration   5: 716.549 ns/op
Iteration   6: 713.793 ns/op
Iteration   7: 716.146 ns/op
Iteration   8: 713.074 ns/op
Iteration   9: 713.547 ns/op
Iteration  10: 714.505 ns/op
Iteration  11: 712.934 ns/op
Iteration  12: 711.342 ns/op
Iteration  13: 711.391 ns/op
Iteration  14: 711.427 ns/op
Iteration  15: 711.668 ns/op
Iteration  16: 713.126 ns/op
Iteration  17: 711.579 ns/op
Iteration  18: 712.353 ns/op
Iteration  19: 712.188 ns/op
Iteration  20: 711.899 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1230.581 ns/op
# Warmup Iteration   2: 897.218 ns/op
# Warmup Iteration   3: 768.357 ns/op
# Warmup Iteration   4: 770.557 ns/op
# Warmup Iteration   5: 791.769 ns/op
Iteration   1: 783.069 ns/op
Iteration   2: 764.598 ns/op
Iteration   3: 765.061 ns/op
Iteration   4: 764.453 ns/op
Iteration   5: 764.286 ns/op
Iteration   6: 764.380 ns/op
Iteration   7: 764.070 ns/op
Iteration   8: 764.315 ns/op
Iteration   9: 764.003 ns/op
Iteration  10: 765.219 ns/op
Iteration  11: 763.841 ns/op
Iteration  12: 763.241 ns/op
Iteration  13: 763.104 ns/op
Iteration  14: 763.116 ns/op
Iteration  15: 762.987 ns/op
Iteration  16: 762.758 ns/op
Iteration  17: 762.512 ns/op
Iteration  18: 762.608 ns/op
Iteration  19: 762.538 ns/op
Iteration  20: 762.601 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1198.405 ns/op
# Warmup Iteration   2: 856.808 ns/op
# Warmup Iteration   3: 739.926 ns/op
# Warmup Iteration   4: 753.572 ns/op
# Warmup Iteration   5: 747.661 ns/op
Iteration   1: 751.861 ns/op
Iteration   2: 734.223 ns/op
Iteration   3: 734.918 ns/op
Iteration   4: 734.651 ns/op
Iteration   5: 734.633 ns/op
Iteration   6: 734.451 ns/op
Iteration   7: 735.286 ns/op
Iteration   8: 738.252 ns/op
Iteration   9: 734.875 ns/op
Iteration  10: 735.188 ns/op
Iteration  11: 733.993 ns/op
Iteration  12: 732.494 ns/op
Iteration  13: 733.052 ns/op
Iteration  14: 739.937 ns/op
Iteration  15: 733.385 ns/op
Iteration  16: 733.281 ns/op
Iteration  17: 733.698 ns/op
Iteration  18: 734.395 ns/op
Iteration  19: 733.484 ns/op
Iteration  20: 733.383 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1139.914 ns/op
# Warmup Iteration   2: 808.364 ns/op
# Warmup Iteration   3: 724.527 ns/op
# Warmup Iteration   4: 720.799 ns/op
# Warmup Iteration   5: 724.488 ns/op
Iteration   1: 728.136 ns/op
Iteration   2: 715.885 ns/op
Iteration   3: 712.176 ns/op
Iteration   4: 711.427 ns/op
Iteration   5: 711.849 ns/op
Iteration   6: 715.118 ns/op
Iteration   7: 712.311 ns/op
Iteration   8: 712.836 ns/op
Iteration   9: 718.913 ns/op
Iteration  10: 710.416 ns/op
Iteration  11: 710.723 ns/op
Iteration  12: 710.925 ns/op
Iteration  13: 710.637 ns/op
Iteration  14: 710.443 ns/op
Iteration  15: 711.917 ns/op
Iteration  16: 711.085 ns/op
Iteration  17: 711.048 ns/op
Iteration  18: 711.170 ns/op
Iteration  19: 711.895 ns/op
Iteration  20: 711.732 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1218.737 ns/op
# Warmup Iteration   2: 889.024 ns/op
# Warmup Iteration   3: 764.817 ns/op
# Warmup Iteration   4: 773.390 ns/op
# Warmup Iteration   5: 780.670 ns/op
Iteration   1: 778.522 ns/op
Iteration   2: 760.808 ns/op
Iteration   3: 760.558 ns/op
Iteration   4: 760.166 ns/op
Iteration   5: 760.567 ns/op
Iteration   6: 760.336 ns/op
Iteration   7: 761.520 ns/op
Iteration   8: 760.866 ns/op
Iteration   9: 763.186 ns/op
Iteration  10: 762.094 ns/op
Iteration  11: 759.504 ns/op
Iteration  12: 761.862 ns/op
Iteration  13: 760.827 ns/op
Iteration  14: 760.344 ns/op
Iteration  15: 760.272 ns/op
Iteration  16: 760.352 ns/op
Iteration  17: 759.876 ns/op
Iteration  18: 761.531 ns/op
Iteration  19: 759.439 ns/op
Iteration  20: 759.315 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  737.768 Â±(99.9%) 7.701 ns/op [Average]
  (min, avg, max) = (710.416, 737.768, 783.069), stdev = 22.706
  CI (99.9%): [730.068, 745.469] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                   (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	
	
 		


 
		



			
	
	

 
	


	 

 		 
 
		



    ,
		   
	
 	 
 		
 	 	    		 		 	  avgt  100  716.558 Â± 6.979  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	
	
 		


 
		



			
	
	

 
	


	 

 		 
 
		



    ,
		   
	
 	 
 		
 	 	    		 		 	  avgt  100  737.768 Â± 7.701  ns/op

Benchmark result is saved to split_precompiled_regex_214_170_Match.csv
