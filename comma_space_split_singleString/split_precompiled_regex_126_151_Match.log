# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

	
		   
,		
 



		
	   					 	  
	 	
		



	
	  
 
	 



	 			 
	
	 	
  	 
 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1144.899 ns/op
# Warmup Iteration   2: 835.596 ns/op
# Warmup Iteration   3: 730.954 ns/op
# Warmup Iteration   4: 744.180 ns/op
# Warmup Iteration   5: 740.251 ns/op
Iteration   1: 744.822 ns/op
Iteration   2: 727.875 ns/op
Iteration   3: 727.604 ns/op
Iteration   4: 727.333 ns/op
Iteration   5: 727.796 ns/op
Iteration   6: 727.729 ns/op
Iteration   7: 727.563 ns/op
Iteration   8: 728.178 ns/op
Iteration   9: 730.203 ns/op
Iteration  10: 727.391 ns/op
Iteration  11: 724.986 ns/op
Iteration  12: 724.928 ns/op
Iteration  13: 724.520 ns/op
Iteration  14: 730.499 ns/op
Iteration  15: 724.540 ns/op
Iteration  16: 725.350 ns/op
Iteration  17: 728.117 ns/op
Iteration  18: 725.218 ns/op
Iteration  19: 725.329 ns/op
Iteration  20: 725.993 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1140.119 ns/op
# Warmup Iteration   2: 828.331 ns/op
# Warmup Iteration   3: 725.287 ns/op
# Warmup Iteration   4: 738.257 ns/op
# Warmup Iteration   5: 732.975 ns/op
Iteration   1: 737.290 ns/op
Iteration   2: 721.644 ns/op
Iteration   3: 720.870 ns/op
Iteration   4: 720.882 ns/op
Iteration   5: 720.617 ns/op
Iteration   6: 720.809 ns/op
Iteration   7: 721.105 ns/op
Iteration   8: 720.700 ns/op
Iteration   9: 721.124 ns/op
Iteration  10: 720.882 ns/op
Iteration  11: 719.674 ns/op
Iteration  12: 718.334 ns/op
Iteration  13: 718.363 ns/op
Iteration  14: 718.348 ns/op
Iteration  15: 718.379 ns/op
Iteration  16: 718.432 ns/op
Iteration  17: 718.527 ns/op
Iteration  18: 719.436 ns/op
Iteration  19: 719.232 ns/op
Iteration  20: 719.079 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1140.641 ns/op
# Warmup Iteration   2: 770.371 ns/op
# Warmup Iteration   3: 679.500 ns/op
# Warmup Iteration   4: 675.073 ns/op
# Warmup Iteration   5: 677.654 ns/op
Iteration   1: 681.215 ns/op
Iteration   2: 666.738 ns/op
Iteration   3: 669.449 ns/op
Iteration   4: 666.848 ns/op
Iteration   5: 666.942 ns/op
Iteration   6: 666.299 ns/op
Iteration   7: 666.595 ns/op
Iteration   8: 666.289 ns/op
Iteration   9: 666.717 ns/op
Iteration  10: 665.444 ns/op
Iteration  11: 663.782 ns/op
Iteration  12: 663.698 ns/op
Iteration  13: 664.010 ns/op
Iteration  14: 664.564 ns/op
Iteration  15: 664.614 ns/op
Iteration  16: 668.996 ns/op
Iteration  17: 665.282 ns/op
Iteration  18: 666.234 ns/op
Iteration  19: 666.495 ns/op
Iteration  20: 666.493 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1140.997 ns/op
# Warmup Iteration   2: 770.025 ns/op
# Warmup Iteration   3: 687.592 ns/op
# Warmup Iteration   4: 683.389 ns/op
# Warmup Iteration   5: 687.071 ns/op
Iteration   1: 697.108 ns/op
Iteration   2: 676.174 ns/op
Iteration   3: 675.107 ns/op
Iteration   4: 678.774 ns/op
Iteration   5: 675.788 ns/op
Iteration   6: 675.350 ns/op
Iteration   7: 675.436 ns/op
Iteration   8: 675.417 ns/op
Iteration   9: 675.549 ns/op
Iteration  10: 674.155 ns/op
Iteration  11: 675.616 ns/op
Iteration  12: 673.858 ns/op
Iteration  13: 673.797 ns/op
Iteration  14: 673.966 ns/op
Iteration  15: 673.832 ns/op
Iteration  16: 673.295 ns/op
Iteration  17: 672.948 ns/op
Iteration  18: 674.640 ns/op
Iteration  19: 673.380 ns/op
Iteration  20: 672.933 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1115.542 ns/op
# Warmup Iteration   2: 775.990 ns/op
# Warmup Iteration   3: 695.434 ns/op
# Warmup Iteration   4: 689.197 ns/op
# Warmup Iteration   5: 692.578 ns/op
Iteration   1: 696.350 ns/op
Iteration   2: 683.754 ns/op
Iteration   3: 680.434 ns/op
Iteration   4: 680.356 ns/op
Iteration   5: 685.706 ns/op
Iteration   6: 682.328 ns/op
Iteration   7: 681.210 ns/op
Iteration   8: 681.127 ns/op
Iteration   9: 681.272 ns/op
Iteration  10: 681.808 ns/op
Iteration  11: 679.383 ns/op
Iteration  12: 680.434 ns/op
Iteration  13: 678.379 ns/op
Iteration  14: 680.451 ns/op
Iteration  15: 681.121 ns/op
Iteration  16: 679.236 ns/op
Iteration  17: 678.566 ns/op
Iteration  18: 678.600 ns/op
Iteration  19: 680.103 ns/op
Iteration  20: 679.024 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  694.532 ±(99.9%) 8.575 ns/op [Average]
  (min, avg, max) = (663.698, 694.532, 744.822), stdev = 25.283
  CI (99.9%): [685.957, 703.107] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

	
		   
,		
 



		
	   					 	  
	 	
		



	
	  
 
	 



	 			 
	
	 	
  	 
 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1211.216 ns/op
# Warmup Iteration   2: 872.196 ns/op
# Warmup Iteration   3: 743.048 ns/op
# Warmup Iteration   4: 757.874 ns/op
# Warmup Iteration   5: 751.933 ns/op
Iteration   1: 756.742 ns/op
Iteration   2: 739.731 ns/op
Iteration   3: 740.543 ns/op
Iteration   4: 740.355 ns/op
Iteration   5: 740.263 ns/op
Iteration   6: 739.555 ns/op
Iteration   7: 739.666 ns/op
Iteration   8: 739.825 ns/op
Iteration   9: 739.673 ns/op
Iteration  10: 743.823 ns/op
Iteration  11: 741.836 ns/op
Iteration  12: 737.228 ns/op
Iteration  13: 738.223 ns/op
Iteration  14: 737.091 ns/op
Iteration  15: 737.655 ns/op
Iteration  16: 738.791 ns/op
Iteration  17: 737.360 ns/op
Iteration  18: 737.737 ns/op
Iteration  19: 737.740 ns/op
Iteration  20: 737.481 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1200.284 ns/op
# Warmup Iteration   2: 875.748 ns/op
# Warmup Iteration   3: 758.964 ns/op
# Warmup Iteration   4: 773.656 ns/op
# Warmup Iteration   5: 768.811 ns/op
Iteration   1: 773.020 ns/op
Iteration   2: 755.868 ns/op
Iteration   3: 755.550 ns/op
Iteration   4: 755.212 ns/op
Iteration   5: 755.521 ns/op
Iteration   6: 754.970 ns/op
Iteration   7: 755.695 ns/op
Iteration   8: 761.390 ns/op
Iteration   9: 755.389 ns/op
Iteration  10: 756.177 ns/op
Iteration  11: 754.735 ns/op
Iteration  12: 753.513 ns/op
Iteration  13: 753.795 ns/op
Iteration  14: 753.460 ns/op
Iteration  15: 753.385 ns/op
Iteration  16: 753.410 ns/op
Iteration  17: 753.385 ns/op
Iteration  18: 753.144 ns/op
Iteration  19: 754.992 ns/op
Iteration  20: 753.833 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1161.400 ns/op
# Warmup Iteration   2: 806.971 ns/op
# Warmup Iteration   3: 720.469 ns/op
# Warmup Iteration   4: 716.624 ns/op
# Warmup Iteration   5: 720.065 ns/op
Iteration   1: 723.853 ns/op
Iteration   2: 710.899 ns/op
Iteration   3: 708.287 ns/op
Iteration   4: 707.753 ns/op
Iteration   5: 710.591 ns/op
Iteration   6: 707.532 ns/op
Iteration   7: 707.629 ns/op
Iteration   8: 706.859 ns/op
Iteration   9: 708.010 ns/op
Iteration  10: 705.834 ns/op
Iteration  11: 705.743 ns/op
Iteration  12: 707.072 ns/op
Iteration  13: 705.272 ns/op
Iteration  14: 707.072 ns/op
Iteration  15: 706.174 ns/op
Iteration  16: 706.092 ns/op
Iteration  17: 706.539 ns/op
Iteration  18: 706.267 ns/op
Iteration  19: 705.035 ns/op
Iteration  20: 715.848 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1193.810 ns/op
# Warmup Iteration   2: 856.423 ns/op
# Warmup Iteration   3: 744.502 ns/op
# Warmup Iteration   4: 757.516 ns/op
# Warmup Iteration   5: 751.770 ns/op
Iteration   1: 756.178 ns/op
Iteration   2: 738.876 ns/op
Iteration   3: 738.989 ns/op
Iteration   4: 739.198 ns/op
Iteration   5: 739.231 ns/op
Iteration   6: 738.958 ns/op
Iteration   7: 738.850 ns/op
Iteration   8: 738.959 ns/op
Iteration   9: 738.818 ns/op
Iteration  10: 739.740 ns/op
Iteration  11: 740.229 ns/op
Iteration  12: 739.049 ns/op
Iteration  13: 738.424 ns/op
Iteration  14: 738.158 ns/op
Iteration  15: 743.552 ns/op
Iteration  16: 739.110 ns/op
Iteration  17: 740.259 ns/op
Iteration  18: 740.478 ns/op
Iteration  19: 738.235 ns/op
Iteration  20: 739.093 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1166.025 ns/op
# Warmup Iteration   2: 859.732 ns/op
# Warmup Iteration   3: 755.154 ns/op
# Warmup Iteration   4: 770.307 ns/op
# Warmup Iteration   5: 764.254 ns/op
Iteration   1: 769.293 ns/op
Iteration   2: 751.482 ns/op
Iteration   3: 751.248 ns/op
Iteration   4: 752.097 ns/op
Iteration   5: 752.016 ns/op
Iteration   6: 759.813 ns/op
Iteration   7: 753.061 ns/op
Iteration   8: 752.421 ns/op
Iteration   9: 751.582 ns/op
Iteration  10: 751.986 ns/op
Iteration  11: 750.100 ns/op
Iteration  12: 750.087 ns/op
Iteration  13: 749.946 ns/op
Iteration  14: 749.717 ns/op
Iteration  15: 749.331 ns/op
Iteration  16: 749.999 ns/op
Iteration  17: 753.048 ns/op
Iteration  18: 750.208 ns/op
Iteration  19: 749.775 ns/op
Iteration  20: 751.289 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  739.390 ±(99.9%) 5.883 ns/op [Average]
  (min, avg, max) = (705.035, 739.390, 773.020), stdev = 17.346
  CI (99.9%): [733.507, 745.273] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	

	
		   
,		
 



		
	   					 	  
	 	
		



	
	  
 
	 



	 			 
	
	 	
  	 
   avgt  100  694.532 ± 8.575  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	

	
		   
,		
 



		
	   					 	  
	 	
		



	
	  
 
	 



	 			 
	
	 	
  	 
   avgt  100  739.390 ± 5.883  ns/op

Benchmark result is saved to split_precompiled_regex_126_151_Match.csv
