# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		 
	 		
	

  	

	 

	
   
 						  

	 	   	 		 		  		
	 	 

  
 ,		
 
	     )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1104.404 ns/op
# Warmup Iteration   2: 789.433 ns/op
# Warmup Iteration   3: 702.873 ns/op
# Warmup Iteration   4: 694.415 ns/op
# Warmup Iteration   5: 698.807 ns/op
Iteration   1: 703.351 ns/op
Iteration   2: 686.805 ns/op
Iteration   3: 686.981 ns/op
Iteration   4: 687.134 ns/op
Iteration   5: 689.848 ns/op
Iteration   6: 686.736 ns/op
Iteration   7: 686.527 ns/op
Iteration   8: 686.669 ns/op
Iteration   9: 686.938 ns/op
Iteration  10: 685.605 ns/op
Iteration  11: 685.642 ns/op
Iteration  12: 685.489 ns/op
Iteration  13: 686.450 ns/op
Iteration  14: 685.476 ns/op
Iteration  15: 685.574 ns/op
Iteration  16: 685.285 ns/op
Iteration  17: 685.717 ns/op
Iteration  18: 685.585 ns/op
Iteration  19: 688.429 ns/op
Iteration  20: 686.306 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1100.624 ns/op
# Warmup Iteration   2: 760.394 ns/op
# Warmup Iteration   3: 680.139 ns/op
# Warmup Iteration   4: 676.669 ns/op
# Warmup Iteration   5: 678.806 ns/op
Iteration   1: 682.705 ns/op
Iteration   2: 667.099 ns/op
Iteration   3: 671.969 ns/op
Iteration   4: 667.804 ns/op
Iteration   5: 667.791 ns/op
Iteration   6: 668.041 ns/op
Iteration   7: 667.635 ns/op
Iteration   8: 669.183 ns/op
Iteration   9: 667.921 ns/op
Iteration  10: 667.016 ns/op
Iteration  11: 666.696 ns/op
Iteration  12: 665.119 ns/op
Iteration  13: 665.062 ns/op
Iteration  14: 665.420 ns/op
Iteration  15: 665.285 ns/op
Iteration  16: 666.670 ns/op
Iteration  17: 665.505 ns/op
Iteration  18: 670.408 ns/op
Iteration  19: 665.701 ns/op
Iteration  20: 666.323 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1097.318 ns/op
# Warmup Iteration   2: 757.952 ns/op
# Warmup Iteration   3: 679.405 ns/op
# Warmup Iteration   4: 676.048 ns/op
# Warmup Iteration   5: 679.115 ns/op
Iteration   1: 683.674 ns/op
Iteration   2: 668.090 ns/op
Iteration   3: 671.092 ns/op
Iteration   4: 668.717 ns/op
Iteration   5: 668.079 ns/op
Iteration   6: 668.291 ns/op
Iteration   7: 667.838 ns/op
Iteration   8: 667.483 ns/op
Iteration   9: 667.752 ns/op
Iteration  10: 667.205 ns/op
Iteration  11: 665.733 ns/op
Iteration  12: 666.160 ns/op
Iteration  13: 666.544 ns/op
Iteration  14: 666.553 ns/op
Iteration  15: 666.701 ns/op
Iteration  16: 669.503 ns/op
Iteration  17: 666.284 ns/op
Iteration  18: 665.921 ns/op
Iteration  19: 666.690 ns/op
Iteration  20: 667.185 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1179.665 ns/op
# Warmup Iteration   2: 803.182 ns/op
# Warmup Iteration   3: 708.858 ns/op
# Warmup Iteration   4: 701.067 ns/op
# Warmup Iteration   5: 706.687 ns/op
Iteration   1: 707.980 ns/op
Iteration   2: 694.856 ns/op
Iteration   3: 696.959 ns/op
Iteration   4: 697.154 ns/op
Iteration   5: 693.367 ns/op
Iteration   6: 700.076 ns/op
Iteration   7: 698.878 ns/op
Iteration   8: 695.563 ns/op
Iteration   9: 699.029 ns/op
Iteration  10: 690.596 ns/op
Iteration  11: 690.524 ns/op
Iteration  12: 690.250 ns/op
Iteration  13: 690.362 ns/op
Iteration  14: 690.277 ns/op
Iteration  15: 692.063 ns/op
Iteration  16: 690.232 ns/op
Iteration  17: 689.632 ns/op
Iteration  18: 690.095 ns/op
Iteration  19: 691.536 ns/op
Iteration  20: 690.904 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1136.634 ns/op
# Warmup Iteration   2: 793.466 ns/op
# Warmup Iteration   3: 699.483 ns/op
# Warmup Iteration   4: 695.393 ns/op
# Warmup Iteration   5: 698.866 ns/op
Iteration   1: 703.549 ns/op
Iteration   2: 687.118 ns/op
Iteration   3: 687.645 ns/op
Iteration   4: 687.757 ns/op
Iteration   5: 689.533 ns/op
Iteration   6: 687.004 ns/op
Iteration   7: 686.612 ns/op
Iteration   8: 687.030 ns/op
Iteration   9: 687.812 ns/op
Iteration  10: 688.474 ns/op
Iteration  11: 686.124 ns/op
Iteration  12: 686.068 ns/op
Iteration  13: 687.904 ns/op
Iteration  14: 685.792 ns/op
Iteration  15: 684.451 ns/op
Iteration  16: 684.258 ns/op
Iteration  17: 684.470 ns/op
Iteration  18: 684.566 ns/op
Iteration  19: 684.619 ns/op
Iteration  20: 685.419 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  680.979 ±(99.9%) 3.923 ns/op [Average]
  (min, avg, max) = (665.062, 680.979, 707.980), stdev = 11.566
  CI (99.9%): [677.057, 684.902] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		 
	 		
	

  	

	 

	
   
 						  

	 	   	 		 		  		
	 	 

  
 ,		
 
	     )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1110.670 ns/op
# Warmup Iteration   2: 772.129 ns/op
# Warmup Iteration   3: 700.667 ns/op
# Warmup Iteration   4: 694.319 ns/op
# Warmup Iteration   5: 698.162 ns/op
Iteration   1: 702.500 ns/op
Iteration   2: 686.987 ns/op
Iteration   3: 689.855 ns/op
Iteration   4: 686.366 ns/op
Iteration   5: 686.343 ns/op
Iteration   6: 686.140 ns/op
Iteration   7: 686.449 ns/op
Iteration   8: 686.208 ns/op
Iteration   9: 685.855 ns/op
Iteration  10: 688.969 ns/op
Iteration  11: 684.363 ns/op
Iteration  12: 692.448 ns/op
Iteration  13: 689.455 ns/op
Iteration  14: 685.365 ns/op
Iteration  15: 685.229 ns/op
Iteration  16: 686.807 ns/op
Iteration  17: 700.300 ns/op
Iteration  18: 684.738 ns/op
Iteration  19: 684.470 ns/op
Iteration  20: 684.034 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1175.118 ns/op
# Warmup Iteration   2: 812.884 ns/op
# Warmup Iteration   3: 719.977 ns/op
# Warmup Iteration   4: 710.300 ns/op
# Warmup Iteration   5: 713.996 ns/op
Iteration   1: 717.048 ns/op
Iteration   2: 702.280 ns/op
Iteration   3: 702.787 ns/op
Iteration   4: 702.913 ns/op
Iteration   5: 706.042 ns/op
Iteration   6: 701.623 ns/op
Iteration   7: 701.393 ns/op
Iteration   8: 706.730 ns/op
Iteration   9: 701.929 ns/op
Iteration  10: 700.089 ns/op
Iteration  11: 700.675 ns/op
Iteration  12: 700.553 ns/op
Iteration  13: 703.067 ns/op
Iteration  14: 700.828 ns/op
Iteration  15: 700.218 ns/op
Iteration  16: 700.443 ns/op
Iteration  17: 701.189 ns/op
Iteration  18: 699.991 ns/op
Iteration  19: 700.768 ns/op
Iteration  20: 700.068 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1139.182 ns/op
# Warmup Iteration   2: 807.388 ns/op
# Warmup Iteration   3: 721.320 ns/op
# Warmup Iteration   4: 716.321 ns/op
# Warmup Iteration   5: 720.114 ns/op
Iteration   1: 725.126 ns/op
Iteration   2: 708.462 ns/op
Iteration   3: 708.398 ns/op
Iteration   4: 708.691 ns/op
Iteration   5: 708.588 ns/op
Iteration   6: 717.256 ns/op
Iteration   7: 709.888 ns/op
Iteration   8: 708.120 ns/op
Iteration   9: 708.095 ns/op
Iteration  10: 708.469 ns/op
Iteration  11: 705.197 ns/op
Iteration  12: 705.930 ns/op
Iteration  13: 706.124 ns/op
Iteration  14: 707.956 ns/op
Iteration  15: 706.742 ns/op
Iteration  16: 712.087 ns/op
Iteration  17: 718.601 ns/op
Iteration  18: 711.721 ns/op
Iteration  19: 707.699 ns/op
Iteration  20: 710.768 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1184.308 ns/op
# Warmup Iteration   2: 814.158 ns/op
# Warmup Iteration   3: 709.086 ns/op
# Warmup Iteration   4: 705.629 ns/op
# Warmup Iteration   5: 709.489 ns/op
Iteration   1: 714.523 ns/op
Iteration   2: 697.168 ns/op
Iteration   3: 696.710 ns/op
Iteration   4: 696.318 ns/op
Iteration   5: 699.760 ns/op
Iteration   6: 696.606 ns/op
Iteration   7: 696.403 ns/op
Iteration   8: 696.692 ns/op
Iteration   9: 696.719 ns/op
Iteration  10: 696.505 ns/op
Iteration  11: 700.286 ns/op
Iteration  12: 696.221 ns/op
Iteration  13: 694.833 ns/op
Iteration  14: 694.498 ns/op
Iteration  15: 695.794 ns/op
Iteration  16: 694.788 ns/op
Iteration  17: 694.984 ns/op
Iteration  18: 695.205 ns/op
Iteration  19: 697.107 ns/op
Iteration  20: 694.782 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1163.620 ns/op
# Warmup Iteration   2: 825.086 ns/op
# Warmup Iteration   3: 733.812 ns/op
# Warmup Iteration   4: 726.880 ns/op
# Warmup Iteration   5: 731.181 ns/op
Iteration   1: 736.342 ns/op
Iteration   2: 718.868 ns/op
Iteration   3: 717.652 ns/op
Iteration   4: 717.532 ns/op
Iteration   5: 717.407 ns/op
Iteration   6: 717.252 ns/op
Iteration   7: 723.624 ns/op
Iteration   8: 720.173 ns/op
Iteration   9: 718.876 ns/op
Iteration  10: 714.896 ns/op
Iteration  11: 714.806 ns/op
Iteration  12: 716.596 ns/op
Iteration  13: 718.289 ns/op
Iteration  14: 717.919 ns/op
Iteration  15: 719.303 ns/op
Iteration  16: 719.220 ns/op
Iteration  17: 720.361 ns/op
Iteration  18: 716.645 ns/op
Iteration  19: 740.474 ns/op
Iteration  20: 718.964 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  703.685 ±(99.9%) 4.091 ns/op [Average]
  (min, avg, max) = (684.034, 703.685, 740.474), stdev = 12.061
  CI (99.9%): [699.595, 707.776] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		 
	 		
	

  	

	 

	
   
 						  

	 	   	 		 		  		
	 	 

  
 ,		
 
	       avgt  100  680.979 ± 3.923  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		 
	 		
	

  	

	 

	
   
 						  

	 	   	 		 		  		
	 	 

  
 ,		
 
	       avgt  100  703.685 ± 4.091  ns/op

Benchmark result is saved to split_precompiled_regex_151_152_Match.csv
