# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		
 	
	   
	
 	 
	 
 
 	

	
,
	 	   	
	
	 	 
  
		 	   

 			
   	 
		
		  		 		


  
	
  
	 


	 

 	 	
	
	
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1238.842 ns/op
# Warmup Iteration   2: 914.343 ns/op
# Warmup Iteration   3: 766.156 ns/op
# Warmup Iteration   4: 769.595 ns/op
# Warmup Iteration   5: 772.606 ns/op
Iteration   1: 776.188 ns/op
Iteration   2: 781.636 ns/op
Iteration   3: 763.274 ns/op
Iteration   4: 763.265 ns/op
Iteration   5: 762.576 ns/op
Iteration   6: 762.731 ns/op
Iteration   7: 762.576 ns/op
Iteration   8: 766.075 ns/op
Iteration   9: 763.015 ns/op
Iteration  10: 763.226 ns/op
Iteration  11: 761.202 ns/op
Iteration  12: 761.045 ns/op
Iteration  13: 760.788 ns/op
Iteration  14: 760.775 ns/op
Iteration  15: 760.888 ns/op
Iteration  16: 761.004 ns/op
Iteration  17: 761.587 ns/op
Iteration  18: 761.212 ns/op
Iteration  19: 761.311 ns/op
Iteration  20: 761.329 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1231.325 ns/op
# Warmup Iteration   2: 894.063 ns/op
# Warmup Iteration   3: 765.547 ns/op
# Warmup Iteration   4: 768.236 ns/op
# Warmup Iteration   5: 771.934 ns/op
Iteration   1: 778.227 ns/op
Iteration   2: 777.125 ns/op
Iteration   3: 762.315 ns/op
Iteration   4: 762.638 ns/op
Iteration   5: 765.234 ns/op
Iteration   6: 762.150 ns/op
Iteration   7: 761.659 ns/op
Iteration   8: 761.555 ns/op
Iteration   9: 761.157 ns/op
Iteration  10: 762.318 ns/op
Iteration  11: 759.289 ns/op
Iteration  12: 759.098 ns/op
Iteration  13: 758.977 ns/op
Iteration  14: 758.998 ns/op
Iteration  15: 758.862 ns/op
Iteration  16: 758.836 ns/op
Iteration  17: 759.407 ns/op
Iteration  18: 759.379 ns/op
Iteration  19: 759.423 ns/op
Iteration  20: 761.292 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1228.348 ns/op
# Warmup Iteration   2: 904.745 ns/op
# Warmup Iteration   3: 766.498 ns/op
# Warmup Iteration   4: 769.167 ns/op
# Warmup Iteration   5: 772.739 ns/op
Iteration   1: 777.096 ns/op
Iteration   2: 779.440 ns/op
Iteration   3: 763.579 ns/op
Iteration   4: 763.020 ns/op
Iteration   5: 762.644 ns/op
Iteration   6: 766.485 ns/op
Iteration   7: 771.236 ns/op
Iteration   8: 763.656 ns/op
Iteration   9: 763.303 ns/op
Iteration  10: 762.993 ns/op
Iteration  11: 760.323 ns/op
Iteration  12: 760.114 ns/op
Iteration  13: 759.960 ns/op
Iteration  14: 760.120 ns/op
Iteration  15: 759.806 ns/op
Iteration  16: 759.878 ns/op
Iteration  17: 759.924 ns/op
Iteration  18: 760.102 ns/op
Iteration  19: 760.264 ns/op
Iteration  20: 760.320 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1227.883 ns/op
# Warmup Iteration   2: 894.679 ns/op
# Warmup Iteration   3: 764.256 ns/op
# Warmup Iteration   4: 767.709 ns/op
# Warmup Iteration   5: 769.858 ns/op
Iteration   1: 776.904 ns/op
Iteration   2: 776.464 ns/op
Iteration   3: 761.086 ns/op
Iteration   4: 760.417 ns/op
Iteration   5: 764.893 ns/op
Iteration   6: 760.728 ns/op
Iteration   7: 761.553 ns/op
Iteration   8: 760.823 ns/op
Iteration   9: 761.353 ns/op
Iteration  10: 761.435 ns/op
Iteration  11: 759.108 ns/op
Iteration  12: 758.748 ns/op
Iteration  13: 759.121 ns/op
Iteration  14: 758.366 ns/op
Iteration  15: 758.567 ns/op
Iteration  16: 758.671 ns/op
Iteration  17: 758.793 ns/op
Iteration  18: 760.553 ns/op
Iteration  19: 758.876 ns/op
Iteration  20: 759.805 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1232.238 ns/op
# Warmup Iteration   2: 896.612 ns/op
# Warmup Iteration   3: 766.322 ns/op
# Warmup Iteration   4: 773.557 ns/op
# Warmup Iteration   5: 773.276 ns/op
Iteration   1: 776.899 ns/op
Iteration   2: 781.019 ns/op
Iteration   3: 765.932 ns/op
Iteration   4: 763.286 ns/op
Iteration   5: 765.610 ns/op
Iteration   6: 771.373 ns/op
Iteration   7: 763.211 ns/op
Iteration   8: 763.111 ns/op
Iteration   9: 767.319 ns/op
Iteration  10: 763.681 ns/op
Iteration  11: 766.123 ns/op
Iteration  12: 762.421 ns/op
Iteration  13: 766.395 ns/op
Iteration  14: 761.653 ns/op
Iteration  15: 762.088 ns/op
Iteration  16: 762.128 ns/op
Iteration  17: 761.390 ns/op
Iteration  18: 763.406 ns/op
Iteration  19: 761.657 ns/op
Iteration  20: 763.632 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  763.465 Â±(99.9%) 1.861 ns/op [Average]
  (min, avg, max) = (758.366, 763.465, 781.636), stdev = 5.488
  CI (99.9%): [761.604, 765.326] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		
 	
	   
	
 	 
	 
 
 	

	
,
	 	   	
	
	 	 
  
		 	   

 			
   	 
		
		  		 		


  
	
  
	 


	 

 	 	
	
	
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1241.236 ns/op
# Warmup Iteration   2: 924.491 ns/op
# Warmup Iteration   3: 787.534 ns/op
# Warmup Iteration   4: 789.348 ns/op
# Warmup Iteration   5: 792.864 ns/op
Iteration   1: 796.552 ns/op
Iteration   2: 802.092 ns/op
Iteration   3: 783.861 ns/op
Iteration   4: 783.638 ns/op
Iteration   5: 783.231 ns/op
Iteration   6: 783.669 ns/op
Iteration   7: 783.682 ns/op
Iteration   8: 783.556 ns/op
Iteration   9: 784.012 ns/op
Iteration  10: 783.365 ns/op
Iteration  11: 790.932 ns/op
Iteration  12: 781.279 ns/op
Iteration  13: 780.921 ns/op
Iteration  14: 781.028 ns/op
Iteration  15: 781.282 ns/op
Iteration  16: 781.585 ns/op
Iteration  17: 784.378 ns/op
Iteration  18: 781.187 ns/op
Iteration  19: 781.988 ns/op
Iteration  20: 781.947 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1237.028 ns/op
# Warmup Iteration   2: 918.127 ns/op
# Warmup Iteration   3: 786.719 ns/op
# Warmup Iteration   4: 789.126 ns/op
# Warmup Iteration   5: 793.069 ns/op
Iteration   1: 798.362 ns/op
Iteration   2: 799.817 ns/op
Iteration   3: 784.268 ns/op
Iteration   4: 783.117 ns/op
Iteration   5: 783.338 ns/op
Iteration   6: 783.758 ns/op
Iteration   7: 786.745 ns/op
Iteration   8: 782.766 ns/op
Iteration   9: 783.780 ns/op
Iteration  10: 783.299 ns/op
Iteration  11: 783.878 ns/op
Iteration  12: 780.899 ns/op
Iteration  13: 780.589 ns/op
Iteration  14: 780.275 ns/op
Iteration  15: 790.953 ns/op
Iteration  16: 783.726 ns/op
Iteration  17: 782.071 ns/op
Iteration  18: 781.423 ns/op
Iteration  19: 782.085 ns/op
Iteration  20: 781.981 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1232.980 ns/op
# Warmup Iteration   2: 922.992 ns/op
# Warmup Iteration   3: 791.359 ns/op
# Warmup Iteration   4: 794.791 ns/op
# Warmup Iteration   5: 796.691 ns/op
Iteration   1: 802.161 ns/op
Iteration   2: 806.167 ns/op
Iteration   3: 789.288 ns/op
Iteration   4: 787.568 ns/op
Iteration   5: 787.977 ns/op
Iteration   6: 787.665 ns/op
Iteration   7: 787.579 ns/op
Iteration   8: 786.772 ns/op
Iteration   9: 786.813 ns/op
Iteration  10: 787.107 ns/op
Iteration  11: 787.072 ns/op
Iteration  12: 784.952 ns/op
Iteration  13: 784.362 ns/op
Iteration  14: 784.499 ns/op
Iteration  15: 784.294 ns/op
Iteration  16: 784.788 ns/op
Iteration  17: 785.590 ns/op
Iteration  18: 791.700 ns/op
Iteration  19: 785.391 ns/op
Iteration  20: 786.606 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1237.616 ns/op
# Warmup Iteration   2: 918.546 ns/op
# Warmup Iteration   3: 787.527 ns/op
# Warmup Iteration   4: 789.481 ns/op
# Warmup Iteration   5: 792.887 ns/op
Iteration   1: 796.496 ns/op
Iteration   2: 801.794 ns/op
Iteration   3: 784.244 ns/op
Iteration   4: 783.976 ns/op
Iteration   5: 783.311 ns/op
Iteration   6: 783.804 ns/op
Iteration   7: 785.043 ns/op
Iteration   8: 785.380 ns/op
Iteration   9: 787.046 ns/op
Iteration  10: 784.725 ns/op
Iteration  11: 782.690 ns/op
Iteration  12: 781.288 ns/op
Iteration  13: 788.274 ns/op
Iteration  14: 781.768 ns/op
Iteration  15: 781.515 ns/op
Iteration  16: 781.453 ns/op
Iteration  17: 783.369 ns/op
Iteration  18: 782.000 ns/op
Iteration  19: 781.701 ns/op
Iteration  20: 782.272 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1233.432 ns/op
# Warmup Iteration   2: 922.079 ns/op
# Warmup Iteration   3: 790.165 ns/op
# Warmup Iteration   4: 798.699 ns/op
# Warmup Iteration   5: 798.787 ns/op
Iteration   1: 801.220 ns/op
Iteration   2: 806.556 ns/op
Iteration   3: 786.040 ns/op
Iteration   4: 787.494 ns/op
Iteration   5: 788.511 ns/op
Iteration   6: 786.339 ns/op
Iteration   7: 786.954 ns/op
Iteration   8: 785.935 ns/op
Iteration   9: 790.017 ns/op
Iteration  10: 785.915 ns/op
Iteration  11: 786.225 ns/op
Iteration  12: 783.703 ns/op
Iteration  13: 789.697 ns/op
Iteration  14: 783.649 ns/op
Iteration  15: 783.114 ns/op
Iteration  16: 783.724 ns/op
Iteration  17: 782.851 ns/op
Iteration  18: 783.296 ns/op
Iteration  19: 784.517 ns/op
Iteration  20: 782.694 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  786.103 Â±(99.9%) 1.932 ns/op [Average]
  (min, avg, max) = (780.275, 786.103, 806.556), stdev = 5.698
  CI (99.9%): [784.170, 788.035] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		
 	
	   
	
 	 
	 
 
 	

	
,
	 	   	
	
	 	 
  
		 	   

 			
   	 
		
		  		 		


  
	
  
	 


	 

 	 	
	
	
  avgt  100  763.465 Â± 1.861  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		
 	
	   
	
 	 
	 
 
 	

	
,
	 	   	
	
	 	 
  
		 	   

 			
   	 
		
		  		 		


  
	
  
	 


	 

 	 	
	
	
  avgt  100  786.103 Â± 1.932  ns/op

Benchmark result is saved to split_precompiled_regex_242_207_Match.csv
