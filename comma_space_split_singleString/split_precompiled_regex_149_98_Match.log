# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =       
			
 					    
  
		
   	   
	  	
    

,


  		
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 987.471 ns/op
# Warmup Iteration   2: 613.715 ns/op
# Warmup Iteration   3: 561.637 ns/op
# Warmup Iteration   4: 577.141 ns/op
# Warmup Iteration   5: 570.820 ns/op
Iteration   1: 557.651 ns/op
Iteration   2: 559.553 ns/op
Iteration   3: 557.195 ns/op
Iteration   4: 559.934 ns/op
Iteration   5: 557.005 ns/op
Iteration   6: 557.063 ns/op
Iteration   7: 558.497 ns/op
Iteration   8: 556.010 ns/op
Iteration   9: 561.313 ns/op
Iteration  10: 556.252 ns/op
Iteration  11: 556.112 ns/op
Iteration  12: 558.070 ns/op
Iteration  13: 556.123 ns/op
Iteration  14: 555.872 ns/op
Iteration  15: 557.753 ns/op
Iteration  16: 556.174 ns/op
Iteration  17: 558.674 ns/op
Iteration  18: 556.784 ns/op
Iteration  19: 557.798 ns/op
Iteration  20: 558.765 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 985.212 ns/op
# Warmup Iteration   2: 620.632 ns/op
# Warmup Iteration   3: 567.969 ns/op
# Warmup Iteration   4: 583.125 ns/op
# Warmup Iteration   5: 576.283 ns/op
Iteration   1: 563.016 ns/op
Iteration   2: 566.191 ns/op
Iteration   3: 565.538 ns/op
Iteration   4: 563.246 ns/op
Iteration   5: 565.381 ns/op
Iteration   6: 563.239 ns/op
Iteration   7: 564.081 ns/op
Iteration   8: 566.902 ns/op
Iteration   9: 561.435 ns/op
Iteration  10: 562.701 ns/op
Iteration  11: 561.517 ns/op
Iteration  12: 561.593 ns/op
Iteration  13: 568.322 ns/op
Iteration  14: 581.888 ns/op
Iteration  15: 563.034 ns/op
Iteration  16: 561.579 ns/op
Iteration  17: 561.208 ns/op
Iteration  18: 563.343 ns/op
Iteration  19: 561.226 ns/op
Iteration  20: 566.023 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 981.687 ns/op
# Warmup Iteration   2: 617.496 ns/op
# Warmup Iteration   3: 566.962 ns/op
# Warmup Iteration   4: 581.827 ns/op
# Warmup Iteration   5: 575.803 ns/op
Iteration   1: 562.363 ns/op
Iteration   2: 565.160 ns/op
Iteration   3: 562.725 ns/op
Iteration   4: 564.836 ns/op
Iteration   5: 562.626 ns/op
Iteration   6: 562.695 ns/op
Iteration   7: 564.519 ns/op
Iteration   8: 561.523 ns/op
Iteration   9: 561.270 ns/op
Iteration  10: 562.384 ns/op
Iteration  11: 561.363 ns/op
Iteration  12: 561.636 ns/op
Iteration  13: 562.305 ns/op
Iteration  14: 561.527 ns/op
Iteration  15: 563.363 ns/op
Iteration  16: 562.690 ns/op
Iteration  17: 562.306 ns/op
Iteration  18: 563.799 ns/op
Iteration  19: 561.429 ns/op
Iteration  20: 562.718 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 983.579 ns/op
# Warmup Iteration   2: 617.633 ns/op
# Warmup Iteration   3: 565.535 ns/op
# Warmup Iteration   4: 581.283 ns/op
# Warmup Iteration   5: 574.844 ns/op
Iteration   1: 561.881 ns/op
Iteration   2: 564.269 ns/op
Iteration   3: 561.593 ns/op
Iteration   4: 563.911 ns/op
Iteration   5: 561.741 ns/op
Iteration   6: 561.647 ns/op
Iteration   7: 563.461 ns/op
Iteration   8: 560.315 ns/op
Iteration   9: 560.444 ns/op
Iteration  10: 566.674 ns/op
Iteration  11: 560.394 ns/op
Iteration  12: 567.361 ns/op
Iteration  13: 561.833 ns/op
Iteration  14: 560.523 ns/op
Iteration  15: 561.590 ns/op
Iteration  16: 559.898 ns/op
Iteration  17: 560.307 ns/op
Iteration  18: 561.822 ns/op
Iteration  19: 560.549 ns/op
Iteration  20: 562.783 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 978.395 ns/op
# Warmup Iteration   2: 611.397 ns/op
# Warmup Iteration   3: 561.438 ns/op
# Warmup Iteration   4: 576.009 ns/op
# Warmup Iteration   5: 571.274 ns/op
Iteration   1: 557.926 ns/op
Iteration   2: 560.210 ns/op
Iteration   3: 558.053 ns/op
Iteration   4: 560.333 ns/op
Iteration   5: 557.958 ns/op
Iteration   6: 558.113 ns/op
Iteration   7: 559.343 ns/op
Iteration   8: 556.282 ns/op
Iteration   9: 558.211 ns/op
Iteration  10: 556.823 ns/op
Iteration  11: 556.755 ns/op
Iteration  12: 558.005 ns/op
Iteration  13: 556.710 ns/op
Iteration  14: 556.835 ns/op
Iteration  15: 558.605 ns/op
Iteration  16: 556.705 ns/op
Iteration  17: 559.158 ns/op
Iteration  18: 557.046 ns/op
Iteration  19: 557.049 ns/op
Iteration  20: 558.329 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  560.987 ±(99.9%) 1.242 ns/op [Average]
  (min, avg, max) = (555.872, 560.987, 581.888), stdev = 3.662
  CI (99.9%): [559.745, 562.229] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =       
			
 					    
  
		
   	   
	  	
    

,


  		
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1032.278 ns/op
# Warmup Iteration   2: 639.559 ns/op
# Warmup Iteration   3: 582.922 ns/op
# Warmup Iteration   4: 598.600 ns/op
# Warmup Iteration   5: 591.736 ns/op
Iteration   1: 578.013 ns/op
Iteration   2: 580.846 ns/op
Iteration   3: 578.219 ns/op
Iteration   4: 579.115 ns/op
Iteration   5: 581.209 ns/op
Iteration   6: 579.377 ns/op
Iteration   7: 580.267 ns/op
Iteration   8: 577.308 ns/op
Iteration   9: 576.986 ns/op
Iteration  10: 582.943 ns/op
Iteration  11: 576.994 ns/op
Iteration  12: 576.823 ns/op
Iteration  13: 577.905 ns/op
Iteration  14: 577.757 ns/op
Iteration  15: 577.691 ns/op
Iteration  16: 579.273 ns/op
Iteration  17: 578.059 ns/op
Iteration  18: 581.640 ns/op
Iteration  19: 578.410 ns/op
Iteration  20: 578.304 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1040.768 ns/op
# Warmup Iteration   2: 639.979 ns/op
# Warmup Iteration   3: 577.839 ns/op
# Warmup Iteration   4: 592.114 ns/op
# Warmup Iteration   5: 585.681 ns/op
Iteration   1: 571.739 ns/op
Iteration   2: 574.778 ns/op
Iteration   3: 571.768 ns/op
Iteration   4: 575.045 ns/op
Iteration   5: 571.744 ns/op
Iteration   6: 572.000 ns/op
Iteration   7: 572.876 ns/op
Iteration   8: 569.683 ns/op
Iteration   9: 573.956 ns/op
Iteration  10: 571.586 ns/op
Iteration  11: 571.733 ns/op
Iteration  12: 572.145 ns/op
Iteration  13: 571.828 ns/op
Iteration  14: 571.312 ns/op
Iteration  15: 573.821 ns/op
Iteration  16: 571.747 ns/op
Iteration  17: 573.952 ns/op
Iteration  18: 570.690 ns/op
Iteration  19: 571.585 ns/op
Iteration  20: 613.575 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1034.158 ns/op
# Warmup Iteration   2: 649.563 ns/op
# Warmup Iteration   3: 588.537 ns/op
# Warmup Iteration   4: 608.238 ns/op
# Warmup Iteration   5: 598.906 ns/op
Iteration   1: 587.251 ns/op
Iteration   2: 591.190 ns/op
Iteration   3: 583.855 ns/op
Iteration   4: 583.260 ns/op
Iteration   5: 587.266 ns/op
Iteration   6: 583.858 ns/op
Iteration   7: 583.700 ns/op
Iteration   8: 583.591 ns/op
Iteration   9: 582.157 ns/op
Iteration  10: 581.876 ns/op
Iteration  11: 583.685 ns/op
Iteration  12: 582.445 ns/op
Iteration  13: 582.584 ns/op
Iteration  14: 584.142 ns/op
Iteration  15: 582.003 ns/op
Iteration  16: 583.963 ns/op
Iteration  17: 582.174 ns/op
Iteration  18: 582.267 ns/op
Iteration  19: 584.427 ns/op
Iteration  20: 582.272 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1008.236 ns/op
# Warmup Iteration   2: 638.399 ns/op
# Warmup Iteration   3: 585.748 ns/op
# Warmup Iteration   4: 601.478 ns/op
# Warmup Iteration   5: 594.955 ns/op
Iteration   1: 581.382 ns/op
Iteration   2: 584.468 ns/op
Iteration   3: 581.662 ns/op
Iteration   4: 581.392 ns/op
Iteration   5: 584.353 ns/op
Iteration   6: 584.667 ns/op
Iteration   7: 581.146 ns/op
Iteration   8: 580.846 ns/op
Iteration   9: 579.256 ns/op
Iteration  10: 581.307 ns/op
Iteration  11: 579.412 ns/op
Iteration  12: 579.771 ns/op
Iteration  13: 585.317 ns/op
Iteration  14: 583.355 ns/op
Iteration  15: 584.932 ns/op
Iteration  16: 581.830 ns/op
Iteration  17: 579.670 ns/op
Iteration  18: 580.099 ns/op
Iteration  19: 581.078 ns/op
Iteration  20: 582.780 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1046.668 ns/op
# Warmup Iteration   2: 662.826 ns/op
# Warmup Iteration   3: 600.430 ns/op
# Warmup Iteration   4: 615.578 ns/op
# Warmup Iteration   5: 608.588 ns/op
Iteration   1: 595.691 ns/op
Iteration   2: 595.513 ns/op
Iteration   3: 597.521 ns/op
Iteration   4: 594.763 ns/op
Iteration   5: 595.363 ns/op
Iteration   6: 596.371 ns/op
Iteration   7: 594.321 ns/op
Iteration   8: 593.465 ns/op
Iteration   9: 594.517 ns/op
Iteration  10: 593.594 ns/op
Iteration  11: 593.443 ns/op
Iteration  12: 594.753 ns/op
Iteration  13: 593.574 ns/op
Iteration  14: 594.480 ns/op
Iteration  15: 595.548 ns/op
Iteration  16: 597.795 ns/op
Iteration  17: 597.396 ns/op
Iteration  18: 596.328 ns/op
Iteration  19: 594.353 ns/op
Iteration  20: 594.052 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  582.842 ±(99.9%) 2.797 ns/op [Average]
  (min, avg, max) = (569.683, 582.842, 613.575), stdev = 8.246
  CI (99.9%): [580.046, 585.639] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*        
			
 					    
  
		
   	   
	  	
    

,


  		
  avgt  100  560.987 ± 1.242  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*        
			
 					    
  
		
   	   
	  	
    

,


  		
  avgt  100  582.842 ± 2.797  ns/op

Benchmark result is saved to split_precompiled_regex_149_98_Match.csv
