# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	 	 	

 

 


		 	

	  	
		      ,
		
 	

 	
 
 	   	 	

		
  
 	
		 
   

   
		 	 



 
	 
		
  	 	
	
	
 	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1314.355 ns/op
# Warmup Iteration   2: 1013.599 ns/op
# Warmup Iteration   3: 847.757 ns/op
# Warmup Iteration   4: 850.373 ns/op
# Warmup Iteration   5: 853.958 ns/op
Iteration   1: 858.351 ns/op
Iteration   2: 863.933 ns/op
Iteration   3: 845.495 ns/op
Iteration   4: 844.093 ns/op
Iteration   5: 843.664 ns/op
Iteration   6: 844.971 ns/op
Iteration   7: 839.650 ns/op
Iteration   8: 843.322 ns/op
Iteration   9: 844.370 ns/op
Iteration  10: 843.736 ns/op
Iteration  11: 843.688 ns/op
Iteration  12: 843.958 ns/op
Iteration  13: 842.201 ns/op
Iteration  14: 842.470 ns/op
Iteration  15: 842.109 ns/op
Iteration  16: 842.348 ns/op
Iteration  17: 843.686 ns/op
Iteration  18: 843.020 ns/op
Iteration  19: 839.804 ns/op
Iteration  20: 842.494 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1308.245 ns/op
# Warmup Iteration   2: 1005.793 ns/op
# Warmup Iteration   3: 844.762 ns/op
# Warmup Iteration   4: 847.297 ns/op
# Warmup Iteration   5: 850.816 ns/op
Iteration   1: 854.872 ns/op
Iteration   2: 859.822 ns/op
Iteration   3: 841.518 ns/op
Iteration   4: 839.993 ns/op
Iteration   5: 840.337 ns/op
Iteration   6: 839.341 ns/op
Iteration   7: 836.715 ns/op
Iteration   8: 839.787 ns/op
Iteration   9: 840.308 ns/op
Iteration  10: 839.813 ns/op
Iteration  11: 839.896 ns/op
Iteration  12: 840.050 ns/op
Iteration  13: 838.836 ns/op
Iteration  14: 843.804 ns/op
Iteration  15: 839.368 ns/op
Iteration  16: 838.746 ns/op
Iteration  17: 839.246 ns/op
Iteration  18: 839.728 ns/op
Iteration  19: 838.865 ns/op
Iteration  20: 835.795 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1306.708 ns/op
# Warmup Iteration   2: 1017.754 ns/op
# Warmup Iteration   3: 844.689 ns/op
# Warmup Iteration   4: 847.177 ns/op
# Warmup Iteration   5: 852.207 ns/op
Iteration   1: 860.625 ns/op
Iteration   2: 860.380 ns/op
Iteration   3: 841.467 ns/op
Iteration   4: 840.830 ns/op
Iteration   5: 841.435 ns/op
Iteration   6: 841.287 ns/op
Iteration   7: 837.194 ns/op
Iteration   8: 842.056 ns/op
Iteration   9: 842.449 ns/op
Iteration  10: 842.441 ns/op
Iteration  11: 841.983 ns/op
Iteration  12: 843.098 ns/op
Iteration  13: 839.276 ns/op
Iteration  14: 840.252 ns/op
Iteration  15: 840.000 ns/op
Iteration  16: 840.112 ns/op
Iteration  17: 839.648 ns/op
Iteration  18: 840.316 ns/op
Iteration  19: 837.480 ns/op
Iteration  20: 839.582 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1315.647 ns/op
# Warmup Iteration   2: 1021.361 ns/op
# Warmup Iteration   3: 850.480 ns/op
# Warmup Iteration   4: 852.825 ns/op
# Warmup Iteration   5: 856.719 ns/op
Iteration   1: 861.289 ns/op
Iteration   2: 867.041 ns/op
Iteration   3: 847.158 ns/op
Iteration   4: 846.742 ns/op
Iteration   5: 847.263 ns/op
Iteration   6: 843.906 ns/op
Iteration   7: 846.587 ns/op
Iteration   8: 847.329 ns/op
Iteration   9: 848.389 ns/op
Iteration  10: 848.419 ns/op
Iteration  11: 848.286 ns/op
Iteration  12: 848.498 ns/op
Iteration  13: 847.101 ns/op
Iteration  14: 848.101 ns/op
Iteration  15: 846.018 ns/op
Iteration  16: 846.708 ns/op
Iteration  17: 843.717 ns/op
Iteration  18: 845.613 ns/op
Iteration  19: 846.756 ns/op
Iteration  20: 847.850 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1307.382 ns/op
# Warmup Iteration   2: 1005.500 ns/op
# Warmup Iteration   3: 841.179 ns/op
# Warmup Iteration   4: 844.121 ns/op
# Warmup Iteration   5: 847.500 ns/op
Iteration   1: 852.156 ns/op
Iteration   2: 857.811 ns/op
Iteration   3: 837.737 ns/op
Iteration   4: 837.911 ns/op
Iteration   5: 838.055 ns/op
Iteration   6: 837.293 ns/op
Iteration   7: 834.030 ns/op
Iteration   8: 837.465 ns/op
Iteration   9: 838.853 ns/op
Iteration  10: 842.891 ns/op
Iteration  11: 839.554 ns/op
Iteration  12: 839.630 ns/op
Iteration  13: 842.710 ns/op
Iteration  14: 836.533 ns/op
Iteration  15: 836.183 ns/op
Iteration  16: 836.640 ns/op
Iteration  17: 836.988 ns/op
Iteration  18: 838.036 ns/op
Iteration  19: 837.858 ns/op
Iteration  20: 834.649 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  843.419 Â±(99.9%) 2.213 ns/op [Average]
  (min, avg, max) = (834.030, 843.419, 867.041), stdev = 6.524
  CI (99.9%): [841.206, 845.631] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	 	 	

 

 


		 	

	  	
		      ,
		
 	

 	
 
 	   	 	

		
  
 	
		 
   

   
		 	 



 
	 
		
  	 	
	
	
 	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1301.809 ns/op
# Warmup Iteration   2: 1026.928 ns/op
# Warmup Iteration   3: 864.588 ns/op
# Warmup Iteration   4: 868.558 ns/op
# Warmup Iteration   5: 871.097 ns/op
Iteration   1: 878.973 ns/op
Iteration   2: 881.112 ns/op
Iteration   3: 861.088 ns/op
Iteration   4: 860.684 ns/op
Iteration   5: 860.851 ns/op
Iteration   6: 861.014 ns/op
Iteration   7: 856.667 ns/op
Iteration   8: 860.585 ns/op
Iteration   9: 860.870 ns/op
Iteration  10: 860.788 ns/op
Iteration  11: 861.514 ns/op
Iteration  12: 871.064 ns/op
Iteration  13: 857.872 ns/op
Iteration  14: 857.848 ns/op
Iteration  15: 858.670 ns/op
Iteration  16: 859.084 ns/op
Iteration  17: 859.830 ns/op
Iteration  18: 858.183 ns/op
Iteration  19: 855.486 ns/op
Iteration  20: 857.887 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1316.588 ns/op
# Warmup Iteration   2: 1033.990 ns/op
# Warmup Iteration   3: 863.031 ns/op
# Warmup Iteration   4: 867.123 ns/op
# Warmup Iteration   5: 870.405 ns/op
Iteration   1: 874.809 ns/op
Iteration   2: 877.804 ns/op
Iteration   3: 860.492 ns/op
Iteration   4: 859.788 ns/op
Iteration   5: 860.466 ns/op
Iteration   6: 862.607 ns/op
Iteration   7: 855.715 ns/op
Iteration   8: 866.055 ns/op
Iteration   9: 860.759 ns/op
Iteration  10: 860.572 ns/op
Iteration  11: 860.519 ns/op
Iteration  12: 862.286 ns/op
Iteration  13: 857.903 ns/op
Iteration  14: 858.592 ns/op
Iteration  15: 857.540 ns/op
Iteration  16: 860.192 ns/op
Iteration  17: 859.055 ns/op
Iteration  18: 859.047 ns/op
Iteration  19: 860.710 ns/op
Iteration  20: 862.252 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1283.748 ns/op
# Warmup Iteration   2: 1022.473 ns/op
# Warmup Iteration   3: 865.361 ns/op
# Warmup Iteration   4: 868.411 ns/op
# Warmup Iteration   5: 872.274 ns/op
Iteration   1: 876.474 ns/op
Iteration   2: 881.874 ns/op
Iteration   3: 862.398 ns/op
Iteration   4: 861.537 ns/op
Iteration   5: 860.871 ns/op
Iteration   6: 860.972 ns/op
Iteration   7: 857.221 ns/op
Iteration   8: 860.994 ns/op
Iteration   9: 860.724 ns/op
Iteration  10: 869.949 ns/op
Iteration  11: 863.016 ns/op
Iteration  12: 861.369 ns/op
Iteration  13: 858.874 ns/op
Iteration  14: 858.424 ns/op
Iteration  15: 859.020 ns/op
Iteration  16: 858.780 ns/op
Iteration  17: 859.797 ns/op
Iteration  18: 863.129 ns/op
Iteration  19: 859.614 ns/op
Iteration  20: 856.625 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1309.752 ns/op
# Warmup Iteration   2: 1029.466 ns/op
# Warmup Iteration   3: 864.392 ns/op
# Warmup Iteration   4: 867.178 ns/op
# Warmup Iteration   5: 870.635 ns/op
Iteration   1: 875.030 ns/op
Iteration   2: 880.238 ns/op
Iteration   3: 860.794 ns/op
Iteration   4: 860.441 ns/op
Iteration   5: 860.497 ns/op
Iteration   6: 860.715 ns/op
Iteration   7: 856.921 ns/op
Iteration   8: 860.157 ns/op
Iteration   9: 860.769 ns/op
Iteration  10: 861.303 ns/op
Iteration  11: 874.157 ns/op
Iteration  12: 880.124 ns/op
Iteration  13: 858.453 ns/op
Iteration  14: 858.387 ns/op
Iteration  15: 858.413 ns/op
Iteration  16: 858.975 ns/op
Iteration  17: 859.063 ns/op
Iteration  18: 857.720 ns/op
Iteration  19: 855.446 ns/op
Iteration  20: 858.342 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1310.041 ns/op
# Warmup Iteration   2: 1032.121 ns/op
# Warmup Iteration   3: 863.736 ns/op
# Warmup Iteration   4: 865.746 ns/op
# Warmup Iteration   5: 868.884 ns/op
Iteration   1: 874.158 ns/op
Iteration   2: 879.063 ns/op
Iteration   3: 862.115 ns/op
Iteration   4: 862.671 ns/op
Iteration   5: 858.662 ns/op
Iteration   6: 859.912 ns/op
Iteration   7: 855.640 ns/op
Iteration   8: 859.774 ns/op
Iteration   9: 861.477 ns/op
Iteration  10: 861.346 ns/op
Iteration  11: 861.299 ns/op
Iteration  12: 861.545 ns/op
Iteration  13: 857.641 ns/op
Iteration  14: 857.792 ns/op
Iteration  15: 858.375 ns/op
Iteration  16: 858.586 ns/op
Iteration  17: 859.780 ns/op
Iteration  18: 859.196 ns/op
Iteration  19: 858.417 ns/op
Iteration  20: 855.340 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  862.076 Â±(99.9%) 2.162 ns/op [Average]
  (min, avg, max) = (855.340, 862.076, 881.874), stdev = 6.375
  CI (99.9%): [859.914, 864.238] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	 	 	

 

 


		 	

	  	
		      ,
		
 	

 	
 
 	   	 	

		
  
 	
		 
   

   
		 	 



 
	 
		
  	 	
	
	
 	   avgt  100  843.419 Â± 2.213  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	 	 	

 

 


		 	

	  	
		      ,
		
 	

 	
 
 	   	 	

		
  
 	
		 
   

   
		 	 



 
	 
		
  	 	
	
	
 	   avgt  100  862.076 Â± 2.162  ns/op

Benchmark result is saved to split_precompiled_regex_170_206_Match.csv
