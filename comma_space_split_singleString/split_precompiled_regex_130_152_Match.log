# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   

 	 	 	

		

	
 		 	
			 	 

  		
 	 	
,			

		
 	
  
	  
	 
  

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1093.873 ns/op
# Warmup Iteration   2: 771.188 ns/op
# Warmup Iteration   3: 687.270 ns/op
# Warmup Iteration   4: 682.959 ns/op
# Warmup Iteration   5: 686.613 ns/op
Iteration   1: 689.624 ns/op
Iteration   2: 674.867 ns/op
Iteration   3: 674.569 ns/op
Iteration   4: 677.675 ns/op
Iteration   5: 674.331 ns/op
Iteration   6: 674.522 ns/op
Iteration   7: 674.408 ns/op
Iteration   8: 674.659 ns/op
Iteration   9: 674.478 ns/op
Iteration  10: 672.519 ns/op
Iteration  11: 679.029 ns/op
Iteration  12: 672.589 ns/op
Iteration  13: 672.322 ns/op
Iteration  14: 677.236 ns/op
Iteration  15: 672.882 ns/op
Iteration  16: 672.578 ns/op
Iteration  17: 672.618 ns/op
Iteration  18: 674.575 ns/op
Iteration  19: 672.960 ns/op
Iteration  20: 673.040 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1121.385 ns/op
# Warmup Iteration   2: 797.800 ns/op
# Warmup Iteration   3: 710.307 ns/op
# Warmup Iteration   4: 707.469 ns/op
# Warmup Iteration   5: 710.871 ns/op
Iteration   1: 715.984 ns/op
Iteration   2: 700.132 ns/op
Iteration   3: 698.654 ns/op
Iteration   4: 698.705 ns/op
Iteration   5: 698.945 ns/op
Iteration   6: 699.600 ns/op
Iteration   7: 702.510 ns/op
Iteration   8: 698.591 ns/op
Iteration   9: 699.501 ns/op
Iteration  10: 697.176 ns/op
Iteration  11: 696.939 ns/op
Iteration  12: 696.960 ns/op
Iteration  13: 696.933 ns/op
Iteration  14: 696.858 ns/op
Iteration  15: 701.688 ns/op
Iteration  16: 697.963 ns/op
Iteration  17: 698.171 ns/op
Iteration  18: 697.744 ns/op
Iteration  19: 697.496 ns/op
Iteration  20: 697.317 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1117.635 ns/op
# Warmup Iteration   2: 797.559 ns/op
# Warmup Iteration   3: 710.752 ns/op
# Warmup Iteration   4: 708.076 ns/op
# Warmup Iteration   5: 711.520 ns/op
Iteration   1: 715.609 ns/op
Iteration   2: 700.001 ns/op
Iteration   3: 699.457 ns/op
Iteration   4: 699.469 ns/op
Iteration   5: 699.716 ns/op
Iteration   6: 699.398 ns/op
Iteration   7: 702.425 ns/op
Iteration   8: 701.841 ns/op
Iteration   9: 700.366 ns/op
Iteration  10: 696.410 ns/op
Iteration  11: 696.528 ns/op
Iteration  12: 696.265 ns/op
Iteration  13: 696.021 ns/op
Iteration  14: 696.390 ns/op
Iteration  15: 696.289 ns/op
Iteration  16: 698.778 ns/op
Iteration  17: 697.165 ns/op
Iteration  18: 697.391 ns/op
Iteration  19: 697.498 ns/op
Iteration  20: 697.789 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1094.600 ns/op
# Warmup Iteration   2: 762.877 ns/op
# Warmup Iteration   3: 693.063 ns/op
# Warmup Iteration   4: 683.168 ns/op
# Warmup Iteration   5: 686.160 ns/op
Iteration   1: 690.789 ns/op
Iteration   2: 674.454 ns/op
Iteration   3: 674.495 ns/op
Iteration   4: 678.091 ns/op
Iteration   5: 674.719 ns/op
Iteration   6: 674.536 ns/op
Iteration   7: 674.476 ns/op
Iteration   8: 674.659 ns/op
Iteration   9: 674.575 ns/op
Iteration  10: 675.305 ns/op
Iteration  11: 681.330 ns/op
Iteration  12: 672.909 ns/op
Iteration  13: 672.989 ns/op
Iteration  14: 674.006 ns/op
Iteration  15: 673.528 ns/op
Iteration  16: 672.977 ns/op
Iteration  17: 672.512 ns/op
Iteration  18: 676.886 ns/op
Iteration  19: 673.850 ns/op
Iteration  20: 673.896 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1110.527 ns/op
# Warmup Iteration   2: 780.382 ns/op
# Warmup Iteration   3: 697.062 ns/op
# Warmup Iteration   4: 693.250 ns/op
# Warmup Iteration   5: 696.353 ns/op
Iteration   1: 700.549 ns/op
Iteration   2: 684.824 ns/op
Iteration   3: 684.966 ns/op
Iteration   4: 685.528 ns/op
Iteration   5: 693.583 ns/op
Iteration   6: 685.292 ns/op
Iteration   7: 685.125 ns/op
Iteration   8: 684.902 ns/op
Iteration   9: 685.115 ns/op
Iteration  10: 687.019 ns/op
Iteration  11: 683.283 ns/op
Iteration  12: 682.809 ns/op
Iteration  13: 684.471 ns/op
Iteration  14: 682.324 ns/op
Iteration  15: 682.392 ns/op
Iteration  16: 687.871 ns/op
Iteration  17: 682.814 ns/op
Iteration  18: 682.729 ns/op
Iteration  19: 682.535 ns/op
Iteration  20: 689.441 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  687.027 ±(99.9%) 3.920 ns/op [Average]
  (min, avg, max) = (672.322, 687.027, 715.984), stdev = 11.559
  CI (99.9%): [683.107, 690.947] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   

 	 	 	

		

	
 		 	
			 	 

  		
 	 	
,			

		
 	
  
	  
	 
  

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1136.488 ns/op
# Warmup Iteration   2: 806.439 ns/op
# Warmup Iteration   3: 720.261 ns/op
# Warmup Iteration   4: 717.056 ns/op
# Warmup Iteration   5: 720.534 ns/op
Iteration   1: 725.586 ns/op
Iteration   2: 712.912 ns/op
Iteration   3: 709.099 ns/op
Iteration   4: 709.038 ns/op
Iteration   5: 709.181 ns/op
Iteration   6: 712.764 ns/op
Iteration   7: 712.074 ns/op
Iteration   8: 712.453 ns/op
Iteration   9: 709.357 ns/op
Iteration  10: 707.351 ns/op
Iteration  11: 707.582 ns/op
Iteration  12: 707.699 ns/op
Iteration  13: 707.208 ns/op
Iteration  14: 709.446 ns/op
Iteration  15: 707.798 ns/op
Iteration  16: 708.242 ns/op
Iteration  17: 708.385 ns/op
Iteration  18: 708.170 ns/op
Iteration  19: 707.703 ns/op
Iteration  20: 708.004 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1176.353 ns/op
# Warmup Iteration   2: 838.924 ns/op
# Warmup Iteration   3: 735.353 ns/op
# Warmup Iteration   4: 742.472 ns/op
# Warmup Iteration   5: 739.561 ns/op
Iteration   1: 744.189 ns/op
Iteration   2: 728.061 ns/op
Iteration   3: 726.719 ns/op
Iteration   4: 727.080 ns/op
Iteration   5: 727.487 ns/op
Iteration   6: 727.437 ns/op
Iteration   7: 726.849 ns/op
Iteration   8: 727.040 ns/op
Iteration   9: 729.604 ns/op
Iteration  10: 725.043 ns/op
Iteration  11: 724.689 ns/op
Iteration  12: 725.233 ns/op
Iteration  13: 724.635 ns/op
Iteration  14: 725.128 ns/op
Iteration  15: 724.943 ns/op
Iteration  16: 725.278 ns/op
Iteration  17: 725.444 ns/op
Iteration  18: 725.146 ns/op
Iteration  19: 725.290 ns/op
Iteration  20: 726.793 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1161.183 ns/op
# Warmup Iteration   2: 830.253 ns/op
# Warmup Iteration   3: 737.469 ns/op
# Warmup Iteration   4: 733.714 ns/op
# Warmup Iteration   5: 737.698 ns/op
Iteration   1: 741.840 ns/op
Iteration   2: 725.483 ns/op
Iteration   3: 726.167 ns/op
Iteration   4: 726.064 ns/op
Iteration   5: 725.782 ns/op
Iteration   6: 725.319 ns/op
Iteration   7: 725.185 ns/op
Iteration   8: 729.710 ns/op
Iteration   9: 725.432 ns/op
Iteration  10: 723.430 ns/op
Iteration  11: 723.301 ns/op
Iteration  12: 722.951 ns/op
Iteration  13: 724.232 ns/op
Iteration  14: 723.399 ns/op
Iteration  15: 723.376 ns/op
Iteration  16: 723.919 ns/op
Iteration  17: 729.663 ns/op
Iteration  18: 723.672 ns/op
Iteration  19: 725.369 ns/op
Iteration  20: 724.227 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1196.287 ns/op
# Warmup Iteration   2: 833.230 ns/op
# Warmup Iteration   3: 735.268 ns/op
# Warmup Iteration   4: 732.446 ns/op
# Warmup Iteration   5: 734.165 ns/op
Iteration   1: 737.751 ns/op
Iteration   2: 724.803 ns/op
Iteration   3: 721.748 ns/op
Iteration   4: 721.383 ns/op
Iteration   5: 722.183 ns/op
Iteration   6: 722.071 ns/op
Iteration   7: 722.261 ns/op
Iteration   8: 725.904 ns/op
Iteration   9: 722.997 ns/op
Iteration  10: 725.396 ns/op
Iteration  11: 720.116 ns/op
Iteration  12: 720.576 ns/op
Iteration  13: 720.144 ns/op
Iteration  14: 719.794 ns/op
Iteration  15: 719.748 ns/op
Iteration  16: 719.703 ns/op
Iteration  17: 719.998 ns/op
Iteration  18: 723.038 ns/op
Iteration  19: 720.500 ns/op
Iteration  20: 724.211 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1129.950 ns/op
# Warmup Iteration   2: 814.841 ns/op
# Warmup Iteration   3: 733.920 ns/op
# Warmup Iteration   4: 729.974 ns/op
# Warmup Iteration   5: 729.607 ns/op
Iteration   1: 737.622 ns/op
Iteration   2: 720.300 ns/op
Iteration   3: 718.700 ns/op
Iteration   4: 716.678 ns/op
Iteration   5: 716.337 ns/op
Iteration   6: 717.239 ns/op
Iteration   7: 724.198 ns/op
Iteration   8: 716.918 ns/op
Iteration   9: 721.299 ns/op
Iteration  10: 714.957 ns/op
Iteration  11: 714.110 ns/op
Iteration  12: 714.136 ns/op
Iteration  13: 714.222 ns/op
Iteration  14: 714.320 ns/op
Iteration  15: 714.397 ns/op
Iteration  16: 714.130 ns/op
Iteration  17: 719.569 ns/op
Iteration  18: 716.324 ns/op
Iteration  19: 715.692 ns/op
Iteration  20: 716.365 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  720.725 ±(99.9%) 2.586 ns/op [Average]
  (min, avg, max) = (707.208, 720.725, 744.189), stdev = 7.625
  CI (99.9%): [718.139, 723.311] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    

 	 	 	

		

	
 		 	
			 	 

  		
 	 	
,			

		
 	
  
	  
	 
  

  avgt  100  687.027 ± 3.920  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    

 	 	 	

		

	
 		 	
			 	 

  		
 	 	
,			

		
 	
  
	  
	 
  

  avgt  100  720.725 ± 2.586  ns/op

Benchmark result is saved to split_precompiled_regex_130_152_Match.csv
