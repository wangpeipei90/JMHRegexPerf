# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = *HIs1cNFCnCd@B"R?]+\p40z:w]8j-"#6=~Cju[,\DR~S@v_QH)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1501.490 ns/op
# Warmup Iteration   2: 1320.383 ns/op
# Warmup Iteration   3: 1062.445 ns/op
# Warmup Iteration   4: 1066.323 ns/op
# Warmup Iteration   5: 1051.704 ns/op
Iteration   1: 1069.821 ns/op
Iteration   2: 1075.294 ns/op
Iteration   3: 1082.951 ns/op
Iteration   4: 1052.488 ns/op
Iteration   5: 1057.274 ns/op
Iteration   6: 1057.401 ns/op
Iteration   7: 1057.346 ns/op
Iteration   8: 1057.535 ns/op
Iteration   9: 1052.280 ns/op
Iteration  10: 1057.373 ns/op
Iteration  11: 1058.487 ns/op
Iteration  12: 1057.749 ns/op
Iteration  13: 1051.939 ns/op
Iteration  14: 1057.575 ns/op
Iteration  15: 1060.310 ns/op
Iteration  16: 1067.836 ns/op
Iteration  17: 1059.796 ns/op
Iteration  18: 1051.981 ns/op
Iteration  19: 1055.077 ns/op
Iteration  20: 1056.217 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1475.888 ns/op
# Warmup Iteration   2: 1277.335 ns/op
# Warmup Iteration   3: 1043.718 ns/op
# Warmup Iteration   4: 1047.013 ns/op
# Warmup Iteration   5: 1034.085 ns/op
Iteration   1: 1050.996 ns/op
Iteration   2: 1056.332 ns/op
Iteration   3: 1062.940 ns/op
Iteration   4: 1039.545 ns/op
Iteration   5: 1033.707 ns/op
Iteration   6: 1038.222 ns/op
Iteration   7: 1038.666 ns/op
Iteration   8: 1039.840 ns/op
Iteration   9: 1039.480 ns/op
Iteration  10: 1033.878 ns/op
Iteration  11: 1038.907 ns/op
Iteration  12: 1041.143 ns/op
Iteration  13: 1041.066 ns/op
Iteration  14: 1034.728 ns/op
Iteration  15: 1047.657 ns/op
Iteration  16: 1037.940 ns/op
Iteration  17: 1037.173 ns/op
Iteration  18: 1036.916 ns/op
Iteration  19: 1033.860 ns/op
Iteration  20: 1037.279 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1499.140 ns/op
# Warmup Iteration   2: 1309.686 ns/op
# Warmup Iteration   3: 1064.897 ns/op
# Warmup Iteration   4: 1068.556 ns/op
# Warmup Iteration   5: 1054.905 ns/op
Iteration   1: 1072.385 ns/op
Iteration   2: 1077.422 ns/op
Iteration   3: 1083.525 ns/op
Iteration   4: 1055.551 ns/op
Iteration   5: 1062.475 ns/op
Iteration   6: 1060.038 ns/op
Iteration   7: 1059.861 ns/op
Iteration   8: 1058.126 ns/op
Iteration   9: 1052.593 ns/op
Iteration  10: 1058.100 ns/op
Iteration  11: 1059.517 ns/op
Iteration  12: 1057.908 ns/op
Iteration  13: 1053.814 ns/op
Iteration  14: 1059.829 ns/op
Iteration  15: 1064.027 ns/op
Iteration  16: 1056.686 ns/op
Iteration  17: 1057.727 ns/op
Iteration  18: 1053.260 ns/op
Iteration  19: 1059.335 ns/op
Iteration  20: 1059.146 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1477.314 ns/op
# Warmup Iteration   2: 1280.651 ns/op
# Warmup Iteration   3: 1041.159 ns/op
# Warmup Iteration   4: 1044.858 ns/op
# Warmup Iteration   5: 1032.141 ns/op
Iteration   1: 1049.121 ns/op
Iteration   2: 1054.553 ns/op
Iteration   3: 1060.974 ns/op
Iteration   4: 1037.344 ns/op
Iteration   5: 1032.051 ns/op
Iteration   6: 1036.715 ns/op
Iteration   7: 1036.798 ns/op
Iteration   8: 1036.139 ns/op
Iteration   9: 1036.580 ns/op
Iteration  10: 1032.170 ns/op
Iteration  11: 1037.324 ns/op
Iteration  12: 1036.858 ns/op
Iteration  13: 1039.014 ns/op
Iteration  14: 1035.359 ns/op
Iteration  15: 1041.799 ns/op
Iteration  16: 1034.369 ns/op
Iteration  17: 1034.202 ns/op
Iteration  18: 1034.093 ns/op
Iteration  19: 1031.452 ns/op
Iteration  20: 1033.537 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1484.474 ns/op
# Warmup Iteration   2: 1294.824 ns/op
# Warmup Iteration   3: 1045.224 ns/op
# Warmup Iteration   4: 1059.909 ns/op
# Warmup Iteration   5: 1038.486 ns/op
Iteration   1: 1058.455 ns/op
Iteration   2: 1079.617 ns/op
Iteration   3: 1063.145 ns/op
Iteration   4: 1039.215 ns/op
Iteration   5: 1034.916 ns/op
Iteration   6: 1039.199 ns/op
Iteration   7: 1039.369 ns/op
Iteration   8: 1039.463 ns/op
Iteration   9: 1034.221 ns/op
Iteration  10: 1041.249 ns/op
Iteration  11: 1044.569 ns/op
Iteration  12: 1049.086 ns/op
Iteration  13: 1039.558 ns/op
Iteration  14: 1034.438 ns/op
Iteration  15: 1044.384 ns/op
Iteration  16: 1037.263 ns/op
Iteration  17: 1037.196 ns/op
Iteration  18: 1041.517 ns/op
Iteration  19: 1034.439 ns/op
Iteration  20: 1039.150 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  1048.792 Â±(99.9%) 4.378 ns/op [Average]
  (min, avg, max) = (1031.452, 1048.792, 1083.525), stdev = 12.909
  CI (99.9%): [1044.414, 1053.171] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = *HIs1cNFCnCd@B"R?]+\p40z:w]8j-"#6=~Cju[,\DR~S@v_QH)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1558.138 ns/op
# Warmup Iteration   2: 1321.737 ns/op
# Warmup Iteration   3: 1062.418 ns/op
# Warmup Iteration   4: 1065.097 ns/op
# Warmup Iteration   5: 1051.970 ns/op
Iteration   1: 1070.509 ns/op
Iteration   2: 1075.271 ns/op
Iteration   3: 1082.048 ns/op
Iteration   4: 1057.335 ns/op
Iteration   5: 1050.721 ns/op
Iteration   6: 1056.909 ns/op
Iteration   7: 1057.591 ns/op
Iteration   8: 1056.129 ns/op
Iteration   9: 1055.849 ns/op
Iteration  10: 1050.960 ns/op
Iteration  11: 1059.030 ns/op
Iteration  12: 1058.234 ns/op
Iteration  13: 1058.073 ns/op
Iteration  14: 1052.272 ns/op
Iteration  15: 1068.799 ns/op
Iteration  16: 1054.804 ns/op
Iteration  17: 1053.279 ns/op
Iteration  18: 1054.912 ns/op
Iteration  19: 1052.252 ns/op
Iteration  20: 1054.173 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1555.780 ns/op
# Warmup Iteration   2: 1285.131 ns/op
# Warmup Iteration   3: 1037.010 ns/op
# Warmup Iteration   4: 1039.892 ns/op
# Warmup Iteration   5: 1037.751 ns/op
Iteration   1: 1032.496 ns/op
Iteration   2: 1048.442 ns/op
Iteration   3: 1055.035 ns/op
Iteration   4: 1032.141 ns/op
Iteration   5: 1031.394 ns/op
Iteration   6: 1027.600 ns/op
Iteration   7: 1031.930 ns/op
Iteration   8: 1033.085 ns/op
Iteration   9: 1033.884 ns/op
Iteration  10: 1030.562 ns/op
Iteration  11: 1027.089 ns/op
Iteration  12: 1038.681 ns/op
Iteration  13: 1032.519 ns/op
Iteration  14: 1032.760 ns/op
Iteration  15: 1030.335 ns/op
Iteration  16: 1027.656 ns/op
Iteration  17: 1037.335 ns/op
Iteration  18: 1030.269 ns/op
Iteration  19: 1030.036 ns/op
Iteration  20: 1029.885 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1546.821 ns/op
# Warmup Iteration   2: 1281.943 ns/op
# Warmup Iteration   3: 1030.078 ns/op
# Warmup Iteration   4: 1033.154 ns/op
# Warmup Iteration   5: 1037.303 ns/op
Iteration   1: 1020.821 ns/op
Iteration   2: 1042.945 ns/op
Iteration   3: 1050.561 ns/op
Iteration   4: 1024.783 ns/op
Iteration   5: 1024.904 ns/op
Iteration   6: 1019.547 ns/op
Iteration   7: 1024.959 ns/op
Iteration   8: 1024.868 ns/op
Iteration   9: 1025.568 ns/op
Iteration  10: 1024.920 ns/op
Iteration  11: 1021.318 ns/op
Iteration  12: 1025.246 ns/op
Iteration  13: 1025.461 ns/op
Iteration  14: 1026.282 ns/op
Iteration  15: 1026.839 ns/op
Iteration  16: 1026.557 ns/op
Iteration  17: 1020.252 ns/op
Iteration  18: 1023.323 ns/op
Iteration  19: 1024.523 ns/op
Iteration  20: 1023.742 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1576.635 ns/op
# Warmup Iteration   2: 1315.559 ns/op
# Warmup Iteration   3: 1048.205 ns/op
# Warmup Iteration   4: 1052.116 ns/op
# Warmup Iteration   5: 1040.018 ns/op
Iteration   1: 1055.789 ns/op
Iteration   2: 1069.546 ns/op
Iteration   3: 1066.855 ns/op
Iteration   4: 1043.196 ns/op
Iteration   5: 1037.447 ns/op
Iteration   6: 1043.050 ns/op
Iteration   7: 1042.668 ns/op
Iteration   8: 1044.672 ns/op
Iteration   9: 1044.001 ns/op
Iteration  10: 1037.364 ns/op
Iteration  11: 1045.261 ns/op
Iteration  12: 1043.577 ns/op
Iteration  13: 1067.698 ns/op
Iteration  14: 1052.495 ns/op
Iteration  15: 1037.376 ns/op
Iteration  16: 1040.501 ns/op
Iteration  17: 1040.760 ns/op
Iteration  18: 1045.942 ns/op
Iteration  19: 1041.023 ns/op
Iteration  20: 1037.013 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1561.022 ns/op
# Warmup Iteration   2: 1325.870 ns/op
# Warmup Iteration   3: 1065.296 ns/op
# Warmup Iteration   4: 1069.220 ns/op
# Warmup Iteration   5: 1055.708 ns/op
Iteration   1: 1072.988 ns/op
Iteration   2: 1078.872 ns/op
Iteration   3: 1084.710 ns/op
Iteration   4: 1061.058 ns/op
Iteration   5: 1055.384 ns/op
Iteration   6: 1060.966 ns/op
Iteration   7: 1061.078 ns/op
Iteration   8: 1060.358 ns/op
Iteration   9: 1061.944 ns/op
Iteration  10: 1054.939 ns/op
Iteration  11: 1064.426 ns/op
Iteration  12: 1060.444 ns/op
Iteration  13: 1060.173 ns/op
Iteration  14: 1055.432 ns/op
Iteration  15: 1063.514 ns/op
Iteration  16: 1069.546 ns/op
Iteration  17: 1057.183 ns/op
Iteration  18: 1057.050 ns/op
Iteration  19: 1054.888 ns/op
Iteration  20: 1058.054 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  1045.689 Â±(99.9%) 5.519 ns/op [Average]
  (min, avg, max) = (1019.547, 1045.689, 1084.710), stdev = 16.272
  CI (99.9%): [1040.171, 1051.208] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                            (trimmed)  Mode  Cnt     Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  *HIs1cNFCnCd@B"R?]+\p40z:w]8j-"#6=~Cju[,\DR~S@v_QH  avgt  100  1048.792 Â± 4.378  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  *HIs1cNFCnCd@B"R?]+\p40z:w]8j-"#6=~Cju[,\DR~S@v_QH  avgt  100  1045.689 Â± 5.519  ns/op

Benchmark result is saved to split_precompiled_regex_115_51_NonMatch.csv
