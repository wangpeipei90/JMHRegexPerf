# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	
 	   

 

 
		    
		
  	 
  
 
 
	
	
    					
  		 

 
 
 
 


	
	
	
 
	 	 ,	 	  	   	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1268.571 ns/op
# Warmup Iteration   2: 958.790 ns/op
# Warmup Iteration   3: 803.076 ns/op
# Warmup Iteration   4: 804.226 ns/op
# Warmup Iteration   5: 809.324 ns/op
Iteration   1: 811.465 ns/op
Iteration   2: 816.075 ns/op
Iteration   3: 797.799 ns/op
Iteration   4: 801.059 ns/op
Iteration   5: 799.922 ns/op
Iteration   6: 798.285 ns/op
Iteration   7: 798.142 ns/op
Iteration   8: 798.066 ns/op
Iteration   9: 797.432 ns/op
Iteration  10: 797.623 ns/op
Iteration  11: 797.599 ns/op
Iteration  12: 798.433 ns/op
Iteration  13: 802.166 ns/op
Iteration  14: 796.404 ns/op
Iteration  15: 796.470 ns/op
Iteration  16: 795.949 ns/op
Iteration  17: 796.424 ns/op
Iteration  18: 797.706 ns/op
Iteration  19: 797.190 ns/op
Iteration  20: 797.928 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1215.414 ns/op
# Warmup Iteration   2: 867.988 ns/op
# Warmup Iteration   3: 746.361 ns/op
# Warmup Iteration   4: 751.352 ns/op
# Warmup Iteration   5: 771.727 ns/op
Iteration   1: 759.062 ns/op
Iteration   2: 745.004 ns/op
Iteration   3: 742.853 ns/op
Iteration   4: 744.049 ns/op
Iteration   5: 742.464 ns/op
Iteration   6: 744.220 ns/op
Iteration   7: 741.945 ns/op
Iteration   8: 743.777 ns/op
Iteration   9: 742.080 ns/op
Iteration  10: 744.765 ns/op
Iteration  11: 741.684 ns/op
Iteration  12: 740.131 ns/op
Iteration  13: 739.790 ns/op
Iteration  14: 739.859 ns/op
Iteration  15: 739.325 ns/op
Iteration  16: 739.338 ns/op
Iteration  17: 739.393 ns/op
Iteration  18: 739.671 ns/op
Iteration  19: 739.675 ns/op
Iteration  20: 740.681 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1273.801 ns/op
# Warmup Iteration   2: 955.816 ns/op
# Warmup Iteration   3: 807.807 ns/op
# Warmup Iteration   4: 809.542 ns/op
# Warmup Iteration   5: 813.179 ns/op
Iteration   1: 817.190 ns/op
Iteration   2: 821.262 ns/op
Iteration   3: 803.450 ns/op
Iteration   4: 803.478 ns/op
Iteration   5: 803.704 ns/op
Iteration   6: 804.034 ns/op
Iteration   7: 803.213 ns/op
Iteration   8: 803.213 ns/op
Iteration   9: 803.566 ns/op
Iteration  10: 805.082 ns/op
Iteration  11: 810.197 ns/op
Iteration  12: 801.773 ns/op
Iteration  13: 802.520 ns/op
Iteration  14: 807.827 ns/op
Iteration  15: 801.557 ns/op
Iteration  16: 801.884 ns/op
Iteration  17: 802.830 ns/op
Iteration  18: 802.501 ns/op
Iteration  19: 799.184 ns/op
Iteration  20: 803.264 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1182.103 ns/op
# Warmup Iteration   2: 836.686 ns/op
# Warmup Iteration   3: 720.489 ns/op
# Warmup Iteration   4: 735.148 ns/op
# Warmup Iteration   5: 729.224 ns/op
Iteration   1: 733.811 ns/op
Iteration   2: 718.003 ns/op
Iteration   3: 716.502 ns/op
Iteration   4: 716.305 ns/op
Iteration   5: 716.680 ns/op
Iteration   6: 716.787 ns/op
Iteration   7: 716.720 ns/op
Iteration   8: 716.638 ns/op
Iteration   9: 716.576 ns/op
Iteration  10: 717.078 ns/op
Iteration  11: 715.321 ns/op
Iteration  12: 719.290 ns/op
Iteration  13: 713.940 ns/op
Iteration  14: 714.876 ns/op
Iteration  15: 715.402 ns/op
Iteration  16: 714.666 ns/op
Iteration  17: 713.964 ns/op
Iteration  18: 714.358 ns/op
Iteration  19: 715.150 ns/op
Iteration  20: 714.066 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1273.539 ns/op
# Warmup Iteration   2: 950.435 ns/op
# Warmup Iteration   3: 799.805 ns/op
# Warmup Iteration   4: 802.035 ns/op
# Warmup Iteration   5: 805.115 ns/op
Iteration   1: 809.727 ns/op
Iteration   2: 814.073 ns/op
Iteration   3: 795.924 ns/op
Iteration   4: 795.135 ns/op
Iteration   5: 795.101 ns/op
Iteration   6: 796.032 ns/op
Iteration   7: 796.193 ns/op
Iteration   8: 796.444 ns/op
Iteration   9: 795.852 ns/op
Iteration  10: 799.854 ns/op
Iteration  11: 814.887 ns/op
Iteration  12: 795.339 ns/op
Iteration  13: 794.047 ns/op
Iteration  14: 794.500 ns/op
Iteration  15: 794.191 ns/op
Iteration  16: 795.036 ns/op
Iteration  17: 794.540 ns/op
Iteration  18: 795.641 ns/op
Iteration  19: 796.047 ns/op
Iteration  20: 796.342 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  772.447 Â±(99.9%) 12.374 ns/op [Average]
  (min, avg, max) = (713.940, 772.447, 821.262), stdev = 36.486
  CI (99.9%): [760.072, 784.821] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	
 	   

 

 
		    
		
  	 
  
 
 
	
	
    					
  		 

 
 
 
 


	
	
	
 
	 	 ,	 	  	   	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1246.099 ns/op
# Warmup Iteration   2: 955.886 ns/op
# Warmup Iteration   3: 823.945 ns/op
# Warmup Iteration   4: 819.061 ns/op
# Warmup Iteration   5: 822.997 ns/op
Iteration   1: 827.324 ns/op
Iteration   2: 834.245 ns/op
Iteration   3: 813.948 ns/op
Iteration   4: 812.565 ns/op
Iteration   5: 813.604 ns/op
Iteration   6: 814.603 ns/op
Iteration   7: 813.031 ns/op
Iteration   8: 814.304 ns/op
Iteration   9: 813.962 ns/op
Iteration  10: 814.010 ns/op
Iteration  11: 815.574 ns/op
Iteration  12: 817.891 ns/op
Iteration  13: 812.450 ns/op
Iteration  14: 814.271 ns/op
Iteration  15: 812.291 ns/op
Iteration  16: 812.358 ns/op
Iteration  17: 814.958 ns/op
Iteration  18: 814.550 ns/op
Iteration  19: 815.050 ns/op
Iteration  20: 814.876 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1250.675 ns/op
# Warmup Iteration   2: 939.750 ns/op
# Warmup Iteration   3: 798.961 ns/op
# Warmup Iteration   4: 801.035 ns/op
# Warmup Iteration   5: 805.155 ns/op
Iteration   1: 809.631 ns/op
Iteration   2: 813.023 ns/op
Iteration   3: 795.217 ns/op
Iteration   4: 795.497 ns/op
Iteration   5: 795.852 ns/op
Iteration   6: 796.021 ns/op
Iteration   7: 796.667 ns/op
Iteration   8: 796.553 ns/op
Iteration   9: 796.971 ns/op
Iteration  10: 796.756 ns/op
Iteration  11: 797.063 ns/op
Iteration  12: 797.990 ns/op
Iteration  13: 795.158 ns/op
Iteration  14: 794.033 ns/op
Iteration  15: 794.800 ns/op
Iteration  16: 796.506 ns/op
Iteration  17: 795.502 ns/op
Iteration  18: 794.353 ns/op
Iteration  19: 794.912 ns/op
Iteration  20: 796.379 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1220.797 ns/op
# Warmup Iteration   2: 907.216 ns/op
# Warmup Iteration   3: 780.996 ns/op
# Warmup Iteration   4: 780.547 ns/op
# Warmup Iteration   5: 785.426 ns/op
Iteration   1: 791.523 ns/op
Iteration   2: 786.178 ns/op
Iteration   3: 778.741 ns/op
Iteration   4: 774.715 ns/op
Iteration   5: 774.468 ns/op
Iteration   6: 774.733 ns/op
Iteration   7: 777.797 ns/op
Iteration   8: 774.849 ns/op
Iteration   9: 774.654 ns/op
Iteration  10: 775.189 ns/op
Iteration  11: 777.070 ns/op
Iteration  12: 771.983 ns/op
Iteration  13: 771.657 ns/op
Iteration  14: 771.841 ns/op
Iteration  15: 771.855 ns/op
Iteration  16: 772.166 ns/op
Iteration  17: 772.562 ns/op
Iteration  18: 772.184 ns/op
Iteration  19: 772.636 ns/op
Iteration  20: 773.012 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1187.439 ns/op
# Warmup Iteration   2: 887.000 ns/op
# Warmup Iteration   3: 770.417 ns/op
# Warmup Iteration   4: 779.174 ns/op
# Warmup Iteration   5: 784.379 ns/op
Iteration   1: 783.879 ns/op
Iteration   2: 766.743 ns/op
Iteration   3: 766.565 ns/op
Iteration   4: 766.375 ns/op
Iteration   5: 766.834 ns/op
Iteration   6: 766.529 ns/op
Iteration   7: 765.786 ns/op
Iteration   8: 765.813 ns/op
Iteration   9: 766.092 ns/op
Iteration  10: 766.658 ns/op
Iteration  11: 764.678 ns/op
Iteration  12: 764.711 ns/op
Iteration  13: 764.694 ns/op
Iteration  14: 764.438 ns/op
Iteration  15: 764.125 ns/op
Iteration  16: 764.243 ns/op
Iteration  17: 765.130 ns/op
Iteration  18: 765.232 ns/op
Iteration  19: 765.015 ns/op
Iteration  20: 765.430 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1192.272 ns/op
# Warmup Iteration   2: 852.455 ns/op
# Warmup Iteration   3: 739.903 ns/op
# Warmup Iteration   4: 754.364 ns/op
# Warmup Iteration   5: 749.109 ns/op
Iteration   1: 753.787 ns/op
Iteration   2: 737.064 ns/op
Iteration   3: 736.499 ns/op
Iteration   4: 737.397 ns/op
Iteration   5: 736.782 ns/op
Iteration   6: 736.166 ns/op
Iteration   7: 736.945 ns/op
Iteration   8: 736.926 ns/op
Iteration   9: 736.277 ns/op
Iteration  10: 737.291 ns/op
Iteration  11: 740.676 ns/op
Iteration  12: 734.567 ns/op
Iteration  13: 735.009 ns/op
Iteration  14: 740.695 ns/op
Iteration  15: 735.224 ns/op
Iteration  16: 743.626 ns/op
Iteration  17: 738.955 ns/op
Iteration  18: 734.523 ns/op
Iteration  19: 740.868 ns/op
Iteration  20: 735.771 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  778.686 Â±(99.9%) 9.189 ns/op [Average]
  (min, avg, max) = (734.523, 778.686, 834.245), stdev = 27.093
  CI (99.9%): [769.497, 787.875] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                     (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	
 	   

 

 
		    
		
  	 
  
 
 
	
	
    					
  		 

 
 
 
 


	
	
	
 
	 	 ,	 	  	   	  avgt  100  772.447 Â± 12.374  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	
 	   

 

 
		    
		
  	 
  
 
 
	
	
    					
  		 

 
 
 
 


	
	
	
 
	 	 ,	 	  	   	  avgt  100  778.686 Â±  9.189  ns/op

Benchmark result is saved to split_precompiled_regex_119_188_Match.csv
