# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	  	
		 		 	
		,)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 891.265 ns/op
# Warmup Iteration   2: 466.409 ns/op
# Warmup Iteration   3: 453.855 ns/op
# Warmup Iteration   4: 462.760 ns/op
# Warmup Iteration   5: 444.029 ns/op
Iteration   1: 442.451 ns/op
Iteration   2: 444.264 ns/op
Iteration   3: 444.087 ns/op
Iteration   4: 443.844 ns/op
Iteration   5: 441.234 ns/op
Iteration   6: 441.703 ns/op
Iteration   7: 441.794 ns/op
Iteration   8: 441.814 ns/op
Iteration   9: 441.190 ns/op
Iteration  10: 441.933 ns/op
Iteration  11: 442.581 ns/op
Iteration  12: 444.981 ns/op
Iteration  13: 441.678 ns/op
Iteration  14: 442.217 ns/op
Iteration  15: 442.957 ns/op
Iteration  16: 442.624 ns/op
Iteration  17: 441.511 ns/op
Iteration  18: 443.866 ns/op
Iteration  19: 444.469 ns/op
Iteration  20: 444.503 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 916.329 ns/op
# Warmup Iteration   2: 483.298 ns/op
# Warmup Iteration   3: 465.330 ns/op
# Warmup Iteration   4: 475.830 ns/op
# Warmup Iteration   5: 454.112 ns/op
Iteration   1: 456.381 ns/op
Iteration   2: 455.837 ns/op
Iteration   3: 453.849 ns/op
Iteration   4: 455.898 ns/op
Iteration   5: 454.313 ns/op
Iteration   6: 452.820 ns/op
Iteration   7: 451.718 ns/op
Iteration   8: 455.484 ns/op
Iteration   9: 454.649 ns/op
Iteration  10: 454.444 ns/op
Iteration  11: 455.427 ns/op
Iteration  12: 455.287 ns/op
Iteration  13: 453.074 ns/op
Iteration  14: 455.164 ns/op
Iteration  15: 454.088 ns/op
Iteration  16: 454.128 ns/op
Iteration  17: 451.959 ns/op
Iteration  18: 453.511 ns/op
Iteration  19: 454.897 ns/op
Iteration  20: 452.794 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 899.971 ns/op
# Warmup Iteration   2: 463.939 ns/op
# Warmup Iteration   3: 454.778 ns/op
# Warmup Iteration   4: 464.880 ns/op
# Warmup Iteration   5: 446.559 ns/op
Iteration   1: 443.828 ns/op
Iteration   2: 445.587 ns/op
Iteration   3: 445.825 ns/op
Iteration   4: 446.063 ns/op
Iteration   5: 442.731 ns/op
Iteration   6: 443.604 ns/op
Iteration   7: 443.674 ns/op
Iteration   8: 442.838 ns/op
Iteration   9: 443.719 ns/op
Iteration  10: 443.558 ns/op
Iteration  11: 446.325 ns/op
Iteration  12: 443.231 ns/op
Iteration  13: 445.032 ns/op
Iteration  14: 444.563 ns/op
Iteration  15: 444.226 ns/op
Iteration  16: 443.004 ns/op
Iteration  17: 443.931 ns/op
Iteration  18: 444.294 ns/op
Iteration  19: 444.721 ns/op
Iteration  20: 442.607 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 919.069 ns/op
# Warmup Iteration   2: 478.365 ns/op
# Warmup Iteration   3: 465.617 ns/op
# Warmup Iteration   4: 476.426 ns/op
# Warmup Iteration   5: 456.414 ns/op
Iteration   1: 456.799 ns/op
Iteration   2: 456.470 ns/op
Iteration   3: 456.822 ns/op
Iteration   4: 454.575 ns/op
Iteration   5: 455.622 ns/op
Iteration   6: 454.941 ns/op
Iteration   7: 453.508 ns/op
Iteration   8: 454.638 ns/op
Iteration   9: 455.732 ns/op
Iteration  10: 453.517 ns/op
Iteration  11: 455.675 ns/op
Iteration  12: 456.917 ns/op
Iteration  13: 454.743 ns/op
Iteration  14: 456.744 ns/op
Iteration  15: 455.675 ns/op
Iteration  16: 455.573 ns/op
Iteration  17: 454.686 ns/op
Iteration  18: 457.033 ns/op
Iteration  19: 458.307 ns/op
Iteration  20: 454.399 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 902.192 ns/op
# Warmup Iteration   2: 468.383 ns/op
# Warmup Iteration   3: 458.520 ns/op
# Warmup Iteration   4: 468.411 ns/op
# Warmup Iteration   5: 449.658 ns/op
Iteration   1: 446.941 ns/op
Iteration   2: 449.830 ns/op
Iteration   3: 449.527 ns/op
Iteration   4: 447.527 ns/op
Iteration   5: 448.626 ns/op
Iteration   6: 447.114 ns/op
Iteration   7: 446.859 ns/op
Iteration   8: 446.091 ns/op
Iteration   9: 446.981 ns/op
Iteration  10: 447.160 ns/op
Iteration  11: 447.482 ns/op
Iteration  12: 446.213 ns/op
Iteration  13: 447.301 ns/op
Iteration  14: 447.894 ns/op
Iteration  15: 446.662 ns/op
Iteration  16: 447.488 ns/op
Iteration  17: 450.311 ns/op
Iteration  18: 447.844 ns/op
Iteration  19: 446.638 ns/op
Iteration  20: 448.514 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  448.902 ±(99.9%) 1.820 ns/op [Average]
  (min, avg, max) = (441.190, 448.902, 458.307), stdev = 5.368
  CI (99.9%): [447.081, 450.722] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	  	
		 		 	
		,)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 968.451 ns/op
# Warmup Iteration   2: 499.444 ns/op
# Warmup Iteration   3: 474.572 ns/op
# Warmup Iteration   4: 484.724 ns/op
# Warmup Iteration   5: 463.078 ns/op
Iteration   1: 464.922 ns/op
Iteration   2: 464.909 ns/op
Iteration   3: 463.000 ns/op
Iteration   4: 465.219 ns/op
Iteration   5: 465.108 ns/op
Iteration   6: 461.871 ns/op
Iteration   7: 462.691 ns/op
Iteration   8: 462.495 ns/op
Iteration   9: 462.688 ns/op
Iteration  10: 462.176 ns/op
Iteration  11: 465.725 ns/op
Iteration  12: 464.909 ns/op
Iteration  13: 464.753 ns/op
Iteration  14: 462.573 ns/op
Iteration  15: 462.633 ns/op
Iteration  16: 462.962 ns/op
Iteration  17: 461.573 ns/op
Iteration  18: 464.899 ns/op
Iteration  19: 464.899 ns/op
Iteration  20: 462.307 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 877.295 ns/op
# Warmup Iteration   2: 469.018 ns/op
# Warmup Iteration   3: 466.336 ns/op
# Warmup Iteration   4: 475.289 ns/op
# Warmup Iteration   5: 459.060 ns/op
Iteration   1: 454.596 ns/op
Iteration   2: 456.959 ns/op
Iteration   3: 459.783 ns/op
Iteration   4: 457.439 ns/op
Iteration   5: 453.422 ns/op
Iteration   6: 455.234 ns/op
Iteration   7: 454.078 ns/op
Iteration   8: 453.597 ns/op
Iteration   9: 453.392 ns/op
Iteration  10: 454.670 ns/op
Iteration  11: 454.273 ns/op
Iteration  12: 455.138 ns/op
Iteration  13: 453.345 ns/op
Iteration  14: 455.001 ns/op
Iteration  15: 457.204 ns/op
Iteration  16: 453.779 ns/op
Iteration  17: 454.865 ns/op
Iteration  18: 455.518 ns/op
Iteration  19: 456.057 ns/op
Iteration  20: 454.462 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 903.146 ns/op
# Warmup Iteration   2: 500.607 ns/op
# Warmup Iteration   3: 489.133 ns/op
# Warmup Iteration   4: 499.201 ns/op
# Warmup Iteration   5: 477.317 ns/op
Iteration   1: 480.051 ns/op
Iteration   2: 479.620 ns/op
Iteration   3: 476.590 ns/op
Iteration   4: 480.184 ns/op
Iteration   5: 479.858 ns/op
Iteration   6: 476.027 ns/op
Iteration   7: 476.816 ns/op
Iteration   8: 477.280 ns/op
Iteration   9: 476.388 ns/op
Iteration  10: 479.810 ns/op
Iteration  11: 476.272 ns/op
Iteration  12: 476.763 ns/op
Iteration  13: 477.345 ns/op
Iteration  14: 476.755 ns/op
Iteration  15: 477.411 ns/op
Iteration  16: 477.564 ns/op
Iteration  17: 476.056 ns/op
Iteration  18: 478.019 ns/op
Iteration  19: 477.238 ns/op
Iteration  20: 477.053 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 886.738 ns/op
# Warmup Iteration   2: 489.912 ns/op
# Warmup Iteration   3: 485.896 ns/op
# Warmup Iteration   4: 496.214 ns/op
# Warmup Iteration   5: 473.275 ns/op
Iteration   1: 475.019 ns/op
Iteration   2: 475.232 ns/op
Iteration   3: 473.014 ns/op
Iteration   4: 475.091 ns/op
Iteration   5: 478.061 ns/op
Iteration   6: 470.989 ns/op
Iteration   7: 472.485 ns/op
Iteration   8: 472.574 ns/op
Iteration   9: 471.094 ns/op
Iteration  10: 472.848 ns/op
Iteration  11: 474.506 ns/op
Iteration  12: 472.285 ns/op
Iteration  13: 478.343 ns/op
Iteration  14: 474.800 ns/op
Iteration  15: 472.447 ns/op
Iteration  16: 474.715 ns/op
Iteration  17: 474.561 ns/op
Iteration  18: 472.117 ns/op
Iteration  19: 473.771 ns/op
Iteration  20: 473.244 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 927.256 ns/op
# Warmup Iteration   2: 495.998 ns/op
# Warmup Iteration   3: 474.495 ns/op
# Warmup Iteration   4: 484.963 ns/op
# Warmup Iteration   5: 465.765 ns/op
Iteration   1: 464.657 ns/op
Iteration   2: 464.698 ns/op
Iteration   3: 465.010 ns/op
Iteration   4: 462.467 ns/op
Iteration   5: 463.542 ns/op
Iteration   6: 466.927 ns/op
Iteration   7: 461.335 ns/op
Iteration   8: 462.045 ns/op
Iteration   9: 462.311 ns/op
Iteration  10: 461.486 ns/op
Iteration  11: 462.772 ns/op
Iteration  12: 463.304 ns/op
Iteration  13: 463.321 ns/op
Iteration  14: 461.443 ns/op
Iteration  15: 463.332 ns/op
Iteration  16: 464.402 ns/op
Iteration  17: 462.668 ns/op
Iteration  18: 464.004 ns/op
Iteration  19: 463.349 ns/op
Iteration  20: 463.331 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  466.718 ±(99.9%) 2.801 ns/op [Average]
  (min, avg, max) = (453.345, 466.718, 480.184), stdev = 8.259
  CI (99.9%): [463.917, 469.519] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	  	
		 		 	
		,  avgt  100  448.902 ± 1.820  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	  	
		 		 	
		,  avgt  100  466.718 ± 2.801  ns/op

Benchmark result is saved to split_precompiled_regex_48_35_Match.csv
