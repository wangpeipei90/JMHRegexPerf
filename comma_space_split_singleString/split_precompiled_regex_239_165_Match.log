# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   
 	   

	  	 	 	 	 			  
 	
 	   	
,			 	
  
 


  	
  	
 

	 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1117.708 ns/op
# Warmup Iteration   2: 787.896 ns/op
# Warmup Iteration   3: 697.915 ns/op
# Warmup Iteration   4: 693.902 ns/op
# Warmup Iteration   5: 697.387 ns/op
Iteration   1: 700.297 ns/op
Iteration   2: 685.493 ns/op
Iteration   3: 685.320 ns/op
Iteration   4: 685.154 ns/op
Iteration   5: 688.098 ns/op
Iteration   6: 688.389 ns/op
Iteration   7: 685.639 ns/op
Iteration   8: 684.990 ns/op
Iteration   9: 685.759 ns/op
Iteration  10: 689.767 ns/op
Iteration  11: 684.221 ns/op
Iteration  12: 683.326 ns/op
Iteration  13: 684.371 ns/op
Iteration  14: 682.968 ns/op
Iteration  15: 683.659 ns/op
Iteration  16: 683.327 ns/op
Iteration  17: 684.743 ns/op
Iteration  18: 684.521 ns/op
Iteration  19: 684.191 ns/op
Iteration  20: 683.610 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1119.998 ns/op
# Warmup Iteration   2: 792.203 ns/op
# Warmup Iteration   3: 702.219 ns/op
# Warmup Iteration   4: 698.361 ns/op
# Warmup Iteration   5: 702.032 ns/op
Iteration   1: 706.399 ns/op
Iteration   2: 689.650 ns/op
Iteration   3: 689.131 ns/op
Iteration   4: 689.362 ns/op
Iteration   5: 689.484 ns/op
Iteration   6: 692.702 ns/op
Iteration   7: 689.557 ns/op
Iteration   8: 689.388 ns/op
Iteration   9: 689.738 ns/op
Iteration  10: 687.415 ns/op
Iteration  11: 692.487 ns/op
Iteration  12: 687.209 ns/op
Iteration  13: 687.194 ns/op
Iteration  14: 688.398 ns/op
Iteration  15: 687.722 ns/op
Iteration  16: 687.492 ns/op
Iteration  17: 687.343 ns/op
Iteration  18: 687.606 ns/op
Iteration  19: 687.817 ns/op
Iteration  20: 689.243 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1149.569 ns/op
# Warmup Iteration   2: 839.289 ns/op
# Warmup Iteration   3: 730.660 ns/op
# Warmup Iteration   4: 750.283 ns/op
# Warmup Iteration   5: 738.962 ns/op
Iteration   1: 743.657 ns/op
Iteration   2: 728.300 ns/op
Iteration   3: 727.748 ns/op
Iteration   4: 727.466 ns/op
Iteration   5: 727.404 ns/op
Iteration   6: 728.325 ns/op
Iteration   7: 727.413 ns/op
Iteration   8: 726.931 ns/op
Iteration   9: 727.628 ns/op
Iteration  10: 727.757 ns/op
Iteration  11: 725.962 ns/op
Iteration  12: 725.788 ns/op
Iteration  13: 731.371 ns/op
Iteration  14: 730.828 ns/op
Iteration  15: 725.558 ns/op
Iteration  16: 725.662 ns/op
Iteration  17: 726.443 ns/op
Iteration  18: 726.601 ns/op
Iteration  19: 726.642 ns/op
Iteration  20: 726.564 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1214.420 ns/op
# Warmup Iteration   2: 845.504 ns/op
# Warmup Iteration   3: 731.533 ns/op
# Warmup Iteration   4: 746.393 ns/op
# Warmup Iteration   5: 740.522 ns/op
Iteration   1: 744.618 ns/op
Iteration   2: 732.563 ns/op
Iteration   3: 727.753 ns/op
Iteration   4: 728.263 ns/op
Iteration   5: 727.613 ns/op
Iteration   6: 727.258 ns/op
Iteration   7: 727.460 ns/op
Iteration   8: 727.888 ns/op
Iteration   9: 727.528 ns/op
Iteration  10: 727.753 ns/op
Iteration  11: 727.150 ns/op
Iteration  12: 725.779 ns/op
Iteration  13: 725.644 ns/op
Iteration  14: 726.570 ns/op
Iteration  15: 725.197 ns/op
Iteration  16: 726.963 ns/op
Iteration  17: 726.545 ns/op
Iteration  18: 727.545 ns/op
Iteration  19: 728.459 ns/op
Iteration  20: 734.923 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1203.943 ns/op
# Warmup Iteration   2: 850.515 ns/op
# Warmup Iteration   3: 728.934 ns/op
# Warmup Iteration   4: 743.072 ns/op
# Warmup Iteration   5: 738.508 ns/op
Iteration   1: 742.309 ns/op
Iteration   2: 727.384 ns/op
Iteration   3: 725.428 ns/op
Iteration   4: 725.009 ns/op
Iteration   5: 724.558 ns/op
Iteration   6: 725.470 ns/op
Iteration   7: 725.191 ns/op
Iteration   8: 728.597 ns/op
Iteration   9: 728.847 ns/op
Iteration  10: 729.291 ns/op
Iteration  11: 726.642 ns/op
Iteration  12: 723.766 ns/op
Iteration  13: 723.515 ns/op
Iteration  14: 726.176 ns/op
Iteration  15: 724.454 ns/op
Iteration  16: 724.558 ns/op
Iteration  17: 724.528 ns/op
Iteration  18: 724.783 ns/op
Iteration  19: 725.235 ns/op
Iteration  20: 725.515 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  711.820 Â±(99.9%) 6.830 ns/op [Average]
  (min, avg, max) = (682.968, 711.820, 744.618), stdev = 20.139
  CI (99.9%): [704.989, 718.650] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   
 	   

	  	 	 	 	 			  
 	
 	   	
,			 	
  
 


  	
  	
 

	 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1175.037 ns/op
# Warmup Iteration   2: 815.339 ns/op
# Warmup Iteration   3: 717.456 ns/op
# Warmup Iteration   4: 713.956 ns/op
# Warmup Iteration   5: 716.138 ns/op
Iteration   1: 719.113 ns/op
Iteration   2: 703.981 ns/op
Iteration   3: 703.347 ns/op
Iteration   4: 703.522 ns/op
Iteration   5: 703.142 ns/op
Iteration   6: 706.823 ns/op
Iteration   7: 703.202 ns/op
Iteration   8: 705.813 ns/op
Iteration   9: 703.433 ns/op
Iteration  10: 704.914 ns/op
Iteration  11: 701.309 ns/op
Iteration  12: 701.159 ns/op
Iteration  13: 700.722 ns/op
Iteration  14: 702.397 ns/op
Iteration  15: 701.182 ns/op
Iteration  16: 700.987 ns/op
Iteration  17: 701.188 ns/op
Iteration  18: 701.320 ns/op
Iteration  19: 701.886 ns/op
Iteration  20: 701.421 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1144.778 ns/op
# Warmup Iteration   2: 820.811 ns/op
# Warmup Iteration   3: 733.410 ns/op
# Warmup Iteration   4: 729.385 ns/op
# Warmup Iteration   5: 732.815 ns/op
Iteration   1: 737.651 ns/op
Iteration   2: 723.115 ns/op
Iteration   3: 720.278 ns/op
Iteration   4: 720.134 ns/op
Iteration   5: 721.023 ns/op
Iteration   6: 721.026 ns/op
Iteration   7: 724.830 ns/op
Iteration   8: 721.041 ns/op
Iteration   9: 720.842 ns/op
Iteration  10: 718.746 ns/op
Iteration  11: 718.432 ns/op
Iteration  12: 717.935 ns/op
Iteration  13: 718.542 ns/op
Iteration  14: 718.545 ns/op
Iteration  15: 719.195 ns/op
Iteration  16: 718.835 ns/op
Iteration  17: 723.995 ns/op
Iteration  18: 723.850 ns/op
Iteration  19: 719.470 ns/op
Iteration  20: 719.579 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1214.685 ns/op
# Warmup Iteration   2: 886.137 ns/op
# Warmup Iteration   3: 762.305 ns/op
# Warmup Iteration   4: 770.675 ns/op
# Warmup Iteration   5: 779.932 ns/op
Iteration   1: 776.327 ns/op
Iteration   2: 759.505 ns/op
Iteration   3: 758.619 ns/op
Iteration   4: 759.012 ns/op
Iteration   5: 758.922 ns/op
Iteration   6: 759.480 ns/op
Iteration   7: 759.663 ns/op
Iteration   8: 761.047 ns/op
Iteration   9: 759.446 ns/op
Iteration  10: 758.935 ns/op
Iteration  11: 760.141 ns/op
Iteration  12: 757.257 ns/op
Iteration  13: 764.163 ns/op
Iteration  14: 757.378 ns/op
Iteration  15: 756.873 ns/op
Iteration  16: 757.475 ns/op
Iteration  17: 757.716 ns/op
Iteration  18: 757.825 ns/op
Iteration  19: 757.375 ns/op
Iteration  20: 756.988 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1217.879 ns/op
# Warmup Iteration   2: 881.944 ns/op
# Warmup Iteration   3: 761.815 ns/op
# Warmup Iteration   4: 776.009 ns/op
# Warmup Iteration   5: 770.612 ns/op
Iteration   1: 775.386 ns/op
Iteration   2: 759.049 ns/op
Iteration   3: 757.750 ns/op
Iteration   4: 757.299 ns/op
Iteration   5: 758.693 ns/op
Iteration   6: 757.997 ns/op
Iteration   7: 757.665 ns/op
Iteration   8: 758.020 ns/op
Iteration   9: 758.153 ns/op
Iteration  10: 757.942 ns/op
Iteration  11: 756.193 ns/op
Iteration  12: 755.569 ns/op
Iteration  13: 762.444 ns/op
Iteration  14: 756.154 ns/op
Iteration  15: 757.110 ns/op
Iteration  16: 755.926 ns/op
Iteration  17: 758.236 ns/op
Iteration  18: 756.575 ns/op
Iteration  19: 757.159 ns/op
Iteration  20: 757.668 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1186.529 ns/op
# Warmup Iteration   2: 822.125 ns/op
# Warmup Iteration   3: 723.949 ns/op
# Warmup Iteration   4: 719.179 ns/op
# Warmup Iteration   5: 723.436 ns/op
Iteration   1: 728.134 ns/op
Iteration   2: 720.876 ns/op
Iteration   3: 711.371 ns/op
Iteration   4: 714.446 ns/op
Iteration   5: 714.364 ns/op
Iteration   6: 711.887 ns/op
Iteration   7: 721.050 ns/op
Iteration   8: 709.965 ns/op
Iteration   9: 710.402 ns/op
Iteration  10: 708.191 ns/op
Iteration  11: 708.293 ns/op
Iteration  12: 708.213 ns/op
Iteration  13: 708.832 ns/op
Iteration  14: 708.298 ns/op
Iteration  15: 709.998 ns/op
Iteration  16: 709.099 ns/op
Iteration  17: 708.761 ns/op
Iteration  18: 708.857 ns/op
Iteration  19: 709.932 ns/op
Iteration  20: 708.297 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  731.023 Â±(99.9%) 8.192 ns/op [Average]
  (min, avg, max) = (700.722, 731.023, 776.327), stdev = 24.154
  CI (99.9%): [722.831, 739.215] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    
 	   

	  	 	 	 	 			  
 	
 	   	
,			 	
  
 


  	
  	
 

	 	  avgt  100  711.820 Â± 6.830  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    
 	   

	  	 	 	 	 			  
 	
 	   	
,			 	
  
 


  	
  	
 

	 	  avgt  100  731.023 Â± 8.192  ns/op

Benchmark result is saved to split_precompiled_regex_239_165_Match.csv
