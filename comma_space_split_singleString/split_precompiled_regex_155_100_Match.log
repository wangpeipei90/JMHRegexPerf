# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   

  	  
				  	
	  

	   


						,		  	
 	 
  

 				)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1011.627 ns/op
# Warmup Iteration   2: 649.072 ns/op
# Warmup Iteration   3: 588.550 ns/op
# Warmup Iteration   4: 600.207 ns/op
# Warmup Iteration   5: 601.931 ns/op
Iteration   1: 584.404 ns/op
Iteration   2: 583.337 ns/op
Iteration   3: 586.811 ns/op
Iteration   4: 583.323 ns/op
Iteration   5: 583.815 ns/op
Iteration   6: 585.599 ns/op
Iteration   7: 583.954 ns/op
Iteration   8: 582.050 ns/op
Iteration   9: 583.941 ns/op
Iteration  10: 582.133 ns/op
Iteration  11: 582.020 ns/op
Iteration  12: 583.204 ns/op
Iteration  13: 582.178 ns/op
Iteration  14: 582.628 ns/op
Iteration  15: 583.952 ns/op
Iteration  16: 583.335 ns/op
Iteration  17: 584.547 ns/op
Iteration  18: 587.471 ns/op
Iteration  19: 583.059 ns/op
Iteration  20: 582.799 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1012.170 ns/op
# Warmup Iteration   2: 669.645 ns/op
# Warmup Iteration   3: 601.684 ns/op
# Warmup Iteration   4: 603.759 ns/op
# Warmup Iteration   5: 624.215 ns/op
Iteration   1: 596.933 ns/op
Iteration   2: 596.724 ns/op
Iteration   3: 599.721 ns/op
Iteration   4: 596.952 ns/op
Iteration   5: 597.036 ns/op
Iteration   6: 599.286 ns/op
Iteration   7: 602.216 ns/op
Iteration   8: 594.471 ns/op
Iteration   9: 597.079 ns/op
Iteration  10: 596.625 ns/op
Iteration  11: 594.780 ns/op
Iteration  12: 594.696 ns/op
Iteration  13: 594.581 ns/op
Iteration  14: 595.878 ns/op
Iteration  15: 594.748 ns/op
Iteration  16: 595.396 ns/op
Iteration  17: 597.054 ns/op
Iteration  18: 595.418 ns/op
Iteration  19: 596.527 ns/op
Iteration  20: 596.536 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1002.314 ns/op
# Warmup Iteration   2: 648.157 ns/op
# Warmup Iteration   3: 588.584 ns/op
# Warmup Iteration   4: 600.432 ns/op
# Warmup Iteration   5: 602.908 ns/op
Iteration   1: 583.758 ns/op
Iteration   2: 584.654 ns/op
Iteration   3: 586.519 ns/op
Iteration   4: 584.175 ns/op
Iteration   5: 584.470 ns/op
Iteration   6: 586.844 ns/op
Iteration   7: 583.959 ns/op
Iteration   8: 583.273 ns/op
Iteration   9: 583.920 ns/op
Iteration  10: 582.746 ns/op
Iteration  11: 583.072 ns/op
Iteration  12: 585.102 ns/op
Iteration  13: 583.204 ns/op
Iteration  14: 583.545 ns/op
Iteration  15: 587.381 ns/op
Iteration  16: 584.497 ns/op
Iteration  17: 584.708 ns/op
Iteration  18: 586.274 ns/op
Iteration  19: 583.960 ns/op
Iteration  20: 584.263 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1007.160 ns/op
# Warmup Iteration   2: 654.788 ns/op
# Warmup Iteration   3: 594.133 ns/op
# Warmup Iteration   4: 598.084 ns/op
# Warmup Iteration   5: 617.083 ns/op
Iteration   1: 589.171 ns/op
Iteration   2: 589.280 ns/op
Iteration   3: 592.403 ns/op
Iteration   4: 588.649 ns/op
Iteration   5: 588.991 ns/op
Iteration   6: 592.188 ns/op
Iteration   7: 588.523 ns/op
Iteration   8: 586.616 ns/op
Iteration   9: 594.122 ns/op
Iteration  10: 586.979 ns/op
Iteration  11: 586.648 ns/op
Iteration  12: 587.121 ns/op
Iteration  13: 588.726 ns/op
Iteration  14: 586.943 ns/op
Iteration  15: 586.941 ns/op
Iteration  16: 597.251 ns/op
Iteration  17: 587.863 ns/op
Iteration  18: 586.561 ns/op
Iteration  19: 589.660 ns/op
Iteration  20: 588.426 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1004.938 ns/op
# Warmup Iteration   2: 649.814 ns/op
# Warmup Iteration   3: 589.954 ns/op
# Warmup Iteration   4: 600.323 ns/op
# Warmup Iteration   5: 604.062 ns/op
Iteration   1: 584.526 ns/op
Iteration   2: 584.512 ns/op
Iteration   3: 588.469 ns/op
Iteration   4: 585.383 ns/op
Iteration   5: 585.659 ns/op
Iteration   6: 587.947 ns/op
Iteration   7: 585.773 ns/op
Iteration   8: 584.317 ns/op
Iteration   9: 585.086 ns/op
Iteration  10: 584.423 ns/op
Iteration  11: 584.216 ns/op
Iteration  12: 586.641 ns/op
Iteration  13: 585.540 ns/op
Iteration  14: 585.196 ns/op
Iteration  15: 587.123 ns/op
Iteration  16: 584.889 ns/op
Iteration  17: 584.986 ns/op
Iteration  18: 586.361 ns/op
Iteration  19: 583.002 ns/op
Iteration  20: 583.836 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  587.885 ±(99.9%) 1.736 ns/op [Average]
  (min, avg, max) = (582.020, 587.885, 602.216), stdev = 5.117
  CI (99.9%): [586.149, 589.620] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   

  	  
				  	
	  

	   


						,		  	
 	 
  

 				)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1050.473 ns/op
# Warmup Iteration   2: 675.140 ns/op
# Warmup Iteration   3: 608.734 ns/op
# Warmup Iteration   4: 610.462 ns/op
# Warmup Iteration   5: 631.696 ns/op
Iteration   1: 603.825 ns/op
Iteration   2: 603.577 ns/op
Iteration   3: 605.648 ns/op
Iteration   4: 602.833 ns/op
Iteration   5: 603.150 ns/op
Iteration   6: 606.990 ns/op
Iteration   7: 603.565 ns/op
Iteration   8: 601.438 ns/op
Iteration   9: 602.038 ns/op
Iteration  10: 601.185 ns/op
Iteration  11: 601.126 ns/op
Iteration  12: 600.973 ns/op
Iteration  13: 603.169 ns/op
Iteration  14: 601.389 ns/op
Iteration  15: 602.056 ns/op
Iteration  16: 605.769 ns/op
Iteration  17: 602.651 ns/op
Iteration  18: 603.414 ns/op
Iteration  19: 605.012 ns/op
Iteration  20: 602.123 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1056.216 ns/op
# Warmup Iteration   2: 675.074 ns/op
# Warmup Iteration   3: 609.123 ns/op
# Warmup Iteration   4: 612.351 ns/op
# Warmup Iteration   5: 639.384 ns/op
Iteration   1: 605.495 ns/op
Iteration   2: 605.291 ns/op
Iteration   3: 607.558 ns/op
Iteration   4: 605.012 ns/op
Iteration   5: 604.971 ns/op
Iteration   6: 607.387 ns/op
Iteration   7: 604.919 ns/op
Iteration   8: 603.100 ns/op
Iteration   9: 603.022 ns/op
Iteration  10: 604.311 ns/op
Iteration  11: 603.996 ns/op
Iteration  12: 606.650 ns/op
Iteration  13: 605.986 ns/op
Iteration  14: 604.893 ns/op
Iteration  15: 603.267 ns/op
Iteration  16: 606.544 ns/op
Iteration  17: 603.837 ns/op
Iteration  18: 604.189 ns/op
Iteration  19: 606.002 ns/op
Iteration  20: 604.948 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1051.545 ns/op
# Warmup Iteration   2: 672.345 ns/op
# Warmup Iteration   3: 608.600 ns/op
# Warmup Iteration   4: 610.893 ns/op
# Warmup Iteration   5: 631.684 ns/op
Iteration   1: 603.264 ns/op
Iteration   2: 603.613 ns/op
Iteration   3: 606.400 ns/op
Iteration   4: 603.546 ns/op
Iteration   5: 603.755 ns/op
Iteration   6: 606.088 ns/op
Iteration   7: 607.248 ns/op
Iteration   8: 602.421 ns/op
Iteration   9: 602.034 ns/op
Iteration  10: 600.955 ns/op
Iteration  11: 600.573 ns/op
Iteration  12: 600.833 ns/op
Iteration  13: 603.452 ns/op
Iteration  14: 601.623 ns/op
Iteration  15: 601.925 ns/op
Iteration  16: 607.106 ns/op
Iteration  17: 608.849 ns/op
Iteration  18: 605.280 ns/op
Iteration  19: 603.163 ns/op
Iteration  20: 601.354 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1055.884 ns/op
# Warmup Iteration   2: 659.238 ns/op
# Warmup Iteration   3: 594.084 ns/op
# Warmup Iteration   4: 609.795 ns/op
# Warmup Iteration   5: 603.563 ns/op
Iteration   1: 588.779 ns/op
Iteration   2: 592.461 ns/op
Iteration   3: 588.911 ns/op
Iteration   4: 589.522 ns/op
Iteration   5: 592.200 ns/op
Iteration   6: 589.155 ns/op
Iteration   7: 589.517 ns/op
Iteration   8: 590.440 ns/op
Iteration   9: 592.063 ns/op
Iteration  10: 588.538 ns/op
Iteration  11: 589.938 ns/op
Iteration  12: 588.741 ns/op
Iteration  13: 588.807 ns/op
Iteration  14: 590.240 ns/op
Iteration  15: 589.763 ns/op
Iteration  16: 592.494 ns/op
Iteration  17: 589.676 ns/op
Iteration  18: 592.953 ns/op
Iteration  19: 590.775 ns/op
Iteration  20: 597.430 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1064.461 ns/op
# Warmup Iteration   2: 687.589 ns/op
# Warmup Iteration   3: 617.759 ns/op
# Warmup Iteration   4: 619.492 ns/op
# Warmup Iteration   5: 641.200 ns/op
Iteration   1: 612.147 ns/op
Iteration   2: 613.612 ns/op
Iteration   3: 613.692 ns/op
Iteration   4: 616.174 ns/op
Iteration   5: 613.394 ns/op
Iteration   6: 612.594 ns/op
Iteration   7: 616.583 ns/op
Iteration   8: 612.309 ns/op
Iteration   9: 611.411 ns/op
Iteration  10: 613.075 ns/op
Iteration  11: 611.672 ns/op
Iteration  12: 611.882 ns/op
Iteration  13: 612.588 ns/op
Iteration  14: 614.312 ns/op
Iteration  15: 611.773 ns/op
Iteration  16: 611.154 ns/op
Iteration  17: 612.787 ns/op
Iteration  18: 610.918 ns/op
Iteration  19: 611.444 ns/op
Iteration  20: 611.597 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  603.043 ±(99.9%) 2.503 ns/op [Average]
  (min, avg, max) = (588.538, 603.043, 616.583), stdev = 7.382
  CI (99.9%): [600.540, 605.547] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    

  	  
				  	
	  

	   


						,		  	
 	 
  

 				  avgt  100  587.885 ± 1.736  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    

  	  
				  	
	  

	   


						,		  	
 	 
  

 				  avgt  100  603.043 ± 2.503  ns/op

Benchmark result is saved to split_precompiled_regex_155_100_Match.csv
