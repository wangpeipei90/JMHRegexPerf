# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

,
	 	

		 		

	 	
 
		  		
 		


 				

	  


 	
  
   			
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1073.311 ns/op
# Warmup Iteration   2: 730.697 ns/op
# Warmup Iteration   3: 659.410 ns/op
# Warmup Iteration   4: 655.937 ns/op
# Warmup Iteration   5: 659.634 ns/op
Iteration   1: 663.470 ns/op
Iteration   2: 651.742 ns/op
Iteration   3: 648.421 ns/op
Iteration   4: 647.983 ns/op
Iteration   5: 647.816 ns/op
Iteration   6: 648.160 ns/op
Iteration   7: 651.705 ns/op
Iteration   8: 648.732 ns/op
Iteration   9: 649.722 ns/op
Iteration  10: 651.361 ns/op
Iteration  11: 646.581 ns/op
Iteration  12: 648.236 ns/op
Iteration  13: 646.025 ns/op
Iteration  14: 646.612 ns/op
Iteration  15: 646.741 ns/op
Iteration  16: 646.597 ns/op
Iteration  17: 646.191 ns/op
Iteration  18: 648.863 ns/op
Iteration  19: 647.932 ns/op
Iteration  20: 649.782 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1069.975 ns/op
# Warmup Iteration   2: 730.802 ns/op
# Warmup Iteration   3: 661.944 ns/op
# Warmup Iteration   4: 659.368 ns/op
# Warmup Iteration   5: 660.875 ns/op
Iteration   1: 665.101 ns/op
Iteration   2: 653.125 ns/op
Iteration   3: 649.618 ns/op
Iteration   4: 649.861 ns/op
Iteration   5: 650.067 ns/op
Iteration   6: 649.925 ns/op
Iteration   7: 654.531 ns/op
Iteration   8: 649.614 ns/op
Iteration   9: 647.554 ns/op
Iteration  10: 647.347 ns/op
Iteration  11: 648.019 ns/op
Iteration  12: 647.759 ns/op
Iteration  13: 650.063 ns/op
Iteration  14: 648.125 ns/op
Iteration  15: 648.218 ns/op
Iteration  16: 647.943 ns/op
Iteration  17: 648.068 ns/op
Iteration  18: 651.186 ns/op
Iteration  19: 648.471 ns/op
Iteration  20: 649.109 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1068.542 ns/op
# Warmup Iteration   2: 727.700 ns/op
# Warmup Iteration   3: 660.491 ns/op
# Warmup Iteration   4: 656.659 ns/op
# Warmup Iteration   5: 659.925 ns/op
Iteration   1: 664.820 ns/op
Iteration   2: 652.372 ns/op
Iteration   3: 647.632 ns/op
Iteration   4: 648.615 ns/op
Iteration   5: 648.958 ns/op
Iteration   6: 648.251 ns/op
Iteration   7: 651.568 ns/op
Iteration   8: 649.040 ns/op
Iteration   9: 647.045 ns/op
Iteration  10: 645.898 ns/op
Iteration  11: 644.954 ns/op
Iteration  12: 652.831 ns/op
Iteration  13: 646.114 ns/op
Iteration  14: 646.697 ns/op
Iteration  15: 645.935 ns/op
Iteration  16: 646.008 ns/op
Iteration  17: 646.040 ns/op
Iteration  18: 648.123 ns/op
Iteration  19: 646.577 ns/op
Iteration  20: 646.309 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1070.931 ns/op
# Warmup Iteration   2: 727.576 ns/op
# Warmup Iteration   3: 655.956 ns/op
# Warmup Iteration   4: 652.809 ns/op
# Warmup Iteration   5: 656.146 ns/op
Iteration   1: 660.248 ns/op
Iteration   2: 649.369 ns/op
Iteration   3: 645.712 ns/op
Iteration   4: 645.990 ns/op
Iteration   5: 649.532 ns/op
Iteration   6: 645.531 ns/op
Iteration   7: 649.471 ns/op
Iteration   8: 646.814 ns/op
Iteration   9: 644.018 ns/op
Iteration  10: 643.787 ns/op
Iteration  11: 644.105 ns/op
Iteration  12: 645.776 ns/op
Iteration  13: 644.590 ns/op
Iteration  14: 645.414 ns/op
Iteration  15: 644.846 ns/op
Iteration  16: 644.577 ns/op
Iteration  17: 647.188 ns/op
Iteration  18: 645.182 ns/op
Iteration  19: 644.599 ns/op
Iteration  20: 644.695 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1067.447 ns/op
# Warmup Iteration   2: 726.935 ns/op
# Warmup Iteration   3: 659.486 ns/op
# Warmup Iteration   4: 656.319 ns/op
# Warmup Iteration   5: 660.220 ns/op
Iteration   1: 664.408 ns/op
Iteration   2: 651.346 ns/op
Iteration   3: 648.937 ns/op
Iteration   4: 649.015 ns/op
Iteration   5: 649.291 ns/op
Iteration   6: 649.926 ns/op
Iteration   7: 652.223 ns/op
Iteration   8: 648.923 ns/op
Iteration   9: 650.302 ns/op
Iteration  10: 647.235 ns/op
Iteration  11: 647.265 ns/op
Iteration  12: 648.746 ns/op
Iteration  13: 646.957 ns/op
Iteration  14: 647.251 ns/op
Iteration  15: 647.177 ns/op
Iteration  16: 647.556 ns/op
Iteration  17: 647.442 ns/op
Iteration  18: 649.174 ns/op
Iteration  19: 647.065 ns/op
Iteration  20: 647.131 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  648.790 ±(99.9%) 1.375 ns/op [Average]
  (min, avg, max) = (643.787, 648.790, 665.101), stdev = 4.055
  CI (99.9%): [647.415, 650.165] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

,
	 	

		 		

	 	
 
		  		
 		


 				

	  


 	
  
   			
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1053.539 ns/op
# Warmup Iteration   2: 708.868 ns/op
# Warmup Iteration   3: 639.546 ns/op
# Warmup Iteration   4: 641.750 ns/op
# Warmup Iteration   5: 655.427 ns/op
Iteration   1: 642.400 ns/op
Iteration   2: 634.471 ns/op
Iteration   3: 634.074 ns/op
Iteration   4: 634.028 ns/op
Iteration   5: 637.516 ns/op
Iteration   6: 633.942 ns/op
Iteration   7: 634.221 ns/op
Iteration   8: 634.254 ns/op
Iteration   9: 634.167 ns/op
Iteration  10: 632.291 ns/op
Iteration  11: 637.960 ns/op
Iteration  12: 632.701 ns/op
Iteration  13: 634.088 ns/op
Iteration  14: 636.730 ns/op
Iteration  15: 633.108 ns/op
Iteration  16: 633.292 ns/op
Iteration  17: 634.996 ns/op
Iteration  18: 632.517 ns/op
Iteration  19: 632.491 ns/op
Iteration  20: 633.320 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1131.070 ns/op
# Warmup Iteration   2: 747.320 ns/op
# Warmup Iteration   3: 668.817 ns/op
# Warmup Iteration   4: 665.128 ns/op
# Warmup Iteration   5: 668.388 ns/op
Iteration   1: 672.785 ns/op
Iteration   2: 660.550 ns/op
Iteration   3: 655.967 ns/op
Iteration   4: 656.117 ns/op
Iteration   5: 656.707 ns/op
Iteration   6: 656.405 ns/op
Iteration   7: 658.926 ns/op
Iteration   8: 655.992 ns/op
Iteration   9: 659.145 ns/op
Iteration  10: 654.745 ns/op
Iteration  11: 654.429 ns/op
Iteration  12: 655.314 ns/op
Iteration  13: 654.045 ns/op
Iteration  14: 653.892 ns/op
Iteration  15: 654.595 ns/op
Iteration  16: 657.538 ns/op
Iteration  17: 655.498 ns/op
Iteration  18: 656.554 ns/op
Iteration  19: 656.221 ns/op
Iteration  20: 656.434 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1124.667 ns/op
# Warmup Iteration   2: 746.218 ns/op
# Warmup Iteration   3: 671.373 ns/op
# Warmup Iteration   4: 668.036 ns/op
# Warmup Iteration   5: 672.329 ns/op
Iteration   1: 676.893 ns/op
Iteration   2: 668.156 ns/op
Iteration   3: 660.745 ns/op
Iteration   4: 660.819 ns/op
Iteration   5: 661.169 ns/op
Iteration   6: 661.005 ns/op
Iteration   7: 664.310 ns/op
Iteration   8: 665.981 ns/op
Iteration   9: 658.797 ns/op
Iteration  10: 658.900 ns/op
Iteration  11: 658.970 ns/op
Iteration  12: 660.680 ns/op
Iteration  13: 658.995 ns/op
Iteration  14: 659.254 ns/op
Iteration  15: 659.125 ns/op
Iteration  16: 659.654 ns/op
Iteration  17: 683.693 ns/op
Iteration  18: 663.619 ns/op
Iteration  19: 658.824 ns/op
Iteration  20: 659.209 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1126.119 ns/op
# Warmup Iteration   2: 758.984 ns/op
# Warmup Iteration   3: 687.273 ns/op
# Warmup Iteration   4: 678.577 ns/op
# Warmup Iteration   5: 682.551 ns/op
Iteration   1: 685.686 ns/op
Iteration   2: 670.907 ns/op
Iteration   3: 673.657 ns/op
Iteration   4: 670.536 ns/op
Iteration   5: 671.102 ns/op
Iteration   6: 670.584 ns/op
Iteration   7: 670.826 ns/op
Iteration   8: 673.767 ns/op
Iteration   9: 668.593 ns/op
Iteration  10: 668.904 ns/op
Iteration  11: 668.640 ns/op
Iteration  12: 668.359 ns/op
Iteration  13: 668.632 ns/op
Iteration  14: 669.775 ns/op
Iteration  15: 668.670 ns/op
Iteration  16: 668.439 ns/op
Iteration  17: 668.071 ns/op
Iteration  18: 668.260 ns/op
Iteration  19: 669.295 ns/op
Iteration  20: 667.593 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1084.137 ns/op
# Warmup Iteration   2: 736.287 ns/op
# Warmup Iteration   3: 666.597 ns/op
# Warmup Iteration   4: 665.577 ns/op
# Warmup Iteration   5: 668.731 ns/op
Iteration   1: 673.306 ns/op
Iteration   2: 660.465 ns/op
Iteration   3: 656.862 ns/op
Iteration   4: 657.467 ns/op
Iteration   5: 657.494 ns/op
Iteration   6: 657.729 ns/op
Iteration   7: 660.301 ns/op
Iteration   8: 658.366 ns/op
Iteration   9: 655.813 ns/op
Iteration  10: 656.426 ns/op
Iteration  11: 657.396 ns/op
Iteration  12: 655.993 ns/op
Iteration  13: 656.548 ns/op
Iteration  14: 656.978 ns/op
Iteration  15: 656.292 ns/op
Iteration  16: 659.620 ns/op
Iteration  17: 656.792 ns/op
Iteration  18: 656.251 ns/op
Iteration  19: 656.657 ns/op
Iteration  20: 656.773 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  656.670 ±(99.9%) 4.339 ns/op [Average]
  (min, avg, max) = (632.291, 656.670, 685.686), stdev = 12.794
  CI (99.9%): [652.331, 661.010] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

,
	 	

		 		

	 	
 
		  		
 		


 				

	  


 	
  
   			
  avgt  100  648.790 ± 1.375  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

,
	 	

		 		

	 	
 
		  		
 		


 				

	  


 	
  
   			
  avgt  100  656.670 ± 4.339  ns/op

Benchmark result is saved to split_precompiled_regex_87_114_Match.csv
