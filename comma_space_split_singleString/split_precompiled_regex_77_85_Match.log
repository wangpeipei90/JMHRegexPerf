# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 
		
 
		 	 
	  	


		
							 

,		

		
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 959.454 ns/op
# Warmup Iteration   2: 587.050 ns/op
# Warmup Iteration   3: 543.440 ns/op
# Warmup Iteration   4: 557.277 ns/op
# Warmup Iteration   5: 551.001 ns/op
Iteration   1: 541.613 ns/op
Iteration   2: 539.483 ns/op
Iteration   3: 541.876 ns/op
Iteration   4: 539.520 ns/op
Iteration   5: 538.612 ns/op
Iteration   6: 542.022 ns/op
Iteration   7: 537.834 ns/op
Iteration   8: 538.567 ns/op
Iteration   9: 537.670 ns/op
Iteration  10: 538.618 ns/op
Iteration  11: 537.497 ns/op
Iteration  12: 537.449 ns/op
Iteration  13: 538.979 ns/op
Iteration  14: 539.363 ns/op
Iteration  15: 540.327 ns/op
Iteration  16: 539.538 ns/op
Iteration  17: 542.440 ns/op
Iteration  18: 539.367 ns/op
Iteration  19: 539.534 ns/op
Iteration  20: 541.168 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 970.407 ns/op
# Warmup Iteration   2: 601.490 ns/op
# Warmup Iteration   3: 555.667 ns/op
# Warmup Iteration   4: 569.722 ns/op
# Warmup Iteration   5: 563.357 ns/op
Iteration   1: 553.313 ns/op
Iteration   2: 550.678 ns/op
Iteration   3: 550.666 ns/op
Iteration   4: 552.425 ns/op
Iteration   5: 550.094 ns/op
Iteration   6: 552.575 ns/op
Iteration   7: 549.277 ns/op
Iteration   8: 549.459 ns/op
Iteration   9: 550.091 ns/op
Iteration  10: 549.029 ns/op
Iteration  11: 554.949 ns/op
Iteration  12: 549.456 ns/op
Iteration  13: 549.281 ns/op
Iteration  14: 550.648 ns/op
Iteration  15: 549.698 ns/op
Iteration  16: 551.302 ns/op
Iteration  17: 549.569 ns/op
Iteration  18: 549.420 ns/op
Iteration  19: 552.364 ns/op
Iteration  20: 550.660 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 962.331 ns/op
# Warmup Iteration   2: 589.627 ns/op
# Warmup Iteration   3: 544.829 ns/op
# Warmup Iteration   4: 559.532 ns/op
# Warmup Iteration   5: 552.814 ns/op
Iteration   1: 544.531 ns/op
Iteration   2: 540.453 ns/op
Iteration   3: 542.893 ns/op
Iteration   4: 541.101 ns/op
Iteration   5: 540.616 ns/op
Iteration   6: 543.992 ns/op
Iteration   7: 539.812 ns/op
Iteration   8: 539.583 ns/op
Iteration   9: 538.508 ns/op
Iteration  10: 539.839 ns/op
Iteration  11: 538.660 ns/op
Iteration  12: 538.811 ns/op
Iteration  13: 540.882 ns/op
Iteration  14: 539.740 ns/op
Iteration  15: 541.525 ns/op
Iteration  16: 539.331 ns/op
Iteration  17: 541.875 ns/op
Iteration  18: 539.906 ns/op
Iteration  19: 539.145 ns/op
Iteration  20: 541.062 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 968.090 ns/op
# Warmup Iteration   2: 600.771 ns/op
# Warmup Iteration   3: 553.512 ns/op
# Warmup Iteration   4: 569.458 ns/op
# Warmup Iteration   5: 561.338 ns/op
Iteration   1: 551.414 ns/op
Iteration   2: 548.261 ns/op
Iteration   3: 548.784 ns/op
Iteration   4: 550.914 ns/op
Iteration   5: 549.364 ns/op
Iteration   6: 550.887 ns/op
Iteration   7: 546.913 ns/op
Iteration   8: 546.898 ns/op
Iteration   9: 547.784 ns/op
Iteration  10: 547.471 ns/op
Iteration  11: 548.265 ns/op
Iteration  12: 551.368 ns/op
Iteration  13: 547.277 ns/op
Iteration  14: 550.579 ns/op
Iteration  15: 548.686 ns/op
Iteration  16: 551.975 ns/op
Iteration  17: 548.557 ns/op
Iteration  18: 548.136 ns/op
Iteration  19: 549.540 ns/op
Iteration  20: 548.077 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 960.744 ns/op
# Warmup Iteration   2: 593.946 ns/op
# Warmup Iteration   3: 552.220 ns/op
# Warmup Iteration   4: 566.340 ns/op
# Warmup Iteration   5: 560.113 ns/op
Iteration   1: 550.463 ns/op
Iteration   2: 547.415 ns/op
Iteration   3: 547.224 ns/op
Iteration   4: 549.676 ns/op
Iteration   5: 547.053 ns/op
Iteration   6: 553.221 ns/op
Iteration   7: 547.812 ns/op
Iteration   8: 546.055 ns/op
Iteration   9: 547.658 ns/op
Iteration  10: 547.619 ns/op
Iteration  11: 553.939 ns/op
Iteration  12: 546.207 ns/op
Iteration  13: 547.755 ns/op
Iteration  14: 547.417 ns/op
Iteration  15: 548.218 ns/op
Iteration  16: 551.845 ns/op
Iteration  17: 548.602 ns/op
Iteration  18: 550.626 ns/op
Iteration  19: 548.329 ns/op
Iteration  20: 548.097 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  545.751 ±(99.9%) 1.697 ns/op [Average]
  (min, avg, max) = (537.449, 545.751, 554.949), stdev = 5.004
  CI (99.9%): [544.054, 547.448] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 
		
 
		 	 
	  	


		
							 

,		

		
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1001.445 ns/op
# Warmup Iteration   2: 607.382 ns/op
# Warmup Iteration   3: 560.939 ns/op
# Warmup Iteration   4: 574.466 ns/op
# Warmup Iteration   5: 568.342 ns/op
Iteration   1: 557.914 ns/op
Iteration   2: 554.725 ns/op
Iteration   3: 555.144 ns/op
Iteration   4: 557.367 ns/op
Iteration   5: 554.630 ns/op
Iteration   6: 557.629 ns/op
Iteration   7: 552.804 ns/op
Iteration   8: 553.816 ns/op
Iteration   9: 552.639 ns/op
Iteration  10: 552.523 ns/op
Iteration  11: 554.039 ns/op
Iteration  12: 553.440 ns/op
Iteration  13: 554.486 ns/op
Iteration  14: 552.831 ns/op
Iteration  15: 555.281 ns/op
Iteration  16: 553.003 ns/op
Iteration  17: 554.245 ns/op
Iteration  18: 555.014 ns/op
Iteration  19: 553.386 ns/op
Iteration  20: 555.221 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 982.087 ns/op
# Warmup Iteration   2: 606.568 ns/op
# Warmup Iteration   3: 565.732 ns/op
# Warmup Iteration   4: 580.254 ns/op
# Warmup Iteration   5: 573.763 ns/op
Iteration   1: 565.125 ns/op
Iteration   2: 561.563 ns/op
Iteration   3: 560.835 ns/op
Iteration   4: 562.602 ns/op
Iteration   5: 560.824 ns/op
Iteration   6: 565.457 ns/op
Iteration   7: 558.712 ns/op
Iteration   8: 558.781 ns/op
Iteration   9: 559.809 ns/op
Iteration  10: 559.006 ns/op
Iteration  11: 560.657 ns/op
Iteration  12: 559.918 ns/op
Iteration  13: 562.463 ns/op
Iteration  14: 560.202 ns/op
Iteration  15: 559.039 ns/op
Iteration  16: 561.093 ns/op
Iteration  17: 559.067 ns/op
Iteration  18: 560.177 ns/op
Iteration  19: 559.305 ns/op
Iteration  20: 566.492 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1014.106 ns/op
# Warmup Iteration   2: 621.388 ns/op
# Warmup Iteration   3: 568.671 ns/op
# Warmup Iteration   4: 583.601 ns/op
# Warmup Iteration   5: 577.088 ns/op
Iteration   1: 566.443 ns/op
Iteration   2: 563.909 ns/op
Iteration   3: 563.927 ns/op
Iteration   4: 566.290 ns/op
Iteration   5: 563.527 ns/op
Iteration   6: 569.193 ns/op
Iteration   7: 562.252 ns/op
Iteration   8: 562.203 ns/op
Iteration   9: 563.937 ns/op
Iteration  10: 562.856 ns/op
Iteration  11: 565.111 ns/op
Iteration  12: 564.007 ns/op
Iteration  13: 564.420 ns/op
Iteration  14: 566.393 ns/op
Iteration  15: 564.072 ns/op
Iteration  16: 567.840 ns/op
Iteration  17: 565.105 ns/op
Iteration  18: 564.402 ns/op
Iteration  19: 567.516 ns/op
Iteration  20: 563.497 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1016.751 ns/op
# Warmup Iteration   2: 607.527 ns/op
# Warmup Iteration   3: 555.792 ns/op
# Warmup Iteration   4: 570.916 ns/op
# Warmup Iteration   5: 563.771 ns/op
Iteration   1: 554.008 ns/op
Iteration   2: 551.494 ns/op
Iteration   3: 553.841 ns/op
Iteration   4: 551.400 ns/op
Iteration   5: 551.780 ns/op
Iteration   6: 553.967 ns/op
Iteration   7: 551.532 ns/op
Iteration   8: 550.172 ns/op
Iteration   9: 550.054 ns/op
Iteration  10: 550.679 ns/op
Iteration  11: 549.616 ns/op
Iteration  12: 551.020 ns/op
Iteration  13: 553.520 ns/op
Iteration  14: 551.439 ns/op
Iteration  15: 554.296 ns/op
Iteration  16: 551.175 ns/op
Iteration  17: 551.510 ns/op
Iteration  18: 549.879 ns/op
Iteration  19: 550.273 ns/op
Iteration  20: 552.650 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 975.804 ns/op
# Warmup Iteration   2: 605.489 ns/op
# Warmup Iteration   3: 557.954 ns/op
# Warmup Iteration   4: 572.725 ns/op
# Warmup Iteration   5: 564.877 ns/op
Iteration   1: 555.855 ns/op
Iteration   2: 553.828 ns/op
Iteration   3: 556.142 ns/op
Iteration   4: 556.545 ns/op
Iteration   5: 553.447 ns/op
Iteration   6: 556.345 ns/op
Iteration   7: 552.574 ns/op
Iteration   8: 555.986 ns/op
Iteration   9: 553.317 ns/op
Iteration  10: 553.572 ns/op
Iteration  11: 551.816 ns/op
Iteration  12: 551.353 ns/op
Iteration  13: 552.528 ns/op
Iteration  14: 551.411 ns/op
Iteration  15: 552.813 ns/op
Iteration  16: 551.943 ns/op
Iteration  17: 553.354 ns/op
Iteration  18: 551.826 ns/op
Iteration  19: 552.455 ns/op
Iteration  20: 555.348 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  557.149 ±(99.9%) 1.800 ns/op [Average]
  (min, avg, max) = (549.616, 557.149, 569.193), stdev = 5.308
  CI (99.9%): [555.349, 558.950] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
 
		
 
		 	 
	  	


		
							 

,		

		
	  avgt  100  545.751 ± 1.697  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
 
		
 
		 	 
	  	


		
							 

,		

		
	  avgt  100  557.149 ± 1.800  ns/op

Benchmark result is saved to split_precompiled_regex_77_85_Match.csv
