# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 		   	

   
 		      

	

  	   
	 		
  	 	
  

	,	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1030.461 ns/op
# Warmup Iteration   2: 674.370 ns/op
# Warmup Iteration   3: 606.643 ns/op
# Warmup Iteration   4: 608.800 ns/op
# Warmup Iteration   5: 629.558 ns/op
Iteration   1: 601.740 ns/op
Iteration   2: 601.627 ns/op
Iteration   3: 601.152 ns/op
Iteration   4: 603.935 ns/op
Iteration   5: 601.672 ns/op
Iteration   6: 601.374 ns/op
Iteration   7: 604.354 ns/op
Iteration   8: 600.547 ns/op
Iteration   9: 601.540 ns/op
Iteration  10: 599.079 ns/op
Iteration  11: 600.350 ns/op
Iteration  12: 599.518 ns/op
Iteration  13: 599.362 ns/op
Iteration  14: 601.416 ns/op
Iteration  15: 600.157 ns/op
Iteration  16: 600.796 ns/op
Iteration  17: 600.898 ns/op
Iteration  18: 601.869 ns/op
Iteration  19: 600.267 ns/op
Iteration  20: 601.345 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1035.427 ns/op
# Warmup Iteration   2: 676.540 ns/op
# Warmup Iteration   3: 605.020 ns/op
# Warmup Iteration   4: 607.665 ns/op
# Warmup Iteration   5: 628.817 ns/op
Iteration   1: 600.226 ns/op
Iteration   2: 600.017 ns/op
Iteration   3: 600.626 ns/op
Iteration   4: 602.878 ns/op
Iteration   5: 599.885 ns/op
Iteration   6: 600.029 ns/op
Iteration   7: 604.852 ns/op
Iteration   8: 599.193 ns/op
Iteration   9: 598.426 ns/op
Iteration  10: 602.408 ns/op
Iteration  11: 599.166 ns/op
Iteration  12: 598.088 ns/op
Iteration  13: 597.831 ns/op
Iteration  14: 599.906 ns/op
Iteration  15: 598.486 ns/op
Iteration  16: 598.123 ns/op
Iteration  17: 599.993 ns/op
Iteration  18: 599.263 ns/op
Iteration  19: 598.620 ns/op
Iteration  20: 598.010 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1020.331 ns/op
# Warmup Iteration   2: 668.830 ns/op
# Warmup Iteration   3: 606.257 ns/op
# Warmup Iteration   4: 608.802 ns/op
# Warmup Iteration   5: 629.105 ns/op
Iteration   1: 602.631 ns/op
Iteration   2: 602.050 ns/op
Iteration   3: 601.809 ns/op
Iteration   4: 604.478 ns/op
Iteration   5: 601.831 ns/op
Iteration   6: 602.025 ns/op
Iteration   7: 604.404 ns/op
Iteration   8: 599.940 ns/op
Iteration   9: 599.965 ns/op
Iteration  10: 600.000 ns/op
Iteration  11: 600.779 ns/op
Iteration  12: 600.171 ns/op
Iteration  13: 600.081 ns/op
Iteration  14: 602.163 ns/op
Iteration  15: 600.034 ns/op
Iteration  16: 600.017 ns/op
Iteration  17: 601.926 ns/op
Iteration  18: 608.543 ns/op
Iteration  19: 601.030 ns/op
Iteration  20: 601.277 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1009.152 ns/op
# Warmup Iteration   2: 643.446 ns/op
# Warmup Iteration   3: 585.528 ns/op
# Warmup Iteration   4: 600.987 ns/op
# Warmup Iteration   5: 595.057 ns/op
Iteration   1: 582.559 ns/op
Iteration   2: 581.173 ns/op
Iteration   3: 585.535 ns/op
Iteration   4: 580.193 ns/op
Iteration   5: 580.527 ns/op
Iteration   6: 583.584 ns/op
Iteration   7: 580.926 ns/op
Iteration   8: 579.006 ns/op
Iteration   9: 584.519 ns/op
Iteration  10: 579.497 ns/op
Iteration  11: 579.861 ns/op
Iteration  12: 580.707 ns/op
Iteration  13: 579.268 ns/op
Iteration  14: 579.767 ns/op
Iteration  15: 581.083 ns/op
Iteration  16: 579.100 ns/op
Iteration  17: 579.445 ns/op
Iteration  18: 581.194 ns/op
Iteration  19: 580.089 ns/op
Iteration  20: 580.411 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1023.642 ns/op
# Warmup Iteration   2: 674.086 ns/op
# Warmup Iteration   3: 609.290 ns/op
# Warmup Iteration   4: 611.922 ns/op
# Warmup Iteration   5: 635.794 ns/op
Iteration   1: 604.957 ns/op
Iteration   2: 604.729 ns/op
Iteration   3: 606.688 ns/op
Iteration   4: 607.725 ns/op
Iteration   5: 603.808 ns/op
Iteration   6: 604.126 ns/op
Iteration   7: 606.767 ns/op
Iteration   8: 602.091 ns/op
Iteration   9: 602.054 ns/op
Iteration  10: 602.044 ns/op
Iteration  11: 603.036 ns/op
Iteration  12: 602.185 ns/op
Iteration  13: 602.138 ns/op
Iteration  14: 603.458 ns/op
Iteration  15: 602.426 ns/op
Iteration  16: 602.134 ns/op
Iteration  17: 603.799 ns/op
Iteration  18: 603.848 ns/op
Iteration  19: 602.196 ns/op
Iteration  20: 602.145 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  597.450 ±(99.9%) 2.908 ns/op [Average]
  (min, avg, max) = (579.006, 597.450, 608.543), stdev = 8.575
  CI (99.9%): [594.541, 600.358] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 		   	

   
 		      

	

  	   
	 		
  	 	
  

	,	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1077.380 ns/op
# Warmup Iteration   2: 702.616 ns/op
# Warmup Iteration   3: 630.660 ns/op
# Warmup Iteration   4: 633.973 ns/op
# Warmup Iteration   5: 655.007 ns/op
Iteration   1: 626.955 ns/op
Iteration   2: 629.511 ns/op
Iteration   3: 626.158 ns/op
Iteration   4: 629.081 ns/op
Iteration   5: 626.073 ns/op
Iteration   6: 625.780 ns/op
Iteration   7: 625.539 ns/op
Iteration   8: 627.019 ns/op
Iteration   9: 624.706 ns/op
Iteration  10: 624.962 ns/op
Iteration  11: 625.035 ns/op
Iteration  12: 625.688 ns/op
Iteration  13: 624.997 ns/op
Iteration  14: 625.312 ns/op
Iteration  15: 625.327 ns/op
Iteration  16: 626.832 ns/op
Iteration  17: 625.582 ns/op
Iteration  18: 625.068 ns/op
Iteration  19: 627.566 ns/op
Iteration  20: 626.706 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1070.447 ns/op
# Warmup Iteration   2: 693.239 ns/op
# Warmup Iteration   3: 621.681 ns/op
# Warmup Iteration   4: 624.082 ns/op
# Warmup Iteration   5: 647.477 ns/op
Iteration   1: 618.748 ns/op
Iteration   2: 616.520 ns/op
Iteration   3: 615.781 ns/op
Iteration   4: 618.907 ns/op
Iteration   5: 616.353 ns/op
Iteration   6: 616.257 ns/op
Iteration   7: 619.748 ns/op
Iteration   8: 614.312 ns/op
Iteration   9: 616.224 ns/op
Iteration  10: 614.391 ns/op
Iteration  11: 615.972 ns/op
Iteration  12: 619.781 ns/op
Iteration  13: 614.955 ns/op
Iteration  14: 617.633 ns/op
Iteration  15: 614.323 ns/op
Iteration  16: 615.376 ns/op
Iteration  17: 616.238 ns/op
Iteration  18: 618.288 ns/op
Iteration  19: 614.969 ns/op
Iteration  20: 615.153 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1076.829 ns/op
# Warmup Iteration   2: 684.847 ns/op
# Warmup Iteration   3: 611.305 ns/op
# Warmup Iteration   4: 613.521 ns/op
# Warmup Iteration   5: 634.674 ns/op
Iteration   1: 606.817 ns/op
Iteration   2: 606.054 ns/op
Iteration   3: 610.127 ns/op
Iteration   4: 605.821 ns/op
Iteration   5: 606.025 ns/op
Iteration   6: 606.140 ns/op
Iteration   7: 609.173 ns/op
Iteration   8: 605.237 ns/op
Iteration   9: 604.714 ns/op
Iteration  10: 606.128 ns/op
Iteration  11: 608.476 ns/op
Iteration  12: 607.456 ns/op
Iteration  13: 607.077 ns/op
Iteration  14: 606.251 ns/op
Iteration  15: 605.626 ns/op
Iteration  16: 607.787 ns/op
Iteration  17: 607.010 ns/op
Iteration  18: 606.831 ns/op
Iteration  19: 606.336 ns/op
Iteration  20: 609.647 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1064.869 ns/op
# Warmup Iteration   2: 660.567 ns/op
# Warmup Iteration   3: 596.878 ns/op
# Warmup Iteration   4: 611.968 ns/op
# Warmup Iteration   5: 605.702 ns/op
Iteration   1: 594.068 ns/op
Iteration   2: 594.765 ns/op
Iteration   3: 592.379 ns/op
Iteration   4: 592.070 ns/op
Iteration   5: 594.679 ns/op
Iteration   6: 591.971 ns/op
Iteration   7: 592.421 ns/op
Iteration   8: 591.631 ns/op
Iteration   9: 590.140 ns/op
Iteration  10: 590.292 ns/op
Iteration  11: 591.995 ns/op
Iteration  12: 590.473 ns/op
Iteration  13: 594.744 ns/op
Iteration  14: 592.642 ns/op
Iteration  15: 589.924 ns/op
Iteration  16: 590.578 ns/op
Iteration  17: 593.067 ns/op
Iteration  18: 590.665 ns/op
Iteration  19: 590.639 ns/op
Iteration  20: 592.280 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1036.741 ns/op
# Warmup Iteration   2: 669.629 ns/op
# Warmup Iteration   3: 609.560 ns/op
# Warmup Iteration   4: 616.963 ns/op
# Warmup Iteration   5: 628.103 ns/op
Iteration   1: 605.880 ns/op
Iteration   2: 604.638 ns/op
Iteration   3: 607.972 ns/op
Iteration   4: 603.859 ns/op
Iteration   5: 604.064 ns/op
Iteration   6: 608.146 ns/op
Iteration   7: 604.704 ns/op
Iteration   8: 601.944 ns/op
Iteration   9: 603.065 ns/op
Iteration  10: 602.049 ns/op
Iteration  11: 602.071 ns/op
Iteration  12: 601.861 ns/op
Iteration  13: 604.059 ns/op
Iteration  14: 602.491 ns/op
Iteration  15: 602.976 ns/op
Iteration  16: 604.492 ns/op
Iteration  17: 605.992 ns/op
Iteration  18: 603.092 ns/op
Iteration  19: 607.234 ns/op
Iteration  20: 604.295 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  609.189 ±(99.9%) 3.969 ns/op [Average]
  (min, avg, max) = (589.924, 609.189, 629.511), stdev = 11.702
  CI (99.9%): [605.220, 613.157] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 		   	

   
 		      

	

  	   
	 		
  	 	
  

	,	  avgt  100  597.450 ± 2.908  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 		   	

   
 		      

	

  	   
	 		
  	 	
  

	,	  avgt  100  609.189 ± 3.969  ns/op

Benchmark result is saved to split_precompiled_regex_223_112_Match.csv
