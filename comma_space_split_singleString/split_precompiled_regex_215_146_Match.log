# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 			
 	 	
 	
  	 	
	 		


		


	  
 
, 

	 	

 
 	 
	 	


 	

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1163.829 ns/op
# Warmup Iteration   2: 772.753 ns/op
# Warmup Iteration   3: 684.088 ns/op
# Warmup Iteration   4: 676.528 ns/op
# Warmup Iteration   5: 680.517 ns/op
Iteration   1: 684.589 ns/op
Iteration   2: 669.560 ns/op
Iteration   3: 669.290 ns/op
Iteration   4: 672.610 ns/op
Iteration   5: 668.782 ns/op
Iteration   6: 669.405 ns/op
Iteration   7: 669.363 ns/op
Iteration   8: 669.047 ns/op
Iteration   9: 669.091 ns/op
Iteration  10: 668.180 ns/op
Iteration  11: 667.023 ns/op
Iteration  12: 671.756 ns/op
Iteration  13: 666.918 ns/op
Iteration  14: 666.978 ns/op
Iteration  15: 668.096 ns/op
Iteration  16: 668.128 ns/op
Iteration  17: 669.613 ns/op
Iteration  18: 668.060 ns/op
Iteration  19: 667.888 ns/op
Iteration  20: 668.332 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1106.288 ns/op
# Warmup Iteration   2: 786.143 ns/op
# Warmup Iteration   3: 696.164 ns/op
# Warmup Iteration   4: 690.459 ns/op
# Warmup Iteration   5: 694.301 ns/op
Iteration   1: 699.122 ns/op
Iteration   2: 684.466 ns/op
Iteration   3: 683.018 ns/op
Iteration   4: 682.974 ns/op
Iteration   5: 686.450 ns/op
Iteration   6: 682.847 ns/op
Iteration   7: 682.904 ns/op
Iteration   8: 683.236 ns/op
Iteration   9: 683.440 ns/op
Iteration  10: 680.538 ns/op
Iteration  11: 680.359 ns/op
Iteration  12: 682.174 ns/op
Iteration  13: 681.024 ns/op
Iteration  14: 681.044 ns/op
Iteration  15: 681.784 ns/op
Iteration  16: 681.197 ns/op
Iteration  17: 681.085 ns/op
Iteration  18: 680.994 ns/op
Iteration  19: 681.431 ns/op
Iteration  20: 685.837 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1107.105 ns/op
# Warmup Iteration   2: 785.758 ns/op
# Warmup Iteration   3: 702.582 ns/op
# Warmup Iteration   4: 698.378 ns/op
# Warmup Iteration   5: 701.640 ns/op
Iteration   1: 705.688 ns/op
Iteration   2: 689.720 ns/op
Iteration   3: 694.882 ns/op
Iteration   4: 690.492 ns/op
Iteration   5: 689.302 ns/op
Iteration   6: 693.261 ns/op
Iteration   7: 693.678 ns/op
Iteration   8: 690.518 ns/op
Iteration   9: 690.637 ns/op
Iteration  10: 691.766 ns/op
Iteration  11: 690.836 ns/op
Iteration  12: 693.149 ns/op
Iteration  13: 689.772 ns/op
Iteration  14: 694.391 ns/op
Iteration  15: 688.719 ns/op
Iteration  16: 689.063 ns/op
Iteration  17: 689.981 ns/op
Iteration  18: 688.723 ns/op
Iteration  19: 689.461 ns/op
Iteration  20: 689.984 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1091.740 ns/op
# Warmup Iteration   2: 764.522 ns/op
# Warmup Iteration   3: 684.298 ns/op
# Warmup Iteration   4: 681.313 ns/op
# Warmup Iteration   5: 683.700 ns/op
Iteration   1: 687.697 ns/op
Iteration   2: 672.283 ns/op
Iteration   3: 672.246 ns/op
Iteration   4: 674.958 ns/op
Iteration   5: 672.012 ns/op
Iteration   6: 671.408 ns/op
Iteration   7: 671.444 ns/op
Iteration   8: 671.276 ns/op
Iteration   9: 671.166 ns/op
Iteration  10: 675.289 ns/op
Iteration  11: 669.083 ns/op
Iteration  12: 668.958 ns/op
Iteration  13: 670.805 ns/op
Iteration  14: 669.921 ns/op
Iteration  15: 670.364 ns/op
Iteration  16: 670.566 ns/op
Iteration  17: 671.431 ns/op
Iteration  18: 669.208 ns/op
Iteration  19: 673.007 ns/op
Iteration  20: 669.510 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1093.407 ns/op
# Warmup Iteration   2: 766.223 ns/op
# Warmup Iteration   3: 689.566 ns/op
# Warmup Iteration   4: 689.606 ns/op
# Warmup Iteration   5: 689.837 ns/op
Iteration   1: 694.744 ns/op
Iteration   2: 678.198 ns/op
Iteration   3: 678.084 ns/op
Iteration   4: 681.416 ns/op
Iteration   5: 677.908 ns/op
Iteration   6: 679.661 ns/op
Iteration   7: 677.412 ns/op
Iteration   8: 678.199 ns/op
Iteration   9: 678.091 ns/op
Iteration  10: 675.604 ns/op
Iteration  11: 679.073 ns/op
Iteration  12: 679.954 ns/op
Iteration  13: 677.884 ns/op
Iteration  14: 676.575 ns/op
Iteration  15: 676.452 ns/op
Iteration  16: 677.101 ns/op
Iteration  17: 678.058 ns/op
Iteration  18: 681.312 ns/op
Iteration  19: 677.621 ns/op
Iteration  20: 676.319 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  679.150 ±(99.9%) 3.005 ns/op [Average]
  (min, avg, max) = (666.918, 679.150, 705.688), stdev = 8.861
  CI (99.9%): [676.144, 682.155] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 			
 	 	
 	
  	 	
	 		


		


	  
 
, 

	 	

 
 	 
	 	


 	

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1163.654 ns/op
# Warmup Iteration   2: 838.959 ns/op
# Warmup Iteration   3: 718.902 ns/op
# Warmup Iteration   4: 714.208 ns/op
# Warmup Iteration   5: 717.956 ns/op
Iteration   1: 721.929 ns/op
Iteration   2: 706.026 ns/op
Iteration   3: 704.995 ns/op
Iteration   4: 706.025 ns/op
Iteration   5: 706.632 ns/op
Iteration   6: 709.391 ns/op
Iteration   7: 706.839 ns/op
Iteration   8: 706.319 ns/op
Iteration   9: 706.201 ns/op
Iteration  10: 704.231 ns/op
Iteration  11: 704.414 ns/op
Iteration  12: 704.314 ns/op
Iteration  13: 703.950 ns/op
Iteration  14: 705.445 ns/op
Iteration  15: 704.167 ns/op
Iteration  16: 704.128 ns/op
Iteration  17: 705.318 ns/op
Iteration  18: 703.955 ns/op
Iteration  19: 705.873 ns/op
Iteration  20: 706.229 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1166.479 ns/op
# Warmup Iteration   2: 800.355 ns/op
# Warmup Iteration   3: 707.393 ns/op
# Warmup Iteration   4: 702.083 ns/op
# Warmup Iteration   5: 705.549 ns/op
Iteration   1: 708.032 ns/op
Iteration   2: 694.281 ns/op
Iteration   3: 693.469 ns/op
Iteration   4: 693.799 ns/op
Iteration   5: 697.260 ns/op
Iteration   6: 693.530 ns/op
Iteration   7: 693.166 ns/op
Iteration   8: 694.764 ns/op
Iteration   9: 696.634 ns/op
Iteration  10: 690.824 ns/op
Iteration  11: 691.353 ns/op
Iteration  12: 692.736 ns/op
Iteration  13: 691.315 ns/op
Iteration  14: 691.029 ns/op
Iteration  15: 691.245 ns/op
Iteration  16: 691.411 ns/op
Iteration  17: 690.897 ns/op
Iteration  18: 691.564 ns/op
Iteration  19: 695.077 ns/op
Iteration  20: 691.461 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1176.253 ns/op
# Warmup Iteration   2: 804.737 ns/op
# Warmup Iteration   3: 704.165 ns/op
# Warmup Iteration   4: 700.367 ns/op
# Warmup Iteration   5: 703.555 ns/op
Iteration   1: 708.110 ns/op
Iteration   2: 692.503 ns/op
Iteration   3: 691.577 ns/op
Iteration   4: 694.549 ns/op
Iteration   5: 691.369 ns/op
Iteration   6: 691.836 ns/op
Iteration   7: 691.986 ns/op
Iteration   8: 691.991 ns/op
Iteration   9: 692.601 ns/op
Iteration  10: 690.540 ns/op
Iteration  11: 691.832 ns/op
Iteration  12: 690.697 ns/op
Iteration  13: 690.708 ns/op
Iteration  14: 690.521 ns/op
Iteration  15: 690.738 ns/op
Iteration  16: 691.357 ns/op
Iteration  17: 696.582 ns/op
Iteration  18: 708.367 ns/op
Iteration  19: 690.568 ns/op
Iteration  20: 690.909 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1161.184 ns/op
# Warmup Iteration   2: 798.621 ns/op
# Warmup Iteration   3: 706.406 ns/op
# Warmup Iteration   4: 702.169 ns/op
# Warmup Iteration   5: 706.126 ns/op
Iteration   1: 709.399 ns/op
Iteration   2: 693.918 ns/op
Iteration   3: 694.255 ns/op
Iteration   4: 698.167 ns/op
Iteration   5: 694.813 ns/op
Iteration   6: 694.084 ns/op
Iteration   7: 694.432 ns/op
Iteration   8: 694.346 ns/op
Iteration   9: 694.709 ns/op
Iteration  10: 692.542 ns/op
Iteration  11: 692.385 ns/op
Iteration  12: 693.372 ns/op
Iteration  13: 691.953 ns/op
Iteration  14: 692.318 ns/op
Iteration  15: 697.707 ns/op
Iteration  16: 692.319 ns/op
Iteration  17: 692.293 ns/op
Iteration  18: 692.775 ns/op
Iteration  19: 693.700 ns/op
Iteration  20: 692.559 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1163.021 ns/op
# Warmup Iteration   2: 823.512 ns/op
# Warmup Iteration   3: 724.360 ns/op
# Warmup Iteration   4: 720.369 ns/op
# Warmup Iteration   5: 724.130 ns/op
Iteration   1: 726.562 ns/op
Iteration   2: 714.283 ns/op
Iteration   3: 711.722 ns/op
Iteration   4: 711.106 ns/op
Iteration   5: 711.158 ns/op
Iteration   6: 716.094 ns/op
Iteration   7: 715.368 ns/op
Iteration   8: 711.274 ns/op
Iteration   9: 712.426 ns/op
Iteration  10: 709.509 ns/op
Iteration  11: 709.640 ns/op
Iteration  12: 709.329 ns/op
Iteration  13: 709.661 ns/op
Iteration  14: 709.763 ns/op
Iteration  15: 712.324 ns/op
Iteration  16: 711.088 ns/op
Iteration  17: 711.343 ns/op
Iteration  18: 711.227 ns/op
Iteration  19: 711.290 ns/op
Iteration  20: 711.449 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  700.082 ±(99.9%) 2.998 ns/op [Average]
  (min, avg, max) = (690.521, 700.082, 726.562), stdev = 8.839
  CI (99.9%): [697.084, 703.080] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  			
 	 	
 	
  	 	
	 		


		


	  
 
, 

	 	

 
 	 
	 	


 	

  avgt  100  679.150 ± 3.005  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  			
 	 	
 	
  	 	
	 		


		


	  
 
, 

	 	

 
 	 
	 	


 	

  avgt  100  700.082 ± 2.998  ns/op

Benchmark result is saved to split_precompiled_regex_215_146_Match.csv
