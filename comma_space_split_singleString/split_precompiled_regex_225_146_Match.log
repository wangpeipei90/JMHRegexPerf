# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

		
		 	
	 		   	
 
 	 

  ,
		

 	  		 
		
	
 





	 	 
	 
 

			 
	

 	   

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1118.104 ns/op
# Warmup Iteration   2: 790.321 ns/op
# Warmup Iteration   3: 700.571 ns/op
# Warmup Iteration   4: 695.735 ns/op
# Warmup Iteration   5: 699.101 ns/op
Iteration   1: 703.186 ns/op
Iteration   2: 687.936 ns/op
Iteration   3: 686.846 ns/op
Iteration   4: 686.295 ns/op
Iteration   5: 690.327 ns/op
Iteration   6: 686.582 ns/op
Iteration   7: 687.713 ns/op
Iteration   8: 687.391 ns/op
Iteration   9: 688.163 ns/op
Iteration  10: 686.498 ns/op
Iteration  11: 686.211 ns/op
Iteration  12: 691.021 ns/op
Iteration  13: 688.234 ns/op
Iteration  14: 686.524 ns/op
Iteration  15: 686.395 ns/op
Iteration  16: 686.882 ns/op
Iteration  17: 686.439 ns/op
Iteration  18: 686.880 ns/op
Iteration  19: 686.735 ns/op
Iteration  20: 686.732 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1137.039 ns/op
# Warmup Iteration   2: 763.269 ns/op
# Warmup Iteration   3: 677.867 ns/op
# Warmup Iteration   4: 673.701 ns/op
# Warmup Iteration   5: 677.293 ns/op
Iteration   1: 681.571 ns/op
Iteration   2: 665.685 ns/op
Iteration   3: 668.939 ns/op
Iteration   4: 665.557 ns/op
Iteration   5: 665.734 ns/op
Iteration   6: 665.693 ns/op
Iteration   7: 665.879 ns/op
Iteration   8: 665.900 ns/op
Iteration   9: 669.259 ns/op
Iteration  10: 663.418 ns/op
Iteration  11: 663.366 ns/op
Iteration  12: 663.893 ns/op
Iteration  13: 663.635 ns/op
Iteration  14: 663.110 ns/op
Iteration  15: 662.216 ns/op
Iteration  16: 663.577 ns/op
Iteration  17: 663.100 ns/op
Iteration  18: 662.445 ns/op
Iteration  19: 662.789 ns/op
Iteration  20: 662.544 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1120.454 ns/op
# Warmup Iteration   2: 796.488 ns/op
# Warmup Iteration   3: 707.698 ns/op
# Warmup Iteration   4: 704.921 ns/op
# Warmup Iteration   5: 707.583 ns/op
Iteration   1: 712.130 ns/op
Iteration   2: 696.999 ns/op
Iteration   3: 695.750 ns/op
Iteration   4: 696.137 ns/op
Iteration   5: 695.769 ns/op
Iteration   6: 699.183 ns/op
Iteration   7: 695.859 ns/op
Iteration   8: 696.185 ns/op
Iteration   9: 696.201 ns/op
Iteration  10: 697.479 ns/op
Iteration  11: 694.199 ns/op
Iteration  12: 695.066 ns/op
Iteration  13: 695.230 ns/op
Iteration  14: 694.611 ns/op
Iteration  15: 696.491 ns/op
Iteration  16: 693.994 ns/op
Iteration  17: 695.664 ns/op
Iteration  18: 694.435 ns/op
Iteration  19: 694.559 ns/op
Iteration  20: 695.197 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1134.286 ns/op
# Warmup Iteration   2: 808.475 ns/op
# Warmup Iteration   3: 713.642 ns/op
# Warmup Iteration   4: 709.583 ns/op
# Warmup Iteration   5: 713.498 ns/op
Iteration   1: 717.449 ns/op
Iteration   2: 701.055 ns/op
Iteration   3: 702.042 ns/op
Iteration   4: 701.077 ns/op
Iteration   5: 700.327 ns/op
Iteration   6: 699.877 ns/op
Iteration   7: 703.549 ns/op
Iteration   8: 701.130 ns/op
Iteration   9: 701.951 ns/op
Iteration  10: 700.203 ns/op
Iteration  11: 699.937 ns/op
Iteration  12: 699.760 ns/op
Iteration  13: 699.792 ns/op
Iteration  14: 699.959 ns/op
Iteration  15: 700.189 ns/op
Iteration  16: 700.312 ns/op
Iteration  17: 704.358 ns/op
Iteration  18: 701.840 ns/op
Iteration  19: 701.305 ns/op
Iteration  20: 701.860 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1082.680 ns/op
# Warmup Iteration   2: 746.372 ns/op
# Warmup Iteration   3: 670.800 ns/op
# Warmup Iteration   4: 666.646 ns/op
# Warmup Iteration   5: 670.327 ns/op
Iteration   1: 672.769 ns/op
Iteration   2: 658.703 ns/op
Iteration   3: 661.436 ns/op
Iteration   4: 658.142 ns/op
Iteration   5: 657.915 ns/op
Iteration   6: 658.855 ns/op
Iteration   7: 659.381 ns/op
Iteration   8: 659.805 ns/op
Iteration   9: 662.069 ns/op
Iteration  10: 658.758 ns/op
Iteration  11: 657.439 ns/op
Iteration  12: 657.607 ns/op
Iteration  13: 657.169 ns/op
Iteration  14: 659.807 ns/op
Iteration  15: 657.664 ns/op
Iteration  16: 657.606 ns/op
Iteration  17: 657.761 ns/op
Iteration  18: 657.827 ns/op
Iteration  19: 657.652 ns/op
Iteration  20: 659.750 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  682.285 ±(99.9%) 5.907 ns/op [Average]
  (min, avg, max) = (657.169, 682.285, 717.449), stdev = 17.416
  CI (99.9%): [676.379, 688.192] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

		
		 	
	 		   	
 
 	 

  ,
		

 	  		 
		
	
 





	 	 
	 
 

			 
	

 	   

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1181.698 ns/op
# Warmup Iteration   2: 847.156 ns/op
# Warmup Iteration   3: 735.751 ns/op
# Warmup Iteration   4: 753.666 ns/op
# Warmup Iteration   5: 744.610 ns/op
Iteration   1: 749.660 ns/op
Iteration   2: 732.818 ns/op
Iteration   3: 732.021 ns/op
Iteration   4: 732.107 ns/op
Iteration   5: 733.490 ns/op
Iteration   6: 733.250 ns/op
Iteration   7: 731.744 ns/op
Iteration   8: 731.758 ns/op
Iteration   9: 731.971 ns/op
Iteration  10: 733.369 ns/op
Iteration  11: 729.340 ns/op
Iteration  12: 729.818 ns/op
Iteration  13: 730.066 ns/op
Iteration  14: 729.837 ns/op
Iteration  15: 730.406 ns/op
Iteration  16: 729.466 ns/op
Iteration  17: 741.312 ns/op
Iteration  18: 729.543 ns/op
Iteration  19: 729.668 ns/op
Iteration  20: 729.994 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1155.416 ns/op
# Warmup Iteration   2: 825.935 ns/op
# Warmup Iteration   3: 733.845 ns/op
# Warmup Iteration   4: 733.387 ns/op
# Warmup Iteration   5: 733.770 ns/op
Iteration   1: 738.065 ns/op
Iteration   2: 721.147 ns/op
Iteration   3: 721.324 ns/op
Iteration   4: 720.509 ns/op
Iteration   5: 722.195 ns/op
Iteration   6: 723.546 ns/op
Iteration   7: 722.192 ns/op
Iteration   8: 726.643 ns/op
Iteration   9: 720.694 ns/op
Iteration  10: 726.478 ns/op
Iteration  11: 725.729 ns/op
Iteration  12: 718.872 ns/op
Iteration  13: 720.593 ns/op
Iteration  14: 719.525 ns/op
Iteration  15: 718.524 ns/op
Iteration  16: 718.470 ns/op
Iteration  17: 719.565 ns/op
Iteration  18: 719.426 ns/op
Iteration  19: 718.214 ns/op
Iteration  20: 718.349 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1191.195 ns/op
# Warmup Iteration   2: 833.781 ns/op
# Warmup Iteration   3: 728.093 ns/op
# Warmup Iteration   4: 731.875 ns/op
# Warmup Iteration   5: 731.924 ns/op
Iteration   1: 735.025 ns/op
Iteration   2: 719.184 ns/op
Iteration   3: 719.531 ns/op
Iteration   4: 719.741 ns/op
Iteration   5: 719.711 ns/op
Iteration   6: 719.586 ns/op
Iteration   7: 718.703 ns/op
Iteration   8: 722.301 ns/op
Iteration   9: 719.065 ns/op
Iteration  10: 721.707 ns/op
Iteration  11: 720.687 ns/op
Iteration  12: 717.285 ns/op
Iteration  13: 717.684 ns/op
Iteration  14: 717.797 ns/op
Iteration  15: 727.888 ns/op
Iteration  16: 717.281 ns/op
Iteration  17: 728.723 ns/op
Iteration  18: 740.880 ns/op
Iteration  19: 724.858 ns/op
Iteration  20: 726.900 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1180.082 ns/op
# Warmup Iteration   2: 817.770 ns/op
# Warmup Iteration   3: 721.781 ns/op
# Warmup Iteration   4: 718.433 ns/op
# Warmup Iteration   5: 722.153 ns/op
Iteration   1: 726.146 ns/op
Iteration   2: 709.551 ns/op
Iteration   3: 708.642 ns/op
Iteration   4: 709.443 ns/op
Iteration   5: 710.359 ns/op
Iteration   6: 712.750 ns/op
Iteration   7: 709.700 ns/op
Iteration   8: 708.996 ns/op
Iteration   9: 709.220 ns/op
Iteration  10: 707.677 ns/op
Iteration  11: 707.341 ns/op
Iteration  12: 707.671 ns/op
Iteration  13: 707.191 ns/op
Iteration  14: 707.303 ns/op
Iteration  15: 710.084 ns/op
Iteration  16: 708.252 ns/op
Iteration  17: 709.262 ns/op
Iteration  18: 709.982 ns/op
Iteration  19: 709.954 ns/op
Iteration  20: 707.824 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1113.513 ns/op
# Warmup Iteration   2: 773.592 ns/op
# Warmup Iteration   3: 697.453 ns/op
# Warmup Iteration   4: 693.648 ns/op
# Warmup Iteration   5: 697.546 ns/op
Iteration   1: 701.687 ns/op
Iteration   2: 685.721 ns/op
Iteration   3: 693.249 ns/op
Iteration   4: 685.745 ns/op
Iteration   5: 685.238 ns/op
Iteration   6: 685.799 ns/op
Iteration   7: 686.053 ns/op
Iteration   8: 685.412 ns/op
Iteration   9: 685.889 ns/op
Iteration  10: 686.981 ns/op
Iteration  11: 683.493 ns/op
Iteration  12: 683.017 ns/op
Iteration  13: 683.013 ns/op
Iteration  14: 683.895 ns/op
Iteration  15: 683.721 ns/op
Iteration  16: 687.613 ns/op
Iteration  17: 685.196 ns/op
Iteration  18: 685.157 ns/op
Iteration  19: 684.975 ns/op
Iteration  20: 685.230 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  714.707 ±(99.9%) 5.657 ns/op [Average]
  (min, avg, max) = (683.013, 714.707, 749.660), stdev = 16.680
  CI (99.9%): [709.049, 720.364] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

		
		 	
	 		   	
 
 	 

  ,
		

 	  		 
		
	
 





	 	 
	 
 

			 
	

 	   

  avgt  100  682.285 ± 5.907  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

		
		 	
	 		   	
 
 	 

  ,
		

 	  		 
		
	
 





	 	 
	 
 

			 
	

 	   

  avgt  100  714.707 ± 5.657  ns/op

Benchmark result is saved to split_precompiled_regex_225_146_Match.csv
