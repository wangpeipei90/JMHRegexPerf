# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = /V%YL$*r{)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 695.317 ns/op
# Warmup Iteration   2: 361.765 ns/op
# Warmup Iteration   3: 361.790 ns/op
# Warmup Iteration   4: 357.226 ns/op
# Warmup Iteration   5: 351.401 ns/op
Iteration   1: 351.865 ns/op
Iteration   2: 351.938 ns/op
Iteration   3: 351.381 ns/op
Iteration   4: 350.802 ns/op
Iteration   5: 349.812 ns/op
Iteration   6: 349.072 ns/op
Iteration   7: 350.934 ns/op
Iteration   8: 348.896 ns/op
Iteration   9: 348.406 ns/op
Iteration  10: 349.421 ns/op
Iteration  11: 349.538 ns/op
Iteration  12: 352.456 ns/op
Iteration  13: 349.604 ns/op
Iteration  14: 350.212 ns/op
Iteration  15: 350.327 ns/op
Iteration  16: 351.316 ns/op
Iteration  17: 351.631 ns/op
Iteration  18: 351.427 ns/op
Iteration  19: 349.691 ns/op
Iteration  20: 351.648 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 680.799 ns/op
# Warmup Iteration   2: 356.930 ns/op
# Warmup Iteration   3: 359.420 ns/op
# Warmup Iteration   4: 356.787 ns/op
# Warmup Iteration   5: 347.170 ns/op
Iteration   1: 347.892 ns/op
Iteration   2: 348.189 ns/op
Iteration   3: 348.181 ns/op
Iteration   4: 347.792 ns/op
Iteration   5: 346.573 ns/op
Iteration   6: 346.374 ns/op
Iteration   7: 346.766 ns/op
Iteration   8: 352.126 ns/op
Iteration   9: 350.604 ns/op
Iteration  10: 350.611 ns/op
Iteration  11: 346.706 ns/op
Iteration  12: 350.124 ns/op
Iteration  13: 348.772 ns/op
Iteration  14: 348.758 ns/op
Iteration  15: 348.323 ns/op
Iteration  16: 348.276 ns/op
Iteration  17: 347.328 ns/op
Iteration  18: 348.215 ns/op
Iteration  19: 347.729 ns/op
Iteration  20: 354.458 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 683.801 ns/op
# Warmup Iteration   2: 360.482 ns/op
# Warmup Iteration   3: 362.501 ns/op
# Warmup Iteration   4: 358.116 ns/op
# Warmup Iteration   5: 354.739 ns/op
Iteration   1: 352.587 ns/op
Iteration   2: 352.764 ns/op
Iteration   3: 352.730 ns/op
Iteration   4: 351.785 ns/op
Iteration   5: 353.195 ns/op
Iteration   6: 351.418 ns/op
Iteration   7: 351.266 ns/op
Iteration   8: 350.008 ns/op
Iteration   9: 351.741 ns/op
Iteration  10: 351.166 ns/op
Iteration  11: 351.381 ns/op
Iteration  12: 351.427 ns/op
Iteration  13: 351.587 ns/op
Iteration  14: 352.689 ns/op
Iteration  15: 352.881 ns/op
Iteration  16: 351.853 ns/op
Iteration  17: 352.326 ns/op
Iteration  18: 351.116 ns/op
Iteration  19: 353.017 ns/op
Iteration  20: 353.032 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 677.087 ns/op
# Warmup Iteration   2: 362.283 ns/op
# Warmup Iteration   3: 362.980 ns/op
# Warmup Iteration   4: 358.674 ns/op
# Warmup Iteration   5: 352.640 ns/op
Iteration   1: 352.630 ns/op
Iteration   2: 352.444 ns/op
Iteration   3: 352.760 ns/op
Iteration   4: 352.177 ns/op
Iteration   5: 351.140 ns/op
Iteration   6: 353.496 ns/op
Iteration   7: 351.550 ns/op
Iteration   8: 351.652 ns/op
Iteration   9: 350.576 ns/op
Iteration  10: 364.065 ns/op
Iteration  11: 356.114 ns/op
Iteration  12: 352.758 ns/op
Iteration  13: 351.899 ns/op
Iteration  14: 351.688 ns/op
Iteration  15: 355.686 ns/op
Iteration  16: 352.308 ns/op
Iteration  17: 369.637 ns/op
Iteration  18: 368.976 ns/op
Iteration  19: 356.788 ns/op
Iteration  20: 353.797 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 683.361 ns/op
# Warmup Iteration   2: 359.420 ns/op
# Warmup Iteration   3: 361.118 ns/op
# Warmup Iteration   4: 357.028 ns/op
# Warmup Iteration   5: 351.116 ns/op
Iteration   1: 350.755 ns/op
Iteration   2: 351.000 ns/op
Iteration   3: 350.495 ns/op
Iteration   4: 350.910 ns/op
Iteration   5: 348.622 ns/op
Iteration   6: 348.244 ns/op
Iteration   7: 348.283 ns/op
Iteration   8: 351.514 ns/op
Iteration   9: 351.663 ns/op
Iteration  10: 348.595 ns/op
Iteration  11: 349.479 ns/op
Iteration  12: 348.587 ns/op
Iteration  13: 348.994 ns/op
Iteration  14: 348.836 ns/op
Iteration  15: 349.340 ns/op
Iteration  16: 349.347 ns/op
Iteration  17: 349.856 ns/op
Iteration  18: 348.950 ns/op
Iteration  19: 349.992 ns/op
Iteration  20: 350.642 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  351.204 ±(99.9%) 1.207 ns/op [Average]
  (min, avg, max) = (346.374, 351.204, 369.637), stdev = 3.558
  CI (99.9%): [349.997, 352.411] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = /V%YL$*r{)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 689.149 ns/op
# Warmup Iteration   2: 365.426 ns/op
# Warmup Iteration   3: 363.439 ns/op
# Warmup Iteration   4: 359.766 ns/op
# Warmup Iteration   5: 352.415 ns/op
Iteration   1: 353.106 ns/op
Iteration   2: 353.016 ns/op
Iteration   3: 352.754 ns/op
Iteration   4: 351.643 ns/op
Iteration   5: 350.897 ns/op
Iteration   6: 353.705 ns/op
Iteration   7: 350.913 ns/op
Iteration   8: 350.359 ns/op
Iteration   9: 350.541 ns/op
Iteration  10: 351.364 ns/op
Iteration  11: 351.361 ns/op
Iteration  12: 352.252 ns/op
Iteration  13: 352.224 ns/op
Iteration  14: 353.633 ns/op
Iteration  15: 354.791 ns/op
Iteration  16: 351.730 ns/op
Iteration  17: 351.271 ns/op
Iteration  18: 353.238 ns/op
Iteration  19: 352.387 ns/op
Iteration  20: 351.992 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 680.236 ns/op
# Warmup Iteration   2: 357.510 ns/op
# Warmup Iteration   3: 359.304 ns/op
# Warmup Iteration   4: 356.884 ns/op
# Warmup Iteration   5: 347.269 ns/op
Iteration   1: 348.721 ns/op
Iteration   2: 349.047 ns/op
Iteration   3: 349.165 ns/op
Iteration   4: 348.554 ns/op
Iteration   5: 346.634 ns/op
Iteration   6: 346.653 ns/op
Iteration   7: 347.721 ns/op
Iteration   8: 348.738 ns/op
Iteration   9: 347.214 ns/op
Iteration  10: 347.293 ns/op
Iteration  11: 348.300 ns/op
Iteration  12: 346.895 ns/op
Iteration  13: 353.790 ns/op
Iteration  14: 352.419 ns/op
Iteration  15: 346.897 ns/op
Iteration  16: 346.843 ns/op
Iteration  17: 348.084 ns/op
Iteration  18: 350.351 ns/op
Iteration  19: 349.632 ns/op
Iteration  20: 347.478 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 693.942 ns/op
# Warmup Iteration   2: 366.862 ns/op
# Warmup Iteration   3: 371.087 ns/op
# Warmup Iteration   4: 366.348 ns/op
# Warmup Iteration   5: 360.384 ns/op
Iteration   1: 359.950 ns/op
Iteration   2: 360.206 ns/op
Iteration   3: 360.042 ns/op
Iteration   4: 359.273 ns/op
Iteration   5: 357.950 ns/op
Iteration   6: 361.442 ns/op
Iteration   7: 358.836 ns/op
Iteration   8: 360.105 ns/op
Iteration   9: 359.706 ns/op
Iteration  10: 359.159 ns/op
Iteration  11: 360.345 ns/op
Iteration  12: 358.643 ns/op
Iteration  13: 360.260 ns/op
Iteration  14: 360.224 ns/op
Iteration  15: 360.404 ns/op
Iteration  16: 360.452 ns/op
Iteration  17: 360.709 ns/op
Iteration  18: 360.439 ns/op
Iteration  19: 357.658 ns/op
Iteration  20: 358.881 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 687.582 ns/op
# Warmup Iteration   2: 364.274 ns/op
# Warmup Iteration   3: 368.602 ns/op
# Warmup Iteration   4: 363.393 ns/op
# Warmup Iteration   5: 357.599 ns/op
Iteration   1: 356.620 ns/op
Iteration   2: 356.858 ns/op
Iteration   3: 356.982 ns/op
Iteration   4: 356.217 ns/op
Iteration   5: 355.611 ns/op
Iteration   6: 354.426 ns/op
Iteration   7: 354.966 ns/op
Iteration   8: 355.407 ns/op
Iteration   9: 355.588 ns/op
Iteration  10: 355.321 ns/op
Iteration  11: 355.312 ns/op
Iteration  12: 355.586 ns/op
Iteration  13: 356.565 ns/op
Iteration  14: 355.229 ns/op
Iteration  15: 359.253 ns/op
Iteration  16: 356.976 ns/op
Iteration  17: 357.758 ns/op
Iteration  18: 355.907 ns/op
Iteration  19: 356.515 ns/op
Iteration  20: 356.290 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 686.821 ns/op
# Warmup Iteration   2: 361.927 ns/op
# Warmup Iteration   3: 364.594 ns/op
# Warmup Iteration   4: 360.531 ns/op
# Warmup Iteration   5: 354.386 ns/op
Iteration   1: 354.729 ns/op
Iteration   2: 355.224 ns/op
Iteration   3: 356.203 ns/op
Iteration   4: 353.308 ns/op
Iteration   5: 352.440 ns/op
Iteration   6: 355.188 ns/op
Iteration   7: 353.163 ns/op
Iteration   8: 351.425 ns/op
Iteration   9: 353.541 ns/op
Iteration  10: 352.159 ns/op
Iteration  11: 352.179 ns/op
Iteration  12: 352.416 ns/op
Iteration  13: 353.099 ns/op
Iteration  14: 352.840 ns/op
Iteration  15: 353.371 ns/op
Iteration  16: 353.412 ns/op
Iteration  17: 351.916 ns/op
Iteration  18: 353.541 ns/op
Iteration  19: 353.489 ns/op
Iteration  20: 353.805 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  353.991 ±(99.9%) 1.359 ns/op [Average]
  (min, avg, max) = (346.634, 353.991, 361.442), stdev = 4.008
  CI (99.9%): [352.632, 355.351] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)  (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  /V%YL$*r{  avgt  100  351.204 ± 1.207  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  /V%YL$*r{  avgt  100  353.991 ± 1.359  ns/op

Benchmark result is saved to split_precompiled_regex_117_9_NonMatch.csv
