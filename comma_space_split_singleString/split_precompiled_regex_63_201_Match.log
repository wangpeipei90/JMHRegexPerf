# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
			  

	
	  	  

				 	 		  


	
 
	  
	,



		 

	 
   




 		 
 			
 		

   	
		

	 	 	  

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1264.458 ns/op
# Warmup Iteration   2: 920.366 ns/op
# Warmup Iteration   3: 777.998 ns/op
# Warmup Iteration   4: 780.034 ns/op
# Warmup Iteration   5: 784.662 ns/op
Iteration   1: 787.777 ns/op
Iteration   2: 792.754 ns/op
Iteration   3: 774.558 ns/op
Iteration   4: 774.412 ns/op
Iteration   5: 774.309 ns/op
Iteration   6: 774.129 ns/op
Iteration   7: 774.665 ns/op
Iteration   8: 774.252 ns/op
Iteration   9: 774.164 ns/op
Iteration  10: 774.259 ns/op
Iteration  11: 774.602 ns/op
Iteration  12: 772.562 ns/op
Iteration  13: 772.076 ns/op
Iteration  14: 772.084 ns/op
Iteration  15: 772.193 ns/op
Iteration  16: 772.080 ns/op
Iteration  17: 779.427 ns/op
Iteration  18: 772.628 ns/op
Iteration  19: 772.310 ns/op
Iteration  20: 772.090 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1276.531 ns/op
# Warmup Iteration   2: 961.697 ns/op
# Warmup Iteration   3: 813.501 ns/op
# Warmup Iteration   4: 814.918 ns/op
# Warmup Iteration   5: 818.458 ns/op
Iteration   1: 822.192 ns/op
Iteration   2: 827.220 ns/op
Iteration   3: 808.878 ns/op
Iteration   4: 807.911 ns/op
Iteration   5: 808.602 ns/op
Iteration   6: 808.301 ns/op
Iteration   7: 807.838 ns/op
Iteration   8: 808.384 ns/op
Iteration   9: 808.338 ns/op
Iteration  10: 808.196 ns/op
Iteration  11: 809.493 ns/op
Iteration  12: 809.568 ns/op
Iteration  13: 806.769 ns/op
Iteration  14: 806.867 ns/op
Iteration  15: 806.403 ns/op
Iteration  16: 804.459 ns/op
Iteration  17: 813.635 ns/op
Iteration  18: 808.862 ns/op
Iteration  19: 807.569 ns/op
Iteration  20: 809.091 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1275.286 ns/op
# Warmup Iteration   2: 960.532 ns/op
# Warmup Iteration   3: 810.098 ns/op
# Warmup Iteration   4: 812.610 ns/op
# Warmup Iteration   5: 816.712 ns/op
Iteration   1: 820.772 ns/op
Iteration   2: 825.899 ns/op
Iteration   3: 806.711 ns/op
Iteration   4: 806.599 ns/op
Iteration   5: 806.175 ns/op
Iteration   6: 806.513 ns/op
Iteration   7: 806.540 ns/op
Iteration   8: 806.972 ns/op
Iteration   9: 806.219 ns/op
Iteration  10: 807.111 ns/op
Iteration  11: 807.956 ns/op
Iteration  12: 805.386 ns/op
Iteration  13: 804.873 ns/op
Iteration  14: 804.926 ns/op
Iteration  15: 805.820 ns/op
Iteration  16: 805.053 ns/op
Iteration  17: 803.163 ns/op
Iteration  18: 805.129 ns/op
Iteration  19: 806.126 ns/op
Iteration  20: 809.131 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1233.922 ns/op
# Warmup Iteration   2: 900.818 ns/op
# Warmup Iteration   3: 762.869 ns/op
# Warmup Iteration   4: 764.859 ns/op
# Warmup Iteration   5: 768.360 ns/op
Iteration   1: 772.441 ns/op
Iteration   2: 774.564 ns/op
Iteration   3: 759.104 ns/op
Iteration   4: 759.448 ns/op
Iteration   5: 758.365 ns/op
Iteration   6: 762.455 ns/op
Iteration   7: 757.942 ns/op
Iteration   8: 758.727 ns/op
Iteration   9: 759.315 ns/op
Iteration  10: 759.483 ns/op
Iteration  11: 757.723 ns/op
Iteration  12: 757.563 ns/op
Iteration  13: 757.597 ns/op
Iteration  14: 757.588 ns/op
Iteration  15: 757.443 ns/op
Iteration  16: 757.414 ns/op
Iteration  17: 757.920 ns/op
Iteration  18: 758.568 ns/op
Iteration  19: 758.966 ns/op
Iteration  20: 759.917 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1255.511 ns/op
# Warmup Iteration   2: 920.526 ns/op
# Warmup Iteration   3: 780.035 ns/op
# Warmup Iteration   4: 781.738 ns/op
# Warmup Iteration   5: 784.465 ns/op
Iteration   1: 793.909 ns/op
Iteration   2: 792.114 ns/op
Iteration   3: 775.703 ns/op
Iteration   4: 776.195 ns/op
Iteration   5: 776.325 ns/op
Iteration   6: 775.785 ns/op
Iteration   7: 775.161 ns/op
Iteration   8: 776.684 ns/op
Iteration   9: 777.036 ns/op
Iteration  10: 778.417 ns/op
Iteration  11: 777.426 ns/op
Iteration  12: 773.577 ns/op
Iteration  13: 780.886 ns/op
Iteration  14: 776.374 ns/op
Iteration  15: 775.862 ns/op
Iteration  16: 773.601 ns/op
Iteration  17: 773.907 ns/op
Iteration  18: 774.360 ns/op
Iteration  19: 774.371 ns/op
Iteration  20: 774.437 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  786.177 Â±(99.9%) 6.882 ns/op [Average]
  (min, avg, max) = (757.414, 786.177, 827.220), stdev = 20.291
  CI (99.9%): [779.295, 793.058] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
			  

	
	  	  

				 	 		  


	
 
	  
	,



		 

	 
   




 		 
 			
 		

   	
		

	 	 	  

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1265.656 ns/op
# Warmup Iteration   2: 994.521 ns/op
# Warmup Iteration   3: 845.069 ns/op
# Warmup Iteration   4: 848.991 ns/op
# Warmup Iteration   5: 854.652 ns/op
Iteration   1: 855.029 ns/op
Iteration   2: 859.427 ns/op
Iteration   3: 840.573 ns/op
Iteration   4: 841.420 ns/op
Iteration   5: 840.707 ns/op
Iteration   6: 841.078 ns/op
Iteration   7: 840.858 ns/op
Iteration   8: 841.023 ns/op
Iteration   9: 841.292 ns/op
Iteration  10: 841.375 ns/op
Iteration  11: 837.573 ns/op
Iteration  12: 840.763 ns/op
Iteration  13: 840.483 ns/op
Iteration  14: 839.083 ns/op
Iteration  15: 839.186 ns/op
Iteration  16: 840.183 ns/op
Iteration  17: 841.422 ns/op
Iteration  18: 840.008 ns/op
Iteration  19: 841.065 ns/op
Iteration  20: 840.505 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1293.709 ns/op
# Warmup Iteration   2: 1001.674 ns/op
# Warmup Iteration   3: 843.022 ns/op
# Warmup Iteration   4: 843.970 ns/op
# Warmup Iteration   5: 848.865 ns/op
Iteration   1: 852.669 ns/op
Iteration   2: 858.524 ns/op
Iteration   3: 838.403 ns/op
Iteration   4: 838.240 ns/op
Iteration   5: 838.331 ns/op
Iteration   6: 839.034 ns/op
Iteration   7: 838.712 ns/op
Iteration   8: 838.213 ns/op
Iteration   9: 839.936 ns/op
Iteration  10: 850.709 ns/op
Iteration  11: 840.530 ns/op
Iteration  12: 838.862 ns/op
Iteration  13: 836.376 ns/op
Iteration  14: 836.460 ns/op
Iteration  15: 836.833 ns/op
Iteration  16: 836.251 ns/op
Iteration  17: 836.888 ns/op
Iteration  18: 837.057 ns/op
Iteration  19: 836.824 ns/op
Iteration  20: 836.997 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1276.094 ns/op
# Warmup Iteration   2: 995.110 ns/op
# Warmup Iteration   3: 843.573 ns/op
# Warmup Iteration   4: 847.534 ns/op
# Warmup Iteration   5: 849.912 ns/op
Iteration   1: 854.295 ns/op
Iteration   2: 860.155 ns/op
Iteration   3: 841.276 ns/op
Iteration   4: 841.109 ns/op
Iteration   5: 840.629 ns/op
Iteration   6: 840.226 ns/op
Iteration   7: 840.762 ns/op
Iteration   8: 841.608 ns/op
Iteration   9: 841.091 ns/op
Iteration  10: 839.758 ns/op
Iteration  11: 836.489 ns/op
Iteration  12: 840.213 ns/op
Iteration  13: 838.980 ns/op
Iteration  14: 838.671 ns/op
Iteration  15: 839.163 ns/op
Iteration  16: 844.474 ns/op
Iteration  17: 842.444 ns/op
Iteration  18: 844.286 ns/op
Iteration  19: 841.721 ns/op
Iteration  20: 841.833 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1244.540 ns/op
# Warmup Iteration   2: 949.558 ns/op
# Warmup Iteration   3: 813.169 ns/op
# Warmup Iteration   4: 815.474 ns/op
# Warmup Iteration   5: 818.446 ns/op
Iteration   1: 822.660 ns/op
Iteration   2: 828.125 ns/op
Iteration   3: 809.970 ns/op
Iteration   4: 809.820 ns/op
Iteration   5: 809.816 ns/op
Iteration   6: 809.869 ns/op
Iteration   7: 809.773 ns/op
Iteration   8: 809.365 ns/op
Iteration   9: 810.152 ns/op
Iteration  10: 814.074 ns/op
Iteration  11: 815.936 ns/op
Iteration  12: 813.263 ns/op
Iteration  13: 807.376 ns/op
Iteration  14: 807.356 ns/op
Iteration  15: 814.625 ns/op
Iteration  16: 806.681 ns/op
Iteration  17: 808.724 ns/op
Iteration  18: 807.931 ns/op
Iteration  19: 807.392 ns/op
Iteration  20: 818.367 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1294.497 ns/op
# Warmup Iteration   2: 999.187 ns/op
# Warmup Iteration   3: 842.781 ns/op
# Warmup Iteration   4: 844.344 ns/op
# Warmup Iteration   5: 847.931 ns/op
Iteration   1: 851.256 ns/op
Iteration   2: 857.093 ns/op
Iteration   3: 838.014 ns/op
Iteration   4: 837.719 ns/op
Iteration   5: 838.589 ns/op
Iteration   6: 843.228 ns/op
Iteration   7: 837.133 ns/op
Iteration   8: 838.367 ns/op
Iteration   9: 837.735 ns/op
Iteration  10: 838.717 ns/op
Iteration  11: 838.718 ns/op
Iteration  12: 833.387 ns/op
Iteration  13: 834.684 ns/op
Iteration  14: 834.962 ns/op
Iteration  15: 834.588 ns/op
Iteration  16: 835.742 ns/op
Iteration  17: 835.392 ns/op
Iteration  18: 836.700 ns/op
Iteration  19: 837.246 ns/op
Iteration  20: 836.886 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  835.155 Â±(99.9%) 4.384 ns/op [Average]
  (min, avg, max) = (806.681, 835.155, 860.155), stdev = 12.926
  CI (99.9%): [830.771, 839.539] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                  (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
			  

	
	  	  

				 	 		  


	
 
	  
	,



		 

	 
   




 		 
 			
 		

   	
		

	 	 	  

  avgt  100  786.177 Â± 6.882  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
			  

	
	  	  

				 	 		  


	
 
	  
	,



		 

	 
   




 		 
 			
 		

   	
		

	 	 	  

  avgt  100  835.155 Â± 4.384  ns/op

Benchmark result is saved to split_precompiled_regex_63_201_Match.csv
