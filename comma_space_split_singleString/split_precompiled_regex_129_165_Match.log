# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =     
  	 		 , 
 
    
	 
		
  

  				 
	
	 

				
 


 



    			
	

	 		 



 			
	
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1194.102 ns/op
# Warmup Iteration   2: 902.083 ns/op
# Warmup Iteration   3: 764.552 ns/op
# Warmup Iteration   4: 761.260 ns/op
# Warmup Iteration   5: 765.511 ns/op
Iteration   1: 770.755 ns/op
Iteration   2: 770.454 ns/op
Iteration   3: 755.850 ns/op
Iteration   4: 758.886 ns/op
Iteration   5: 759.041 ns/op
Iteration   6: 756.669 ns/op
Iteration   7: 755.107 ns/op
Iteration   8: 755.202 ns/op
Iteration   9: 754.538 ns/op
Iteration  10: 755.402 ns/op
Iteration  11: 753.031 ns/op
Iteration  12: 752.823 ns/op
Iteration  13: 752.516 ns/op
Iteration  14: 752.389 ns/op
Iteration  15: 752.403 ns/op
Iteration  16: 752.309 ns/op
Iteration  17: 753.869 ns/op
Iteration  18: 752.835 ns/op
Iteration  19: 752.605 ns/op
Iteration  20: 752.574 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1222.989 ns/op
# Warmup Iteration   2: 886.470 ns/op
# Warmup Iteration   3: 758.279 ns/op
# Warmup Iteration   4: 761.254 ns/op
# Warmup Iteration   5: 770.842 ns/op
Iteration   1: 772.361 ns/op
Iteration   2: 762.034 ns/op
Iteration   3: 753.133 ns/op
Iteration   4: 754.368 ns/op
Iteration   5: 753.916 ns/op
Iteration   6: 753.787 ns/op
Iteration   7: 754.043 ns/op
Iteration   8: 754.271 ns/op
Iteration   9: 754.966 ns/op
Iteration  10: 753.911 ns/op
Iteration  11: 752.004 ns/op
Iteration  12: 751.828 ns/op
Iteration  13: 751.880 ns/op
Iteration  14: 751.695 ns/op
Iteration  15: 751.580 ns/op
Iteration  16: 752.560 ns/op
Iteration  17: 751.868 ns/op
Iteration  18: 751.830 ns/op
Iteration  19: 751.395 ns/op
Iteration  20: 752.163 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1165.903 ns/op
# Warmup Iteration   2: 879.069 ns/op
# Warmup Iteration   3: 753.753 ns/op
# Warmup Iteration   4: 760.368 ns/op
# Warmup Iteration   5: 775.040 ns/op
Iteration   1: 768.085 ns/op
Iteration   2: 752.273 ns/op
Iteration   3: 749.852 ns/op
Iteration   4: 750.299 ns/op
Iteration   5: 750.260 ns/op
Iteration   6: 750.183 ns/op
Iteration   7: 750.656 ns/op
Iteration   8: 750.394 ns/op
Iteration   9: 750.612 ns/op
Iteration  10: 751.402 ns/op
Iteration  11: 748.991 ns/op
Iteration  12: 748.511 ns/op
Iteration  13: 749.017 ns/op
Iteration  14: 750.163 ns/op
Iteration  15: 754.526 ns/op
Iteration  16: 748.712 ns/op
Iteration  17: 750.838 ns/op
Iteration  18: 752.183 ns/op
Iteration  19: 749.125 ns/op
Iteration  20: 749.043 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1097.776 ns/op
# Warmup Iteration   2: 770.692 ns/op
# Warmup Iteration   3: 689.932 ns/op
# Warmup Iteration   4: 686.063 ns/op
# Warmup Iteration   5: 689.693 ns/op
Iteration   1: 693.974 ns/op
Iteration   2: 678.279 ns/op
Iteration   3: 678.663 ns/op
Iteration   4: 681.703 ns/op
Iteration   5: 677.998 ns/op
Iteration   6: 678.485 ns/op
Iteration   7: 680.842 ns/op
Iteration   8: 678.299 ns/op
Iteration   9: 678.152 ns/op
Iteration  10: 676.021 ns/op
Iteration  11: 677.435 ns/op
Iteration  12: 676.267 ns/op
Iteration  13: 676.122 ns/op
Iteration  14: 676.767 ns/op
Iteration  15: 676.243 ns/op
Iteration  16: 676.865 ns/op
Iteration  17: 676.475 ns/op
Iteration  18: 678.485 ns/op
Iteration  19: 677.072 ns/op
Iteration  20: 677.553 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1177.174 ns/op
# Warmup Iteration   2: 879.383 ns/op
# Warmup Iteration   3: 759.279 ns/op
# Warmup Iteration   4: 761.834 ns/op
# Warmup Iteration   5: 777.263 ns/op
Iteration   1: 773.257 ns/op
Iteration   2: 760.365 ns/op
Iteration   3: 756.151 ns/op
Iteration   4: 755.698 ns/op
Iteration   5: 755.452 ns/op
Iteration   6: 756.396 ns/op
Iteration   7: 755.937 ns/op
Iteration   8: 755.347 ns/op
Iteration   9: 755.213 ns/op
Iteration  10: 755.900 ns/op
Iteration  11: 756.085 ns/op
Iteration  12: 754.234 ns/op
Iteration  13: 760.222 ns/op
Iteration  14: 754.012 ns/op
Iteration  15: 753.921 ns/op
Iteration  16: 753.631 ns/op
Iteration  17: 753.700 ns/op
Iteration  18: 753.640 ns/op
Iteration  19: 753.721 ns/op
Iteration  20: 754.678 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  739.292 Â±(99.9%) 10.476 ns/op [Average]
  (min, avg, max) = (676.021, 739.292, 773.257), stdev = 30.889
  CI (99.9%): [728.816, 749.769] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =     
  	 		 , 
 
    
	 
		
  

  				 
	
	 

				
 


 



    			
	

	 		 



 			
	
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1231.708 ns/op
# Warmup Iteration   2: 913.621 ns/op
# Warmup Iteration   3: 785.835 ns/op
# Warmup Iteration   4: 788.888 ns/op
# Warmup Iteration   5: 790.632 ns/op
Iteration   1: 794.981 ns/op
Iteration   2: 798.882 ns/op
Iteration   3: 781.146 ns/op
Iteration   4: 781.604 ns/op
Iteration   5: 781.760 ns/op
Iteration   6: 784.721 ns/op
Iteration   7: 781.690 ns/op
Iteration   8: 782.051 ns/op
Iteration   9: 782.597 ns/op
Iteration  10: 781.896 ns/op
Iteration  11: 778.891 ns/op
Iteration  12: 779.407 ns/op
Iteration  13: 778.846 ns/op
Iteration  14: 778.763 ns/op
Iteration  15: 779.961 ns/op
Iteration  16: 779.407 ns/op
Iteration  17: 779.756 ns/op
Iteration  18: 779.925 ns/op
Iteration  19: 779.455 ns/op
Iteration  20: 779.369 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1223.732 ns/op
# Warmup Iteration   2: 923.624 ns/op
# Warmup Iteration   3: 782.615 ns/op
# Warmup Iteration   4: 784.975 ns/op
# Warmup Iteration   5: 787.667 ns/op
Iteration   1: 794.270 ns/op
Iteration   2: 794.106 ns/op
Iteration   3: 779.056 ns/op
Iteration   4: 778.710 ns/op
Iteration   5: 781.102 ns/op
Iteration   6: 777.945 ns/op
Iteration   7: 777.862 ns/op
Iteration   8: 777.778 ns/op
Iteration   9: 777.810 ns/op
Iteration  10: 778.823 ns/op
Iteration  11: 776.481 ns/op
Iteration  12: 776.743 ns/op
Iteration  13: 776.304 ns/op
Iteration  14: 776.528 ns/op
Iteration  15: 776.414 ns/op
Iteration  16: 776.448 ns/op
Iteration  17: 776.431 ns/op
Iteration  18: 776.466 ns/op
Iteration  19: 776.225 ns/op
Iteration  20: 776.630 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1229.718 ns/op
# Warmup Iteration   2: 911.074 ns/op
# Warmup Iteration   3: 782.840 ns/op
# Warmup Iteration   4: 785.604 ns/op
# Warmup Iteration   5: 794.714 ns/op
Iteration   1: 796.815 ns/op
Iteration   2: 787.839 ns/op
Iteration   3: 780.835 ns/op
Iteration   4: 783.344 ns/op
Iteration   5: 779.787 ns/op
Iteration   6: 778.933 ns/op
Iteration   7: 778.489 ns/op
Iteration   8: 784.508 ns/op
Iteration   9: 779.441 ns/op
Iteration  10: 778.846 ns/op
Iteration  11: 777.152 ns/op
Iteration  12: 776.766 ns/op
Iteration  13: 776.431 ns/op
Iteration  14: 777.378 ns/op
Iteration  15: 777.305 ns/op
Iteration  16: 777.232 ns/op
Iteration  17: 780.011 ns/op
Iteration  18: 779.436 ns/op
Iteration  19: 777.405 ns/op
Iteration  20: 777.502 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1192.234 ns/op
# Warmup Iteration   2: 886.041 ns/op
# Warmup Iteration   3: 769.119 ns/op
# Warmup Iteration   4: 779.460 ns/op
# Warmup Iteration   5: 784.291 ns/op
Iteration   1: 783.802 ns/op
Iteration   2: 766.028 ns/op
Iteration   3: 765.321 ns/op
Iteration   4: 765.309 ns/op
Iteration   5: 766.378 ns/op
Iteration   6: 765.405 ns/op
Iteration   7: 765.711 ns/op
Iteration   8: 767.560 ns/op
Iteration   9: 772.613 ns/op
Iteration  10: 766.386 ns/op
Iteration  11: 763.033 ns/op
Iteration  12: 769.970 ns/op
Iteration  13: 763.866 ns/op
Iteration  14: 764.200 ns/op
Iteration  15: 764.555 ns/op
Iteration  16: 763.508 ns/op
Iteration  17: 764.263 ns/op
Iteration  18: 763.672 ns/op
Iteration  19: 764.338 ns/op
Iteration  20: 763.961 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1167.897 ns/op
# Warmup Iteration   2: 800.586 ns/op
# Warmup Iteration   3: 708.107 ns/op
# Warmup Iteration   4: 704.828 ns/op
# Warmup Iteration   5: 708.366 ns/op
Iteration   1: 716.189 ns/op
Iteration   2: 696.359 ns/op
Iteration   3: 696.746 ns/op
Iteration   4: 696.269 ns/op
Iteration   5: 698.715 ns/op
Iteration   6: 695.207 ns/op
Iteration   7: 696.226 ns/op
Iteration   8: 696.510 ns/op
Iteration   9: 699.026 ns/op
Iteration  10: 694.569 ns/op
Iteration  11: 694.800 ns/op
Iteration  12: 695.637 ns/op
Iteration  13: 694.952 ns/op
Iteration  14: 695.286 ns/op
Iteration  15: 694.740 ns/op
Iteration  16: 695.667 ns/op
Iteration  17: 698.655 ns/op
Iteration  18: 697.928 ns/op
Iteration  19: 696.902 ns/op
Iteration  20: 696.096 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  761.091 Â±(99.9%) 11.153 ns/op [Average]
  (min, avg, max) = (694.569, 761.091, 798.882), stdev = 32.884
  CI (99.9%): [749.938, 772.243] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                              (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*      
  	 		 , 
 
    
	 
		
  

  				 
	
	 

				
 


 



    			
	

	 		 



 			
	
  avgt  100  739.292 Â± 10.476  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*      
  	 		 , 
 
    
	 
		
  

  				 
	
	 

				
 


 



    			
	

	 		 



 			
	
  avgt  100  761.091 Â± 11.153  ns/op

Benchmark result is saved to split_precompiled_regex_129_165_Match.csv
