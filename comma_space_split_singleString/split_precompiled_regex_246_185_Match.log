# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
     	 		  
 	  		 	
 
	
 

, 
	
	    		
  

	 
   
			  
   




	

	 
	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1244.482 ns/op
# Warmup Iteration   2: 920.648 ns/op
# Warmup Iteration   3: 778.026 ns/op
# Warmup Iteration   4: 777.989 ns/op
# Warmup Iteration   5: 781.713 ns/op
Iteration   1: 785.283 ns/op
Iteration   2: 791.205 ns/op
Iteration   3: 771.301 ns/op
Iteration   4: 771.645 ns/op
Iteration   5: 771.757 ns/op
Iteration   6: 771.439 ns/op
Iteration   7: 771.643 ns/op
Iteration   8: 770.611 ns/op
Iteration   9: 771.255 ns/op
Iteration  10: 772.022 ns/op
Iteration  11: 771.240 ns/op
Iteration  12: 773.257 ns/op
Iteration  13: 768.973 ns/op
Iteration  14: 768.481 ns/op
Iteration  15: 768.931 ns/op
Iteration  16: 769.504 ns/op
Iteration  17: 769.466 ns/op
Iteration  18: 769.101 ns/op
Iteration  19: 769.125 ns/op
Iteration  20: 769.699 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1267.233 ns/op
# Warmup Iteration   2: 946.914 ns/op
# Warmup Iteration   3: 797.404 ns/op
# Warmup Iteration   4: 799.814 ns/op
# Warmup Iteration   5: 803.618 ns/op
Iteration   1: 808.374 ns/op
Iteration   2: 813.467 ns/op
Iteration   3: 794.785 ns/op
Iteration   4: 793.678 ns/op
Iteration   5: 793.313 ns/op
Iteration   6: 796.140 ns/op
Iteration   7: 797.710 ns/op
Iteration   8: 794.193 ns/op
Iteration   9: 794.013 ns/op
Iteration  10: 793.905 ns/op
Iteration  11: 794.033 ns/op
Iteration  12: 791.581 ns/op
Iteration  13: 791.936 ns/op
Iteration  14: 791.945 ns/op
Iteration  15: 792.008 ns/op
Iteration  16: 792.839 ns/op
Iteration  17: 794.351 ns/op
Iteration  18: 794.626 ns/op
Iteration  19: 793.188 ns/op
Iteration  20: 793.191 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1212.616 ns/op
# Warmup Iteration   2: 854.571 ns/op
# Warmup Iteration   3: 738.884 ns/op
# Warmup Iteration   4: 753.148 ns/op
# Warmup Iteration   5: 747.558 ns/op
Iteration   1: 753.049 ns/op
Iteration   2: 739.179 ns/op
Iteration   3: 734.990 ns/op
Iteration   4: 734.834 ns/op
Iteration   5: 735.716 ns/op
Iteration   6: 735.392 ns/op
Iteration   7: 734.897 ns/op
Iteration   8: 735.309 ns/op
Iteration   9: 735.414 ns/op
Iteration  10: 735.851 ns/op
Iteration  11: 733.252 ns/op
Iteration  12: 732.747 ns/op
Iteration  13: 732.525 ns/op
Iteration  14: 733.028 ns/op
Iteration  15: 733.218 ns/op
Iteration  16: 733.239 ns/op
Iteration  17: 736.324 ns/op
Iteration  18: 733.542 ns/op
Iteration  19: 734.715 ns/op
Iteration  20: 733.520 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1237.807 ns/op
# Warmup Iteration   2: 913.001 ns/op
# Warmup Iteration   3: 779.114 ns/op
# Warmup Iteration   4: 784.213 ns/op
# Warmup Iteration   5: 784.772 ns/op
Iteration   1: 790.556 ns/op
Iteration   2: 792.838 ns/op
Iteration   3: 776.958 ns/op
Iteration   4: 774.156 ns/op
Iteration   5: 774.129 ns/op
Iteration   6: 774.083 ns/op
Iteration   7: 773.311 ns/op
Iteration   8: 773.754 ns/op
Iteration   9: 773.522 ns/op
Iteration  10: 773.644 ns/op
Iteration  11: 773.654 ns/op
Iteration  12: 771.112 ns/op
Iteration  13: 772.528 ns/op
Iteration  14: 771.783 ns/op
Iteration  15: 771.500 ns/op
Iteration  16: 776.408 ns/op
Iteration  17: 771.557 ns/op
Iteration  18: 772.661 ns/op
Iteration  19: 773.502 ns/op
Iteration  20: 773.084 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1267.837 ns/op
# Warmup Iteration   2: 945.393 ns/op
# Warmup Iteration   3: 804.149 ns/op
# Warmup Iteration   4: 804.882 ns/op
# Warmup Iteration   5: 813.365 ns/op
Iteration   1: 811.508 ns/op
Iteration   2: 820.167 ns/op
Iteration   3: 799.819 ns/op
Iteration   4: 800.378 ns/op
Iteration   5: 798.077 ns/op
Iteration   6: 800.738 ns/op
Iteration   7: 799.092 ns/op
Iteration   8: 805.538 ns/op
Iteration   9: 801.369 ns/op
Iteration  10: 809.061 ns/op
Iteration  11: 800.834 ns/op
Iteration  12: 800.541 ns/op
Iteration  13: 800.897 ns/op
Iteration  14: 796.171 ns/op
Iteration  15: 795.995 ns/op
Iteration  16: 797.349 ns/op
Iteration  17: 795.841 ns/op
Iteration  18: 797.139 ns/op
Iteration  19: 796.689 ns/op
Iteration  20: 796.994 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  775.949 Â±(99.9%) 8.084 ns/op [Average]
  (min, avg, max) = (732.525, 775.949, 820.167), stdev = 23.836
  CI (99.9%): [767.865, 784.033] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
     	 		  
 	  		 	
 
	
 

, 
	
	    		
  

	 
   
			  
   




	

	 
	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1273.123 ns/op
# Warmup Iteration   2: 968.053 ns/op
# Warmup Iteration   3: 818.792 ns/op
# Warmup Iteration   4: 821.772 ns/op
# Warmup Iteration   5: 825.220 ns/op
Iteration   1: 829.007 ns/op
Iteration   2: 833.330 ns/op
Iteration   3: 816.106 ns/op
Iteration   4: 815.404 ns/op
Iteration   5: 816.113 ns/op
Iteration   6: 815.699 ns/op
Iteration   7: 815.795 ns/op
Iteration   8: 816.589 ns/op
Iteration   9: 820.158 ns/op
Iteration  10: 816.557 ns/op
Iteration  11: 816.873 ns/op
Iteration  12: 814.961 ns/op
Iteration  13: 813.764 ns/op
Iteration  14: 814.923 ns/op
Iteration  15: 813.888 ns/op
Iteration  16: 814.496 ns/op
Iteration  17: 815.525 ns/op
Iteration  18: 815.760 ns/op
Iteration  19: 816.291 ns/op
Iteration  20: 816.902 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1265.673 ns/op
# Warmup Iteration   2: 966.281 ns/op
# Warmup Iteration   3: 821.067 ns/op
# Warmup Iteration   4: 823.566 ns/op
# Warmup Iteration   5: 826.552 ns/op
Iteration   1: 836.550 ns/op
Iteration   2: 835.802 ns/op
Iteration   3: 816.488 ns/op
Iteration   4: 816.746 ns/op
Iteration   5: 816.683 ns/op
Iteration   6: 818.031 ns/op
Iteration   7: 817.049 ns/op
Iteration   8: 816.180 ns/op
Iteration   9: 816.419 ns/op
Iteration  10: 819.469 ns/op
Iteration  11: 819.973 ns/op
Iteration  12: 821.945 ns/op
Iteration  13: 814.733 ns/op
Iteration  14: 815.904 ns/op
Iteration  15: 816.194 ns/op
Iteration  16: 816.227 ns/op
Iteration  17: 816.515 ns/op
Iteration  18: 816.310 ns/op
Iteration  19: 815.720 ns/op
Iteration  20: 815.841 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1259.554 ns/op
# Warmup Iteration   2: 959.707 ns/op
# Warmup Iteration   3: 816.307 ns/op
# Warmup Iteration   4: 820.123 ns/op
# Warmup Iteration   5: 826.007 ns/op
Iteration   1: 830.083 ns/op
Iteration   2: 834.108 ns/op
Iteration   3: 816.537 ns/op
Iteration   4: 818.137 ns/op
Iteration   5: 812.325 ns/op
Iteration   6: 815.323 ns/op
Iteration   7: 813.458 ns/op
Iteration   8: 813.965 ns/op
Iteration   9: 816.071 ns/op
Iteration  10: 812.644 ns/op
Iteration  11: 813.979 ns/op
Iteration  12: 812.411 ns/op
Iteration  13: 809.801 ns/op
Iteration  14: 809.470 ns/op
Iteration  15: 809.458 ns/op
Iteration  16: 810.141 ns/op
Iteration  17: 811.244 ns/op
Iteration  18: 809.941 ns/op
Iteration  19: 810.101 ns/op
Iteration  20: 810.765 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1271.054 ns/op
# Warmup Iteration   2: 963.833 ns/op
# Warmup Iteration   3: 816.928 ns/op
# Warmup Iteration   4: 818.913 ns/op
# Warmup Iteration   5: 822.003 ns/op
Iteration   1: 826.669 ns/op
Iteration   2: 830.202 ns/op
Iteration   3: 812.544 ns/op
Iteration   4: 811.965 ns/op
Iteration   5: 812.418 ns/op
Iteration   6: 811.821 ns/op
Iteration   7: 811.401 ns/op
Iteration   8: 815.589 ns/op
Iteration   9: 812.986 ns/op
Iteration  10: 813.707 ns/op
Iteration  11: 821.107 ns/op
Iteration  12: 812.873 ns/op
Iteration  13: 812.646 ns/op
Iteration  14: 810.673 ns/op
Iteration  15: 810.271 ns/op
Iteration  16: 810.848 ns/op
Iteration  17: 810.252 ns/op
Iteration  18: 810.537 ns/op
Iteration  19: 810.912 ns/op
Iteration  20: 810.569 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1261.111 ns/op
# Warmup Iteration   2: 957.417 ns/op
# Warmup Iteration   3: 813.868 ns/op
# Warmup Iteration   4: 815.653 ns/op
# Warmup Iteration   5: 819.755 ns/op
Iteration   1: 823.876 ns/op
Iteration   2: 829.188 ns/op
Iteration   3: 810.297 ns/op
Iteration   4: 810.181 ns/op
Iteration   5: 810.286 ns/op
Iteration   6: 810.320 ns/op
Iteration   7: 809.755 ns/op
Iteration   8: 809.899 ns/op
Iteration   9: 811.649 ns/op
Iteration  10: 810.020 ns/op
Iteration  11: 811.130 ns/op
Iteration  12: 818.020 ns/op
Iteration  13: 808.422 ns/op
Iteration  14: 807.972 ns/op
Iteration  15: 807.959 ns/op
Iteration  16: 808.052 ns/op
Iteration  17: 808.256 ns/op
Iteration  18: 808.318 ns/op
Iteration  19: 808.536 ns/op
Iteration  20: 810.334 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  815.293 Â±(99.9%) 2.115 ns/op [Average]
  (min, avg, max) = (807.959, 815.293, 836.550), stdev = 6.236
  CI (99.9%): [813.179, 817.408] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                  (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
     	 		  
 	  		 	
 
	
 

, 
	
	    		
  

	 
   
			  
   




	

	 
	   avgt  100  775.949 Â± 8.084  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
     	 		  
 	  		 	
 
	
 

, 
	
	    		
  

	 
   
			  
   




	

	 
	   avgt  100  815.293 Â± 2.115  ns/op

Benchmark result is saved to split_precompiled_regex_246_185_Match.csv
