# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	
,
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 863.158 ns/op
# Warmup Iteration   2: 425.191 ns/op
# Warmup Iteration   3: 420.974 ns/op
# Warmup Iteration   4: 416.170 ns/op
# Warmup Iteration   5: 409.209 ns/op
Iteration   1: 408.954 ns/op
Iteration   2: 408.847 ns/op
Iteration   3: 408.752 ns/op
Iteration   4: 407.556 ns/op
Iteration   5: 405.769 ns/op
Iteration   6: 405.691 ns/op
Iteration   7: 405.707 ns/op
Iteration   8: 404.839 ns/op
Iteration   9: 406.409 ns/op
Iteration  10: 406.117 ns/op
Iteration  11: 408.827 ns/op
Iteration  12: 406.884 ns/op
Iteration  13: 406.272 ns/op
Iteration  14: 407.913 ns/op
Iteration  15: 408.527 ns/op
Iteration  16: 408.416 ns/op
Iteration  17: 407.075 ns/op
Iteration  18: 405.571 ns/op
Iteration  19: 408.193 ns/op
Iteration  20: 408.405 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 865.820 ns/op
# Warmup Iteration   2: 421.792 ns/op
# Warmup Iteration   3: 418.395 ns/op
# Warmup Iteration   4: 414.561 ns/op
# Warmup Iteration   5: 406.321 ns/op
Iteration   1: 406.307 ns/op
Iteration   2: 406.702 ns/op
Iteration   3: 406.785 ns/op
Iteration   4: 405.658 ns/op
Iteration   5: 404.049 ns/op
Iteration   6: 403.948 ns/op
Iteration   7: 404.054 ns/op
Iteration   8: 404.234 ns/op
Iteration   9: 403.544 ns/op
Iteration  10: 405.338 ns/op
Iteration  11: 406.786 ns/op
Iteration  12: 405.160 ns/op
Iteration  13: 405.791 ns/op
Iteration  14: 405.960 ns/op
Iteration  15: 406.264 ns/op
Iteration  16: 406.900 ns/op
Iteration  17: 406.709 ns/op
Iteration  18: 405.589 ns/op
Iteration  19: 404.021 ns/op
Iteration  20: 405.193 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 875.434 ns/op
# Warmup Iteration   2: 425.001 ns/op
# Warmup Iteration   3: 418.345 ns/op
# Warmup Iteration   4: 414.037 ns/op
# Warmup Iteration   5: 406.634 ns/op
Iteration   1: 406.217 ns/op
Iteration   2: 406.463 ns/op
Iteration   3: 405.965 ns/op
Iteration   4: 405.015 ns/op
Iteration   5: 403.196 ns/op
Iteration   6: 402.729 ns/op
Iteration   7: 403.855 ns/op
Iteration   8: 403.047 ns/op
Iteration   9: 402.528 ns/op
Iteration  10: 403.391 ns/op
Iteration  11: 404.665 ns/op
Iteration  12: 404.239 ns/op
Iteration  13: 406.004 ns/op
Iteration  14: 406.075 ns/op
Iteration  15: 404.535 ns/op
Iteration  16: 405.363 ns/op
Iteration  17: 404.753 ns/op
Iteration  18: 404.014 ns/op
Iteration  19: 404.854 ns/op
Iteration  20: 405.940 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 879.520 ns/op
# Warmup Iteration   2: 429.552 ns/op
# Warmup Iteration   3: 416.986 ns/op
# Warmup Iteration   4: 422.931 ns/op
# Warmup Iteration   5: 410.082 ns/op
Iteration   1: 410.072 ns/op
Iteration   2: 410.251 ns/op
Iteration   3: 410.005 ns/op
Iteration   4: 409.077 ns/op
Iteration   5: 409.011 ns/op
Iteration   6: 410.917 ns/op
Iteration   7: 406.738 ns/op
Iteration   8: 408.010 ns/op
Iteration   9: 407.533 ns/op
Iteration  10: 407.696 ns/op
Iteration  11: 407.922 ns/op
Iteration  12: 408.137 ns/op
Iteration  13: 407.819 ns/op
Iteration  14: 408.465 ns/op
Iteration  15: 408.150 ns/op
Iteration  16: 407.199 ns/op
Iteration  17: 407.957 ns/op
Iteration  18: 408.607 ns/op
Iteration  19: 408.528 ns/op
Iteration  20: 408.402 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 864.983 ns/op
# Warmup Iteration   2: 420.873 ns/op
# Warmup Iteration   3: 417.140 ns/op
# Warmup Iteration   4: 412.644 ns/op
# Warmup Iteration   5: 405.280 ns/op
Iteration   1: 405.403 ns/op
Iteration   2: 405.575 ns/op
Iteration   3: 409.245 ns/op
Iteration   4: 405.393 ns/op
Iteration   5: 402.780 ns/op
Iteration   6: 402.859 ns/op
Iteration   7: 403.775 ns/op
Iteration   8: 403.665 ns/op
Iteration   9: 403.764 ns/op
Iteration  10: 402.219 ns/op
Iteration  11: 404.658 ns/op
Iteration  12: 404.986 ns/op
Iteration  13: 404.342 ns/op
Iteration  14: 404.451 ns/op
Iteration  15: 403.989 ns/op
Iteration  16: 404.847 ns/op
Iteration  17: 404.237 ns/op
Iteration  18: 403.901 ns/op
Iteration  19: 404.992 ns/op
Iteration  20: 404.767 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  406.069 ±(99.9%) 0.678 ns/op [Average]
  (min, avg, max) = (402.219, 406.069, 410.917), stdev = 1.999
  CI (99.9%): [405.391, 406.747] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	
,
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 904.559 ns/op
# Warmup Iteration   2: 441.423 ns/op
# Warmup Iteration   3: 428.497 ns/op
# Warmup Iteration   4: 437.384 ns/op
# Warmup Iteration   5: 420.233 ns/op
Iteration   1: 419.621 ns/op
Iteration   2: 419.766 ns/op
Iteration   3: 419.801 ns/op
Iteration   4: 421.562 ns/op
Iteration   5: 418.598 ns/op
Iteration   6: 418.951 ns/op
Iteration   7: 417.885 ns/op
Iteration   8: 417.959 ns/op
Iteration   9: 418.099 ns/op
Iteration  10: 435.731 ns/op
Iteration  11: 424.265 ns/op
Iteration  12: 417.542 ns/op
Iteration  13: 418.283 ns/op
Iteration  14: 421.271 ns/op
Iteration  15: 417.244 ns/op
Iteration  16: 418.817 ns/op
Iteration  17: 419.962 ns/op
Iteration  18: 418.389 ns/op
Iteration  19: 418.654 ns/op
Iteration  20: 419.353 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 919.245 ns/op
# Warmup Iteration   2: 435.110 ns/op
# Warmup Iteration   3: 425.810 ns/op
# Warmup Iteration   4: 425.208 ns/op
# Warmup Iteration   5: 413.549 ns/op
Iteration   1: 412.957 ns/op
Iteration   2: 415.194 ns/op
Iteration   3: 413.803 ns/op
Iteration   4: 412.952 ns/op
Iteration   5: 411.748 ns/op
Iteration   6: 411.252 ns/op
Iteration   7: 411.084 ns/op
Iteration   8: 411.105 ns/op
Iteration   9: 412.067 ns/op
Iteration  10: 411.299 ns/op
Iteration  11: 412.107 ns/op
Iteration  12: 412.268 ns/op
Iteration  13: 412.968 ns/op
Iteration  14: 414.068 ns/op
Iteration  15: 412.663 ns/op
Iteration  16: 413.264 ns/op
Iteration  17: 414.107 ns/op
Iteration  18: 414.222 ns/op
Iteration  19: 414.188 ns/op
Iteration  20: 414.115 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 858.353 ns/op
# Warmup Iteration   2: 430.080 ns/op
# Warmup Iteration   3: 427.214 ns/op
# Warmup Iteration   4: 421.890 ns/op
# Warmup Iteration   5: 415.270 ns/op
Iteration   1: 415.101 ns/op
Iteration   2: 415.281 ns/op
Iteration   3: 415.467 ns/op
Iteration   4: 413.919 ns/op
Iteration   5: 412.205 ns/op
Iteration   6: 412.181 ns/op
Iteration   7: 413.168 ns/op
Iteration   8: 414.722 ns/op
Iteration   9: 414.414 ns/op
Iteration  10: 412.572 ns/op
Iteration  11: 413.567 ns/op
Iteration  12: 413.675 ns/op
Iteration  13: 414.678 ns/op
Iteration  14: 417.387 ns/op
Iteration  15: 413.828 ns/op
Iteration  16: 415.248 ns/op
Iteration  17: 415.621 ns/op
Iteration  18: 413.523 ns/op
Iteration  19: 413.237 ns/op
Iteration  20: 413.113 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 915.670 ns/op
# Warmup Iteration   2: 432.991 ns/op
# Warmup Iteration   3: 424.036 ns/op
# Warmup Iteration   4: 421.677 ns/op
# Warmup Iteration   5: 411.876 ns/op
Iteration   1: 411.665 ns/op
Iteration   2: 411.699 ns/op
Iteration   3: 411.615 ns/op
Iteration   4: 411.930 ns/op
Iteration   5: 413.248 ns/op
Iteration   6: 409.853 ns/op
Iteration   7: 409.776 ns/op
Iteration   8: 410.009 ns/op
Iteration   9: 410.280 ns/op
Iteration  10: 410.456 ns/op
Iteration  11: 409.389 ns/op
Iteration  12: 412.237 ns/op
Iteration  13: 411.933 ns/op
Iteration  14: 411.074 ns/op
Iteration  15: 410.151 ns/op
Iteration  16: 411.895 ns/op
Iteration  17: 410.597 ns/op
Iteration  18: 419.732 ns/op
Iteration  19: 410.970 ns/op
Iteration  20: 410.693 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 921.785 ns/op
# Warmup Iteration   2: 436.962 ns/op
# Warmup Iteration   3: 425.081 ns/op
# Warmup Iteration   4: 422.719 ns/op
# Warmup Iteration   5: 412.991 ns/op
Iteration   1: 412.378 ns/op
Iteration   2: 412.255 ns/op
Iteration   3: 412.163 ns/op
Iteration   4: 412.018 ns/op
Iteration   5: 410.371 ns/op
Iteration   6: 410.312 ns/op
Iteration   7: 410.011 ns/op
Iteration   8: 410.732 ns/op
Iteration   9: 410.487 ns/op
Iteration  10: 410.562 ns/op
Iteration  11: 409.765 ns/op
Iteration  12: 411.204 ns/op
Iteration  13: 410.539 ns/op
Iteration  14: 415.049 ns/op
Iteration  15: 411.380 ns/op
Iteration  16: 413.186 ns/op
Iteration  17: 411.777 ns/op
Iteration  18: 412.130 ns/op
Iteration  19: 412.015 ns/op
Iteration  20: 411.191 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  414.008 ±(99.9%) 1.326 ns/op [Average]
  (min, avg, max) = (409.389, 414.008, 435.731), stdev = 3.910
  CI (99.9%): [412.682, 415.334] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)  (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	
,
  avgt  100  406.069 ± 0.678  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	
,
  avgt  100  414.008 ± 1.326  ns/op

Benchmark result is saved to split_precompiled_regex_117_9_Match.csv
