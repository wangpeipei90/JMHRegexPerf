# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 	 	 
	
		

 

 
 
 
	  					 					  
	 
	



	
 	 				   	 	 	
	
   
		 
	


 		
	 
		
,    	 	 
 	  	 		 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1253.523 ns/op
# Warmup Iteration   2: 920.984 ns/op
# Warmup Iteration   3: 781.508 ns/op
# Warmup Iteration   4: 782.893 ns/op
# Warmup Iteration   5: 786.241 ns/op
Iteration   1: 790.852 ns/op
Iteration   2: 795.852 ns/op
Iteration   3: 776.885 ns/op
Iteration   4: 777.491 ns/op
Iteration   5: 777.606 ns/op
Iteration   6: 777.322 ns/op
Iteration   7: 776.554 ns/op
Iteration   8: 777.047 ns/op
Iteration   9: 784.723 ns/op
Iteration  10: 778.246 ns/op
Iteration  11: 778.002 ns/op
Iteration  12: 775.017 ns/op
Iteration  13: 775.404 ns/op
Iteration  14: 777.419 ns/op
Iteration  15: 776.338 ns/op
Iteration  16: 777.042 ns/op
Iteration  17: 776.336 ns/op
Iteration  18: 776.555 ns/op
Iteration  19: 775.710 ns/op
Iteration  20: 775.345 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1218.836 ns/op
# Warmup Iteration   2: 898.724 ns/op
# Warmup Iteration   3: 754.261 ns/op
# Warmup Iteration   4: 757.022 ns/op
# Warmup Iteration   5: 765.077 ns/op
Iteration   1: 769.205 ns/op
Iteration   2: 760.088 ns/op
Iteration   3: 750.628 ns/op
Iteration   4: 751.526 ns/op
Iteration   5: 751.778 ns/op
Iteration   6: 750.538 ns/op
Iteration   7: 750.882 ns/op
Iteration   8: 750.519 ns/op
Iteration   9: 749.840 ns/op
Iteration  10: 750.327 ns/op
Iteration  11: 747.899 ns/op
Iteration  12: 750.157 ns/op
Iteration  13: 748.108 ns/op
Iteration  14: 747.981 ns/op
Iteration  15: 748.373 ns/op
Iteration  16: 748.325 ns/op
Iteration  17: 748.264 ns/op
Iteration  18: 748.254 ns/op
Iteration  19: 748.371 ns/op
Iteration  20: 748.448 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1292.341 ns/op
# Warmup Iteration   2: 987.291 ns/op
# Warmup Iteration   3: 828.714 ns/op
# Warmup Iteration   4: 831.826 ns/op
# Warmup Iteration   5: 834.433 ns/op
Iteration   1: 838.460 ns/op
Iteration   2: 844.229 ns/op
Iteration   3: 824.494 ns/op
Iteration   4: 824.087 ns/op
Iteration   5: 828.073 ns/op
Iteration   6: 824.919 ns/op
Iteration   7: 823.881 ns/op
Iteration   8: 825.468 ns/op
Iteration   9: 825.047 ns/op
Iteration  10: 821.969 ns/op
Iteration  11: 824.885 ns/op
Iteration  12: 825.267 ns/op
Iteration  13: 828.714 ns/op
Iteration  14: 822.935 ns/op
Iteration  15: 825.816 ns/op
Iteration  16: 824.617 ns/op
Iteration  17: 824.909 ns/op
Iteration  18: 823.388 ns/op
Iteration  19: 822.713 ns/op
Iteration  20: 823.944 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1277.291 ns/op
# Warmup Iteration   2: 969.514 ns/op
# Warmup Iteration   3: 814.300 ns/op
# Warmup Iteration   4: 817.174 ns/op
# Warmup Iteration   5: 820.305 ns/op
Iteration   1: 823.882 ns/op
Iteration   2: 830.022 ns/op
Iteration   3: 810.389 ns/op
Iteration   4: 808.869 ns/op
Iteration   5: 809.654 ns/op
Iteration   6: 810.296 ns/op
Iteration   7: 814.573 ns/op
Iteration   8: 810.726 ns/op
Iteration   9: 811.382 ns/op
Iteration  10: 811.399 ns/op
Iteration  11: 813.641 ns/op
Iteration  12: 809.953 ns/op
Iteration  13: 807.965 ns/op
Iteration  14: 807.625 ns/op
Iteration  15: 805.862 ns/op
Iteration  16: 807.796 ns/op
Iteration  17: 808.556 ns/op
Iteration  18: 807.680 ns/op
Iteration  19: 807.973 ns/op
Iteration  20: 807.658 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1225.555 ns/op
# Warmup Iteration   2: 879.286 ns/op
# Warmup Iteration   3: 751.363 ns/op
# Warmup Iteration   4: 753.618 ns/op
# Warmup Iteration   5: 773.030 ns/op
Iteration   1: 764.240 ns/op
Iteration   2: 747.376 ns/op
Iteration   3: 746.756 ns/op
Iteration   4: 747.629 ns/op
Iteration   5: 746.782 ns/op
Iteration   6: 746.224 ns/op
Iteration   7: 746.767 ns/op
Iteration   8: 746.868 ns/op
Iteration   9: 746.610 ns/op
Iteration  10: 746.893 ns/op
Iteration  11: 744.635 ns/op
Iteration  12: 746.604 ns/op
Iteration  13: 744.992 ns/op
Iteration  14: 750.063 ns/op
Iteration  15: 750.467 ns/op
Iteration  16: 744.807 ns/op
Iteration  17: 745.901 ns/op
Iteration  18: 746.099 ns/op
Iteration  19: 745.902 ns/op
Iteration  20: 746.167 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  783.008 Â±(99.9%) 10.897 ns/op [Average]
  (min, avg, max) = (744.635, 783.008, 844.229), stdev = 32.130
  CI (99.9%): [772.111, 793.905] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 	 	 
	
		

 

 
 
 
	  					 					  
	 
	



	
 	 				   	 	 	
	
   
		 
	


 		
	 
		
,    	 	 
 	  	 		 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1264.171 ns/op
# Warmup Iteration   2: 951.516 ns/op
# Warmup Iteration   3: 802.959 ns/op
# Warmup Iteration   4: 804.901 ns/op
# Warmup Iteration   5: 807.936 ns/op
Iteration   1: 814.189 ns/op
Iteration   2: 817.122 ns/op
Iteration   3: 799.413 ns/op
Iteration   4: 798.680 ns/op
Iteration   5: 798.931 ns/op
Iteration   6: 799.383 ns/op
Iteration   7: 799.312 ns/op
Iteration   8: 799.169 ns/op
Iteration   9: 798.434 ns/op
Iteration  10: 798.822 ns/op
Iteration  11: 801.651 ns/op
Iteration  12: 796.733 ns/op
Iteration  13: 796.621 ns/op
Iteration  14: 796.836 ns/op
Iteration  15: 796.370 ns/op
Iteration  16: 796.990 ns/op
Iteration  17: 797.641 ns/op
Iteration  18: 797.046 ns/op
Iteration  19: 796.940 ns/op
Iteration  20: 796.972 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1318.133 ns/op
# Warmup Iteration   2: 1026.055 ns/op
# Warmup Iteration   3: 853.719 ns/op
# Warmup Iteration   4: 855.482 ns/op
# Warmup Iteration   5: 860.485 ns/op
Iteration   1: 867.793 ns/op
Iteration   2: 869.203 ns/op
Iteration   3: 849.999 ns/op
Iteration   4: 850.193 ns/op
Iteration   5: 849.143 ns/op
Iteration   6: 851.525 ns/op
Iteration   7: 849.642 ns/op
Iteration   8: 844.581 ns/op
Iteration   9: 848.970 ns/op
Iteration  10: 849.286 ns/op
Iteration  11: 848.788 ns/op
Iteration  12: 850.348 ns/op
Iteration  13: 846.659 ns/op
Iteration  14: 847.532 ns/op
Iteration  15: 847.214 ns/op
Iteration  16: 846.760 ns/op
Iteration  17: 848.306 ns/op
Iteration  18: 846.518 ns/op
Iteration  19: 847.068 ns/op
Iteration  20: 848.168 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1287.754 ns/op
# Warmup Iteration   2: 1014.152 ns/op
# Warmup Iteration   3: 860.710 ns/op
# Warmup Iteration   4: 864.032 ns/op
# Warmup Iteration   5: 865.026 ns/op
Iteration   1: 869.408 ns/op
Iteration   2: 873.910 ns/op
Iteration   3: 856.724 ns/op
Iteration   4: 854.941 ns/op
Iteration   5: 854.713 ns/op
Iteration   6: 853.835 ns/op
Iteration   7: 857.031 ns/op
Iteration   8: 850.248 ns/op
Iteration   9: 854.728 ns/op
Iteration  10: 855.473 ns/op
Iteration  11: 855.146 ns/op
Iteration  12: 854.538 ns/op
Iteration  13: 853.625 ns/op
Iteration  14: 853.327 ns/op
Iteration  15: 852.645 ns/op
Iteration  16: 853.962 ns/op
Iteration  17: 856.077 ns/op
Iteration  18: 852.644 ns/op
Iteration  19: 853.326 ns/op
Iteration  20: 854.189 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1227.277 ns/op
# Warmup Iteration   2: 901.374 ns/op
# Warmup Iteration   3: 770.712 ns/op
# Warmup Iteration   4: 773.231 ns/op
# Warmup Iteration   5: 794.171 ns/op
Iteration   1: 785.184 ns/op
Iteration   2: 767.869 ns/op
Iteration   3: 768.765 ns/op
Iteration   4: 767.679 ns/op
Iteration   5: 767.040 ns/op
Iteration   6: 769.386 ns/op
Iteration   7: 766.894 ns/op
Iteration   8: 766.944 ns/op
Iteration   9: 766.679 ns/op
Iteration  10: 767.827 ns/op
Iteration  11: 770.218 ns/op
Iteration  12: 764.521 ns/op
Iteration  13: 764.763 ns/op
Iteration  14: 765.050 ns/op
Iteration  15: 764.422 ns/op
Iteration  16: 764.753 ns/op
Iteration  17: 765.443 ns/op
Iteration  18: 764.760 ns/op
Iteration  19: 764.793 ns/op
Iteration  20: 764.858 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1295.822 ns/op
# Warmup Iteration   2: 1012.662 ns/op
# Warmup Iteration   3: 851.976 ns/op
# Warmup Iteration   4: 854.794 ns/op
# Warmup Iteration   5: 858.472 ns/op
Iteration   1: 862.551 ns/op
Iteration   2: 866.914 ns/op
Iteration   3: 847.835 ns/op
Iteration   4: 847.406 ns/op
Iteration   5: 847.856 ns/op
Iteration   6: 848.074 ns/op
Iteration   7: 847.537 ns/op
Iteration   8: 862.671 ns/op
Iteration   9: 844.882 ns/op
Iteration  10: 848.255 ns/op
Iteration  11: 854.187 ns/op
Iteration  12: 848.517 ns/op
Iteration  13: 846.953 ns/op
Iteration  14: 845.467 ns/op
Iteration  15: 846.261 ns/op
Iteration  16: 845.801 ns/op
Iteration  17: 847.101 ns/op
Iteration  18: 848.093 ns/op
Iteration  19: 847.457 ns/op
Iteration  20: 847.696 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  824.748 Â±(99.9%) 12.140 ns/op [Average]
  (min, avg, max) = (764.422, 824.748, 873.910), stdev = 35.795
  CI (99.9%): [812.608, 836.888] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                  (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
 	 	 
	
		

 

 
 
 
	  					 					  
	 
	



	
 	 				   	 	 	
	
   
		 
	


 		
	 
		
,    	 	 
 	  	 		 	  avgt  100  783.008 Â± 10.897  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
 	 	 
	
		

 

 
 
 
	  					 					  
	 
	



	
 	 				   	 	 	
	
   
		 
	


 		
	 
		
,    	 	 
 	  	 		 	  avgt  100  824.748 Â± 12.140  ns/op

Benchmark result is saved to split_precompiled_regex_55_217_Match.csv
