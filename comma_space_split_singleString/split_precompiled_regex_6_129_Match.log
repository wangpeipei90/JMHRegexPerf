# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

		 	 			
		 	 		
			
	 	    		 	
 

	    	
 
 ,		 	  
 

 
  
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1041.503 ns/op
# Warmup Iteration   2: 696.335 ns/op
# Warmup Iteration   3: 625.311 ns/op
# Warmup Iteration   4: 627.520 ns/op
# Warmup Iteration   5: 636.075 ns/op
Iteration   1: 633.019 ns/op
Iteration   2: 620.996 ns/op
Iteration   3: 619.865 ns/op
Iteration   4: 620.295 ns/op
Iteration   5: 625.160 ns/op
Iteration   6: 619.804 ns/op
Iteration   7: 620.405 ns/op
Iteration   8: 620.068 ns/op
Iteration   9: 618.780 ns/op
Iteration  10: 618.018 ns/op
Iteration  11: 618.080 ns/op
Iteration  12: 617.877 ns/op
Iteration  13: 620.059 ns/op
Iteration  14: 618.406 ns/op
Iteration  15: 618.026 ns/op
Iteration  16: 618.138 ns/op
Iteration  17: 620.439 ns/op
Iteration  18: 618.283 ns/op
Iteration  19: 618.602 ns/op
Iteration  20: 618.484 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1045.329 ns/op
# Warmup Iteration   2: 699.082 ns/op
# Warmup Iteration   3: 624.836 ns/op
# Warmup Iteration   4: 627.504 ns/op
# Warmup Iteration   5: 634.834 ns/op
Iteration   1: 633.174 ns/op
Iteration   2: 619.336 ns/op
Iteration   3: 619.086 ns/op
Iteration   4: 619.760 ns/op
Iteration   5: 622.924 ns/op
Iteration   6: 619.452 ns/op
Iteration   7: 620.110 ns/op
Iteration   8: 619.816 ns/op
Iteration   9: 623.099 ns/op
Iteration  10: 617.919 ns/op
Iteration  11: 618.033 ns/op
Iteration  12: 617.908 ns/op
Iteration  13: 623.687 ns/op
Iteration  14: 618.118 ns/op
Iteration  15: 618.488 ns/op
Iteration  16: 618.878 ns/op
Iteration  17: 620.744 ns/op
Iteration  18: 617.847 ns/op
Iteration  19: 618.237 ns/op
Iteration  20: 618.607 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1035.976 ns/op
# Warmup Iteration   2: 691.872 ns/op
# Warmup Iteration   3: 622.093 ns/op
# Warmup Iteration   4: 624.857 ns/op
# Warmup Iteration   5: 640.787 ns/op
Iteration   1: 624.954 ns/op
Iteration   2: 618.399 ns/op
Iteration   3: 618.158 ns/op
Iteration   4: 617.637 ns/op
Iteration   5: 620.967 ns/op
Iteration   6: 617.981 ns/op
Iteration   7: 617.332 ns/op
Iteration   8: 617.962 ns/op
Iteration   9: 616.983 ns/op
Iteration  10: 616.637 ns/op
Iteration  11: 616.430 ns/op
Iteration  12: 615.960 ns/op
Iteration  13: 617.613 ns/op
Iteration  14: 617.540 ns/op
Iteration  15: 618.114 ns/op
Iteration  16: 617.029 ns/op
Iteration  17: 619.079 ns/op
Iteration  18: 616.681 ns/op
Iteration  19: 616.757 ns/op
Iteration  20: 616.896 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1042.429 ns/op
# Warmup Iteration   2: 698.780 ns/op
# Warmup Iteration   3: 623.645 ns/op
# Warmup Iteration   4: 626.375 ns/op
# Warmup Iteration   5: 637.642 ns/op
Iteration   1: 629.173 ns/op
Iteration   2: 618.771 ns/op
Iteration   3: 618.564 ns/op
Iteration   4: 618.426 ns/op
Iteration   5: 622.380 ns/op
Iteration   6: 619.285 ns/op
Iteration   7: 618.705 ns/op
Iteration   8: 620.047 ns/op
Iteration   9: 617.432 ns/op
Iteration  10: 616.094 ns/op
Iteration  11: 616.162 ns/op
Iteration  12: 616.311 ns/op
Iteration  13: 622.598 ns/op
Iteration  14: 616.647 ns/op
Iteration  15: 617.061 ns/op
Iteration  16: 617.315 ns/op
Iteration  17: 621.617 ns/op
Iteration  18: 616.961 ns/op
Iteration  19: 618.074 ns/op
Iteration  20: 618.078 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1036.386 ns/op
# Warmup Iteration   2: 694.614 ns/op
# Warmup Iteration   3: 623.538 ns/op
# Warmup Iteration   4: 626.038 ns/op
# Warmup Iteration   5: 636.361 ns/op
Iteration   1: 629.217 ns/op
Iteration   2: 618.845 ns/op
Iteration   3: 618.438 ns/op
Iteration   4: 618.491 ns/op
Iteration   5: 621.824 ns/op
Iteration   6: 620.634 ns/op
Iteration   7: 618.606 ns/op
Iteration   8: 621.858 ns/op
Iteration   9: 618.929 ns/op
Iteration  10: 617.536 ns/op
Iteration  11: 617.258 ns/op
Iteration  12: 616.977 ns/op
Iteration  13: 618.473 ns/op
Iteration  14: 617.282 ns/op
Iteration  15: 617.217 ns/op
Iteration  16: 617.032 ns/op
Iteration  17: 619.087 ns/op
Iteration  18: 618.645 ns/op
Iteration  19: 618.823 ns/op
Iteration  20: 618.157 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  619.302 ±(99.9%) 1.041 ns/op [Average]
  (min, avg, max) = (615.960, 619.302, 633.174), stdev = 3.071
  CI (99.9%): [618.260, 620.343] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

		 	 			
		 	 		
			
	 	    		 	
 

	    	
 
 ,		 	  
 

 
  
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1115.024 ns/op
# Warmup Iteration   2: 752.196 ns/op
# Warmup Iteration   3: 680.272 ns/op
# Warmup Iteration   4: 676.327 ns/op
# Warmup Iteration   5: 679.507 ns/op
Iteration   1: 680.089 ns/op
Iteration   2: 668.005 ns/op
Iteration   3: 664.709 ns/op
Iteration   4: 664.682 ns/op
Iteration   5: 665.180 ns/op
Iteration   6: 665.083 ns/op
Iteration   7: 664.691 ns/op
Iteration   8: 667.685 ns/op
Iteration   9: 662.772 ns/op
Iteration  10: 663.287 ns/op
Iteration  11: 667.864 ns/op
Iteration  12: 662.805 ns/op
Iteration  13: 664.169 ns/op
Iteration  14: 662.812 ns/op
Iteration  15: 663.067 ns/op
Iteration  16: 663.186 ns/op
Iteration  17: 663.008 ns/op
Iteration  18: 664.643 ns/op
Iteration  19: 663.439 ns/op
Iteration  20: 664.485 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1087.130 ns/op
# Warmup Iteration   2: 749.508 ns/op
# Warmup Iteration   3: 693.214 ns/op
# Warmup Iteration   4: 679.665 ns/op
# Warmup Iteration   5: 681.662 ns/op
Iteration   1: 686.029 ns/op
Iteration   2: 673.518 ns/op
Iteration   3: 669.826 ns/op
Iteration   4: 669.921 ns/op
Iteration   5: 670.378 ns/op
Iteration   6: 669.626 ns/op
Iteration   7: 669.703 ns/op
Iteration   8: 672.660 ns/op
Iteration   9: 668.711 ns/op
Iteration  10: 668.411 ns/op
Iteration  11: 668.621 ns/op
Iteration  12: 668.949 ns/op
Iteration  13: 671.024 ns/op
Iteration  14: 669.334 ns/op
Iteration  15: 670.382 ns/op
Iteration  16: 670.634 ns/op
Iteration  17: 669.121 ns/op
Iteration  18: 669.927 ns/op
Iteration  19: 674.254 ns/op
Iteration  20: 670.569 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1082.730 ns/op
# Warmup Iteration   2: 735.257 ns/op
# Warmup Iteration   3: 667.284 ns/op
# Warmup Iteration   4: 665.093 ns/op
# Warmup Iteration   5: 668.689 ns/op
Iteration   1: 673.193 ns/op
Iteration   2: 660.486 ns/op
Iteration   3: 657.021 ns/op
Iteration   4: 658.167 ns/op
Iteration   5: 657.792 ns/op
Iteration   6: 657.672 ns/op
Iteration   7: 661.250 ns/op
Iteration   8: 668.967 ns/op
Iteration   9: 655.943 ns/op
Iteration  10: 655.423 ns/op
Iteration  11: 655.008 ns/op
Iteration  12: 656.078 ns/op
Iteration  13: 655.152 ns/op
Iteration  14: 655.147 ns/op
Iteration  15: 656.435 ns/op
Iteration  16: 657.158 ns/op
Iteration  17: 656.593 ns/op
Iteration  18: 656.911 ns/op
Iteration  19: 657.054 ns/op
Iteration  20: 656.741 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1078.570 ns/op
# Warmup Iteration   2: 738.758 ns/op
# Warmup Iteration   3: 658.797 ns/op
# Warmup Iteration   4: 661.001 ns/op
# Warmup Iteration   5: 663.905 ns/op
Iteration   1: 672.631 ns/op
Iteration   2: 652.487 ns/op
Iteration   3: 652.252 ns/op
Iteration   4: 652.690 ns/op
Iteration   5: 652.488 ns/op
Iteration   6: 655.042 ns/op
Iteration   7: 652.155 ns/op
Iteration   8: 652.150 ns/op
Iteration   9: 650.866 ns/op
Iteration  10: 650.977 ns/op
Iteration  11: 657.118 ns/op
Iteration  12: 651.581 ns/op
Iteration  13: 650.834 ns/op
Iteration  14: 651.291 ns/op
Iteration  15: 653.361 ns/op
Iteration  16: 652.283 ns/op
Iteration  17: 651.227 ns/op
Iteration  18: 651.210 ns/op
Iteration  19: 650.937 ns/op
Iteration  20: 652.787 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1100.986 ns/op
# Warmup Iteration   2: 731.606 ns/op
# Warmup Iteration   3: 662.891 ns/op
# Warmup Iteration   4: 657.902 ns/op
# Warmup Iteration   5: 661.138 ns/op
Iteration   1: 668.535 ns/op
Iteration   2: 650.240 ns/op
Iteration   3: 650.062 ns/op
Iteration   4: 650.393 ns/op
Iteration   5: 650.447 ns/op
Iteration   6: 657.654 ns/op
Iteration   7: 651.107 ns/op
Iteration   8: 654.488 ns/op
Iteration   9: 652.284 ns/op
Iteration  10: 648.574 ns/op
Iteration  11: 651.224 ns/op
Iteration  12: 648.729 ns/op
Iteration  13: 649.583 ns/op
Iteration  14: 650.082 ns/op
Iteration  15: 653.309 ns/op
Iteration  16: 648.677 ns/op
Iteration  17: 652.646 ns/op
Iteration  18: 650.762 ns/op
Iteration  19: 648.487 ns/op
Iteration  20: 651.337 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  660.004 ±(99.9%) 2.864 ns/op [Average]
  (min, avg, max) = (648.487, 660.004, 686.029), stdev = 8.444
  CI (99.9%): [657.141, 662.868] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                          (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

		 	 			
		 	 		
			
	 	    		 	
 

	    	
 
 ,		 	  
 

 
  
  avgt  100  619.302 ± 1.041  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

		 	 			
		 	 		
			
	 	    		 	
 

	    	
 
 ,		 	  
 

 
  
  avgt  100  660.004 ± 2.864  ns/op

Benchmark result is saved to split_precompiled_regex_6_129_Match.csv
