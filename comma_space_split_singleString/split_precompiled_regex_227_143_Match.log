# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 
		


	
 
  	  		
 	    		
			 
	   

	  	
	

	 		

	  
		
 ,	 	
	
 		 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1091.707 ns/op
# Warmup Iteration   2: 755.857 ns/op
# Warmup Iteration   3: 678.675 ns/op
# Warmup Iteration   4: 674.073 ns/op
# Warmup Iteration   5: 678.209 ns/op
Iteration   1: 682.086 ns/op
Iteration   2: 667.733 ns/op
Iteration   3: 669.304 ns/op
Iteration   4: 665.985 ns/op
Iteration   5: 666.432 ns/op
Iteration   6: 666.119 ns/op
Iteration   7: 665.766 ns/op
Iteration   8: 666.026 ns/op
Iteration   9: 667.164 ns/op
Iteration  10: 664.343 ns/op
Iteration  11: 664.087 ns/op
Iteration  12: 663.943 ns/op
Iteration  13: 664.067 ns/op
Iteration  14: 664.026 ns/op
Iteration  15: 665.445 ns/op
Iteration  16: 664.154 ns/op
Iteration  17: 664.298 ns/op
Iteration  18: 665.001 ns/op
Iteration  19: 665.005 ns/op
Iteration  20: 664.499 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1072.644 ns/op
# Warmup Iteration   2: 730.653 ns/op
# Warmup Iteration   3: 662.001 ns/op
# Warmup Iteration   4: 655.590 ns/op
# Warmup Iteration   5: 659.888 ns/op
Iteration   1: 663.156 ns/op
Iteration   2: 651.201 ns/op
Iteration   3: 647.541 ns/op
Iteration   4: 647.897 ns/op
Iteration   5: 647.321 ns/op
Iteration   6: 649.570 ns/op
Iteration   7: 652.951 ns/op
Iteration   8: 647.163 ns/op
Iteration   9: 644.952 ns/op
Iteration  10: 644.545 ns/op
Iteration  11: 650.251 ns/op
Iteration  12: 646.318 ns/op
Iteration  13: 644.747 ns/op
Iteration  14: 644.768 ns/op
Iteration  15: 645.361 ns/op
Iteration  16: 645.398 ns/op
Iteration  17: 646.212 ns/op
Iteration  18: 645.465 ns/op
Iteration  19: 645.872 ns/op
Iteration  20: 647.417 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1074.258 ns/op
# Warmup Iteration   2: 731.655 ns/op
# Warmup Iteration   3: 655.314 ns/op
# Warmup Iteration   4: 651.674 ns/op
# Warmup Iteration   5: 655.261 ns/op
Iteration   1: 658.503 ns/op
Iteration   2: 647.080 ns/op
Iteration   3: 644.277 ns/op
Iteration   4: 644.320 ns/op
Iteration   5: 643.749 ns/op
Iteration   6: 644.107 ns/op
Iteration   7: 647.062 ns/op
Iteration   8: 643.871 ns/op
Iteration   9: 641.729 ns/op
Iteration  10: 641.490 ns/op
Iteration  11: 647.304 ns/op
Iteration  12: 643.334 ns/op
Iteration  13: 641.427 ns/op
Iteration  14: 641.919 ns/op
Iteration  15: 641.576 ns/op
Iteration  16: 641.631 ns/op
Iteration  17: 643.404 ns/op
Iteration  18: 642.244 ns/op
Iteration  19: 642.420 ns/op
Iteration  20: 642.174 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1092.904 ns/op
# Warmup Iteration   2: 761.830 ns/op
# Warmup Iteration   3: 684.053 ns/op
# Warmup Iteration   4: 680.671 ns/op
# Warmup Iteration   5: 683.851 ns/op
Iteration   1: 687.781 ns/op
Iteration   2: 672.670 ns/op
Iteration   3: 672.375 ns/op
Iteration   4: 675.576 ns/op
Iteration   5: 672.478 ns/op
Iteration   6: 672.452 ns/op
Iteration   7: 672.790 ns/op
Iteration   8: 675.303 ns/op
Iteration   9: 672.852 ns/op
Iteration  10: 676.252 ns/op
Iteration  11: 670.618 ns/op
Iteration  12: 670.490 ns/op
Iteration  13: 670.197 ns/op
Iteration  14: 670.265 ns/op
Iteration  15: 670.587 ns/op
Iteration  16: 674.387 ns/op
Iteration  17: 671.332 ns/op
Iteration  18: 669.976 ns/op
Iteration  19: 674.144 ns/op
Iteration  20: 685.906 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1096.565 ns/op
# Warmup Iteration   2: 760.388 ns/op
# Warmup Iteration   3: 682.179 ns/op
# Warmup Iteration   4: 677.093 ns/op
# Warmup Iteration   5: 681.481 ns/op
Iteration   1: 685.316 ns/op
Iteration   2: 670.707 ns/op
Iteration   3: 680.120 ns/op
Iteration   4: 670.168 ns/op
Iteration   5: 671.800 ns/op
Iteration   6: 669.445 ns/op
Iteration   7: 669.426 ns/op
Iteration   8: 669.086 ns/op
Iteration   9: 669.602 ns/op
Iteration  10: 669.988 ns/op
Iteration  11: 667.930 ns/op
Iteration  12: 667.838 ns/op
Iteration  13: 667.541 ns/op
Iteration  14: 667.862 ns/op
Iteration  15: 667.831 ns/op
Iteration  16: 669.949 ns/op
Iteration  17: 668.153 ns/op
Iteration  18: 668.346 ns/op
Iteration  19: 668.501 ns/op
Iteration  20: 668.392 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  660.537 ±(99.9%) 4.375 ns/op [Average]
  (min, avg, max) = (641.427, 660.537, 687.781), stdev = 12.900
  CI (99.9%): [656.161, 664.912] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 
		


	
 
  	  		
 	    		
			 
	   

	  	
	

	 		

	  
		
 ,	 	
	
 		 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1148.052 ns/op
# Warmup Iteration   2: 799.258 ns/op
# Warmup Iteration   3: 711.605 ns/op
# Warmup Iteration   4: 708.608 ns/op
# Warmup Iteration   5: 711.500 ns/op
Iteration   1: 715.251 ns/op
Iteration   2: 699.681 ns/op
Iteration   3: 698.949 ns/op
Iteration   4: 698.801 ns/op
Iteration   5: 702.340 ns/op
Iteration   6: 699.153 ns/op
Iteration   7: 698.980 ns/op
Iteration   8: 699.360 ns/op
Iteration   9: 699.466 ns/op
Iteration  10: 696.813 ns/op
Iteration  11: 696.737 ns/op
Iteration  12: 697.337 ns/op
Iteration  13: 696.151 ns/op
Iteration  14: 697.381 ns/op
Iteration  15: 696.410 ns/op
Iteration  16: 696.121 ns/op
Iteration  17: 696.569 ns/op
Iteration  18: 696.557 ns/op
Iteration  19: 697.158 ns/op
Iteration  20: 701.651 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1116.191 ns/op
# Warmup Iteration   2: 783.232 ns/op
# Warmup Iteration   3: 702.918 ns/op
# Warmup Iteration   4: 699.022 ns/op
# Warmup Iteration   5: 708.171 ns/op
Iteration   1: 706.748 ns/op
Iteration   2: 691.655 ns/op
Iteration   3: 691.589 ns/op
Iteration   4: 694.138 ns/op
Iteration   5: 691.903 ns/op
Iteration   6: 696.017 ns/op
Iteration   7: 692.687 ns/op
Iteration   8: 696.308 ns/op
Iteration   9: 692.202 ns/op
Iteration  10: 694.122 ns/op
Iteration  11: 693.123 ns/op
Iteration  12: 689.519 ns/op
Iteration  13: 695.156 ns/op
Iteration  14: 689.928 ns/op
Iteration  15: 689.551 ns/op
Iteration  16: 689.642 ns/op
Iteration  17: 690.071 ns/op
Iteration  18: 692.042 ns/op
Iteration  19: 690.171 ns/op
Iteration  20: 690.797 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1133.062 ns/op
# Warmup Iteration   2: 769.526 ns/op
# Warmup Iteration   3: 688.758 ns/op
# Warmup Iteration   4: 684.227 ns/op
# Warmup Iteration   5: 688.285 ns/op
Iteration   1: 692.902 ns/op
Iteration   2: 676.659 ns/op
Iteration   3: 679.274 ns/op
Iteration   4: 676.107 ns/op
Iteration   5: 676.755 ns/op
Iteration   6: 675.880 ns/op
Iteration   7: 676.480 ns/op
Iteration   8: 680.113 ns/op
Iteration   9: 680.530 ns/op
Iteration  10: 678.865 ns/op
Iteration  11: 678.756 ns/op
Iteration  12: 674.319 ns/op
Iteration  13: 674.791 ns/op
Iteration  14: 674.114 ns/op
Iteration  15: 675.809 ns/op
Iteration  16: 674.377 ns/op
Iteration  17: 675.236 ns/op
Iteration  18: 674.912 ns/op
Iteration  19: 675.886 ns/op
Iteration  20: 675.858 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1098.141 ns/op
# Warmup Iteration   2: 751.666 ns/op
# Warmup Iteration   3: 680.202 ns/op
# Warmup Iteration   4: 676.909 ns/op
# Warmup Iteration   5: 680.170 ns/op
Iteration   1: 684.380 ns/op
Iteration   2: 671.424 ns/op
Iteration   3: 668.162 ns/op
Iteration   4: 667.683 ns/op
Iteration   5: 668.921 ns/op
Iteration   6: 668.833 ns/op
Iteration   7: 668.722 ns/op
Iteration   8: 672.011 ns/op
Iteration   9: 670.686 ns/op
Iteration  10: 668.525 ns/op
Iteration  11: 667.032 ns/op
Iteration  12: 666.763 ns/op
Iteration  13: 673.061 ns/op
Iteration  14: 667.047 ns/op
Iteration  15: 666.972 ns/op
Iteration  16: 666.734 ns/op
Iteration  17: 667.318 ns/op
Iteration  18: 667.258 ns/op
Iteration  19: 668.967 ns/op
Iteration  20: 667.379 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1089.186 ns/op
# Warmup Iteration   2: 743.801 ns/op
# Warmup Iteration   3: 674.940 ns/op
# Warmup Iteration   4: 672.191 ns/op
# Warmup Iteration   5: 676.180 ns/op
Iteration   1: 680.375 ns/op
Iteration   2: 667.635 ns/op
Iteration   3: 664.208 ns/op
Iteration   4: 664.791 ns/op
Iteration   5: 664.234 ns/op
Iteration   6: 663.854 ns/op
Iteration   7: 671.273 ns/op
Iteration   8: 665.942 ns/op
Iteration   9: 663.551 ns/op
Iteration  10: 661.841 ns/op
Iteration  11: 662.065 ns/op
Iteration  12: 663.699 ns/op
Iteration  13: 662.370 ns/op
Iteration  14: 662.132 ns/op
Iteration  15: 662.719 ns/op
Iteration  16: 662.265 ns/op
Iteration  17: 662.849 ns/op
Iteration  18: 664.959 ns/op
Iteration  19: 662.171 ns/op
Iteration  20: 661.779 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  680.685 ±(99.9%) 4.720 ns/op [Average]
  (min, avg, max) = (661.779, 680.685, 715.251), stdev = 13.917
  CI (99.9%): [675.965, 685.404] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	 
		


	
 
  	  		
 	    		
			 
	   

	  	
	

	 		

	  
		
 ,	 	
	
 		   avgt  100  660.537 ± 4.375  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	 
		


	
 
  	  		
 	    		
			 
	   

	  	
	

	 		

	  
		
 ,	 	
	
 		   avgt  100  680.685 ± 4.720  ns/op

Benchmark result is saved to split_precompiled_regex_227_143_Match.csv
