# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 		 
  

 

,	  
	   
	

			
	 	
	
  	 	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1000.446 ns/op
# Warmup Iteration   2: 638.909 ns/op
# Warmup Iteration   3: 580.560 ns/op
# Warmup Iteration   4: 596.103 ns/op
# Warmup Iteration   5: 590.320 ns/op
Iteration   1: 576.637 ns/op
Iteration   2: 578.274 ns/op
Iteration   3: 574.356 ns/op
Iteration   4: 575.609 ns/op
Iteration   5: 577.795 ns/op
Iteration   6: 574.824 ns/op
Iteration   7: 576.774 ns/op
Iteration   8: 576.702 ns/op
Iteration   9: 574.296 ns/op
Iteration  10: 573.999 ns/op
Iteration  11: 580.023 ns/op
Iteration  12: 574.137 ns/op
Iteration  13: 574.495 ns/op
Iteration  14: 579.425 ns/op
Iteration  15: 575.077 ns/op
Iteration  16: 574.292 ns/op
Iteration  17: 576.333 ns/op
Iteration  18: 574.078 ns/op
Iteration  19: 574.759 ns/op
Iteration  20: 576.466 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 997.424 ns/op
# Warmup Iteration   2: 640.052 ns/op
# Warmup Iteration   3: 583.665 ns/op
# Warmup Iteration   4: 599.121 ns/op
# Warmup Iteration   5: 591.691 ns/op
Iteration   1: 578.818 ns/op
Iteration   2: 582.267 ns/op
Iteration   3: 580.199 ns/op
Iteration   4: 578.647 ns/op
Iteration   5: 585.164 ns/op
Iteration   6: 581.802 ns/op
Iteration   7: 579.332 ns/op
Iteration   8: 577.466 ns/op
Iteration   9: 579.754 ns/op
Iteration  10: 576.072 ns/op
Iteration  11: 577.317 ns/op
Iteration  12: 576.369 ns/op
Iteration  13: 577.183 ns/op
Iteration  14: 579.696 ns/op
Iteration  15: 577.026 ns/op
Iteration  16: 577.044 ns/op
Iteration  17: 580.539 ns/op
Iteration  18: 577.244 ns/op
Iteration  19: 576.571 ns/op
Iteration  20: 578.400 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 994.928 ns/op
# Warmup Iteration   2: 637.141 ns/op
# Warmup Iteration   3: 580.533 ns/op
# Warmup Iteration   4: 595.187 ns/op
# Warmup Iteration   5: 587.822 ns/op
Iteration   1: 575.332 ns/op
Iteration   2: 578.432 ns/op
Iteration   3: 575.133 ns/op
Iteration   4: 575.399 ns/op
Iteration   5: 577.851 ns/op
Iteration   6: 575.078 ns/op
Iteration   7: 575.670 ns/op
Iteration   8: 576.621 ns/op
Iteration   9: 573.339 ns/op
Iteration  10: 573.654 ns/op
Iteration  11: 575.304 ns/op
Iteration  12: 573.962 ns/op
Iteration  13: 573.841 ns/op
Iteration  14: 573.986 ns/op
Iteration  15: 573.357 ns/op
Iteration  16: 573.437 ns/op
Iteration  17: 577.699 ns/op
Iteration  18: 574.691 ns/op
Iteration  19: 574.349 ns/op
Iteration  20: 576.607 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 995.438 ns/op
# Warmup Iteration   2: 635.373 ns/op
# Warmup Iteration   3: 586.539 ns/op
# Warmup Iteration   4: 598.641 ns/op
# Warmup Iteration   5: 590.550 ns/op
Iteration   1: 576.418 ns/op
Iteration   2: 578.953 ns/op
Iteration   3: 576.716 ns/op
Iteration   4: 576.675 ns/op
Iteration   5: 579.221 ns/op
Iteration   6: 576.406 ns/op
Iteration   7: 576.753 ns/op
Iteration   8: 575.737 ns/op
Iteration   9: 574.500 ns/op
Iteration  10: 574.946 ns/op
Iteration  11: 576.993 ns/op
Iteration  12: 575.007 ns/op
Iteration  13: 575.601 ns/op
Iteration  14: 576.341 ns/op
Iteration  15: 575.077 ns/op
Iteration  16: 576.006 ns/op
Iteration  17: 578.305 ns/op
Iteration  18: 575.680 ns/op
Iteration  19: 576.631 ns/op
Iteration  20: 579.692 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 994.333 ns/op
# Warmup Iteration   2: 641.537 ns/op
# Warmup Iteration   3: 585.347 ns/op
# Warmup Iteration   4: 600.945 ns/op
# Warmup Iteration   5: 594.582 ns/op
Iteration   1: 582.289 ns/op
Iteration   2: 583.985 ns/op
Iteration   3: 580.963 ns/op
Iteration   4: 580.508 ns/op
Iteration   5: 583.351 ns/op
Iteration   6: 580.800 ns/op
Iteration   7: 582.034 ns/op
Iteration   8: 579.357 ns/op
Iteration   9: 582.791 ns/op
Iteration  10: 579.145 ns/op
Iteration  11: 579.099 ns/op
Iteration  12: 583.132 ns/op
Iteration  13: 579.199 ns/op
Iteration  14: 579.460 ns/op
Iteration  15: 580.320 ns/op
Iteration  16: 579.418 ns/op
Iteration  17: 579.625 ns/op
Iteration  18: 582.066 ns/op
Iteration  19: 580.068 ns/op
Iteration  20: 580.028 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  577.483 ±(99.9%) 0.927 ns/op [Average]
  (min, avg, max) = (573.339, 577.483, 585.164), stdev = 2.733
  CI (99.9%): [576.556, 578.410] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 		 
  

 

,	  
	   
	

			
	 	
	
  	 	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1017.151 ns/op
# Warmup Iteration   2: 658.424 ns/op
# Warmup Iteration   3: 603.338 ns/op
# Warmup Iteration   4: 614.360 ns/op
# Warmup Iteration   5: 617.913 ns/op
Iteration   1: 595.605 ns/op
Iteration   2: 596.098 ns/op
Iteration   3: 603.857 ns/op
Iteration   4: 595.503 ns/op
Iteration   5: 596.737 ns/op
Iteration   6: 601.130 ns/op
Iteration   7: 597.377 ns/op
Iteration   8: 603.227 ns/op
Iteration   9: 598.881 ns/op
Iteration  10: 595.640 ns/op
Iteration  11: 594.213 ns/op
Iteration  12: 595.879 ns/op
Iteration  13: 593.944 ns/op
Iteration  14: 593.462 ns/op
Iteration  15: 595.078 ns/op
Iteration  16: 593.646 ns/op
Iteration  17: 596.467 ns/op
Iteration  18: 597.780 ns/op
Iteration  19: 594.409 ns/op
Iteration  20: 594.086 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1040.913 ns/op
# Warmup Iteration   2: 657.552 ns/op
# Warmup Iteration   3: 596.095 ns/op
# Warmup Iteration   4: 612.566 ns/op
# Warmup Iteration   5: 606.495 ns/op
Iteration   1: 592.240 ns/op
Iteration   2: 595.055 ns/op
Iteration   3: 592.135 ns/op
Iteration   4: 592.419 ns/op
Iteration   5: 594.718 ns/op
Iteration   6: 592.471 ns/op
Iteration   7: 592.029 ns/op
Iteration   8: 591.415 ns/op
Iteration   9: 590.266 ns/op
Iteration  10: 590.257 ns/op
Iteration  11: 592.108 ns/op
Iteration  12: 590.309 ns/op
Iteration  13: 592.817 ns/op
Iteration  14: 605.193 ns/op
Iteration  15: 590.191 ns/op
Iteration  16: 590.184 ns/op
Iteration  17: 591.201 ns/op
Iteration  18: 593.563 ns/op
Iteration  19: 592.811 ns/op
Iteration  20: 596.388 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1039.399 ns/op
# Warmup Iteration   2: 658.035 ns/op
# Warmup Iteration   3: 595.498 ns/op
# Warmup Iteration   4: 611.577 ns/op
# Warmup Iteration   5: 604.836 ns/op
Iteration   1: 591.768 ns/op
Iteration   2: 593.786 ns/op
Iteration   3: 592.406 ns/op
Iteration   4: 591.968 ns/op
Iteration   5: 594.053 ns/op
Iteration   6: 591.754 ns/op
Iteration   7: 592.072 ns/op
Iteration   8: 593.695 ns/op
Iteration   9: 591.404 ns/op
Iteration  10: 591.554 ns/op
Iteration  11: 594.702 ns/op
Iteration  12: 592.725 ns/op
Iteration  13: 591.303 ns/op
Iteration  14: 593.762 ns/op
Iteration  15: 591.929 ns/op
Iteration  16: 591.859 ns/op
Iteration  17: 600.651 ns/op
Iteration  18: 593.698 ns/op
Iteration  19: 592.589 ns/op
Iteration  20: 599.909 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1028.089 ns/op
# Warmup Iteration   2: 651.261 ns/op
# Warmup Iteration   3: 595.995 ns/op
# Warmup Iteration   4: 611.336 ns/op
# Warmup Iteration   5: 604.654 ns/op
Iteration   1: 591.865 ns/op
Iteration   2: 593.424 ns/op
Iteration   3: 591.069 ns/op
Iteration   4: 591.116 ns/op
Iteration   5: 594.097 ns/op
Iteration   6: 591.030 ns/op
Iteration   7: 590.963 ns/op
Iteration   8: 590.305 ns/op
Iteration   9: 589.130 ns/op
Iteration  10: 589.259 ns/op
Iteration  11: 589.886 ns/op
Iteration  12: 589.244 ns/op
Iteration  13: 589.611 ns/op
Iteration  14: 590.550 ns/op
Iteration  15: 589.923 ns/op
Iteration  16: 589.851 ns/op
Iteration  17: 595.674 ns/op
Iteration  18: 590.058 ns/op
Iteration  19: 589.730 ns/op
Iteration  20: 591.394 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1005.772 ns/op
# Warmup Iteration   2: 636.428 ns/op
# Warmup Iteration   3: 583.000 ns/op
# Warmup Iteration   4: 598.640 ns/op
# Warmup Iteration   5: 590.862 ns/op
Iteration   1: 578.446 ns/op
Iteration   2: 581.234 ns/op
Iteration   3: 578.510 ns/op
Iteration   4: 578.530 ns/op
Iteration   5: 580.425 ns/op
Iteration   6: 578.535 ns/op
Iteration   7: 579.869 ns/op
Iteration   8: 577.251 ns/op
Iteration   9: 576.947 ns/op
Iteration  10: 578.487 ns/op
Iteration  11: 576.869 ns/op
Iteration  12: 576.996 ns/op
Iteration  13: 578.539 ns/op
Iteration  14: 578.121 ns/op
Iteration  15: 577.615 ns/op
Iteration  16: 578.750 ns/op
Iteration  17: 577.684 ns/op
Iteration  18: 580.448 ns/op
Iteration  19: 578.536 ns/op
Iteration  20: 578.285 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  590.466 ±(99.9%) 2.290 ns/op [Average]
  (min, avg, max) = (576.869, 590.466, 605.193), stdev = 6.753
  CI (99.9%): [588.176, 592.757] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

 		 
  

 

,	  
	   
	

			
	 	
	
  	 	   avgt  100  577.483 ± 0.927  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

 		 
  

 

,	  
	   
	

			
	 	
	
  	 	   avgt  100  590.466 ± 2.290  ns/op

Benchmark result is saved to split_precompiled_regex_228_87_Match.csv
