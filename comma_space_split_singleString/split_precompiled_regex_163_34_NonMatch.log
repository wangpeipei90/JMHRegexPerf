# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = #%ZR/^u^c>Jm-"14~92:>Jc3go-sJb4v)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 896.228 ns/op
# Warmup Iteration   2: 611.143 ns/op
# Warmup Iteration   3: 550.247 ns/op
# Warmup Iteration   4: 555.404 ns/op
# Warmup Iteration   5: 555.256 ns/op
Iteration   1: 561.249 ns/op
Iteration   2: 545.836 ns/op
Iteration   3: 545.260 ns/op
Iteration   4: 545.554 ns/op
Iteration   5: 545.602 ns/op
Iteration   6: 548.471 ns/op
Iteration   7: 546.272 ns/op
Iteration   8: 546.427 ns/op
Iteration   9: 544.597 ns/op
Iteration  10: 545.359 ns/op
Iteration  11: 544.211 ns/op
Iteration  12: 544.375 ns/op
Iteration  13: 544.481 ns/op
Iteration  14: 544.940 ns/op
Iteration  15: 546.565 ns/op
Iteration  16: 544.698 ns/op
Iteration  17: 545.416 ns/op
Iteration  18: 544.604 ns/op
Iteration  19: 552.503 ns/op
Iteration  20: 545.007 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 889.538 ns/op
# Warmup Iteration   2: 608.974 ns/op
# Warmup Iteration   3: 547.102 ns/op
# Warmup Iteration   4: 549.393 ns/op
# Warmup Iteration   5: 552.492 ns/op
Iteration   1: 558.880 ns/op
Iteration   2: 543.053 ns/op
Iteration   3: 542.574 ns/op
Iteration   4: 543.026 ns/op
Iteration   5: 545.207 ns/op
Iteration   6: 542.665 ns/op
Iteration   7: 543.248 ns/op
Iteration   8: 543.116 ns/op
Iteration   9: 541.617 ns/op
Iteration  10: 541.706 ns/op
Iteration  11: 541.014 ns/op
Iteration  12: 545.152 ns/op
Iteration  13: 541.348 ns/op
Iteration  14: 541.842 ns/op
Iteration  15: 541.557 ns/op
Iteration  16: 541.042 ns/op
Iteration  17: 541.305 ns/op
Iteration  18: 543.159 ns/op
Iteration  19: 541.174 ns/op
Iteration  20: 541.277 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 887.623 ns/op
# Warmup Iteration   2: 605.805 ns/op
# Warmup Iteration   3: 546.185 ns/op
# Warmup Iteration   4: 548.424 ns/op
# Warmup Iteration   5: 552.176 ns/op
Iteration   1: 558.071 ns/op
Iteration   2: 542.664 ns/op
Iteration   3: 542.260 ns/op
Iteration   4: 543.817 ns/op
Iteration   5: 544.949 ns/op
Iteration   6: 542.286 ns/op
Iteration   7: 541.340 ns/op
Iteration   8: 541.739 ns/op
Iteration   9: 540.096 ns/op
Iteration  10: 540.766 ns/op
Iteration  11: 540.053 ns/op
Iteration  12: 540.951 ns/op
Iteration  13: 540.569 ns/op
Iteration  14: 542.959 ns/op
Iteration  15: 540.781 ns/op
Iteration  16: 544.151 ns/op
Iteration  17: 546.627 ns/op
Iteration  18: 545.520 ns/op
Iteration  19: 541.489 ns/op
Iteration  20: 541.893 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 880.664 ns/op
# Warmup Iteration   2: 596.707 ns/op
# Warmup Iteration   3: 541.474 ns/op
# Warmup Iteration   4: 543.663 ns/op
# Warmup Iteration   5: 556.204 ns/op
Iteration   1: 542.872 ns/op
Iteration   2: 536.801 ns/op
Iteration   3: 537.283 ns/op
Iteration   4: 536.993 ns/op
Iteration   5: 539.756 ns/op
Iteration   6: 536.982 ns/op
Iteration   7: 536.827 ns/op
Iteration   8: 537.130 ns/op
Iteration   9: 536.308 ns/op
Iteration  10: 535.276 ns/op
Iteration  11: 535.215 ns/op
Iteration  12: 535.611 ns/op
Iteration  13: 537.239 ns/op
Iteration  14: 535.463 ns/op
Iteration  15: 535.518 ns/op
Iteration  16: 535.480 ns/op
Iteration  17: 537.073 ns/op
Iteration  18: 536.057 ns/op
Iteration  19: 535.969 ns/op
Iteration  20: 536.057 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 885.477 ns/op
# Warmup Iteration   2: 601.776 ns/op
# Warmup Iteration   3: 541.598 ns/op
# Warmup Iteration   4: 544.162 ns/op
# Warmup Iteration   5: 553.577 ns/op
Iteration   1: 547.233 ns/op
Iteration   2: 537.496 ns/op
Iteration   3: 537.625 ns/op
Iteration   4: 537.967 ns/op
Iteration   5: 540.860 ns/op
Iteration   6: 538.112 ns/op
Iteration   7: 538.282 ns/op
Iteration   8: 538.532 ns/op
Iteration   9: 537.607 ns/op
Iteration  10: 536.590 ns/op
Iteration  11: 537.048 ns/op
Iteration  12: 538.010 ns/op
Iteration  13: 540.419 ns/op
Iteration  14: 539.533 ns/op
Iteration  15: 537.836 ns/op
Iteration  16: 538.559 ns/op
Iteration  17: 541.528 ns/op
Iteration  18: 538.472 ns/op
Iteration  19: 538.711 ns/op
Iteration  20: 538.394 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  541.731 ±(99.9%) 1.611 ns/op [Average]
  (min, avg, max) = (535.215, 541.731, 561.249), stdev = 4.751
  CI (99.9%): [540.120, 543.342] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = #%ZR/^u^c>Jm-"14~92:>Jc3go-sJb4v)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 886.746 ns/op
# Warmup Iteration   2: 600.349 ns/op
# Warmup Iteration   3: 539.926 ns/op
# Warmup Iteration   4: 542.180 ns/op
# Warmup Iteration   5: 553.845 ns/op
Iteration   1: 543.244 ns/op
Iteration   2: 535.837 ns/op
Iteration   3: 535.077 ns/op
Iteration   4: 535.705 ns/op
Iteration   5: 537.592 ns/op
Iteration   6: 535.422 ns/op
Iteration   7: 535.435 ns/op
Iteration   8: 535.608 ns/op
Iteration   9: 534.482 ns/op
Iteration  10: 533.735 ns/op
Iteration  11: 533.945 ns/op
Iteration  12: 537.580 ns/op
Iteration  13: 534.452 ns/op
Iteration  14: 533.863 ns/op
Iteration  15: 534.129 ns/op
Iteration  16: 534.061 ns/op
Iteration  17: 535.241 ns/op
Iteration  18: 533.871 ns/op
Iteration  19: 534.231 ns/op
Iteration  20: 535.223 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 885.514 ns/op
# Warmup Iteration   2: 600.698 ns/op
# Warmup Iteration   3: 542.043 ns/op
# Warmup Iteration   4: 543.892 ns/op
# Warmup Iteration   5: 550.992 ns/op
Iteration   1: 547.969 ns/op
Iteration   2: 536.924 ns/op
Iteration   3: 536.828 ns/op
Iteration   4: 536.981 ns/op
Iteration   5: 539.333 ns/op
Iteration   6: 536.836 ns/op
Iteration   7: 536.908 ns/op
Iteration   8: 537.221 ns/op
Iteration   9: 536.672 ns/op
Iteration  10: 535.883 ns/op
Iteration  11: 535.992 ns/op
Iteration  12: 536.075 ns/op
Iteration  13: 536.879 ns/op
Iteration  14: 536.703 ns/op
Iteration  15: 539.837 ns/op
Iteration  16: 540.075 ns/op
Iteration  17: 549.850 ns/op
Iteration  18: 542.193 ns/op
Iteration  19: 536.908 ns/op
Iteration  20: 538.202 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 883.910 ns/op
# Warmup Iteration   2: 605.222 ns/op
# Warmup Iteration   3: 549.065 ns/op
# Warmup Iteration   4: 548.103 ns/op
# Warmup Iteration   5: 552.046 ns/op
Iteration   1: 556.666 ns/op
Iteration   2: 541.600 ns/op
Iteration   3: 540.937 ns/op
Iteration   4: 541.331 ns/op
Iteration   5: 544.141 ns/op
Iteration   6: 541.209 ns/op
Iteration   7: 541.607 ns/op
Iteration   8: 541.900 ns/op
Iteration   9: 545.437 ns/op
Iteration  10: 541.548 ns/op
Iteration  11: 540.271 ns/op
Iteration  12: 540.139 ns/op
Iteration  13: 540.560 ns/op
Iteration  14: 542.616 ns/op
Iteration  15: 540.587 ns/op
Iteration  16: 541.134 ns/op
Iteration  17: 541.295 ns/op
Iteration  18: 542.864 ns/op
Iteration  19: 540.815 ns/op
Iteration  20: 542.889 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 883.260 ns/op
# Warmup Iteration   2: 596.999 ns/op
# Warmup Iteration   3: 538.367 ns/op
# Warmup Iteration   4: 540.917 ns/op
# Warmup Iteration   5: 558.808 ns/op
Iteration   1: 536.313 ns/op
Iteration   2: 534.593 ns/op
Iteration   3: 534.196 ns/op
Iteration   4: 536.385 ns/op
Iteration   5: 534.723 ns/op
Iteration   6: 533.919 ns/op
Iteration   7: 534.326 ns/op
Iteration   8: 534.481 ns/op
Iteration   9: 533.466 ns/op
Iteration  10: 532.245 ns/op
Iteration  11: 531.675 ns/op
Iteration  12: 533.009 ns/op
Iteration  13: 531.589 ns/op
Iteration  14: 532.481 ns/op
Iteration  15: 532.552 ns/op
Iteration  16: 533.927 ns/op
Iteration  17: 532.320 ns/op
Iteration  18: 532.478 ns/op
Iteration  19: 531.904 ns/op
Iteration  20: 534.003 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 882.661 ns/op
# Warmup Iteration   2: 596.218 ns/op
# Warmup Iteration   3: 534.648 ns/op
# Warmup Iteration   4: 536.905 ns/op
# Warmup Iteration   5: 556.307 ns/op
Iteration   1: 532.264 ns/op
Iteration   2: 530.427 ns/op
Iteration   3: 532.781 ns/op
Iteration   4: 536.658 ns/op
Iteration   5: 530.788 ns/op
Iteration   6: 533.484 ns/op
Iteration   7: 536.953 ns/op
Iteration   8: 536.325 ns/op
Iteration   9: 528.732 ns/op
Iteration  10: 529.180 ns/op
Iteration  11: 528.714 ns/op
Iteration  12: 530.317 ns/op
Iteration  13: 528.877 ns/op
Iteration  14: 529.397 ns/op
Iteration  15: 529.217 ns/op
Iteration  16: 534.411 ns/op
Iteration  17: 530.081 ns/op
Iteration  18: 529.280 ns/op
Iteration  19: 529.202 ns/op
Iteration  20: 530.247 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  536.305 ±(99.9%) 1.647 ns/op [Average]
  (min, avg, max) = (528.714, 536.305, 556.666), stdev = 4.856
  CI (99.9%): [534.658, 537.952] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  #%ZR/^u^c>Jm-"14~92:>Jc3go-sJb4v  avgt  100  541.731 ± 1.611  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  #%ZR/^u^c>Jm-"14~92:>Jc3go-sJb4v  avgt  100  536.305 ± 1.647  ns/op

Benchmark result is saved to split_precompiled_regex_163_34_NonMatch.csv
