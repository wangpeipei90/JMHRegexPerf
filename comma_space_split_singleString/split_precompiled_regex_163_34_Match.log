# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
   
   

    ,

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 897.428 ns/op
# Warmup Iteration   2: 469.829 ns/op
# Warmup Iteration   3: 452.329 ns/op
# Warmup Iteration   4: 461.570 ns/op
# Warmup Iteration   5: 443.228 ns/op
Iteration   1: 440.723 ns/op
Iteration   2: 443.034 ns/op
Iteration   3: 443.476 ns/op
Iteration   4: 443.265 ns/op
Iteration   5: 440.117 ns/op
Iteration   6: 442.365 ns/op
Iteration   7: 440.672 ns/op
Iteration   8: 440.873 ns/op
Iteration   9: 439.202 ns/op
Iteration  10: 440.692 ns/op
Iteration  11: 440.919 ns/op
Iteration  12: 440.206 ns/op
Iteration  13: 439.391 ns/op
Iteration  14: 441.056 ns/op
Iteration  15: 442.378 ns/op
Iteration  16: 441.902 ns/op
Iteration  17: 440.557 ns/op
Iteration  18: 441.641 ns/op
Iteration  19: 442.093 ns/op
Iteration  20: 441.354 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 905.043 ns/op
# Warmup Iteration   2: 468.502 ns/op
# Warmup Iteration   3: 459.417 ns/op
# Warmup Iteration   4: 468.566 ns/op
# Warmup Iteration   5: 456.225 ns/op
Iteration   1: 445.360 ns/op
Iteration   2: 447.522 ns/op
Iteration   3: 447.736 ns/op
Iteration   4: 452.789 ns/op
Iteration   5: 444.317 ns/op
Iteration   6: 444.919 ns/op
Iteration   7: 444.902 ns/op
Iteration   8: 444.282 ns/op
Iteration   9: 445.194 ns/op
Iteration  10: 446.446 ns/op
Iteration  11: 445.681 ns/op
Iteration  12: 444.634 ns/op
Iteration  13: 445.938 ns/op
Iteration  14: 445.904 ns/op
Iteration  15: 445.793 ns/op
Iteration  16: 444.448 ns/op
Iteration  17: 445.352 ns/op
Iteration  18: 446.778 ns/op
Iteration  19: 446.167 ns/op
Iteration  20: 444.751 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 905.918 ns/op
# Warmup Iteration   2: 476.932 ns/op
# Warmup Iteration   3: 466.052 ns/op
# Warmup Iteration   4: 475.710 ns/op
# Warmup Iteration   5: 454.349 ns/op
Iteration   1: 456.183 ns/op
Iteration   2: 456.314 ns/op
Iteration   3: 456.644 ns/op
Iteration   4: 454.497 ns/op
Iteration   5: 455.224 ns/op
Iteration   6: 453.484 ns/op
Iteration   7: 452.753 ns/op
Iteration   8: 453.643 ns/op
Iteration   9: 453.848 ns/op
Iteration  10: 452.715 ns/op
Iteration  11: 453.966 ns/op
Iteration  12: 453.935 ns/op
Iteration  13: 454.026 ns/op
Iteration  14: 453.092 ns/op
Iteration  15: 454.679 ns/op
Iteration  16: 457.896 ns/op
Iteration  17: 453.221 ns/op
Iteration  18: 454.298 ns/op
Iteration  19: 454.823 ns/op
Iteration  20: 453.350 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 909.952 ns/op
# Warmup Iteration   2: 469.293 ns/op
# Warmup Iteration   3: 453.037 ns/op
# Warmup Iteration   4: 463.211 ns/op
# Warmup Iteration   5: 444.356 ns/op
Iteration   1: 441.915 ns/op
Iteration   2: 444.482 ns/op
Iteration   3: 443.885 ns/op
Iteration   4: 444.931 ns/op
Iteration   5: 445.796 ns/op
Iteration   6: 444.823 ns/op
Iteration   7: 442.949 ns/op
Iteration   8: 442.687 ns/op
Iteration   9: 441.231 ns/op
Iteration  10: 442.359 ns/op
Iteration  11: 441.953 ns/op
Iteration  12: 441.092 ns/op
Iteration  13: 442.230 ns/op
Iteration  14: 441.590 ns/op
Iteration  15: 442.463 ns/op
Iteration  16: 441.462 ns/op
Iteration  17: 443.272 ns/op
Iteration  18: 441.780 ns/op
Iteration  19: 443.508 ns/op
Iteration  20: 441.377 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 909.916 ns/op
# Warmup Iteration   2: 494.882 ns/op
# Warmup Iteration   3: 472.830 ns/op
# Warmup Iteration   4: 483.051 ns/op
# Warmup Iteration   5: 461.804 ns/op
Iteration   1: 463.819 ns/op
Iteration   2: 464.386 ns/op
Iteration   3: 462.045 ns/op
Iteration   4: 463.058 ns/op
Iteration   5: 463.261 ns/op
Iteration   6: 461.714 ns/op
Iteration   7: 462.413 ns/op
Iteration   8: 462.538 ns/op
Iteration   9: 460.912 ns/op
Iteration  10: 462.795 ns/op
Iteration  11: 462.379 ns/op
Iteration  12: 460.719 ns/op
Iteration  13: 462.470 ns/op
Iteration  14: 462.018 ns/op
Iteration  15: 460.519 ns/op
Iteration  16: 462.191 ns/op
Iteration  17: 490.335 ns/op
Iteration  18: 460.350 ns/op
Iteration  19: 461.657 ns/op
Iteration  20: 461.998 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  449.608 ±(99.9%) 3.028 ns/op [Average]
  (min, avg, max) = (439.202, 449.608, 490.335), stdev = 8.928
  CI (99.9%): [446.580, 452.636] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
   
   

    ,

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 902.713 ns/op
# Warmup Iteration   2: 479.043 ns/op
# Warmup Iteration   3: 469.465 ns/op
# Warmup Iteration   4: 473.666 ns/op
# Warmup Iteration   5: 460.885 ns/op
Iteration   1: 453.329 ns/op
Iteration   2: 455.783 ns/op
Iteration   3: 455.674 ns/op
Iteration   4: 453.271 ns/op
Iteration   5: 454.424 ns/op
Iteration   6: 452.872 ns/op
Iteration   7: 452.805 ns/op
Iteration   8: 451.877 ns/op
Iteration   9: 453.185 ns/op
Iteration  10: 452.812 ns/op
Iteration  11: 453.829 ns/op
Iteration  12: 452.378 ns/op
Iteration  13: 454.255 ns/op
Iteration  14: 453.864 ns/op
Iteration  15: 453.803 ns/op
Iteration  16: 452.614 ns/op
Iteration  17: 453.680 ns/op
Iteration  18: 455.226 ns/op
Iteration  19: 455.951 ns/op
Iteration  20: 452.709 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 929.888 ns/op
# Warmup Iteration   2: 504.937 ns/op
# Warmup Iteration   3: 481.740 ns/op
# Warmup Iteration   4: 491.235 ns/op
# Warmup Iteration   5: 471.494 ns/op
Iteration   1: 472.660 ns/op
Iteration   2: 472.406 ns/op
Iteration   3: 470.162 ns/op
Iteration   4: 472.170 ns/op
Iteration   5: 471.323 ns/op
Iteration   6: 469.407 ns/op
Iteration   7: 469.843 ns/op
Iteration   8: 470.089 ns/op
Iteration   9: 468.943 ns/op
Iteration  10: 470.028 ns/op
Iteration  11: 470.709 ns/op
Iteration  12: 470.671 ns/op
Iteration  13: 468.687 ns/op
Iteration  14: 469.208 ns/op
Iteration  15: 470.030 ns/op
Iteration  16: 468.886 ns/op
Iteration  17: 470.395 ns/op
Iteration  18: 470.192 ns/op
Iteration  19: 468.164 ns/op
Iteration  20: 470.207 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 903.453 ns/op
# Warmup Iteration   2: 485.678 ns/op
# Warmup Iteration   3: 475.019 ns/op
# Warmup Iteration   4: 484.233 ns/op
# Warmup Iteration   5: 462.620 ns/op
Iteration   1: 465.302 ns/op
Iteration   2: 465.685 ns/op
Iteration   3: 465.816 ns/op
Iteration   4: 463.483 ns/op
Iteration   5: 464.035 ns/op
Iteration   6: 462.383 ns/op
Iteration   7: 462.038 ns/op
Iteration   8: 463.223 ns/op
Iteration   9: 464.515 ns/op
Iteration  10: 464.474 ns/op
Iteration  11: 463.547 ns/op
Iteration  12: 464.114 ns/op
Iteration  13: 465.228 ns/op
Iteration  14: 462.405 ns/op
Iteration  15: 463.428 ns/op
Iteration  16: 463.195 ns/op
Iteration  17: 462.494 ns/op
Iteration  18: 463.786 ns/op
Iteration  19: 463.966 ns/op
Iteration  20: 464.266 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 929.318 ns/op
# Warmup Iteration   2: 489.548 ns/op
# Warmup Iteration   3: 476.349 ns/op
# Warmup Iteration   4: 485.218 ns/op
# Warmup Iteration   5: 463.481 ns/op
Iteration   1: 466.457 ns/op
Iteration   2: 466.813 ns/op
Iteration   3: 464.886 ns/op
Iteration   4: 466.428 ns/op
Iteration   5: 464.638 ns/op
Iteration   6: 462.380 ns/op
Iteration   7: 461.539 ns/op
Iteration   8: 462.410 ns/op
Iteration   9: 461.953 ns/op
Iteration  10: 465.106 ns/op
Iteration  11: 465.067 ns/op
Iteration  12: 463.770 ns/op
Iteration  13: 463.776 ns/op
Iteration  14: 462.708 ns/op
Iteration  15: 464.707 ns/op
Iteration  16: 464.491 ns/op
Iteration  17: 463.743 ns/op
Iteration  18: 487.016 ns/op
Iteration  19: 463.812 ns/op
Iteration  20: 461.924 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 897.948 ns/op
# Warmup Iteration   2: 501.511 ns/op
# Warmup Iteration   3: 493.651 ns/op
# Warmup Iteration   4: 505.095 ns/op
# Warmup Iteration   5: 482.066 ns/op
Iteration   1: 483.916 ns/op
Iteration   2: 483.387 ns/op
Iteration   3: 483.527 ns/op
Iteration   4: 483.441 ns/op
Iteration   5: 481.792 ns/op
Iteration   6: 481.991 ns/op
Iteration   7: 480.864 ns/op
Iteration   8: 480.184 ns/op
Iteration   9: 481.226 ns/op
Iteration  10: 482.880 ns/op
Iteration  11: 485.218 ns/op
Iteration  12: 483.509 ns/op
Iteration  13: 482.786 ns/op
Iteration  14: 481.342 ns/op
Iteration  15: 483.292 ns/op
Iteration  16: 480.026 ns/op
Iteration  17: 482.685 ns/op
Iteration  18: 482.442 ns/op
Iteration  19: 484.906 ns/op
Iteration  20: 482.905 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  467.118 ±(99.9%) 3.329 ns/op [Average]
  (min, avg, max) = (451.877, 467.118, 487.016), stdev = 9.814
  CI (99.9%): [463.790, 470.447] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
   
   

    ,

  avgt  100  449.608 ± 3.028  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
   
   

    ,

  avgt  100  467.118 ± 3.329  ns/op

Benchmark result is saved to split_precompiled_regex_163_34_Match.csv
