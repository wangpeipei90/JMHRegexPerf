# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		    
	  		 	,
		
 
	

	  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 921.768 ns/op
# Warmup Iteration   2: 521.439 ns/op
# Warmup Iteration   3: 499.198 ns/op
# Warmup Iteration   4: 495.232 ns/op
# Warmup Iteration   5: 501.009 ns/op
Iteration   1: 487.251 ns/op
Iteration   2: 489.338 ns/op
Iteration   3: 490.757 ns/op
Iteration   4: 486.654 ns/op
Iteration   5: 489.068 ns/op
Iteration   6: 485.161 ns/op
Iteration   7: 485.759 ns/op
Iteration   8: 485.684 ns/op
Iteration   9: 484.716 ns/op
Iteration  10: 486.135 ns/op
Iteration  11: 485.831 ns/op
Iteration  12: 486.627 ns/op
Iteration  13: 490.480 ns/op
Iteration  14: 485.201 ns/op
Iteration  15: 488.077 ns/op
Iteration  16: 486.095 ns/op
Iteration  17: 486.692 ns/op
Iteration  18: 487.137 ns/op
Iteration  19: 489.341 ns/op
Iteration  20: 486.950 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 909.257 ns/op
# Warmup Iteration   2: 523.522 ns/op
# Warmup Iteration   3: 505.740 ns/op
# Warmup Iteration   4: 501.784 ns/op
# Warmup Iteration   5: 507.988 ns/op
Iteration   1: 493.636 ns/op
Iteration   2: 495.978 ns/op
Iteration   3: 496.665 ns/op
Iteration   4: 493.106 ns/op
Iteration   5: 496.185 ns/op
Iteration   6: 491.695 ns/op
Iteration   7: 492.315 ns/op
Iteration   8: 491.725 ns/op
Iteration   9: 503.130 ns/op
Iteration  10: 494.902 ns/op
Iteration  11: 492.176 ns/op
Iteration  12: 492.006 ns/op
Iteration  13: 491.564 ns/op
Iteration  14: 492.324 ns/op
Iteration  15: 491.963 ns/op
Iteration  16: 494.789 ns/op
Iteration  17: 492.929 ns/op
Iteration  18: 495.560 ns/op
Iteration  19: 494.480 ns/op
Iteration  20: 492.292 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 911.137 ns/op
# Warmup Iteration   2: 524.264 ns/op
# Warmup Iteration   3: 505.391 ns/op
# Warmup Iteration   4: 501.420 ns/op
# Warmup Iteration   5: 507.275 ns/op
Iteration   1: 494.284 ns/op
Iteration   2: 495.626 ns/op
Iteration   3: 495.456 ns/op
Iteration   4: 493.433 ns/op
Iteration   5: 496.064 ns/op
Iteration   6: 491.937 ns/op
Iteration   7: 492.269 ns/op
Iteration   8: 491.549 ns/op
Iteration   9: 492.655 ns/op
Iteration  10: 493.281 ns/op
Iteration  11: 492.718 ns/op
Iteration  12: 494.102 ns/op
Iteration  13: 492.301 ns/op
Iteration  14: 493.417 ns/op
Iteration  15: 492.593 ns/op
Iteration  16: 495.711 ns/op
Iteration  17: 492.394 ns/op
Iteration  18: 493.796 ns/op
Iteration  19: 494.343 ns/op
Iteration  20: 492.193 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 918.799 ns/op
# Warmup Iteration   2: 521.796 ns/op
# Warmup Iteration   3: 501.754 ns/op
# Warmup Iteration   4: 498.449 ns/op
# Warmup Iteration   5: 504.322 ns/op
Iteration   1: 489.798 ns/op
Iteration   2: 493.630 ns/op
Iteration   3: 493.542 ns/op
Iteration   4: 489.831 ns/op
Iteration   5: 491.560 ns/op
Iteration   6: 490.436 ns/op
Iteration   7: 494.177 ns/op
Iteration   8: 488.867 ns/op
Iteration   9: 490.379 ns/op
Iteration  10: 490.563 ns/op
Iteration  11: 488.999 ns/op
Iteration  12: 490.661 ns/op
Iteration  13: 489.148 ns/op
Iteration  14: 491.585 ns/op
Iteration  15: 490.063 ns/op
Iteration  16: 490.930 ns/op
Iteration  17: 492.377 ns/op
Iteration  18: 489.743 ns/op
Iteration  19: 492.372 ns/op
Iteration  20: 489.741 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 914.548 ns/op
# Warmup Iteration   2: 515.909 ns/op
# Warmup Iteration   3: 495.973 ns/op
# Warmup Iteration   4: 491.263 ns/op
# Warmup Iteration   5: 497.272 ns/op
Iteration   1: 485.529 ns/op
Iteration   2: 483.843 ns/op
Iteration   3: 489.463 ns/op
Iteration   4: 484.227 ns/op
Iteration   5: 485.413 ns/op
Iteration   6: 482.962 ns/op
Iteration   7: 481.132 ns/op
Iteration   8: 481.741 ns/op
Iteration   9: 480.753 ns/op
Iteration  10: 481.765 ns/op
Iteration  11: 483.833 ns/op
Iteration  12: 481.500 ns/op
Iteration  13: 482.546 ns/op
Iteration  14: 481.157 ns/op
Iteration  15: 482.163 ns/op
Iteration  16: 483.393 ns/op
Iteration  17: 481.205 ns/op
Iteration  18: 482.254 ns/op
Iteration  19: 481.098 ns/op
Iteration  20: 482.731 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  489.696 ±(99.9%) 1.561 ns/op [Average]
  (min, avg, max) = (480.753, 489.696, 503.130), stdev = 4.604
  CI (99.9%): [488.135, 491.257] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		    
	  		 	,
		
 
	

	  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 926.142 ns/op
# Warmup Iteration   2: 530.890 ns/op
# Warmup Iteration   3: 512.086 ns/op
# Warmup Iteration   4: 508.576 ns/op
# Warmup Iteration   5: 515.151 ns/op
Iteration   1: 503.466 ns/op
Iteration   2: 500.624 ns/op
Iteration   3: 502.288 ns/op
Iteration   4: 500.804 ns/op
Iteration   5: 502.900 ns/op
Iteration   6: 498.834 ns/op
Iteration   7: 503.700 ns/op
Iteration   8: 499.964 ns/op
Iteration   9: 499.221 ns/op
Iteration  10: 500.106 ns/op
Iteration  11: 500.381 ns/op
Iteration  12: 501.006 ns/op
Iteration  13: 503.747 ns/op
Iteration  14: 502.943 ns/op
Iteration  15: 501.729 ns/op
Iteration  16: 498.902 ns/op
Iteration  17: 502.782 ns/op
Iteration  18: 500.317 ns/op
Iteration  19: 503.024 ns/op
Iteration  20: 500.116 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 957.747 ns/op
# Warmup Iteration   2: 542.403 ns/op
# Warmup Iteration   3: 521.692 ns/op
# Warmup Iteration   4: 509.593 ns/op
# Warmup Iteration   5: 516.893 ns/op
Iteration   1: 502.872 ns/op
Iteration   2: 505.737 ns/op
Iteration   3: 504.255 ns/op
Iteration   4: 499.982 ns/op
Iteration   5: 503.119 ns/op
Iteration   6: 498.334 ns/op
Iteration   7: 501.882 ns/op
Iteration   8: 498.290 ns/op
Iteration   9: 503.586 ns/op
Iteration  10: 500.068 ns/op
Iteration  11: 498.870 ns/op
Iteration  12: 502.339 ns/op
Iteration  13: 499.033 ns/op
Iteration  14: 500.369 ns/op
Iteration  15: 499.307 ns/op
Iteration  16: 502.610 ns/op
Iteration  17: 501.367 ns/op
Iteration  18: 500.063 ns/op
Iteration  19: 502.234 ns/op
Iteration  20: 499.932 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 928.781 ns/op
# Warmup Iteration   2: 532.990 ns/op
# Warmup Iteration   3: 516.692 ns/op
# Warmup Iteration   4: 513.546 ns/op
# Warmup Iteration   5: 518.697 ns/op
Iteration   1: 504.054 ns/op
Iteration   2: 506.567 ns/op
Iteration   3: 509.323 ns/op
Iteration   4: 503.958 ns/op
Iteration   5: 506.802 ns/op
Iteration   6: 502.356 ns/op
Iteration   7: 503.202 ns/op
Iteration   8: 502.581 ns/op
Iteration   9: 503.454 ns/op
Iteration  10: 503.482 ns/op
Iteration  11: 502.217 ns/op
Iteration  12: 505.731 ns/op
Iteration  13: 503.788 ns/op
Iteration  14: 506.751 ns/op
Iteration  15: 503.920 ns/op
Iteration  16: 506.577 ns/op
Iteration  17: 505.121 ns/op
Iteration  18: 504.250 ns/op
Iteration  19: 506.937 ns/op
Iteration  20: 504.744 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 933.293 ns/op
# Warmup Iteration   2: 548.052 ns/op
# Warmup Iteration   3: 523.392 ns/op
# Warmup Iteration   4: 519.274 ns/op
# Warmup Iteration   5: 524.661 ns/op
Iteration   1: 510.629 ns/op
Iteration   2: 513.240 ns/op
Iteration   3: 511.339 ns/op
Iteration   4: 513.329 ns/op
Iteration   5: 511.139 ns/op
Iteration   6: 512.187 ns/op
Iteration   7: 514.102 ns/op
Iteration   8: 509.811 ns/op
Iteration   9: 510.714 ns/op
Iteration  10: 509.780 ns/op
Iteration  11: 510.686 ns/op
Iteration  12: 510.016 ns/op
Iteration  13: 511.962 ns/op
Iteration  14: 510.390 ns/op
Iteration  15: 512.232 ns/op
Iteration  16: 513.138 ns/op
Iteration  17: 510.293 ns/op
Iteration  18: 512.357 ns/op
Iteration  19: 510.483 ns/op
Iteration  20: 513.189 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 951.064 ns/op
# Warmup Iteration   2: 545.088 ns/op
# Warmup Iteration   3: 523.398 ns/op
# Warmup Iteration   4: 518.026 ns/op
# Warmup Iteration   5: 523.375 ns/op
Iteration   1: 509.044 ns/op
Iteration   2: 512.132 ns/op
Iteration   3: 507.952 ns/op
Iteration   4: 510.853 ns/op
Iteration   5: 511.239 ns/op
Iteration   6: 506.828 ns/op
Iteration   7: 508.244 ns/op
Iteration   8: 506.861 ns/op
Iteration   9: 508.598 ns/op
Iteration  10: 507.584 ns/op
Iteration  11: 508.164 ns/op
Iteration  12: 506.743 ns/op
Iteration  13: 509.621 ns/op
Iteration  14: 509.356 ns/op
Iteration  15: 508.281 ns/op
Iteration  16: 509.166 ns/op
Iteration  17: 508.217 ns/op
Iteration  18: 508.705 ns/op
Iteration  19: 507.633 ns/op
Iteration  20: 509.011 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  505.522 ±(99.9%) 1.500 ns/op [Average]
  (min, avg, max) = (498.290, 505.522, 514.102), stdev = 4.424
  CI (99.9%): [504.021, 507.022] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                          (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		    
	  		 	,
		
 
	

	    avgt  100  489.696 ± 1.561  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		    
	  		 	,
		
 
	

	    avgt  100  505.522 ± 1.500  ns/op

Benchmark result is saved to split_precompiled_regex_152_49_Match.csv
