# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	
	
	 			 
  	
	  	
	
	

		
  



 	
		
 
	 	 	
 
	
	
	 	 
 
	  

,	 		




 
	 
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1135.531 ns/op
# Warmup Iteration   2: 824.971 ns/op
# Warmup Iteration   3: 719.946 ns/op
# Warmup Iteration   4: 736.339 ns/op
# Warmup Iteration   5: 728.569 ns/op
Iteration   1: 732.384 ns/op
Iteration   2: 716.558 ns/op
Iteration   3: 716.756 ns/op
Iteration   4: 716.820 ns/op
Iteration   5: 716.988 ns/op
Iteration   6: 716.589 ns/op
Iteration   7: 716.769 ns/op
Iteration   8: 716.745 ns/op
Iteration   9: 717.042 ns/op
Iteration  10: 716.774 ns/op
Iteration  11: 714.998 ns/op
Iteration  12: 713.520 ns/op
Iteration  13: 713.763 ns/op
Iteration  14: 714.056 ns/op
Iteration  15: 713.777 ns/op
Iteration  16: 714.123 ns/op
Iteration  17: 714.041 ns/op
Iteration  18: 714.750 ns/op
Iteration  19: 716.157 ns/op
Iteration  20: 716.229 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1184.030 ns/op
# Warmup Iteration   2: 815.023 ns/op
# Warmup Iteration   3: 714.678 ns/op
# Warmup Iteration   4: 710.286 ns/op
# Warmup Iteration   5: 713.982 ns/op
Iteration   1: 718.538 ns/op
Iteration   2: 706.889 ns/op
Iteration   3: 702.672 ns/op
Iteration   4: 702.247 ns/op
Iteration   5: 702.261 ns/op
Iteration   6: 701.770 ns/op
Iteration   7: 705.251 ns/op
Iteration   8: 701.933 ns/op
Iteration   9: 705.610 ns/op
Iteration  10: 701.330 ns/op
Iteration  11: 700.228 ns/op
Iteration  12: 700.340 ns/op
Iteration  13: 700.502 ns/op
Iteration  14: 700.494 ns/op
Iteration  15: 700.337 ns/op
Iteration  16: 700.580 ns/op
Iteration  17: 702.401 ns/op
Iteration  18: 701.141 ns/op
Iteration  19: 706.687 ns/op
Iteration  20: 701.080 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1137.145 ns/op
# Warmup Iteration   2: 823.056 ns/op
# Warmup Iteration   3: 723.533 ns/op
# Warmup Iteration   4: 729.285 ns/op
# Warmup Iteration   5: 728.022 ns/op
Iteration   1: 732.940 ns/op
Iteration   2: 716.170 ns/op
Iteration   3: 716.308 ns/op
Iteration   4: 717.146 ns/op
Iteration   5: 717.332 ns/op
Iteration   6: 715.558 ns/op
Iteration   7: 715.640 ns/op
Iteration   8: 715.361 ns/op
Iteration   9: 715.601 ns/op
Iteration  10: 717.065 ns/op
Iteration  11: 714.089 ns/op
Iteration  12: 716.282 ns/op
Iteration  13: 714.762 ns/op
Iteration  14: 715.653 ns/op
Iteration  15: 714.539 ns/op
Iteration  16: 714.262 ns/op
Iteration  17: 714.519 ns/op
Iteration  18: 714.366 ns/op
Iteration  19: 714.355 ns/op
Iteration  20: 714.444 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1140.791 ns/op
# Warmup Iteration   2: 820.474 ns/op
# Warmup Iteration   3: 724.562 ns/op
# Warmup Iteration   4: 721.577 ns/op
# Warmup Iteration   5: 725.196 ns/op
Iteration   1: 729.893 ns/op
Iteration   2: 713.780 ns/op
Iteration   3: 713.288 ns/op
Iteration   4: 712.678 ns/op
Iteration   5: 712.719 ns/op
Iteration   6: 713.010 ns/op
Iteration   7: 712.992 ns/op
Iteration   8: 713.274 ns/op
Iteration   9: 716.379 ns/op
Iteration  10: 711.363 ns/op
Iteration  11: 711.027 ns/op
Iteration  12: 711.178 ns/op
Iteration  13: 711.194 ns/op
Iteration  14: 710.689 ns/op
Iteration  15: 710.440 ns/op
Iteration  16: 710.529 ns/op
Iteration  17: 710.523 ns/op
Iteration  18: 713.220 ns/op
Iteration  19: 713.497 ns/op
Iteration  20: 710.022 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1137.166 ns/op
# Warmup Iteration   2: 836.996 ns/op
# Warmup Iteration   3: 726.084 ns/op
# Warmup Iteration   4: 734.150 ns/op
# Warmup Iteration   5: 732.113 ns/op
Iteration   1: 735.307 ns/op
Iteration   2: 721.390 ns/op
Iteration   3: 720.074 ns/op
Iteration   4: 719.854 ns/op
Iteration   5: 719.711 ns/op
Iteration   6: 718.966 ns/op
Iteration   7: 718.920 ns/op
Iteration   8: 718.646 ns/op
Iteration   9: 719.510 ns/op
Iteration  10: 720.305 ns/op
Iteration  11: 719.192 ns/op
Iteration  12: 717.567 ns/op
Iteration  13: 717.752 ns/op
Iteration  14: 717.716 ns/op
Iteration  15: 718.971 ns/op
Iteration  16: 719.719 ns/op
Iteration  17: 719.883 ns/op
Iteration  18: 719.723 ns/op
Iteration  19: 719.296 ns/op
Iteration  20: 719.400 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  713.811 Â±(99.9%) 2.387 ns/op [Average]
  (min, avg, max) = (700.228, 713.811, 735.307), stdev = 7.038
  CI (99.9%): [711.424, 716.198] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	
	
	 			 
  	
	  	
	
	

		
  



 	
		
 
	 	 	
 
	
	
	 	 
 
	  

,	 		




 
	 
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1195.033 ns/op
# Warmup Iteration   2: 865.619 ns/op
# Warmup Iteration   3: 750.278 ns/op
# Warmup Iteration   4: 765.931 ns/op
# Warmup Iteration   5: 759.945 ns/op
Iteration   1: 764.405 ns/op
Iteration   2: 746.668 ns/op
Iteration   3: 747.322 ns/op
Iteration   4: 746.929 ns/op
Iteration   5: 747.491 ns/op
Iteration   6: 747.047 ns/op
Iteration   7: 746.707 ns/op
Iteration   8: 747.031 ns/op
Iteration   9: 747.038 ns/op
Iteration  10: 746.995 ns/op
Iteration  11: 744.821 ns/op
Iteration  12: 744.275 ns/op
Iteration  13: 745.617 ns/op
Iteration  14: 744.024 ns/op
Iteration  15: 745.987 ns/op
Iteration  16: 744.788 ns/op
Iteration  17: 744.613 ns/op
Iteration  18: 745.542 ns/op
Iteration  19: 744.895 ns/op
Iteration  20: 745.597 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1205.389 ns/op
# Warmup Iteration   2: 855.117 ns/op
# Warmup Iteration   3: 739.068 ns/op
# Warmup Iteration   4: 752.900 ns/op
# Warmup Iteration   5: 747.607 ns/op
Iteration   1: 752.005 ns/op
Iteration   2: 735.777 ns/op
Iteration   3: 738.024 ns/op
Iteration   4: 734.681 ns/op
Iteration   5: 735.387 ns/op
Iteration   6: 735.771 ns/op
Iteration   7: 734.994 ns/op
Iteration   8: 735.275 ns/op
Iteration   9: 735.080 ns/op
Iteration  10: 735.125 ns/op
Iteration  11: 734.483 ns/op
Iteration  12: 733.587 ns/op
Iteration  13: 733.778 ns/op
Iteration  14: 733.520 ns/op
Iteration  15: 733.329 ns/op
Iteration  16: 733.029 ns/op
Iteration  17: 733.196 ns/op
Iteration  18: 733.328 ns/op
Iteration  19: 732.545 ns/op
Iteration  20: 732.911 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1205.499 ns/op
# Warmup Iteration   2: 852.357 ns/op
# Warmup Iteration   3: 737.232 ns/op
# Warmup Iteration   4: 751.235 ns/op
# Warmup Iteration   5: 746.319 ns/op
Iteration   1: 751.340 ns/op
Iteration   2: 735.756 ns/op
Iteration   3: 734.511 ns/op
Iteration   4: 734.483 ns/op
Iteration   5: 734.149 ns/op
Iteration   6: 734.385 ns/op
Iteration   7: 734.429 ns/op
Iteration   8: 733.844 ns/op
Iteration   9: 734.861 ns/op
Iteration  10: 735.097 ns/op
Iteration  11: 733.537 ns/op
Iteration  12: 731.913 ns/op
Iteration  13: 732.249 ns/op
Iteration  14: 732.164 ns/op
Iteration  15: 732.078 ns/op
Iteration  16: 732.031 ns/op
Iteration  17: 733.081 ns/op
Iteration  18: 732.440 ns/op
Iteration  19: 736.091 ns/op
Iteration  20: 732.468 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1196.999 ns/op
# Warmup Iteration   2: 885.319 ns/op
# Warmup Iteration   3: 763.889 ns/op
# Warmup Iteration   4: 779.667 ns/op
# Warmup Iteration   5: 772.920 ns/op
Iteration   1: 778.727 ns/op
Iteration   2: 761.513 ns/op
Iteration   3: 760.394 ns/op
Iteration   4: 760.593 ns/op
Iteration   5: 760.713 ns/op
Iteration   6: 760.144 ns/op
Iteration   7: 760.413 ns/op
Iteration   8: 760.498 ns/op
Iteration   9: 760.681 ns/op
Iteration  10: 761.083 ns/op
Iteration  11: 764.428 ns/op
Iteration  12: 771.364 ns/op
Iteration  13: 758.985 ns/op
Iteration  14: 758.240 ns/op
Iteration  15: 758.387 ns/op
Iteration  16: 758.294 ns/op
Iteration  17: 758.312 ns/op
Iteration  18: 758.610 ns/op
Iteration  19: 759.265 ns/op
Iteration  20: 759.013 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1202.782 ns/op
# Warmup Iteration   2: 863.083 ns/op
# Warmup Iteration   3: 749.501 ns/op
# Warmup Iteration   4: 762.994 ns/op
# Warmup Iteration   5: 758.162 ns/op
Iteration   1: 762.721 ns/op
Iteration   2: 746.203 ns/op
Iteration   3: 745.871 ns/op
Iteration   4: 745.530 ns/op
Iteration   5: 745.940 ns/op
Iteration   6: 746.124 ns/op
Iteration   7: 745.082 ns/op
Iteration   8: 745.749 ns/op
Iteration   9: 746.036 ns/op
Iteration  10: 746.078 ns/op
Iteration  11: 743.759 ns/op
Iteration  12: 743.335 ns/op
Iteration  13: 743.417 ns/op
Iteration  14: 744.884 ns/op
Iteration  15: 745.482 ns/op
Iteration  16: 743.306 ns/op
Iteration  17: 743.813 ns/op
Iteration  18: 744.128 ns/op
Iteration  19: 744.518 ns/op
Iteration  20: 744.742 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  744.809 Â±(99.9%) 3.637 ns/op [Average]
  (min, avg, max) = (731.913, 744.809, 778.727), stdev = 10.724
  CI (99.9%): [741.172, 748.446] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
	
	
	 			 
  	
	  	
	
	

		
  



 	
		
 
	 	 	
 
	
	
	 	 
 
	  

,	 		




 
	 
	  avgt  100  713.811 Â± 2.387  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
	
	
	 			 
  	
	  	
	
	

		
  



 	
		
 
	 	 	
 
	
	
	 	 
 
	  

,	 		




 
	 
	  avgt  100  744.809 Â± 3.637  ns/op

Benchmark result is saved to split_precompiled_regex_123_168_Match.csv
