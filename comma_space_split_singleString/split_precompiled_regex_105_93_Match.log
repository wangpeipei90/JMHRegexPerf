# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	 		
  		  		

	
				 			
		 
	
	

	

		   , )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1038.756 ns/op
# Warmup Iteration   2: 651.490 ns/op
# Warmup Iteration   3: 589.117 ns/op
# Warmup Iteration   4: 591.853 ns/op
# Warmup Iteration   5: 609.523 ns/op
Iteration   1: 584.704 ns/op
Iteration   2: 585.091 ns/op
Iteration   3: 587.876 ns/op
Iteration   4: 584.994 ns/op
Iteration   5: 584.749 ns/op
Iteration   6: 587.729 ns/op
Iteration   7: 584.664 ns/op
Iteration   8: 583.024 ns/op
Iteration   9: 583.629 ns/op
Iteration  10: 582.698 ns/op
Iteration  11: 582.948 ns/op
Iteration  12: 584.576 ns/op
Iteration  13: 583.681 ns/op
Iteration  14: 584.769 ns/op
Iteration  15: 587.229 ns/op
Iteration  16: 584.928 ns/op
Iteration  17: 583.766 ns/op
Iteration  18: 586.238 ns/op
Iteration  19: 583.549 ns/op
Iteration  20: 584.056 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 969.261 ns/op
# Warmup Iteration   2: 600.895 ns/op
# Warmup Iteration   3: 559.294 ns/op
# Warmup Iteration   4: 575.908 ns/op
# Warmup Iteration   5: 566.987 ns/op
Iteration   1: 559.555 ns/op
Iteration   2: 555.774 ns/op
Iteration   3: 556.709 ns/op
Iteration   4: 559.413 ns/op
Iteration   5: 555.582 ns/op
Iteration   6: 553.743 ns/op
Iteration   7: 556.543 ns/op
Iteration   8: 552.402 ns/op
Iteration   9: 553.106 ns/op
Iteration  10: 556.248 ns/op
Iteration  11: 552.614 ns/op
Iteration  12: 553.634 ns/op
Iteration  13: 552.318 ns/op
Iteration  14: 554.229 ns/op
Iteration  15: 552.325 ns/op
Iteration  16: 552.550 ns/op
Iteration  17: 554.352 ns/op
Iteration  18: 552.397 ns/op
Iteration  19: 555.935 ns/op
Iteration  20: 553.639 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 973.887 ns/op
# Warmup Iteration   2: 616.702 ns/op
# Warmup Iteration   3: 558.889 ns/op
# Warmup Iteration   4: 573.782 ns/op
# Warmup Iteration   5: 567.657 ns/op
Iteration   1: 554.693 ns/op
Iteration   2: 557.596 ns/op
Iteration   3: 553.959 ns/op
Iteration   4: 555.911 ns/op
Iteration   5: 553.273 ns/op
Iteration   6: 554.196 ns/op
Iteration   7: 556.037 ns/op
Iteration   8: 552.584 ns/op
Iteration   9: 553.528 ns/op
Iteration  10: 552.345 ns/op
Iteration  11: 552.437 ns/op
Iteration  12: 557.818 ns/op
Iteration  13: 552.125 ns/op
Iteration  14: 557.769 ns/op
Iteration  15: 551.929 ns/op
Iteration  16: 553.044 ns/op
Iteration  17: 553.386 ns/op
Iteration  18: 552.070 ns/op
Iteration  19: 552.933 ns/op
Iteration  20: 552.830 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 982.442 ns/op
# Warmup Iteration   2: 619.830 ns/op
# Warmup Iteration   3: 568.369 ns/op
# Warmup Iteration   4: 583.278 ns/op
# Warmup Iteration   5: 577.364 ns/op
Iteration   1: 563.520 ns/op
Iteration   2: 566.436 ns/op
Iteration   3: 563.913 ns/op
Iteration   4: 563.758 ns/op
Iteration   5: 566.240 ns/op
Iteration   6: 564.464 ns/op
Iteration   7: 566.128 ns/op
Iteration   8: 562.415 ns/op
Iteration   9: 562.472 ns/op
Iteration  10: 562.910 ns/op
Iteration  11: 562.297 ns/op
Iteration  12: 563.755 ns/op
Iteration  13: 569.030 ns/op
Iteration  14: 563.015 ns/op
Iteration  15: 567.034 ns/op
Iteration  16: 563.593 ns/op
Iteration  17: 563.868 ns/op
Iteration  18: 565.178 ns/op
Iteration  19: 561.776 ns/op
Iteration  20: 562.876 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 971.933 ns/op
# Warmup Iteration   2: 600.884 ns/op
# Warmup Iteration   3: 552.852 ns/op
# Warmup Iteration   4: 567.683 ns/op
# Warmup Iteration   5: 560.752 ns/op
Iteration   1: 551.243 ns/op
Iteration   2: 548.245 ns/op
Iteration   3: 549.344 ns/op
Iteration   4: 550.756 ns/op
Iteration   5: 548.150 ns/op
Iteration   6: 550.798 ns/op
Iteration   7: 546.825 ns/op
Iteration   8: 546.442 ns/op
Iteration   9: 547.343 ns/op
Iteration  10: 546.337 ns/op
Iteration  11: 547.506 ns/op
Iteration  12: 546.527 ns/op
Iteration  13: 547.856 ns/op
Iteration  14: 547.081 ns/op
Iteration  15: 547.260 ns/op
Iteration  16: 549.106 ns/op
Iteration  17: 547.125 ns/op
Iteration  18: 549.219 ns/op
Iteration  19: 547.759 ns/op
Iteration  20: 547.475 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  561.155 ±(99.9%) 4.431 ns/op [Average]
  (min, avg, max) = (546.337, 561.155, 587.876), stdev = 13.066
  CI (99.9%): [556.724, 565.586] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	 		
  		  		

	
				 			
		 
	
	

	

		   , )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1041.267 ns/op
# Warmup Iteration   2: 641.500 ns/op
# Warmup Iteration   3: 581.807 ns/op
# Warmup Iteration   4: 597.434 ns/op
# Warmup Iteration   5: 590.233 ns/op
Iteration   1: 577.380 ns/op
Iteration   2: 579.259 ns/op
Iteration   3: 576.923 ns/op
Iteration   4: 576.652 ns/op
Iteration   5: 579.328 ns/op
Iteration   6: 576.907 ns/op
Iteration   7: 577.437 ns/op
Iteration   8: 574.816 ns/op
Iteration   9: 575.150 ns/op
Iteration  10: 576.270 ns/op
Iteration  11: 575.274 ns/op
Iteration  12: 575.086 ns/op
Iteration  13: 580.671 ns/op
Iteration  14: 575.941 ns/op
Iteration  15: 578.148 ns/op
Iteration  16: 576.196 ns/op
Iteration  17: 576.519 ns/op
Iteration  18: 577.760 ns/op
Iteration  19: 576.601 ns/op
Iteration  20: 577.639 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1004.784 ns/op
# Warmup Iteration   2: 641.581 ns/op
# Warmup Iteration   3: 592.306 ns/op
# Warmup Iteration   4: 607.364 ns/op
# Warmup Iteration   5: 601.098 ns/op
Iteration   1: 588.599 ns/op
Iteration   2: 590.010 ns/op
Iteration   3: 586.644 ns/op
Iteration   4: 586.806 ns/op
Iteration   5: 589.383 ns/op
Iteration   6: 587.317 ns/op
Iteration   7: 587.608 ns/op
Iteration   8: 586.769 ns/op
Iteration   9: 585.065 ns/op
Iteration  10: 585.523 ns/op
Iteration  11: 586.713 ns/op
Iteration  12: 586.113 ns/op
Iteration  13: 585.467 ns/op
Iteration  14: 588.484 ns/op
Iteration  15: 586.034 ns/op
Iteration  16: 589.440 ns/op
Iteration  17: 586.573 ns/op
Iteration  18: 586.412 ns/op
Iteration  19: 588.230 ns/op
Iteration  20: 586.911 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1040.089 ns/op
# Warmup Iteration   2: 652.548 ns/op
# Warmup Iteration   3: 591.807 ns/op
# Warmup Iteration   4: 610.220 ns/op
# Warmup Iteration   5: 601.884 ns/op
Iteration   1: 587.539 ns/op
Iteration   2: 590.434 ns/op
Iteration   3: 587.247 ns/op
Iteration   4: 587.721 ns/op
Iteration   5: 590.689 ns/op
Iteration   6: 587.923 ns/op
Iteration   7: 587.798 ns/op
Iteration   8: 587.114 ns/op
Iteration   9: 586.225 ns/op
Iteration  10: 586.247 ns/op
Iteration  11: 592.108 ns/op
Iteration  12: 586.343 ns/op
Iteration  13: 586.625 ns/op
Iteration  14: 587.475 ns/op
Iteration  15: 586.374 ns/op
Iteration  16: 586.247 ns/op
Iteration  17: 591.503 ns/op
Iteration  18: 586.918 ns/op
Iteration  19: 586.617 ns/op
Iteration  20: 589.225 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1002.596 ns/op
# Warmup Iteration   2: 615.184 ns/op
# Warmup Iteration   3: 562.106 ns/op
# Warmup Iteration   4: 576.604 ns/op
# Warmup Iteration   5: 571.329 ns/op
Iteration   1: 560.974 ns/op
Iteration   2: 557.653 ns/op
Iteration   3: 557.605 ns/op
Iteration   4: 561.363 ns/op
Iteration   5: 558.515 ns/op
Iteration   6: 568.437 ns/op
Iteration   7: 557.331 ns/op
Iteration   8: 557.346 ns/op
Iteration   9: 558.108 ns/op
Iteration  10: 557.815 ns/op
Iteration  11: 559.814 ns/op
Iteration  12: 556.849 ns/op
Iteration  13: 559.507 ns/op
Iteration  14: 558.410 ns/op
Iteration  15: 557.179 ns/op
Iteration  16: 561.095 ns/op
Iteration  17: 558.403 ns/op
Iteration  18: 560.415 ns/op
Iteration  19: 557.366 ns/op
Iteration  20: 556.989 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1007.650 ns/op
# Warmup Iteration   2: 616.280 ns/op
# Warmup Iteration   3: 562.584 ns/op
# Warmup Iteration   4: 577.463 ns/op
# Warmup Iteration   5: 570.915 ns/op
Iteration   1: 561.274 ns/op
Iteration   2: 559.028 ns/op
Iteration   3: 559.569 ns/op
Iteration   4: 562.580 ns/op
Iteration   5: 557.444 ns/op
Iteration   6: 561.900 ns/op
Iteration   7: 557.874 ns/op
Iteration   8: 556.223 ns/op
Iteration   9: 557.843 ns/op
Iteration  10: 558.825 ns/op
Iteration  11: 558.001 ns/op
Iteration  12: 556.570 ns/op
Iteration  13: 560.655 ns/op
Iteration  14: 558.844 ns/op
Iteration  15: 559.644 ns/op
Iteration  16: 559.769 ns/op
Iteration  17: 560.366 ns/op
Iteration  18: 560.424 ns/op
Iteration  19: 559.093 ns/op
Iteration  20: 558.613 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  574.081 ±(99.9%) 4.405 ns/op [Average]
  (min, avg, max) = (556.223, 574.081, 592.108), stdev = 12.989
  CI (99.9%): [569.676, 578.487] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                      (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	 		
  		  		

	
				 			
		 
	
	

	

		   ,   avgt  100  561.155 ± 4.431  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	 		
  		  		

	
				 			
		 
	
	

	

		   ,   avgt  100  574.081 ± 4.405  ns/op

Benchmark result is saved to split_precompiled_regex_105_93_Match.csv
