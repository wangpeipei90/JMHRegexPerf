# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		
 

 
			 ,	

  
	

 

		
 		

		
		
 	 





   
	 
  	
 	
 
 		

	 		
		 	

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1153.114 ns/op
# Warmup Iteration   2: 770.626 ns/op
# Warmup Iteration   3: 677.879 ns/op
# Warmup Iteration   4: 678.009 ns/op
# Warmup Iteration   5: 682.567 ns/op
Iteration   1: 681.999 ns/op
Iteration   2: 668.036 ns/op
Iteration   3: 676.282 ns/op
Iteration   4: 670.720 ns/op
Iteration   5: 667.825 ns/op
Iteration   6: 668.575 ns/op
Iteration   7: 669.015 ns/op
Iteration   8: 669.458 ns/op
Iteration   9: 667.400 ns/op
Iteration  10: 668.843 ns/op
Iteration  11: 665.418 ns/op
Iteration  12: 665.150 ns/op
Iteration  13: 664.951 ns/op
Iteration  14: 666.385 ns/op
Iteration  15: 665.101 ns/op
Iteration  16: 668.885 ns/op
Iteration  17: 665.674 ns/op
Iteration  18: 666.930 ns/op
Iteration  19: 667.995 ns/op
Iteration  20: 665.768 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1185.106 ns/op
# Warmup Iteration   2: 813.812 ns/op
# Warmup Iteration   3: 723.563 ns/op
# Warmup Iteration   4: 719.789 ns/op
# Warmup Iteration   5: 723.211 ns/op
Iteration   1: 727.261 ns/op
Iteration   2: 718.685 ns/op
Iteration   3: 710.630 ns/op
Iteration   4: 711.072 ns/op
Iteration   5: 711.490 ns/op
Iteration   6: 711.446 ns/op
Iteration   7: 711.295 ns/op
Iteration   8: 714.627 ns/op
Iteration   9: 710.677 ns/op
Iteration  10: 708.931 ns/op
Iteration  11: 709.119 ns/op
Iteration  12: 709.098 ns/op
Iteration  13: 708.640 ns/op
Iteration  14: 708.669 ns/op
Iteration  15: 708.965 ns/op
Iteration  16: 709.166 ns/op
Iteration  17: 710.207 ns/op
Iteration  18: 709.313 ns/op
Iteration  19: 712.672 ns/op
Iteration  20: 709.968 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1148.309 ns/op
# Warmup Iteration   2: 831.700 ns/op
# Warmup Iteration   3: 719.814 ns/op
# Warmup Iteration   4: 734.671 ns/op
# Warmup Iteration   5: 729.808 ns/op
Iteration   1: 733.230 ns/op
Iteration   2: 717.627 ns/op
Iteration   3: 716.424 ns/op
Iteration   4: 716.481 ns/op
Iteration   5: 716.767 ns/op
Iteration   6: 716.325 ns/op
Iteration   7: 716.063 ns/op
Iteration   8: 716.258 ns/op
Iteration   9: 715.761 ns/op
Iteration  10: 717.454 ns/op
Iteration  11: 713.711 ns/op
Iteration  12: 717.522 ns/op
Iteration  13: 715.271 ns/op
Iteration  14: 713.671 ns/op
Iteration  15: 714.103 ns/op
Iteration  16: 713.908 ns/op
Iteration  17: 718.567 ns/op
Iteration  18: 714.141 ns/op
Iteration  19: 714.072 ns/op
Iteration  20: 713.663 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1099.236 ns/op
# Warmup Iteration   2: 760.117 ns/op
# Warmup Iteration   3: 680.793 ns/op
# Warmup Iteration   4: 676.651 ns/op
# Warmup Iteration   5: 679.485 ns/op
Iteration   1: 684.354 ns/op
Iteration   2: 670.174 ns/op
Iteration   3: 672.434 ns/op
Iteration   4: 668.989 ns/op
Iteration   5: 668.711 ns/op
Iteration   6: 668.556 ns/op
Iteration   7: 668.528 ns/op
Iteration   8: 669.044 ns/op
Iteration   9: 668.966 ns/op
Iteration  10: 668.749 ns/op
Iteration  11: 666.807 ns/op
Iteration  12: 667.369 ns/op
Iteration  13: 666.953 ns/op
Iteration  14: 667.482 ns/op
Iteration  15: 667.236 ns/op
Iteration  16: 672.722 ns/op
Iteration  17: 668.775 ns/op
Iteration  18: 668.720 ns/op
Iteration  19: 668.978 ns/op
Iteration  20: 668.806 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1143.521 ns/op
# Warmup Iteration   2: 760.164 ns/op
# Warmup Iteration   3: 675.809 ns/op
# Warmup Iteration   4: 672.384 ns/op
# Warmup Iteration   5: 676.176 ns/op
Iteration   1: 678.610 ns/op
Iteration   2: 663.862 ns/op
Iteration   3: 667.331 ns/op
Iteration   4: 664.368 ns/op
Iteration   5: 664.968 ns/op
Iteration   6: 665.215 ns/op
Iteration   7: 664.434 ns/op
Iteration   8: 664.648 ns/op
Iteration   9: 665.492 ns/op
Iteration  10: 661.656 ns/op
Iteration  11: 662.024 ns/op
Iteration  12: 661.741 ns/op
Iteration  13: 662.863 ns/op
Iteration  14: 662.195 ns/op
Iteration  15: 663.534 ns/op
Iteration  16: 661.719 ns/op
Iteration  17: 661.880 ns/op
Iteration  18: 661.689 ns/op
Iteration  19: 662.239 ns/op
Iteration  20: 661.968 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  686.081 ±(99.9%) 7.949 ns/op [Average]
  (min, avg, max) = (661.656, 686.081, 733.230), stdev = 23.439
  CI (99.9%): [678.132, 694.031] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		
 

 
			 ,	

  
	

 

		
 		

		
		
 	 





   
	 
  	
 	
 
 		

	 		
		 	

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1136.917 ns/op
# Warmup Iteration   2: 799.900 ns/op
# Warmup Iteration   3: 713.277 ns/op
# Warmup Iteration   4: 709.396 ns/op
# Warmup Iteration   5: 712.415 ns/op
Iteration   1: 717.413 ns/op
Iteration   2: 701.270 ns/op
Iteration   3: 700.844 ns/op
Iteration   4: 700.763 ns/op
Iteration   5: 704.428 ns/op
Iteration   6: 700.657 ns/op
Iteration   7: 701.337 ns/op
Iteration   8: 701.001 ns/op
Iteration   9: 700.288 ns/op
Iteration  10: 701.066 ns/op
Iteration  11: 698.842 ns/op
Iteration  12: 699.991 ns/op
Iteration  13: 703.847 ns/op
Iteration  14: 699.708 ns/op
Iteration  15: 699.708 ns/op
Iteration  16: 699.842 ns/op
Iteration  17: 701.008 ns/op
Iteration  18: 700.969 ns/op
Iteration  19: 700.842 ns/op
Iteration  20: 703.619 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1174.321 ns/op
# Warmup Iteration   2: 815.892 ns/op
# Warmup Iteration   3: 725.975 ns/op
# Warmup Iteration   4: 716.177 ns/op
# Warmup Iteration   5: 720.101 ns/op
Iteration   1: 724.270 ns/op
Iteration   2: 707.628 ns/op
Iteration   3: 707.770 ns/op
Iteration   4: 707.815 ns/op
Iteration   5: 707.524 ns/op
Iteration   6: 714.188 ns/op
Iteration   7: 707.047 ns/op
Iteration   8: 707.470 ns/op
Iteration   9: 707.333 ns/op
Iteration  10: 707.171 ns/op
Iteration  11: 706.220 ns/op
Iteration  12: 705.892 ns/op
Iteration  13: 705.958 ns/op
Iteration  14: 707.566 ns/op
Iteration  15: 705.659 ns/op
Iteration  16: 707.067 ns/op
Iteration  17: 708.136 ns/op
Iteration  18: 707.902 ns/op
Iteration  19: 707.970 ns/op
Iteration  20: 707.798 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1164.282 ns/op
# Warmup Iteration   2: 798.336 ns/op
# Warmup Iteration   3: 706.383 ns/op
# Warmup Iteration   4: 702.123 ns/op
# Warmup Iteration   5: 706.809 ns/op
Iteration   1: 710.443 ns/op
Iteration   2: 700.158 ns/op
Iteration   3: 693.999 ns/op
Iteration   4: 701.841 ns/op
Iteration   5: 695.125 ns/op
Iteration   6: 699.697 ns/op
Iteration   7: 693.088 ns/op
Iteration   8: 693.233 ns/op
Iteration   9: 693.202 ns/op
Iteration  10: 691.018 ns/op
Iteration  11: 691.262 ns/op
Iteration  12: 697.247 ns/op
Iteration  13: 692.464 ns/op
Iteration  14: 692.173 ns/op
Iteration  15: 691.911 ns/op
Iteration  16: 692.162 ns/op
Iteration  17: 692.139 ns/op
Iteration  18: 691.676 ns/op
Iteration  19: 694.756 ns/op
Iteration  20: 691.756 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1165.634 ns/op
# Warmup Iteration   2: 792.533 ns/op
# Warmup Iteration   3: 699.344 ns/op
# Warmup Iteration   4: 694.036 ns/op
# Warmup Iteration   5: 698.441 ns/op
Iteration   1: 703.186 ns/op
Iteration   2: 686.362 ns/op
Iteration   3: 686.366 ns/op
Iteration   4: 689.336 ns/op
Iteration   5: 686.629 ns/op
Iteration   6: 686.509 ns/op
Iteration   7: 686.831 ns/op
Iteration   8: 687.128 ns/op
Iteration   9: 686.968 ns/op
Iteration  10: 687.662 ns/op
Iteration  11: 685.504 ns/op
Iteration  12: 685.610 ns/op
Iteration  13: 685.488 ns/op
Iteration  14: 685.308 ns/op
Iteration  15: 685.532 ns/op
Iteration  16: 685.515 ns/op
Iteration  17: 693.334 ns/op
Iteration  18: 687.204 ns/op
Iteration  19: 685.714 ns/op
Iteration  20: 686.473 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1170.521 ns/op
# Warmup Iteration   2: 797.873 ns/op
# Warmup Iteration   3: 705.890 ns/op
# Warmup Iteration   4: 700.866 ns/op
# Warmup Iteration   5: 704.923 ns/op
Iteration   1: 708.490 ns/op
Iteration   2: 695.088 ns/op
Iteration   3: 691.990 ns/op
Iteration   4: 696.052 ns/op
Iteration   5: 694.087 ns/op
Iteration   6: 691.793 ns/op
Iteration   7: 691.879 ns/op
Iteration   8: 691.755 ns/op
Iteration   9: 692.599 ns/op
Iteration  10: 693.074 ns/op
Iteration  11: 691.164 ns/op
Iteration  12: 689.775 ns/op
Iteration  13: 689.478 ns/op
Iteration  14: 689.384 ns/op
Iteration  15: 693.558 ns/op
Iteration  16: 690.315 ns/op
Iteration  17: 690.638 ns/op
Iteration  18: 694.567 ns/op
Iteration  19: 690.618 ns/op
Iteration  20: 691.164 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  697.153 ±(99.9%) 2.842 ns/op [Average]
  (min, avg, max) = (685.308, 697.153, 724.270), stdev = 8.381
  CI (99.9%): [694.311, 699.995] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		
 

 
			 ,	

  
	

 

		
 		

		
		
 	 





   
	 
  	
 	
 
 		

	 		
		 	

  avgt  100  686.081 ± 7.949  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		
 

 
			 ,	

  
	

 

		
 		

		
		
 	 





   
	 
  	
 	
 
 		

	 		
		 	

  avgt  100  697.153 ± 2.842  ns/op

Benchmark result is saved to split_precompiled_regex_16_150_Match.csv
