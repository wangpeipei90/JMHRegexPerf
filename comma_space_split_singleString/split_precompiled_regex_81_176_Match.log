# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   
	  	
	


	 	
 
	
,
   		
	
 
	 

  	
	

 
  	
	 	

  		



	  		   		 	
	  	

	

 			

		 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1242.636 ns/op
# Warmup Iteration   2: 931.354 ns/op
# Warmup Iteration   3: 781.304 ns/op
# Warmup Iteration   4: 785.214 ns/op
# Warmup Iteration   5: 784.672 ns/op
Iteration   1: 788.379 ns/op
Iteration   2: 793.772 ns/op
Iteration   3: 775.926 ns/op
Iteration   4: 775.384 ns/op
Iteration   5: 775.132 ns/op
Iteration   6: 775.198 ns/op
Iteration   7: 774.548 ns/op
Iteration   8: 774.848 ns/op
Iteration   9: 775.186 ns/op
Iteration  10: 775.174 ns/op
Iteration  11: 775.515 ns/op
Iteration  12: 777.228 ns/op
Iteration  13: 781.331 ns/op
Iteration  14: 773.371 ns/op
Iteration  15: 772.959 ns/op
Iteration  16: 773.021 ns/op
Iteration  17: 773.456 ns/op
Iteration  18: 773.673 ns/op
Iteration  19: 773.644 ns/op
Iteration  20: 778.129 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1211.163 ns/op
# Warmup Iteration   2: 880.106 ns/op
# Warmup Iteration   3: 741.339 ns/op
# Warmup Iteration   4: 751.155 ns/op
# Warmup Iteration   5: 754.131 ns/op
Iteration   1: 754.609 ns/op
Iteration   2: 737.753 ns/op
Iteration   3: 736.706 ns/op
Iteration   4: 737.455 ns/op
Iteration   5: 737.357 ns/op
Iteration   6: 738.823 ns/op
Iteration   7: 736.919 ns/op
Iteration   8: 737.996 ns/op
Iteration   9: 737.845 ns/op
Iteration  10: 743.156 ns/op
Iteration  11: 735.726 ns/op
Iteration  12: 734.758 ns/op
Iteration  13: 734.829 ns/op
Iteration  14: 734.808 ns/op
Iteration  15: 734.623 ns/op
Iteration  16: 734.707 ns/op
Iteration  17: 734.857 ns/op
Iteration  18: 735.121 ns/op
Iteration  19: 734.946 ns/op
Iteration  20: 736.907 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1121.585 ns/op
# Warmup Iteration   2: 801.079 ns/op
# Warmup Iteration   3: 711.839 ns/op
# Warmup Iteration   4: 707.886 ns/op
# Warmup Iteration   5: 711.899 ns/op
Iteration   1: 716.971 ns/op
Iteration   2: 699.796 ns/op
Iteration   3: 699.457 ns/op
Iteration   4: 699.233 ns/op
Iteration   5: 699.318 ns/op
Iteration   6: 699.321 ns/op
Iteration   7: 702.975 ns/op
Iteration   8: 698.857 ns/op
Iteration   9: 699.795 ns/op
Iteration  10: 697.375 ns/op
Iteration  11: 698.244 ns/op
Iteration  12: 701.028 ns/op
Iteration  13: 697.406 ns/op
Iteration  14: 697.685 ns/op
Iteration  15: 698.143 ns/op
Iteration  16: 698.786 ns/op
Iteration  17: 697.414 ns/op
Iteration  18: 698.059 ns/op
Iteration  19: 697.855 ns/op
Iteration  20: 698.177 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1122.939 ns/op
# Warmup Iteration   2: 805.430 ns/op
# Warmup Iteration   3: 713.447 ns/op
# Warmup Iteration   4: 709.001 ns/op
# Warmup Iteration   5: 712.881 ns/op
Iteration   1: 717.359 ns/op
Iteration   2: 701.552 ns/op
Iteration   3: 700.393 ns/op
Iteration   4: 699.963 ns/op
Iteration   5: 702.056 ns/op
Iteration   6: 700.897 ns/op
Iteration   7: 703.491 ns/op
Iteration   8: 700.667 ns/op
Iteration   9: 700.437 ns/op
Iteration  10: 698.452 ns/op
Iteration  11: 698.048 ns/op
Iteration  12: 698.277 ns/op
Iteration  13: 698.321 ns/op
Iteration  14: 698.241 ns/op
Iteration  15: 698.245 ns/op
Iteration  16: 698.491 ns/op
Iteration  17: 700.753 ns/op
Iteration  18: 698.979 ns/op
Iteration  19: 703.099 ns/op
Iteration  20: 701.029 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1242.943 ns/op
# Warmup Iteration   2: 917.939 ns/op
# Warmup Iteration   3: 777.504 ns/op
# Warmup Iteration   4: 782.445 ns/op
# Warmup Iteration   5: 782.898 ns/op
Iteration   1: 786.892 ns/op
Iteration   2: 792.464 ns/op
Iteration   3: 774.053 ns/op
Iteration   4: 773.029 ns/op
Iteration   5: 773.208 ns/op
Iteration   6: 773.188 ns/op
Iteration   7: 781.115 ns/op
Iteration   8: 773.413 ns/op
Iteration   9: 773.710 ns/op
Iteration  10: 773.864 ns/op
Iteration  11: 778.030 ns/op
Iteration  12: 771.938 ns/op
Iteration  13: 771.623 ns/op
Iteration  14: 771.557 ns/op
Iteration  15: 771.425 ns/op
Iteration  16: 771.475 ns/op
Iteration  17: 771.809 ns/op
Iteration  18: 771.035 ns/op
Iteration  19: 771.723 ns/op
Iteration  20: 771.569 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  737.975 Â±(99.9%) 11.618 ns/op [Average]
  (min, avg, max) = (697.375, 737.975, 793.772), stdev = 34.255
  CI (99.9%): [726.358, 749.593] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   
	  	
	


	 	
 
	
,
   		
	
 
	 

  	
	

 
  	
	 	

  		



	  		   		 	
	  	

	

 			

		 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1228.570 ns/op
# Warmup Iteration   2: 884.346 ns/op
# Warmup Iteration   3: 756.996 ns/op
# Warmup Iteration   4: 777.649 ns/op
# Warmup Iteration   5: 770.259 ns/op
Iteration   1: 771.683 ns/op
Iteration   2: 754.498 ns/op
Iteration   3: 753.988 ns/op
Iteration   4: 755.495 ns/op
Iteration   5: 757.689 ns/op
Iteration   6: 758.368 ns/op
Iteration   7: 753.638 ns/op
Iteration   8: 761.018 ns/op
Iteration   9: 754.541 ns/op
Iteration  10: 759.578 ns/op
Iteration  11: 752.009 ns/op
Iteration  12: 750.566 ns/op
Iteration  13: 750.488 ns/op
Iteration  14: 750.682 ns/op
Iteration  15: 756.138 ns/op
Iteration  16: 752.475 ns/op
Iteration  17: 752.182 ns/op
Iteration  18: 751.543 ns/op
Iteration  19: 751.931 ns/op
Iteration  20: 754.445 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1216.244 ns/op
# Warmup Iteration   2: 869.733 ns/op
# Warmup Iteration   3: 761.335 ns/op
# Warmup Iteration   4: 776.656 ns/op
# Warmup Iteration   5: 770.461 ns/op
Iteration   1: 774.352 ns/op
Iteration   2: 767.406 ns/op
Iteration   3: 762.904 ns/op
Iteration   4: 763.204 ns/op
Iteration   5: 756.852 ns/op
Iteration   6: 756.836 ns/op
Iteration   7: 756.855 ns/op
Iteration   8: 757.040 ns/op
Iteration   9: 757.373 ns/op
Iteration  10: 757.270 ns/op
Iteration  11: 759.134 ns/op
Iteration  12: 754.576 ns/op
Iteration  13: 754.256 ns/op
Iteration  14: 754.227 ns/op
Iteration  15: 754.546 ns/op
Iteration  16: 755.048 ns/op
Iteration  17: 754.353 ns/op
Iteration  18: 756.473 ns/op
Iteration  19: 754.771 ns/op
Iteration  20: 754.481 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1189.530 ns/op
# Warmup Iteration   2: 830.560 ns/op
# Warmup Iteration   3: 731.615 ns/op
# Warmup Iteration   4: 726.878 ns/op
# Warmup Iteration   5: 730.486 ns/op
Iteration   1: 735.065 ns/op
Iteration   2: 726.717 ns/op
Iteration   3: 718.863 ns/op
Iteration   4: 718.214 ns/op
Iteration   5: 720.401 ns/op
Iteration   6: 718.318 ns/op
Iteration   7: 718.453 ns/op
Iteration   8: 721.692 ns/op
Iteration   9: 718.870 ns/op
Iteration  10: 716.916 ns/op
Iteration  11: 722.234 ns/op
Iteration  12: 715.820 ns/op
Iteration  13: 716.663 ns/op
Iteration  14: 716.297 ns/op
Iteration  15: 716.887 ns/op
Iteration  16: 715.991 ns/op
Iteration  17: 720.656 ns/op
Iteration  18: 740.615 ns/op
Iteration  19: 737.168 ns/op
Iteration  20: 717.919 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1254.101 ns/op
# Warmup Iteration   2: 939.086 ns/op
# Warmup Iteration   3: 801.132 ns/op
# Warmup Iteration   4: 803.369 ns/op
# Warmup Iteration   5: 806.075 ns/op
Iteration   1: 810.725 ns/op
Iteration   2: 815.472 ns/op
Iteration   3: 796.839 ns/op
Iteration   4: 797.500 ns/op
Iteration   5: 796.226 ns/op
Iteration   6: 796.303 ns/op
Iteration   7: 797.207 ns/op
Iteration   8: 797.679 ns/op
Iteration   9: 796.892 ns/op
Iteration  10: 797.206 ns/op
Iteration  11: 797.521 ns/op
Iteration  12: 795.761 ns/op
Iteration  13: 801.261 ns/op
Iteration  14: 794.969 ns/op
Iteration  15: 796.368 ns/op
Iteration  16: 795.808 ns/op
Iteration  17: 796.154 ns/op
Iteration  18: 795.976 ns/op
Iteration  19: 798.345 ns/op
Iteration  20: 798.241 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1227.293 ns/op
# Warmup Iteration   2: 861.329 ns/op
# Warmup Iteration   3: 740.262 ns/op
# Warmup Iteration   4: 754.872 ns/op
# Warmup Iteration   5: 749.639 ns/op
Iteration   1: 754.270 ns/op
Iteration   2: 740.671 ns/op
Iteration   3: 736.834 ns/op
Iteration   4: 736.764 ns/op
Iteration   5: 737.433 ns/op
Iteration   6: 737.090 ns/op
Iteration   7: 736.700 ns/op
Iteration   8: 736.248 ns/op
Iteration   9: 736.296 ns/op
Iteration  10: 736.838 ns/op
Iteration  11: 734.754 ns/op
Iteration  12: 734.377 ns/op
Iteration  13: 739.923 ns/op
Iteration  14: 734.217 ns/op
Iteration  15: 734.209 ns/op
Iteration  16: 734.062 ns/op
Iteration  17: 734.830 ns/op
Iteration  18: 736.448 ns/op
Iteration  19: 735.429 ns/op
Iteration  20: 734.933 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  754.135 Â±(99.9%) 8.996 ns/op [Average]
  (min, avg, max) = (715.820, 754.135, 815.472), stdev = 26.526
  CI (99.9%): [745.138, 763.131] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                         (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    
	  	
	


	 	
 
	
,
   		
	
 
	 

  	
	

 
  	
	 	

  		



	  		   		 	
	  	

	

 			

		 
  avgt  100  737.975 Â± 11.618  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    
	  	
	


	 	
 
	
,
   		
	
 
	 

  	
	

 
  	
	 	

  		



	  		   		 	
	  	

	

 			

		 
  avgt  100  754.135 Â±  8.996  ns/op

Benchmark result is saved to split_precompiled_regex_81_176_Match.csv
