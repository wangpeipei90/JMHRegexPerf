# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	 
  	
,
 
  	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 916.772 ns/op
# Warmup Iteration   2: 479.382 ns/op
# Warmup Iteration   3: 462.460 ns/op
# Warmup Iteration   4: 471.885 ns/op
# Warmup Iteration   5: 450.976 ns/op
Iteration   1: 452.832 ns/op
Iteration   2: 453.010 ns/op
Iteration   3: 452.730 ns/op
Iteration   4: 451.166 ns/op
Iteration   5: 451.979 ns/op
Iteration   6: 450.632 ns/op
Iteration   7: 449.975 ns/op
Iteration   8: 450.907 ns/op
Iteration   9: 450.787 ns/op
Iteration  10: 450.884 ns/op
Iteration  11: 450.407 ns/op
Iteration  12: 451.487 ns/op
Iteration  13: 453.855 ns/op
Iteration  14: 451.516 ns/op
Iteration  15: 452.890 ns/op
Iteration  16: 452.996 ns/op
Iteration  17: 453.704 ns/op
Iteration  18: 450.954 ns/op
Iteration  19: 452.162 ns/op
Iteration  20: 452.959 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 903.354 ns/op
# Warmup Iteration   2: 480.554 ns/op
# Warmup Iteration   3: 468.399 ns/op
# Warmup Iteration   4: 477.929 ns/op
# Warmup Iteration   5: 456.757 ns/op
Iteration   1: 458.743 ns/op
Iteration   2: 458.855 ns/op
Iteration   3: 456.783 ns/op
Iteration   4: 458.305 ns/op
Iteration   5: 457.245 ns/op
Iteration   6: 456.161 ns/op
Iteration   7: 455.466 ns/op
Iteration   8: 456.351 ns/op
Iteration   9: 459.812 ns/op
Iteration  10: 456.105 ns/op
Iteration  11: 457.637 ns/op
Iteration  12: 459.127 ns/op
Iteration  13: 455.618 ns/op
Iteration  14: 457.646 ns/op
Iteration  15: 462.488 ns/op
Iteration  16: 455.694 ns/op
Iteration  17: 457.984 ns/op
Iteration  18: 457.483 ns/op
Iteration  19: 456.031 ns/op
Iteration  20: 457.679 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 899.654 ns/op
# Warmup Iteration   2: 472.708 ns/op
# Warmup Iteration   3: 450.823 ns/op
# Warmup Iteration   4: 460.921 ns/op
# Warmup Iteration   5: 442.226 ns/op
Iteration   1: 440.485 ns/op
Iteration   2: 442.787 ns/op
Iteration   3: 441.869 ns/op
Iteration   4: 442.946 ns/op
Iteration   5: 439.052 ns/op
Iteration   6: 439.755 ns/op
Iteration   7: 439.329 ns/op
Iteration   8: 439.628 ns/op
Iteration   9: 438.489 ns/op
Iteration  10: 439.140 ns/op
Iteration  11: 439.711 ns/op
Iteration  12: 440.662 ns/op
Iteration  13: 439.500 ns/op
Iteration  14: 442.079 ns/op
Iteration  15: 442.618 ns/op
Iteration  16: 442.141 ns/op
Iteration  17: 440.468 ns/op
Iteration  18: 440.725 ns/op
Iteration  19: 442.653 ns/op
Iteration  20: 442.226 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 906.410 ns/op
# Warmup Iteration   2: 484.106 ns/op
# Warmup Iteration   3: 466.490 ns/op
# Warmup Iteration   4: 475.614 ns/op
# Warmup Iteration   5: 454.307 ns/op
Iteration   1: 456.527 ns/op
Iteration   2: 456.399 ns/op
Iteration   3: 454.333 ns/op
Iteration   4: 456.521 ns/op
Iteration   5: 455.421 ns/op
Iteration   6: 453.747 ns/op
Iteration   7: 456.377 ns/op
Iteration   8: 454.533 ns/op
Iteration   9: 455.165 ns/op
Iteration  10: 452.990 ns/op
Iteration  11: 454.050 ns/op
Iteration  12: 454.990 ns/op
Iteration  13: 454.185 ns/op
Iteration  14: 457.411 ns/op
Iteration  15: 456.150 ns/op
Iteration  16: 456.680 ns/op
Iteration  17: 453.087 ns/op
Iteration  18: 455.925 ns/op
Iteration  19: 454.531 ns/op
Iteration  20: 452.989 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 907.061 ns/op
# Warmup Iteration   2: 475.534 ns/op
# Warmup Iteration   3: 462.503 ns/op
# Warmup Iteration   4: 475.220 ns/op
# Warmup Iteration   5: 451.949 ns/op
Iteration   1: 453.306 ns/op
Iteration   2: 453.544 ns/op
Iteration   3: 453.788 ns/op
Iteration   4: 451.691 ns/op
Iteration   5: 455.193 ns/op
Iteration   6: 451.834 ns/op
Iteration   7: 450.975 ns/op
Iteration   8: 451.941 ns/op
Iteration   9: 451.632 ns/op
Iteration  10: 451.666 ns/op
Iteration  11: 450.409 ns/op
Iteration  12: 451.249 ns/op
Iteration  13: 452.259 ns/op
Iteration  14: 450.250 ns/op
Iteration  15: 451.067 ns/op
Iteration  16: 452.957 ns/op
Iteration  17: 452.744 ns/op
Iteration  18: 450.396 ns/op
Iteration  19: 456.178 ns/op
Iteration  20: 462.059 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  451.625 ±(99.9%) 2.047 ns/op [Average]
  (min, avg, max) = (438.489, 451.625, 462.488), stdev = 6.035
  CI (99.9%): [449.578, 453.671] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	 
  	
,
 
  	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 909.206 ns/op
# Warmup Iteration   2: 472.128 ns/op
# Warmup Iteration   3: 461.998 ns/op
# Warmup Iteration   4: 471.642 ns/op
# Warmup Iteration   5: 451.231 ns/op
Iteration   1: 448.819 ns/op
Iteration   2: 450.768 ns/op
Iteration   3: 451.234 ns/op
Iteration   4: 451.076 ns/op
Iteration   5: 449.162 ns/op
Iteration   6: 450.809 ns/op
Iteration   7: 453.057 ns/op
Iteration   8: 450.084 ns/op
Iteration   9: 447.779 ns/op
Iteration  10: 449.204 ns/op
Iteration  11: 449.563 ns/op
Iteration  12: 448.910 ns/op
Iteration  13: 448.532 ns/op
Iteration  14: 447.330 ns/op
Iteration  15: 449.065 ns/op
Iteration  16: 450.621 ns/op
Iteration  17: 450.932 ns/op
Iteration  18: 447.285 ns/op
Iteration  19: 448.522 ns/op
Iteration  20: 448.789 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 922.496 ns/op
# Warmup Iteration   2: 484.760 ns/op
# Warmup Iteration   3: 473.735 ns/op
# Warmup Iteration   4: 484.673 ns/op
# Warmup Iteration   5: 462.431 ns/op
Iteration   1: 465.329 ns/op
Iteration   2: 465.674 ns/op
Iteration   3: 465.084 ns/op
Iteration   4: 462.148 ns/op
Iteration   5: 462.433 ns/op
Iteration   6: 460.144 ns/op
Iteration   7: 458.699 ns/op
Iteration   8: 464.065 ns/op
Iteration   9: 459.703 ns/op
Iteration  10: 460.069 ns/op
Iteration  11: 462.461 ns/op
Iteration  12: 463.244 ns/op
Iteration  13: 463.350 ns/op
Iteration  14: 458.884 ns/op
Iteration  15: 461.653 ns/op
Iteration  16: 462.272 ns/op
Iteration  17: 459.895 ns/op
Iteration  18: 458.707 ns/op
Iteration  19: 460.890 ns/op
Iteration  20: 461.685 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 907.456 ns/op
# Warmup Iteration   2: 492.680 ns/op
# Warmup Iteration   3: 483.723 ns/op
# Warmup Iteration   4: 493.381 ns/op
# Warmup Iteration   5: 471.544 ns/op
Iteration   1: 474.404 ns/op
Iteration   2: 474.160 ns/op
Iteration   3: 471.878 ns/op
Iteration   4: 473.802 ns/op
Iteration   5: 472.770 ns/op
Iteration   6: 470.336 ns/op
Iteration   7: 470.856 ns/op
Iteration   8: 470.697 ns/op
Iteration   9: 470.707 ns/op
Iteration  10: 471.625 ns/op
Iteration  11: 472.409 ns/op
Iteration  12: 470.826 ns/op
Iteration  13: 472.005 ns/op
Iteration  14: 474.117 ns/op
Iteration  15: 471.502 ns/op
Iteration  16: 473.047 ns/op
Iteration  17: 475.699 ns/op
Iteration  18: 474.042 ns/op
Iteration  19: 474.768 ns/op
Iteration  20: 472.768 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 888.767 ns/op
# Warmup Iteration   2: 486.402 ns/op
# Warmup Iteration   3: 479.608 ns/op
# Warmup Iteration   4: 489.084 ns/op
# Warmup Iteration   5: 467.711 ns/op
Iteration   1: 471.746 ns/op
Iteration   2: 469.747 ns/op
Iteration   3: 468.095 ns/op
Iteration   4: 469.584 ns/op
Iteration   5: 469.118 ns/op
Iteration   6: 467.845 ns/op
Iteration   7: 466.334 ns/op
Iteration   8: 468.104 ns/op
Iteration   9: 468.847 ns/op
Iteration  10: 467.230 ns/op
Iteration  11: 469.222 ns/op
Iteration  12: 469.034 ns/op
Iteration  13: 467.396 ns/op
Iteration  14: 468.925 ns/op
Iteration  15: 470.598 ns/op
Iteration  16: 467.671 ns/op
Iteration  17: 469.219 ns/op
Iteration  18: 473.007 ns/op
Iteration  19: 467.869 ns/op
Iteration  20: 468.672 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 903.432 ns/op
# Warmup Iteration   2: 491.826 ns/op
# Warmup Iteration   3: 483.626 ns/op
# Warmup Iteration   4: 492.879 ns/op
# Warmup Iteration   5: 470.832 ns/op
Iteration   1: 472.829 ns/op
Iteration   2: 473.072 ns/op
Iteration   3: 471.293 ns/op
Iteration   4: 473.370 ns/op
Iteration   5: 473.140 ns/op
Iteration   6: 470.545 ns/op
Iteration   7: 470.816 ns/op
Iteration   8: 471.854 ns/op
Iteration   9: 470.544 ns/op
Iteration  10: 471.988 ns/op
Iteration  11: 472.939 ns/op
Iteration  12: 471.339 ns/op
Iteration  13: 473.163 ns/op
Iteration  14: 472.735 ns/op
Iteration  15: 472.073 ns/op
Iteration  16: 470.552 ns/op
Iteration  17: 472.463 ns/op
Iteration  18: 472.182 ns/op
Iteration  19: 470.659 ns/op
Iteration  20: 471.645 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  464.978 ±(99.9%) 2.980 ns/op [Average]
  (min, avg, max) = (447.285, 464.978, 475.699), stdev = 8.785
  CI (99.9%): [461.999, 467.958] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
	 
  	
,
 
  	   avgt  100  451.625 ± 2.047  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
	 
  	
,
 
  	   avgt  100  464.978 ± 2.980  ns/op

Benchmark result is saved to split_precompiled_regex_245_32_Match.csv
