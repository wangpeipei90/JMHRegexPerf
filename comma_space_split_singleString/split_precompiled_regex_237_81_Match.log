# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = ,	





 	   	
		  
					
			 		 
	
			  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 992.706 ns/op
# Warmup Iteration   2: 625.226 ns/op
# Warmup Iteration   3: 567.054 ns/op
# Warmup Iteration   4: 582.218 ns/op
# Warmup Iteration   5: 574.974 ns/op
Iteration   1: 561.677 ns/op
Iteration   2: 564.437 ns/op
Iteration   3: 562.983 ns/op
Iteration   4: 563.088 ns/op
Iteration   5: 564.075 ns/op
Iteration   6: 562.242 ns/op
Iteration   7: 563.539 ns/op
Iteration   8: 560.464 ns/op
Iteration   9: 560.288 ns/op
Iteration  10: 561.409 ns/op
Iteration  11: 560.615 ns/op
Iteration  12: 565.856 ns/op
Iteration  13: 563.033 ns/op
Iteration  14: 560.881 ns/op
Iteration  15: 562.298 ns/op
Iteration  16: 561.035 ns/op
Iteration  17: 573.439 ns/op
Iteration  18: 561.502 ns/op
Iteration  19: 564.066 ns/op
Iteration  20: 561.529 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 961.923 ns/op
# Warmup Iteration   2: 588.622 ns/op
# Warmup Iteration   3: 546.250 ns/op
# Warmup Iteration   4: 560.695 ns/op
# Warmup Iteration   5: 554.710 ns/op
Iteration   1: 544.793 ns/op
Iteration   2: 541.554 ns/op
Iteration   3: 544.799 ns/op
Iteration   4: 541.615 ns/op
Iteration   5: 541.109 ns/op
Iteration   6: 544.368 ns/op
Iteration   7: 543.113 ns/op
Iteration   8: 542.221 ns/op
Iteration   9: 540.310 ns/op
Iteration  10: 540.331 ns/op
Iteration  11: 541.121 ns/op
Iteration  12: 540.702 ns/op
Iteration  13: 541.673 ns/op
Iteration  14: 541.980 ns/op
Iteration  15: 543.296 ns/op
Iteration  16: 540.982 ns/op
Iteration  17: 540.923 ns/op
Iteration  18: 542.418 ns/op
Iteration  19: 541.576 ns/op
Iteration  20: 544.839 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 964.933 ns/op
# Warmup Iteration   2: 592.800 ns/op
# Warmup Iteration   3: 549.966 ns/op
# Warmup Iteration   4: 564.213 ns/op
# Warmup Iteration   5: 558.001 ns/op
Iteration   1: 549.195 ns/op
Iteration   2: 545.058 ns/op
Iteration   3: 545.600 ns/op
Iteration   4: 547.668 ns/op
Iteration   5: 545.252 ns/op
Iteration   6: 551.343 ns/op
Iteration   7: 543.776 ns/op
Iteration   8: 548.729 ns/op
Iteration   9: 549.484 ns/op
Iteration  10: 543.586 ns/op
Iteration  11: 548.852 ns/op
Iteration  12: 543.684 ns/op
Iteration  13: 548.160 ns/op
Iteration  14: 543.266 ns/op
Iteration  15: 543.169 ns/op
Iteration  16: 544.252 ns/op
Iteration  17: 543.299 ns/op
Iteration  18: 544.574 ns/op
Iteration  19: 543.199 ns/op
Iteration  20: 545.656 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 961.088 ns/op
# Warmup Iteration   2: 591.679 ns/op
# Warmup Iteration   3: 547.293 ns/op
# Warmup Iteration   4: 561.235 ns/op
# Warmup Iteration   5: 555.712 ns/op
Iteration   1: 545.033 ns/op
Iteration   2: 542.303 ns/op
Iteration   3: 545.003 ns/op
Iteration   4: 542.335 ns/op
Iteration   5: 542.353 ns/op
Iteration   6: 544.746 ns/op
Iteration   7: 541.959 ns/op
Iteration   8: 542.178 ns/op
Iteration   9: 541.907 ns/op
Iteration  10: 541.298 ns/op
Iteration  11: 542.304 ns/op
Iteration  12: 544.653 ns/op
Iteration  13: 543.276 ns/op
Iteration  14: 541.665 ns/op
Iteration  15: 544.808 ns/op
Iteration  16: 543.116 ns/op
Iteration  17: 542.900 ns/op
Iteration  18: 545.868 ns/op
Iteration  19: 542.800 ns/op
Iteration  20: 543.729 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 964.928 ns/op
# Warmup Iteration   2: 591.169 ns/op
# Warmup Iteration   3: 547.524 ns/op
# Warmup Iteration   4: 561.485 ns/op
# Warmup Iteration   5: 556.442 ns/op
Iteration   1: 546.324 ns/op
Iteration   2: 543.264 ns/op
Iteration   3: 543.176 ns/op
Iteration   4: 545.751 ns/op
Iteration   5: 547.287 ns/op
Iteration   6: 546.681 ns/op
Iteration   7: 541.902 ns/op
Iteration   8: 542.824 ns/op
Iteration   9: 541.567 ns/op
Iteration  10: 540.902 ns/op
Iteration  11: 542.599 ns/op
Iteration  12: 541.501 ns/op
Iteration  13: 542.535 ns/op
Iteration  14: 541.175 ns/op
Iteration  15: 546.563 ns/op
Iteration  16: 541.424 ns/op
Iteration  17: 541.538 ns/op
Iteration  18: 544.014 ns/op
Iteration  19: 541.687 ns/op
Iteration  20: 543.168 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  547.501 ±(99.9%) 2.757 ns/op [Average]
  (min, avg, max) = (540.310, 547.501, 573.439), stdev = 8.129
  CI (99.9%): [544.744, 550.258] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = ,	





 	   	
		  
					
			 		 
	
			  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1016.516 ns/op
# Warmup Iteration   2: 616.162 ns/op
# Warmup Iteration   3: 560.147 ns/op
# Warmup Iteration   4: 574.209 ns/op
# Warmup Iteration   5: 569.182 ns/op
Iteration   1: 558.279 ns/op
Iteration   2: 555.346 ns/op
Iteration   3: 555.773 ns/op
Iteration   4: 558.255 ns/op
Iteration   5: 555.812 ns/op
Iteration   6: 559.113 ns/op
Iteration   7: 554.230 ns/op
Iteration   8: 554.831 ns/op
Iteration   9: 553.855 ns/op
Iteration  10: 554.074 ns/op
Iteration  11: 555.192 ns/op
Iteration  12: 554.221 ns/op
Iteration  13: 555.925 ns/op
Iteration  14: 554.435 ns/op
Iteration  15: 555.421 ns/op
Iteration  16: 558.767 ns/op
Iteration  17: 555.019 ns/op
Iteration  18: 556.701 ns/op
Iteration  19: 555.253 ns/op
Iteration  20: 557.227 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1007.794 ns/op
# Warmup Iteration   2: 619.036 ns/op
# Warmup Iteration   3: 568.297 ns/op
# Warmup Iteration   4: 583.180 ns/op
# Warmup Iteration   5: 575.974 ns/op
Iteration   1: 566.810 ns/op
Iteration   2: 564.395 ns/op
Iteration   3: 564.236 ns/op
Iteration   4: 567.183 ns/op
Iteration   5: 564.059 ns/op
Iteration   6: 569.281 ns/op
Iteration   7: 562.940 ns/op
Iteration   8: 562.815 ns/op
Iteration   9: 563.784 ns/op
Iteration  10: 563.228 ns/op
Iteration  11: 564.715 ns/op
Iteration  12: 563.449 ns/op
Iteration  13: 564.441 ns/op
Iteration  14: 566.023 ns/op
Iteration  15: 564.420 ns/op
Iteration  16: 565.545 ns/op
Iteration  17: 564.721 ns/op
Iteration  18: 564.800 ns/op
Iteration  19: 567.068 ns/op
Iteration  20: 569.722 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1015.605 ns/op
# Warmup Iteration   2: 606.291 ns/op
# Warmup Iteration   3: 555.678 ns/op
# Warmup Iteration   4: 579.566 ns/op
# Warmup Iteration   5: 563.086 ns/op
Iteration   1: 552.198 ns/op
Iteration   2: 549.930 ns/op
Iteration   3: 552.347 ns/op
Iteration   4: 549.630 ns/op
Iteration   5: 549.712 ns/op
Iteration   6: 557.268 ns/op
Iteration   7: 553.688 ns/op
Iteration   8: 550.047 ns/op
Iteration   9: 548.615 ns/op
Iteration  10: 549.455 ns/op
Iteration  11: 548.364 ns/op
Iteration  12: 549.031 ns/op
Iteration  13: 552.505 ns/op
Iteration  14: 549.650 ns/op
Iteration  15: 550.846 ns/op
Iteration  16: 549.701 ns/op
Iteration  17: 554.036 ns/op
Iteration  18: 550.311 ns/op
Iteration  19: 552.961 ns/op
Iteration  20: 548.014 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 988.210 ns/op
# Warmup Iteration   2: 613.199 ns/op
# Warmup Iteration   3: 570.907 ns/op
# Warmup Iteration   4: 584.904 ns/op
# Warmup Iteration   5: 578.707 ns/op
Iteration   1: 568.097 ns/op
Iteration   2: 565.111 ns/op
Iteration   3: 566.728 ns/op
Iteration   4: 567.549 ns/op
Iteration   5: 565.296 ns/op
Iteration   6: 568.276 ns/op
Iteration   7: 565.062 ns/op
Iteration   8: 564.309 ns/op
Iteration   9: 565.309 ns/op
Iteration  10: 564.214 ns/op
Iteration  11: 565.137 ns/op
Iteration  12: 564.580 ns/op
Iteration  13: 564.855 ns/op
Iteration  14: 566.221 ns/op
Iteration  15: 565.040 ns/op
Iteration  16: 566.653 ns/op
Iteration  17: 564.078 ns/op
Iteration  18: 564.777 ns/op
Iteration  19: 566.525 ns/op
Iteration  20: 566.441 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1013.010 ns/op
# Warmup Iteration   2: 598.876 ns/op
# Warmup Iteration   3: 551.196 ns/op
# Warmup Iteration   4: 565.819 ns/op
# Warmup Iteration   5: 559.621 ns/op
Iteration   1: 551.326 ns/op
Iteration   2: 547.168 ns/op
Iteration   3: 549.445 ns/op
Iteration   4: 546.703 ns/op
Iteration   5: 551.981 ns/op
Iteration   6: 547.334 ns/op
Iteration   7: 545.582 ns/op
Iteration   8: 546.024 ns/op
Iteration   9: 545.285 ns/op
Iteration  10: 546.519 ns/op
Iteration  11: 545.391 ns/op
Iteration  12: 547.047 ns/op
Iteration  13: 546.394 ns/op
Iteration  14: 548.193 ns/op
Iteration  15: 546.356 ns/op
Iteration  16: 551.592 ns/op
Iteration  17: 548.024 ns/op
Iteration  18: 546.663 ns/op
Iteration  19: 548.608 ns/op
Iteration  20: 546.608 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  557.062 ±(99.9%) 2.578 ns/op [Average]
  (min, avg, max) = (545.285, 557.062, 569.722), stdev = 7.600
  CI (99.9%): [554.484, 559.639] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                          (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  ,	





 	   	
		  
					
			 		 
	
			    avgt  100  547.501 ± 2.757  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  ,	





 	   	
		  
					
			 		 
	
			    avgt  100  557.062 ± 2.578  ns/op

Benchmark result is saved to split_precompiled_regex_237_81_Match.csv
