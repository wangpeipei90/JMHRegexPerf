# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 		

  	  	
 			 	
 
	
		  		
			 
		
  	
		   	 		  		

 
	

 	
	
	,     	 	
		



		
	
 			 	



 	

	  	   
 	


 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1193.030 ns/op
# Warmup Iteration   2: 846.811 ns/op
# Warmup Iteration   3: 725.242 ns/op
# Warmup Iteration   4: 740.500 ns/op
# Warmup Iteration   5: 734.204 ns/op
Iteration   1: 737.764 ns/op
Iteration   2: 721.454 ns/op
Iteration   3: 721.067 ns/op
Iteration   4: 720.804 ns/op
Iteration   5: 720.939 ns/op
Iteration   6: 720.984 ns/op
Iteration   7: 720.777 ns/op
Iteration   8: 720.903 ns/op
Iteration   9: 720.654 ns/op
Iteration  10: 720.889 ns/op
Iteration  11: 718.580 ns/op
Iteration  12: 719.319 ns/op
Iteration  13: 718.127 ns/op
Iteration  14: 718.299 ns/op
Iteration  15: 718.311 ns/op
Iteration  16: 718.336 ns/op
Iteration  17: 723.231 ns/op
Iteration  18: 719.343 ns/op
Iteration  19: 718.975 ns/op
Iteration  20: 718.650 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1309.207 ns/op
# Warmup Iteration   2: 1008.773 ns/op
# Warmup Iteration   3: 842.930 ns/op
# Warmup Iteration   4: 845.616 ns/op
# Warmup Iteration   5: 848.568 ns/op
Iteration   1: 853.966 ns/op
Iteration   2: 859.599 ns/op
Iteration   3: 839.233 ns/op
Iteration   4: 838.746 ns/op
Iteration   5: 838.902 ns/op
Iteration   6: 838.765 ns/op
Iteration   7: 834.734 ns/op
Iteration   8: 837.879 ns/op
Iteration   9: 838.264 ns/op
Iteration  10: 838.172 ns/op
Iteration  11: 839.116 ns/op
Iteration  12: 839.201 ns/op
Iteration  13: 836.022 ns/op
Iteration  14: 835.712 ns/op
Iteration  15: 835.593 ns/op
Iteration  16: 836.908 ns/op
Iteration  17: 836.720 ns/op
Iteration  18: 837.318 ns/op
Iteration  19: 838.346 ns/op
Iteration  20: 835.278 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1238.849 ns/op
# Warmup Iteration   2: 968.031 ns/op
# Warmup Iteration   3: 819.449 ns/op
# Warmup Iteration   4: 822.320 ns/op
# Warmup Iteration   5: 825.504 ns/op
Iteration   1: 829.375 ns/op
Iteration   2: 834.400 ns/op
Iteration   3: 815.788 ns/op
Iteration   4: 815.956 ns/op
Iteration   5: 815.654 ns/op
Iteration   6: 816.176 ns/op
Iteration   7: 815.946 ns/op
Iteration   8: 815.163 ns/op
Iteration   9: 815.069 ns/op
Iteration  10: 815.905 ns/op
Iteration  11: 815.408 ns/op
Iteration  12: 819.576 ns/op
Iteration  13: 811.481 ns/op
Iteration  14: 812.806 ns/op
Iteration  15: 813.649 ns/op
Iteration  16: 820.249 ns/op
Iteration  17: 813.982 ns/op
Iteration  18: 815.219 ns/op
Iteration  19: 813.683 ns/op
Iteration  20: 815.377 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1216.153 ns/op
# Warmup Iteration   2: 878.260 ns/op
# Warmup Iteration   3: 748.955 ns/op
# Warmup Iteration   4: 752.279 ns/op
# Warmup Iteration   5: 770.611 ns/op
Iteration   1: 768.149 ns/op
Iteration   2: 746.387 ns/op
Iteration   3: 744.884 ns/op
Iteration   4: 744.389 ns/op
Iteration   5: 744.349 ns/op
Iteration   6: 744.730 ns/op
Iteration   7: 744.487 ns/op
Iteration   8: 744.445 ns/op
Iteration   9: 744.965 ns/op
Iteration  10: 745.392 ns/op
Iteration  11: 743.556 ns/op
Iteration  12: 742.772 ns/op
Iteration  13: 742.395 ns/op
Iteration  14: 742.601 ns/op
Iteration  15: 743.069 ns/op
Iteration  16: 742.823 ns/op
Iteration  17: 743.886 ns/op
Iteration  18: 742.582 ns/op
Iteration  19: 743.562 ns/op
Iteration  20: 743.311 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1238.259 ns/op
# Warmup Iteration   2: 969.606 ns/op
# Warmup Iteration   3: 819.654 ns/op
# Warmup Iteration   4: 821.462 ns/op
# Warmup Iteration   5: 824.991 ns/op
Iteration   1: 829.795 ns/op
Iteration   2: 834.501 ns/op
Iteration   3: 815.053 ns/op
Iteration   4: 815.073 ns/op
Iteration   5: 814.642 ns/op
Iteration   6: 814.843 ns/op
Iteration   7: 814.977 ns/op
Iteration   8: 814.803 ns/op
Iteration   9: 814.875 ns/op
Iteration  10: 815.110 ns/op
Iteration  11: 815.672 ns/op
Iteration  12: 813.747 ns/op
Iteration  13: 811.654 ns/op
Iteration  14: 813.352 ns/op
Iteration  15: 813.048 ns/op
Iteration  16: 813.360 ns/op
Iteration  17: 813.322 ns/op
Iteration  18: 813.350 ns/op
Iteration  19: 813.089 ns/op
Iteration  20: 814.657 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  787.684 Â±(99.9%) 15.808 ns/op [Average]
  (min, avg, max) = (718.127, 787.684, 859.599), stdev = 46.609
  CI (99.9%): [771.876, 803.492] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 		

  	  	
 			 	
 
	
		  		
			 
		
  	
		   	 		  		

 
	

 	
	
	,     	 	
		



		
	
 			 	



 	

	  	   
 	


 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1220.020 ns/op
# Warmup Iteration   2: 913.182 ns/op
# Warmup Iteration   3: 785.448 ns/op
# Warmup Iteration   4: 787.917 ns/op
# Warmup Iteration   5: 795.970 ns/op
Iteration   1: 799.115 ns/op
Iteration   2: 792.087 ns/op
Iteration   3: 783.801 ns/op
Iteration   4: 783.213 ns/op
Iteration   5: 786.404 ns/op
Iteration   6: 781.897 ns/op
Iteration   7: 781.959 ns/op
Iteration   8: 782.232 ns/op
Iteration   9: 782.097 ns/op
Iteration  10: 787.163 ns/op
Iteration  11: 784.446 ns/op
Iteration  12: 779.526 ns/op
Iteration  13: 779.521 ns/op
Iteration  14: 779.512 ns/op
Iteration  15: 779.598 ns/op
Iteration  16: 779.961 ns/op
Iteration  17: 781.256 ns/op
Iteration  18: 781.430 ns/op
Iteration  19: 781.690 ns/op
Iteration  20: 782.410 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1293.867 ns/op
# Warmup Iteration   2: 1028.259 ns/op
# Warmup Iteration   3: 864.195 ns/op
# Warmup Iteration   4: 867.258 ns/op
# Warmup Iteration   5: 869.758 ns/op
Iteration   1: 874.531 ns/op
Iteration   2: 880.012 ns/op
Iteration   3: 860.326 ns/op
Iteration   4: 860.939 ns/op
Iteration   5: 860.748 ns/op
Iteration   6: 860.371 ns/op
Iteration   7: 856.662 ns/op
Iteration   8: 860.660 ns/op
Iteration   9: 860.900 ns/op
Iteration  10: 860.757 ns/op
Iteration  11: 860.970 ns/op
Iteration  12: 862.236 ns/op
Iteration  13: 870.658 ns/op
Iteration  14: 859.150 ns/op
Iteration  15: 867.840 ns/op
Iteration  16: 859.230 ns/op
Iteration  17: 861.284 ns/op
Iteration  18: 862.023 ns/op
Iteration  19: 856.462 ns/op
Iteration  20: 859.355 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1217.306 ns/op
# Warmup Iteration   2: 931.604 ns/op
# Warmup Iteration   3: 800.426 ns/op
# Warmup Iteration   4: 803.104 ns/op
# Warmup Iteration   5: 806.071 ns/op
Iteration   1: 810.265 ns/op
Iteration   2: 815.026 ns/op
Iteration   3: 799.529 ns/op
Iteration   4: 796.963 ns/op
Iteration   5: 796.741 ns/op
Iteration   6: 796.617 ns/op
Iteration   7: 796.752 ns/op
Iteration   8: 797.517 ns/op
Iteration   9: 802.431 ns/op
Iteration  10: 798.163 ns/op
Iteration  11: 798.710 ns/op
Iteration  12: 800.276 ns/op
Iteration  13: 795.145 ns/op
Iteration  14: 794.575 ns/op
Iteration  15: 796.865 ns/op
Iteration  16: 795.111 ns/op
Iteration  17: 795.698 ns/op
Iteration  18: 796.420 ns/op
Iteration  19: 797.721 ns/op
Iteration  20: 806.230 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1307.489 ns/op
# Warmup Iteration   2: 1040.933 ns/op
# Warmup Iteration   3: 875.230 ns/op
# Warmup Iteration   4: 877.694 ns/op
# Warmup Iteration   5: 881.250 ns/op
Iteration   1: 885.925 ns/op
Iteration   2: 890.593 ns/op
Iteration   3: 872.052 ns/op
Iteration   4: 870.698 ns/op
Iteration   5: 870.826 ns/op
Iteration   6: 866.125 ns/op
Iteration   7: 870.766 ns/op
Iteration   8: 876.764 ns/op
Iteration   9: 872.133 ns/op
Iteration  10: 871.570 ns/op
Iteration  11: 871.873 ns/op
Iteration  12: 893.633 ns/op
Iteration  13: 870.523 ns/op
Iteration  14: 868.572 ns/op
Iteration  15: 869.451 ns/op
Iteration  16: 870.307 ns/op
Iteration  17: 866.362 ns/op
Iteration  18: 868.036 ns/op
Iteration  19: 871.605 ns/op
Iteration  20: 869.300 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1307.984 ns/op
# Warmup Iteration   2: 1017.662 ns/op
# Warmup Iteration   3: 858.726 ns/op
# Warmup Iteration   4: 861.510 ns/op
# Warmup Iteration   5: 865.571 ns/op
Iteration   1: 869.808 ns/op
Iteration   2: 875.188 ns/op
Iteration   3: 857.975 ns/op
Iteration   4: 855.161 ns/op
Iteration   5: 855.864 ns/op
Iteration   6: 855.868 ns/op
Iteration   7: 855.297 ns/op
Iteration   8: 851.917 ns/op
Iteration   9: 855.998 ns/op
Iteration  10: 858.997 ns/op
Iteration  11: 856.191 ns/op
Iteration  12: 856.484 ns/op
Iteration  13: 858.369 ns/op
Iteration  14: 854.949 ns/op
Iteration  15: 854.316 ns/op
Iteration  16: 853.356 ns/op
Iteration  17: 854.617 ns/op
Iteration  18: 855.771 ns/op
Iteration  19: 854.238 ns/op
Iteration  20: 854.686 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  835.234 Â±(99.9%) 12.599 ns/op [Average]
  (min, avg, max) = (779.512, 835.234, 893.633), stdev = 37.150
  CI (99.9%): [822.634, 847.833] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                          (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 		

  	  	
 			 	
 
	
		  		
			 
		
  	
		   	 		  		

 
	

 	
	
	,     	 	
		



		
	
 			 	



 	

	  	   
 	


   avgt  100  787.684 Â± 15.808  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 		

  	  	
 			 	
 
	
		  		
			 
		
  	
		   	 		  		

 
	

 	
	
	,     	 	
		



		
	
 			 	



 	

	  	   
 	


   avgt  100  835.234 Â± 12.599  ns/op

Benchmark result is saved to split_precompiled_regex_53_209_Match.csv
