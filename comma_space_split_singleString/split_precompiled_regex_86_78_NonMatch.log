# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = lyMet<*Ae!%a]Sm?92fz&Gi3D;_]q)OlMPu;AYgu4Pb-~'
;4EW9[C30V_6'."2.5(pCzIK?stq)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1279.056 ns/op
# Warmup Iteration   2: 1195.894 ns/op
# Warmup Iteration   3: 926.960 ns/op
# Warmup Iteration   4: 935.585 ns/op
# Warmup Iteration   5: 938.739 ns/op
Iteration   1: 941.982 ns/op
Iteration   2: 954.804 ns/op
Iteration   3: 926.851 ns/op
Iteration   4: 952.689 ns/op
Iteration   5: 932.413 ns/op
Iteration   6: 927.188 ns/op
Iteration   7: 931.298 ns/op
Iteration   8: 931.999 ns/op
Iteration   9: 931.796 ns/op
Iteration  10: 926.739 ns/op
Iteration  11: 936.133 ns/op
Iteration  12: 932.820 ns/op
Iteration  13: 926.747 ns/op
Iteration  14: 936.097 ns/op
Iteration  15: 931.661 ns/op
Iteration  16: 937.701 ns/op
Iteration  17: 926.716 ns/op
Iteration  18: 930.588 ns/op
Iteration  19: 928.756 ns/op
Iteration  20: 926.714 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1280.258 ns/op
# Warmup Iteration   2: 1180.096 ns/op
# Warmup Iteration   3: 931.693 ns/op
# Warmup Iteration   4: 936.028 ns/op
# Warmup Iteration   5: 945.498 ns/op
Iteration   1: 949.898 ns/op
Iteration   2: 948.332 ns/op
Iteration   3: 929.326 ns/op
Iteration   4: 954.541 ns/op
Iteration   5: 935.260 ns/op
Iteration   6: 928.786 ns/op
Iteration   7: 932.766 ns/op
Iteration   8: 932.378 ns/op
Iteration   9: 932.336 ns/op
Iteration  10: 928.527 ns/op
Iteration  11: 932.397 ns/op
Iteration  12: 932.322 ns/op
Iteration  13: 928.299 ns/op
Iteration  14: 932.164 ns/op
Iteration  15: 931.888 ns/op
Iteration  16: 932.243 ns/op
Iteration  17: 928.353 ns/op
Iteration  18: 929.612 ns/op
Iteration  19: 929.696 ns/op
Iteration  20: 928.448 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1272.993 ns/op
# Warmup Iteration   2: 1172.422 ns/op
# Warmup Iteration   3: 935.026 ns/op
# Warmup Iteration   4: 924.788 ns/op
# Warmup Iteration   5: 936.185 ns/op
Iteration   1: 940.587 ns/op
Iteration   2: 945.501 ns/op
Iteration   3: 929.160 ns/op
Iteration   4: 953.003 ns/op
Iteration   5: 931.490 ns/op
Iteration   6: 924.620 ns/op
Iteration   7: 928.735 ns/op
Iteration   8: 929.839 ns/op
Iteration   9: 929.527 ns/op
Iteration  10: 925.046 ns/op
Iteration  11: 930.158 ns/op
Iteration  12: 930.143 ns/op
Iteration  13: 930.512 ns/op
Iteration  14: 924.778 ns/op
Iteration  15: 938.552 ns/op
Iteration  16: 929.912 ns/op
Iteration  17: 924.794 ns/op
Iteration  18: 926.789 ns/op
Iteration  19: 927.291 ns/op
Iteration  20: 926.829 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1280.226 ns/op
# Warmup Iteration   2: 1177.235 ns/op
# Warmup Iteration   3: 930.952 ns/op
# Warmup Iteration   4: 932.197 ns/op
# Warmup Iteration   5: 938.563 ns/op
Iteration   1: 942.873 ns/op
Iteration   2: 947.723 ns/op
Iteration   3: 927.150 ns/op
Iteration   4: 953.298 ns/op
Iteration   5: 932.338 ns/op
Iteration   6: 927.179 ns/op
Iteration   7: 932.051 ns/op
Iteration   8: 931.617 ns/op
Iteration   9: 930.716 ns/op
Iteration  10: 927.091 ns/op
Iteration  11: 932.154 ns/op
Iteration  12: 941.956 ns/op
Iteration  13: 927.310 ns/op
Iteration  14: 932.213 ns/op
Iteration  15: 932.695 ns/op
Iteration  16: 933.464 ns/op
Iteration  17: 926.826 ns/op
Iteration  18: 937.076 ns/op
Iteration  19: 929.497 ns/op
Iteration  20: 927.238 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1281.975 ns/op
# Warmup Iteration   2: 1179.274 ns/op
# Warmup Iteration   3: 924.948 ns/op
# Warmup Iteration   4: 926.196 ns/op
# Warmup Iteration   5: 932.688 ns/op
Iteration   1: 936.047 ns/op
Iteration   2: 941.400 ns/op
Iteration   3: 920.376 ns/op
Iteration   4: 946.321 ns/op
Iteration   5: 924.730 ns/op
Iteration   6: 922.392 ns/op
Iteration   7: 924.513 ns/op
Iteration   8: 929.697 ns/op
Iteration   9: 924.687 ns/op
Iteration  10: 920.397 ns/op
Iteration  11: 925.478 ns/op
Iteration  12: 930.003 ns/op
Iteration  13: 928.489 ns/op
Iteration  14: 921.069 ns/op
Iteration  15: 925.287 ns/op
Iteration  16: 927.101 ns/op
Iteration  17: 921.457 ns/op
Iteration  18: 929.327 ns/op
Iteration  19: 928.860 ns/op
Iteration  20: 923.152 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  931.998 ±(99.9%) 2.625 ns/op [Average]
  (min, avg, max) = (920.376, 931.998, 954.804), stdev = 7.741
  CI (99.9%): [929.372, 934.623] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = lyMet<*Ae!%a]Sm?92fz&Gi3D;_]q)OlMPu;AYgu4Pb-~'
;4EW9[C30V_6'."2.5(pCzIK?stq)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1282.334 ns/op
# Warmup Iteration   2: 1175.159 ns/op
# Warmup Iteration   3: 929.950 ns/op
# Warmup Iteration   4: 933.293 ns/op
# Warmup Iteration   5: 939.008 ns/op
Iteration   1: 942.571 ns/op
Iteration   2: 948.255 ns/op
Iteration   3: 926.840 ns/op
Iteration   4: 954.439 ns/op
Iteration   5: 932.236 ns/op
Iteration   6: 926.857 ns/op
Iteration   7: 932.837 ns/op
Iteration   8: 934.497 ns/op
Iteration   9: 934.618 ns/op
Iteration  10: 926.383 ns/op
Iteration  11: 934.000 ns/op
Iteration  12: 932.179 ns/op
Iteration  13: 926.245 ns/op
Iteration  14: 932.669 ns/op
Iteration  15: 933.059 ns/op
Iteration  16: 936.970 ns/op
Iteration  17: 926.696 ns/op
Iteration  18: 929.568 ns/op
Iteration  19: 930.400 ns/op
Iteration  20: 927.048 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1285.491 ns/op
# Warmup Iteration   2: 1180.859 ns/op
# Warmup Iteration   3: 932.464 ns/op
# Warmup Iteration   4: 935.035 ns/op
# Warmup Iteration   5: 941.440 ns/op
Iteration   1: 945.743 ns/op
Iteration   2: 949.884 ns/op
Iteration   3: 929.441 ns/op
Iteration   4: 955.376 ns/op
Iteration   5: 936.026 ns/op
Iteration   6: 930.243 ns/op
Iteration   7: 934.060 ns/op
Iteration   8: 935.370 ns/op
Iteration   9: 933.980 ns/op
Iteration  10: 929.786 ns/op
Iteration  11: 933.528 ns/op
Iteration  12: 934.557 ns/op
Iteration  13: 930.052 ns/op
Iteration  14: 934.036 ns/op
Iteration  15: 934.238 ns/op
Iteration  16: 934.578 ns/op
Iteration  17: 930.122 ns/op
Iteration  18: 931.886 ns/op
Iteration  19: 933.126 ns/op
Iteration  20: 929.989 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1280.603 ns/op
# Warmup Iteration   2: 1180.445 ns/op
# Warmup Iteration   3: 929.880 ns/op
# Warmup Iteration   4: 929.791 ns/op
# Warmup Iteration   5: 936.380 ns/op
Iteration   1: 940.666 ns/op
Iteration   2: 946.323 ns/op
Iteration   3: 924.520 ns/op
Iteration   4: 950.290 ns/op
Iteration   5: 931.012 ns/op
Iteration   6: 924.734 ns/op
Iteration   7: 928.585 ns/op
Iteration   8: 929.445 ns/op
Iteration   9: 929.215 ns/op
Iteration  10: 924.592 ns/op
Iteration  11: 928.888 ns/op
Iteration  12: 934.779 ns/op
Iteration  13: 924.285 ns/op
Iteration  14: 929.343 ns/op
Iteration  15: 930.416 ns/op
Iteration  16: 933.509 ns/op
Iteration  17: 924.523 ns/op
Iteration  18: 930.185 ns/op
Iteration  19: 927.393 ns/op
Iteration  20: 927.284 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1272.251 ns/op
# Warmup Iteration   2: 1169.164 ns/op
# Warmup Iteration   3: 933.138 ns/op
# Warmup Iteration   4: 923.903 ns/op
# Warmup Iteration   5: 935.465 ns/op
Iteration   1: 938.902 ns/op
Iteration   2: 943.838 ns/op
Iteration   3: 922.857 ns/op
Iteration   4: 950.175 ns/op
Iteration   5: 928.520 ns/op
Iteration   6: 923.520 ns/op
Iteration   7: 927.750 ns/op
Iteration   8: 928.031 ns/op
Iteration   9: 927.981 ns/op
Iteration  10: 923.285 ns/op
Iteration  11: 928.725 ns/op
Iteration  12: 927.454 ns/op
Iteration  13: 932.161 ns/op
Iteration  14: 922.825 ns/op
Iteration  15: 931.799 ns/op
Iteration  16: 928.269 ns/op
Iteration  17: 923.730 ns/op
Iteration  18: 933.244 ns/op
Iteration  19: 926.335 ns/op
Iteration  20: 937.381 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1279.921 ns/op
# Warmup Iteration   2: 1176.435 ns/op
# Warmup Iteration   3: 930.118 ns/op
# Warmup Iteration   4: 933.240 ns/op
# Warmup Iteration   5: 938.412 ns/op
Iteration   1: 942.006 ns/op
Iteration   2: 948.420 ns/op
Iteration   3: 926.941 ns/op
Iteration   4: 953.028 ns/op
Iteration   5: 932.072 ns/op
Iteration   6: 931.664 ns/op
Iteration   7: 941.512 ns/op
Iteration   8: 932.320 ns/op
Iteration   9: 933.296 ns/op
Iteration  10: 926.261 ns/op
Iteration  11: 931.597 ns/op
Iteration  12: 934.692 ns/op
Iteration  13: 926.602 ns/op
Iteration  14: 930.567 ns/op
Iteration  15: 932.904 ns/op
Iteration  16: 932.936 ns/op
Iteration  17: 926.600 ns/op
Iteration  18: 928.964 ns/op
Iteration  19: 930.650 ns/op
Iteration  20: 926.301 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  932.705 ±(99.9%) 2.491 ns/op [Average]
  (min, avg, max) = (922.825, 932.705, 955.376), stdev = 7.344
  CI (99.9%): [930.214, 935.196] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  lyMet<*Ae!%a]Sm?92fz&Gi3D;_]q)OlMPu;AYgu4Pb-~'
;4EW9[C30V_6'."2.5(pCzIK?stq  avgt  100  931.998 ± 2.625  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  lyMet<*Ae!%a]Sm?92fz&Gi3D;_]q)OlMPu;AYgu4Pb-~'
;4EW9[C30V_6'."2.5(pCzIK?stq  avgt  100  932.705 ± 2.491  ns/op

Benchmark result is saved to split_precompiled_regex_86_78_NonMatch.csv
