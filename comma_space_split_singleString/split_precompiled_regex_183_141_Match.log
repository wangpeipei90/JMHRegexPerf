# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		


	  		 			
  

   		,	
	
		

	
	 	
	   
		
   	   
 			 		
 

 
  

	
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1113.293 ns/op
# Warmup Iteration   2: 780.804 ns/op
# Warmup Iteration   3: 697.582 ns/op
# Warmup Iteration   4: 690.007 ns/op
# Warmup Iteration   5: 692.567 ns/op
Iteration   1: 699.521 ns/op
Iteration   2: 682.509 ns/op
Iteration   3: 683.364 ns/op
Iteration   4: 681.380 ns/op
Iteration   5: 683.829 ns/op
Iteration   6: 681.103 ns/op
Iteration   7: 680.000 ns/op
Iteration   8: 680.347 ns/op
Iteration   9: 681.099 ns/op
Iteration  10: 679.019 ns/op
Iteration  11: 678.898 ns/op
Iteration  12: 679.920 ns/op
Iteration  13: 678.777 ns/op
Iteration  14: 678.714 ns/op
Iteration  15: 678.792 ns/op
Iteration  16: 678.602 ns/op
Iteration  17: 678.958 ns/op
Iteration  18: 679.339 ns/op
Iteration  19: 681.272 ns/op
Iteration  20: 679.236 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1075.054 ns/op
# Warmup Iteration   2: 736.462 ns/op
# Warmup Iteration   3: 664.893 ns/op
# Warmup Iteration   4: 660.984 ns/op
# Warmup Iteration   5: 668.996 ns/op
Iteration   1: 668.631 ns/op
Iteration   2: 656.899 ns/op
Iteration   3: 653.393 ns/op
Iteration   4: 653.329 ns/op
Iteration   5: 653.554 ns/op
Iteration   6: 653.258 ns/op
Iteration   7: 655.369 ns/op
Iteration   8: 656.177 ns/op
Iteration   9: 651.098 ns/op
Iteration  10: 650.827 ns/op
Iteration  11: 651.522 ns/op
Iteration  12: 651.174 ns/op
Iteration  13: 652.461 ns/op
Iteration  14: 651.476 ns/op
Iteration  15: 651.485 ns/op
Iteration  16: 652.383 ns/op
Iteration  17: 652.495 ns/op
Iteration  18: 651.080 ns/op
Iteration  19: 655.649 ns/op
Iteration  20: 651.378 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1122.289 ns/op
# Warmup Iteration   2: 796.438 ns/op
# Warmup Iteration   3: 708.175 ns/op
# Warmup Iteration   4: 703.475 ns/op
# Warmup Iteration   5: 706.436 ns/op
Iteration   1: 710.760 ns/op
Iteration   2: 693.651 ns/op
Iteration   3: 693.853 ns/op
Iteration   4: 693.880 ns/op
Iteration   5: 693.566 ns/op
Iteration   6: 697.715 ns/op
Iteration   7: 696.479 ns/op
Iteration   8: 694.370 ns/op
Iteration   9: 703.408 ns/op
Iteration  10: 692.492 ns/op
Iteration  11: 692.523 ns/op
Iteration  12: 692.219 ns/op
Iteration  13: 692.438 ns/op
Iteration  14: 692.673 ns/op
Iteration  15: 693.281 ns/op
Iteration  16: 692.003 ns/op
Iteration  17: 691.641 ns/op
Iteration  18: 692.139 ns/op
Iteration  19: 691.646 ns/op
Iteration  20: 691.658 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1122.053 ns/op
# Warmup Iteration   2: 797.811 ns/op
# Warmup Iteration   3: 708.694 ns/op
# Warmup Iteration   4: 703.364 ns/op
# Warmup Iteration   5: 707.698 ns/op
Iteration   1: 711.815 ns/op
Iteration   2: 695.587 ns/op
Iteration   3: 695.679 ns/op
Iteration   4: 695.014 ns/op
Iteration   5: 695.134 ns/op
Iteration   6: 698.766 ns/op
Iteration   7: 695.267 ns/op
Iteration   8: 696.267 ns/op
Iteration   9: 703.000 ns/op
Iteration  10: 694.248 ns/op
Iteration  11: 692.610 ns/op
Iteration  12: 692.716 ns/op
Iteration  13: 693.581 ns/op
Iteration  14: 693.000 ns/op
Iteration  15: 695.227 ns/op
Iteration  16: 693.180 ns/op
Iteration  17: 693.177 ns/op
Iteration  18: 693.589 ns/op
Iteration  19: 694.071 ns/op
Iteration  20: 692.457 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1108.644 ns/op
# Warmup Iteration   2: 779.753 ns/op
# Warmup Iteration   3: 696.055 ns/op
# Warmup Iteration   4: 692.669 ns/op
# Warmup Iteration   5: 694.637 ns/op
Iteration   1: 698.997 ns/op
Iteration   2: 683.660 ns/op
Iteration   3: 683.210 ns/op
Iteration   4: 682.668 ns/op
Iteration   5: 686.797 ns/op
Iteration   6: 682.571 ns/op
Iteration   7: 683.044 ns/op
Iteration   8: 683.955 ns/op
Iteration   9: 683.044 ns/op
Iteration  10: 681.092 ns/op
Iteration  11: 680.999 ns/op
Iteration  12: 682.738 ns/op
Iteration  13: 681.166 ns/op
Iteration  14: 682.910 ns/op
Iteration  15: 680.997 ns/op
Iteration  16: 680.922 ns/op
Iteration  17: 681.472 ns/op
Iteration  18: 682.091 ns/op
Iteration  19: 682.913 ns/op
Iteration  20: 683.343 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  681.737 ±(99.9%) 5.371 ns/op [Average]
  (min, avg, max) = (650.827, 681.737, 711.815), stdev = 15.837
  CI (99.9%): [676.366, 687.108] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		


	  		 			
  

   		,	
	
		

	
	 	
	   
		
   	   
 			 		
 

 
  

	
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1186.360 ns/op
# Warmup Iteration   2: 825.471 ns/op
# Warmup Iteration   3: 728.243 ns/op
# Warmup Iteration   4: 723.988 ns/op
# Warmup Iteration   5: 727.905 ns/op
Iteration   1: 732.028 ns/op
Iteration   2: 715.760 ns/op
Iteration   3: 715.562 ns/op
Iteration   4: 715.787 ns/op
Iteration   5: 716.440 ns/op
Iteration   6: 715.713 ns/op
Iteration   7: 719.863 ns/op
Iteration   8: 715.410 ns/op
Iteration   9: 715.940 ns/op
Iteration  10: 713.888 ns/op
Iteration  11: 713.809 ns/op
Iteration  12: 713.709 ns/op
Iteration  13: 714.056 ns/op
Iteration  14: 714.080 ns/op
Iteration  15: 714.196 ns/op
Iteration  16: 716.229 ns/op
Iteration  17: 714.641 ns/op
Iteration  18: 717.098 ns/op
Iteration  19: 718.353 ns/op
Iteration  20: 714.702 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1162.043 ns/op
# Warmup Iteration   2: 782.109 ns/op
# Warmup Iteration   3: 690.985 ns/op
# Warmup Iteration   4: 687.547 ns/op
# Warmup Iteration   5: 691.598 ns/op
Iteration   1: 696.592 ns/op
Iteration   2: 680.293 ns/op
Iteration   3: 683.541 ns/op
Iteration   4: 680.033 ns/op
Iteration   5: 679.820 ns/op
Iteration   6: 679.860 ns/op
Iteration   7: 679.691 ns/op
Iteration   8: 679.811 ns/op
Iteration   9: 685.380 ns/op
Iteration  10: 677.566 ns/op
Iteration  11: 684.152 ns/op
Iteration  12: 678.497 ns/op
Iteration  13: 677.733 ns/op
Iteration  14: 678.115 ns/op
Iteration  15: 682.108 ns/op
Iteration  16: 680.122 ns/op
Iteration  17: 679.527 ns/op
Iteration  18: 679.309 ns/op
Iteration  19: 678.973 ns/op
Iteration  20: 678.942 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1137.320 ns/op
# Warmup Iteration   2: 782.192 ns/op
# Warmup Iteration   3: 701.409 ns/op
# Warmup Iteration   4: 696.769 ns/op
# Warmup Iteration   5: 701.022 ns/op
Iteration   1: 704.443 ns/op
Iteration   2: 690.013 ns/op
Iteration   3: 690.408 ns/op
Iteration   4: 693.422 ns/op
Iteration   5: 690.060 ns/op
Iteration   6: 690.184 ns/op
Iteration   7: 694.641 ns/op
Iteration   8: 689.331 ns/op
Iteration   9: 689.579 ns/op
Iteration  10: 689.006 ns/op
Iteration  11: 687.367 ns/op
Iteration  12: 687.281 ns/op
Iteration  13: 688.964 ns/op
Iteration  14: 690.543 ns/op
Iteration  15: 688.470 ns/op
Iteration  16: 687.648 ns/op
Iteration  17: 691.272 ns/op
Iteration  18: 689.126 ns/op
Iteration  19: 694.154 ns/op
Iteration  20: 699.966 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1171.653 ns/op
# Warmup Iteration   2: 809.594 ns/op
# Warmup Iteration   3: 712.694 ns/op
# Warmup Iteration   4: 707.407 ns/op
# Warmup Iteration   5: 710.377 ns/op
Iteration   1: 713.994 ns/op
Iteration   2: 700.141 ns/op
Iteration   3: 704.357 ns/op
Iteration   4: 699.210 ns/op
Iteration   5: 701.580 ns/op
Iteration   6: 698.373 ns/op
Iteration   7: 698.655 ns/op
Iteration   8: 698.236 ns/op
Iteration   9: 699.304 ns/op
Iteration  10: 698.962 ns/op
Iteration  11: 696.540 ns/op
Iteration  12: 696.776 ns/op
Iteration  13: 703.473 ns/op
Iteration  14: 697.186 ns/op
Iteration  15: 696.990 ns/op
Iteration  16: 697.756 ns/op
Iteration  17: 698.091 ns/op
Iteration  18: 698.066 ns/op
Iteration  19: 697.753 ns/op
Iteration  20: 700.554 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1145.234 ns/op
# Warmup Iteration   2: 817.841 ns/op
# Warmup Iteration   3: 727.928 ns/op
# Warmup Iteration   4: 722.493 ns/op
# Warmup Iteration   5: 727.316 ns/op
Iteration   1: 730.791 ns/op
Iteration   2: 713.528 ns/op
Iteration   3: 714.160 ns/op
Iteration   4: 713.639 ns/op
Iteration   5: 713.828 ns/op
Iteration   6: 715.210 ns/op
Iteration   7: 716.460 ns/op
Iteration   8: 713.402 ns/op
Iteration   9: 713.929 ns/op
Iteration  10: 711.910 ns/op
Iteration  11: 711.478 ns/op
Iteration  12: 711.794 ns/op
Iteration  13: 711.558 ns/op
Iteration  14: 718.493 ns/op
Iteration  15: 711.578 ns/op
Iteration  16: 713.324 ns/op
Iteration  17: 711.899 ns/op
Iteration  18: 711.547 ns/op
Iteration  19: 712.207 ns/op
Iteration  20: 711.790 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  700.517 ±(99.9%) 4.785 ns/op [Average]
  (min, avg, max) = (677.566, 700.517, 732.028), stdev = 14.107
  CI (99.9%): [695.733, 705.302] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                      (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		


	  		 			
  

   		,	
	
		

	
	 	
	   
		
   	   
 			 		
 

 
  

	
	  avgt  100  681.737 ± 5.371  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		


	  		 			
  

   		,	
	
		

	
	 	
	   
		
   	   
 			 		
 

 
  

	
	  avgt  100  700.517 ± 4.785  ns/op

Benchmark result is saved to split_precompiled_regex_183_141_Match.csv
