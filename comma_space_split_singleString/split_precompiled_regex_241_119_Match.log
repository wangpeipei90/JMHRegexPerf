# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
							

 	 	

	

	

  	 		
	


 	 

	 	
	
,   			 	
	

	  
 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1023.750 ns/op
# Warmup Iteration   2: 670.567 ns/op
# Warmup Iteration   3: 606.265 ns/op
# Warmup Iteration   4: 609.096 ns/op
# Warmup Iteration   5: 631.161 ns/op
Iteration   1: 602.296 ns/op
Iteration   2: 601.794 ns/op
Iteration   3: 601.877 ns/op
Iteration   4: 604.407 ns/op
Iteration   5: 602.124 ns/op
Iteration   6: 602.154 ns/op
Iteration   7: 604.029 ns/op
Iteration   8: 600.102 ns/op
Iteration   9: 600.158 ns/op
Iteration  10: 600.351 ns/op
Iteration  11: 601.269 ns/op
Iteration  12: 600.762 ns/op
Iteration  13: 600.470 ns/op
Iteration  14: 602.725 ns/op
Iteration  15: 601.013 ns/op
Iteration  16: 600.532 ns/op
Iteration  17: 603.674 ns/op
Iteration  18: 605.642 ns/op
Iteration  19: 600.724 ns/op
Iteration  20: 600.404 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1022.679 ns/op
# Warmup Iteration   2: 672.792 ns/op
# Warmup Iteration   3: 608.203 ns/op
# Warmup Iteration   4: 611.045 ns/op
# Warmup Iteration   5: 632.119 ns/op
Iteration   1: 604.559 ns/op
Iteration   2: 603.633 ns/op
Iteration   3: 603.716 ns/op
Iteration   4: 606.250 ns/op
Iteration   5: 603.954 ns/op
Iteration   6: 603.972 ns/op
Iteration   7: 606.944 ns/op
Iteration   8: 606.269 ns/op
Iteration   9: 603.640 ns/op
Iteration  10: 605.200 ns/op
Iteration  11: 603.505 ns/op
Iteration  12: 602.195 ns/op
Iteration  13: 602.812 ns/op
Iteration  14: 605.207 ns/op
Iteration  15: 603.222 ns/op
Iteration  16: 602.307 ns/op
Iteration  17: 602.099 ns/op
Iteration  18: 605.828 ns/op
Iteration  19: 603.019 ns/op
Iteration  20: 603.384 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1036.109 ns/op
# Warmup Iteration   2: 690.859 ns/op
# Warmup Iteration   3: 623.522 ns/op
# Warmup Iteration   4: 625.387 ns/op
# Warmup Iteration   5: 643.158 ns/op
Iteration   1: 622.362 ns/op
Iteration   2: 618.236 ns/op
Iteration   3: 617.720 ns/op
Iteration   4: 618.049 ns/op
Iteration   5: 621.075 ns/op
Iteration   6: 618.331 ns/op
Iteration   7: 618.162 ns/op
Iteration   8: 618.387 ns/op
Iteration   9: 618.196 ns/op
Iteration  10: 621.226 ns/op
Iteration  11: 618.035 ns/op
Iteration  12: 617.939 ns/op
Iteration  13: 618.892 ns/op
Iteration  14: 617.646 ns/op
Iteration  15: 618.383 ns/op
Iteration  16: 618.487 ns/op
Iteration  17: 621.504 ns/op
Iteration  18: 618.519 ns/op
Iteration  19: 618.529 ns/op
Iteration  20: 617.194 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1050.805 ns/op
# Warmup Iteration   2: 709.507 ns/op
# Warmup Iteration   3: 634.186 ns/op
# Warmup Iteration   4: 637.559 ns/op
# Warmup Iteration   5: 641.306 ns/op
Iteration   1: 650.963 ns/op
Iteration   2: 633.149 ns/op
Iteration   3: 630.216 ns/op
Iteration   4: 629.524 ns/op
Iteration   5: 632.260 ns/op
Iteration   6: 629.893 ns/op
Iteration   7: 630.149 ns/op
Iteration   8: 630.306 ns/op
Iteration   9: 628.011 ns/op
Iteration  10: 629.306 ns/op
Iteration  11: 627.928 ns/op
Iteration  12: 627.992 ns/op
Iteration  13: 627.851 ns/op
Iteration  14: 628.772 ns/op
Iteration  15: 627.899 ns/op
Iteration  16: 628.088 ns/op
Iteration  17: 628.111 ns/op
Iteration  18: 627.667 ns/op
Iteration  19: 628.922 ns/op
Iteration  20: 627.928 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1093.818 ns/op
# Warmup Iteration   2: 699.873 ns/op
# Warmup Iteration   3: 618.409 ns/op
# Warmup Iteration   4: 620.649 ns/op
# Warmup Iteration   5: 633.997 ns/op
Iteration   1: 621.577 ns/op
Iteration   2: 613.967 ns/op
Iteration   3: 613.571 ns/op
Iteration   4: 615.692 ns/op
Iteration   5: 612.765 ns/op
Iteration   6: 612.885 ns/op
Iteration   7: 612.378 ns/op
Iteration   8: 616.545 ns/op
Iteration   9: 611.827 ns/op
Iteration  10: 611.860 ns/op
Iteration  11: 614.671 ns/op
Iteration  12: 614.201 ns/op
Iteration  13: 612.004 ns/op
Iteration  14: 611.923 ns/op
Iteration  15: 612.057 ns/op
Iteration  16: 614.390 ns/op
Iteration  17: 613.065 ns/op
Iteration  18: 611.463 ns/op
Iteration  19: 612.977 ns/op
Iteration  20: 614.942 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  613.748 ±(99.9%) 3.639 ns/op [Average]
  (min, avg, max) = (600.102, 613.748, 650.963), stdev = 10.730
  CI (99.9%): [610.109, 617.387] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
							

 	 	

	

	

  	 		
	


 	 

	 	
	
,   			 	
	

	  
 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1096.495 ns/op
# Warmup Iteration   2: 726.227 ns/op
# Warmup Iteration   3: 645.654 ns/op
# Warmup Iteration   4: 646.805 ns/op
# Warmup Iteration   5: 652.465 ns/op
Iteration   1: 660.628 ns/op
Iteration   2: 643.064 ns/op
Iteration   3: 638.665 ns/op
Iteration   4: 641.833 ns/op
Iteration   5: 644.720 ns/op
Iteration   6: 639.535 ns/op
Iteration   7: 639.374 ns/op
Iteration   8: 639.346 ns/op
Iteration   9: 637.246 ns/op
Iteration  10: 638.261 ns/op
Iteration  11: 641.043 ns/op
Iteration  12: 637.599 ns/op
Iteration  13: 637.269 ns/op
Iteration  14: 638.847 ns/op
Iteration  15: 637.814 ns/op
Iteration  16: 637.510 ns/op
Iteration  17: 637.680 ns/op
Iteration  18: 641.106 ns/op
Iteration  19: 640.122 ns/op
Iteration  20: 639.779 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1097.461 ns/op
# Warmup Iteration   2: 724.658 ns/op
# Warmup Iteration   3: 637.243 ns/op
# Warmup Iteration   4: 643.268 ns/op
# Warmup Iteration   5: 643.847 ns/op
Iteration   1: 655.284 ns/op
Iteration   2: 632.529 ns/op
Iteration   3: 632.656 ns/op
Iteration   4: 632.852 ns/op
Iteration   5: 637.779 ns/op
Iteration   6: 636.129 ns/op
Iteration   7: 632.909 ns/op
Iteration   8: 633.076 ns/op
Iteration   9: 634.104 ns/op
Iteration  10: 631.185 ns/op
Iteration  11: 630.974 ns/op
Iteration  12: 630.694 ns/op
Iteration  13: 631.870 ns/op
Iteration  14: 630.412 ns/op
Iteration  15: 630.548 ns/op
Iteration  16: 630.071 ns/op
Iteration  17: 632.723 ns/op
Iteration  18: 631.031 ns/op
Iteration  19: 632.409 ns/op
Iteration  20: 631.744 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1100.103 ns/op
# Warmup Iteration   2: 715.573 ns/op
# Warmup Iteration   3: 636.760 ns/op
# Warmup Iteration   4: 639.497 ns/op
# Warmup Iteration   5: 648.291 ns/op
Iteration   1: 643.810 ns/op
Iteration   2: 632.012 ns/op
Iteration   3: 632.094 ns/op
Iteration   4: 632.289 ns/op
Iteration   5: 634.560 ns/op
Iteration   6: 631.289 ns/op
Iteration   7: 632.041 ns/op
Iteration   8: 631.692 ns/op
Iteration   9: 631.120 ns/op
Iteration  10: 630.463 ns/op
Iteration  11: 630.253 ns/op
Iteration  12: 630.857 ns/op
Iteration  13: 632.349 ns/op
Iteration  14: 630.985 ns/op
Iteration  15: 636.882 ns/op
Iteration  16: 631.084 ns/op
Iteration  17: 633.740 ns/op
Iteration  18: 631.799 ns/op
Iteration  19: 631.478 ns/op
Iteration  20: 637.690 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1070.780 ns/op
# Warmup Iteration   2: 706.759 ns/op
# Warmup Iteration   3: 636.074 ns/op
# Warmup Iteration   4: 638.104 ns/op
# Warmup Iteration   5: 651.619 ns/op
Iteration   1: 637.366 ns/op
Iteration   2: 630.651 ns/op
Iteration   3: 630.227 ns/op
Iteration   4: 630.468 ns/op
Iteration   5: 633.092 ns/op
Iteration   6: 630.267 ns/op
Iteration   7: 630.355 ns/op
Iteration   8: 631.936 ns/op
Iteration   9: 633.733 ns/op
Iteration  10: 629.424 ns/op
Iteration  11: 629.466 ns/op
Iteration  12: 630.579 ns/op
Iteration  13: 629.224 ns/op
Iteration  14: 629.643 ns/op
Iteration  15: 630.604 ns/op
Iteration  16: 634.063 ns/op
Iteration  17: 631.331 ns/op
Iteration  18: 631.260 ns/op
Iteration  19: 630.979 ns/op
Iteration  20: 632.811 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1103.035 ns/op
# Warmup Iteration   2: 734.985 ns/op
# Warmup Iteration   3: 667.023 ns/op
# Warmup Iteration   4: 662.471 ns/op
# Warmup Iteration   5: 666.370 ns/op
Iteration   1: 670.502 ns/op
Iteration   2: 658.153 ns/op
Iteration   3: 654.776 ns/op
Iteration   4: 655.693 ns/op
Iteration   5: 655.121 ns/op
Iteration   6: 658.002 ns/op
Iteration   7: 655.062 ns/op
Iteration   8: 655.786 ns/op
Iteration   9: 653.809 ns/op
Iteration  10: 655.822 ns/op
Iteration  11: 654.686 ns/op
Iteration  12: 653.589 ns/op
Iteration  13: 653.501 ns/op
Iteration  14: 654.152 ns/op
Iteration  15: 655.204 ns/op
Iteration  16: 657.321 ns/op
Iteration  17: 654.519 ns/op
Iteration  18: 654.825 ns/op
Iteration  19: 655.788 ns/op
Iteration  20: 655.867 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  638.906 ±(99.9%) 3.407 ns/op [Average]
  (min, avg, max) = (629.224, 638.906, 670.502), stdev = 10.045
  CI (99.9%): [635.499, 642.312] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
							

 	 	

	

	

  	 		
	


 	 

	 	
	
,   			 	
	

	  
 
  avgt  100  613.748 ± 3.639  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
							

 	 	

	

	

  	 		
	


 	 

	 	
	
,   			 	
	

	  
 
  avgt  100  638.906 ± 3.407  ns/op

Benchmark result is saved to split_precompiled_regex_241_119_Match.csv
