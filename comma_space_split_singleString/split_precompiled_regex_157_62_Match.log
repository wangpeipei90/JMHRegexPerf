# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 


 	 
		


 	
,				 
  
	
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 926.551 ns/op
# Warmup Iteration   2: 539.461 ns/op
# Warmup Iteration   3: 515.026 ns/op
# Warmup Iteration   4: 511.609 ns/op
# Warmup Iteration   5: 517.430 ns/op
Iteration   1: 502.584 ns/op
Iteration   2: 505.075 ns/op
Iteration   3: 502.881 ns/op
Iteration   4: 504.965 ns/op
Iteration   5: 502.949 ns/op
Iteration   6: 503.731 ns/op
Iteration   7: 501.221 ns/op
Iteration   8: 501.689 ns/op
Iteration   9: 502.129 ns/op
Iteration  10: 501.102 ns/op
Iteration  11: 501.927 ns/op
Iteration  12: 501.201 ns/op
Iteration  13: 502.066 ns/op
Iteration  14: 501.553 ns/op
Iteration  15: 503.874 ns/op
Iteration  16: 501.953 ns/op
Iteration  17: 503.269 ns/op
Iteration  18: 501.935 ns/op
Iteration  19: 503.320 ns/op
Iteration  20: 501.766 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 934.252 ns/op
# Warmup Iteration   2: 554.232 ns/op
# Warmup Iteration   3: 527.236 ns/op
# Warmup Iteration   4: 523.459 ns/op
# Warmup Iteration   5: 536.260 ns/op
Iteration   1: 514.395 ns/op
Iteration   2: 516.798 ns/op
Iteration   3: 514.913 ns/op
Iteration   4: 517.196 ns/op
Iteration   5: 514.935 ns/op
Iteration   6: 515.252 ns/op
Iteration   7: 513.186 ns/op
Iteration   8: 514.085 ns/op
Iteration   9: 513.617 ns/op
Iteration  10: 514.413 ns/op
Iteration  11: 513.580 ns/op
Iteration  12: 515.234 ns/op
Iteration  13: 517.311 ns/op
Iteration  14: 515.547 ns/op
Iteration  15: 514.658 ns/op
Iteration  16: 517.810 ns/op
Iteration  17: 514.873 ns/op
Iteration  18: 517.625 ns/op
Iteration  19: 513.344 ns/op
Iteration  20: 516.664 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 936.905 ns/op
# Warmup Iteration   2: 563.402 ns/op
# Warmup Iteration   3: 535.269 ns/op
# Warmup Iteration   4: 530.608 ns/op
# Warmup Iteration   5: 533.063 ns/op
Iteration   1: 524.242 ns/op
Iteration   2: 521.530 ns/op
Iteration   3: 524.682 ns/op
Iteration   4: 521.807 ns/op
Iteration   5: 524.308 ns/op
Iteration   6: 521.539 ns/op
Iteration   7: 521.037 ns/op
Iteration   8: 520.026 ns/op
Iteration   9: 521.095 ns/op
Iteration  10: 520.187 ns/op
Iteration  11: 521.300 ns/op
Iteration  12: 520.507 ns/op
Iteration  13: 522.711 ns/op
Iteration  14: 520.553 ns/op
Iteration  15: 539.637 ns/op
Iteration  16: 525.321 ns/op
Iteration  17: 521.783 ns/op
Iteration  18: 520.194 ns/op
Iteration  19: 521.613 ns/op
Iteration  20: 520.367 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 937.006 ns/op
# Warmup Iteration   2: 556.235 ns/op
# Warmup Iteration   3: 528.734 ns/op
# Warmup Iteration   4: 523.700 ns/op
# Warmup Iteration   5: 529.701 ns/op
Iteration   1: 514.663 ns/op
Iteration   2: 517.339 ns/op
Iteration   3: 514.783 ns/op
Iteration   4: 517.725 ns/op
Iteration   5: 514.705 ns/op
Iteration   6: 515.977 ns/op
Iteration   7: 513.278 ns/op
Iteration   8: 514.285 ns/op
Iteration   9: 516.601 ns/op
Iteration  10: 514.842 ns/op
Iteration  11: 512.856 ns/op
Iteration  12: 516.638 ns/op
Iteration  13: 513.199 ns/op
Iteration  14: 515.700 ns/op
Iteration  15: 513.806 ns/op
Iteration  16: 515.341 ns/op
Iteration  17: 514.177 ns/op
Iteration  18: 533.930 ns/op
Iteration  19: 513.187 ns/op
Iteration  20: 519.416 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 938.195 ns/op
# Warmup Iteration   2: 560.564 ns/op
# Warmup Iteration   3: 533.068 ns/op
# Warmup Iteration   4: 529.664 ns/op
# Warmup Iteration   5: 536.652 ns/op
Iteration   1: 521.529 ns/op
Iteration   2: 521.334 ns/op
Iteration   3: 523.625 ns/op
Iteration   4: 520.681 ns/op
Iteration   5: 523.653 ns/op
Iteration   6: 520.807 ns/op
Iteration   7: 524.190 ns/op
Iteration   8: 519.339 ns/op
Iteration   9: 520.244 ns/op
Iteration  10: 519.411 ns/op
Iteration  11: 521.702 ns/op
Iteration  12: 519.382 ns/op
Iteration  13: 521.257 ns/op
Iteration  14: 519.804 ns/op
Iteration  15: 521.271 ns/op
Iteration  16: 519.385 ns/op
Iteration  17: 522.408 ns/op
Iteration  18: 519.784 ns/op
Iteration  19: 521.227 ns/op
Iteration  20: 520.526 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  515.551 ±(99.9%) 2.612 ns/op [Average]
  (min, avg, max) = (501.102, 515.551, 539.637), stdev = 7.701
  CI (99.9%): [512.939, 518.163] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 


 	 
		


 	
,				 
  
	
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 963.500 ns/op
# Warmup Iteration   2: 562.603 ns/op
# Warmup Iteration   3: 530.774 ns/op
# Warmup Iteration   4: 526.951 ns/op
# Warmup Iteration   5: 531.625 ns/op
Iteration   1: 517.450 ns/op
Iteration   2: 520.027 ns/op
Iteration   3: 517.477 ns/op
Iteration   4: 520.479 ns/op
Iteration   5: 517.585 ns/op
Iteration   6: 517.779 ns/op
Iteration   7: 515.184 ns/op
Iteration   8: 516.005 ns/op
Iteration   9: 515.291 ns/op
Iteration  10: 520.233 ns/op
Iteration  11: 517.703 ns/op
Iteration  12: 519.767 ns/op
Iteration  13: 514.959 ns/op
Iteration  14: 519.955 ns/op
Iteration  15: 516.372 ns/op
Iteration  16: 515.456 ns/op
Iteration  17: 516.459 ns/op
Iteration  18: 516.097 ns/op
Iteration  19: 523.852 ns/op
Iteration  20: 515.399 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 954.288 ns/op
# Warmup Iteration   2: 569.817 ns/op
# Warmup Iteration   3: 541.412 ns/op
# Warmup Iteration   4: 536.664 ns/op
# Warmup Iteration   5: 541.726 ns/op
Iteration   1: 527.005 ns/op
Iteration   2: 531.979 ns/op
Iteration   3: 526.819 ns/op
Iteration   4: 529.488 ns/op
Iteration   5: 526.743 ns/op
Iteration   6: 527.989 ns/op
Iteration   7: 525.654 ns/op
Iteration   8: 526.658 ns/op
Iteration   9: 525.818 ns/op
Iteration  10: 527.038 ns/op
Iteration  11: 525.913 ns/op
Iteration  12: 527.261 ns/op
Iteration  13: 525.433 ns/op
Iteration  14: 530.399 ns/op
Iteration  15: 528.943 ns/op
Iteration  16: 531.215 ns/op
Iteration  17: 526.127 ns/op
Iteration  18: 527.950 ns/op
Iteration  19: 525.959 ns/op
Iteration  20: 528.436 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 948.048 ns/op
# Warmup Iteration   2: 562.120 ns/op
# Warmup Iteration   3: 539.452 ns/op
# Warmup Iteration   4: 535.179 ns/op
# Warmup Iteration   5: 541.540 ns/op
Iteration   1: 526.346 ns/op
Iteration   2: 529.219 ns/op
Iteration   3: 526.294 ns/op
Iteration   4: 528.604 ns/op
Iteration   5: 526.006 ns/op
Iteration   6: 527.510 ns/op
Iteration   7: 524.569 ns/op
Iteration   8: 526.318 ns/op
Iteration   9: 524.730 ns/op
Iteration  10: 528.503 ns/op
Iteration  11: 525.778 ns/op
Iteration  12: 527.204 ns/op
Iteration  13: 525.176 ns/op
Iteration  14: 526.313 ns/op
Iteration  15: 524.749 ns/op
Iteration  16: 525.988 ns/op
Iteration  17: 525.424 ns/op
Iteration  18: 527.616 ns/op
Iteration  19: 525.792 ns/op
Iteration  20: 528.862 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 965.969 ns/op
# Warmup Iteration   2: 594.428 ns/op
# Warmup Iteration   3: 555.311 ns/op
# Warmup Iteration   4: 570.489 ns/op
# Warmup Iteration   5: 563.512 ns/op
Iteration   1: 554.319 ns/op
Iteration   2: 551.720 ns/op
Iteration   3: 555.558 ns/op
Iteration   4: 551.280 ns/op
Iteration   5: 551.671 ns/op
Iteration   6: 554.339 ns/op
Iteration   7: 550.950 ns/op
Iteration   8: 551.118 ns/op
Iteration   9: 549.870 ns/op
Iteration  10: 551.769 ns/op
Iteration  11: 549.934 ns/op
Iteration  12: 551.127 ns/op
Iteration  13: 549.255 ns/op
Iteration  14: 549.979 ns/op
Iteration  15: 552.484 ns/op
Iteration  16: 549.569 ns/op
Iteration  17: 551.026 ns/op
Iteration  18: 549.039 ns/op
Iteration  19: 550.784 ns/op
Iteration  20: 548.242 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 950.660 ns/op
# Warmup Iteration   2: 568.636 ns/op
# Warmup Iteration   3: 541.494 ns/op
# Warmup Iteration   4: 534.865 ns/op
# Warmup Iteration   5: 539.390 ns/op
Iteration   1: 524.939 ns/op
Iteration   2: 528.107 ns/op
Iteration   3: 524.454 ns/op
Iteration   4: 528.409 ns/op
Iteration   5: 525.157 ns/op
Iteration   6: 525.816 ns/op
Iteration   7: 523.606 ns/op
Iteration   8: 525.973 ns/op
Iteration   9: 526.017 ns/op
Iteration  10: 526.430 ns/op
Iteration  11: 523.229 ns/op
Iteration  12: 525.048 ns/op
Iteration  13: 525.649 ns/op
Iteration  14: 528.586 ns/op
Iteration  15: 525.226 ns/op
Iteration  16: 537.197 ns/op
Iteration  17: 524.760 ns/op
Iteration  18: 530.189 ns/op
Iteration  19: 524.605 ns/op
Iteration  20: 525.620 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  529.904 ±(99.9%) 3.899 ns/op [Average]
  (min, avg, max) = (514.959, 529.904, 555.558), stdev = 11.497
  CI (99.9%): [526.005, 533.803] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
 


 	 
		


 	
,				 
  
	
		  avgt  100  515.551 ± 2.612  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
 


 	 
		


 	
,				 
  
	
		  avgt  100  529.904 ± 3.899  ns/op

Benchmark result is saved to split_precompiled_regex_157_62_Match.csv
