# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   		
   
,	 		  		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 904.400 ns/op
# Warmup Iteration   2: 516.294 ns/op
# Warmup Iteration   3: 499.474 ns/op
# Warmup Iteration   4: 496.050 ns/op
# Warmup Iteration   5: 501.238 ns/op
Iteration   1: 489.139 ns/op
Iteration   2: 488.068 ns/op
Iteration   3: 489.722 ns/op
Iteration   4: 487.076 ns/op
Iteration   5: 489.714 ns/op
Iteration   6: 485.739 ns/op
Iteration   7: 486.238 ns/op
Iteration   8: 490.882 ns/op
Iteration   9: 486.485 ns/op
Iteration  10: 487.710 ns/op
Iteration  11: 486.153 ns/op
Iteration  12: 490.665 ns/op
Iteration  13: 486.988 ns/op
Iteration  14: 485.907 ns/op
Iteration  15: 487.617 ns/op
Iteration  16: 486.528 ns/op
Iteration  17: 488.299 ns/op
Iteration  18: 486.340 ns/op
Iteration  19: 488.140 ns/op
Iteration  20: 488.412 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 905.494 ns/op
# Warmup Iteration   2: 512.947 ns/op
# Warmup Iteration   3: 494.667 ns/op
# Warmup Iteration   4: 490.414 ns/op
# Warmup Iteration   5: 495.729 ns/op
Iteration   1: 484.644 ns/op
Iteration   2: 482.688 ns/op
Iteration   3: 485.325 ns/op
Iteration   4: 481.901 ns/op
Iteration   5: 484.823 ns/op
Iteration   6: 484.987 ns/op
Iteration   7: 480.636 ns/op
Iteration   8: 481.964 ns/op
Iteration   9: 480.380 ns/op
Iteration  10: 481.268 ns/op
Iteration  11: 482.168 ns/op
Iteration  12: 481.198 ns/op
Iteration  13: 483.989 ns/op
Iteration  14: 481.878 ns/op
Iteration  15: 484.324 ns/op
Iteration  16: 483.989 ns/op
Iteration  17: 481.333 ns/op
Iteration  18: 482.537 ns/op
Iteration  19: 481.733 ns/op
Iteration  20: 484.402 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 901.475 ns/op
# Warmup Iteration   2: 514.056 ns/op
# Warmup Iteration   3: 496.155 ns/op
# Warmup Iteration   4: 490.869 ns/op
# Warmup Iteration   5: 499.233 ns/op
Iteration   1: 484.103 ns/op
Iteration   2: 482.361 ns/op
Iteration   3: 484.491 ns/op
Iteration   4: 482.056 ns/op
Iteration   5: 484.591 ns/op
Iteration   6: 481.356 ns/op
Iteration   7: 480.421 ns/op
Iteration   8: 481.234 ns/op
Iteration   9: 480.337 ns/op
Iteration  10: 481.415 ns/op
Iteration  11: 482.156 ns/op
Iteration  12: 481.615 ns/op
Iteration  13: 482.488 ns/op
Iteration  14: 481.368 ns/op
Iteration  15: 482.877 ns/op
Iteration  16: 482.530 ns/op
Iteration  17: 481.027 ns/op
Iteration  18: 482.784 ns/op
Iteration  19: 481.224 ns/op
Iteration  20: 482.732 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 910.131 ns/op
# Warmup Iteration   2: 518.664 ns/op
# Warmup Iteration   3: 498.496 ns/op
# Warmup Iteration   4: 494.649 ns/op
# Warmup Iteration   5: 500.471 ns/op
Iteration   1: 488.436 ns/op
Iteration   2: 486.227 ns/op
Iteration   3: 488.769 ns/op
Iteration   4: 486.048 ns/op
Iteration   5: 488.777 ns/op
Iteration   6: 484.667 ns/op
Iteration   7: 485.404 ns/op
Iteration   8: 485.932 ns/op
Iteration   9: 484.843 ns/op
Iteration  10: 485.424 ns/op
Iteration  11: 485.009 ns/op
Iteration  12: 490.675 ns/op
Iteration  13: 486.928 ns/op
Iteration  14: 485.479 ns/op
Iteration  15: 487.338 ns/op
Iteration  16: 484.758 ns/op
Iteration  17: 487.987 ns/op
Iteration  18: 488.649 ns/op
Iteration  19: 485.952 ns/op
Iteration  20: 486.568 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 911.052 ns/op
# Warmup Iteration   2: 521.870 ns/op
# Warmup Iteration   3: 501.026 ns/op
# Warmup Iteration   4: 497.014 ns/op
# Warmup Iteration   5: 501.325 ns/op
Iteration   1: 489.021 ns/op
Iteration   2: 491.075 ns/op
Iteration   3: 491.039 ns/op
Iteration   4: 492.023 ns/op
Iteration   5: 492.379 ns/op
Iteration   6: 490.630 ns/op
Iteration   7: 488.220 ns/op
Iteration   8: 487.126 ns/op
Iteration   9: 487.918 ns/op
Iteration  10: 488.630 ns/op
Iteration  11: 487.277 ns/op
Iteration  12: 489.132 ns/op
Iteration  13: 488.377 ns/op
Iteration  14: 490.745 ns/op
Iteration  15: 490.592 ns/op
Iteration  16: 486.857 ns/op
Iteration  17: 488.550 ns/op
Iteration  18: 487.685 ns/op
Iteration  19: 489.128 ns/op
Iteration  20: 487.399 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  485.728 ±(99.9%) 1.078 ns/op [Average]
  (min, avg, max) = (480.337, 485.728, 492.379), stdev = 3.180
  CI (99.9%): [484.650, 486.807] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   		
   
,	 		  		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 929.997 ns/op
# Warmup Iteration   2: 528.649 ns/op
# Warmup Iteration   3: 514.894 ns/op
# Warmup Iteration   4: 507.095 ns/op
# Warmup Iteration   5: 514.484 ns/op
Iteration   1: 499.431 ns/op
Iteration   2: 497.382 ns/op
Iteration   3: 499.437 ns/op
Iteration   4: 497.136 ns/op
Iteration   5: 500.932 ns/op
Iteration   6: 496.698 ns/op
Iteration   7: 496.209 ns/op
Iteration   8: 496.508 ns/op
Iteration   9: 495.696 ns/op
Iteration  10: 496.812 ns/op
Iteration  11: 496.037 ns/op
Iteration  12: 497.028 ns/op
Iteration  13: 498.215 ns/op
Iteration  14: 496.758 ns/op
Iteration  15: 498.741 ns/op
Iteration  16: 497.094 ns/op
Iteration  17: 500.457 ns/op
Iteration  18: 500.337 ns/op
Iteration  19: 496.764 ns/op
Iteration  20: 499.462 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 964.814 ns/op
# Warmup Iteration   2: 536.496 ns/op
# Warmup Iteration   3: 512.674 ns/op
# Warmup Iteration   4: 508.331 ns/op
# Warmup Iteration   5: 513.860 ns/op
Iteration   1: 499.802 ns/op
Iteration   2: 501.715 ns/op
Iteration   3: 501.394 ns/op
Iteration   4: 499.018 ns/op
Iteration   5: 500.854 ns/op
Iteration   6: 497.693 ns/op
Iteration   7: 498.199 ns/op
Iteration   8: 498.622 ns/op
Iteration   9: 497.849 ns/op
Iteration  10: 499.630 ns/op
Iteration  11: 498.333 ns/op
Iteration  12: 500.017 ns/op
Iteration  13: 498.015 ns/op
Iteration  14: 499.562 ns/op
Iteration  15: 502.151 ns/op
Iteration  16: 499.299 ns/op
Iteration  17: 500.784 ns/op
Iteration  18: 498.328 ns/op
Iteration  19: 499.361 ns/op
Iteration  20: 499.977 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 928.500 ns/op
# Warmup Iteration   2: 527.095 ns/op
# Warmup Iteration   3: 506.886 ns/op
# Warmup Iteration   4: 502.180 ns/op
# Warmup Iteration   5: 507.799 ns/op
Iteration   1: 496.825 ns/op
Iteration   2: 494.629 ns/op
Iteration   3: 496.500 ns/op
Iteration   4: 494.265 ns/op
Iteration   5: 496.567 ns/op
Iteration   6: 494.033 ns/op
Iteration   7: 492.981 ns/op
Iteration   8: 494.349 ns/op
Iteration   9: 493.668 ns/op
Iteration  10: 495.010 ns/op
Iteration  11: 495.244 ns/op
Iteration  12: 494.007 ns/op
Iteration  13: 494.826 ns/op
Iteration  14: 493.628 ns/op
Iteration  15: 498.744 ns/op
Iteration  16: 495.164 ns/op
Iteration  17: 494.148 ns/op
Iteration  18: 500.268 ns/op
Iteration  19: 493.857 ns/op
Iteration  20: 498.008 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 930.782 ns/op
# Warmup Iteration   2: 543.184 ns/op
# Warmup Iteration   3: 524.538 ns/op
# Warmup Iteration   4: 520.455 ns/op
# Warmup Iteration   5: 526.235 ns/op
Iteration   1: 512.839 ns/op
Iteration   2: 515.668 ns/op
Iteration   3: 511.940 ns/op
Iteration   4: 514.322 ns/op
Iteration   5: 515.146 ns/op
Iteration   6: 510.804 ns/op
Iteration   7: 511.692 ns/op
Iteration   8: 510.838 ns/op
Iteration   9: 512.146 ns/op
Iteration  10: 511.060 ns/op
Iteration  11: 512.427 ns/op
Iteration  12: 511.897 ns/op
Iteration  13: 513.027 ns/op
Iteration  14: 511.763 ns/op
Iteration  15: 515.247 ns/op
Iteration  16: 511.598 ns/op
Iteration  17: 514.208 ns/op
Iteration  18: 515.516 ns/op
Iteration  19: 512.490 ns/op
Iteration  20: 515.647 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 943.706 ns/op
# Warmup Iteration   2: 534.536 ns/op
# Warmup Iteration   3: 508.054 ns/op
# Warmup Iteration   4: 504.416 ns/op
# Warmup Iteration   5: 510.052 ns/op
Iteration   1: 498.231 ns/op
Iteration   2: 496.334 ns/op
Iteration   3: 498.601 ns/op
Iteration   4: 496.299 ns/op
Iteration   5: 498.547 ns/op
Iteration   6: 494.513 ns/op
Iteration   7: 494.895 ns/op
Iteration   8: 495.297 ns/op
Iteration   9: 494.753 ns/op
Iteration  10: 496.033 ns/op
Iteration  11: 494.649 ns/op
Iteration  12: 495.872 ns/op
Iteration  13: 497.270 ns/op
Iteration  14: 495.176 ns/op
Iteration  15: 497.261 ns/op
Iteration  16: 495.929 ns/op
Iteration  17: 498.392 ns/op
Iteration  18: 497.226 ns/op
Iteration  19: 494.912 ns/op
Iteration  20: 496.061 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  500.410 ±(99.9%) 2.266 ns/op [Average]
  (min, avg, max) = (492.981, 500.410, 515.668), stdev = 6.680
  CI (99.9%): [498.144, 502.676] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    		
   
,	 		  		  avgt  100  485.728 ± 1.078  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    		
   
,	 		  		  avgt  100  500.410 ± 2.266  ns/op

Benchmark result is saved to split_precompiled_regex_247_51_Match.csv
