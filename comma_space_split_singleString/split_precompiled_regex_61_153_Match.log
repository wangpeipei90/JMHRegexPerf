# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		

	  

 ,	    		 		
  		 		 	 		

 	
				
 



	
	    		

	 


	 
 
 
 

 	 
		 
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1139.333 ns/op
# Warmup Iteration   2: 773.476 ns/op
# Warmup Iteration   3: 689.098 ns/op
# Warmup Iteration   4: 685.476 ns/op
# Warmup Iteration   5: 689.576 ns/op
Iteration   1: 693.444 ns/op
Iteration   2: 678.046 ns/op
Iteration   3: 678.027 ns/op
Iteration   4: 681.037 ns/op
Iteration   5: 677.612 ns/op
Iteration   6: 678.867 ns/op
Iteration   7: 677.916 ns/op
Iteration   8: 677.651 ns/op
Iteration   9: 677.599 ns/op
Iteration  10: 675.606 ns/op
Iteration  11: 676.635 ns/op
Iteration  12: 675.404 ns/op
Iteration  13: 677.510 ns/op
Iteration  14: 680.514 ns/op
Iteration  15: 675.131 ns/op
Iteration  16: 675.183 ns/op
Iteration  17: 675.356 ns/op
Iteration  18: 676.756 ns/op
Iteration  19: 675.480 ns/op
Iteration  20: 677.859 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1197.570 ns/op
# Warmup Iteration   2: 842.924 ns/op
# Warmup Iteration   3: 726.101 ns/op
# Warmup Iteration   4: 741.130 ns/op
# Warmup Iteration   5: 735.628 ns/op
Iteration   1: 739.993 ns/op
Iteration   2: 723.392 ns/op
Iteration   3: 723.394 ns/op
Iteration   4: 723.314 ns/op
Iteration   5: 723.071 ns/op
Iteration   6: 723.535 ns/op
Iteration   7: 723.349 ns/op
Iteration   8: 723.462 ns/op
Iteration   9: 723.116 ns/op
Iteration  10: 723.507 ns/op
Iteration  11: 721.484 ns/op
Iteration  12: 721.359 ns/op
Iteration  13: 722.410 ns/op
Iteration  14: 726.716 ns/op
Iteration  15: 721.999 ns/op
Iteration  16: 721.498 ns/op
Iteration  17: 721.637 ns/op
Iteration  18: 721.400 ns/op
Iteration  19: 721.723 ns/op
Iteration  20: 722.891 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1144.173 ns/op
# Warmup Iteration   2: 777.032 ns/op
# Warmup Iteration   3: 690.423 ns/op
# Warmup Iteration   4: 683.558 ns/op
# Warmup Iteration   5: 685.572 ns/op
Iteration   1: 688.221 ns/op
Iteration   2: 673.932 ns/op
Iteration   3: 672.894 ns/op
Iteration   4: 675.839 ns/op
Iteration   5: 673.022 ns/op
Iteration   6: 673.441 ns/op
Iteration   7: 673.290 ns/op
Iteration   8: 673.366 ns/op
Iteration   9: 673.669 ns/op
Iteration  10: 671.984 ns/op
Iteration  11: 672.933 ns/op
Iteration  12: 671.818 ns/op
Iteration  13: 671.680 ns/op
Iteration  14: 671.789 ns/op
Iteration  15: 672.058 ns/op
Iteration  16: 673.281 ns/op
Iteration  17: 672.970 ns/op
Iteration  18: 674.666 ns/op
Iteration  19: 672.304 ns/op
Iteration  20: 672.739 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1103.809 ns/op
# Warmup Iteration   2: 774.198 ns/op
# Warmup Iteration   3: 696.580 ns/op
# Warmup Iteration   4: 688.630 ns/op
# Warmup Iteration   5: 691.829 ns/op
Iteration   1: 697.041 ns/op
Iteration   2: 683.700 ns/op
Iteration   3: 680.262 ns/op
Iteration   4: 684.728 ns/op
Iteration   5: 679.484 ns/op
Iteration   6: 680.111 ns/op
Iteration   7: 680.317 ns/op
Iteration   8: 680.292 ns/op
Iteration   9: 680.538 ns/op
Iteration  10: 678.281 ns/op
Iteration  11: 678.110 ns/op
Iteration  12: 678.863 ns/op
Iteration  13: 678.970 ns/op
Iteration  14: 677.916 ns/op
Iteration  15: 677.941 ns/op
Iteration  16: 678.243 ns/op
Iteration  17: 677.832 ns/op
Iteration  18: 678.126 ns/op
Iteration  19: 680.105 ns/op
Iteration  20: 678.699 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1143.835 ns/op
# Warmup Iteration   2: 783.043 ns/op
# Warmup Iteration   3: 698.581 ns/op
# Warmup Iteration   4: 693.128 ns/op
# Warmup Iteration   5: 695.830 ns/op
Iteration   1: 700.472 ns/op
Iteration   2: 689.248 ns/op
Iteration   3: 684.650 ns/op
Iteration   4: 684.294 ns/op
Iteration   5: 687.869 ns/op
Iteration   6: 684.929 ns/op
Iteration   7: 686.106 ns/op
Iteration   8: 691.578 ns/op
Iteration   9: 685.394 ns/op
Iteration  10: 683.070 ns/op
Iteration  11: 687.893 ns/op
Iteration  12: 688.471 ns/op
Iteration  13: 684.324 ns/op
Iteration  14: 683.501 ns/op
Iteration  15: 684.100 ns/op
Iteration  16: 684.836 ns/op
Iteration  17: 683.697 ns/op
Iteration  18: 683.634 ns/op
Iteration  19: 683.368 ns/op
Iteration  20: 683.552 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  688.453 ±(99.9%) 6.297 ns/op [Average]
  (min, avg, max) = (671.680, 688.453, 739.993), stdev = 18.567
  CI (99.9%): [682.156, 694.750] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		

	  

 ,	    		 		
  		 		 	 		

 	
				
 



	
	    		

	 


	 
 
 
 

 	 
		 
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1107.599 ns/op
# Warmup Iteration   2: 768.337 ns/op
# Warmup Iteration   3: 694.278 ns/op
# Warmup Iteration   4: 690.828 ns/op
# Warmup Iteration   5: 693.043 ns/op
Iteration   1: 697.979 ns/op
Iteration   2: 681.708 ns/op
Iteration   3: 684.488 ns/op
Iteration   4: 681.986 ns/op
Iteration   5: 682.058 ns/op
Iteration   6: 681.104 ns/op
Iteration   7: 688.092 ns/op
Iteration   8: 681.592 ns/op
Iteration   9: 682.483 ns/op
Iteration  10: 679.074 ns/op
Iteration  11: 679.003 ns/op
Iteration  12: 679.109 ns/op
Iteration  13: 679.346 ns/op
Iteration  14: 685.387 ns/op
Iteration  15: 680.158 ns/op
Iteration  16: 683.372 ns/op
Iteration  17: 681.765 ns/op
Iteration  18: 681.750 ns/op
Iteration  19: 681.880 ns/op
Iteration  20: 682.087 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1177.478 ns/op
# Warmup Iteration   2: 857.781 ns/op
# Warmup Iteration   3: 749.459 ns/op
# Warmup Iteration   4: 763.746 ns/op
# Warmup Iteration   5: 757.954 ns/op
Iteration   1: 763.123 ns/op
Iteration   2: 746.587 ns/op
Iteration   3: 745.157 ns/op
Iteration   4: 745.661 ns/op
Iteration   5: 746.863 ns/op
Iteration   6: 744.623 ns/op
Iteration   7: 744.929 ns/op
Iteration   8: 745.520 ns/op
Iteration   9: 745.736 ns/op
Iteration  10: 749.619 ns/op
Iteration  11: 747.023 ns/op
Iteration  12: 743.518 ns/op
Iteration  13: 743.615 ns/op
Iteration  14: 744.934 ns/op
Iteration  15: 743.324 ns/op
Iteration  16: 743.120 ns/op
Iteration  17: 743.446 ns/op
Iteration  18: 743.386 ns/op
Iteration  19: 743.755 ns/op
Iteration  20: 743.705 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1110.574 ns/op
# Warmup Iteration   2: 781.059 ns/op
# Warmup Iteration   3: 705.915 ns/op
# Warmup Iteration   4: 701.551 ns/op
# Warmup Iteration   5: 705.087 ns/op
Iteration   1: 708.890 ns/op
Iteration   2: 692.937 ns/op
Iteration   3: 693.371 ns/op
Iteration   4: 696.108 ns/op
Iteration   5: 692.827 ns/op
Iteration   6: 692.855 ns/op
Iteration   7: 693.097 ns/op
Iteration   8: 692.691 ns/op
Iteration   9: 692.796 ns/op
Iteration  10: 691.347 ns/op
Iteration  11: 694.184 ns/op
Iteration  12: 690.922 ns/op
Iteration  13: 690.947 ns/op
Iteration  14: 691.227 ns/op
Iteration  15: 696.812 ns/op
Iteration  16: 694.391 ns/op
Iteration  17: 693.973 ns/op
Iteration  18: 694.319 ns/op
Iteration  19: 691.281 ns/op
Iteration  20: 691.135 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1187.231 ns/op
# Warmup Iteration   2: 877.455 ns/op
# Warmup Iteration   3: 763.921 ns/op
# Warmup Iteration   4: 778.832 ns/op
# Warmup Iteration   5: 773.765 ns/op
Iteration   1: 778.390 ns/op
Iteration   2: 761.644 ns/op
Iteration   3: 760.985 ns/op
Iteration   4: 760.711 ns/op
Iteration   5: 760.717 ns/op
Iteration   6: 760.578 ns/op
Iteration   7: 760.286 ns/op
Iteration   8: 760.603 ns/op
Iteration   9: 759.366 ns/op
Iteration  10: 761.475 ns/op
Iteration  11: 764.426 ns/op
Iteration  12: 757.925 ns/op
Iteration  13: 758.323 ns/op
Iteration  14: 757.971 ns/op
Iteration  15: 758.131 ns/op
Iteration  16: 758.506 ns/op
Iteration  17: 758.095 ns/op
Iteration  18: 759.051 ns/op
Iteration  19: 760.512 ns/op
Iteration  20: 760.476 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1173.287 ns/op
# Warmup Iteration   2: 805.408 ns/op
# Warmup Iteration   3: 717.020 ns/op
# Warmup Iteration   4: 713.172 ns/op
# Warmup Iteration   5: 716.360 ns/op
Iteration   1: 720.688 ns/op
Iteration   2: 705.265 ns/op
Iteration   3: 704.606 ns/op
Iteration   4: 704.746 ns/op
Iteration   5: 708.918 ns/op
Iteration   6: 704.101 ns/op
Iteration   7: 704.414 ns/op
Iteration   8: 704.206 ns/op
Iteration   9: 704.907 ns/op
Iteration  10: 703.530 ns/op
Iteration  11: 702.699 ns/op
Iteration  12: 702.968 ns/op
Iteration  13: 703.991 ns/op
Iteration  14: 701.949 ns/op
Iteration  15: 702.954 ns/op
Iteration  16: 703.378 ns/op
Iteration  17: 702.919 ns/op
Iteration  18: 703.886 ns/op
Iteration  19: 702.865 ns/op
Iteration  20: 703.419 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  717.628 ±(99.9%) 10.456 ns/op [Average]
  (min, avg, max) = (679.003, 717.628, 778.390), stdev = 30.830
  CI (99.9%): [707.171, 728.084] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                  (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		

	  

 ,	    		 		
  		 		 	 		

 	
				
 



	
	    		

	 


	 
 
 
 

 	 
		 
	  avgt  100  688.453 ±  6.297  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		

	  

 ,	    		 		
  		 		 	 		

 	
				
 



	
	    		

	 


	 
 
 
 

 	 
		 
	  avgt  100  717.628 ± 10.456  ns/op

Benchmark result is saved to split_precompiled_regex_61_153_Match.csv
