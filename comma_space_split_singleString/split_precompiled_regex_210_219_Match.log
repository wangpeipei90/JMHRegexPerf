# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
		 	 


		 
	  
	


	 

 
,  	


	  
 

 


		   
		
	
	
	 		  		  

		
 

 
 			
		

	 
	  
 		    	
 
	 	 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1335.321 ns/op
# Warmup Iteration   2: 1077.961 ns/op
# Warmup Iteration   3: 882.297 ns/op
# Warmup Iteration   4: 885.138 ns/op
# Warmup Iteration   5: 889.095 ns/op
Iteration   1: 893.246 ns/op
Iteration   2: 898.988 ns/op
Iteration   3: 874.748 ns/op
Iteration   4: 879.694 ns/op
Iteration   5: 879.238 ns/op
Iteration   6: 878.831 ns/op
Iteration   7: 880.956 ns/op
Iteration   8: 886.589 ns/op
Iteration   9: 890.600 ns/op
Iteration  10: 887.616 ns/op
Iteration  11: 883.433 ns/op
Iteration  12: 878.078 ns/op
Iteration  13: 884.765 ns/op
Iteration  14: 878.592 ns/op
Iteration  15: 877.409 ns/op
Iteration  16: 877.500 ns/op
Iteration  17: 884.757 ns/op
Iteration  18: 881.798 ns/op
Iteration  19: 880.847 ns/op
Iteration  20: 875.378 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1244.979 ns/op
# Warmup Iteration   2: 925.954 ns/op
# Warmup Iteration   3: 786.736 ns/op
# Warmup Iteration   4: 789.411 ns/op
# Warmup Iteration   5: 792.186 ns/op
Iteration   1: 795.461 ns/op
Iteration   2: 800.601 ns/op
Iteration   3: 782.039 ns/op
Iteration   4: 782.351 ns/op
Iteration   5: 782.428 ns/op
Iteration   6: 782.206 ns/op
Iteration   7: 782.701 ns/op
Iteration   8: 792.062 ns/op
Iteration   9: 784.105 ns/op
Iteration  10: 785.469 ns/op
Iteration  11: 784.876 ns/op
Iteration  12: 789.013 ns/op
Iteration  13: 782.796 ns/op
Iteration  14: 782.532 ns/op
Iteration  15: 781.717 ns/op
Iteration  16: 782.371 ns/op
Iteration  17: 783.657 ns/op
Iteration  18: 785.436 ns/op
Iteration  19: 781.664 ns/op
Iteration  20: 783.091 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1342.930 ns/op
# Warmup Iteration   2: 1068.312 ns/op
# Warmup Iteration   3: 886.598 ns/op
# Warmup Iteration   4: 885.863 ns/op
# Warmup Iteration   5: 884.576 ns/op
Iteration   1: 889.446 ns/op
Iteration   2: 898.423 ns/op
Iteration   3: 869.515 ns/op
Iteration   4: 873.230 ns/op
Iteration   5: 873.510 ns/op
Iteration   6: 873.781 ns/op
Iteration   7: 873.646 ns/op
Iteration   8: 873.528 ns/op
Iteration   9: 873.671 ns/op
Iteration  10: 874.510 ns/op
Iteration  11: 877.646 ns/op
Iteration  12: 869.395 ns/op
Iteration  13: 895.436 ns/op
Iteration  14: 873.058 ns/op
Iteration  15: 871.670 ns/op
Iteration  16: 871.981 ns/op
Iteration  17: 871.405 ns/op
Iteration  18: 874.428 ns/op
Iteration  19: 875.675 ns/op
Iteration  20: 869.093 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1337.868 ns/op
# Warmup Iteration   2: 1059.801 ns/op
# Warmup Iteration   3: 876.690 ns/op
# Warmup Iteration   4: 879.624 ns/op
# Warmup Iteration   5: 882.966 ns/op
Iteration   1: 887.968 ns/op
Iteration   2: 893.867 ns/op
Iteration   3: 874.947 ns/op
Iteration   4: 868.531 ns/op
Iteration   5: 872.919 ns/op
Iteration   6: 872.896 ns/op
Iteration   7: 873.107 ns/op
Iteration   8: 873.052 ns/op
Iteration   9: 873.676 ns/op
Iteration  10: 875.919 ns/op
Iteration  11: 875.931 ns/op
Iteration  12: 877.882 ns/op
Iteration  13: 868.700 ns/op
Iteration  14: 870.792 ns/op
Iteration  15: 872.850 ns/op
Iteration  16: 871.468 ns/op
Iteration  17: 871.370 ns/op
Iteration  18: 871.616 ns/op
Iteration  19: 871.081 ns/op
Iteration  20: 873.869 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1249.466 ns/op
# Warmup Iteration   2: 935.322 ns/op
# Warmup Iteration   3: 786.897 ns/op
# Warmup Iteration   4: 788.536 ns/op
# Warmup Iteration   5: 792.851 ns/op
Iteration   1: 796.802 ns/op
Iteration   2: 800.525 ns/op
Iteration   3: 782.486 ns/op
Iteration   4: 782.237 ns/op
Iteration   5: 782.253 ns/op
Iteration   6: 782.299 ns/op
Iteration   7: 782.024 ns/op
Iteration   8: 782.183 ns/op
Iteration   9: 785.731 ns/op
Iteration  10: 783.981 ns/op
Iteration  11: 783.219 ns/op
Iteration  12: 788.311 ns/op
Iteration  13: 780.451 ns/op
Iteration  14: 780.125 ns/op
Iteration  15: 781.768 ns/op
Iteration  16: 781.400 ns/op
Iteration  17: 782.326 ns/op
Iteration  18: 781.296 ns/op
Iteration  19: 781.916 ns/op
Iteration  20: 782.504 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  840.590 Â±(99.9%) 15.706 ns/op [Average]
  (min, avg, max) = (780.125, 840.590, 898.988), stdev = 46.310
  CI (99.9%): [824.883, 856.296] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
		 	 


		 
	  
	


	 

 
,  	


	  
 

 


		   
		
	
	
	 		  		  

		
 

 
 			
		

	 
	  
 		    	
 
	 	 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1342.581 ns/op
# Warmup Iteration   2: 1077.731 ns/op
# Warmup Iteration   3: 898.657 ns/op
# Warmup Iteration   4: 908.494 ns/op
# Warmup Iteration   5: 905.043 ns/op
Iteration   1: 909.362 ns/op
Iteration   2: 917.202 ns/op
Iteration   3: 898.553 ns/op
Iteration   4: 889.855 ns/op
Iteration   5: 893.478 ns/op
Iteration   6: 894.259 ns/op
Iteration   7: 897.892 ns/op
Iteration   8: 893.826 ns/op
Iteration   9: 894.000 ns/op
Iteration  10: 892.935 ns/op
Iteration  11: 894.659 ns/op
Iteration  12: 889.264 ns/op
Iteration  13: 894.612 ns/op
Iteration  14: 891.023 ns/op
Iteration  15: 892.320 ns/op
Iteration  16: 890.961 ns/op
Iteration  17: 891.297 ns/op
Iteration  18: 892.029 ns/op
Iteration  19: 892.521 ns/op
Iteration  20: 893.716 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1342.997 ns/op
# Warmup Iteration   2: 1073.785 ns/op
# Warmup Iteration   3: 894.394 ns/op
# Warmup Iteration   4: 896.625 ns/op
# Warmup Iteration   5: 901.467 ns/op
Iteration   1: 904.741 ns/op
Iteration   2: 910.412 ns/op
Iteration   3: 890.127 ns/op
Iteration   4: 885.569 ns/op
Iteration   5: 889.140 ns/op
Iteration   6: 889.696 ns/op
Iteration   7: 889.391 ns/op
Iteration   8: 894.748 ns/op
Iteration   9: 889.672 ns/op
Iteration  10: 889.578 ns/op
Iteration  11: 890.329 ns/op
Iteration  12: 890.905 ns/op
Iteration  13: 885.577 ns/op
Iteration  14: 887.034 ns/op
Iteration  15: 889.052 ns/op
Iteration  16: 887.307 ns/op
Iteration  17: 887.199 ns/op
Iteration  18: 888.350 ns/op
Iteration  19: 888.202 ns/op
Iteration  20: 889.566 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1341.598 ns/op
# Warmup Iteration   2: 1076.470 ns/op
# Warmup Iteration   3: 897.951 ns/op
# Warmup Iteration   4: 899.801 ns/op
# Warmup Iteration   5: 903.422 ns/op
Iteration   1: 908.317 ns/op
Iteration   2: 913.564 ns/op
Iteration   3: 893.581 ns/op
Iteration   4: 888.439 ns/op
Iteration   5: 893.279 ns/op
Iteration   6: 893.600 ns/op
Iteration   7: 901.323 ns/op
Iteration   8: 894.478 ns/op
Iteration   9: 896.067 ns/op
Iteration  10: 894.496 ns/op
Iteration  11: 895.580 ns/op
Iteration  12: 894.287 ns/op
Iteration  13: 895.353 ns/op
Iteration  14: 891.754 ns/op
Iteration  15: 891.155 ns/op
Iteration  16: 891.611 ns/op
Iteration  17: 894.139 ns/op
Iteration  18: 894.673 ns/op
Iteration  19: 893.490 ns/op
Iteration  20: 893.102 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1340.188 ns/op
# Warmup Iteration   2: 1089.457 ns/op
# Warmup Iteration   3: 907.135 ns/op
# Warmup Iteration   4: 909.739 ns/op
# Warmup Iteration   5: 912.831 ns/op
Iteration   1: 917.768 ns/op
Iteration   2: 929.107 ns/op
Iteration   3: 899.560 ns/op
Iteration   4: 903.948 ns/op
Iteration   5: 911.784 ns/op
Iteration   6: 903.812 ns/op
Iteration   7: 903.454 ns/op
Iteration   8: 909.240 ns/op
Iteration   9: 903.429 ns/op
Iteration  10: 903.063 ns/op
Iteration  11: 898.914 ns/op
Iteration  12: 915.632 ns/op
Iteration  13: 911.265 ns/op
Iteration  14: 901.052 ns/op
Iteration  15: 902.523 ns/op
Iteration  16: 900.507 ns/op
Iteration  17: 902.782 ns/op
Iteration  18: 902.563 ns/op
Iteration  19: 899.112 ns/op
Iteration  20: 901.624 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1321.163 ns/op
# Warmup Iteration   2: 1050.390 ns/op
# Warmup Iteration   3: 872.064 ns/op
# Warmup Iteration   4: 873.979 ns/op
# Warmup Iteration   5: 878.244 ns/op
Iteration   1: 882.641 ns/op
Iteration   2: 888.603 ns/op
Iteration   3: 868.131 ns/op
Iteration   4: 868.157 ns/op
Iteration   5: 867.710 ns/op
Iteration   6: 864.267 ns/op
Iteration   7: 867.293 ns/op
Iteration   8: 868.491 ns/op
Iteration   9: 867.915 ns/op
Iteration  10: 867.600 ns/op
Iteration  11: 867.980 ns/op
Iteration  12: 872.462 ns/op
Iteration  13: 867.446 ns/op
Iteration  14: 865.826 ns/op
Iteration  15: 865.929 ns/op
Iteration  16: 868.026 ns/op
Iteration  17: 863.860 ns/op
Iteration  18: 868.096 ns/op
Iteration  19: 867.872 ns/op
Iteration  20: 868.315 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  891.404 Â±(99.9%) 4.660 ns/op [Average]
  (min, avg, max) = (863.860, 891.404, 929.107), stdev = 13.740
  CI (99.9%): [886.744, 896.064] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                    (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 
		 	 


		 
	  
	


	 

 
,  	


	  
 

 


		   
		
	
	
	 		  		  

		
 

 
 			
		

	 
	  
 		    	
 
	 	 
  avgt  100  840.590 Â± 15.706  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 
		 	 


		 
	  
	


	 

 
,  	


	  
 

 


		   
		
	
	
	 		  		  

		
 

 
 			
		

	 
	  
 		    	
 
	 	 
  avgt  100  891.404 Â±  4.660  ns/op

Benchmark result is saved to split_precompiled_regex_210_219_Match.csv
