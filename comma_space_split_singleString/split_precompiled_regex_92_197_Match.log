# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		 
	
   
 	 	
	



	, 	  
	   	    	


		
  
     				
 	  	

	 
 	 

			 		  		


 	
 
  
	   		 
	 	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1157.591 ns/op
# Warmup Iteration   2: 850.477 ns/op
# Warmup Iteration   3: 737.470 ns/op
# Warmup Iteration   4: 753.045 ns/op
# Warmup Iteration   5: 751.659 ns/op
Iteration   1: 749.456 ns/op
Iteration   2: 733.416 ns/op
Iteration   3: 732.690 ns/op
Iteration   4: 732.658 ns/op
Iteration   5: 733.075 ns/op
Iteration   6: 733.132 ns/op
Iteration   7: 733.310 ns/op
Iteration   8: 733.080 ns/op
Iteration   9: 732.832 ns/op
Iteration  10: 733.567 ns/op
Iteration  11: 731.236 ns/op
Iteration  12: 730.821 ns/op
Iteration  13: 731.135 ns/op
Iteration  14: 730.318 ns/op
Iteration  15: 730.334 ns/op
Iteration  16: 730.825 ns/op
Iteration  17: 733.241 ns/op
Iteration  18: 731.843 ns/op
Iteration  19: 731.682 ns/op
Iteration  20: 732.721 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1161.137 ns/op
# Warmup Iteration   2: 854.544 ns/op
# Warmup Iteration   3: 738.632 ns/op
# Warmup Iteration   4: 757.208 ns/op
# Warmup Iteration   5: 749.113 ns/op
Iteration   1: 753.081 ns/op
Iteration   2: 735.637 ns/op
Iteration   3: 735.555 ns/op
Iteration   4: 735.270 ns/op
Iteration   5: 735.511 ns/op
Iteration   6: 735.341 ns/op
Iteration   7: 735.627 ns/op
Iteration   8: 735.162 ns/op
Iteration   9: 735.548 ns/op
Iteration  10: 735.365 ns/op
Iteration  11: 733.328 ns/op
Iteration  12: 733.179 ns/op
Iteration  13: 733.355 ns/op
Iteration  14: 733.726 ns/op
Iteration  15: 733.609 ns/op
Iteration  16: 733.221 ns/op
Iteration  17: 733.506 ns/op
Iteration  18: 740.157 ns/op
Iteration  19: 733.364 ns/op
Iteration  20: 733.851 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1154.718 ns/op
# Warmup Iteration   2: 852.881 ns/op
# Warmup Iteration   3: 738.045 ns/op
# Warmup Iteration   4: 752.998 ns/op
# Warmup Iteration   5: 747.421 ns/op
Iteration   1: 752.128 ns/op
Iteration   2: 734.957 ns/op
Iteration   3: 734.831 ns/op
Iteration   4: 734.666 ns/op
Iteration   5: 734.995 ns/op
Iteration   6: 735.377 ns/op
Iteration   7: 735.624 ns/op
Iteration   8: 734.741 ns/op
Iteration   9: 734.982 ns/op
Iteration  10: 734.717 ns/op
Iteration  11: 734.236 ns/op
Iteration  12: 732.936 ns/op
Iteration  13: 732.630 ns/op
Iteration  14: 733.065 ns/op
Iteration  15: 732.961 ns/op
Iteration  16: 733.057 ns/op
Iteration  17: 732.986 ns/op
Iteration  18: 735.591 ns/op
Iteration  19: 733.259 ns/op
Iteration  20: 733.439 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1172.615 ns/op
# Warmup Iteration   2: 862.296 ns/op
# Warmup Iteration   3: 737.307 ns/op
# Warmup Iteration   4: 751.984 ns/op
# Warmup Iteration   5: 746.995 ns/op
Iteration   1: 752.063 ns/op
Iteration   2: 733.747 ns/op
Iteration   3: 733.456 ns/op
Iteration   4: 733.814 ns/op
Iteration   5: 733.666 ns/op
Iteration   6: 733.934 ns/op
Iteration   7: 733.693 ns/op
Iteration   8: 733.368 ns/op
Iteration   9: 735.275 ns/op
Iteration  10: 737.415 ns/op
Iteration  11: 731.937 ns/op
Iteration  12: 732.647 ns/op
Iteration  13: 732.103 ns/op
Iteration  14: 732.553 ns/op
Iteration  15: 738.607 ns/op
Iteration  16: 732.585 ns/op
Iteration  17: 732.071 ns/op
Iteration  18: 734.953 ns/op
Iteration  19: 732.885 ns/op
Iteration  20: 732.798 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1152.994 ns/op
# Warmup Iteration   2: 847.673 ns/op
# Warmup Iteration   3: 736.766 ns/op
# Warmup Iteration   4: 752.072 ns/op
# Warmup Iteration   5: 746.543 ns/op
Iteration   1: 751.104 ns/op
Iteration   2: 734.106 ns/op
Iteration   3: 733.681 ns/op
Iteration   4: 733.590 ns/op
Iteration   5: 734.135 ns/op
Iteration   6: 733.354 ns/op
Iteration   7: 733.345 ns/op
Iteration   8: 733.849 ns/op
Iteration   9: 733.550 ns/op
Iteration  10: 733.713 ns/op
Iteration  11: 732.898 ns/op
Iteration  12: 730.755 ns/op
Iteration  13: 730.238 ns/op
Iteration  14: 734.115 ns/op
Iteration  15: 733.555 ns/op
Iteration  16: 732.909 ns/op
Iteration  17: 732.841 ns/op
Iteration  18: 731.288 ns/op
Iteration  19: 732.469 ns/op
Iteration  20: 733.072 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  734.481 Â±(99.9%) 1.441 ns/op [Average]
  (min, avg, max) = (730.238, 734.481, 753.081), stdev = 4.250
  CI (99.9%): [733.039, 735.922] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		 
	
   
 	 	
	



	, 	  
	   	    	


		
  
     				
 	  	

	 
 	 

			 		  		


 	
 
  
	   		 
	 	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1255.470 ns/op
# Warmup Iteration   2: 986.535 ns/op
# Warmup Iteration   3: 834.241 ns/op
# Warmup Iteration   4: 836.856 ns/op
# Warmup Iteration   5: 842.669 ns/op
Iteration   1: 847.674 ns/op
Iteration   2: 845.062 ns/op
Iteration   3: 837.390 ns/op
Iteration   4: 830.802 ns/op
Iteration   5: 835.466 ns/op
Iteration   6: 830.894 ns/op
Iteration   7: 835.779 ns/op
Iteration   8: 833.047 ns/op
Iteration   9: 831.025 ns/op
Iteration  10: 830.761 ns/op
Iteration  11: 832.316 ns/op
Iteration  12: 829.428 ns/op
Iteration  13: 826.487 ns/op
Iteration  14: 833.363 ns/op
Iteration  15: 827.951 ns/op
Iteration  16: 828.290 ns/op
Iteration  17: 829.010 ns/op
Iteration  18: 830.469 ns/op
Iteration  19: 838.633 ns/op
Iteration  20: 831.185 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1206.980 ns/op
# Warmup Iteration   2: 887.441 ns/op
# Warmup Iteration   3: 766.056 ns/op
# Warmup Iteration   4: 770.007 ns/op
# Warmup Iteration   5: 785.309 ns/op
Iteration   1: 778.865 ns/op
Iteration   2: 761.822 ns/op
Iteration   3: 761.920 ns/op
Iteration   4: 762.013 ns/op
Iteration   5: 763.033 ns/op
Iteration   6: 762.341 ns/op
Iteration   7: 762.149 ns/op
Iteration   8: 761.478 ns/op
Iteration   9: 762.266 ns/op
Iteration  10: 762.791 ns/op
Iteration  11: 760.284 ns/op
Iteration  12: 760.050 ns/op
Iteration  13: 759.991 ns/op
Iteration  14: 759.776 ns/op
Iteration  15: 762.999 ns/op
Iteration  16: 771.179 ns/op
Iteration  17: 764.453 ns/op
Iteration  18: 760.696 ns/op
Iteration  19: 761.493 ns/op
Iteration  20: 759.820 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1217.612 ns/op
# Warmup Iteration   2: 896.206 ns/op
# Warmup Iteration   3: 771.910 ns/op
# Warmup Iteration   4: 774.403 ns/op
# Warmup Iteration   5: 796.213 ns/op
Iteration   1: 788.245 ns/op
Iteration   2: 769.915 ns/op
Iteration   3: 769.517 ns/op
Iteration   4: 769.799 ns/op
Iteration   5: 767.526 ns/op
Iteration   6: 766.711 ns/op
Iteration   7: 768.534 ns/op
Iteration   8: 770.155 ns/op
Iteration   9: 767.119 ns/op
Iteration  10: 767.200 ns/op
Iteration  11: 765.585 ns/op
Iteration  12: 764.725 ns/op
Iteration  13: 765.566 ns/op
Iteration  14: 764.214 ns/op
Iteration  15: 765.456 ns/op
Iteration  16: 767.706 ns/op
Iteration  17: 772.290 ns/op
Iteration  18: 773.040 ns/op
Iteration  19: 765.384 ns/op
Iteration  20: 775.912 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1228.866 ns/op
# Warmup Iteration   2: 889.634 ns/op
# Warmup Iteration   3: 757.687 ns/op
# Warmup Iteration   4: 765.835 ns/op
# Warmup Iteration   5: 772.093 ns/op
Iteration   1: 773.756 ns/op
Iteration   2: 752.661 ns/op
Iteration   3: 759.023 ns/op
Iteration   4: 752.925 ns/op
Iteration   5: 752.492 ns/op
Iteration   6: 752.578 ns/op
Iteration   7: 752.024 ns/op
Iteration   8: 752.426 ns/op
Iteration   9: 752.666 ns/op
Iteration  10: 758.460 ns/op
Iteration  11: 753.700 ns/op
Iteration  12: 750.212 ns/op
Iteration  13: 750.379 ns/op
Iteration  14: 750.424 ns/op
Iteration  15: 751.158 ns/op
Iteration  16: 750.554 ns/op
Iteration  17: 750.652 ns/op
Iteration  18: 751.758 ns/op
Iteration  19: 752.989 ns/op
Iteration  20: 751.090 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1185.421 ns/op
# Warmup Iteration   2: 885.139 ns/op
# Warmup Iteration   3: 772.734 ns/op
# Warmup Iteration   4: 779.693 ns/op
# Warmup Iteration   5: 787.579 ns/op
Iteration   1: 784.799 ns/op
Iteration   2: 767.251 ns/op
Iteration   3: 767.045 ns/op
Iteration   4: 767.499 ns/op
Iteration   5: 766.843 ns/op
Iteration   6: 766.677 ns/op
Iteration   7: 767.035 ns/op
Iteration   8: 767.758 ns/op
Iteration   9: 766.002 ns/op
Iteration  10: 766.668 ns/op
Iteration  11: 763.674 ns/op
Iteration  12: 769.502 ns/op
Iteration  13: 763.686 ns/op
Iteration  14: 763.582 ns/op
Iteration  15: 763.725 ns/op
Iteration  16: 763.902 ns/op
Iteration  17: 763.754 ns/op
Iteration  18: 764.682 ns/op
Iteration  19: 763.712 ns/op
Iteration  20: 763.689 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  777.125 Â±(99.9%) 9.880 ns/op [Average]
  (min, avg, max) = (750.212, 777.125, 847.674), stdev = 29.130
  CI (99.9%): [767.245, 787.004] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		 
	
   
 	 	
	



	, 	  
	   	    	


		
  
     				
 	  	

	 
 	 

			 		  		


 	
 
  
	   		 
	 	   avgt  100  734.481 Â± 1.441  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		 
	
   
 	 	
	



	, 	  
	   	    	


		
  
     				
 	  	

	 
 	 

			 		  		


 	
 
  
	   		 
	 	   avgt  100  777.125 Â± 9.880  ns/op

Benchmark result is saved to split_precompiled_regex_92_197_Match.csv
