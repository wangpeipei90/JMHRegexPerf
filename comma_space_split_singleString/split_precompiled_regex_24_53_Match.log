# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  


 	,
				 


	    	
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 902.816 ns/op
# Warmup Iteration   2: 521.370 ns/op
# Warmup Iteration   3: 499.836 ns/op
# Warmup Iteration   4: 497.647 ns/op
# Warmup Iteration   5: 500.589 ns/op
Iteration   1: 487.729 ns/op
Iteration   2: 490.253 ns/op
Iteration   3: 490.371 ns/op
Iteration   4: 487.508 ns/op
Iteration   5: 490.443 ns/op
Iteration   6: 485.802 ns/op
Iteration   7: 486.326 ns/op
Iteration   8: 487.511 ns/op
Iteration   9: 485.538 ns/op
Iteration  10: 486.968 ns/op
Iteration  11: 485.297 ns/op
Iteration  12: 485.836 ns/op
Iteration  13: 485.704 ns/op
Iteration  14: 484.587 ns/op
Iteration  15: 486.428 ns/op
Iteration  16: 485.183 ns/op
Iteration  17: 488.216 ns/op
Iteration  18: 485.669 ns/op
Iteration  19: 487.059 ns/op
Iteration  20: 489.710 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 909.281 ns/op
# Warmup Iteration   2: 522.156 ns/op
# Warmup Iteration   3: 507.282 ns/op
# Warmup Iteration   4: 500.058 ns/op
# Warmup Iteration   5: 505.691 ns/op
Iteration   1: 491.514 ns/op
Iteration   2: 494.226 ns/op
Iteration   3: 494.222 ns/op
Iteration   4: 491.324 ns/op
Iteration   5: 494.308 ns/op
Iteration   6: 491.887 ns/op
Iteration   7: 493.267 ns/op
Iteration   8: 489.860 ns/op
Iteration   9: 490.629 ns/op
Iteration  10: 494.506 ns/op
Iteration  11: 490.185 ns/op
Iteration  12: 491.714 ns/op
Iteration  13: 490.428 ns/op
Iteration  14: 491.479 ns/op
Iteration  15: 490.300 ns/op
Iteration  16: 492.306 ns/op
Iteration  17: 497.148 ns/op
Iteration  18: 490.691 ns/op
Iteration  19: 492.749 ns/op
Iteration  20: 491.471 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 907.305 ns/op
# Warmup Iteration   2: 515.093 ns/op
# Warmup Iteration   3: 497.893 ns/op
# Warmup Iteration   4: 494.584 ns/op
# Warmup Iteration   5: 500.271 ns/op
Iteration   1: 488.080 ns/op
Iteration   2: 485.625 ns/op
Iteration   3: 488.182 ns/op
Iteration   4: 486.694 ns/op
Iteration   5: 488.553 ns/op
Iteration   6: 484.835 ns/op
Iteration   7: 485.846 ns/op
Iteration   8: 485.821 ns/op
Iteration   9: 484.864 ns/op
Iteration  10: 486.122 ns/op
Iteration  11: 484.605 ns/op
Iteration  12: 485.771 ns/op
Iteration  13: 486.765 ns/op
Iteration  14: 485.213 ns/op
Iteration  15: 487.720 ns/op
Iteration  16: 485.016 ns/op
Iteration  17: 488.290 ns/op
Iteration  18: 488.709 ns/op
Iteration  19: 486.010 ns/op
Iteration  20: 488.859 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 915.833 ns/op
# Warmup Iteration   2: 529.707 ns/op
# Warmup Iteration   3: 511.591 ns/op
# Warmup Iteration   4: 508.789 ns/op
# Warmup Iteration   5: 515.539 ns/op
Iteration   1: 499.798 ns/op
Iteration   2: 501.562 ns/op
Iteration   3: 500.059 ns/op
Iteration   4: 504.854 ns/op
Iteration   5: 502.565 ns/op
Iteration   6: 498.266 ns/op
Iteration   7: 499.208 ns/op
Iteration   8: 502.430 ns/op
Iteration   9: 499.635 ns/op
Iteration  10: 499.035 ns/op
Iteration  11: 499.443 ns/op
Iteration  12: 498.106 ns/op
Iteration  13: 499.466 ns/op
Iteration  14: 498.585 ns/op
Iteration  15: 499.271 ns/op
Iteration  16: 499.962 ns/op
Iteration  17: 498.636 ns/op
Iteration  18: 500.830 ns/op
Iteration  19: 498.134 ns/op
Iteration  20: 499.266 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 906.009 ns/op
# Warmup Iteration   2: 520.112 ns/op
# Warmup Iteration   3: 502.601 ns/op
# Warmup Iteration   4: 498.262 ns/op
# Warmup Iteration   5: 503.656 ns/op
Iteration   1: 489.345 ns/op
Iteration   2: 492.007 ns/op
Iteration   3: 492.109 ns/op
Iteration   4: 489.619 ns/op
Iteration   5: 492.177 ns/op
Iteration   6: 488.235 ns/op
Iteration   7: 488.660 ns/op
Iteration   8: 489.364 ns/op
Iteration   9: 488.103 ns/op
Iteration  10: 491.129 ns/op
Iteration  11: 489.556 ns/op
Iteration  12: 491.382 ns/op
Iteration  13: 489.364 ns/op
Iteration  14: 489.697 ns/op
Iteration  15: 493.002 ns/op
Iteration  16: 496.132 ns/op
Iteration  17: 496.352 ns/op
Iteration  18: 493.077 ns/op
Iteration  19: 489.725 ns/op
Iteration  20: 489.205 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  491.353 ±(99.9%) 1.755 ns/op [Average]
  (min, avg, max) = (484.587, 491.353, 504.854), stdev = 5.175
  CI (99.9%): [489.598, 493.108] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  


 	,
				 


	    	
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 974.339 ns/op
# Warmup Iteration   2: 550.036 ns/op
# Warmup Iteration   3: 520.405 ns/op
# Warmup Iteration   4: 516.985 ns/op
# Warmup Iteration   5: 523.316 ns/op
Iteration   1: 508.100 ns/op
Iteration   2: 510.371 ns/op
Iteration   3: 507.929 ns/op
Iteration   4: 510.122 ns/op
Iteration   5: 510.562 ns/op
Iteration   6: 506.558 ns/op
Iteration   7: 507.225 ns/op
Iteration   8: 506.368 ns/op
Iteration   9: 507.266 ns/op
Iteration  10: 506.208 ns/op
Iteration  11: 507.759 ns/op
Iteration  12: 507.129 ns/op
Iteration  13: 511.631 ns/op
Iteration  14: 510.320 ns/op
Iteration  15: 507.678 ns/op
Iteration  16: 510.242 ns/op
Iteration  17: 507.759 ns/op
Iteration  18: 510.661 ns/op
Iteration  19: 506.986 ns/op
Iteration  20: 507.780 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 929.495 ns/op
# Warmup Iteration   2: 541.063 ns/op
# Warmup Iteration   3: 522.506 ns/op
# Warmup Iteration   4: 518.251 ns/op
# Warmup Iteration   5: 523.468 ns/op
Iteration   1: 509.242 ns/op
Iteration   2: 515.481 ns/op
Iteration   3: 509.452 ns/op
Iteration   4: 511.978 ns/op
Iteration   5: 512.001 ns/op
Iteration   6: 511.542 ns/op
Iteration   7: 508.420 ns/op
Iteration   8: 508.861 ns/op
Iteration   9: 509.136 ns/op
Iteration  10: 508.326 ns/op
Iteration  11: 510.084 ns/op
Iteration  12: 508.180 ns/op
Iteration  13: 510.481 ns/op
Iteration  14: 511.500 ns/op
Iteration  15: 508.908 ns/op
Iteration  16: 509.839 ns/op
Iteration  17: 508.424 ns/op
Iteration  18: 509.840 ns/op
Iteration  19: 508.864 ns/op
Iteration  20: 512.226 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 952.207 ns/op
# Warmup Iteration   2: 540.305 ns/op
# Warmup Iteration   3: 517.556 ns/op
# Warmup Iteration   4: 513.520 ns/op
# Warmup Iteration   5: 519.475 ns/op
Iteration   1: 504.875 ns/op
Iteration   2: 506.828 ns/op
Iteration   3: 507.048 ns/op
Iteration   4: 504.970 ns/op
Iteration   5: 507.570 ns/op
Iteration   6: 503.800 ns/op
Iteration   7: 504.552 ns/op
Iteration   8: 503.714 ns/op
Iteration   9: 506.257 ns/op
Iteration  10: 504.015 ns/op
Iteration  11: 505.881 ns/op
Iteration  12: 505.537 ns/op
Iteration  13: 504.176 ns/op
Iteration  14: 505.588 ns/op
Iteration  15: 504.217 ns/op
Iteration  16: 505.950 ns/op
Iteration  17: 504.956 ns/op
Iteration  18: 505.834 ns/op
Iteration  19: 514.065 ns/op
Iteration  20: 504.323 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 945.956 ns/op
# Warmup Iteration   2: 541.884 ns/op
# Warmup Iteration   3: 513.623 ns/op
# Warmup Iteration   4: 508.348 ns/op
# Warmup Iteration   5: 513.538 ns/op
Iteration   1: 499.449 ns/op
Iteration   2: 501.727 ns/op
Iteration   3: 501.290 ns/op
Iteration   4: 499.100 ns/op
Iteration   5: 501.680 ns/op
Iteration   6: 497.144 ns/op
Iteration   7: 498.037 ns/op
Iteration   8: 498.143 ns/op
Iteration   9: 497.095 ns/op
Iteration  10: 501.990 ns/op
Iteration  11: 497.029 ns/op
Iteration  12: 499.192 ns/op
Iteration  13: 497.545 ns/op
Iteration  14: 499.485 ns/op
Iteration  15: 499.010 ns/op
Iteration  16: 497.921 ns/op
Iteration  17: 501.155 ns/op
Iteration  18: 498.278 ns/op
Iteration  19: 501.157 ns/op
Iteration  20: 501.082 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 939.663 ns/op
# Warmup Iteration   2: 533.766 ns/op
# Warmup Iteration   3: 508.701 ns/op
# Warmup Iteration   4: 504.369 ns/op
# Warmup Iteration   5: 510.304 ns/op
Iteration   1: 498.486 ns/op
Iteration   2: 496.846 ns/op
Iteration   3: 499.176 ns/op
Iteration   4: 496.186 ns/op
Iteration   5: 498.809 ns/op
Iteration   6: 494.819 ns/op
Iteration   7: 495.956 ns/op
Iteration   8: 496.275 ns/op
Iteration   9: 494.990 ns/op
Iteration  10: 497.074 ns/op
Iteration  11: 495.404 ns/op
Iteration  12: 498.402 ns/op
Iteration  13: 497.286 ns/op
Iteration  14: 496.078 ns/op
Iteration  15: 499.043 ns/op
Iteration  16: 496.562 ns/op
Iteration  17: 498.208 ns/op
Iteration  18: 497.828 ns/op
Iteration  19: 496.658 ns/op
Iteration  20: 499.250 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  504.164 ±(99.9%) 1.827 ns/op [Average]
  (min, avg, max) = (494.819, 504.164, 515.481), stdev = 5.388
  CI (99.9%): [502.337, 505.992] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   


 	,
				 


	    	
		  avgt  100  491.353 ± 1.755  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   


 	,
				 


	    	
		  avgt  100  504.164 ± 1.827  ns/op

Benchmark result is saved to split_precompiled_regex_24_53_Match.csv
