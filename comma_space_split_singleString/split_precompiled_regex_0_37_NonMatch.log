# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
D`9nB*VB
eNiMm4`uz|?T8:;KAs!G-R<ei	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 897.393 ns/op
# Warmup Iteration   2: 626.702 ns/op
# Warmup Iteration   3: 554.154 ns/op
# Warmup Iteration   4: 550.796 ns/op
# Warmup Iteration   5: 553.981 ns/op
Iteration   1: 562.612 ns/op
Iteration   2: 545.599 ns/op
Iteration   3: 544.286 ns/op
Iteration   4: 544.591 ns/op
Iteration   5: 545.120 ns/op
Iteration   6: 547.335 ns/op
Iteration   7: 544.869 ns/op
Iteration   8: 545.209 ns/op
Iteration   9: 543.251 ns/op
Iteration  10: 547.750 ns/op
Iteration  11: 543.044 ns/op
Iteration  12: 543.963 ns/op
Iteration  13: 544.062 ns/op
Iteration  14: 543.341 ns/op
Iteration  15: 544.890 ns/op
Iteration  16: 543.709 ns/op
Iteration  17: 543.773 ns/op
Iteration  18: 543.776 ns/op
Iteration  19: 547.469 ns/op
Iteration  20: 544.829 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 897.172 ns/op
# Warmup Iteration   2: 618.714 ns/op
# Warmup Iteration   3: 552.821 ns/op
# Warmup Iteration   4: 555.127 ns/op
# Warmup Iteration   5: 560.027 ns/op
Iteration   1: 564.150 ns/op
Iteration   2: 547.707 ns/op
Iteration   3: 549.523 ns/op
Iteration   4: 547.499 ns/op
Iteration   5: 547.393 ns/op
Iteration   6: 549.831 ns/op
Iteration   7: 547.539 ns/op
Iteration   8: 547.698 ns/op
Iteration   9: 545.662 ns/op
Iteration  10: 546.698 ns/op
Iteration  11: 546.418 ns/op
Iteration  12: 545.985 ns/op
Iteration  13: 546.195 ns/op
Iteration  14: 546.284 ns/op
Iteration  15: 548.754 ns/op
Iteration  16: 547.164 ns/op
Iteration  17: 547.434 ns/op
Iteration  18: 573.746 ns/op
Iteration  19: 546.458 ns/op
Iteration  20: 549.511 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 896.284 ns/op
# Warmup Iteration   2: 619.705 ns/op
# Warmup Iteration   3: 549.696 ns/op
# Warmup Iteration   4: 552.660 ns/op
# Warmup Iteration   5: 554.306 ns/op
Iteration   1: 562.169 ns/op
Iteration   2: 544.883 ns/op
Iteration   3: 545.432 ns/op
Iteration   4: 544.971 ns/op
Iteration   5: 545.502 ns/op
Iteration   6: 547.790 ns/op
Iteration   7: 545.358 ns/op
Iteration   8: 545.017 ns/op
Iteration   9: 543.028 ns/op
Iteration  10: 543.901 ns/op
Iteration  11: 543.131 ns/op
Iteration  12: 543.235 ns/op
Iteration  13: 543.692 ns/op
Iteration  14: 545.578 ns/op
Iteration  15: 544.084 ns/op
Iteration  16: 544.364 ns/op
Iteration  17: 544.210 ns/op
Iteration  18: 544.860 ns/op
Iteration  19: 547.884 ns/op
Iteration  20: 544.941 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 894.687 ns/op
# Warmup Iteration   2: 610.725 ns/op
# Warmup Iteration   3: 547.820 ns/op
# Warmup Iteration   4: 550.141 ns/op
# Warmup Iteration   5: 552.733 ns/op
Iteration   1: 559.806 ns/op
Iteration   2: 543.351 ns/op
Iteration   3: 542.901 ns/op
Iteration   4: 542.985 ns/op
Iteration   5: 546.394 ns/op
Iteration   6: 543.246 ns/op
Iteration   7: 543.148 ns/op
Iteration   8: 543.299 ns/op
Iteration   9: 541.857 ns/op
Iteration  10: 542.832 ns/op
Iteration  11: 546.334 ns/op
Iteration  12: 542.446 ns/op
Iteration  13: 542.392 ns/op
Iteration  14: 543.066 ns/op
Iteration  15: 541.579 ns/op
Iteration  16: 542.291 ns/op
Iteration  17: 543.356 ns/op
Iteration  18: 543.480 ns/op
Iteration  19: 546.183 ns/op
Iteration  20: 543.345 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 896.190 ns/op
# Warmup Iteration   2: 614.529 ns/op
# Warmup Iteration   3: 548.147 ns/op
# Warmup Iteration   4: 550.785 ns/op
# Warmup Iteration   5: 556.250 ns/op
Iteration   1: 558.791 ns/op
Iteration   2: 543.613 ns/op
Iteration   3: 542.693 ns/op
Iteration   4: 543.417 ns/op
Iteration   5: 545.948 ns/op
Iteration   6: 546.902 ns/op
Iteration   7: 544.917 ns/op
Iteration   8: 543.354 ns/op
Iteration   9: 541.670 ns/op
Iteration  10: 547.002 ns/op
Iteration  11: 542.264 ns/op
Iteration  12: 542.206 ns/op
Iteration  13: 542.393 ns/op
Iteration  14: 543.583 ns/op
Iteration  15: 542.157 ns/op
Iteration  16: 542.224 ns/op
Iteration  17: 542.697 ns/op
Iteration  18: 543.583 ns/op
Iteration  19: 545.063 ns/op
Iteration  20: 543.006 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  545.909 ±(99.9%) 1.702 ns/op [Average]
  (min, avg, max) = (541.579, 545.909, 573.746), stdev = 5.020
  CI (99.9%): [544.207, 547.612] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
D`9nB*VB
eNiMm4`uz|?T8:;KAs!G-R<ei	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 891.071 ns/op
# Warmup Iteration   2: 619.847 ns/op
# Warmup Iteration   3: 565.628 ns/op
# Warmup Iteration   4: 555.194 ns/op
# Warmup Iteration   5: 556.072 ns/op
Iteration   1: 557.856 ns/op
Iteration   2: 550.031 ns/op
Iteration   3: 549.769 ns/op
Iteration   4: 547.294 ns/op
Iteration   5: 546.762 ns/op
Iteration   6: 549.093 ns/op
Iteration   7: 546.868 ns/op
Iteration   8: 547.000 ns/op
Iteration   9: 545.344 ns/op
Iteration  10: 545.465 ns/op
Iteration  11: 547.138 ns/op
Iteration  12: 545.733 ns/op
Iteration  13: 545.716 ns/op
Iteration  14: 545.719 ns/op
Iteration  15: 547.954 ns/op
Iteration  16: 545.778 ns/op
Iteration  17: 554.086 ns/op
Iteration  18: 546.991 ns/op
Iteration  19: 547.289 ns/op
Iteration  20: 548.949 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 900.586 ns/op
# Warmup Iteration   2: 625.052 ns/op
# Warmup Iteration   3: 552.533 ns/op
# Warmup Iteration   4: 554.482 ns/op
# Warmup Iteration   5: 556.961 ns/op
Iteration   1: 564.021 ns/op
Iteration   2: 547.605 ns/op
Iteration   3: 547.642 ns/op
Iteration   4: 548.062 ns/op
Iteration   5: 547.908 ns/op
Iteration   6: 550.529 ns/op
Iteration   7: 547.098 ns/op
Iteration   8: 547.362 ns/op
Iteration   9: 546.138 ns/op
Iteration  10: 547.190 ns/op
Iteration  11: 546.309 ns/op
Iteration  12: 546.014 ns/op
Iteration  13: 546.488 ns/op
Iteration  14: 547.718 ns/op
Iteration  15: 549.891 ns/op
Iteration  16: 551.993 ns/op
Iteration  17: 546.492 ns/op
Iteration  18: 547.678 ns/op
Iteration  19: 546.832 ns/op
Iteration  20: 548.752 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 902.488 ns/op
# Warmup Iteration   2: 619.075 ns/op
# Warmup Iteration   3: 554.066 ns/op
# Warmup Iteration   4: 556.083 ns/op
# Warmup Iteration   5: 558.866 ns/op
Iteration   1: 565.264 ns/op
Iteration   2: 549.213 ns/op
Iteration   3: 549.041 ns/op
Iteration   4: 549.588 ns/op
Iteration   5: 549.261 ns/op
Iteration   6: 551.787 ns/op
Iteration   7: 549.263 ns/op
Iteration   8: 549.175 ns/op
Iteration   9: 547.404 ns/op
Iteration  10: 547.601 ns/op
Iteration  11: 548.564 ns/op
Iteration  12: 549.524 ns/op
Iteration  13: 548.020 ns/op
Iteration  14: 547.960 ns/op
Iteration  15: 549.230 ns/op
Iteration  16: 548.597 ns/op
Iteration  17: 549.533 ns/op
Iteration  18: 551.438 ns/op
Iteration  19: 552.844 ns/op
Iteration  20: 556.632 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 897.231 ns/op
# Warmup Iteration   2: 620.918 ns/op
# Warmup Iteration   3: 557.637 ns/op
# Warmup Iteration   4: 560.076 ns/op
# Warmup Iteration   5: 563.496 ns/op
Iteration   1: 571.542 ns/op
Iteration   2: 554.269 ns/op
Iteration   3: 554.162 ns/op
Iteration   4: 553.927 ns/op
Iteration   5: 554.016 ns/op
Iteration   6: 556.705 ns/op
Iteration   7: 553.842 ns/op
Iteration   8: 554.548 ns/op
Iteration   9: 552.307 ns/op
Iteration  10: 552.492 ns/op
Iteration  11: 553.766 ns/op
Iteration  12: 553.347 ns/op
Iteration  13: 554.503 ns/op
Iteration  14: 552.859 ns/op
Iteration  15: 557.473 ns/op
Iteration  16: 557.894 ns/op
Iteration  17: 553.715 ns/op
Iteration  18: 553.662 ns/op
Iteration  19: 553.519 ns/op
Iteration  20: 553.678 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 895.405 ns/op
# Warmup Iteration   2: 609.278 ns/op
# Warmup Iteration   3: 547.054 ns/op
# Warmup Iteration   4: 550.490 ns/op
# Warmup Iteration   5: 557.636 ns/op
Iteration   1: 559.413 ns/op
Iteration   2: 543.212 ns/op
Iteration   3: 542.876 ns/op
Iteration   4: 543.046 ns/op
Iteration   5: 545.677 ns/op
Iteration   6: 543.360 ns/op
Iteration   7: 543.466 ns/op
Iteration   8: 543.400 ns/op
Iteration   9: 541.400 ns/op
Iteration  10: 542.163 ns/op
Iteration  11: 541.209 ns/op
Iteration  12: 541.107 ns/op
Iteration  13: 541.058 ns/op
Iteration  14: 543.615 ns/op
Iteration  15: 541.772 ns/op
Iteration  16: 541.654 ns/op
Iteration  17: 542.509 ns/op
Iteration  18: 544.693 ns/op
Iteration  19: 542.125 ns/op
Iteration  20: 541.978 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  549.145 ±(99.9%) 1.814 ns/op [Average]
  (min, avg, max) = (541.058, 549.145, 571.542), stdev = 5.350
  CI (99.9%): [547.330, 550.959] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
D`9nB*VB
eNiMm4`uz|?T8:;KAs!G-R<ei	  avgt  100  545.909 ± 1.702  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
D`9nB*VB
eNiMm4`uz|?T8:;KAs!G-R<ei	  avgt  100  549.145 ± 1.814  ns/op

Benchmark result is saved to split_precompiled_regex_0_37_NonMatch.csv
