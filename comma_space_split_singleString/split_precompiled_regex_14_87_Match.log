# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  				
		,
 	   
 
 	 			
	 	
	
		
 
  

 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 998.480 ns/op
# Warmup Iteration   2: 646.594 ns/op
# Warmup Iteration   3: 583.653 ns/op
# Warmup Iteration   4: 598.723 ns/op
# Warmup Iteration   5: 592.242 ns/op
Iteration   1: 579.886 ns/op
Iteration   2: 581.129 ns/op
Iteration   3: 578.483 ns/op
Iteration   4: 578.649 ns/op
Iteration   5: 581.780 ns/op
Iteration   6: 578.767 ns/op
Iteration   7: 578.239 ns/op
Iteration   8: 581.225 ns/op
Iteration   9: 576.208 ns/op
Iteration  10: 576.470 ns/op
Iteration  11: 578.243 ns/op
Iteration  12: 577.442 ns/op
Iteration  13: 576.813 ns/op
Iteration  14: 579.017 ns/op
Iteration  15: 577.060 ns/op
Iteration  16: 578.330 ns/op
Iteration  17: 580.663 ns/op
Iteration  18: 578.549 ns/op
Iteration  19: 578.447 ns/op
Iteration  20: 581.490 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1022.924 ns/op
# Warmup Iteration   2: 650.184 ns/op
# Warmup Iteration   3: 584.208 ns/op
# Warmup Iteration   4: 598.357 ns/op
# Warmup Iteration   5: 593.297 ns/op
Iteration   1: 579.515 ns/op
Iteration   2: 579.111 ns/op
Iteration   3: 581.246 ns/op
Iteration   4: 578.964 ns/op
Iteration   5: 579.131 ns/op
Iteration   6: 582.115 ns/op
Iteration   7: 579.419 ns/op
Iteration   8: 577.668 ns/op
Iteration   9: 577.171 ns/op
Iteration  10: 576.194 ns/op
Iteration  11: 580.609 ns/op
Iteration  12: 577.894 ns/op
Iteration  13: 576.403 ns/op
Iteration  14: 577.300 ns/op
Iteration  15: 580.475 ns/op
Iteration  16: 576.871 ns/op
Iteration  17: 578.688 ns/op
Iteration  18: 578.465 ns/op
Iteration  19: 576.792 ns/op
Iteration  20: 577.926 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 995.576 ns/op
# Warmup Iteration   2: 635.597 ns/op
# Warmup Iteration   3: 580.559 ns/op
# Warmup Iteration   4: 595.221 ns/op
# Warmup Iteration   5: 589.509 ns/op
Iteration   1: 576.439 ns/op
Iteration   2: 578.774 ns/op
Iteration   3: 576.141 ns/op
Iteration   4: 575.743 ns/op
Iteration   5: 579.230 ns/op
Iteration   6: 576.620 ns/op
Iteration   7: 576.453 ns/op
Iteration   8: 575.592 ns/op
Iteration   9: 574.216 ns/op
Iteration  10: 574.433 ns/op
Iteration  11: 575.295 ns/op
Iteration  12: 574.445 ns/op
Iteration  13: 574.587 ns/op
Iteration  14: 576.331 ns/op
Iteration  15: 574.451 ns/op
Iteration  16: 575.691 ns/op
Iteration  17: 579.586 ns/op
Iteration  18: 575.747 ns/op
Iteration  19: 574.663 ns/op
Iteration  20: 578.024 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1007.578 ns/op
# Warmup Iteration   2: 644.968 ns/op
# Warmup Iteration   3: 586.205 ns/op
# Warmup Iteration   4: 602.176 ns/op
# Warmup Iteration   5: 595.301 ns/op
Iteration   1: 581.806 ns/op
Iteration   2: 581.555 ns/op
Iteration   3: 586.063 ns/op
Iteration   4: 581.293 ns/op
Iteration   5: 581.563 ns/op
Iteration   6: 583.934 ns/op
Iteration   7: 582.163 ns/op
Iteration   8: 579.442 ns/op
Iteration   9: 580.205 ns/op
Iteration  10: 579.382 ns/op
Iteration  11: 579.399 ns/op
Iteration  12: 580.687 ns/op
Iteration  13: 579.707 ns/op
Iteration  14: 579.624 ns/op
Iteration  15: 580.788 ns/op
Iteration  16: 579.604 ns/op
Iteration  17: 579.755 ns/op
Iteration  18: 580.547 ns/op
Iteration  19: 583.667 ns/op
Iteration  20: 583.842 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1002.262 ns/op
# Warmup Iteration   2: 645.215 ns/op
# Warmup Iteration   3: 589.046 ns/op
# Warmup Iteration   4: 604.955 ns/op
# Warmup Iteration   5: 597.658 ns/op
Iteration   1: 585.468 ns/op
Iteration   2: 584.679 ns/op
Iteration   3: 586.404 ns/op
Iteration   4: 584.448 ns/op
Iteration   5: 583.335 ns/op
Iteration   6: 585.779 ns/op
Iteration   7: 584.339 ns/op
Iteration   8: 582.675 ns/op
Iteration   9: 583.321 ns/op
Iteration  10: 582.646 ns/op
Iteration  11: 583.005 ns/op
Iteration  12: 584.567 ns/op
Iteration  13: 582.792 ns/op
Iteration  14: 582.867 ns/op
Iteration  15: 584.644 ns/op
Iteration  16: 584.073 ns/op
Iteration  17: 584.082 ns/op
Iteration  18: 587.237 ns/op
Iteration  19: 584.120 ns/op
Iteration  20: 584.406 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  579.812 ±(99.9%) 1.082 ns/op [Average]
  (min, avg, max) = (574.216, 579.812, 587.237), stdev = 3.191
  CI (99.9%): [578.730, 580.894] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  				
		,
 	   
 
 	 			
	 	
	
		
 
  

 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1028.692 ns/op
# Warmup Iteration   2: 616.930 ns/op
# Warmup Iteration   3: 563.049 ns/op
# Warmup Iteration   4: 578.084 ns/op
# Warmup Iteration   5: 572.015 ns/op
Iteration   1: 561.536 ns/op
Iteration   2: 558.309 ns/op
Iteration   3: 558.945 ns/op
Iteration   4: 561.456 ns/op
Iteration   5: 559.372 ns/op
Iteration   6: 561.895 ns/op
Iteration   7: 557.226 ns/op
Iteration   8: 557.077 ns/op
Iteration   9: 558.019 ns/op
Iteration  10: 557.499 ns/op
Iteration  11: 563.946 ns/op
Iteration  12: 558.004 ns/op
Iteration  13: 559.667 ns/op
Iteration  14: 557.278 ns/op
Iteration  15: 557.880 ns/op
Iteration  16: 561.296 ns/op
Iteration  17: 558.630 ns/op
Iteration  18: 561.662 ns/op
Iteration  19: 558.514 ns/op
Iteration  20: 557.426 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1056.188 ns/op
# Warmup Iteration   2: 663.117 ns/op
# Warmup Iteration   3: 597.096 ns/op
# Warmup Iteration   4: 608.918 ns/op
# Warmup Iteration   5: 609.419 ns/op
Iteration   1: 593.221 ns/op
Iteration   2: 593.209 ns/op
Iteration   3: 595.582 ns/op
Iteration   4: 594.980 ns/op
Iteration   5: 596.192 ns/op
Iteration   6: 595.926 ns/op
Iteration   7: 593.089 ns/op
Iteration   8: 591.678 ns/op
Iteration   9: 592.251 ns/op
Iteration  10: 591.521 ns/op
Iteration  11: 591.420 ns/op
Iteration  12: 592.347 ns/op
Iteration  13: 591.007 ns/op
Iteration  14: 592.707 ns/op
Iteration  15: 594.080 ns/op
Iteration  16: 592.259 ns/op
Iteration  17: 592.303 ns/op
Iteration  18: 594.352 ns/op
Iteration  19: 592.142 ns/op
Iteration  20: 592.640 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1013.011 ns/op
# Warmup Iteration   2: 643.199 ns/op
# Warmup Iteration   3: 589.632 ns/op
# Warmup Iteration   4: 608.380 ns/op
# Warmup Iteration   5: 601.208 ns/op
Iteration   1: 584.515 ns/op
Iteration   2: 587.593 ns/op
Iteration   3: 584.356 ns/op
Iteration   4: 584.119 ns/op
Iteration   5: 588.176 ns/op
Iteration   6: 587.087 ns/op
Iteration   7: 585.422 ns/op
Iteration   8: 586.136 ns/op
Iteration   9: 582.302 ns/op
Iteration  10: 582.645 ns/op
Iteration  11: 583.899 ns/op
Iteration  12: 582.994 ns/op
Iteration  13: 583.309 ns/op
Iteration  14: 584.191 ns/op
Iteration  15: 582.802 ns/op
Iteration  16: 584.418 ns/op
Iteration  17: 582.921 ns/op
Iteration  18: 582.887 ns/op
Iteration  19: 584.963 ns/op
Iteration  20: 582.401 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1014.611 ns/op
# Warmup Iteration   2: 658.799 ns/op
# Warmup Iteration   3: 601.346 ns/op
# Warmup Iteration   4: 616.956 ns/op
# Warmup Iteration   5: 609.872 ns/op
Iteration   1: 596.260 ns/op
Iteration   2: 596.773 ns/op
Iteration   3: 599.467 ns/op
Iteration   4: 596.708 ns/op
Iteration   5: 596.595 ns/op
Iteration   6: 599.731 ns/op
Iteration   7: 597.185 ns/op
Iteration   8: 601.618 ns/op
Iteration   9: 597.431 ns/op
Iteration  10: 596.059 ns/op
Iteration  11: 595.454 ns/op
Iteration  12: 597.013 ns/op
Iteration  13: 595.245 ns/op
Iteration  14: 602.026 ns/op
Iteration  15: 600.162 ns/op
Iteration  16: 596.974 ns/op
Iteration  17: 597.219 ns/op
Iteration  18: 597.010 ns/op
Iteration  19: 595.599 ns/op
Iteration  20: 595.421 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1051.869 ns/op
# Warmup Iteration   2: 666.783 ns/op
# Warmup Iteration   3: 598.978 ns/op
# Warmup Iteration   4: 607.923 ns/op
# Warmup Iteration   5: 613.764 ns/op
Iteration   1: 593.549 ns/op
Iteration   2: 594.475 ns/op
Iteration   3: 597.247 ns/op
Iteration   4: 594.913 ns/op
Iteration   5: 593.731 ns/op
Iteration   6: 597.185 ns/op
Iteration   7: 595.085 ns/op
Iteration   8: 593.258 ns/op
Iteration   9: 594.258 ns/op
Iteration  10: 593.666 ns/op
Iteration  11: 593.845 ns/op
Iteration  12: 594.880 ns/op
Iteration  13: 593.735 ns/op
Iteration  14: 593.639 ns/op
Iteration  15: 594.629 ns/op
Iteration  16: 595.731 ns/op
Iteration  17: 594.086 ns/op
Iteration  18: 609.223 ns/op
Iteration  19: 593.401 ns/op
Iteration  20: 593.678 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  585.898 ±(99.9%) 4.842 ns/op [Average]
  (min, avg, max) = (557.077, 585.898, 609.223), stdev = 14.277
  CI (99.9%): [581.056, 590.740] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   				
		,
 	   
 
 	 			
	 	
	
		
 
  

   avgt  100  579.812 ± 1.082  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   				
		,
 	   
 
 	 			
	 	
	
		
 
  

   avgt  100  585.898 ± 4.842  ns/op

Benchmark result is saved to split_precompiled_regex_14_87_Match.csv
