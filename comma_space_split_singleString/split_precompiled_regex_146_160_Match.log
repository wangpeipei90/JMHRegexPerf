# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =    		 
   	

	,  	

	 	

  
	  
 
		

      	

					 

 
    	
	 		
	
	
			 	  
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1204.276 ns/op
# Warmup Iteration   2: 865.390 ns/op
# Warmup Iteration   3: 748.181 ns/op
# Warmup Iteration   4: 758.837 ns/op
# Warmup Iteration   5: 761.757 ns/op
Iteration   1: 763.138 ns/op
Iteration   2: 745.490 ns/op
Iteration   3: 745.194 ns/op
Iteration   4: 745.216 ns/op
Iteration   5: 745.293 ns/op
Iteration   6: 744.712 ns/op
Iteration   7: 744.678 ns/op
Iteration   8: 744.545 ns/op
Iteration   9: 744.285 ns/op
Iteration  10: 744.769 ns/op
Iteration  11: 742.654 ns/op
Iteration  12: 748.454 ns/op
Iteration  13: 742.378 ns/op
Iteration  14: 742.686 ns/op
Iteration  15: 742.303 ns/op
Iteration  16: 743.148 ns/op
Iteration  17: 742.960 ns/op
Iteration  18: 743.013 ns/op
Iteration  19: 742.401 ns/op
Iteration  20: 748.444 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1202.385 ns/op
# Warmup Iteration   2: 873.724 ns/op
# Warmup Iteration   3: 748.381 ns/op
# Warmup Iteration   4: 756.575 ns/op
# Warmup Iteration   5: 763.206 ns/op
Iteration   1: 762.749 ns/op
Iteration   2: 745.199 ns/op
Iteration   3: 745.025 ns/op
Iteration   4: 745.240 ns/op
Iteration   5: 748.385 ns/op
Iteration   6: 743.911 ns/op
Iteration   7: 744.549 ns/op
Iteration   8: 744.611 ns/op
Iteration   9: 744.091 ns/op
Iteration  10: 744.393 ns/op
Iteration  11: 742.201 ns/op
Iteration  12: 741.822 ns/op
Iteration  13: 741.837 ns/op
Iteration  14: 741.687 ns/op
Iteration  15: 741.921 ns/op
Iteration  16: 742.056 ns/op
Iteration  17: 742.450 ns/op
Iteration  18: 742.598 ns/op
Iteration  19: 743.861 ns/op
Iteration  20: 744.154 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1156.397 ns/op
# Warmup Iteration   2: 855.157 ns/op
# Warmup Iteration   3: 740.254 ns/op
# Warmup Iteration   4: 757.349 ns/op
# Warmup Iteration   5: 751.160 ns/op
Iteration   1: 754.766 ns/op
Iteration   2: 739.488 ns/op
Iteration   3: 736.912 ns/op
Iteration   4: 740.449 ns/op
Iteration   5: 736.201 ns/op
Iteration   6: 740.563 ns/op
Iteration   7: 736.492 ns/op
Iteration   8: 740.586 ns/op
Iteration   9: 736.116 ns/op
Iteration  10: 736.773 ns/op
Iteration  11: 734.812 ns/op
Iteration  12: 735.002 ns/op
Iteration  13: 734.407 ns/op
Iteration  14: 734.346 ns/op
Iteration  15: 734.406 ns/op
Iteration  16: 734.460 ns/op
Iteration  17: 734.388 ns/op
Iteration  18: 734.456 ns/op
Iteration  19: 736.081 ns/op
Iteration  20: 735.023 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1162.951 ns/op
# Warmup Iteration   2: 853.630 ns/op
# Warmup Iteration   3: 739.210 ns/op
# Warmup Iteration   4: 755.213 ns/op
# Warmup Iteration   5: 748.603 ns/op
Iteration   1: 753.285 ns/op
Iteration   2: 737.976 ns/op
Iteration   3: 735.814 ns/op
Iteration   4: 735.754 ns/op
Iteration   5: 743.247 ns/op
Iteration   6: 742.659 ns/op
Iteration   7: 742.289 ns/op
Iteration   8: 735.938 ns/op
Iteration   9: 735.777 ns/op
Iteration  10: 736.658 ns/op
Iteration  11: 733.851 ns/op
Iteration  12: 733.364 ns/op
Iteration  13: 733.754 ns/op
Iteration  14: 733.355 ns/op
Iteration  15: 733.393 ns/op
Iteration  16: 733.344 ns/op
Iteration  17: 733.631 ns/op
Iteration  18: 735.251 ns/op
Iteration  19: 733.426 ns/op
Iteration  20: 733.701 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1160.385 ns/op
# Warmup Iteration   2: 852.547 ns/op
# Warmup Iteration   3: 742.250 ns/op
# Warmup Iteration   4: 756.069 ns/op
# Warmup Iteration   5: 749.681 ns/op
Iteration   1: 754.192 ns/op
Iteration   2: 738.992 ns/op
Iteration   3: 737.447 ns/op
Iteration   4: 736.892 ns/op
Iteration   5: 737.323 ns/op
Iteration   6: 737.159 ns/op
Iteration   7: 737.038 ns/op
Iteration   8: 736.907 ns/op
Iteration   9: 736.500 ns/op
Iteration  10: 737.128 ns/op
Iteration  11: 736.286 ns/op
Iteration  12: 735.329 ns/op
Iteration  13: 735.261 ns/op
Iteration  14: 735.001 ns/op
Iteration  15: 735.318 ns/op
Iteration  16: 735.020 ns/op
Iteration  17: 737.294 ns/op
Iteration  18: 736.593 ns/op
Iteration  19: 737.636 ns/op
Iteration  20: 735.721 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  740.297 Â±(99.9%) 2.006 ns/op [Average]
  (min, avg, max) = (733.344, 740.297, 763.138), stdev = 5.915
  CI (99.9%): [738.291, 742.303] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =    		 
   	

	,  	

	 	

  
	  
 
		

      	

					 

 
    	
	 		
	
	
			 	  
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1213.896 ns/op
# Warmup Iteration   2: 892.461 ns/op
# Warmup Iteration   3: 771.013 ns/op
# Warmup Iteration   4: 778.723 ns/op
# Warmup Iteration   5: 794.160 ns/op
Iteration   1: 783.812 ns/op
Iteration   2: 766.630 ns/op
Iteration   3: 767.098 ns/op
Iteration   4: 766.971 ns/op
Iteration   5: 767.313 ns/op
Iteration   6: 767.090 ns/op
Iteration   7: 767.256 ns/op
Iteration   8: 766.652 ns/op
Iteration   9: 766.342 ns/op
Iteration  10: 766.392 ns/op
Iteration  11: 764.344 ns/op
Iteration  12: 764.117 ns/op
Iteration  13: 764.651 ns/op
Iteration  14: 764.799 ns/op
Iteration  15: 766.799 ns/op
Iteration  16: 764.513 ns/op
Iteration  17: 765.507 ns/op
Iteration  18: 765.068 ns/op
Iteration  19: 764.585 ns/op
Iteration  20: 766.282 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1231.268 ns/op
# Warmup Iteration   2: 895.684 ns/op
# Warmup Iteration   3: 763.985 ns/op
# Warmup Iteration   4: 765.576 ns/op
# Warmup Iteration   5: 784.728 ns/op
Iteration   1: 776.167 ns/op
Iteration   2: 759.789 ns/op
Iteration   3: 759.275 ns/op
Iteration   4: 760.070 ns/op
Iteration   5: 759.650 ns/op
Iteration   6: 759.430 ns/op
Iteration   7: 759.058 ns/op
Iteration   8: 758.680 ns/op
Iteration   9: 759.560 ns/op
Iteration  10: 759.750 ns/op
Iteration  11: 757.573 ns/op
Iteration  12: 757.082 ns/op
Iteration  13: 757.037 ns/op
Iteration  14: 757.273 ns/op
Iteration  15: 757.783 ns/op
Iteration  16: 757.780 ns/op
Iteration  17: 758.466 ns/op
Iteration  18: 758.340 ns/op
Iteration  19: 758.403 ns/op
Iteration  20: 759.163 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1233.260 ns/op
# Warmup Iteration   2: 890.840 ns/op
# Warmup Iteration   3: 762.089 ns/op
# Warmup Iteration   4: 766.854 ns/op
# Warmup Iteration   5: 781.119 ns/op
Iteration   1: 775.446 ns/op
Iteration   2: 758.209 ns/op
Iteration   3: 758.114 ns/op
Iteration   4: 758.257 ns/op
Iteration   5: 757.858 ns/op
Iteration   6: 757.455 ns/op
Iteration   7: 757.558 ns/op
Iteration   8: 758.119 ns/op
Iteration   9: 758.053 ns/op
Iteration  10: 758.282 ns/op
Iteration  11: 756.242 ns/op
Iteration  12: 755.912 ns/op
Iteration  13: 755.733 ns/op
Iteration  14: 756.138 ns/op
Iteration  15: 756.483 ns/op
Iteration  16: 756.143 ns/op
Iteration  17: 756.838 ns/op
Iteration  18: 756.889 ns/op
Iteration  19: 756.560 ns/op
Iteration  20: 756.608 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1174.559 ns/op
# Warmup Iteration   2: 802.175 ns/op
# Warmup Iteration   3: 714.225 ns/op
# Warmup Iteration   4: 711.985 ns/op
# Warmup Iteration   5: 712.473 ns/op
Iteration   1: 716.430 ns/op
Iteration   2: 701.391 ns/op
Iteration   3: 700.138 ns/op
Iteration   4: 699.667 ns/op
Iteration   5: 703.452 ns/op
Iteration   6: 700.243 ns/op
Iteration   7: 699.820 ns/op
Iteration   8: 699.870 ns/op
Iteration   9: 700.434 ns/op
Iteration  10: 698.468 ns/op
Iteration  11: 698.704 ns/op
Iteration  12: 698.407 ns/op
Iteration  13: 699.291 ns/op
Iteration  14: 703.529 ns/op
Iteration  15: 697.886 ns/op
Iteration  16: 698.452 ns/op
Iteration  17: 698.704 ns/op
Iteration  18: 698.717 ns/op
Iteration  19: 698.532 ns/op
Iteration  20: 702.200 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1214.298 ns/op
# Warmup Iteration   2: 906.614 ns/op
# Warmup Iteration   3: 776.120 ns/op
# Warmup Iteration   4: 778.342 ns/op
# Warmup Iteration   5: 797.977 ns/op
Iteration   1: 789.314 ns/op
Iteration   2: 771.696 ns/op
Iteration   3: 771.298 ns/op
Iteration   4: 772.488 ns/op
Iteration   5: 771.719 ns/op
Iteration   6: 771.496 ns/op
Iteration   7: 771.928 ns/op
Iteration   8: 774.481 ns/op
Iteration   9: 772.549 ns/op
Iteration  10: 772.308 ns/op
Iteration  11: 768.435 ns/op
Iteration  12: 768.300 ns/op
Iteration  13: 770.363 ns/op
Iteration  14: 770.575 ns/op
Iteration  15: 769.475 ns/op
Iteration  16: 769.274 ns/op
Iteration  17: 770.030 ns/op
Iteration  18: 769.461 ns/op
Iteration  19: 769.013 ns/op
Iteration  20: 768.731 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  751.347 Â±(99.9%) 8.901 ns/op [Average]
  (min, avg, max) = (697.886, 751.347, 789.314), stdev = 26.244
  CI (99.9%): [742.447, 760.248] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*     		 
   	

	,  	

	 	

  
	  
 
		

      	

					 

 
    	
	 		
	
	
			 	  
  avgt  100  740.297 Â± 2.006  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*     		 
   	

	,  	

	 	

  
	  
 
		

      	

					 

 
    	
	 		
	
	
			 	  
  avgt  100  751.347 Â± 8.901  ns/op

Benchmark result is saved to split_precompiled_regex_146_160_Match.csv
