# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		


 
	
	 
  	
		
 ,
	 	


 


	

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 941.893 ns/op
# Warmup Iteration   2: 564.998 ns/op
# Warmup Iteration   3: 532.261 ns/op
# Warmup Iteration   4: 528.136 ns/op
# Warmup Iteration   5: 535.464 ns/op
Iteration   1: 518.973 ns/op
Iteration   2: 519.573 ns/op
Iteration   3: 521.741 ns/op
Iteration   4: 518.951 ns/op
Iteration   5: 521.703 ns/op
Iteration   6: 519.033 ns/op
Iteration   7: 518.099 ns/op
Iteration   8: 517.307 ns/op
Iteration   9: 517.996 ns/op
Iteration  10: 517.642 ns/op
Iteration  11: 518.386 ns/op
Iteration  12: 517.697 ns/op
Iteration  13: 523.283 ns/op
Iteration  14: 517.840 ns/op
Iteration  15: 520.573 ns/op
Iteration  16: 518.076 ns/op
Iteration  17: 519.741 ns/op
Iteration  18: 518.016 ns/op
Iteration  19: 519.131 ns/op
Iteration  20: 518.114 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 939.492 ns/op
# Warmup Iteration   2: 564.947 ns/op
# Warmup Iteration   3: 535.811 ns/op
# Warmup Iteration   4: 531.372 ns/op
# Warmup Iteration   5: 535.060 ns/op
Iteration   1: 525.675 ns/op
Iteration   2: 522.672 ns/op
Iteration   3: 525.936 ns/op
Iteration   4: 526.763 ns/op
Iteration   5: 525.081 ns/op
Iteration   6: 523.111 ns/op
Iteration   7: 522.362 ns/op
Iteration   8: 521.518 ns/op
Iteration   9: 522.141 ns/op
Iteration  10: 521.239 ns/op
Iteration  11: 522.125 ns/op
Iteration  12: 521.075 ns/op
Iteration  13: 522.457 ns/op
Iteration  14: 521.247 ns/op
Iteration  15: 523.201 ns/op
Iteration  16: 522.192 ns/op
Iteration  17: 523.408 ns/op
Iteration  18: 521.733 ns/op
Iteration  19: 523.312 ns/op
Iteration  20: 521.506 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 944.442 ns/op
# Warmup Iteration   2: 561.407 ns/op
# Warmup Iteration   3: 533.296 ns/op
# Warmup Iteration   4: 529.259 ns/op
# Warmup Iteration   5: 535.744 ns/op
Iteration   1: 520.185 ns/op
Iteration   2: 520.234 ns/op
Iteration   3: 522.556 ns/op
Iteration   4: 519.285 ns/op
Iteration   5: 521.848 ns/op
Iteration   6: 520.076 ns/op
Iteration   7: 519.114 ns/op
Iteration   8: 518.276 ns/op
Iteration   9: 523.038 ns/op
Iteration  10: 517.953 ns/op
Iteration  11: 518.958 ns/op
Iteration  12: 518.252 ns/op
Iteration  13: 519.705 ns/op
Iteration  14: 518.949 ns/op
Iteration  15: 521.881 ns/op
Iteration  16: 519.414 ns/op
Iteration  17: 520.496 ns/op
Iteration  18: 519.222 ns/op
Iteration  19: 520.919 ns/op
Iteration  20: 518.774 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 950.170 ns/op
# Warmup Iteration   2: 572.718 ns/op
# Warmup Iteration   3: 535.360 ns/op
# Warmup Iteration   4: 543.220 ns/op
# Warmup Iteration   5: 540.492 ns/op
Iteration   1: 531.343 ns/op
Iteration   2: 528.871 ns/op
Iteration   3: 531.216 ns/op
Iteration   4: 529.151 ns/op
Iteration   5: 531.272 ns/op
Iteration   6: 528.712 ns/op
Iteration   7: 529.011 ns/op
Iteration   8: 531.983 ns/op
Iteration   9: 529.140 ns/op
Iteration  10: 527.983 ns/op
Iteration  11: 528.291 ns/op
Iteration  12: 529.268 ns/op
Iteration  13: 534.199 ns/op
Iteration  14: 529.346 ns/op
Iteration  15: 528.148 ns/op
Iteration  16: 530.396 ns/op
Iteration  17: 529.784 ns/op
Iteration  18: 530.812 ns/op
Iteration  19: 528.685 ns/op
Iteration  20: 530.166 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 938.228 ns/op
# Warmup Iteration   2: 564.077 ns/op
# Warmup Iteration   3: 532.331 ns/op
# Warmup Iteration   4: 527.336 ns/op
# Warmup Iteration   5: 530.593 ns/op
Iteration   1: 521.256 ns/op
Iteration   2: 518.864 ns/op
Iteration   3: 520.837 ns/op
Iteration   4: 518.864 ns/op
Iteration   5: 521.444 ns/op
Iteration   6: 518.953 ns/op
Iteration   7: 517.893 ns/op
Iteration   8: 516.904 ns/op
Iteration   9: 518.329 ns/op
Iteration  10: 517.786 ns/op
Iteration  11: 519.519 ns/op
Iteration  12: 518.175 ns/op
Iteration  13: 520.061 ns/op
Iteration  14: 518.628 ns/op
Iteration  15: 521.423 ns/op
Iteration  16: 517.976 ns/op
Iteration  17: 520.178 ns/op
Iteration  18: 517.311 ns/op
Iteration  19: 518.668 ns/op
Iteration  20: 518.489 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  522.191 ±(99.9%) 1.488 ns/op [Average]
  (min, avg, max) = (516.904, 522.191, 534.199), stdev = 4.387
  CI (99.9%): [520.703, 523.679] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		


 
	
	 
  	
		
 ,
	 	


 


	

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1004.415 ns/op
# Warmup Iteration   2: 578.708 ns/op
# Warmup Iteration   3: 547.966 ns/op
# Warmup Iteration   4: 543.909 ns/op
# Warmup Iteration   5: 553.385 ns/op
Iteration   1: 534.667 ns/op
Iteration   2: 534.875 ns/op
Iteration   3: 536.507 ns/op
Iteration   4: 534.285 ns/op
Iteration   5: 537.335 ns/op
Iteration   6: 535.203 ns/op
Iteration   7: 534.283 ns/op
Iteration   8: 533.230 ns/op
Iteration   9: 534.046 ns/op
Iteration  10: 534.137 ns/op
Iteration  11: 534.819 ns/op
Iteration  12: 533.590 ns/op
Iteration  13: 535.765 ns/op
Iteration  14: 534.271 ns/op
Iteration  15: 535.610 ns/op
Iteration  16: 534.474 ns/op
Iteration  17: 537.144 ns/op
Iteration  18: 535.058 ns/op
Iteration  19: 537.848 ns/op
Iteration  20: 534.091 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 996.907 ns/op
# Warmup Iteration   2: 589.025 ns/op
# Warmup Iteration   3: 539.342 ns/op
# Warmup Iteration   4: 550.107 ns/op
# Warmup Iteration   5: 545.955 ns/op
Iteration   1: 535.538 ns/op
Iteration   2: 534.043 ns/op
Iteration   3: 535.872 ns/op
Iteration   4: 533.978 ns/op
Iteration   5: 537.058 ns/op
Iteration   6: 534.651 ns/op
Iteration   7: 533.452 ns/op
Iteration   8: 532.663 ns/op
Iteration   9: 533.206 ns/op
Iteration  10: 533.545 ns/op
Iteration  11: 535.034 ns/op
Iteration  12: 533.249 ns/op
Iteration  13: 536.078 ns/op
Iteration  14: 534.052 ns/op
Iteration  15: 535.056 ns/op
Iteration  16: 533.695 ns/op
Iteration  17: 537.189 ns/op
Iteration  18: 534.001 ns/op
Iteration  19: 535.750 ns/op
Iteration  20: 534.332 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 959.943 ns/op
# Warmup Iteration   2: 568.894 ns/op
# Warmup Iteration   3: 542.484 ns/op
# Warmup Iteration   4: 538.159 ns/op
# Warmup Iteration   5: 544.881 ns/op
Iteration   1: 529.670 ns/op
Iteration   2: 531.390 ns/op
Iteration   3: 529.232 ns/op
Iteration   4: 531.843 ns/op
Iteration   5: 529.698 ns/op
Iteration   6: 529.943 ns/op
Iteration   7: 528.993 ns/op
Iteration   8: 528.242 ns/op
Iteration   9: 529.517 ns/op
Iteration  10: 528.330 ns/op
Iteration  11: 531.289 ns/op
Iteration  12: 531.005 ns/op
Iteration  13: 530.880 ns/op
Iteration  14: 528.602 ns/op
Iteration  15: 531.439 ns/op
Iteration  16: 529.508 ns/op
Iteration  17: 533.971 ns/op
Iteration  18: 528.447 ns/op
Iteration  19: 529.877 ns/op
Iteration  20: 528.594 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 990.017 ns/op
# Warmup Iteration   2: 585.016 ns/op
# Warmup Iteration   3: 545.183 ns/op
# Warmup Iteration   4: 550.949 ns/op
# Warmup Iteration   5: 549.993 ns/op
Iteration   1: 539.001 ns/op
Iteration   2: 536.643 ns/op
Iteration   3: 538.889 ns/op
Iteration   4: 536.397 ns/op
Iteration   5: 539.391 ns/op
Iteration   6: 539.125 ns/op
Iteration   7: 537.357 ns/op
Iteration   8: 534.571 ns/op
Iteration   9: 535.864 ns/op
Iteration  10: 535.205 ns/op
Iteration  11: 536.620 ns/op
Iteration  12: 534.638 ns/op
Iteration  13: 537.312 ns/op
Iteration  14: 535.367 ns/op
Iteration  15: 549.403 ns/op
Iteration  16: 535.006 ns/op
Iteration  17: 535.067 ns/op
Iteration  18: 536.796 ns/op
Iteration  19: 535.193 ns/op
Iteration  20: 537.574 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 983.801 ns/op
# Warmup Iteration   2: 583.133 ns/op
# Warmup Iteration   3: 546.663 ns/op
# Warmup Iteration   4: 552.036 ns/op
# Warmup Iteration   5: 550.333 ns/op
Iteration   1: 540.498 ns/op
Iteration   2: 538.088 ns/op
Iteration   3: 540.038 ns/op
Iteration   4: 537.707 ns/op
Iteration   5: 540.568 ns/op
Iteration   6: 538.026 ns/op
Iteration   7: 538.182 ns/op
Iteration   8: 536.841 ns/op
Iteration   9: 537.561 ns/op
Iteration  10: 537.248 ns/op
Iteration  11: 539.141 ns/op
Iteration  12: 537.071 ns/op
Iteration  13: 538.406 ns/op
Iteration  14: 537.466 ns/op
Iteration  15: 538.113 ns/op
Iteration  16: 538.928 ns/op
Iteration  17: 537.843 ns/op
Iteration  18: 541.165 ns/op
Iteration  19: 538.347 ns/op
Iteration  20: 541.093 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  535.119 ±(99.9%) 1.181 ns/op [Average]
  (min, avg, max) = (528.242, 535.119, 549.403), stdev = 3.483
  CI (99.9%): [533.938, 536.300] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		


 
	
	 
  	
		
 ,
	 	


 


	

  avgt  100  522.191 ± 1.488  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		


 
	
	 
  	
		
 ,
	 	


 


	

  avgt  100  535.119 ± 1.181  ns/op

Benchmark result is saved to split_precompiled_regex_194_72_Match.csv
