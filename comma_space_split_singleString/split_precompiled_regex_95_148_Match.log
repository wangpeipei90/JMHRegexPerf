# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  

 
    	
				  		 		   		
,			 	  

	
 
 
	

  
			

  	
  	
  
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1080.219 ns/op
# Warmup Iteration   2: 744.917 ns/op
# Warmup Iteration   3: 672.678 ns/op
# Warmup Iteration   4: 669.347 ns/op
# Warmup Iteration   5: 673.035 ns/op
Iteration   1: 677.027 ns/op
Iteration   2: 662.755 ns/op
Iteration   3: 664.598 ns/op
Iteration   4: 661.263 ns/op
Iteration   5: 661.346 ns/op
Iteration   6: 661.588 ns/op
Iteration   7: 667.443 ns/op
Iteration   8: 660.365 ns/op
Iteration   9: 662.009 ns/op
Iteration  10: 664.158 ns/op
Iteration  11: 659.604 ns/op
Iteration  12: 659.657 ns/op
Iteration  13: 660.368 ns/op
Iteration  14: 659.040 ns/op
Iteration  15: 661.277 ns/op
Iteration  16: 659.384 ns/op
Iteration  17: 659.026 ns/op
Iteration  18: 659.039 ns/op
Iteration  19: 659.624 ns/op
Iteration  20: 661.316 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1090.674 ns/op
# Warmup Iteration   2: 761.008 ns/op
# Warmup Iteration   3: 681.492 ns/op
# Warmup Iteration   4: 678.596 ns/op
# Warmup Iteration   5: 681.766 ns/op
Iteration   1: 685.465 ns/op
Iteration   2: 669.561 ns/op
Iteration   3: 672.548 ns/op
Iteration   4: 669.946 ns/op
Iteration   5: 669.563 ns/op
Iteration   6: 669.034 ns/op
Iteration   7: 669.807 ns/op
Iteration   8: 670.403 ns/op
Iteration   9: 670.789 ns/op
Iteration  10: 670.333 ns/op
Iteration  11: 668.377 ns/op
Iteration  12: 668.216 ns/op
Iteration  13: 668.363 ns/op
Iteration  14: 668.158 ns/op
Iteration  15: 668.320 ns/op
Iteration  16: 669.809 ns/op
Iteration  17: 674.296 ns/op
Iteration  18: 668.682 ns/op
Iteration  19: 671.502 ns/op
Iteration  20: 668.662 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1093.219 ns/op
# Warmup Iteration   2: 762.561 ns/op
# Warmup Iteration   3: 684.501 ns/op
# Warmup Iteration   4: 679.980 ns/op
# Warmup Iteration   5: 683.921 ns/op
Iteration   1: 688.371 ns/op
Iteration   2: 672.700 ns/op
Iteration   3: 672.462 ns/op
Iteration   4: 675.609 ns/op
Iteration   5: 672.391 ns/op
Iteration   6: 672.042 ns/op
Iteration   7: 672.019 ns/op
Iteration   8: 672.079 ns/op
Iteration   9: 672.444 ns/op
Iteration  10: 671.754 ns/op
Iteration  11: 670.611 ns/op
Iteration  12: 670.348 ns/op
Iteration  13: 670.395 ns/op
Iteration  14: 670.272 ns/op
Iteration  15: 670.468 ns/op
Iteration  16: 675.136 ns/op
Iteration  17: 675.566 ns/op
Iteration  18: 670.652 ns/op
Iteration  19: 670.445 ns/op
Iteration  20: 671.151 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1085.032 ns/op
# Warmup Iteration   2: 748.550 ns/op
# Warmup Iteration   3: 675.819 ns/op
# Warmup Iteration   4: 671.544 ns/op
# Warmup Iteration   5: 675.843 ns/op
Iteration   1: 679.143 ns/op
Iteration   2: 663.861 ns/op
Iteration   3: 667.626 ns/op
Iteration   4: 662.976 ns/op
Iteration   5: 663.304 ns/op
Iteration   6: 662.672 ns/op
Iteration   7: 662.937 ns/op
Iteration   8: 663.222 ns/op
Iteration   9: 664.314 ns/op
Iteration  10: 661.550 ns/op
Iteration  11: 660.922 ns/op
Iteration  12: 661.515 ns/op
Iteration  13: 661.756 ns/op
Iteration  14: 661.602 ns/op
Iteration  15: 663.125 ns/op
Iteration  16: 661.889 ns/op
Iteration  17: 662.164 ns/op
Iteration  18: 662.099 ns/op
Iteration  19: 661.991 ns/op
Iteration  20: 662.300 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1084.822 ns/op
# Warmup Iteration   2: 757.200 ns/op
# Warmup Iteration   3: 683.453 ns/op
# Warmup Iteration   4: 679.288 ns/op
# Warmup Iteration   5: 682.648 ns/op
Iteration   1: 687.554 ns/op
Iteration   2: 672.075 ns/op
Iteration   3: 674.473 ns/op
Iteration   4: 671.673 ns/op
Iteration   5: 671.784 ns/op
Iteration   6: 671.771 ns/op
Iteration   7: 671.330 ns/op
Iteration   8: 670.987 ns/op
Iteration   9: 673.288 ns/op
Iteration  10: 671.017 ns/op
Iteration  11: 669.807 ns/op
Iteration  12: 669.366 ns/op
Iteration  13: 669.082 ns/op
Iteration  14: 669.283 ns/op
Iteration  15: 670.198 ns/op
Iteration  16: 669.556 ns/op
Iteration  17: 673.345 ns/op
Iteration  18: 670.510 ns/op
Iteration  19: 670.084 ns/op
Iteration  20: 670.238 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  668.180 ±(99.9%) 2.021 ns/op [Average]
  (min, avg, max) = (659.026, 668.180, 688.371), stdev = 5.958
  CI (99.9%): [666.160, 670.201] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  

 
    	
				  		 		   		
,			 	  

	
 
 
	

  
			

  	
  	
  
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1149.342 ns/op
# Warmup Iteration   2: 791.664 ns/op
# Warmup Iteration   3: 705.530 ns/op
# Warmup Iteration   4: 702.052 ns/op
# Warmup Iteration   5: 709.413 ns/op
Iteration   1: 711.805 ns/op
Iteration   2: 693.623 ns/op
Iteration   3: 693.684 ns/op
Iteration   4: 696.519 ns/op
Iteration   5: 693.753 ns/op
Iteration   6: 693.797 ns/op
Iteration   7: 694.032 ns/op
Iteration   8: 693.921 ns/op
Iteration   9: 694.055 ns/op
Iteration  10: 691.903 ns/op
Iteration  11: 692.684 ns/op
Iteration  12: 691.174 ns/op
Iteration  13: 691.172 ns/op
Iteration  14: 691.211 ns/op
Iteration  15: 691.632 ns/op
Iteration  16: 691.825 ns/op
Iteration  17: 691.948 ns/op
Iteration  18: 703.987 ns/op
Iteration  19: 691.818 ns/op
Iteration  20: 692.321 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1154.325 ns/op
# Warmup Iteration   2: 783.161 ns/op
# Warmup Iteration   3: 696.722 ns/op
# Warmup Iteration   4: 692.788 ns/op
# Warmup Iteration   5: 696.275 ns/op
Iteration   1: 700.735 ns/op
Iteration   2: 684.824 ns/op
Iteration   3: 684.100 ns/op
Iteration   4: 687.857 ns/op
Iteration   5: 685.046 ns/op
Iteration   6: 684.236 ns/op
Iteration   7: 684.167 ns/op
Iteration   8: 684.118 ns/op
Iteration   9: 684.290 ns/op
Iteration  10: 683.585 ns/op
Iteration  11: 682.456 ns/op
Iteration  12: 682.348 ns/op
Iteration  13: 682.563 ns/op
Iteration  14: 682.449 ns/op
Iteration  15: 682.731 ns/op
Iteration  16: 684.832 ns/op
Iteration  17: 683.443 ns/op
Iteration  18: 683.695 ns/op
Iteration  19: 682.869 ns/op
Iteration  20: 683.802 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1150.321 ns/op
# Warmup Iteration   2: 788.842 ns/op
# Warmup Iteration   3: 705.653 ns/op
# Warmup Iteration   4: 699.587 ns/op
# Warmup Iteration   5: 703.038 ns/op
Iteration   1: 707.412 ns/op
Iteration   2: 691.319 ns/op
Iteration   3: 691.039 ns/op
Iteration   4: 694.429 ns/op
Iteration   5: 691.569 ns/op
Iteration   6: 691.955 ns/op
Iteration   7: 691.863 ns/op
Iteration   8: 691.900 ns/op
Iteration   9: 693.462 ns/op
Iteration  10: 697.207 ns/op
Iteration  11: 691.183 ns/op
Iteration  12: 689.532 ns/op
Iteration  13: 690.068 ns/op
Iteration  14: 689.815 ns/op
Iteration  15: 689.771 ns/op
Iteration  16: 690.928 ns/op
Iteration  17: 689.921 ns/op
Iteration  18: 691.473 ns/op
Iteration  19: 690.225 ns/op
Iteration  20: 689.863 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1178.603 ns/op
# Warmup Iteration   2: 830.588 ns/op
# Warmup Iteration   3: 733.382 ns/op
# Warmup Iteration   4: 729.038 ns/op
# Warmup Iteration   5: 733.210 ns/op
Iteration   1: 738.092 ns/op
Iteration   2: 722.690 ns/op
Iteration   3: 721.151 ns/op
Iteration   4: 720.897 ns/op
Iteration   5: 721.177 ns/op
Iteration   6: 720.995 ns/op
Iteration   7: 723.908 ns/op
Iteration   8: 723.292 ns/op
Iteration   9: 721.724 ns/op
Iteration  10: 718.398 ns/op
Iteration  11: 718.783 ns/op
Iteration  12: 718.812 ns/op
Iteration  13: 719.211 ns/op
Iteration  14: 718.807 ns/op
Iteration  15: 718.839 ns/op
Iteration  16: 719.077 ns/op
Iteration  17: 718.950 ns/op
Iteration  18: 720.736 ns/op
Iteration  19: 718.779 ns/op
Iteration  20: 718.021 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1154.750 ns/op
# Warmup Iteration   2: 787.153 ns/op
# Warmup Iteration   3: 698.479 ns/op
# Warmup Iteration   4: 694.220 ns/op
# Warmup Iteration   5: 698.453 ns/op
Iteration   1: 702.371 ns/op
Iteration   2: 686.250 ns/op
Iteration   3: 685.753 ns/op
Iteration   4: 688.886 ns/op
Iteration   5: 685.890 ns/op
Iteration   6: 686.560 ns/op
Iteration   7: 687.032 ns/op
Iteration   8: 687.079 ns/op
Iteration   9: 687.261 ns/op
Iteration  10: 686.721 ns/op
Iteration  11: 686.032 ns/op
Iteration  12: 684.912 ns/op
Iteration  13: 685.550 ns/op
Iteration  14: 685.505 ns/op
Iteration  15: 686.056 ns/op
Iteration  16: 685.051 ns/op
Iteration  17: 686.786 ns/op
Iteration  18: 684.600 ns/op
Iteration  19: 688.938 ns/op
Iteration  20: 686.876 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  695.924 ±(99.9%) 4.668 ns/op [Average]
  (min, avg, max) = (682.348, 695.924, 738.092), stdev = 13.765
  CI (99.9%): [691.256, 700.592] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   

 
    	
				  		 		   		
,			 	  

	
 
 
	

  
			

  	
  	
  
  avgt  100  668.180 ± 2.021  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   

 
    	
				  		 		   		
,			 	  

	
 
 
	

  
			

  	
  	
  
  avgt  100  695.924 ± 4.668  ns/op

Benchmark result is saved to split_precompiled_regex_95_148_Match.csv
