# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

  
		
 
 	,
	 	
				 
 
	
				

			 
	
	 	

	 
  		
 	
	

				
	 	
  	 	 




 	  	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1197.440 ns/op
# Warmup Iteration   2: 898.332 ns/op
# Warmup Iteration   3: 766.314 ns/op
# Warmup Iteration   4: 768.965 ns/op
# Warmup Iteration   5: 772.047 ns/op
Iteration   1: 776.497 ns/op
Iteration   2: 781.796 ns/op
Iteration   3: 762.709 ns/op
Iteration   4: 763.762 ns/op
Iteration   5: 762.951 ns/op
Iteration   6: 762.711 ns/op
Iteration   7: 766.455 ns/op
Iteration   8: 762.234 ns/op
Iteration   9: 762.642 ns/op
Iteration  10: 762.444 ns/op
Iteration  11: 760.183 ns/op
Iteration  12: 759.620 ns/op
Iteration  13: 759.916 ns/op
Iteration  14: 759.594 ns/op
Iteration  15: 765.853 ns/op
Iteration  16: 760.159 ns/op
Iteration  17: 762.024 ns/op
Iteration  18: 761.533 ns/op
Iteration  19: 760.747 ns/op
Iteration  20: 761.358 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1191.733 ns/op
# Warmup Iteration   2: 891.405 ns/op
# Warmup Iteration   3: 765.265 ns/op
# Warmup Iteration   4: 768.070 ns/op
# Warmup Iteration   5: 775.184 ns/op
Iteration   1: 778.667 ns/op
Iteration   2: 773.153 ns/op
Iteration   3: 762.786 ns/op
Iteration   4: 765.171 ns/op
Iteration   5: 761.346 ns/op
Iteration   6: 762.601 ns/op
Iteration   7: 761.711 ns/op
Iteration   8: 762.329 ns/op
Iteration   9: 762.454 ns/op
Iteration  10: 762.832 ns/op
Iteration  11: 760.472 ns/op
Iteration  12: 761.515 ns/op
Iteration  13: 760.211 ns/op
Iteration  14: 759.705 ns/op
Iteration  15: 759.614 ns/op
Iteration  16: 760.638 ns/op
Iteration  17: 765.325 ns/op
Iteration  18: 759.998 ns/op
Iteration  19: 760.200 ns/op
Iteration  20: 761.448 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1241.223 ns/op
# Warmup Iteration   2: 902.152 ns/op
# Warmup Iteration   3: 764.722 ns/op
# Warmup Iteration   4: 766.861 ns/op
# Warmup Iteration   5: 775.055 ns/op
Iteration   1: 778.384 ns/op
Iteration   2: 768.363 ns/op
Iteration   3: 764.083 ns/op
Iteration   4: 763.774 ns/op
Iteration   5: 761.186 ns/op
Iteration   6: 760.609 ns/op
Iteration   7: 761.386 ns/op
Iteration   8: 761.035 ns/op
Iteration   9: 761.121 ns/op
Iteration  10: 761.122 ns/op
Iteration  11: 761.175 ns/op
Iteration  12: 758.939 ns/op
Iteration  13: 759.013 ns/op
Iteration  14: 759.211 ns/op
Iteration  15: 764.248 ns/op
Iteration  16: 758.969 ns/op
Iteration  17: 759.572 ns/op
Iteration  18: 759.555 ns/op
Iteration  19: 758.838 ns/op
Iteration  20: 758.819 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1229.979 ns/op
# Warmup Iteration   2: 908.506 ns/op
# Warmup Iteration   3: 768.231 ns/op
# Warmup Iteration   4: 770.875 ns/op
# Warmup Iteration   5: 773.960 ns/op
Iteration   1: 778.743 ns/op
Iteration   2: 783.204 ns/op
Iteration   3: 765.641 ns/op
Iteration   4: 764.517 ns/op
Iteration   5: 764.170 ns/op
Iteration   6: 764.535 ns/op
Iteration   7: 765.571 ns/op
Iteration   8: 765.390 ns/op
Iteration   9: 768.409 ns/op
Iteration  10: 765.373 ns/op
Iteration  11: 762.921 ns/op
Iteration  12: 761.733 ns/op
Iteration  13: 761.733 ns/op
Iteration  14: 761.656 ns/op
Iteration  15: 762.848 ns/op
Iteration  16: 762.012 ns/op
Iteration  17: 762.083 ns/op
Iteration  18: 762.988 ns/op
Iteration  19: 761.993 ns/op
Iteration  20: 762.878 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1182.099 ns/op
# Warmup Iteration   2: 884.884 ns/op
# Warmup Iteration   3: 760.645 ns/op
# Warmup Iteration   4: 762.658 ns/op
# Warmup Iteration   5: 777.672 ns/op
Iteration   1: 774.872 ns/op
Iteration   2: 762.837 ns/op
Iteration   3: 756.824 ns/op
Iteration   4: 756.819 ns/op
Iteration   5: 762.093 ns/op
Iteration   6: 760.097 ns/op
Iteration   7: 756.836 ns/op
Iteration   8: 756.826 ns/op
Iteration   9: 756.892 ns/op
Iteration  10: 757.536 ns/op
Iteration  11: 755.682 ns/op
Iteration  12: 754.163 ns/op
Iteration  13: 754.280 ns/op
Iteration  14: 754.169 ns/op
Iteration  15: 760.000 ns/op
Iteration  16: 754.347 ns/op
Iteration  17: 754.657 ns/op
Iteration  18: 754.483 ns/op
Iteration  19: 754.580 ns/op
Iteration  20: 754.200 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  762.374 Â±(99.9%) 1.921 ns/op [Average]
  (min, avg, max) = (754.163, 762.374, 783.204), stdev = 5.663
  CI (99.9%): [760.453, 764.294] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

  
		
 
 	,
	 	
				 
 
	
				

			 
	
	 	

	 
  		
 	
	

				
	 	
  	 	 




 	  	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1230.278 ns/op
# Warmup Iteration   2: 932.438 ns/op
# Warmup Iteration   3: 805.071 ns/op
# Warmup Iteration   4: 800.549 ns/op
# Warmup Iteration   5: 807.566 ns/op
Iteration   1: 808.630 ns/op
Iteration   2: 816.098 ns/op
Iteration   3: 795.932 ns/op
Iteration   4: 796.412 ns/op
Iteration   5: 797.391 ns/op
Iteration   6: 795.401 ns/op
Iteration   7: 794.293 ns/op
Iteration   8: 796.125 ns/op
Iteration   9: 794.034 ns/op
Iteration  10: 794.228 ns/op
Iteration  11: 795.436 ns/op
Iteration  12: 794.260 ns/op
Iteration  13: 791.815 ns/op
Iteration  14: 792.623 ns/op
Iteration  15: 791.436 ns/op
Iteration  16: 792.950 ns/op
Iteration  17: 799.173 ns/op
Iteration  18: 794.504 ns/op
Iteration  19: 794.296 ns/op
Iteration  20: 795.039 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1215.455 ns/op
# Warmup Iteration   2: 923.488 ns/op
# Warmup Iteration   3: 796.368 ns/op
# Warmup Iteration   4: 799.082 ns/op
# Warmup Iteration   5: 802.374 ns/op
Iteration   1: 806.752 ns/op
Iteration   2: 811.735 ns/op
Iteration   3: 793.849 ns/op
Iteration   4: 793.286 ns/op
Iteration   5: 793.122 ns/op
Iteration   6: 793.993 ns/op
Iteration   7: 793.466 ns/op
Iteration   8: 793.628 ns/op
Iteration   9: 794.239 ns/op
Iteration  10: 794.348 ns/op
Iteration  11: 803.628 ns/op
Iteration  12: 804.541 ns/op
Iteration  13: 797.516 ns/op
Iteration  14: 793.603 ns/op
Iteration  15: 797.837 ns/op
Iteration  16: 791.743 ns/op
Iteration  17: 791.772 ns/op
Iteration  18: 792.818 ns/op
Iteration  19: 791.550 ns/op
Iteration  20: 792.233 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1151.547 ns/op
# Warmup Iteration   2: 822.829 ns/op
# Warmup Iteration   3: 730.939 ns/op
# Warmup Iteration   4: 726.935 ns/op
# Warmup Iteration   5: 730.381 ns/op
Iteration   1: 734.573 ns/op
Iteration   2: 718.631 ns/op
Iteration   3: 718.744 ns/op
Iteration   4: 718.447 ns/op
Iteration   5: 719.375 ns/op
Iteration   6: 722.594 ns/op
Iteration   7: 726.272 ns/op
Iteration   8: 725.179 ns/op
Iteration   9: 720.771 ns/op
Iteration  10: 725.829 ns/op
Iteration  11: 717.057 ns/op
Iteration  12: 717.170 ns/op
Iteration  13: 717.369 ns/op
Iteration  14: 716.876 ns/op
Iteration  15: 717.020 ns/op
Iteration  16: 716.661 ns/op
Iteration  17: 718.877 ns/op
Iteration  18: 716.608 ns/op
Iteration  19: 739.465 ns/op
Iteration  20: 717.445 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1239.491 ns/op
# Warmup Iteration   2: 922.571 ns/op
# Warmup Iteration   3: 788.753 ns/op
# Warmup Iteration   4: 791.245 ns/op
# Warmup Iteration   5: 794.478 ns/op
Iteration   1: 797.569 ns/op
Iteration   2: 800.669 ns/op
Iteration   3: 784.240 ns/op
Iteration   4: 786.127 ns/op
Iteration   5: 785.761 ns/op
Iteration   6: 784.805 ns/op
Iteration   7: 784.763 ns/op
Iteration   8: 784.823 ns/op
Iteration   9: 784.787 ns/op
Iteration  10: 784.244 ns/op
Iteration  11: 784.932 ns/op
Iteration  12: 781.840 ns/op
Iteration  13: 787.614 ns/op
Iteration  14: 783.389 ns/op
Iteration  15: 781.951 ns/op
Iteration  16: 781.687 ns/op
Iteration  17: 783.364 ns/op
Iteration  18: 782.341 ns/op
Iteration  19: 782.599 ns/op
Iteration  20: 783.159 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1223.510 ns/op
# Warmup Iteration   2: 935.373 ns/op
# Warmup Iteration   3: 801.152 ns/op
# Warmup Iteration   4: 806.698 ns/op
# Warmup Iteration   5: 805.310 ns/op
Iteration   1: 809.561 ns/op
Iteration   2: 813.942 ns/op
Iteration   3: 796.328 ns/op
Iteration   4: 796.076 ns/op
Iteration   5: 795.764 ns/op
Iteration   6: 796.321 ns/op
Iteration   7: 794.626 ns/op
Iteration   8: 794.202 ns/op
Iteration   9: 799.574 ns/op
Iteration  10: 795.357 ns/op
Iteration  11: 795.552 ns/op
Iteration  12: 793.590 ns/op
Iteration  13: 793.109 ns/op
Iteration  14: 793.479 ns/op
Iteration  15: 793.395 ns/op
Iteration  16: 793.612 ns/op
Iteration  17: 799.275 ns/op
Iteration  18: 793.801 ns/op
Iteration  19: 796.754 ns/op
Iteration  20: 794.316 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  779.300 Â±(99.9%) 10.176 ns/op [Average]
  (min, avg, max) = (716.608, 779.300, 816.098), stdev = 30.004
  CI (99.9%): [769.124, 789.476] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                  (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	

  
		
 
 	,
	 	
				 
 
	
				

			 
	
	 	

	 
  		
 	
	

				
	 	
  	 	 




 	  	  avgt  100  762.374 Â±  1.921  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	

  
		
 
 	,
	 	
				 
 
	
				

			 
	
	 	

	 
  		
 	
	

				
	 	
  	 	 




 	  	  avgt  100  779.300 Â± 10.176  ns/op

Benchmark result is saved to split_precompiled_regex_74_169_Match.csv
