# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 		
 	
 	
  

	   	 
,

   
		
		
  	 	 	  


 
 


  



   	
 
	
		
 	
	 	 
 	
  
 	
		
 	
 	

 	 
 

	
		 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1229.483 ns/op
# Warmup Iteration   2: 894.744 ns/op
# Warmup Iteration   3: 763.793 ns/op
# Warmup Iteration   4: 765.689 ns/op
# Warmup Iteration   5: 772.151 ns/op
Iteration   1: 777.372 ns/op
Iteration   2: 776.763 ns/op
Iteration   3: 759.956 ns/op
Iteration   4: 759.805 ns/op
Iteration   5: 763.975 ns/op
Iteration   6: 760.082 ns/op
Iteration   7: 760.353 ns/op
Iteration   8: 760.214 ns/op
Iteration   9: 760.391 ns/op
Iteration  10: 760.654 ns/op
Iteration  11: 761.077 ns/op
Iteration  12: 758.397 ns/op
Iteration  13: 758.266 ns/op
Iteration  14: 758.125 ns/op
Iteration  15: 758.425 ns/op
Iteration  16: 759.585 ns/op
Iteration  17: 758.335 ns/op
Iteration  18: 758.615 ns/op
Iteration  19: 758.577 ns/op
Iteration  20: 763.787 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1328.358 ns/op
# Warmup Iteration   2: 1027.477 ns/op
# Warmup Iteration   3: 863.182 ns/op
# Warmup Iteration   4: 860.374 ns/op
# Warmup Iteration   5: 863.626 ns/op
Iteration   1: 868.148 ns/op
Iteration   2: 874.040 ns/op
Iteration   3: 854.757 ns/op
Iteration   4: 854.605 ns/op
Iteration   5: 849.564 ns/op
Iteration   6: 854.537 ns/op
Iteration   7: 854.194 ns/op
Iteration   8: 853.716 ns/op
Iteration   9: 853.907 ns/op
Iteration  10: 853.005 ns/op
Iteration  11: 853.099 ns/op
Iteration  12: 854.233 ns/op
Iteration  13: 867.130 ns/op
Iteration  14: 851.678 ns/op
Iteration  15: 850.987 ns/op
Iteration  16: 849.012 ns/op
Iteration  17: 857.282 ns/op
Iteration  18: 851.178 ns/op
Iteration  19: 852.828 ns/op
Iteration  20: 852.702 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1320.375 ns/op
# Warmup Iteration   2: 1022.900 ns/op
# Warmup Iteration   3: 855.309 ns/op
# Warmup Iteration   4: 857.865 ns/op
# Warmup Iteration   5: 861.363 ns/op
Iteration   1: 865.098 ns/op
Iteration   2: 870.082 ns/op
Iteration   3: 853.986 ns/op
Iteration   4: 849.794 ns/op
Iteration   5: 850.317 ns/op
Iteration   6: 846.390 ns/op
Iteration   7: 850.899 ns/op
Iteration   8: 854.509 ns/op
Iteration   9: 851.891 ns/op
Iteration  10: 851.001 ns/op
Iteration  11: 855.515 ns/op
Iteration  12: 852.939 ns/op
Iteration  13: 849.764 ns/op
Iteration  14: 848.773 ns/op
Iteration  15: 849.227 ns/op
Iteration  16: 849.551 ns/op
Iteration  17: 846.959 ns/op
Iteration  18: 849.559 ns/op
Iteration  19: 850.016 ns/op
Iteration  20: 853.817 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1316.506 ns/op
# Warmup Iteration   2: 1022.584 ns/op
# Warmup Iteration   3: 851.927 ns/op
# Warmup Iteration   4: 854.267 ns/op
# Warmup Iteration   5: 857.728 ns/op
Iteration   1: 862.873 ns/op
Iteration   2: 868.560 ns/op
Iteration   3: 848.785 ns/op
Iteration   4: 848.083 ns/op
Iteration   5: 848.687 ns/op
Iteration   6: 843.884 ns/op
Iteration   7: 848.194 ns/op
Iteration   8: 848.027 ns/op
Iteration   9: 847.749 ns/op
Iteration  10: 848.376 ns/op
Iteration  11: 848.639 ns/op
Iteration  12: 849.282 ns/op
Iteration  13: 849.303 ns/op
Iteration  14: 847.100 ns/op
Iteration  15: 846.528 ns/op
Iteration  16: 847.853 ns/op
Iteration  17: 843.976 ns/op
Iteration  18: 848.273 ns/op
Iteration  19: 846.807 ns/op
Iteration  20: 846.842 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1318.152 ns/op
# Warmup Iteration   2: 1022.152 ns/op
# Warmup Iteration   3: 853.676 ns/op
# Warmup Iteration   4: 856.508 ns/op
# Warmup Iteration   5: 859.562 ns/op
Iteration   1: 863.863 ns/op
Iteration   2: 869.143 ns/op
Iteration   3: 849.072 ns/op
Iteration   4: 848.501 ns/op
Iteration   5: 848.746 ns/op
Iteration   6: 846.527 ns/op
Iteration   7: 849.318 ns/op
Iteration   8: 848.726 ns/op
Iteration   9: 849.573 ns/op
Iteration  10: 851.894 ns/op
Iteration  11: 855.406 ns/op
Iteration  12: 851.086 ns/op
Iteration  13: 849.378 ns/op
Iteration  14: 849.686 ns/op
Iteration  15: 849.761 ns/op
Iteration  16: 848.712 ns/op
Iteration  17: 846.196 ns/op
Iteration  18: 848.737 ns/op
Iteration  19: 849.594 ns/op
Iteration  20: 855.882 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  834.111 Â±(99.9%) 12.523 ns/op [Average]
  (min, avg, max) = (758.125, 834.111, 874.040), stdev = 36.926
  CI (99.9%): [821.587, 846.634] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 		
 	
 	
  

	   	 
,

   
		
		
  	 	 	  


 
 


  



   	
 
	
		
 	
	 	 
 	
  
 	
		
 	
 	

 	 
 

	
		 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1342.434 ns/op
# Warmup Iteration   2: 1059.479 ns/op
# Warmup Iteration   3: 878.518 ns/op
# Warmup Iteration   4: 880.270 ns/op
# Warmup Iteration   5: 883.796 ns/op
Iteration   1: 887.623 ns/op
Iteration   2: 892.679 ns/op
Iteration   3: 873.120 ns/op
Iteration   4: 872.840 ns/op
Iteration   5: 869.256 ns/op
Iteration   6: 873.794 ns/op
Iteration   7: 872.937 ns/op
Iteration   8: 874.115 ns/op
Iteration   9: 873.595 ns/op
Iteration  10: 873.500 ns/op
Iteration  11: 873.102 ns/op
Iteration  12: 874.723 ns/op
Iteration  13: 871.855 ns/op
Iteration  14: 872.170 ns/op
Iteration  15: 871.836 ns/op
Iteration  16: 868.630 ns/op
Iteration  17: 872.325 ns/op
Iteration  18: 872.745 ns/op
Iteration  19: 872.999 ns/op
Iteration  20: 873.755 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1223.042 ns/op
# Warmup Iteration   2: 924.355 ns/op
# Warmup Iteration   3: 788.968 ns/op
# Warmup Iteration   4: 790.607 ns/op
# Warmup Iteration   5: 793.725 ns/op
Iteration   1: 798.097 ns/op
Iteration   2: 802.229 ns/op
Iteration   3: 785.084 ns/op
Iteration   4: 784.716 ns/op
Iteration   5: 784.542 ns/op
Iteration   6: 784.866 ns/op
Iteration   7: 784.547 ns/op
Iteration   8: 784.705 ns/op
Iteration   9: 784.537 ns/op
Iteration  10: 784.759 ns/op
Iteration  11: 785.882 ns/op
Iteration  12: 781.706 ns/op
Iteration  13: 789.751 ns/op
Iteration  14: 781.699 ns/op
Iteration  15: 782.877 ns/op
Iteration  16: 782.495 ns/op
Iteration  17: 782.046 ns/op
Iteration  18: 781.618 ns/op
Iteration  19: 781.783 ns/op
Iteration  20: 783.257 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1332.745 ns/op
# Warmup Iteration   2: 1055.315 ns/op
# Warmup Iteration   3: 880.543 ns/op
# Warmup Iteration   4: 886.312 ns/op
# Warmup Iteration   5: 886.928 ns/op
Iteration   1: 894.075 ns/op
Iteration   2: 895.420 ns/op
Iteration   3: 879.155 ns/op
Iteration   4: 881.015 ns/op
Iteration   5: 878.179 ns/op
Iteration   6: 880.158 ns/op
Iteration   7: 875.460 ns/op
Iteration   8: 876.201 ns/op
Iteration   9: 877.241 ns/op
Iteration  10: 883.846 ns/op
Iteration  11: 882.771 ns/op
Iteration  12: 879.529 ns/op
Iteration  13: 876.322 ns/op
Iteration  14: 874.286 ns/op
Iteration  15: 872.118 ns/op
Iteration  16: 875.776 ns/op
Iteration  17: 875.515 ns/op
Iteration  18: 874.510 ns/op
Iteration  19: 875.158 ns/op
Iteration  20: 876.418 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1325.525 ns/op
# Warmup Iteration   2: 1051.127 ns/op
# Warmup Iteration   3: 874.180 ns/op
# Warmup Iteration   4: 876.554 ns/op
# Warmup Iteration   5: 879.777 ns/op
Iteration   1: 884.223 ns/op
Iteration   2: 889.767 ns/op
Iteration   3: 869.228 ns/op
Iteration   4: 869.770 ns/op
Iteration   5: 869.882 ns/op
Iteration   6: 865.698 ns/op
Iteration   7: 869.663 ns/op
Iteration   8: 871.116 ns/op
Iteration   9: 875.451 ns/op
Iteration  10: 876.928 ns/op
Iteration  11: 871.916 ns/op
Iteration  12: 881.347 ns/op
Iteration  13: 874.309 ns/op
Iteration  14: 868.386 ns/op
Iteration  15: 870.589 ns/op
Iteration  16: 876.224 ns/op
Iteration  17: 866.172 ns/op
Iteration  18: 868.229 ns/op
Iteration  19: 867.783 ns/op
Iteration  20: 868.886 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1220.475 ns/op
# Warmup Iteration   2: 888.912 ns/op
# Warmup Iteration   3: 762.224 ns/op
# Warmup Iteration   4: 765.995 ns/op
# Warmup Iteration   5: 783.744 ns/op
Iteration   1: 775.689 ns/op
Iteration   2: 757.767 ns/op
Iteration   3: 757.759 ns/op
Iteration   4: 758.294 ns/op
Iteration   5: 758.388 ns/op
Iteration   6: 758.762 ns/op
Iteration   7: 758.625 ns/op
Iteration   8: 758.520 ns/op
Iteration   9: 758.677 ns/op
Iteration  10: 759.010 ns/op
Iteration  11: 755.748 ns/op
Iteration  12: 755.861 ns/op
Iteration  13: 755.348 ns/op
Iteration  14: 759.926 ns/op
Iteration  15: 756.419 ns/op
Iteration  16: 755.159 ns/op
Iteration  17: 755.707 ns/op
Iteration  18: 755.641 ns/op
Iteration  19: 755.619 ns/op
Iteration  20: 755.729 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  834.002 Â±(99.9%) 17.663 ns/op [Average]
  (min, avg, max) = (755.159, 834.002, 895.420), stdev = 52.078
  CI (99.9%): [816.339, 851.664] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                          (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
 		
 	
 	
  

	   	 
,

   
		
		
  	 	 	  


 
 


  



   	
 
	
		
 	
	 	 
 	
  
 	
		
 	
 	

 	 
 

	
		 	  avgt  100  834.111 Â± 12.523  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
 		
 	
 	
  

	   	 
,

   
		
		
  	 	 	  


 
 


  



   	
 
	
		
 	
	 	 
 	
  
 	
		
 	
 	

 	 
 

	
		 	  avgt  100  834.002 Â± 17.663  ns/op

Benchmark result is saved to split_precompiled_regex_133_209_Match.csv
