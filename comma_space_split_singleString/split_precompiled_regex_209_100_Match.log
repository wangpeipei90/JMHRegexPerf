# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	 		

		
   		

 
 	 	



		

 






  

 
, 	 

 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1007.801 ns/op
# Warmup Iteration   2: 653.573 ns/op
# Warmup Iteration   3: 588.313 ns/op
# Warmup Iteration   4: 595.686 ns/op
# Warmup Iteration   5: 605.006 ns/op
Iteration   1: 584.298 ns/op
Iteration   2: 583.989 ns/op
Iteration   3: 587.395 ns/op
Iteration   4: 583.989 ns/op
Iteration   5: 584.346 ns/op
Iteration   6: 586.700 ns/op
Iteration   7: 584.539 ns/op
Iteration   8: 582.322 ns/op
Iteration   9: 583.035 ns/op
Iteration  10: 582.033 ns/op
Iteration  11: 582.127 ns/op
Iteration  12: 583.234 ns/op
Iteration  13: 583.322 ns/op
Iteration  14: 582.439 ns/op
Iteration  15: 584.872 ns/op
Iteration  16: 582.542 ns/op
Iteration  17: 582.437 ns/op
Iteration  18: 587.767 ns/op
Iteration  19: 582.951 ns/op
Iteration  20: 583.069 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 986.011 ns/op
# Warmup Iteration   2: 627.718 ns/op
# Warmup Iteration   3: 575.170 ns/op
# Warmup Iteration   4: 589.639 ns/op
# Warmup Iteration   5: 582.676 ns/op
Iteration   1: 569.789 ns/op
Iteration   2: 571.986 ns/op
Iteration   3: 569.015 ns/op
Iteration   4: 568.803 ns/op
Iteration   5: 571.379 ns/op
Iteration   6: 568.053 ns/op
Iteration   7: 568.596 ns/op
Iteration   8: 567.846 ns/op
Iteration   9: 566.876 ns/op
Iteration  10: 572.025 ns/op
Iteration  11: 566.739 ns/op
Iteration  12: 566.804 ns/op
Iteration  13: 567.877 ns/op
Iteration  14: 566.687 ns/op
Iteration  15: 567.051 ns/op
Iteration  16: 568.275 ns/op
Iteration  17: 567.991 ns/op
Iteration  18: 568.614 ns/op
Iteration  19: 571.649 ns/op
Iteration  20: 568.198 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 990.404 ns/op
# Warmup Iteration   2: 631.188 ns/op
# Warmup Iteration   3: 575.684 ns/op
# Warmup Iteration   4: 591.057 ns/op
# Warmup Iteration   5: 585.236 ns/op
Iteration   1: 571.121 ns/op
Iteration   2: 575.685 ns/op
Iteration   3: 571.906 ns/op
Iteration   4: 570.817 ns/op
Iteration   5: 573.942 ns/op
Iteration   6: 571.054 ns/op
Iteration   7: 570.669 ns/op
Iteration   8: 570.019 ns/op
Iteration   9: 569.038 ns/op
Iteration  10: 569.206 ns/op
Iteration  11: 570.625 ns/op
Iteration  12: 569.420 ns/op
Iteration  13: 570.950 ns/op
Iteration  14: 569.913 ns/op
Iteration  15: 570.865 ns/op
Iteration  16: 574.066 ns/op
Iteration  17: 570.995 ns/op
Iteration  18: 571.242 ns/op
Iteration  19: 572.411 ns/op
Iteration  20: 571.272 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 993.221 ns/op
# Warmup Iteration   2: 629.885 ns/op
# Warmup Iteration   3: 576.246 ns/op
# Warmup Iteration   4: 591.570 ns/op
# Warmup Iteration   5: 583.884 ns/op
Iteration   1: 571.288 ns/op
Iteration   2: 579.077 ns/op
Iteration   3: 571.013 ns/op
Iteration   4: 570.981 ns/op
Iteration   5: 573.306 ns/op
Iteration   6: 570.107 ns/op
Iteration   7: 570.871 ns/op
Iteration   8: 569.906 ns/op
Iteration   9: 569.031 ns/op
Iteration  10: 569.025 ns/op
Iteration  11: 569.962 ns/op
Iteration  12: 568.996 ns/op
Iteration  13: 571.561 ns/op
Iteration  14: 570.371 ns/op
Iteration  15: 569.374 ns/op
Iteration  16: 573.699 ns/op
Iteration  17: 570.706 ns/op
Iteration  18: 570.149 ns/op
Iteration  19: 573.672 ns/op
Iteration  20: 570.881 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1011.348 ns/op
# Warmup Iteration   2: 654.413 ns/op
# Warmup Iteration   3: 592.892 ns/op
# Warmup Iteration   4: 599.703 ns/op
# Warmup Iteration   5: 611.390 ns/op
Iteration   1: 588.696 ns/op
Iteration   2: 588.567 ns/op
Iteration   3: 591.031 ns/op
Iteration   4: 588.539 ns/op
Iteration   5: 588.373 ns/op
Iteration   6: 591.229 ns/op
Iteration   7: 588.312 ns/op
Iteration   8: 586.442 ns/op
Iteration   9: 587.299 ns/op
Iteration  10: 586.273 ns/op
Iteration  11: 586.691 ns/op
Iteration  12: 587.285 ns/op
Iteration  13: 586.459 ns/op
Iteration  14: 591.833 ns/op
Iteration  15: 586.568 ns/op
Iteration  16: 587.832 ns/op
Iteration  17: 586.615 ns/op
Iteration  18: 586.982 ns/op
Iteration  19: 588.545 ns/op
Iteration  20: 587.664 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  576.621 ±(99.9%) 2.728 ns/op [Average]
  (min, avg, max) = (566.687, 576.621, 591.833), stdev = 8.044
  CI (99.9%): [573.893, 579.349] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	 		

		
   		

 
 	 	



		

 






  

 
, 	 

 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1010.564 ns/op
# Warmup Iteration   2: 631.172 ns/op
# Warmup Iteration   3: 583.428 ns/op
# Warmup Iteration   4: 598.568 ns/op
# Warmup Iteration   5: 591.878 ns/op
Iteration   1: 581.653 ns/op
Iteration   2: 581.074 ns/op
Iteration   3: 578.434 ns/op
Iteration   4: 580.636 ns/op
Iteration   5: 578.494 ns/op
Iteration   6: 578.316 ns/op
Iteration   7: 579.363 ns/op
Iteration   8: 576.584 ns/op
Iteration   9: 576.565 ns/op
Iteration  10: 578.102 ns/op
Iteration  11: 580.418 ns/op
Iteration  12: 578.128 ns/op
Iteration  13: 578.809 ns/op
Iteration  14: 576.907 ns/op
Iteration  15: 578.575 ns/op
Iteration  16: 577.249 ns/op
Iteration  17: 577.231 ns/op
Iteration  18: 579.475 ns/op
Iteration  19: 577.655 ns/op
Iteration  20: 578.688 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1037.819 ns/op
# Warmup Iteration   2: 655.911 ns/op
# Warmup Iteration   3: 590.852 ns/op
# Warmup Iteration   4: 605.885 ns/op
# Warmup Iteration   5: 599.461 ns/op
Iteration   1: 585.695 ns/op
Iteration   2: 589.321 ns/op
Iteration   3: 586.160 ns/op
Iteration   4: 586.455 ns/op
Iteration   5: 589.123 ns/op
Iteration   6: 584.790 ns/op
Iteration   7: 585.811 ns/op
Iteration   8: 584.884 ns/op
Iteration   9: 584.139 ns/op
Iteration  10: 584.291 ns/op
Iteration  11: 587.878 ns/op
Iteration  12: 585.921 ns/op
Iteration  13: 584.627 ns/op
Iteration  14: 586.966 ns/op
Iteration  15: 585.011 ns/op
Iteration  16: 585.547 ns/op
Iteration  17: 588.960 ns/op
Iteration  18: 586.506 ns/op
Iteration  19: 589.397 ns/op
Iteration  20: 585.752 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1065.926 ns/op
# Warmup Iteration   2: 668.899 ns/op
# Warmup Iteration   3: 600.897 ns/op
# Warmup Iteration   4: 607.889 ns/op
# Warmup Iteration   5: 618.483 ns/op
Iteration   1: 595.996 ns/op
Iteration   2: 595.668 ns/op
Iteration   3: 598.038 ns/op
Iteration   4: 595.662 ns/op
Iteration   5: 596.012 ns/op
Iteration   6: 598.560 ns/op
Iteration   7: 595.833 ns/op
Iteration   8: 594.734 ns/op
Iteration   9: 599.722 ns/op
Iteration  10: 594.609 ns/op
Iteration  11: 595.228 ns/op
Iteration  12: 597.028 ns/op
Iteration  13: 594.784 ns/op
Iteration  14: 594.832 ns/op
Iteration  15: 595.835 ns/op
Iteration  16: 595.116 ns/op
Iteration  17: 596.179 ns/op
Iteration  18: 599.527 ns/op
Iteration  19: 595.785 ns/op
Iteration  20: 597.373 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1053.068 ns/op
# Warmup Iteration   2: 640.468 ns/op
# Warmup Iteration   3: 576.885 ns/op
# Warmup Iteration   4: 592.381 ns/op
# Warmup Iteration   5: 585.853 ns/op
Iteration   1: 572.652 ns/op
Iteration   2: 575.260 ns/op
Iteration   3: 572.242 ns/op
Iteration   4: 574.907 ns/op
Iteration   5: 572.370 ns/op
Iteration   6: 572.657 ns/op
Iteration   7: 573.364 ns/op
Iteration   8: 570.180 ns/op
Iteration   9: 570.330 ns/op
Iteration  10: 571.548 ns/op
Iteration  11: 570.644 ns/op
Iteration  12: 573.183 ns/op
Iteration  13: 571.144 ns/op
Iteration  14: 571.512 ns/op
Iteration  15: 573.996 ns/op
Iteration  16: 571.161 ns/op
Iteration  17: 572.476 ns/op
Iteration  18: 574.487 ns/op
Iteration  19: 571.300 ns/op
Iteration  20: 572.976 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1042.555 ns/op
# Warmup Iteration   2: 645.387 ns/op
# Warmup Iteration   3: 581.892 ns/op
# Warmup Iteration   4: 596.053 ns/op
# Warmup Iteration   5: 590.573 ns/op
Iteration   1: 576.867 ns/op
Iteration   2: 579.371 ns/op
Iteration   3: 576.466 ns/op
Iteration   4: 576.356 ns/op
Iteration   5: 578.868 ns/op
Iteration   6: 577.177 ns/op
Iteration   7: 578.745 ns/op
Iteration   8: 575.371 ns/op
Iteration   9: 575.300 ns/op
Iteration  10: 576.812 ns/op
Iteration  11: 575.646 ns/op
Iteration  12: 577.604 ns/op
Iteration  13: 578.956 ns/op
Iteration  14: 576.004 ns/op
Iteration  15: 577.419 ns/op
Iteration  16: 576.758 ns/op
Iteration  17: 576.406 ns/op
Iteration  18: 580.326 ns/op
Iteration  19: 577.292 ns/op
Iteration  20: 576.255 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  582.185 ±(99.9%) 2.898 ns/op [Average]
  (min, avg, max) = (570.180, 582.185, 599.722), stdev = 8.545
  CI (99.9%): [579.287, 585.083] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	 		

		
   		

 
 	 	



		

 






  

 
, 	 

 	  avgt  100  576.621 ± 2.728  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	 		

		
   		

 
 	 	



		

 






  

 
, 	 

 	  avgt  100  582.185 ± 2.898  ns/op

Benchmark result is saved to split_precompiled_regex_209_100_Match.csv
