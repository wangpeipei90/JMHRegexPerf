# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
 	


 	  

	 
  
 
  
	  	
  	
	
 	



	 
  	, 
 		 	 	 		
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1049.019 ns/op
# Warmup Iteration   2: 700.599 ns/op
# Warmup Iteration   3: 624.074 ns/op
# Warmup Iteration   4: 630.985 ns/op
# Warmup Iteration   5: 635.301 ns/op
Iteration   1: 634.694 ns/op
Iteration   2: 620.426 ns/op
Iteration   3: 620.811 ns/op
Iteration   4: 620.275 ns/op
Iteration   5: 623.747 ns/op
Iteration   6: 620.421 ns/op
Iteration   7: 620.760 ns/op
Iteration   8: 620.233 ns/op
Iteration   9: 619.620 ns/op
Iteration  10: 618.659 ns/op
Iteration  11: 618.732 ns/op
Iteration  12: 618.787 ns/op
Iteration  13: 619.907 ns/op
Iteration  14: 619.148 ns/op
Iteration  15: 619.722 ns/op
Iteration  16: 619.689 ns/op
Iteration  17: 621.895 ns/op
Iteration  18: 619.705 ns/op
Iteration  19: 618.021 ns/op
Iteration  20: 619.148 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1037.577 ns/op
# Warmup Iteration   2: 694.238 ns/op
# Warmup Iteration   3: 620.298 ns/op
# Warmup Iteration   4: 622.785 ns/op
# Warmup Iteration   5: 631.625 ns/op
Iteration   1: 626.585 ns/op
Iteration   2: 615.284 ns/op
Iteration   3: 614.919 ns/op
Iteration   4: 615.492 ns/op
Iteration   5: 618.284 ns/op
Iteration   6: 615.240 ns/op
Iteration   7: 615.561 ns/op
Iteration   8: 615.752 ns/op
Iteration   9: 614.534 ns/op
Iteration  10: 614.222 ns/op
Iteration  11: 613.508 ns/op
Iteration  12: 614.957 ns/op
Iteration  13: 613.474 ns/op
Iteration  14: 613.817 ns/op
Iteration  15: 614.145 ns/op
Iteration  16: 615.671 ns/op
Iteration  17: 613.405 ns/op
Iteration  18: 613.935 ns/op
Iteration  19: 613.471 ns/op
Iteration  20: 616.017 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1053.245 ns/op
# Warmup Iteration   2: 716.801 ns/op
# Warmup Iteration   3: 643.017 ns/op
# Warmup Iteration   4: 640.292 ns/op
# Warmup Iteration   5: 643.433 ns/op
Iteration   1: 650.706 ns/op
Iteration   2: 632.362 ns/op
Iteration   3: 632.213 ns/op
Iteration   4: 632.591 ns/op
Iteration   5: 632.701 ns/op
Iteration   6: 635.691 ns/op
Iteration   7: 632.292 ns/op
Iteration   8: 632.340 ns/op
Iteration   9: 630.544 ns/op
Iteration  10: 631.410 ns/op
Iteration  11: 630.302 ns/op
Iteration  12: 630.344 ns/op
Iteration  13: 630.321 ns/op
Iteration  14: 630.244 ns/op
Iteration  15: 631.420 ns/op
Iteration  16: 630.370 ns/op
Iteration  17: 630.447 ns/op
Iteration  18: 635.261 ns/op
Iteration  19: 633.710 ns/op
Iteration  20: 631.141 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1035.387 ns/op
# Warmup Iteration   2: 697.273 ns/op
# Warmup Iteration   3: 625.057 ns/op
# Warmup Iteration   4: 627.527 ns/op
# Warmup Iteration   5: 631.022 ns/op
Iteration   1: 634.638 ns/op
Iteration   2: 620.091 ns/op
Iteration   3: 619.548 ns/op
Iteration   4: 619.853 ns/op
Iteration   5: 622.792 ns/op
Iteration   6: 619.553 ns/op
Iteration   7: 619.443 ns/op
Iteration   8: 619.893 ns/op
Iteration   9: 619.740 ns/op
Iteration  10: 617.989 ns/op
Iteration  11: 618.261 ns/op
Iteration  12: 618.998 ns/op
Iteration  13: 620.619 ns/op
Iteration  14: 617.808 ns/op
Iteration  15: 618.453 ns/op
Iteration  16: 618.026 ns/op
Iteration  17: 619.295 ns/op
Iteration  18: 617.922 ns/op
Iteration  19: 617.829 ns/op
Iteration  20: 618.141 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1120.708 ns/op
# Warmup Iteration   2: 721.481 ns/op
# Warmup Iteration   3: 641.758 ns/op
# Warmup Iteration   4: 638.526 ns/op
# Warmup Iteration   5: 641.978 ns/op
Iteration   1: 649.098 ns/op
Iteration   2: 630.678 ns/op
Iteration   3: 630.273 ns/op
Iteration   4: 630.877 ns/op
Iteration   5: 630.584 ns/op
Iteration   6: 633.176 ns/op
Iteration   7: 632.905 ns/op
Iteration   8: 631.971 ns/op
Iteration   9: 629.991 ns/op
Iteration  10: 631.028 ns/op
Iteration  11: 629.243 ns/op
Iteration  12: 629.927 ns/op
Iteration  13: 629.472 ns/op
Iteration  14: 629.869 ns/op
Iteration  15: 632.721 ns/op
Iteration  16: 631.531 ns/op
Iteration  17: 631.163 ns/op
Iteration  18: 629.843 ns/op
Iteration  19: 632.546 ns/op
Iteration  20: 631.362 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  624.162 ±(99.9%) 2.683 ns/op [Average]
  (min, avg, max) = (613.405, 624.162, 650.706), stdev = 7.910
  CI (99.9%): [621.479, 626.845] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
 	


 	  

	 
  
 
  
	  	
  	
	
 	



	 
  	, 
 		 	 	 		
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1100.286 ns/op
# Warmup Iteration   2: 729.402 ns/op
# Warmup Iteration   3: 659.127 ns/op
# Warmup Iteration   4: 656.448 ns/op
# Warmup Iteration   5: 659.520 ns/op
Iteration   1: 666.694 ns/op
Iteration   2: 648.064 ns/op
Iteration   3: 648.889 ns/op
Iteration   4: 648.588 ns/op
Iteration   5: 648.219 ns/op
Iteration   6: 650.860 ns/op
Iteration   7: 647.629 ns/op
Iteration   8: 649.374 ns/op
Iteration   9: 648.505 ns/op
Iteration  10: 647.932 ns/op
Iteration  11: 647.976 ns/op
Iteration  12: 647.029 ns/op
Iteration  13: 646.903 ns/op
Iteration  14: 646.729 ns/op
Iteration  15: 647.646 ns/op
Iteration  16: 648.548 ns/op
Iteration  17: 648.534 ns/op
Iteration  18: 647.567 ns/op
Iteration  19: 650.646 ns/op
Iteration  20: 648.288 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1073.290 ns/op
# Warmup Iteration   2: 729.819 ns/op
# Warmup Iteration   3: 653.705 ns/op
# Warmup Iteration   4: 656.793 ns/op
# Warmup Iteration   5: 660.019 ns/op
Iteration   1: 665.659 ns/op
Iteration   2: 648.620 ns/op
Iteration   3: 648.151 ns/op
Iteration   4: 648.663 ns/op
Iteration   5: 648.505 ns/op
Iteration   6: 651.573 ns/op
Iteration   7: 648.577 ns/op
Iteration   8: 648.166 ns/op
Iteration   9: 646.319 ns/op
Iteration  10: 647.809 ns/op
Iteration  11: 646.799 ns/op
Iteration  12: 646.478 ns/op
Iteration  13: 645.881 ns/op
Iteration  14: 647.001 ns/op
Iteration  15: 648.883 ns/op
Iteration  16: 646.414 ns/op
Iteration  17: 653.054 ns/op
Iteration  18: 647.123 ns/op
Iteration  19: 651.092 ns/op
Iteration  20: 649.550 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1097.085 ns/op
# Warmup Iteration   2: 729.609 ns/op
# Warmup Iteration   3: 659.075 ns/op
# Warmup Iteration   4: 656.243 ns/op
# Warmup Iteration   5: 659.942 ns/op
Iteration   1: 668.122 ns/op
Iteration   2: 648.838 ns/op
Iteration   3: 648.989 ns/op
Iteration   4: 649.879 ns/op
Iteration   5: 649.353 ns/op
Iteration   6: 652.321 ns/op
Iteration   7: 648.726 ns/op
Iteration   8: 648.650 ns/op
Iteration   9: 646.813 ns/op
Iteration  10: 648.272 ns/op
Iteration  11: 651.870 ns/op
Iteration  12: 647.056 ns/op
Iteration  13: 647.303 ns/op
Iteration  14: 647.708 ns/op
Iteration  15: 650.943 ns/op
Iteration  16: 647.669 ns/op
Iteration  17: 651.393 ns/op
Iteration  18: 654.272 ns/op
Iteration  19: 647.081 ns/op
Iteration  20: 649.482 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1100.559 ns/op
# Warmup Iteration   2: 722.033 ns/op
# Warmup Iteration   3: 639.513 ns/op
# Warmup Iteration   4: 642.351 ns/op
# Warmup Iteration   5: 645.093 ns/op
Iteration   1: 651.730 ns/op
Iteration   2: 636.222 ns/op
Iteration   3: 634.251 ns/op
Iteration   4: 634.077 ns/op
Iteration   5: 637.338 ns/op
Iteration   6: 634.040 ns/op
Iteration   7: 633.684 ns/op
Iteration   8: 634.491 ns/op
Iteration   9: 634.517 ns/op
Iteration  10: 631.798 ns/op
Iteration  11: 632.020 ns/op
Iteration  12: 631.997 ns/op
Iteration  13: 639.050 ns/op
Iteration  14: 632.252 ns/op
Iteration  15: 632.382 ns/op
Iteration  16: 632.437 ns/op
Iteration  17: 635.674 ns/op
Iteration  18: 633.805 ns/op
Iteration  19: 632.889 ns/op
Iteration  20: 633.724 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1125.351 ns/op
# Warmup Iteration   2: 759.662 ns/op
# Warmup Iteration   3: 683.387 ns/op
# Warmup Iteration   4: 676.935 ns/op
# Warmup Iteration   5: 681.145 ns/op
Iteration   1: 688.088 ns/op
Iteration   2: 669.764 ns/op
Iteration   3: 672.652 ns/op
Iteration   4: 669.121 ns/op
Iteration   5: 669.674 ns/op
Iteration   6: 670.146 ns/op
Iteration   7: 669.744 ns/op
Iteration   8: 673.879 ns/op
Iteration   9: 669.642 ns/op
Iteration  10: 668.300 ns/op
Iteration  11: 668.029 ns/op
Iteration  12: 668.437 ns/op
Iteration  13: 668.267 ns/op
Iteration  14: 670.659 ns/op
Iteration  15: 669.373 ns/op
Iteration  16: 669.472 ns/op
Iteration  17: 669.301 ns/op
Iteration  18: 668.136 ns/op
Iteration  19: 670.016 ns/op
Iteration  20: 668.687 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  650.834 ±(99.9%) 4.147 ns/op [Average]
  (min, avg, max) = (631.798, 650.834, 688.088), stdev = 12.226
  CI (99.9%): [646.688, 654.981] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                          (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 
 	


 	  

	 
  
 
  
	  	
  	
	
 	



	 
  	, 
 		 	 	 		
  avgt  100  624.162 ± 2.683  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 
 	


 	  

	 
  
 
  
	  	
  	
	
 	



	 
  	, 
 		 	 	 		
  avgt  100  650.834 ± 4.147  ns/op

Benchmark result is saved to split_precompiled_regex_184_129_Match.csv
