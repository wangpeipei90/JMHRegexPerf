# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 		
 
 ,	 	 
	


		
  	
	
   

  

	 	
 	
	
	 	 
    
  
	 	 

 	
 			 	

		
					 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1088.327 ns/op
# Warmup Iteration   2: 759.346 ns/op
# Warmup Iteration   3: 682.251 ns/op
# Warmup Iteration   4: 677.881 ns/op
# Warmup Iteration   5: 681.831 ns/op
Iteration   1: 685.491 ns/op
Iteration   2: 669.994 ns/op
Iteration   3: 672.377 ns/op
Iteration   4: 674.499 ns/op
Iteration   5: 669.845 ns/op
Iteration   6: 670.291 ns/op
Iteration   7: 669.428 ns/op
Iteration   8: 669.364 ns/op
Iteration   9: 670.254 ns/op
Iteration  10: 669.310 ns/op
Iteration  11: 668.457 ns/op
Iteration  12: 667.944 ns/op
Iteration  13: 667.919 ns/op
Iteration  14: 668.169 ns/op
Iteration  15: 668.187 ns/op
Iteration  16: 669.809 ns/op
Iteration  17: 668.747 ns/op
Iteration  18: 668.562 ns/op
Iteration  19: 668.672 ns/op
Iteration  20: 668.790 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1216.542 ns/op
# Warmup Iteration   2: 847.116 ns/op
# Warmup Iteration   3: 722.542 ns/op
# Warmup Iteration   4: 738.440 ns/op
# Warmup Iteration   5: 732.524 ns/op
Iteration   1: 736.505 ns/op
Iteration   2: 718.473 ns/op
Iteration   3: 718.918 ns/op
Iteration   4: 719.042 ns/op
Iteration   5: 719.239 ns/op
Iteration   6: 718.846 ns/op
Iteration   7: 718.962 ns/op
Iteration   8: 719.293 ns/op
Iteration   9: 718.545 ns/op
Iteration  10: 718.605 ns/op
Iteration  11: 716.691 ns/op
Iteration  12: 723.616 ns/op
Iteration  13: 717.143 ns/op
Iteration  14: 717.043 ns/op
Iteration  15: 716.203 ns/op
Iteration  16: 716.621 ns/op
Iteration  17: 716.277 ns/op
Iteration  18: 716.200 ns/op
Iteration  19: 717.317 ns/op
Iteration  20: 716.816 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1205.384 ns/op
# Warmup Iteration   2: 849.312 ns/op
# Warmup Iteration   3: 726.421 ns/op
# Warmup Iteration   4: 742.012 ns/op
# Warmup Iteration   5: 737.122 ns/op
Iteration   1: 741.205 ns/op
Iteration   2: 725.387 ns/op
Iteration   3: 723.641 ns/op
Iteration   4: 723.056 ns/op
Iteration   5: 723.241 ns/op
Iteration   6: 723.569 ns/op
Iteration   7: 723.444 ns/op
Iteration   8: 723.564 ns/op
Iteration   9: 723.061 ns/op
Iteration  10: 723.318 ns/op
Iteration  11: 720.906 ns/op
Iteration  12: 722.149 ns/op
Iteration  13: 726.053 ns/op
Iteration  14: 721.143 ns/op
Iteration  15: 721.047 ns/op
Iteration  16: 721.516 ns/op
Iteration  17: 721.499 ns/op
Iteration  18: 721.557 ns/op
Iteration  19: 722.471 ns/op
Iteration  20: 721.380 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1090.369 ns/op
# Warmup Iteration   2: 758.773 ns/op
# Warmup Iteration   3: 681.605 ns/op
# Warmup Iteration   4: 678.956 ns/op
# Warmup Iteration   5: 681.279 ns/op
Iteration   1: 685.620 ns/op
Iteration   2: 671.360 ns/op
Iteration   3: 672.927 ns/op
Iteration   4: 669.532 ns/op
Iteration   5: 669.675 ns/op
Iteration   6: 669.923 ns/op
Iteration   7: 672.583 ns/op
Iteration   8: 669.711 ns/op
Iteration   9: 670.002 ns/op
Iteration  10: 669.166 ns/op
Iteration  11: 667.884 ns/op
Iteration  12: 667.738 ns/op
Iteration  13: 667.674 ns/op
Iteration  14: 667.852 ns/op
Iteration  15: 667.919 ns/op
Iteration  16: 670.351 ns/op
Iteration  17: 669.905 ns/op
Iteration  18: 668.473 ns/op
Iteration  19: 668.227 ns/op
Iteration  20: 668.632 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1178.101 ns/op
# Warmup Iteration   2: 872.272 ns/op
# Warmup Iteration   3: 752.555 ns/op
# Warmup Iteration   4: 757.288 ns/op
# Warmup Iteration   5: 770.381 ns/op
Iteration   1: 766.383 ns/op
Iteration   2: 748.250 ns/op
Iteration   3: 747.950 ns/op
Iteration   4: 747.612 ns/op
Iteration   5: 747.812 ns/op
Iteration   6: 748.021 ns/op
Iteration   7: 747.777 ns/op
Iteration   8: 747.557 ns/op
Iteration   9: 747.367 ns/op
Iteration  10: 748.018 ns/op
Iteration  11: 747.621 ns/op
Iteration  12: 746.126 ns/op
Iteration  13: 746.629 ns/op
Iteration  14: 745.595 ns/op
Iteration  15: 745.512 ns/op
Iteration  16: 745.749 ns/op
Iteration  17: 745.774 ns/op
Iteration  18: 745.806 ns/op
Iteration  19: 745.433 ns/op
Iteration  20: 746.486 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  706.223 Â±(99.9%) 10.639 ns/op [Average]
  (min, avg, max) = (667.674, 706.223, 766.383), stdev = 31.370
  CI (99.9%): [695.584, 716.862] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 		
 
 ,	 	 
	


		
  	
	
   

  

	 	
 	
	
	 	 
    
  
	 	 

 	
 			 	

		
					 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1122.622 ns/op
# Warmup Iteration   2: 807.519 ns/op
# Warmup Iteration   3: 710.691 ns/op
# Warmup Iteration   4: 708.062 ns/op
# Warmup Iteration   5: 711.076 ns/op
Iteration   1: 715.875 ns/op
Iteration   2: 700.283 ns/op
Iteration   3: 699.260 ns/op
Iteration   4: 698.820 ns/op
Iteration   5: 702.236 ns/op
Iteration   6: 698.199 ns/op
Iteration   7: 698.114 ns/op
Iteration   8: 697.861 ns/op
Iteration   9: 698.595 ns/op
Iteration  10: 696.571 ns/op
Iteration  11: 696.646 ns/op
Iteration  12: 697.673 ns/op
Iteration  13: 696.488 ns/op
Iteration  14: 696.122 ns/op
Iteration  15: 696.018 ns/op
Iteration  16: 701.359 ns/op
Iteration  17: 696.432 ns/op
Iteration  18: 696.323 ns/op
Iteration  19: 699.583 ns/op
Iteration  20: 696.510 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1147.349 ns/op
# Warmup Iteration   2: 796.372 ns/op
# Warmup Iteration   3: 712.074 ns/op
# Warmup Iteration   4: 707.063 ns/op
# Warmup Iteration   5: 710.242 ns/op
Iteration   1: 714.457 ns/op
Iteration   2: 700.037 ns/op
Iteration   3: 700.160 ns/op
Iteration   4: 699.987 ns/op
Iteration   5: 702.642 ns/op
Iteration   6: 699.055 ns/op
Iteration   7: 698.084 ns/op
Iteration   8: 700.046 ns/op
Iteration   9: 698.517 ns/op
Iteration  10: 697.947 ns/op
Iteration  11: 696.647 ns/op
Iteration  12: 703.154 ns/op
Iteration  13: 697.636 ns/op
Iteration  14: 698.330 ns/op
Iteration  15: 698.408 ns/op
Iteration  16: 698.255 ns/op
Iteration  17: 698.972 ns/op
Iteration  18: 698.304 ns/op
Iteration  19: 697.670 ns/op
Iteration  20: 699.901 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1125.515 ns/op
# Warmup Iteration   2: 792.762 ns/op
# Warmup Iteration   3: 713.371 ns/op
# Warmup Iteration   4: 709.192 ns/op
# Warmup Iteration   5: 712.933 ns/op
Iteration   1: 717.573 ns/op
Iteration   2: 701.332 ns/op
Iteration   3: 701.024 ns/op
Iteration   4: 701.037 ns/op
Iteration   5: 704.891 ns/op
Iteration   6: 705.260 ns/op
Iteration   7: 703.315 ns/op
Iteration   8: 700.684 ns/op
Iteration   9: 701.320 ns/op
Iteration  10: 699.504 ns/op
Iteration  11: 700.315 ns/op
Iteration  12: 701.248 ns/op
Iteration  13: 701.974 ns/op
Iteration  14: 700.200 ns/op
Iteration  15: 700.129 ns/op
Iteration  16: 699.875 ns/op
Iteration  17: 703.170 ns/op
Iteration  18: 700.760 ns/op
Iteration  19: 708.957 ns/op
Iteration  20: 703.361 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1145.806 ns/op
# Warmup Iteration   2: 797.660 ns/op
# Warmup Iteration   3: 713.669 ns/op
# Warmup Iteration   4: 708.850 ns/op
# Warmup Iteration   5: 713.230 ns/op
Iteration   1: 717.308 ns/op
Iteration   2: 701.600 ns/op
Iteration   3: 701.080 ns/op
Iteration   4: 701.807 ns/op
Iteration   5: 704.355 ns/op
Iteration   6: 701.255 ns/op
Iteration   7: 702.073 ns/op
Iteration   8: 703.913 ns/op
Iteration   9: 702.140 ns/op
Iteration  10: 699.390 ns/op
Iteration  11: 708.548 ns/op
Iteration  12: 699.108 ns/op
Iteration  13: 701.321 ns/op
Iteration  14: 699.294 ns/op
Iteration  15: 699.419 ns/op
Iteration  16: 699.984 ns/op
Iteration  17: 699.623 ns/op
Iteration  18: 698.957 ns/op
Iteration  19: 699.313 ns/op
Iteration  20: 702.869 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1161.041 ns/op
# Warmup Iteration   2: 787.853 ns/op
# Warmup Iteration   3: 700.021 ns/op
# Warmup Iteration   4: 695.864 ns/op
# Warmup Iteration   5: 700.013 ns/op
Iteration   1: 704.515 ns/op
Iteration   2: 688.119 ns/op
Iteration   3: 688.285 ns/op
Iteration   4: 692.109 ns/op
Iteration   5: 688.266 ns/op
Iteration   6: 688.305 ns/op
Iteration   7: 687.926 ns/op
Iteration   8: 688.333 ns/op
Iteration   9: 689.043 ns/op
Iteration  10: 686.931 ns/op
Iteration  11: 687.930 ns/op
Iteration  12: 686.674 ns/op
Iteration  13: 686.651 ns/op
Iteration  14: 686.509 ns/op
Iteration  15: 693.155 ns/op
Iteration  16: 692.291 ns/op
Iteration  17: 688.636 ns/op
Iteration  18: 687.457 ns/op
Iteration  19: 687.894 ns/op
Iteration  20: 688.390 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  698.639 Â±(99.9%) 2.145 ns/op [Average]
  (min, avg, max) = (686.509, 698.639, 717.573), stdev = 6.325
  CI (99.9%): [696.494, 700.784] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                           (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	 		
 
 ,	 	 
	


		
  	
	
   

  

	 	
 	
	
	 	 
    
  
	 	 

 	
 			 	

		
					   avgt  100  706.223 Â± 10.639  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	 		
 
 ,	 	 
	


		
  	
	
   

  

	 	
 	
	
	 	 
    
  
	 	 

 	
 			 	

		
					   avgt  100  698.639 Â±  2.145  ns/op

Benchmark result is saved to split_precompiled_regex_203_162_Match.csv
