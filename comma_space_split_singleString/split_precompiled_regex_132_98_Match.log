# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = ,	
 	      
	
 
	 							 
	 

			    
	
 	

   )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 999.273 ns/op
# Warmup Iteration   2: 626.371 ns/op
# Warmup Iteration   3: 572.374 ns/op
# Warmup Iteration   4: 587.927 ns/op
# Warmup Iteration   5: 582.261 ns/op
Iteration   1: 570.731 ns/op
Iteration   2: 570.753 ns/op
Iteration   3: 567.878 ns/op
Iteration   4: 568.287 ns/op
Iteration   5: 570.933 ns/op
Iteration   6: 568.095 ns/op
Iteration   7: 568.067 ns/op
Iteration   8: 566.966 ns/op
Iteration   9: 565.811 ns/op
Iteration  10: 567.260 ns/op
Iteration  11: 566.410 ns/op
Iteration  12: 566.094 ns/op
Iteration  13: 567.071 ns/op
Iteration  14: 566.293 ns/op
Iteration  15: 566.289 ns/op
Iteration  16: 568.003 ns/op
Iteration  17: 566.369 ns/op
Iteration  18: 568.450 ns/op
Iteration  19: 566.369 ns/op
Iteration  20: 570.015 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1033.218 ns/op
# Warmup Iteration   2: 683.334 ns/op
# Warmup Iteration   3: 616.434 ns/op
# Warmup Iteration   4: 619.173 ns/op
# Warmup Iteration   5: 640.732 ns/op
Iteration   1: 615.327 ns/op
Iteration   2: 611.439 ns/op
Iteration   3: 611.565 ns/op
Iteration   4: 614.976 ns/op
Iteration   5: 610.914 ns/op
Iteration   6: 611.385 ns/op
Iteration   7: 611.949 ns/op
Iteration   8: 612.826 ns/op
Iteration   9: 609.658 ns/op
Iteration  10: 609.527 ns/op
Iteration  11: 609.453 ns/op
Iteration  12: 610.797 ns/op
Iteration  13: 610.195 ns/op
Iteration  14: 610.285 ns/op
Iteration  15: 612.074 ns/op
Iteration  16: 609.912 ns/op
Iteration  17: 610.494 ns/op
Iteration  18: 610.976 ns/op
Iteration  19: 614.602 ns/op
Iteration  20: 630.896 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 991.086 ns/op
# Warmup Iteration   2: 635.967 ns/op
# Warmup Iteration   3: 582.360 ns/op
# Warmup Iteration   4: 598.453 ns/op
# Warmup Iteration   5: 589.266 ns/op
Iteration   1: 578.396 ns/op
Iteration   2: 579.219 ns/op
Iteration   3: 577.029 ns/op
Iteration   4: 580.010 ns/op
Iteration   5: 583.109 ns/op
Iteration   6: 576.930 ns/op
Iteration   7: 577.326 ns/op
Iteration   8: 575.343 ns/op
Iteration   9: 574.489 ns/op
Iteration  10: 574.692 ns/op
Iteration  11: 578.174 ns/op
Iteration  12: 574.738 ns/op
Iteration  13: 575.784 ns/op
Iteration  14: 576.255 ns/op
Iteration  15: 574.646 ns/op
Iteration  16: 575.167 ns/op
Iteration  17: 577.104 ns/op
Iteration  18: 574.867 ns/op
Iteration  19: 574.981 ns/op
Iteration  20: 577.439 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 997.646 ns/op
# Warmup Iteration   2: 638.097 ns/op
# Warmup Iteration   3: 582.948 ns/op
# Warmup Iteration   4: 597.438 ns/op
# Warmup Iteration   5: 592.283 ns/op
Iteration   1: 578.071 ns/op
Iteration   2: 580.937 ns/op
Iteration   3: 578.255 ns/op
Iteration   4: 578.012 ns/op
Iteration   5: 581.217 ns/op
Iteration   6: 578.426 ns/op
Iteration   7: 578.864 ns/op
Iteration   8: 577.984 ns/op
Iteration   9: 577.061 ns/op
Iteration  10: 577.256 ns/op
Iteration  11: 579.840 ns/op
Iteration  12: 577.266 ns/op
Iteration  13: 577.236 ns/op
Iteration  14: 579.114 ns/op
Iteration  15: 577.837 ns/op
Iteration  16: 577.593 ns/op
Iteration  17: 579.794 ns/op
Iteration  18: 577.522 ns/op
Iteration  19: 577.396 ns/op
Iteration  20: 579.905 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 990.473 ns/op
# Warmup Iteration   2: 630.787 ns/op
# Warmup Iteration   3: 579.452 ns/op
# Warmup Iteration   4: 594.469 ns/op
# Warmup Iteration   5: 587.910 ns/op
Iteration   1: 575.693 ns/op
Iteration   2: 577.389 ns/op
Iteration   3: 574.355 ns/op
Iteration   4: 574.116 ns/op
Iteration   5: 577.851 ns/op
Iteration   6: 574.695 ns/op
Iteration   7: 574.941 ns/op
Iteration   8: 574.548 ns/op
Iteration   9: 573.417 ns/op
Iteration  10: 572.818 ns/op
Iteration  11: 578.156 ns/op
Iteration  12: 573.805 ns/op
Iteration  13: 573.249 ns/op
Iteration  14: 578.763 ns/op
Iteration  15: 576.945 ns/op
Iteration  16: 573.755 ns/op
Iteration  17: 574.657 ns/op
Iteration  18: 573.456 ns/op
Iteration  19: 572.863 ns/op
Iteration  20: 577.944 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  582.141 ±(99.9%) 5.387 ns/op [Average]
  (min, avg, max) = (565.811, 582.141, 630.896), stdev = 15.883
  CI (99.9%): [576.754, 587.528] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = ,	
 	      
	
 
	 							 
	 

			    
	
 	

   )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1012.076 ns/op
# Warmup Iteration   2: 645.686 ns/op
# Warmup Iteration   3: 592.351 ns/op
# Warmup Iteration   4: 608.714 ns/op
# Warmup Iteration   5: 602.208 ns/op
Iteration   1: 588.908 ns/op
Iteration   2: 590.233 ns/op
Iteration   3: 587.466 ns/op
Iteration   4: 588.194 ns/op
Iteration   5: 591.065 ns/op
Iteration   6: 587.590 ns/op
Iteration   7: 588.160 ns/op
Iteration   8: 587.270 ns/op
Iteration   9: 586.254 ns/op
Iteration  10: 586.408 ns/op
Iteration  11: 587.201 ns/op
Iteration  12: 586.619 ns/op
Iteration  13: 586.341 ns/op
Iteration  14: 587.786 ns/op
Iteration  15: 590.935 ns/op
Iteration  16: 587.268 ns/op
Iteration  17: 588.626 ns/op
Iteration  18: 587.133 ns/op
Iteration  19: 586.746 ns/op
Iteration  20: 595.629 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1026.053 ns/op
# Warmup Iteration   2: 638.010 ns/op
# Warmup Iteration   3: 581.755 ns/op
# Warmup Iteration   4: 597.418 ns/op
# Warmup Iteration   5: 590.709 ns/op
Iteration   1: 577.507 ns/op
Iteration   2: 579.916 ns/op
Iteration   3: 576.037 ns/op
Iteration   4: 576.624 ns/op
Iteration   5: 578.814 ns/op
Iteration   6: 576.339 ns/op
Iteration   7: 577.486 ns/op
Iteration   8: 574.843 ns/op
Iteration   9: 575.161 ns/op
Iteration  10: 576.644 ns/op
Iteration  11: 575.516 ns/op
Iteration  12: 580.057 ns/op
Iteration  13: 577.615 ns/op
Iteration  14: 575.533 ns/op
Iteration  15: 577.811 ns/op
Iteration  16: 576.575 ns/op
Iteration  17: 577.339 ns/op
Iteration  18: 580.136 ns/op
Iteration  19: 576.914 ns/op
Iteration  20: 576.951 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1057.273 ns/op
# Warmup Iteration   2: 659.627 ns/op
# Warmup Iteration   3: 593.450 ns/op
# Warmup Iteration   4: 604.347 ns/op
# Warmup Iteration   5: 603.205 ns/op
Iteration   1: 587.475 ns/op
Iteration   2: 591.210 ns/op
Iteration   3: 587.751 ns/op
Iteration   4: 588.665 ns/op
Iteration   5: 590.590 ns/op
Iteration   6: 587.486 ns/op
Iteration   7: 588.436 ns/op
Iteration   8: 588.787 ns/op
Iteration   9: 587.678 ns/op
Iteration  10: 588.258 ns/op
Iteration  11: 588.891 ns/op
Iteration  12: 587.677 ns/op
Iteration  13: 586.047 ns/op
Iteration  14: 587.835 ns/op
Iteration  15: 587.904 ns/op
Iteration  16: 587.673 ns/op
Iteration  17: 589.892 ns/op
Iteration  18: 587.088 ns/op
Iteration  19: 587.839 ns/op
Iteration  20: 588.448 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1021.621 ns/op
# Warmup Iteration   2: 662.521 ns/op
# Warmup Iteration   3: 604.786 ns/op
# Warmup Iteration   4: 615.708 ns/op
# Warmup Iteration   5: 619.130 ns/op
Iteration   1: 599.883 ns/op
Iteration   2: 600.419 ns/op
Iteration   3: 602.740 ns/op
Iteration   4: 600.520 ns/op
Iteration   5: 599.696 ns/op
Iteration   6: 602.688 ns/op
Iteration   7: 599.797 ns/op
Iteration   8: 597.939 ns/op
Iteration   9: 598.714 ns/op
Iteration  10: 598.123 ns/op
Iteration  11: 598.161 ns/op
Iteration  12: 604.471 ns/op
Iteration  13: 599.007 ns/op
Iteration  14: 598.089 ns/op
Iteration  15: 600.935 ns/op
Iteration  16: 600.106 ns/op
Iteration  17: 599.952 ns/op
Iteration  18: 600.470 ns/op
Iteration  19: 599.296 ns/op
Iteration  20: 598.996 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1051.035 ns/op
# Warmup Iteration   2: 658.860 ns/op
# Warmup Iteration   3: 593.813 ns/op
# Warmup Iteration   4: 607.647 ns/op
# Warmup Iteration   5: 601.715 ns/op
Iteration   1: 587.767 ns/op
Iteration   2: 590.415 ns/op
Iteration   3: 587.064 ns/op
Iteration   4: 586.675 ns/op
Iteration   5: 589.402 ns/op
Iteration   6: 587.207 ns/op
Iteration   7: 590.098 ns/op
Iteration   8: 591.908 ns/op
Iteration   9: 585.470 ns/op
Iteration  10: 585.667 ns/op
Iteration  11: 587.128 ns/op
Iteration  12: 585.707 ns/op
Iteration  13: 585.762 ns/op
Iteration  14: 587.081 ns/op
Iteration  15: 586.218 ns/op
Iteration  16: 586.339 ns/op
Iteration  17: 590.252 ns/op
Iteration  18: 587.311 ns/op
Iteration  19: 587.234 ns/op
Iteration  20: 590.908 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  588.309 ±(99.9%) 2.530 ns/op [Average]
  (min, avg, max) = (574.843, 588.309, 604.471), stdev = 7.460
  CI (99.9%): [585.779, 590.839] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  ,	
 	      
	
 
	 							 
	 

			    
	
 	

     avgt  100  582.141 ± 5.387  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  ,	
 	      
	
 
	 							 
	 

			    
	
 	

     avgt  100  588.309 ± 2.530  ns/op

Benchmark result is saved to split_precompiled_regex_132_98_Match.csv
