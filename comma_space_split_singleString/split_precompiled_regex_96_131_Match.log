# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	
		
 
  		   	
			     	

   



 
 		   


   			

	  
	
	


,
				
  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1060.529 ns/op
# Warmup Iteration   2: 727.060 ns/op
# Warmup Iteration   3: 647.293 ns/op
# Warmup Iteration   4: 650.098 ns/op
# Warmup Iteration   5: 653.555 ns/op
Iteration   1: 663.402 ns/op
Iteration   2: 642.157 ns/op
Iteration   3: 641.836 ns/op
Iteration   4: 642.337 ns/op
Iteration   5: 642.062 ns/op
Iteration   6: 644.276 ns/op
Iteration   7: 641.503 ns/op
Iteration   8: 641.054 ns/op
Iteration   9: 642.714 ns/op
Iteration  10: 640.335 ns/op
Iteration  11: 640.603 ns/op
Iteration  12: 640.271 ns/op
Iteration  13: 639.452 ns/op
Iteration  14: 639.273 ns/op
Iteration  15: 639.648 ns/op
Iteration  16: 641.983 ns/op
Iteration  17: 640.423 ns/op
Iteration  18: 640.081 ns/op
Iteration  19: 639.613 ns/op
Iteration  20: 640.377 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1042.222 ns/op
# Warmup Iteration   2: 697.672 ns/op
# Warmup Iteration   3: 625.845 ns/op
# Warmup Iteration   4: 627.367 ns/op
# Warmup Iteration   5: 636.432 ns/op
Iteration   1: 632.261 ns/op
Iteration   2: 620.054 ns/op
Iteration   3: 620.134 ns/op
Iteration   4: 619.991 ns/op
Iteration   5: 622.602 ns/op
Iteration   6: 620.011 ns/op
Iteration   7: 620.073 ns/op
Iteration   8: 622.869 ns/op
Iteration   9: 619.132 ns/op
Iteration  10: 618.293 ns/op
Iteration  11: 618.093 ns/op
Iteration  12: 618.135 ns/op
Iteration  13: 623.564 ns/op
Iteration  14: 617.726 ns/op
Iteration  15: 620.860 ns/op
Iteration  16: 622.082 ns/op
Iteration  17: 619.936 ns/op
Iteration  18: 617.977 ns/op
Iteration  19: 618.695 ns/op
Iteration  20: 618.611 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1036.041 ns/op
# Warmup Iteration   2: 693.805 ns/op
# Warmup Iteration   3: 623.160 ns/op
# Warmup Iteration   4: 625.536 ns/op
# Warmup Iteration   5: 639.801 ns/op
Iteration   1: 623.959 ns/op
Iteration   2: 617.654 ns/op
Iteration   3: 617.172 ns/op
Iteration   4: 617.555 ns/op
Iteration   5: 620.311 ns/op
Iteration   6: 617.589 ns/op
Iteration   7: 617.477 ns/op
Iteration   8: 617.675 ns/op
Iteration   9: 616.280 ns/op
Iteration  10: 615.421 ns/op
Iteration  11: 615.547 ns/op
Iteration  12: 616.447 ns/op
Iteration  13: 615.255 ns/op
Iteration  14: 615.149 ns/op
Iteration  15: 615.590 ns/op
Iteration  16: 617.041 ns/op
Iteration  17: 615.285 ns/op
Iteration  18: 615.819 ns/op
Iteration  19: 617.008 ns/op
Iteration  20: 619.001 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1056.224 ns/op
# Warmup Iteration   2: 718.578 ns/op
# Warmup Iteration   3: 649.932 ns/op
# Warmup Iteration   4: 648.282 ns/op
# Warmup Iteration   5: 651.597 ns/op
Iteration   1: 655.000 ns/op
Iteration   2: 643.230 ns/op
Iteration   3: 640.542 ns/op
Iteration   4: 640.186 ns/op
Iteration   5: 640.293 ns/op
Iteration   6: 643.024 ns/op
Iteration   7: 640.109 ns/op
Iteration   8: 640.153 ns/op
Iteration   9: 638.535 ns/op
Iteration  10: 638.615 ns/op
Iteration  11: 639.659 ns/op
Iteration  12: 638.577 ns/op
Iteration  13: 638.469 ns/op
Iteration  14: 638.909 ns/op
Iteration  15: 643.273 ns/op
Iteration  16: 640.892 ns/op
Iteration  17: 638.816 ns/op
Iteration  18: 638.310 ns/op
Iteration  19: 638.628 ns/op
Iteration  20: 638.488 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1068.824 ns/op
# Warmup Iteration   2: 725.671 ns/op
# Warmup Iteration   3: 655.267 ns/op
# Warmup Iteration   4: 652.212 ns/op
# Warmup Iteration   5: 658.099 ns/op
Iteration   1: 658.203 ns/op
Iteration   2: 646.604 ns/op
Iteration   3: 644.141 ns/op
Iteration   4: 647.366 ns/op
Iteration   5: 644.363 ns/op
Iteration   6: 644.381 ns/op
Iteration   7: 647.663 ns/op
Iteration   8: 644.169 ns/op
Iteration   9: 646.363 ns/op
Iteration  10: 642.030 ns/op
Iteration  11: 641.913 ns/op
Iteration  12: 643.507 ns/op
Iteration  13: 642.051 ns/op
Iteration  14: 642.986 ns/op
Iteration  15: 642.918 ns/op
Iteration  16: 642.976 ns/op
Iteration  17: 647.495 ns/op
Iteration  18: 644.251 ns/op
Iteration  19: 643.948 ns/op
Iteration  20: 644.073 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  633.128 ±(99.9%) 4.201 ns/op [Average]
  (min, avg, max) = (615.149, 633.128, 663.402), stdev = 12.386
  CI (99.9%): [628.928, 637.329] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	
		
 
  		   	
			     	

   



 
 		   


   			

	  
	
	


,
				
  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1071.545 ns/op
# Warmup Iteration   2: 733.889 ns/op
# Warmup Iteration   3: 655.592 ns/op
# Warmup Iteration   4: 658.801 ns/op
# Warmup Iteration   5: 661.698 ns/op
Iteration   1: 669.274 ns/op
Iteration   2: 650.511 ns/op
Iteration   3: 650.512 ns/op
Iteration   4: 651.133 ns/op
Iteration   5: 650.840 ns/op
Iteration   6: 653.690 ns/op
Iteration   7: 649.998 ns/op
Iteration   8: 650.931 ns/op
Iteration   9: 654.023 ns/op
Iteration  10: 648.185 ns/op
Iteration  11: 650.061 ns/op
Iteration  12: 648.343 ns/op
Iteration  13: 648.812 ns/op
Iteration  14: 654.189 ns/op
Iteration  15: 653.364 ns/op
Iteration  16: 650.105 ns/op
Iteration  17: 649.831 ns/op
Iteration  18: 650.320 ns/op
Iteration  19: 650.087 ns/op
Iteration  20: 653.593 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1134.541 ns/op
# Warmup Iteration   2: 756.768 ns/op
# Warmup Iteration   3: 679.260 ns/op
# Warmup Iteration   4: 675.710 ns/op
# Warmup Iteration   5: 679.243 ns/op
Iteration   1: 683.455 ns/op
Iteration   2: 671.225 ns/op
Iteration   3: 668.070 ns/op
Iteration   4: 667.956 ns/op
Iteration   5: 668.066 ns/op
Iteration   6: 668.503 ns/op
Iteration   7: 668.323 ns/op
Iteration   8: 671.840 ns/op
Iteration   9: 669.938 ns/op
Iteration  10: 667.969 ns/op
Iteration  11: 666.477 ns/op
Iteration  12: 666.551 ns/op
Iteration  13: 668.450 ns/op
Iteration  14: 666.529 ns/op
Iteration  15: 666.563 ns/op
Iteration  16: 666.311 ns/op
Iteration  17: 666.790 ns/op
Iteration  18: 666.975 ns/op
Iteration  19: 668.667 ns/op
Iteration  20: 666.770 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1068.715 ns/op
# Warmup Iteration   2: 729.268 ns/op
# Warmup Iteration   3: 655.081 ns/op
# Warmup Iteration   4: 657.587 ns/op
# Warmup Iteration   5: 660.378 ns/op
Iteration   1: 667.506 ns/op
Iteration   2: 649.580 ns/op
Iteration   3: 649.121 ns/op
Iteration   4: 649.368 ns/op
Iteration   5: 649.371 ns/op
Iteration   6: 652.471 ns/op
Iteration   7: 649.214 ns/op
Iteration   8: 649.477 ns/op
Iteration   9: 649.729 ns/op
Iteration  10: 648.028 ns/op
Iteration  11: 646.861 ns/op
Iteration  12: 646.785 ns/op
Iteration  13: 647.387 ns/op
Iteration  14: 647.669 ns/op
Iteration  15: 649.194 ns/op
Iteration  16: 649.063 ns/op
Iteration  17: 649.017 ns/op
Iteration  18: 648.650 ns/op
Iteration  19: 651.795 ns/op
Iteration  20: 649.325 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1083.178 ns/op
# Warmup Iteration   2: 739.423 ns/op
# Warmup Iteration   3: 660.790 ns/op
# Warmup Iteration   4: 662.991 ns/op
# Warmup Iteration   5: 665.657 ns/op
Iteration   1: 674.046 ns/op
Iteration   2: 655.518 ns/op
Iteration   3: 654.973 ns/op
Iteration   4: 654.532 ns/op
Iteration   5: 654.593 ns/op
Iteration   6: 658.114 ns/op
Iteration   7: 654.699 ns/op
Iteration   8: 655.216 ns/op
Iteration   9: 653.452 ns/op
Iteration  10: 653.337 ns/op
Iteration  11: 654.356 ns/op
Iteration  12: 653.288 ns/op
Iteration  13: 653.318 ns/op
Iteration  14: 654.259 ns/op
Iteration  15: 654.603 ns/op
Iteration  16: 657.493 ns/op
Iteration  17: 653.956 ns/op
Iteration  18: 654.473 ns/op
Iteration  19: 658.507 ns/op
Iteration  20: 654.099 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1057.204 ns/op
# Warmup Iteration   2: 707.732 ns/op
# Warmup Iteration   3: 640.844 ns/op
# Warmup Iteration   4: 643.092 ns/op
# Warmup Iteration   5: 659.318 ns/op
Iteration   1: 642.608 ns/op
Iteration   2: 637.171 ns/op
Iteration   3: 636.225 ns/op
Iteration   4: 635.959 ns/op
Iteration   5: 638.055 ns/op
Iteration   6: 637.150 ns/op
Iteration   7: 637.107 ns/op
Iteration   8: 638.574 ns/op
Iteration   9: 635.014 ns/op
Iteration  10: 634.094 ns/op
Iteration  11: 639.093 ns/op
Iteration  12: 634.352 ns/op
Iteration  13: 636.474 ns/op
Iteration  14: 634.471 ns/op
Iteration  15: 634.271 ns/op
Iteration  16: 634.606 ns/op
Iteration  17: 636.148 ns/op
Iteration  18: 634.516 ns/op
Iteration  19: 635.148 ns/op
Iteration  20: 635.852 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  652.566 ±(99.9%) 3.790 ns/op [Average]
  (min, avg, max) = (634.094, 652.566, 683.455), stdev = 11.175
  CI (99.9%): [648.776, 656.356] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 	
		
 
  		   	
			     	

   



 
 		   


   			

	  
	
	


,
				
    avgt  100  633.128 ± 4.201  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 	
		
 
  		   	
			     	

   



 
 		   


   			

	  
	
	


,
				
    avgt  100  652.566 ± 3.790  ns/op

Benchmark result is saved to split_precompiled_regex_96_131_Match.csv
