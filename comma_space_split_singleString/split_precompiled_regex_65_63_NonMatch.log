# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = *@d`lwa17UxhuhfY!J[@ss(yx
m'
6f:~/}*%8t9G@%Kz?Gg='g7HP).2Z8)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1157.563 ns/op
# Warmup Iteration   2: 989.008 ns/op
# Warmup Iteration   3: 813.270 ns/op
# Warmup Iteration   4: 815.597 ns/op
# Warmup Iteration   5: 818.556 ns/op
Iteration   1: 808.165 ns/op
Iteration   2: 819.565 ns/op
Iteration   3: 827.654 ns/op
Iteration   4: 811.504 ns/op
Iteration   5: 808.957 ns/op
Iteration   6: 809.061 ns/op
Iteration   7: 805.306 ns/op
Iteration   8: 808.399 ns/op
Iteration   9: 808.928 ns/op
Iteration  10: 808.930 ns/op
Iteration  11: 808.830 ns/op
Iteration  12: 809.644 ns/op
Iteration  13: 805.347 ns/op
Iteration  14: 811.361 ns/op
Iteration  15: 807.712 ns/op
Iteration  16: 807.388 ns/op
Iteration  17: 807.171 ns/op
Iteration  18: 805.272 ns/op
Iteration  19: 807.890 ns/op
Iteration  20: 808.633 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1159.327 ns/op
# Warmup Iteration   2: 993.633 ns/op
# Warmup Iteration   3: 811.777 ns/op
# Warmup Iteration   4: 814.508 ns/op
# Warmup Iteration   5: 817.106 ns/op
Iteration   1: 811.983 ns/op
Iteration   2: 813.066 ns/op
Iteration   3: 826.100 ns/op
Iteration   4: 809.969 ns/op
Iteration   5: 807.457 ns/op
Iteration   6: 807.334 ns/op
Iteration   7: 804.043 ns/op
Iteration   8: 808.041 ns/op
Iteration   9: 807.910 ns/op
Iteration  10: 808.130 ns/op
Iteration  11: 807.926 ns/op
Iteration  12: 808.092 ns/op
Iteration  13: 804.516 ns/op
Iteration  14: 807.910 ns/op
Iteration  15: 808.457 ns/op
Iteration  16: 805.819 ns/op
Iteration  17: 806.230 ns/op
Iteration  18: 811.475 ns/op
Iteration  19: 803.890 ns/op
Iteration  20: 806.811 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1155.140 ns/op
# Warmup Iteration   2: 985.982 ns/op
# Warmup Iteration   3: 811.866 ns/op
# Warmup Iteration   4: 814.653 ns/op
# Warmup Iteration   5: 816.647 ns/op
Iteration   1: 810.522 ns/op
Iteration   2: 813.829 ns/op
Iteration   3: 825.761 ns/op
Iteration   4: 809.016 ns/op
Iteration   5: 807.093 ns/op
Iteration   6: 806.765 ns/op
Iteration   7: 803.423 ns/op
Iteration   8: 806.863 ns/op
Iteration   9: 807.762 ns/op
Iteration  10: 808.698 ns/op
Iteration  11: 808.320 ns/op
Iteration  12: 807.579 ns/op
Iteration  13: 803.478 ns/op
Iteration  14: 808.092 ns/op
Iteration  15: 806.248 ns/op
Iteration  16: 805.159 ns/op
Iteration  17: 806.518 ns/op
Iteration  18: 813.127 ns/op
Iteration  19: 803.468 ns/op
Iteration  20: 807.715 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1152.994 ns/op
# Warmup Iteration   2: 978.258 ns/op
# Warmup Iteration   3: 808.698 ns/op
# Warmup Iteration   4: 811.115 ns/op
# Warmup Iteration   5: 814.470 ns/op
Iteration   1: 818.548 ns/op
Iteration   2: 800.937 ns/op
Iteration   3: 825.679 ns/op
Iteration   4: 808.266 ns/op
Iteration   5: 805.244 ns/op
Iteration   6: 811.082 ns/op
Iteration   7: 801.934 ns/op
Iteration   8: 803.714 ns/op
Iteration   9: 805.651 ns/op
Iteration  10: 804.515 ns/op
Iteration  11: 805.176 ns/op
Iteration  12: 805.980 ns/op
Iteration  13: 803.065 ns/op
Iteration  14: 806.538 ns/op
Iteration  15: 808.104 ns/op
Iteration  16: 808.394 ns/op
Iteration  17: 804.253 ns/op
Iteration  18: 805.960 ns/op
Iteration  19: 801.222 ns/op
Iteration  20: 803.147 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1154.782 ns/op
# Warmup Iteration   2: 989.952 ns/op
# Warmup Iteration   3: 815.920 ns/op
# Warmup Iteration   4: 818.323 ns/op
# Warmup Iteration   5: 821.872 ns/op
Iteration   1: 811.415 ns/op
Iteration   2: 821.901 ns/op
Iteration   3: 830.722 ns/op
Iteration   4: 814.206 ns/op
Iteration   5: 811.881 ns/op
Iteration   6: 811.480 ns/op
Iteration   7: 808.050 ns/op
Iteration   8: 811.579 ns/op
Iteration   9: 816.400 ns/op
Iteration  10: 812.085 ns/op
Iteration  11: 811.709 ns/op
Iteration  12: 808.006 ns/op
Iteration  13: 816.073 ns/op
Iteration  14: 812.641 ns/op
Iteration  15: 818.432 ns/op
Iteration  16: 809.943 ns/op
Iteration  17: 810.156 ns/op
Iteration  18: 808.094 ns/op
Iteration  19: 810.093 ns/op
Iteration  20: 810.090 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  809.427 ±(99.9%) 1.891 ns/op [Average]
  (min, avg, max) = (800.937, 809.427, 830.722), stdev = 5.575
  CI (99.9%): [807.536, 811.318] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = *@d`lwa17UxhuhfY!J[@ss(yx
m'
6f:~/}*%8t9G@%Kz?Gg='g7HP).2Z8)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1155.112 ns/op
# Warmup Iteration   2: 988.209 ns/op
# Warmup Iteration   3: 815.121 ns/op
# Warmup Iteration   4: 816.612 ns/op
# Warmup Iteration   5: 821.871 ns/op
Iteration   1: 812.751 ns/op
Iteration   2: 817.417 ns/op
Iteration   3: 830.014 ns/op
Iteration   4: 811.763 ns/op
Iteration   5: 809.662 ns/op
Iteration   6: 809.555 ns/op
Iteration   7: 806.270 ns/op
Iteration   8: 809.678 ns/op
Iteration   9: 809.808 ns/op
Iteration  10: 809.734 ns/op
Iteration  11: 809.588 ns/op
Iteration  12: 813.915 ns/op
Iteration  13: 806.235 ns/op
Iteration  14: 810.886 ns/op
Iteration  15: 814.429 ns/op
Iteration  16: 810.510 ns/op
Iteration  17: 809.005 ns/op
Iteration  18: 806.649 ns/op
Iteration  19: 809.002 ns/op
Iteration  20: 810.399 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1157.574 ns/op
# Warmup Iteration   2: 992.875 ns/op
# Warmup Iteration   3: 817.563 ns/op
# Warmup Iteration   4: 819.602 ns/op
# Warmup Iteration   5: 822.072 ns/op
Iteration   1: 808.990 ns/op
Iteration   2: 827.988 ns/op
Iteration   3: 832.191 ns/op
Iteration   4: 813.586 ns/op
Iteration   5: 813.366 ns/op
Iteration   6: 813.336 ns/op
Iteration   7: 808.811 ns/op
Iteration   8: 813.034 ns/op
Iteration   9: 813.116 ns/op
Iteration  10: 814.089 ns/op
Iteration  11: 814.215 ns/op
Iteration  12: 809.000 ns/op
Iteration  13: 818.146 ns/op
Iteration  14: 815.488 ns/op
Iteration  15: 816.328 ns/op
Iteration  16: 810.436 ns/op
Iteration  17: 810.888 ns/op
Iteration  18: 808.623 ns/op
Iteration  19: 810.810 ns/op
Iteration  20: 810.542 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1160.278 ns/op
# Warmup Iteration   2: 992.450 ns/op
# Warmup Iteration   3: 818.940 ns/op
# Warmup Iteration   4: 816.679 ns/op
# Warmup Iteration   5: 824.374 ns/op
Iteration   1: 806.297 ns/op
Iteration   2: 823.950 ns/op
Iteration   3: 833.506 ns/op
Iteration   4: 811.745 ns/op
Iteration   5: 813.709 ns/op
Iteration   6: 811.530 ns/op
Iteration   7: 806.164 ns/op
Iteration   8: 814.676 ns/op
Iteration   9: 817.693 ns/op
Iteration  10: 814.635 ns/op
Iteration  11: 815.162 ns/op
Iteration  12: 806.221 ns/op
Iteration  13: 813.940 ns/op
Iteration  14: 820.269 ns/op
Iteration  15: 813.001 ns/op
Iteration  16: 808.079 ns/op
Iteration  17: 813.668 ns/op
Iteration  18: 806.502 ns/op
Iteration  19: 822.811 ns/op
Iteration  20: 808.618 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1157.823 ns/op
# Warmup Iteration   2: 990.390 ns/op
# Warmup Iteration   3: 814.866 ns/op
# Warmup Iteration   4: 817.493 ns/op
# Warmup Iteration   5: 825.398 ns/op
Iteration   1: 810.474 ns/op
Iteration   2: 825.396 ns/op
Iteration   3: 830.325 ns/op
Iteration   4: 811.521 ns/op
Iteration   5: 811.543 ns/op
Iteration   6: 811.840 ns/op
Iteration   7: 808.102 ns/op
Iteration   8: 810.797 ns/op
Iteration   9: 811.048 ns/op
Iteration  10: 811.583 ns/op
Iteration  11: 813.888 ns/op
Iteration  12: 807.891 ns/op
Iteration  13: 817.653 ns/op
Iteration  14: 811.940 ns/op
Iteration  15: 809.481 ns/op
Iteration  16: 811.217 ns/op
Iteration  17: 809.702 ns/op
Iteration  18: 807.822 ns/op
Iteration  19: 809.918 ns/op
Iteration  20: 809.788 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1158.925 ns/op
# Warmup Iteration   2: 986.994 ns/op
# Warmup Iteration   3: 810.424 ns/op
# Warmup Iteration   4: 813.054 ns/op
# Warmup Iteration   5: 816.668 ns/op
Iteration   1: 809.189 ns/op
Iteration   2: 814.538 ns/op
Iteration   3: 826.522 ns/op
Iteration   4: 809.166 ns/op
Iteration   5: 806.723 ns/op
Iteration   6: 806.687 ns/op
Iteration   7: 802.820 ns/op
Iteration   8: 807.169 ns/op
Iteration   9: 806.393 ns/op
Iteration  10: 806.926 ns/op
Iteration  11: 810.500 ns/op
Iteration  12: 807.640 ns/op
Iteration  13: 803.456 ns/op
Iteration  14: 808.710 ns/op
Iteration  15: 808.510 ns/op
Iteration  16: 805.101 ns/op
Iteration  17: 806.187 ns/op
Iteration  18: 806.200 ns/op
Iteration  19: 803.030 ns/op
Iteration  20: 806.123 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  812.060 ±(99.9%) 2.089 ns/op [Average]
  (min, avg, max) = (802.820, 812.060, 833.506), stdev = 6.159
  CI (99.9%): [809.971, 814.148] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  *@d`lwa17UxhuhfY!J[@ss(yx
m'
6f:~/}*%8t9G@%Kz?Gg='g7HP).2Z8  avgt  100  809.427 ± 1.891  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  *@d`lwa17UxhuhfY!J[@ss(yx
m'
6f:~/}*%8t9G@%Kz?Gg='g7HP).2Z8  avgt  100  812.060 ± 2.089  ns/op

Benchmark result is saved to split_precompiled_regex_65_63_NonMatch.csv
