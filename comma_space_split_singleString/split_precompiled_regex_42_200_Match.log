# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 			, 
 	 		
	
  

		
	  	

		

 	
 
	  	 	
	
 

	
   		 
		
			

	 		 

	
 	 

 	   
 
 
 	
	
 

	  	
 	 

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1327.963 ns/op
# Warmup Iteration   2: 1037.564 ns/op
# Warmup Iteration   3: 854.859 ns/op
# Warmup Iteration   4: 857.873 ns/op
# Warmup Iteration   5: 861.243 ns/op
Iteration   1: 866.156 ns/op
Iteration   2: 870.937 ns/op
Iteration   3: 851.330 ns/op
Iteration   4: 853.013 ns/op
Iteration   5: 846.744 ns/op
Iteration   6: 851.005 ns/op
Iteration   7: 850.810 ns/op
Iteration   8: 850.722 ns/op
Iteration   9: 850.553 ns/op
Iteration  10: 850.423 ns/op
Iteration  11: 854.586 ns/op
Iteration  12: 851.231 ns/op
Iteration  13: 849.154 ns/op
Iteration  14: 848.410 ns/op
Iteration  15: 847.991 ns/op
Iteration  16: 846.211 ns/op
Iteration  17: 848.149 ns/op
Iteration  18: 848.528 ns/op
Iteration  19: 848.486 ns/op
Iteration  20: 848.436 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1314.170 ns/op
# Warmup Iteration   2: 1054.926 ns/op
# Warmup Iteration   3: 852.173 ns/op
# Warmup Iteration   4: 857.487 ns/op
# Warmup Iteration   5: 858.662 ns/op
Iteration   1: 868.666 ns/op
Iteration   2: 867.461 ns/op
Iteration   3: 849.094 ns/op
Iteration   4: 847.973 ns/op
Iteration   5: 848.746 ns/op
Iteration   6: 843.083 ns/op
Iteration   7: 847.535 ns/op
Iteration   8: 853.049 ns/op
Iteration   9: 847.889 ns/op
Iteration  10: 849.883 ns/op
Iteration  11: 853.924 ns/op
Iteration  12: 856.992 ns/op
Iteration  13: 845.157 ns/op
Iteration  14: 844.855 ns/op
Iteration  15: 844.795 ns/op
Iteration  16: 845.542 ns/op
Iteration  17: 842.838 ns/op
Iteration  18: 844.834 ns/op
Iteration  19: 845.367 ns/op
Iteration  20: 845.640 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1330.624 ns/op
# Warmup Iteration   2: 1038.274 ns/op
# Warmup Iteration   3: 863.765 ns/op
# Warmup Iteration   4: 866.753 ns/op
# Warmup Iteration   5: 870.079 ns/op
Iteration   1: 873.999 ns/op
Iteration   2: 879.050 ns/op
Iteration   3: 861.422 ns/op
Iteration   4: 859.569 ns/op
Iteration   5: 855.297 ns/op
Iteration   6: 859.782 ns/op
Iteration   7: 859.497 ns/op
Iteration   8: 860.399 ns/op
Iteration   9: 860.278 ns/op
Iteration  10: 862.974 ns/op
Iteration  11: 859.250 ns/op
Iteration  12: 859.367 ns/op
Iteration  13: 858.221 ns/op
Iteration  14: 858.018 ns/op
Iteration  15: 855.974 ns/op
Iteration  16: 857.654 ns/op
Iteration  17: 857.478 ns/op
Iteration  18: 857.981 ns/op
Iteration  19: 863.923 ns/op
Iteration  20: 859.294 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1278.367 ns/op
# Warmup Iteration   2: 1020.589 ns/op
# Warmup Iteration   3: 852.669 ns/op
# Warmup Iteration   4: 855.778 ns/op
# Warmup Iteration   5: 860.077 ns/op
Iteration   1: 864.199 ns/op
Iteration   2: 869.260 ns/op
Iteration   3: 854.450 ns/op
Iteration   4: 849.048 ns/op
Iteration   5: 850.329 ns/op
Iteration   6: 844.850 ns/op
Iteration   7: 848.361 ns/op
Iteration   8: 848.192 ns/op
Iteration   9: 848.734 ns/op
Iteration  10: 848.288 ns/op
Iteration  11: 848.846 ns/op
Iteration  12: 849.068 ns/op
Iteration  13: 850.328 ns/op
Iteration  14: 846.253 ns/op
Iteration  15: 846.602 ns/op
Iteration  16: 849.779 ns/op
Iteration  17: 844.252 ns/op
Iteration  18: 849.367 ns/op
Iteration  19: 845.897 ns/op
Iteration  20: 850.194 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1317.568 ns/op
# Warmup Iteration   2: 1030.896 ns/op
# Warmup Iteration   3: 861.668 ns/op
# Warmup Iteration   4: 863.281 ns/op
# Warmup Iteration   5: 867.278 ns/op
Iteration   1: 871.392 ns/op
Iteration   2: 877.250 ns/op
Iteration   3: 857.242 ns/op
Iteration   4: 857.019 ns/op
Iteration   5: 858.451 ns/op
Iteration   6: 863.244 ns/op
Iteration   7: 857.079 ns/op
Iteration   8: 857.568 ns/op
Iteration   9: 857.420 ns/op
Iteration  10: 859.392 ns/op
Iteration  11: 861.629 ns/op
Iteration  12: 862.124 ns/op
Iteration  13: 857.693 ns/op
Iteration  14: 855.968 ns/op
Iteration  15: 852.840 ns/op
Iteration  16: 855.646 ns/op
Iteration  17: 855.541 ns/op
Iteration  18: 856.127 ns/op
Iteration  19: 855.828 ns/op
Iteration  20: 856.622 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  854.380 Â±(99.9%) 2.635 ns/op [Average]
  (min, avg, max) = (842.838, 854.380, 879.050), stdev = 7.769
  CI (99.9%): [851.745, 857.015] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 			, 
 	 		
	
  

		
	  	

		

 	
 
	  	 	
	
 

	
   		 
		
			

	 		 

	
 	 

 	   
 
 
 	
	
 

	  	
 	 

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1318.451 ns/op
# Warmup Iteration   2: 1063.265 ns/op
# Warmup Iteration   3: 874.065 ns/op
# Warmup Iteration   4: 876.250 ns/op
# Warmup Iteration   5: 886.000 ns/op
Iteration   1: 885.278 ns/op
Iteration   2: 892.969 ns/op
Iteration   3: 873.063 ns/op
Iteration   4: 870.494 ns/op
Iteration   5: 865.642 ns/op
Iteration   6: 869.663 ns/op
Iteration   7: 869.520 ns/op
Iteration   8: 870.521 ns/op
Iteration   9: 869.950 ns/op
Iteration  10: 871.281 ns/op
Iteration  11: 872.468 ns/op
Iteration  12: 875.831 ns/op
Iteration  13: 873.558 ns/op
Iteration  14: 867.339 ns/op
Iteration  15: 868.546 ns/op
Iteration  16: 865.108 ns/op
Iteration  17: 871.880 ns/op
Iteration  18: 868.837 ns/op
Iteration  19: 868.531 ns/op
Iteration  20: 868.621 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1318.790 ns/op
# Warmup Iteration   2: 1043.405 ns/op
# Warmup Iteration   3: 873.321 ns/op
# Warmup Iteration   4: 876.976 ns/op
# Warmup Iteration   5: 880.680 ns/op
Iteration   1: 884.090 ns/op
Iteration   2: 889.541 ns/op
Iteration   3: 869.454 ns/op
Iteration   4: 869.513 ns/op
Iteration   5: 869.420 ns/op
Iteration   6: 864.528 ns/op
Iteration   7: 874.617 ns/op
Iteration   8: 869.386 ns/op
Iteration   9: 869.230 ns/op
Iteration  10: 869.273 ns/op
Iteration  11: 870.531 ns/op
Iteration  12: 868.975 ns/op
Iteration  13: 871.677 ns/op
Iteration  14: 874.832 ns/op
Iteration  15: 870.878 ns/op
Iteration  16: 866.955 ns/op
Iteration  17: 864.481 ns/op
Iteration  18: 866.654 ns/op
Iteration  19: 868.121 ns/op
Iteration  20: 867.416 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1354.813 ns/op
# Warmup Iteration   2: 1059.595 ns/op
# Warmup Iteration   3: 876.638 ns/op
# Warmup Iteration   4: 879.504 ns/op
# Warmup Iteration   5: 882.256 ns/op
Iteration   1: 886.396 ns/op
Iteration   2: 891.236 ns/op
Iteration   3: 872.580 ns/op
Iteration   4: 871.711 ns/op
Iteration   5: 867.806 ns/op
Iteration   6: 871.307 ns/op
Iteration   7: 871.770 ns/op
Iteration   8: 872.823 ns/op
Iteration   9: 872.923 ns/op
Iteration  10: 874.495 ns/op
Iteration  11: 872.539 ns/op
Iteration  12: 872.704 ns/op
Iteration  13: 870.432 ns/op
Iteration  14: 871.276 ns/op
Iteration  15: 871.114 ns/op
Iteration  16: 867.683 ns/op
Iteration  17: 871.222 ns/op
Iteration  18: 871.568 ns/op
Iteration  19: 872.393 ns/op
Iteration  20: 872.317 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1304.388 ns/op
# Warmup Iteration   2: 1051.302 ns/op
# Warmup Iteration   3: 884.095 ns/op
# Warmup Iteration   4: 887.330 ns/op
# Warmup Iteration   5: 890.853 ns/op
Iteration   1: 895.259 ns/op
Iteration   2: 905.455 ns/op
Iteration   3: 886.745 ns/op
Iteration   4: 885.704 ns/op
Iteration   5: 876.483 ns/op
Iteration   6: 880.521 ns/op
Iteration   7: 880.916 ns/op
Iteration   8: 881.292 ns/op
Iteration   9: 881.395 ns/op
Iteration  10: 882.691 ns/op
Iteration  11: 883.233 ns/op
Iteration  12: 888.107 ns/op
Iteration  13: 878.679 ns/op
Iteration  14: 879.099 ns/op
Iteration  15: 876.318 ns/op
Iteration  16: 878.509 ns/op
Iteration  17: 878.278 ns/op
Iteration  18: 878.165 ns/op
Iteration  19: 878.606 ns/op
Iteration  20: 879.246 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1346.318 ns/op
# Warmup Iteration   2: 1072.710 ns/op
# Warmup Iteration   3: 886.639 ns/op
# Warmup Iteration   4: 897.797 ns/op
# Warmup Iteration   5: 891.865 ns/op
Iteration   1: 896.655 ns/op
Iteration   2: 900.764 ns/op
Iteration   3: 880.919 ns/op
Iteration   4: 876.805 ns/op
Iteration   5: 881.398 ns/op
Iteration   6: 881.022 ns/op
Iteration   7: 881.074 ns/op
Iteration   8: 883.142 ns/op
Iteration   9: 882.292 ns/op
Iteration  10: 882.272 ns/op
Iteration  11: 882.471 ns/op
Iteration  12: 883.075 ns/op
Iteration  13: 886.234 ns/op
Iteration  14: 876.899 ns/op
Iteration  15: 878.738 ns/op
Iteration  16: 878.831 ns/op
Iteration  17: 879.356 ns/op
Iteration  18: 880.234 ns/op
Iteration  19: 880.583 ns/op
Iteration  20: 879.818 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  876.322 Â±(99.9%) 2.742 ns/op [Average]
  (min, avg, max) = (864.481, 876.322, 905.455), stdev = 8.084
  CI (99.9%): [873.581, 879.064] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  			, 
 	 		
	
  

		
	  	

		

 	
 
	  	 	
	
 

	
   		 
		
			

	 		 

	
 	 

 	   
 
 
 	
	
 

	  	
 	 

  avgt  100  854.380 Â± 2.635  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  			, 
 	 		
	
  

		
	  	

		

 	
 
	  	 	
	
 

	
   		 
		
			

	 		 

	
 	 

 	   
 
 
 	
	
 

	  	
 	 

  avgt  100  876.322 Â± 2.742  ns/op

Benchmark result is saved to split_precompiled_regex_42_200_Match.csv
