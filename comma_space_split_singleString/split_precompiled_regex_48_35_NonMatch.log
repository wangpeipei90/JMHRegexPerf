# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 4OKmGwn7fR|`A++z[I;:vC$P7V!/hzjAA#)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 888.864 ns/op
# Warmup Iteration   2: 608.252 ns/op
# Warmup Iteration   3: 544.052 ns/op
# Warmup Iteration   4: 545.889 ns/op
# Warmup Iteration   5: 548.449 ns/op
Iteration   1: 554.486 ns/op
Iteration   2: 538.918 ns/op
Iteration   3: 539.151 ns/op
Iteration   4: 539.155 ns/op
Iteration   5: 542.109 ns/op
Iteration   6: 539.594 ns/op
Iteration   7: 539.461 ns/op
Iteration   8: 538.850 ns/op
Iteration   9: 537.519 ns/op
Iteration  10: 536.630 ns/op
Iteration  11: 541.612 ns/op
Iteration  12: 539.874 ns/op
Iteration  13: 536.973 ns/op
Iteration  14: 538.741 ns/op
Iteration  15: 536.826 ns/op
Iteration  16: 536.888 ns/op
Iteration  17: 541.649 ns/op
Iteration  18: 538.613 ns/op
Iteration  19: 537.134 ns/op
Iteration  20: 537.063 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 892.987 ns/op
# Warmup Iteration   2: 607.674 ns/op
# Warmup Iteration   3: 546.631 ns/op
# Warmup Iteration   4: 549.001 ns/op
# Warmup Iteration   5: 558.818 ns/op
Iteration   1: 554.075 ns/op
Iteration   2: 542.482 ns/op
Iteration   3: 542.500 ns/op
Iteration   4: 542.697 ns/op
Iteration   5: 545.468 ns/op
Iteration   6: 542.816 ns/op
Iteration   7: 542.727 ns/op
Iteration   8: 542.554 ns/op
Iteration   9: 542.498 ns/op
Iteration  10: 545.749 ns/op
Iteration  11: 542.254 ns/op
Iteration  12: 541.388 ns/op
Iteration  13: 541.547 ns/op
Iteration  14: 542.161 ns/op
Iteration  15: 542.065 ns/op
Iteration  16: 541.357 ns/op
Iteration  17: 545.947 ns/op
Iteration  18: 542.547 ns/op
Iteration  19: 543.930 ns/op
Iteration  20: 542.250 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 887.563 ns/op
# Warmup Iteration   2: 602.546 ns/op
# Warmup Iteration   3: 542.082 ns/op
# Warmup Iteration   4: 544.828 ns/op
# Warmup Iteration   5: 551.137 ns/op
Iteration   1: 550.679 ns/op
Iteration   2: 537.991 ns/op
Iteration   3: 538.216 ns/op
Iteration   4: 538.081 ns/op
Iteration   5: 540.441 ns/op
Iteration   6: 537.857 ns/op
Iteration   7: 538.161 ns/op
Iteration   8: 538.404 ns/op
Iteration   9: 537.916 ns/op
Iteration  10: 536.894 ns/op
Iteration  11: 536.954 ns/op
Iteration  12: 536.885 ns/op
Iteration  13: 538.799 ns/op
Iteration  14: 541.331 ns/op
Iteration  15: 537.417 ns/op
Iteration  16: 537.517 ns/op
Iteration  17: 538.704 ns/op
Iteration  18: 537.411 ns/op
Iteration  19: 538.342 ns/op
Iteration  20: 538.706 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 890.292 ns/op
# Warmup Iteration   2: 600.397 ns/op
# Warmup Iteration   3: 539.384 ns/op
# Warmup Iteration   4: 541.464 ns/op
# Warmup Iteration   5: 549.326 ns/op
Iteration   1: 545.634 ns/op
Iteration   2: 535.630 ns/op
Iteration   3: 535.486 ns/op
Iteration   4: 535.336 ns/op
Iteration   5: 537.495 ns/op
Iteration   6: 535.441 ns/op
Iteration   7: 535.384 ns/op
Iteration   8: 535.411 ns/op
Iteration   9: 535.049 ns/op
Iteration  10: 533.968 ns/op
Iteration  11: 533.992 ns/op
Iteration  12: 534.211 ns/op
Iteration  13: 535.206 ns/op
Iteration  14: 534.053 ns/op
Iteration  15: 534.091 ns/op
Iteration  16: 534.145 ns/op
Iteration  17: 536.487 ns/op
Iteration  18: 535.747 ns/op
Iteration  19: 535.440 ns/op
Iteration  20: 535.116 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 891.757 ns/op
# Warmup Iteration   2: 617.142 ns/op
# Warmup Iteration   3: 553.668 ns/op
# Warmup Iteration   4: 556.185 ns/op
# Warmup Iteration   5: 559.235 ns/op
Iteration   1: 565.768 ns/op
Iteration   2: 549.359 ns/op
Iteration   3: 548.640 ns/op
Iteration   4: 548.770 ns/op
Iteration   5: 549.021 ns/op
Iteration   6: 551.547 ns/op
Iteration   7: 548.962 ns/op
Iteration   8: 549.107 ns/op
Iteration   9: 552.103 ns/op
Iteration  10: 547.624 ns/op
Iteration  11: 548.538 ns/op
Iteration  12: 547.620 ns/op
Iteration  13: 547.626 ns/op
Iteration  14: 547.698 ns/op
Iteration  15: 549.323 ns/op
Iteration  16: 548.474 ns/op
Iteration  17: 548.469 ns/op
Iteration  18: 548.169 ns/op
Iteration  19: 548.152 ns/op
Iteration  20: 549.322 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  541.446 ±(99.9%) 1.973 ns/op [Average]
  (min, avg, max) = (533.968, 541.446, 565.768), stdev = 5.818
  CI (99.9%): [539.473, 543.419] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 4OKmGwn7fR|`A++z[I;:vC$P7V!/hzjAA#)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 888.363 ns/op
# Warmup Iteration   2: 604.335 ns/op
# Warmup Iteration   3: 543.740 ns/op
# Warmup Iteration   4: 546.094 ns/op
# Warmup Iteration   5: 550.028 ns/op
Iteration   1: 554.583 ns/op
Iteration   2: 539.711 ns/op
Iteration   3: 539.185 ns/op
Iteration   4: 539.351 ns/op
Iteration   5: 545.237 ns/op
Iteration   6: 539.571 ns/op
Iteration   7: 539.456 ns/op
Iteration   8: 539.888 ns/op
Iteration   9: 539.260 ns/op
Iteration  10: 538.210 ns/op
Iteration  11: 538.305 ns/op
Iteration  12: 542.252 ns/op
Iteration  13: 539.084 ns/op
Iteration  14: 545.109 ns/op
Iteration  15: 538.715 ns/op
Iteration  16: 538.487 ns/op
Iteration  17: 538.574 ns/op
Iteration  18: 540.266 ns/op
Iteration  19: 538.683 ns/op
Iteration  20: 538.544 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 888.514 ns/op
# Warmup Iteration   2: 608.035 ns/op
# Warmup Iteration   3: 548.604 ns/op
# Warmup Iteration   4: 550.486 ns/op
# Warmup Iteration   5: 553.057 ns/op
Iteration   1: 560.364 ns/op
Iteration   2: 544.249 ns/op
Iteration   3: 544.243 ns/op
Iteration   4: 544.301 ns/op
Iteration   5: 546.601 ns/op
Iteration   6: 544.369 ns/op
Iteration   7: 543.980 ns/op
Iteration   8: 544.412 ns/op
Iteration   9: 547.102 ns/op
Iteration  10: 543.751 ns/op
Iteration  11: 542.678 ns/op
Iteration  12: 543.308 ns/op
Iteration  13: 543.167 ns/op
Iteration  14: 544.758 ns/op
Iteration  15: 543.629 ns/op
Iteration  16: 544.198 ns/op
Iteration  17: 543.696 ns/op
Iteration  18: 543.498 ns/op
Iteration  19: 546.748 ns/op
Iteration  20: 544.569 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 893.197 ns/op
# Warmup Iteration   2: 611.191 ns/op
# Warmup Iteration   3: 549.430 ns/op
# Warmup Iteration   4: 551.264 ns/op
# Warmup Iteration   5: 554.532 ns/op
Iteration   1: 560.455 ns/op
Iteration   2: 545.355 ns/op
Iteration   3: 545.238 ns/op
Iteration   4: 544.887 ns/op
Iteration   5: 547.052 ns/op
Iteration   6: 544.453 ns/op
Iteration   7: 544.774 ns/op
Iteration   8: 545.163 ns/op
Iteration   9: 543.605 ns/op
Iteration  10: 544.549 ns/op
Iteration  11: 543.537 ns/op
Iteration  12: 543.797 ns/op
Iteration  13: 543.912 ns/op
Iteration  14: 547.071 ns/op
Iteration  15: 545.365 ns/op
Iteration  16: 544.079 ns/op
Iteration  17: 555.190 ns/op
Iteration  18: 543.953 ns/op
Iteration  19: 545.293 ns/op
Iteration  20: 544.306 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 890.705 ns/op
# Warmup Iteration   2: 617.390 ns/op
# Warmup Iteration   3: 544.492 ns/op
# Warmup Iteration   4: 546.645 ns/op
# Warmup Iteration   5: 549.360 ns/op
Iteration   1: 555.989 ns/op
Iteration   2: 540.338 ns/op
Iteration   3: 540.219 ns/op
Iteration   4: 540.242 ns/op
Iteration   5: 542.230 ns/op
Iteration   6: 540.071 ns/op
Iteration   7: 540.357 ns/op
Iteration   8: 540.606 ns/op
Iteration   9: 539.786 ns/op
Iteration  10: 538.942 ns/op
Iteration  11: 539.029 ns/op
Iteration  12: 538.901 ns/op
Iteration  13: 539.192 ns/op
Iteration  14: 541.851 ns/op
Iteration  15: 538.433 ns/op
Iteration  16: 538.668 ns/op
Iteration  17: 541.320 ns/op
Iteration  18: 541.694 ns/op
Iteration  19: 539.625 ns/op
Iteration  20: 539.370 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 892.471 ns/op
# Warmup Iteration   2: 615.869 ns/op
# Warmup Iteration   3: 549.892 ns/op
# Warmup Iteration   4: 553.275 ns/op
# Warmup Iteration   5: 555.858 ns/op
Iteration   1: 564.393 ns/op
Iteration   2: 545.608 ns/op
Iteration   3: 545.718 ns/op
Iteration   4: 545.672 ns/op
Iteration   5: 545.711 ns/op
Iteration   6: 548.008 ns/op
Iteration   7: 546.091 ns/op
Iteration   8: 549.160 ns/op
Iteration   9: 548.216 ns/op
Iteration  10: 544.998 ns/op
Iteration  11: 543.627 ns/op
Iteration  12: 543.702 ns/op
Iteration  13: 547.824 ns/op
Iteration  14: 544.303 ns/op
Iteration  15: 545.801 ns/op
Iteration  16: 543.798 ns/op
Iteration  17: 543.695 ns/op
Iteration  18: 543.950 ns/op
Iteration  19: 545.384 ns/op
Iteration  20: 543.992 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  543.846 ±(99.9%) 1.601 ns/op [Average]
  (min, avg, max) = (538.210, 543.846, 564.393), stdev = 4.721
  CI (99.9%): [542.245, 545.448] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  4OKmGwn7fR|`A++z[I;:vC$P7V!/hzjAA#  avgt  100  541.446 ± 1.973  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  4OKmGwn7fR|`A++z[I;:vC$P7V!/hzjAA#  avgt  100  543.846 ± 1.601  ns/op

Benchmark result is saved to split_precompiled_regex_48_35_NonMatch.csv
