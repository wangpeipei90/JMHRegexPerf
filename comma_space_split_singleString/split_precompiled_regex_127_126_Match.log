# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

	    	
 





		   
 	,
		 
		

	 
 	 

 	 	
  
	 
				    )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1084.386 ns/op
# Warmup Iteration   2: 748.263 ns/op
# Warmup Iteration   3: 674.387 ns/op
# Warmup Iteration   4: 670.791 ns/op
# Warmup Iteration   5: 673.953 ns/op
Iteration   1: 678.141 ns/op
Iteration   2: 677.605 ns/op
Iteration   3: 667.081 ns/op
Iteration   4: 663.036 ns/op
Iteration   5: 663.217 ns/op
Iteration   6: 664.121 ns/op
Iteration   7: 663.968 ns/op
Iteration   8: 663.063 ns/op
Iteration   9: 666.660 ns/op
Iteration  10: 661.290 ns/op
Iteration  11: 661.390 ns/op
Iteration  12: 661.396 ns/op
Iteration  13: 661.540 ns/op
Iteration  14: 665.753 ns/op
Iteration  15: 662.915 ns/op
Iteration  16: 663.091 ns/op
Iteration  17: 662.792 ns/op
Iteration  18: 663.157 ns/op
Iteration  19: 663.320 ns/op
Iteration  20: 663.413 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1049.996 ns/op
# Warmup Iteration   2: 712.219 ns/op
# Warmup Iteration   3: 636.263 ns/op
# Warmup Iteration   4: 639.258 ns/op
# Warmup Iteration   5: 642.715 ns/op
Iteration   1: 649.778 ns/op
Iteration   2: 631.533 ns/op
Iteration   3: 631.467 ns/op
Iteration   4: 630.454 ns/op
Iteration   5: 631.321 ns/op
Iteration   6: 634.478 ns/op
Iteration   7: 631.517 ns/op
Iteration   8: 631.626 ns/op
Iteration   9: 629.950 ns/op
Iteration  10: 630.600 ns/op
Iteration  11: 629.946 ns/op
Iteration  12: 634.854 ns/op
Iteration  13: 631.906 ns/op
Iteration  14: 629.862 ns/op
Iteration  15: 632.070 ns/op
Iteration  16: 629.877 ns/op
Iteration  17: 630.117 ns/op
Iteration  18: 630.322 ns/op
Iteration  19: 633.686 ns/op
Iteration  20: 630.636 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1086.918 ns/op
# Warmup Iteration   2: 746.485 ns/op
# Warmup Iteration   3: 672.449 ns/op
# Warmup Iteration   4: 667.153 ns/op
# Warmup Iteration   5: 671.142 ns/op
Iteration   1: 676.358 ns/op
Iteration   2: 660.415 ns/op
Iteration   3: 663.099 ns/op
Iteration   4: 659.452 ns/op
Iteration   5: 659.452 ns/op
Iteration   6: 660.086 ns/op
Iteration   7: 660.011 ns/op
Iteration   8: 660.267 ns/op
Iteration   9: 660.360 ns/op
Iteration  10: 657.389 ns/op
Iteration  11: 657.523 ns/op
Iteration  12: 658.072 ns/op
Iteration  13: 657.565 ns/op
Iteration  14: 659.315 ns/op
Iteration  15: 657.550 ns/op
Iteration  16: 657.989 ns/op
Iteration  17: 657.701 ns/op
Iteration  18: 657.474 ns/op
Iteration  19: 657.382 ns/op
Iteration  20: 659.014 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1075.727 ns/op
# Warmup Iteration   2: 735.411 ns/op
# Warmup Iteration   3: 667.763 ns/op
# Warmup Iteration   4: 663.930 ns/op
# Warmup Iteration   5: 667.023 ns/op
Iteration   1: 670.077 ns/op
Iteration   2: 658.922 ns/op
Iteration   3: 652.540 ns/op
Iteration   4: 656.205 ns/op
Iteration   5: 652.267 ns/op
Iteration   6: 652.698 ns/op
Iteration   7: 656.139 ns/op
Iteration   8: 659.045 ns/op
Iteration   9: 654.489 ns/op
Iteration  10: 651.283 ns/op
Iteration  11: 651.265 ns/op
Iteration  12: 654.665 ns/op
Iteration  13: 652.894 ns/op
Iteration  14: 653.773 ns/op
Iteration  15: 654.390 ns/op
Iteration  16: 654.351 ns/op
Iteration  17: 654.560 ns/op
Iteration  18: 654.270 ns/op
Iteration  19: 655.359 ns/op
Iteration  20: 653.345 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1078.864 ns/op
# Warmup Iteration   2: 741.175 ns/op
# Warmup Iteration   3: 666.493 ns/op
# Warmup Iteration   4: 662.372 ns/op
# Warmup Iteration   5: 665.791 ns/op
Iteration   1: 670.236 ns/op
Iteration   2: 658.909 ns/op
Iteration   3: 654.153 ns/op
Iteration   4: 654.341 ns/op
Iteration   5: 654.630 ns/op
Iteration   6: 654.684 ns/op
Iteration   7: 654.806 ns/op
Iteration   8: 657.388 ns/op
Iteration   9: 653.215 ns/op
Iteration  10: 655.236 ns/op
Iteration  11: 653.271 ns/op
Iteration  12: 652.998 ns/op
Iteration  13: 655.383 ns/op
Iteration  14: 655.140 ns/op
Iteration  15: 653.820 ns/op
Iteration  16: 654.765 ns/op
Iteration  17: 654.587 ns/op
Iteration  18: 653.299 ns/op
Iteration  19: 656.475 ns/op
Iteration  20: 654.628 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  653.539 ±(99.9%) 4.063 ns/op [Average]
  (min, avg, max) = (629.862, 653.539, 678.141), stdev = 11.979
  CI (99.9%): [649.477, 657.602] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

	    	
 





		   
 	,
		 
		

	 
 	 

 	 	
  
	 
				    )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1141.584 ns/op
# Warmup Iteration   2: 765.282 ns/op
# Warmup Iteration   3: 684.596 ns/op
# Warmup Iteration   4: 681.095 ns/op
# Warmup Iteration   5: 684.054 ns/op
Iteration   1: 688.386 ns/op
Iteration   2: 673.893 ns/op
Iteration   3: 675.397 ns/op
Iteration   4: 672.011 ns/op
Iteration   5: 672.126 ns/op
Iteration   6: 671.855 ns/op
Iteration   7: 672.408 ns/op
Iteration   8: 675.091 ns/op
Iteration   9: 670.348 ns/op
Iteration  10: 670.047 ns/op
Iteration  11: 670.184 ns/op
Iteration  12: 670.330 ns/op
Iteration  13: 670.533 ns/op
Iteration  14: 671.614 ns/op
Iteration  15: 670.521 ns/op
Iteration  16: 670.410 ns/op
Iteration  17: 672.057 ns/op
Iteration  18: 672.546 ns/op
Iteration  19: 675.882 ns/op
Iteration  20: 672.418 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1152.307 ns/op
# Warmup Iteration   2: 776.105 ns/op
# Warmup Iteration   3: 689.509 ns/op
# Warmup Iteration   4: 686.178 ns/op
# Warmup Iteration   5: 689.533 ns/op
Iteration   1: 693.137 ns/op
Iteration   2: 677.812 ns/op
Iteration   3: 681.062 ns/op
Iteration   4: 677.885 ns/op
Iteration   5: 678.264 ns/op
Iteration   6: 679.969 ns/op
Iteration   7: 678.129 ns/op
Iteration   8: 678.022 ns/op
Iteration   9: 682.391 ns/op
Iteration  10: 675.875 ns/op
Iteration  11: 675.954 ns/op
Iteration  12: 675.779 ns/op
Iteration  13: 676.204 ns/op
Iteration  14: 676.268 ns/op
Iteration  15: 677.902 ns/op
Iteration  16: 678.224 ns/op
Iteration  17: 676.633 ns/op
Iteration  18: 677.148 ns/op
Iteration  19: 677.286 ns/op
Iteration  20: 676.968 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1140.300 ns/op
# Warmup Iteration   2: 763.486 ns/op
# Warmup Iteration   3: 682.542 ns/op
# Warmup Iteration   4: 678.103 ns/op
# Warmup Iteration   5: 681.670 ns/op
Iteration   1: 685.983 ns/op
Iteration   2: 670.548 ns/op
Iteration   3: 673.593 ns/op
Iteration   4: 670.487 ns/op
Iteration   5: 670.966 ns/op
Iteration   6: 670.132 ns/op
Iteration   7: 670.701 ns/op
Iteration   8: 673.917 ns/op
Iteration   9: 668.705 ns/op
Iteration  10: 668.697 ns/op
Iteration  11: 669.237 ns/op
Iteration  12: 668.450 ns/op
Iteration  13: 668.990 ns/op
Iteration  14: 670.270 ns/op
Iteration  15: 668.460 ns/op
Iteration  16: 668.743 ns/op
Iteration  17: 669.365 ns/op
Iteration  18: 668.915 ns/op
Iteration  19: 670.523 ns/op
Iteration  20: 668.658 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1141.147 ns/op
# Warmup Iteration   2: 765.489 ns/op
# Warmup Iteration   3: 682.837 ns/op
# Warmup Iteration   4: 678.041 ns/op
# Warmup Iteration   5: 682.350 ns/op
Iteration   1: 686.773 ns/op
Iteration   2: 671.407 ns/op
Iteration   3: 674.482 ns/op
Iteration   4: 670.618 ns/op
Iteration   5: 670.779 ns/op
Iteration   6: 671.003 ns/op
Iteration   7: 671.368 ns/op
Iteration   8: 678.087 ns/op
Iteration   9: 669.472 ns/op
Iteration  10: 669.009 ns/op
Iteration  11: 669.061 ns/op
Iteration  12: 669.043 ns/op
Iteration  13: 668.891 ns/op
Iteration  14: 670.190 ns/op
Iteration  15: 671.865 ns/op
Iteration  16: 669.858 ns/op
Iteration  17: 670.400 ns/op
Iteration  18: 669.961 ns/op
Iteration  19: 673.575 ns/op
Iteration  20: 669.606 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1098.860 ns/op
# Warmup Iteration   2: 749.982 ns/op
# Warmup Iteration   3: 679.425 ns/op
# Warmup Iteration   4: 676.322 ns/op
# Warmup Iteration   5: 679.860 ns/op
Iteration   1: 684.544 ns/op
Iteration   2: 671.605 ns/op
Iteration   3: 667.515 ns/op
Iteration   4: 667.424 ns/op
Iteration   5: 668.192 ns/op
Iteration   6: 667.608 ns/op
Iteration   7: 667.339 ns/op
Iteration   8: 671.303 ns/op
Iteration   9: 665.928 ns/op
Iteration  10: 671.409 ns/op
Iteration  11: 666.565 ns/op
Iteration  12: 667.360 ns/op
Iteration  13: 667.543 ns/op
Iteration  14: 665.558 ns/op
Iteration  15: 665.712 ns/op
Iteration  16: 666.514 ns/op
Iteration  17: 665.966 ns/op
Iteration  18: 667.974 ns/op
Iteration  19: 666.480 ns/op
Iteration  20: 666.646 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  672.489 ±(99.9%) 1.764 ns/op [Average]
  (min, avg, max) = (665.558, 672.489, 693.137), stdev = 5.201
  CI (99.9%): [670.725, 674.253] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

	    	
 





		   
 	,
		 
		

	 
 	 

 	 	
  
	 
				      avgt  100  653.539 ± 4.063  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

	    	
 





		   
 	,
		 
		

	 
 	 

 	 	
  
	 
				      avgt  100  672.489 ± 1.764  ns/op

Benchmark result is saved to split_precompiled_regex_127_126_Match.csv
