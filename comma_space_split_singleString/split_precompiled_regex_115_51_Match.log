# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	
	
	   	
	 		


,

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 905.180 ns/op
# Warmup Iteration   2: 505.990 ns/op
# Warmup Iteration   3: 491.772 ns/op
# Warmup Iteration   4: 502.912 ns/op
# Warmup Iteration   5: 483.152 ns/op
Iteration   1: 481.730 ns/op
Iteration   2: 479.556 ns/op
Iteration   3: 481.397 ns/op
Iteration   4: 481.931 ns/op
Iteration   5: 480.060 ns/op
Iteration   6: 479.199 ns/op
Iteration   7: 478.580 ns/op
Iteration   8: 479.255 ns/op
Iteration   9: 479.837 ns/op
Iteration  10: 478.933 ns/op
Iteration  11: 479.947 ns/op
Iteration  12: 478.848 ns/op
Iteration  13: 479.786 ns/op
Iteration  14: 479.761 ns/op
Iteration  15: 479.123 ns/op
Iteration  16: 480.225 ns/op
Iteration  17: 479.012 ns/op
Iteration  18: 481.138 ns/op
Iteration  19: 480.220 ns/op
Iteration  20: 478.471 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 898.390 ns/op
# Warmup Iteration   2: 510.363 ns/op
# Warmup Iteration   3: 491.088 ns/op
# Warmup Iteration   4: 492.312 ns/op
# Warmup Iteration   5: 493.436 ns/op
Iteration   1: 482.447 ns/op
Iteration   2: 479.938 ns/op
Iteration   3: 482.780 ns/op
Iteration   4: 480.334 ns/op
Iteration   5: 482.136 ns/op
Iteration   6: 479.309 ns/op
Iteration   7: 478.140 ns/op
Iteration   8: 479.226 ns/op
Iteration   9: 479.923 ns/op
Iteration  10: 478.356 ns/op
Iteration  11: 481.112 ns/op
Iteration  12: 479.210 ns/op
Iteration  13: 481.338 ns/op
Iteration  14: 480.871 ns/op
Iteration  15: 479.239 ns/op
Iteration  16: 481.586 ns/op
Iteration  17: 479.050 ns/op
Iteration  18: 481.761 ns/op
Iteration  19: 480.601 ns/op
Iteration  20: 479.233 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 902.607 ns/op
# Warmup Iteration   2: 512.834 ns/op
# Warmup Iteration   3: 495.027 ns/op
# Warmup Iteration   4: 491.307 ns/op
# Warmup Iteration   5: 496.854 ns/op
Iteration   1: 485.798 ns/op
Iteration   2: 483.234 ns/op
Iteration   3: 485.435 ns/op
Iteration   4: 483.344 ns/op
Iteration   5: 484.803 ns/op
Iteration   6: 482.316 ns/op
Iteration   7: 481.553 ns/op
Iteration   8: 482.325 ns/op
Iteration   9: 481.439 ns/op
Iteration  10: 483.185 ns/op
Iteration  11: 483.079 ns/op
Iteration  12: 482.478 ns/op
Iteration  13: 483.908 ns/op
Iteration  14: 482.177 ns/op
Iteration  15: 483.565 ns/op
Iteration  16: 484.057 ns/op
Iteration  17: 482.801 ns/op
Iteration  18: 484.340 ns/op
Iteration  19: 482.236 ns/op
Iteration  20: 484.814 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 924.558 ns/op
# Warmup Iteration   2: 539.697 ns/op
# Warmup Iteration   3: 523.558 ns/op
# Warmup Iteration   4: 514.791 ns/op
# Warmup Iteration   5: 522.645 ns/op
Iteration   1: 507.086 ns/op
Iteration   2: 508.902 ns/op
Iteration   3: 506.790 ns/op
Iteration   4: 509.194 ns/op
Iteration   5: 504.567 ns/op
Iteration   6: 510.452 ns/op
Iteration   7: 502.851 ns/op
Iteration   8: 509.478 ns/op
Iteration   9: 503.389 ns/op
Iteration  10: 504.246 ns/op
Iteration  11: 502.983 ns/op
Iteration  12: 503.996 ns/op
Iteration  13: 503.460 ns/op
Iteration  14: 502.627 ns/op
Iteration  15: 508.303 ns/op
Iteration  16: 502.390 ns/op
Iteration  17: 506.522 ns/op
Iteration  18: 503.657 ns/op
Iteration  19: 504.338 ns/op
Iteration  20: 502.695 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 904.134 ns/op
# Warmup Iteration   2: 517.579 ns/op
# Warmup Iteration   3: 503.326 ns/op
# Warmup Iteration   4: 495.818 ns/op
# Warmup Iteration   5: 503.789 ns/op
Iteration   1: 489.365 ns/op
Iteration   2: 491.121 ns/op
Iteration   3: 494.367 ns/op
Iteration   4: 487.396 ns/op
Iteration   5: 490.382 ns/op
Iteration   6: 486.608 ns/op
Iteration   7: 486.559 ns/op
Iteration   8: 486.850 ns/op
Iteration   9: 485.798 ns/op
Iteration  10: 487.591 ns/op
Iteration  11: 486.138 ns/op
Iteration  12: 487.567 ns/op
Iteration  13: 485.304 ns/op
Iteration  14: 490.257 ns/op
Iteration  15: 491.664 ns/op
Iteration  16: 485.205 ns/op
Iteration  17: 487.221 ns/op
Iteration  18: 485.935 ns/op
Iteration  19: 487.519 ns/op
Iteration  20: 487.685 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  487.389 ±(99.9%) 3.285 ns/op [Average]
  (min, avg, max) = (478.140, 487.389, 510.452), stdev = 9.685
  CI (99.9%): [484.105, 490.674] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	
	
	   	
	 		


,

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 957.496 ns/op
# Warmup Iteration   2: 545.828 ns/op
# Warmup Iteration   3: 520.487 ns/op
# Warmup Iteration   4: 516.556 ns/op
# Warmup Iteration   5: 524.047 ns/op
Iteration   1: 507.861 ns/op
Iteration   2: 520.102 ns/op
Iteration   3: 508.345 ns/op
Iteration   4: 511.276 ns/op
Iteration   5: 511.246 ns/op
Iteration   6: 507.022 ns/op
Iteration   7: 512.114 ns/op
Iteration   8: 506.784 ns/op
Iteration   9: 508.189 ns/op
Iteration  10: 506.926 ns/op
Iteration  11: 509.695 ns/op
Iteration  12: 507.525 ns/op
Iteration  13: 508.839 ns/op
Iteration  14: 509.202 ns/op
Iteration  15: 507.298 ns/op
Iteration  16: 509.571 ns/op
Iteration  17: 509.199 ns/op
Iteration  18: 508.992 ns/op
Iteration  19: 507.823 ns/op
Iteration  20: 509.073 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 953.891 ns/op
# Warmup Iteration   2: 548.294 ns/op
# Warmup Iteration   3: 519.670 ns/op
# Warmup Iteration   4: 516.239 ns/op
# Warmup Iteration   5: 521.948 ns/op
Iteration   1: 506.863 ns/op
Iteration   2: 510.157 ns/op
Iteration   3: 507.059 ns/op
Iteration   4: 510.366 ns/op
Iteration   5: 514.413 ns/op
Iteration   6: 506.362 ns/op
Iteration   7: 507.243 ns/op
Iteration   8: 505.974 ns/op
Iteration   9: 507.165 ns/op
Iteration  10: 506.580 ns/op
Iteration  11: 507.549 ns/op
Iteration  12: 506.989 ns/op
Iteration  13: 508.385 ns/op
Iteration  14: 509.084 ns/op
Iteration  15: 507.808 ns/op
Iteration  16: 508.952 ns/op
Iteration  17: 506.778 ns/op
Iteration  18: 507.870 ns/op
Iteration  19: 506.556 ns/op
Iteration  20: 507.581 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 945.592 ns/op
# Warmup Iteration   2: 540.771 ns/op
# Warmup Iteration   3: 517.847 ns/op
# Warmup Iteration   4: 513.098 ns/op
# Warmup Iteration   5: 517.907 ns/op
Iteration   1: 504.453 ns/op
Iteration   2: 506.281 ns/op
Iteration   3: 506.292 ns/op
Iteration   4: 504.611 ns/op
Iteration   5: 507.309 ns/op
Iteration   6: 502.931 ns/op
Iteration   7: 503.829 ns/op
Iteration   8: 503.138 ns/op
Iteration   9: 504.578 ns/op
Iteration  10: 504.056 ns/op
Iteration  11: 505.869 ns/op
Iteration  12: 505.345 ns/op
Iteration  13: 503.987 ns/op
Iteration  14: 507.713 ns/op
Iteration  15: 504.439 ns/op
Iteration  16: 507.673 ns/op
Iteration  17: 504.241 ns/op
Iteration  18: 507.113 ns/op
Iteration  19: 507.754 ns/op
Iteration  20: 504.988 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 937.531 ns/op
# Warmup Iteration   2: 529.472 ns/op
# Warmup Iteration   3: 508.895 ns/op
# Warmup Iteration   4: 501.357 ns/op
# Warmup Iteration   5: 509.234 ns/op
Iteration   1: 497.582 ns/op
Iteration   2: 493.529 ns/op
Iteration   3: 495.274 ns/op
Iteration   4: 492.537 ns/op
Iteration   5: 495.657 ns/op
Iteration   6: 493.288 ns/op
Iteration   7: 490.849 ns/op
Iteration   8: 492.182 ns/op
Iteration   9: 490.962 ns/op
Iteration  10: 492.216 ns/op
Iteration  11: 493.192 ns/op
Iteration  12: 491.254 ns/op
Iteration  13: 493.166 ns/op
Iteration  14: 491.491 ns/op
Iteration  15: 493.036 ns/op
Iteration  16: 495.311 ns/op
Iteration  17: 491.690 ns/op
Iteration  18: 493.552 ns/op
Iteration  19: 491.652 ns/op
Iteration  20: 493.223 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 920.743 ns/op
# Warmup Iteration   2: 520.284 ns/op
# Warmup Iteration   3: 507.137 ns/op
# Warmup Iteration   4: 510.565 ns/op
# Warmup Iteration   5: 504.604 ns/op
Iteration   1: 497.936 ns/op
Iteration   2: 495.073 ns/op
Iteration   3: 497.315 ns/op
Iteration   4: 495.325 ns/op
Iteration   5: 499.643 ns/op
Iteration   6: 495.057 ns/op
Iteration   7: 493.992 ns/op
Iteration   8: 495.658 ns/op
Iteration   9: 494.245 ns/op
Iteration  10: 495.037 ns/op
Iteration  11: 501.744 ns/op
Iteration  12: 494.698 ns/op
Iteration  13: 496.381 ns/op
Iteration  14: 497.544 ns/op
Iteration  15: 501.156 ns/op
Iteration  16: 495.314 ns/op
Iteration  17: 494.180 ns/op
Iteration  18: 499.785 ns/op
Iteration  19: 493.913 ns/op
Iteration  20: 496.378 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  502.454 ±(99.9%) 2.322 ns/op [Average]
  (min, avg, max) = (490.849, 502.454, 520.102), stdev = 6.846
  CI (99.9%): [500.132, 504.776] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 	
	
	   	
	 		


,

  avgt  100  487.389 ± 3.285  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 	
	
	   	
	 		


,

  avgt  100  502.454 ± 2.322  ns/op

Benchmark result is saved to split_precompiled_regex_115_51_Match.csv
