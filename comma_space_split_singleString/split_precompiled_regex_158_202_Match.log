# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

 
		
	   	 	 
 

	  

 

 
			
 
	



	  
 
 			  
 
 
 



	 	 	
		
,	   	  	  

	

  
 		

 

    	
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1245.305 ns/op
# Warmup Iteration   2: 911.220 ns/op
# Warmup Iteration   3: 772.034 ns/op
# Warmup Iteration   4: 775.324 ns/op
# Warmup Iteration   5: 778.735 ns/op
Iteration   1: 782.155 ns/op
Iteration   2: 787.250 ns/op
Iteration   3: 768.645 ns/op
Iteration   4: 769.065 ns/op
Iteration   5: 768.875 ns/op
Iteration   6: 769.367 ns/op
Iteration   7: 768.800 ns/op
Iteration   8: 768.918 ns/op
Iteration   9: 768.985 ns/op
Iteration  10: 769.304 ns/op
Iteration  11: 769.528 ns/op
Iteration  12: 769.016 ns/op
Iteration  13: 766.619 ns/op
Iteration  14: 766.421 ns/op
Iteration  15: 766.395 ns/op
Iteration  16: 772.431 ns/op
Iteration  17: 766.323 ns/op
Iteration  18: 766.315 ns/op
Iteration  19: 767.160 ns/op
Iteration  20: 767.871 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1256.651 ns/op
# Warmup Iteration   2: 933.961 ns/op
# Warmup Iteration   3: 793.301 ns/op
# Warmup Iteration   4: 795.546 ns/op
# Warmup Iteration   5: 799.015 ns/op
Iteration   1: 803.485 ns/op
Iteration   2: 808.573 ns/op
Iteration   3: 789.759 ns/op
Iteration   4: 789.642 ns/op
Iteration   5: 790.015 ns/op
Iteration   6: 790.061 ns/op
Iteration   7: 790.013 ns/op
Iteration   8: 789.998 ns/op
Iteration   9: 789.729 ns/op
Iteration  10: 791.103 ns/op
Iteration  11: 792.481 ns/op
Iteration  12: 789.616 ns/op
Iteration  13: 788.818 ns/op
Iteration  14: 789.223 ns/op
Iteration  15: 789.626 ns/op
Iteration  16: 789.457 ns/op
Iteration  17: 790.369 ns/op
Iteration  18: 789.009 ns/op
Iteration  19: 788.592 ns/op
Iteration  20: 788.064 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1251.722 ns/op
# Warmup Iteration   2: 932.149 ns/op
# Warmup Iteration   3: 791.799 ns/op
# Warmup Iteration   4: 794.777 ns/op
# Warmup Iteration   5: 797.548 ns/op
Iteration   1: 801.678 ns/op
Iteration   2: 806.234 ns/op
Iteration   3: 788.511 ns/op
Iteration   4: 794.688 ns/op
Iteration   5: 788.795 ns/op
Iteration   6: 787.838 ns/op
Iteration   7: 788.339 ns/op
Iteration   8: 788.349 ns/op
Iteration   9: 788.472 ns/op
Iteration  10: 789.098 ns/op
Iteration  11: 788.891 ns/op
Iteration  12: 786.660 ns/op
Iteration  13: 786.232 ns/op
Iteration  14: 786.457 ns/op
Iteration  15: 786.652 ns/op
Iteration  16: 786.569 ns/op
Iteration  17: 786.522 ns/op
Iteration  18: 787.060 ns/op
Iteration  19: 787.730 ns/op
Iteration  20: 787.223 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1181.993 ns/op
# Warmup Iteration   2: 883.408 ns/op
# Warmup Iteration   3: 762.545 ns/op
# Warmup Iteration   4: 765.015 ns/op
# Warmup Iteration   5: 777.356 ns/op
Iteration   1: 776.533 ns/op
Iteration   2: 766.154 ns/op
Iteration   3: 758.894 ns/op
Iteration   4: 758.884 ns/op
Iteration   5: 758.871 ns/op
Iteration   6: 759.236 ns/op
Iteration   7: 759.010 ns/op
Iteration   8: 758.864 ns/op
Iteration   9: 758.998 ns/op
Iteration  10: 758.897 ns/op
Iteration  11: 756.464 ns/op
Iteration  12: 756.373 ns/op
Iteration  13: 756.709 ns/op
Iteration  14: 756.664 ns/op
Iteration  15: 756.537 ns/op
Iteration  16: 756.802 ns/op
Iteration  17: 756.778 ns/op
Iteration  18: 757.403 ns/op
Iteration  19: 757.037 ns/op
Iteration  20: 757.623 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1248.066 ns/op
# Warmup Iteration   2: 931.204 ns/op
# Warmup Iteration   3: 791.710 ns/op
# Warmup Iteration   4: 793.691 ns/op
# Warmup Iteration   5: 796.793 ns/op
Iteration   1: 801.069 ns/op
Iteration   2: 805.979 ns/op
Iteration   3: 788.525 ns/op
Iteration   4: 787.237 ns/op
Iteration   5: 787.061 ns/op
Iteration   6: 787.016 ns/op
Iteration   7: 786.780 ns/op
Iteration   8: 788.503 ns/op
Iteration   9: 787.928 ns/op
Iteration  10: 788.315 ns/op
Iteration  11: 790.931 ns/op
Iteration  12: 785.504 ns/op
Iteration  13: 789.146 ns/op
Iteration  14: 787.043 ns/op
Iteration  15: 785.879 ns/op
Iteration  16: 785.554 ns/op
Iteration  17: 789.739 ns/op
Iteration  18: 787.779 ns/op
Iteration  19: 786.036 ns/op
Iteration  20: 787.219 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  779.850 Â±(99.9%) 4.737 ns/op [Average]
  (min, avg, max) = (756.373, 779.850, 808.573), stdev = 13.968
  CI (99.9%): [775.113, 784.588] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	

 
		
	   	 	 
 

	  

 

 
			
 
	



	  
 
 			  
 
 
 



	 	 	
		
,	   	  	  

	

  
 		

 

    	
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1233.456 ns/op
# Warmup Iteration   2: 898.496 ns/op
# Warmup Iteration   3: 769.878 ns/op
# Warmup Iteration   4: 772.699 ns/op
# Warmup Iteration   5: 792.178 ns/op
Iteration   1: 785.147 ns/op
Iteration   2: 766.711 ns/op
Iteration   3: 765.599 ns/op
Iteration   4: 765.740 ns/op
Iteration   5: 766.217 ns/op
Iteration   6: 765.967 ns/op
Iteration   7: 766.209 ns/op
Iteration   8: 766.128 ns/op
Iteration   9: 766.265 ns/op
Iteration  10: 766.867 ns/op
Iteration  11: 766.168 ns/op
Iteration  12: 764.350 ns/op
Iteration  13: 764.476 ns/op
Iteration  14: 763.951 ns/op
Iteration  15: 764.269 ns/op
Iteration  16: 764.231 ns/op
Iteration  17: 764.106 ns/op
Iteration  18: 766.794 ns/op
Iteration  19: 763.761 ns/op
Iteration  20: 765.748 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1213.063 ns/op
# Warmup Iteration   2: 896.925 ns/op
# Warmup Iteration   3: 765.406 ns/op
# Warmup Iteration   4: 771.144 ns/op
# Warmup Iteration   5: 786.639 ns/op
Iteration   1: 779.848 ns/op
Iteration   2: 761.639 ns/op
Iteration   3: 761.520 ns/op
Iteration   4: 761.214 ns/op
Iteration   5: 761.199 ns/op
Iteration   6: 760.953 ns/op
Iteration   7: 760.917 ns/op
Iteration   8: 760.707 ns/op
Iteration   9: 760.784 ns/op
Iteration  10: 761.262 ns/op
Iteration  11: 760.127 ns/op
Iteration  12: 758.435 ns/op
Iteration  13: 759.539 ns/op
Iteration  14: 758.756 ns/op
Iteration  15: 759.275 ns/op
Iteration  16: 759.007 ns/op
Iteration  17: 767.532 ns/op
Iteration  18: 759.612 ns/op
Iteration  19: 759.333 ns/op
Iteration  20: 759.665 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1260.386 ns/op
# Warmup Iteration   2: 981.229 ns/op
# Warmup Iteration   3: 834.258 ns/op
# Warmup Iteration   4: 834.322 ns/op
# Warmup Iteration   5: 837.632 ns/op
Iteration   1: 841.893 ns/op
Iteration   2: 846.520 ns/op
Iteration   3: 829.231 ns/op
Iteration   4: 828.590 ns/op
Iteration   5: 828.253 ns/op
Iteration   6: 828.865 ns/op
Iteration   7: 832.122 ns/op
Iteration   8: 828.856 ns/op
Iteration   9: 830.057 ns/op
Iteration  10: 829.196 ns/op
Iteration  11: 829.640 ns/op
Iteration  12: 827.289 ns/op
Iteration  13: 827.378 ns/op
Iteration  14: 827.674 ns/op
Iteration  15: 827.255 ns/op
Iteration  16: 824.981 ns/op
Iteration  17: 828.713 ns/op
Iteration  18: 829.473 ns/op
Iteration  19: 829.672 ns/op
Iteration  20: 829.738 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1227.549 ns/op
# Warmup Iteration   2: 934.617 ns/op
# Warmup Iteration   3: 801.412 ns/op
# Warmup Iteration   4: 803.358 ns/op
# Warmup Iteration   5: 807.355 ns/op
Iteration   1: 810.926 ns/op
Iteration   2: 815.282 ns/op
Iteration   3: 797.928 ns/op
Iteration   4: 797.592 ns/op
Iteration   5: 797.597 ns/op
Iteration   6: 798.292 ns/op
Iteration   7: 798.186 ns/op
Iteration   8: 798.524 ns/op
Iteration   9: 798.485 ns/op
Iteration  10: 800.401 ns/op
Iteration  11: 800.416 ns/op
Iteration  12: 797.192 ns/op
Iteration  13: 796.864 ns/op
Iteration  14: 799.250 ns/op
Iteration  15: 799.634 ns/op
Iteration  16: 798.145 ns/op
Iteration  17: 799.037 ns/op
Iteration  18: 798.328 ns/op
Iteration  19: 798.810 ns/op
Iteration  20: 799.828 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1256.593 ns/op
# Warmup Iteration   2: 951.754 ns/op
# Warmup Iteration   3: 810.402 ns/op
# Warmup Iteration   4: 811.770 ns/op
# Warmup Iteration   5: 814.936 ns/op
Iteration   1: 819.650 ns/op
Iteration   2: 823.828 ns/op
Iteration   3: 805.940 ns/op
Iteration   4: 805.978 ns/op
Iteration   5: 806.159 ns/op
Iteration   6: 806.787 ns/op
Iteration   7: 810.573 ns/op
Iteration   8: 805.562 ns/op
Iteration   9: 806.381 ns/op
Iteration  10: 806.338 ns/op
Iteration  11: 806.281 ns/op
Iteration  12: 803.443 ns/op
Iteration  13: 803.435 ns/op
Iteration  14: 803.015 ns/op
Iteration  15: 803.832 ns/op
Iteration  16: 803.076 ns/op
Iteration  17: 803.740 ns/op
Iteration  18: 803.667 ns/op
Iteration  19: 803.772 ns/op
Iteration  20: 804.454 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  793.020 Â±(99.9%) 8.935 ns/op [Average]
  (min, avg, max) = (758.435, 793.020, 846.520), stdev = 26.346
  CI (99.9%): [784.085, 801.956] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                   (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	

 
		
	   	 	 
 

	  

 

 
			
 
	



	  
 
 			  
 
 
 



	 	 	
		
,	   	  	  

	

  
 		

 

    	
  avgt  100  779.850 Â± 4.737  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	

 
		
	   	 	 
 

	  

 

 
			
 
	



	  
 
 			  
 
 
 



	 	 	
		
,	   	  	  

	

  
 		

 

    	
  avgt  100  793.020 Â± 8.935  ns/op

Benchmark result is saved to split_precompiled_regex_158_202_Match.csv
