# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

, 	 
	
		  
		   
  	
   		 	
		
	
 	  

	    

		 		 		  
 	
	
	

			




		   	  
 
	
 	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1245.249 ns/op
# Warmup Iteration   2: 975.228 ns/op
# Warmup Iteration   3: 824.846 ns/op
# Warmup Iteration   4: 826.983 ns/op
# Warmup Iteration   5: 829.567 ns/op
Iteration   1: 834.241 ns/op
Iteration   2: 839.945 ns/op
Iteration   3: 821.663 ns/op
Iteration   4: 821.155 ns/op
Iteration   5: 820.609 ns/op
Iteration   6: 820.271 ns/op
Iteration   7: 821.148 ns/op
Iteration   8: 820.933 ns/op
Iteration   9: 821.793 ns/op
Iteration  10: 821.495 ns/op
Iteration  11: 817.956 ns/op
Iteration  12: 821.597 ns/op
Iteration  13: 820.266 ns/op
Iteration  14: 819.144 ns/op
Iteration  15: 818.983 ns/op
Iteration  16: 819.081 ns/op
Iteration  17: 819.545 ns/op
Iteration  18: 827.569 ns/op
Iteration  19: 820.017 ns/op
Iteration  20: 819.207 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1243.350 ns/op
# Warmup Iteration   2: 980.123 ns/op
# Warmup Iteration   3: 828.236 ns/op
# Warmup Iteration   4: 834.888 ns/op
# Warmup Iteration   5: 833.597 ns/op
Iteration   1: 837.889 ns/op
Iteration   2: 842.824 ns/op
Iteration   3: 823.874 ns/op
Iteration   4: 823.971 ns/op
Iteration   5: 823.961 ns/op
Iteration   6: 823.785 ns/op
Iteration   7: 824.148 ns/op
Iteration   8: 824.117 ns/op
Iteration   9: 825.071 ns/op
Iteration  10: 820.874 ns/op
Iteration  11: 824.850 ns/op
Iteration  12: 824.358 ns/op
Iteration  13: 821.872 ns/op
Iteration  14: 822.041 ns/op
Iteration  15: 828.334 ns/op
Iteration  16: 822.492 ns/op
Iteration  17: 823.377 ns/op
Iteration  18: 822.274 ns/op
Iteration  19: 822.341 ns/op
Iteration  20: 822.172 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1308.066 ns/op
# Warmup Iteration   2: 1012.235 ns/op
# Warmup Iteration   3: 830.907 ns/op
# Warmup Iteration   4: 833.564 ns/op
# Warmup Iteration   5: 836.474 ns/op
Iteration   1: 840.704 ns/op
Iteration   2: 846.242 ns/op
Iteration   3: 827.178 ns/op
Iteration   4: 827.721 ns/op
Iteration   5: 827.231 ns/op
Iteration   6: 826.808 ns/op
Iteration   7: 826.158 ns/op
Iteration   8: 829.383 ns/op
Iteration   9: 822.859 ns/op
Iteration  10: 827.151 ns/op
Iteration  11: 827.831 ns/op
Iteration  12: 832.148 ns/op
Iteration  13: 827.214 ns/op
Iteration  14: 825.183 ns/op
Iteration  15: 826.172 ns/op
Iteration  16: 827.403 ns/op
Iteration  17: 826.692 ns/op
Iteration  18: 826.260 ns/op
Iteration  19: 826.012 ns/op
Iteration  20: 826.188 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1282.695 ns/op
# Warmup Iteration   2: 978.473 ns/op
# Warmup Iteration   3: 826.681 ns/op
# Warmup Iteration   4: 829.247 ns/op
# Warmup Iteration   5: 832.788 ns/op
Iteration   1: 837.133 ns/op
Iteration   2: 841.900 ns/op
Iteration   3: 822.796 ns/op
Iteration   4: 823.472 ns/op
Iteration   5: 823.258 ns/op
Iteration   6: 823.425 ns/op
Iteration   7: 823.119 ns/op
Iteration   8: 824.819 ns/op
Iteration   9: 828.005 ns/op
Iteration  10: 819.687 ns/op
Iteration  11: 823.828 ns/op
Iteration  12: 824.000 ns/op
Iteration  13: 826.950 ns/op
Iteration  14: 826.104 ns/op
Iteration  15: 821.147 ns/op
Iteration  16: 821.085 ns/op
Iteration  17: 821.638 ns/op
Iteration  18: 823.621 ns/op
Iteration  19: 824.377 ns/op
Iteration  20: 822.955 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1300.311 ns/op
# Warmup Iteration   2: 987.881 ns/op
# Warmup Iteration   3: 829.985 ns/op
# Warmup Iteration   4: 829.257 ns/op
# Warmup Iteration   5: 832.827 ns/op
Iteration   1: 837.813 ns/op
Iteration   2: 842.232 ns/op
Iteration   3: 823.600 ns/op
Iteration   4: 822.977 ns/op
Iteration   5: 824.014 ns/op
Iteration   6: 823.161 ns/op
Iteration   7: 823.350 ns/op
Iteration   8: 833.788 ns/op
Iteration   9: 825.278 ns/op
Iteration  10: 818.696 ns/op
Iteration  11: 834.675 ns/op
Iteration  12: 832.637 ns/op
Iteration  13: 820.650 ns/op
Iteration  14: 820.848 ns/op
Iteration  15: 820.436 ns/op
Iteration  16: 827.433 ns/op
Iteration  17: 820.607 ns/op
Iteration  18: 821.730 ns/op
Iteration  19: 822.286 ns/op
Iteration  20: 822.783 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  825.461 Â±(99.9%) 2.010 ns/op [Average]
  (min, avg, max) = (817.956, 825.461, 846.242), stdev = 5.927
  CI (99.9%): [823.451, 827.471] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

, 	 
	
		  
		   
  	
   		 	
		
	
 	  

	    

		 		 		  
 	
	
	

			




		   	  
 
	
 	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1295.378 ns/op
# Warmup Iteration   2: 1006.040 ns/op
# Warmup Iteration   3: 847.937 ns/op
# Warmup Iteration   4: 850.399 ns/op
# Warmup Iteration   5: 854.098 ns/op
Iteration   1: 858.031 ns/op
Iteration   2: 863.376 ns/op
Iteration   3: 843.818 ns/op
Iteration   4: 843.450 ns/op
Iteration   5: 844.206 ns/op
Iteration   6: 843.972 ns/op
Iteration   7: 843.646 ns/op
Iteration   8: 844.386 ns/op
Iteration   9: 843.821 ns/op
Iteration  10: 840.081 ns/op
Iteration  11: 845.930 ns/op
Iteration  12: 848.610 ns/op
Iteration  13: 842.837 ns/op
Iteration  14: 841.542 ns/op
Iteration  15: 841.566 ns/op
Iteration  16: 841.787 ns/op
Iteration  17: 842.598 ns/op
Iteration  18: 844.427 ns/op
Iteration  19: 842.160 ns/op
Iteration  20: 842.804 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1201.654 ns/op
# Warmup Iteration   2: 868.353 ns/op
# Warmup Iteration   3: 753.922 ns/op
# Warmup Iteration   4: 768.232 ns/op
# Warmup Iteration   5: 763.291 ns/op
Iteration   1: 767.239 ns/op
Iteration   2: 750.962 ns/op
Iteration   3: 749.885 ns/op
Iteration   4: 749.843 ns/op
Iteration   5: 749.858 ns/op
Iteration   6: 750.453 ns/op
Iteration   7: 750.495 ns/op
Iteration   8: 750.721 ns/op
Iteration   9: 749.997 ns/op
Iteration  10: 750.075 ns/op
Iteration  11: 748.495 ns/op
Iteration  12: 747.475 ns/op
Iteration  13: 747.826 ns/op
Iteration  14: 747.669 ns/op
Iteration  15: 747.948 ns/op
Iteration  16: 749.982 ns/op
Iteration  17: 748.254 ns/op
Iteration  18: 748.783 ns/op
Iteration  19: 748.655 ns/op
Iteration  20: 748.949 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1317.940 ns/op
# Warmup Iteration   2: 1010.380 ns/op
# Warmup Iteration   3: 846.660 ns/op
# Warmup Iteration   4: 848.858 ns/op
# Warmup Iteration   5: 852.270 ns/op
Iteration   1: 857.075 ns/op
Iteration   2: 861.377 ns/op
Iteration   3: 842.296 ns/op
Iteration   4: 842.421 ns/op
Iteration   5: 842.213 ns/op
Iteration   6: 841.621 ns/op
Iteration   7: 842.448 ns/op
Iteration   8: 841.382 ns/op
Iteration   9: 842.072 ns/op
Iteration  10: 837.956 ns/op
Iteration  11: 841.710 ns/op
Iteration  12: 841.862 ns/op
Iteration  13: 838.964 ns/op
Iteration  14: 839.799 ns/op
Iteration  15: 839.247 ns/op
Iteration  16: 840.031 ns/op
Iteration  17: 840.884 ns/op
Iteration  18: 840.569 ns/op
Iteration  19: 845.740 ns/op
Iteration  20: 842.081 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1280.367 ns/op
# Warmup Iteration   2: 991.186 ns/op
# Warmup Iteration   3: 839.840 ns/op
# Warmup Iteration   4: 842.086 ns/op
# Warmup Iteration   5: 844.975 ns/op
Iteration   1: 849.444 ns/op
Iteration   2: 858.746 ns/op
Iteration   3: 836.794 ns/op
Iteration   4: 835.239 ns/op
Iteration   5: 835.577 ns/op
Iteration   6: 835.718 ns/op
Iteration   7: 836.116 ns/op
Iteration   8: 840.150 ns/op
Iteration   9: 846.859 ns/op
Iteration  10: 842.433 ns/op
Iteration  11: 839.872 ns/op
Iteration  12: 831.598 ns/op
Iteration  13: 835.230 ns/op
Iteration  14: 834.851 ns/op
Iteration  15: 835.270 ns/op
Iteration  16: 835.071 ns/op
Iteration  17: 836.091 ns/op
Iteration  18: 833.941 ns/op
Iteration  19: 835.022 ns/op
Iteration  20: 835.428 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1318.637 ns/op
# Warmup Iteration   2: 1010.921 ns/op
# Warmup Iteration   3: 847.659 ns/op
# Warmup Iteration   4: 851.321 ns/op
# Warmup Iteration   5: 854.815 ns/op
Iteration   1: 858.714 ns/op
Iteration   2: 864.489 ns/op
Iteration   3: 848.233 ns/op
Iteration   4: 844.508 ns/op
Iteration   5: 843.609 ns/op
Iteration   6: 852.999 ns/op
Iteration   7: 845.732 ns/op
Iteration   8: 845.134 ns/op
Iteration   9: 839.979 ns/op
Iteration  10: 845.270 ns/op
Iteration  11: 845.409 ns/op
Iteration  12: 846.366 ns/op
Iteration  13: 842.147 ns/op
Iteration  14: 841.545 ns/op
Iteration  15: 843.098 ns/op
Iteration  16: 842.429 ns/op
Iteration  17: 841.807 ns/op
Iteration  18: 841.211 ns/op
Iteration  19: 842.382 ns/op
Iteration  20: 843.807 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  824.567 Â±(99.9%) 12.850 ns/op [Average]
  (min, avg, max) = (747.475, 824.567, 864.489), stdev = 37.887
  CI (99.9%): [811.717, 837.416] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                          (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

, 	 
	
		  
		   
  	
   		 	
		
	
 	  

	    

		 		 		  
 	
	
	

			




		   	  
 
	
 	   avgt  100  825.461 Â±  2.010  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

, 	 
	
		  
		   
  	
   		 	
		
	
 	  

	    

		 		 		  
 	
	
	

			




		   	  
 
	
 	   avgt  100  824.567 Â± 12.850  ns/op

Benchmark result is saved to split_precompiled_regex_195_193_Match.csv
