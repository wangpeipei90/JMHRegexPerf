# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = ;W64xd/rx}sup5&}*QTPV&vRuBS(~jCT714Uz|zo\8j @x0#{/]:'C^'k@ 
nH)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1143.114 ns/op
# Warmup Iteration   2: 969.857 ns/op
# Warmup Iteration   3: 795.850 ns/op
# Warmup Iteration   4: 797.800 ns/op
# Warmup Iteration   5: 800.846 ns/op
Iteration   1: 804.757 ns/op
Iteration   2: 787.712 ns/op
Iteration   3: 810.238 ns/op
Iteration   4: 791.275 ns/op
Iteration   5: 791.783 ns/op
Iteration   6: 791.752 ns/op
Iteration   7: 791.568 ns/op
Iteration   8: 787.737 ns/op
Iteration   9: 791.728 ns/op
Iteration  10: 791.761 ns/op
Iteration  11: 792.231 ns/op
Iteration  12: 791.942 ns/op
Iteration  13: 792.806 ns/op
Iteration  14: 787.931 ns/op
Iteration  15: 793.305 ns/op
Iteration  16: 789.535 ns/op
Iteration  17: 790.147 ns/op
Iteration  18: 789.986 ns/op
Iteration  19: 791.420 ns/op
Iteration  20: 791.597 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1139.665 ns/op
# Warmup Iteration   2: 966.457 ns/op
# Warmup Iteration   3: 788.568 ns/op
# Warmup Iteration   4: 790.992 ns/op
# Warmup Iteration   5: 794.500 ns/op
Iteration   1: 798.508 ns/op
Iteration   2: 781.598 ns/op
Iteration   3: 803.370 ns/op
Iteration   4: 785.860 ns/op
Iteration   5: 785.900 ns/op
Iteration   6: 787.466 ns/op
Iteration   7: 784.837 ns/op
Iteration   8: 788.471 ns/op
Iteration   9: 780.795 ns/op
Iteration  10: 783.956 ns/op
Iteration  11: 784.292 ns/op
Iteration  12: 785.892 ns/op
Iteration  13: 785.537 ns/op
Iteration  14: 782.998 ns/op
Iteration  15: 781.351 ns/op
Iteration  16: 783.388 ns/op
Iteration  17: 783.102 ns/op
Iteration  18: 784.965 ns/op
Iteration  19: 785.386 ns/op
Iteration  20: 785.476 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1135.861 ns/op
# Warmup Iteration   2: 962.271 ns/op
# Warmup Iteration   3: 797.119 ns/op
# Warmup Iteration   4: 798.766 ns/op
# Warmup Iteration   5: 801.604 ns/op
Iteration   1: 805.404 ns/op
Iteration   2: 787.766 ns/op
Iteration   3: 810.407 ns/op
Iteration   4: 793.470 ns/op
Iteration   5: 791.746 ns/op
Iteration   6: 791.503 ns/op
Iteration   7: 791.568 ns/op
Iteration   8: 787.762 ns/op
Iteration   9: 791.369 ns/op
Iteration  10: 798.726 ns/op
Iteration  11: 792.904 ns/op
Iteration  12: 794.074 ns/op
Iteration  13: 798.532 ns/op
Iteration  14: 787.744 ns/op
Iteration  15: 789.830 ns/op
Iteration  16: 791.122 ns/op
Iteration  17: 790.479 ns/op
Iteration  18: 791.705 ns/op
Iteration  19: 791.891 ns/op
Iteration  20: 791.477 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1136.124 ns/op
# Warmup Iteration   2: 962.660 ns/op
# Warmup Iteration   3: 796.154 ns/op
# Warmup Iteration   4: 798.721 ns/op
# Warmup Iteration   5: 802.121 ns/op
Iteration   1: 806.825 ns/op
Iteration   2: 788.590 ns/op
Iteration   3: 811.037 ns/op
Iteration   4: 793.178 ns/op
Iteration   5: 792.039 ns/op
Iteration   6: 792.386 ns/op
Iteration   7: 792.442 ns/op
Iteration   8: 788.825 ns/op
Iteration   9: 792.672 ns/op
Iteration  10: 792.608 ns/op
Iteration  11: 793.159 ns/op
Iteration  12: 793.868 ns/op
Iteration  13: 799.762 ns/op
Iteration  14: 788.990 ns/op
Iteration  15: 801.464 ns/op
Iteration  16: 792.615 ns/op
Iteration  17: 792.295 ns/op
Iteration  18: 791.108 ns/op
Iteration  19: 791.765 ns/op
Iteration  20: 791.042 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1140.289 ns/op
# Warmup Iteration   2: 958.229 ns/op
# Warmup Iteration   3: 789.894 ns/op
# Warmup Iteration   4: 792.046 ns/op
# Warmup Iteration   5: 796.154 ns/op
Iteration   1: 799.573 ns/op
Iteration   2: 782.401 ns/op
Iteration   3: 804.472 ns/op
Iteration   4: 787.279 ns/op
Iteration   5: 786.615 ns/op
Iteration   6: 786.040 ns/op
Iteration   7: 785.524 ns/op
Iteration   8: 787.019 ns/op
Iteration   9: 783.245 ns/op
Iteration  10: 786.016 ns/op
Iteration  11: 786.162 ns/op
Iteration  12: 786.122 ns/op
Iteration  13: 785.722 ns/op
Iteration  14: 784.336 ns/op
Iteration  15: 782.747 ns/op
Iteration  16: 784.758 ns/op
Iteration  17: 784.642 ns/op
Iteration  18: 784.605 ns/op
Iteration  19: 785.052 ns/op
Iteration  20: 785.362 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  790.682 ±(99.9%) 2.201 ns/op [Average]
  (min, avg, max) = (780.795, 790.682, 811.037), stdev = 6.490
  CI (99.9%): [788.481, 792.883] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = ;W64xd/rx}sup5&}*QTPV&vRuBS(~jCT714Uz|zo\8j @x0#{/]:'C^'k@ 
nH)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1141.041 ns/op
# Warmup Iteration   2: 968.028 ns/op
# Warmup Iteration   3: 798.248 ns/op
# Warmup Iteration   4: 800.880 ns/op
# Warmup Iteration   5: 804.065 ns/op
Iteration   1: 808.497 ns/op
Iteration   2: 790.342 ns/op
Iteration   3: 813.271 ns/op
Iteration   4: 794.370 ns/op
Iteration   5: 794.638 ns/op
Iteration   6: 794.725 ns/op
Iteration   7: 794.291 ns/op
Iteration   8: 790.303 ns/op
Iteration   9: 795.455 ns/op
Iteration  10: 797.583 ns/op
Iteration  11: 794.269 ns/op
Iteration  12: 794.533 ns/op
Iteration  13: 798.562 ns/op
Iteration  14: 790.559 ns/op
Iteration  15: 792.643 ns/op
Iteration  16: 792.733 ns/op
Iteration  17: 793.440 ns/op
Iteration  18: 792.881 ns/op
Iteration  19: 792.925 ns/op
Iteration  20: 790.620 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1147.532 ns/op
# Warmup Iteration   2: 966.628 ns/op
# Warmup Iteration   3: 795.513 ns/op
# Warmup Iteration   4: 801.155 ns/op
# Warmup Iteration   5: 802.028 ns/op
Iteration   1: 805.749 ns/op
Iteration   2: 788.253 ns/op
Iteration   3: 810.976 ns/op
Iteration   4: 791.921 ns/op
Iteration   5: 791.595 ns/op
Iteration   6: 791.626 ns/op
Iteration   7: 792.626 ns/op
Iteration   8: 788.008 ns/op
Iteration   9: 792.381 ns/op
Iteration  10: 792.294 ns/op
Iteration  11: 792.609 ns/op
Iteration  12: 792.572 ns/op
Iteration  13: 792.675 ns/op
Iteration  14: 789.398 ns/op
Iteration  15: 790.727 ns/op
Iteration  16: 792.373 ns/op
Iteration  17: 791.239 ns/op
Iteration  18: 790.934 ns/op
Iteration  19: 792.798 ns/op
Iteration  20: 793.766 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1140.767 ns/op
# Warmup Iteration   2: 959.435 ns/op
# Warmup Iteration   3: 799.160 ns/op
# Warmup Iteration   4: 798.887 ns/op
# Warmup Iteration   5: 798.156 ns/op
Iteration   1: 802.551 ns/op
Iteration   2: 784.365 ns/op
Iteration   3: 812.046 ns/op
Iteration   4: 789.489 ns/op
Iteration   5: 793.996 ns/op
Iteration   6: 788.835 ns/op
Iteration   7: 792.135 ns/op
Iteration   8: 784.385 ns/op
Iteration   9: 789.278 ns/op
Iteration  10: 788.901 ns/op
Iteration  11: 790.510 ns/op
Iteration  12: 803.196 ns/op
Iteration  13: 802.368 ns/op
Iteration  14: 787.341 ns/op
Iteration  15: 784.056 ns/op
Iteration  16: 787.500 ns/op
Iteration  17: 787.434 ns/op
Iteration  18: 792.368 ns/op
Iteration  19: 786.823 ns/op
Iteration  20: 792.046 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1139.150 ns/op
# Warmup Iteration   2: 965.103 ns/op
# Warmup Iteration   3: 800.174 ns/op
# Warmup Iteration   4: 802.237 ns/op
# Warmup Iteration   5: 805.990 ns/op
Iteration   1: 808.936 ns/op
Iteration   2: 791.684 ns/op
Iteration   3: 814.544 ns/op
Iteration   4: 795.449 ns/op
Iteration   5: 795.825 ns/op
Iteration   6: 795.593 ns/op
Iteration   7: 795.763 ns/op
Iteration   8: 791.442 ns/op
Iteration   9: 799.067 ns/op
Iteration  10: 799.593 ns/op
Iteration  11: 799.533 ns/op
Iteration  12: 796.020 ns/op
Iteration  13: 798.417 ns/op
Iteration  14: 791.626 ns/op
Iteration  15: 793.622 ns/op
Iteration  16: 793.560 ns/op
Iteration  17: 793.728 ns/op
Iteration  18: 795.970 ns/op
Iteration  19: 795.194 ns/op
Iteration  20: 791.803 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1142.845 ns/op
# Warmup Iteration   2: 962.245 ns/op
# Warmup Iteration   3: 797.853 ns/op
# Warmup Iteration   4: 800.149 ns/op
# Warmup Iteration   5: 803.679 ns/op
Iteration   1: 807.606 ns/op
Iteration   2: 789.739 ns/op
Iteration   3: 813.132 ns/op
Iteration   4: 795.255 ns/op
Iteration   5: 794.159 ns/op
Iteration   6: 794.505 ns/op
Iteration   7: 793.669 ns/op
Iteration   8: 790.783 ns/op
Iteration   9: 794.354 ns/op
Iteration  10: 795.849 ns/op
Iteration  11: 795.042 ns/op
Iteration  12: 799.591 ns/op
Iteration  13: 796.962 ns/op
Iteration  14: 790.333 ns/op
Iteration  15: 792.303 ns/op
Iteration  16: 793.417 ns/op
Iteration  17: 792.265 ns/op
Iteration  18: 793.895 ns/op
Iteration  19: 794.386 ns/op
Iteration  20: 794.507 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  794.599 ±(99.9%) 2.100 ns/op [Average]
  (min, avg, max) = (784.056, 794.599, 814.544), stdev = 6.191
  CI (99.9%): [792.499, 796.699] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  ;W64xd/rx}sup5&}*QTPV&vRuBS(~jCT714Uz|zo\8j @x0#{/]:'C^'k@ 
nH  avgt  100  790.682 ± 2.201  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  ;W64xd/rx}sup5&}*QTPV&vRuBS(~jCT714Uz|zo\8j @x0#{/]:'C^'k@ 
nH  avgt  100  794.599 ± 2.100  ns/op

Benchmark result is saved to split_precompiled_regex_231_62_NonMatch.csv
