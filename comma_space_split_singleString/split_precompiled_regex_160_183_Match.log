# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =     

 				
			



	 	 

	    	
 	
 	 			
	  	  	
		
 
  
  


,  				

			 		 
					

	 
	 

 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1213.681 ns/op
# Warmup Iteration   2: 895.751 ns/op
# Warmup Iteration   3: 760.491 ns/op
# Warmup Iteration   4: 761.666 ns/op
# Warmup Iteration   5: 771.439 ns/op
Iteration   1: 775.051 ns/op
Iteration   2: 764.166 ns/op
Iteration   3: 760.004 ns/op
Iteration   4: 756.811 ns/op
Iteration   5: 756.187 ns/op
Iteration   6: 756.659 ns/op
Iteration   7: 756.750 ns/op
Iteration   8: 761.636 ns/op
Iteration   9: 757.117 ns/op
Iteration  10: 757.924 ns/op
Iteration  11: 755.868 ns/op
Iteration  12: 755.585 ns/op
Iteration  13: 755.588 ns/op
Iteration  14: 761.186 ns/op
Iteration  15: 756.362 ns/op
Iteration  16: 756.263 ns/op
Iteration  17: 755.300 ns/op
Iteration  18: 755.800 ns/op
Iteration  19: 755.984 ns/op
Iteration  20: 756.890 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1200.896 ns/op
# Warmup Iteration   2: 856.707 ns/op
# Warmup Iteration   3: 735.537 ns/op
# Warmup Iteration   4: 750.341 ns/op
# Warmup Iteration   5: 745.473 ns/op
Iteration   1: 749.633 ns/op
Iteration   2: 732.044 ns/op
Iteration   3: 732.782 ns/op
Iteration   4: 732.708 ns/op
Iteration   5: 732.466 ns/op
Iteration   6: 732.435 ns/op
Iteration   7: 732.210 ns/op
Iteration   8: 734.353 ns/op
Iteration   9: 732.619 ns/op
Iteration  10: 732.736 ns/op
Iteration  11: 730.677 ns/op
Iteration  12: 730.799 ns/op
Iteration  13: 730.512 ns/op
Iteration  14: 730.316 ns/op
Iteration  15: 730.360 ns/op
Iteration  16: 730.368 ns/op
Iteration  17: 732.644 ns/op
Iteration  18: 730.794 ns/op
Iteration  19: 730.287 ns/op
Iteration  20: 730.403 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1144.577 ns/op
# Warmup Iteration   2: 833.882 ns/op
# Warmup Iteration   3: 725.333 ns/op
# Warmup Iteration   4: 739.537 ns/op
# Warmup Iteration   5: 733.600 ns/op
Iteration   1: 737.530 ns/op
Iteration   2: 720.692 ns/op
Iteration   3: 720.191 ns/op
Iteration   4: 720.911 ns/op
Iteration   5: 720.285 ns/op
Iteration   6: 720.474 ns/op
Iteration   7: 720.393 ns/op
Iteration   8: 720.502 ns/op
Iteration   9: 720.258 ns/op
Iteration  10: 720.833 ns/op
Iteration  11: 718.347 ns/op
Iteration  12: 720.558 ns/op
Iteration  13: 718.038 ns/op
Iteration  14: 717.932 ns/op
Iteration  15: 718.381 ns/op
Iteration  16: 718.415 ns/op
Iteration  17: 724.104 ns/op
Iteration  18: 721.577 ns/op
Iteration  19: 719.323 ns/op
Iteration  20: 719.187 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1209.305 ns/op
# Warmup Iteration   2: 859.893 ns/op
# Warmup Iteration   3: 741.602 ns/op
# Warmup Iteration   4: 755.769 ns/op
# Warmup Iteration   5: 750.027 ns/op
Iteration   1: 755.153 ns/op
Iteration   2: 737.805 ns/op
Iteration   3: 737.357 ns/op
Iteration   4: 737.335 ns/op
Iteration   5: 737.543 ns/op
Iteration   6: 737.495 ns/op
Iteration   7: 737.452 ns/op
Iteration   8: 737.751 ns/op
Iteration   9: 738.085 ns/op
Iteration  10: 739.001 ns/op
Iteration  11: 735.967 ns/op
Iteration  12: 735.514 ns/op
Iteration  13: 735.417 ns/op
Iteration  14: 735.498 ns/op
Iteration  15: 735.529 ns/op
Iteration  16: 735.718 ns/op
Iteration  17: 735.426 ns/op
Iteration  18: 735.734 ns/op
Iteration  19: 737.844 ns/op
Iteration  20: 735.865 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1174.780 ns/op
# Warmup Iteration   2: 880.370 ns/op
# Warmup Iteration   3: 760.125 ns/op
# Warmup Iteration   4: 763.529 ns/op
# Warmup Iteration   5: 781.348 ns/op
Iteration   1: 772.495 ns/op
Iteration   2: 755.512 ns/op
Iteration   3: 755.265 ns/op
Iteration   4: 755.552 ns/op
Iteration   5: 755.719 ns/op
Iteration   6: 755.253 ns/op
Iteration   7: 755.645 ns/op
Iteration   8: 756.010 ns/op
Iteration   9: 755.570 ns/op
Iteration  10: 755.989 ns/op
Iteration  11: 753.620 ns/op
Iteration  12: 758.242 ns/op
Iteration  13: 755.596 ns/op
Iteration  14: 761.619 ns/op
Iteration  15: 754.030 ns/op
Iteration  16: 753.742 ns/op
Iteration  17: 753.342 ns/op
Iteration  18: 755.003 ns/op
Iteration  19: 755.810 ns/op
Iteration  20: 753.964 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  741.177 Â±(99.9%) 5.083 ns/op [Average]
  (min, avg, max) = (717.932, 741.177, 775.051), stdev = 14.988
  CI (99.9%): [736.093, 746.260] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =     

 				
			



	 	 

	    	
 	
 	 			
	  	  	
		
 
  
  


,  				

			 		 
					

	 
	 

 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1236.882 ns/op
# Warmup Iteration   2: 921.425 ns/op
# Warmup Iteration   3: 791.108 ns/op
# Warmup Iteration   4: 792.990 ns/op
# Warmup Iteration   5: 796.031 ns/op
Iteration   1: 805.664 ns/op
Iteration   2: 808.709 ns/op
Iteration   3: 788.030 ns/op
Iteration   4: 787.496 ns/op
Iteration   5: 786.989 ns/op
Iteration   6: 787.382 ns/op
Iteration   7: 787.347 ns/op
Iteration   8: 786.545 ns/op
Iteration   9: 787.147 ns/op
Iteration  10: 787.134 ns/op
Iteration  11: 787.006 ns/op
Iteration  12: 784.409 ns/op
Iteration  13: 783.921 ns/op
Iteration  14: 784.669 ns/op
Iteration  15: 789.803 ns/op
Iteration  16: 785.456 ns/op
Iteration  17: 786.516 ns/op
Iteration  18: 784.875 ns/op
Iteration  19: 785.130 ns/op
Iteration  20: 785.923 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1258.081 ns/op
# Warmup Iteration   2: 951.589 ns/op
# Warmup Iteration   3: 808.005 ns/op
# Warmup Iteration   4: 810.072 ns/op
# Warmup Iteration   5: 813.209 ns/op
Iteration   1: 817.292 ns/op
Iteration   2: 821.777 ns/op
Iteration   3: 804.087 ns/op
Iteration   4: 803.822 ns/op
Iteration   5: 808.437 ns/op
Iteration   6: 804.304 ns/op
Iteration   7: 804.501 ns/op
Iteration   8: 804.125 ns/op
Iteration   9: 804.590 ns/op
Iteration  10: 803.859 ns/op
Iteration  11: 804.442 ns/op
Iteration  12: 810.290 ns/op
Iteration  13: 801.950 ns/op
Iteration  14: 801.336 ns/op
Iteration  15: 802.289 ns/op
Iteration  16: 802.413 ns/op
Iteration  17: 802.452 ns/op
Iteration  18: 803.433 ns/op
Iteration  19: 804.839 ns/op
Iteration  20: 804.400 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1238.478 ns/op
# Warmup Iteration   2: 927.408 ns/op
# Warmup Iteration   3: 792.496 ns/op
# Warmup Iteration   4: 794.241 ns/op
# Warmup Iteration   5: 798.059 ns/op
Iteration   1: 802.107 ns/op
Iteration   2: 805.553 ns/op
Iteration   3: 788.364 ns/op
Iteration   4: 787.862 ns/op
Iteration   5: 787.876 ns/op
Iteration   6: 787.542 ns/op
Iteration   7: 787.701 ns/op
Iteration   8: 787.932 ns/op
Iteration   9: 787.494 ns/op
Iteration  10: 793.454 ns/op
Iteration  11: 788.897 ns/op
Iteration  12: 787.441 ns/op
Iteration  13: 784.784 ns/op
Iteration  14: 784.504 ns/op
Iteration  15: 784.494 ns/op
Iteration  16: 785.423 ns/op
Iteration  17: 785.498 ns/op
Iteration  18: 785.592 ns/op
Iteration  19: 785.164 ns/op
Iteration  20: 785.262 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1245.753 ns/op
# Warmup Iteration   2: 937.039 ns/op
# Warmup Iteration   3: 800.681 ns/op
# Warmup Iteration   4: 802.610 ns/op
# Warmup Iteration   5: 805.502 ns/op
Iteration   1: 809.937 ns/op
Iteration   2: 814.303 ns/op
Iteration   3: 796.455 ns/op
Iteration   4: 796.047 ns/op
Iteration   5: 796.354 ns/op
Iteration   6: 795.803 ns/op
Iteration   7: 795.378 ns/op
Iteration   8: 795.293 ns/op
Iteration   9: 795.304 ns/op
Iteration  10: 795.882 ns/op
Iteration  11: 798.785 ns/op
Iteration  12: 802.699 ns/op
Iteration  13: 795.700 ns/op
Iteration  14: 794.520 ns/op
Iteration  15: 794.166 ns/op
Iteration  16: 794.425 ns/op
Iteration  17: 795.290 ns/op
Iteration  18: 794.254 ns/op
Iteration  19: 794.832 ns/op
Iteration  20: 794.076 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1246.135 ns/op
# Warmup Iteration   2: 928.766 ns/op
# Warmup Iteration   3: 794.083 ns/op
# Warmup Iteration   4: 798.136 ns/op
# Warmup Iteration   5: 799.029 ns/op
Iteration   1: 803.392 ns/op
Iteration   2: 808.627 ns/op
Iteration   3: 790.953 ns/op
Iteration   4: 790.420 ns/op
Iteration   5: 789.179 ns/op
Iteration   6: 789.177 ns/op
Iteration   7: 789.604 ns/op
Iteration   8: 788.561 ns/op
Iteration   9: 789.623 ns/op
Iteration  10: 788.760 ns/op
Iteration  11: 789.150 ns/op
Iteration  12: 786.983 ns/op
Iteration  13: 787.083 ns/op
Iteration  14: 786.993 ns/op
Iteration  15: 787.183 ns/op
Iteration  16: 790.319 ns/op
Iteration  17: 788.915 ns/op
Iteration  18: 788.220 ns/op
Iteration  19: 787.391 ns/op
Iteration  20: 794.251 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  794.220 Â±(99.9%) 2.942 ns/op [Average]
  (min, avg, max) = (783.921, 794.220, 821.777), stdev = 8.676
  CI (99.9%): [791.278, 797.163] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*      

 				
			



	 	 

	    	
 	
 	 			
	  	  	
		
 
  
  


,  				

			 		 
					

	 
	 

 
  avgt  100  741.177 Â± 5.083  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*      

 				
			



	 	 

	    	
 	
 	 			
	  	  	
		
 
  
  


,  				

			 		 
					

	 
	 

 
  avgt  100  794.220 Â± 2.942  ns/op

Benchmark result is saved to split_precompiled_regex_160_183_Match.csv
