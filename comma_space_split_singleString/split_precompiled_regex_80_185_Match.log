# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  	
 
 
   
		
	 
 		 
	
		
				
  
 


 
	 	 ,
    			
    

 
 

 

	 	 	  

  
	
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1191.639 ns/op
# Warmup Iteration   2: 901.260 ns/op
# Warmup Iteration   3: 773.740 ns/op
# Warmup Iteration   4: 775.618 ns/op
# Warmup Iteration   5: 778.698 ns/op
Iteration   1: 783.421 ns/op
Iteration   2: 787.732 ns/op
Iteration   3: 770.623 ns/op
Iteration   4: 769.241 ns/op
Iteration   5: 769.906 ns/op
Iteration   6: 769.693 ns/op
Iteration   7: 769.394 ns/op
Iteration   8: 768.999 ns/op
Iteration   9: 769.015 ns/op
Iteration  10: 769.308 ns/op
Iteration  11: 770.180 ns/op
Iteration  12: 767.921 ns/op
Iteration  13: 767.720 ns/op
Iteration  14: 767.635 ns/op
Iteration  15: 767.488 ns/op
Iteration  16: 767.165 ns/op
Iteration  17: 767.321 ns/op
Iteration  18: 768.741 ns/op
Iteration  19: 767.384 ns/op
Iteration  20: 768.778 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1224.785 ns/op
# Warmup Iteration   2: 870.528 ns/op
# Warmup Iteration   3: 743.800 ns/op
# Warmup Iteration   4: 749.424 ns/op
# Warmup Iteration   5: 765.795 ns/op
Iteration   1: 757.104 ns/op
Iteration   2: 739.753 ns/op
Iteration   3: 740.545 ns/op
Iteration   4: 739.516 ns/op
Iteration   5: 740.052 ns/op
Iteration   6: 740.228 ns/op
Iteration   7: 739.989 ns/op
Iteration   8: 740.254 ns/op
Iteration   9: 740.264 ns/op
Iteration  10: 740.649 ns/op
Iteration  11: 738.530 ns/op
Iteration  12: 738.091 ns/op
Iteration  13: 738.167 ns/op
Iteration  14: 738.279 ns/op
Iteration  15: 738.028 ns/op
Iteration  16: 738.086 ns/op
Iteration  17: 739.685 ns/op
Iteration  18: 743.200 ns/op
Iteration  19: 739.705 ns/op
Iteration  20: 739.150 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1154.182 ns/op
# Warmup Iteration   2: 790.529 ns/op
# Warmup Iteration   3: 698.147 ns/op
# Warmup Iteration   4: 693.762 ns/op
# Warmup Iteration   5: 697.129 ns/op
Iteration   1: 701.978 ns/op
Iteration   2: 685.955 ns/op
Iteration   3: 685.352 ns/op
Iteration   4: 685.486 ns/op
Iteration   5: 688.265 ns/op
Iteration   6: 685.336 ns/op
Iteration   7: 684.904 ns/op
Iteration   8: 685.131 ns/op
Iteration   9: 685.495 ns/op
Iteration  10: 683.254 ns/op
Iteration  11: 683.409 ns/op
Iteration  12: 683.387 ns/op
Iteration  13: 689.040 ns/op
Iteration  14: 683.286 ns/op
Iteration  15: 683.253 ns/op
Iteration  16: 691.093 ns/op
Iteration  17: 684.221 ns/op
Iteration  18: 684.318 ns/op
Iteration  19: 684.101 ns/op
Iteration  20: 683.929 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1197.217 ns/op
# Warmup Iteration   2: 897.903 ns/op
# Warmup Iteration   3: 765.794 ns/op
# Warmup Iteration   4: 770.066 ns/op
# Warmup Iteration   5: 773.833 ns/op
Iteration   1: 778.545 ns/op
Iteration   2: 781.317 ns/op
Iteration   3: 766.819 ns/op
Iteration   4: 766.516 ns/op
Iteration   5: 762.593 ns/op
Iteration   6: 761.716 ns/op
Iteration   7: 765.093 ns/op
Iteration   8: 763.280 ns/op
Iteration   9: 767.380 ns/op
Iteration  10: 769.906 ns/op
Iteration  11: 760.416 ns/op
Iteration  12: 760.161 ns/op
Iteration  13: 760.693 ns/op
Iteration  14: 759.795 ns/op
Iteration  15: 760.380 ns/op
Iteration  16: 759.643 ns/op
Iteration  17: 760.197 ns/op
Iteration  18: 761.176 ns/op
Iteration  19: 761.494 ns/op
Iteration  20: 761.901 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1214.842 ns/op
# Warmup Iteration   2: 875.880 ns/op
# Warmup Iteration   3: 751.461 ns/op
# Warmup Iteration   4: 753.793 ns/op
# Warmup Iteration   5: 774.040 ns/op
Iteration   1: 765.284 ns/op
Iteration   2: 747.741 ns/op
Iteration   3: 748.053 ns/op
Iteration   4: 747.950 ns/op
Iteration   5: 747.402 ns/op
Iteration   6: 747.551 ns/op
Iteration   7: 747.946 ns/op
Iteration   8: 747.696 ns/op
Iteration   9: 748.479 ns/op
Iteration  10: 748.397 ns/op
Iteration  11: 747.890 ns/op
Iteration  12: 750.813 ns/op
Iteration  13: 751.222 ns/op
Iteration  14: 745.743 ns/op
Iteration  15: 745.604 ns/op
Iteration  16: 746.881 ns/op
Iteration  17: 745.221 ns/op
Iteration  18: 745.424 ns/op
Iteration  19: 745.466 ns/op
Iteration  20: 746.599 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  741.945 Â±(99.9%) 10.333 ns/op [Average]
  (min, avg, max) = (683.253, 741.945, 787.732), stdev = 30.467
  CI (99.9%): [731.612, 752.278] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  	
 
 
   
		
	 
 		 
	
		
				
  
 


 
	 	 ,
    			
    

 
 

 

	 	 	  

  
	
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1263.434 ns/op
# Warmup Iteration   2: 962.631 ns/op
# Warmup Iteration   3: 811.812 ns/op
# Warmup Iteration   4: 813.832 ns/op
# Warmup Iteration   5: 816.893 ns/op
Iteration   1: 821.154 ns/op
Iteration   2: 826.458 ns/op
Iteration   3: 807.836 ns/op
Iteration   4: 807.455 ns/op
Iteration   5: 807.681 ns/op
Iteration   6: 807.818 ns/op
Iteration   7: 808.674 ns/op
Iteration   8: 808.589 ns/op
Iteration   9: 808.736 ns/op
Iteration  10: 809.676 ns/op
Iteration  11: 812.218 ns/op
Iteration  12: 809.018 ns/op
Iteration  13: 806.456 ns/op
Iteration  14: 807.478 ns/op
Iteration  15: 806.478 ns/op
Iteration  16: 807.729 ns/op
Iteration  17: 807.210 ns/op
Iteration  18: 816.739 ns/op
Iteration  19: 808.718 ns/op
Iteration  20: 807.372 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1195.217 ns/op
# Warmup Iteration   2: 877.587 ns/op
# Warmup Iteration   3: 763.235 ns/op
# Warmup Iteration   4: 778.249 ns/op
# Warmup Iteration   5: 772.670 ns/op
Iteration   1: 777.441 ns/op
Iteration   2: 760.217 ns/op
Iteration   3: 760.525 ns/op
Iteration   4: 759.732 ns/op
Iteration   5: 760.122 ns/op
Iteration   6: 759.743 ns/op
Iteration   7: 759.434 ns/op
Iteration   8: 759.746 ns/op
Iteration   9: 766.361 ns/op
Iteration  10: 760.569 ns/op
Iteration  11: 759.541 ns/op
Iteration  12: 757.882 ns/op
Iteration  13: 757.664 ns/op
Iteration  14: 757.761 ns/op
Iteration  15: 758.018 ns/op
Iteration  16: 757.465 ns/op
Iteration  17: 758.053 ns/op
Iteration  18: 758.424 ns/op
Iteration  19: 758.852 ns/op
Iteration  20: 758.183 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1247.093 ns/op
# Warmup Iteration   2: 939.478 ns/op
# Warmup Iteration   3: 802.477 ns/op
# Warmup Iteration   4: 804.417 ns/op
# Warmup Iteration   5: 807.264 ns/op
Iteration   1: 812.100 ns/op
Iteration   2: 817.581 ns/op
Iteration   3: 800.107 ns/op
Iteration   4: 798.475 ns/op
Iteration   5: 798.981 ns/op
Iteration   6: 799.002 ns/op
Iteration   7: 799.939 ns/op
Iteration   8: 799.511 ns/op
Iteration   9: 800.085 ns/op
Iteration  10: 808.622 ns/op
Iteration  11: 802.958 ns/op
Iteration  12: 802.417 ns/op
Iteration  13: 815.180 ns/op
Iteration  14: 797.604 ns/op
Iteration  15: 797.743 ns/op
Iteration  16: 797.771 ns/op
Iteration  17: 801.204 ns/op
Iteration  18: 798.609 ns/op
Iteration  19: 800.019 ns/op
Iteration  20: 799.062 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1209.684 ns/op
# Warmup Iteration   2: 886.361 ns/op
# Warmup Iteration   3: 767.185 ns/op
# Warmup Iteration   4: 774.891 ns/op
# Warmup Iteration   5: 791.309 ns/op
Iteration   1: 785.495 ns/op
Iteration   2: 768.368 ns/op
Iteration   3: 767.604 ns/op
Iteration   4: 764.128 ns/op
Iteration   5: 765.477 ns/op
Iteration   6: 765.167 ns/op
Iteration   7: 766.261 ns/op
Iteration   8: 769.079 ns/op
Iteration   9: 763.241 ns/op
Iteration  10: 763.616 ns/op
Iteration  11: 760.807 ns/op
Iteration  12: 760.527 ns/op
Iteration  13: 760.977 ns/op
Iteration  14: 766.453 ns/op
Iteration  15: 760.952 ns/op
Iteration  16: 761.325 ns/op
Iteration  17: 761.594 ns/op
Iteration  18: 760.744 ns/op
Iteration  19: 761.229 ns/op
Iteration  20: 760.760 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1252.979 ns/op
# Warmup Iteration   2: 950.482 ns/op
# Warmup Iteration   3: 808.944 ns/op
# Warmup Iteration   4: 811.580 ns/op
# Warmup Iteration   5: 814.804 ns/op
Iteration   1: 819.332 ns/op
Iteration   2: 824.258 ns/op
Iteration   3: 806.472 ns/op
Iteration   4: 805.361 ns/op
Iteration   5: 805.962 ns/op
Iteration   6: 805.791 ns/op
Iteration   7: 805.633 ns/op
Iteration   8: 809.332 ns/op
Iteration   9: 805.382 ns/op
Iteration  10: 805.733 ns/op
Iteration  11: 807.129 ns/op
Iteration  12: 803.364 ns/op
Iteration  13: 802.714 ns/op
Iteration  14: 804.479 ns/op
Iteration  15: 803.338 ns/op
Iteration  16: 803.298 ns/op
Iteration  17: 803.577 ns/op
Iteration  18: 803.130 ns/op
Iteration  19: 804.427 ns/op
Iteration  20: 803.783 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  788.825 Â±(99.9%) 7.609 ns/op [Average]
  (min, avg, max) = (757.465, 788.825, 826.458), stdev = 22.434
  CI (99.9%): [781.216, 796.434] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                  (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   	
 
 
   
		
	 
 		 
	
		
				
  
 


 
	 	 ,
    			
    

 
 

 

	 	 	  

  
	
  avgt  100  741.945 Â± 10.333  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   	
 
 
   
		
	 
 		 
	
		
				
  
 


 
	 	 ,
    			
    

 
 

 

	 	 	  

  
	
  avgt  100  788.825 Â±  7.609  ns/op

Benchmark result is saved to split_precompiled_regex_80_185_Match.csv
