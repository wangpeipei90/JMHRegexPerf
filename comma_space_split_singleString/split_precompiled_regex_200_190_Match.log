# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   
	
  

	 			
  
,
 	
	
  
 


 
 
	  	  	 
  

		  
	
	 	 	   


	 	
  		   	  
	
    	

 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1266.187 ns/op
# Warmup Iteration   2: 964.153 ns/op
# Warmup Iteration   3: 806.906 ns/op
# Warmup Iteration   4: 808.600 ns/op
# Warmup Iteration   5: 811.679 ns/op
Iteration   1: 816.308 ns/op
Iteration   2: 821.033 ns/op
Iteration   3: 802.496 ns/op
Iteration   4: 801.948 ns/op
Iteration   5: 802.108 ns/op
Iteration   6: 802.190 ns/op
Iteration   7: 806.133 ns/op
Iteration   8: 807.088 ns/op
Iteration   9: 802.885 ns/op
Iteration  10: 808.725 ns/op
Iteration  11: 805.390 ns/op
Iteration  12: 800.316 ns/op
Iteration  13: 800.575 ns/op
Iteration  14: 801.351 ns/op
Iteration  15: 801.398 ns/op
Iteration  16: 800.966 ns/op
Iteration  17: 826.721 ns/op
Iteration  18: 800.486 ns/op
Iteration  19: 801.377 ns/op
Iteration  20: 801.394 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1143.776 ns/op
# Warmup Iteration   2: 834.229 ns/op
# Warmup Iteration   3: 726.607 ns/op
# Warmup Iteration   4: 740.808 ns/op
# Warmup Iteration   5: 735.733 ns/op
Iteration   1: 740.134 ns/op
Iteration   2: 723.397 ns/op
Iteration   3: 723.569 ns/op
Iteration   4: 723.195 ns/op
Iteration   5: 722.875 ns/op
Iteration   6: 723.122 ns/op
Iteration   7: 723.490 ns/op
Iteration   8: 723.566 ns/op
Iteration   9: 723.427 ns/op
Iteration  10: 724.272 ns/op
Iteration  11: 725.315 ns/op
Iteration  12: 721.236 ns/op
Iteration  13: 723.290 ns/op
Iteration  14: 721.898 ns/op
Iteration  15: 721.447 ns/op
Iteration  16: 723.135 ns/op
Iteration  17: 722.697 ns/op
Iteration  18: 724.349 ns/op
Iteration  19: 725.742 ns/op
Iteration  20: 723.549 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1275.220 ns/op
# Warmup Iteration   2: 966.242 ns/op
# Warmup Iteration   3: 811.769 ns/op
# Warmup Iteration   4: 814.175 ns/op
# Warmup Iteration   5: 817.845 ns/op
Iteration   1: 821.844 ns/op
Iteration   2: 826.684 ns/op
Iteration   3: 809.541 ns/op
Iteration   4: 808.397 ns/op
Iteration   5: 807.800 ns/op
Iteration   6: 807.843 ns/op
Iteration   7: 808.715 ns/op
Iteration   8: 809.087 ns/op
Iteration   9: 808.641 ns/op
Iteration  10: 809.141 ns/op
Iteration  11: 808.380 ns/op
Iteration  12: 809.373 ns/op
Iteration  13: 806.222 ns/op
Iteration  14: 806.378 ns/op
Iteration  15: 806.509 ns/op
Iteration  16: 804.051 ns/op
Iteration  17: 806.010 ns/op
Iteration  18: 808.008 ns/op
Iteration  19: 808.153 ns/op
Iteration  20: 809.436 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1141.982 ns/op
# Warmup Iteration   2: 834.449 ns/op
# Warmup Iteration   3: 728.609 ns/op
# Warmup Iteration   4: 742.903 ns/op
# Warmup Iteration   5: 737.743 ns/op
Iteration   1: 741.844 ns/op
Iteration   2: 725.801 ns/op
Iteration   3: 725.544 ns/op
Iteration   4: 725.225 ns/op
Iteration   5: 725.374 ns/op
Iteration   6: 725.054 ns/op
Iteration   7: 725.068 ns/op
Iteration   8: 725.030 ns/op
Iteration   9: 724.749 ns/op
Iteration  10: 725.123 ns/op
Iteration  11: 726.108 ns/op
Iteration  12: 722.118 ns/op
Iteration  13: 723.627 ns/op
Iteration  14: 722.665 ns/op
Iteration  15: 722.405 ns/op
Iteration  16: 723.170 ns/op
Iteration  17: 723.616 ns/op
Iteration  18: 723.323 ns/op
Iteration  19: 723.043 ns/op
Iteration  20: 723.148 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1146.009 ns/op
# Warmup Iteration   2: 838.062 ns/op
# Warmup Iteration   3: 728.035 ns/op
# Warmup Iteration   4: 745.170 ns/op
# Warmup Iteration   5: 737.807 ns/op
Iteration   1: 741.087 ns/op
Iteration   2: 725.253 ns/op
Iteration   3: 724.991 ns/op
Iteration   4: 724.742 ns/op
Iteration   5: 728.215 ns/op
Iteration   6: 724.692 ns/op
Iteration   7: 725.995 ns/op
Iteration   8: 724.377 ns/op
Iteration   9: 724.491 ns/op
Iteration  10: 724.727 ns/op
Iteration  11: 723.283 ns/op
Iteration  12: 722.258 ns/op
Iteration  13: 724.147 ns/op
Iteration  14: 722.844 ns/op
Iteration  15: 722.059 ns/op
Iteration  16: 722.444 ns/op
Iteration  17: 722.851 ns/op
Iteration  18: 722.449 ns/op
Iteration  19: 722.155 ns/op
Iteration  20: 722.263 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  757.822 Â±(99.9%) 13.946 ns/op [Average]
  (min, avg, max) = (721.236, 757.822, 826.721), stdev = 41.119
  CI (99.9%): [743.876, 771.767] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   
	
  

	 			
  
,
 	
	
  
 


 
 
	  	  	 
  

		  
	
	 	 	   


	 	
  		   	  
	
    	

 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1209.075 ns/op
# Warmup Iteration   2: 880.525 ns/op
# Warmup Iteration   3: 756.504 ns/op
# Warmup Iteration   4: 771.662 ns/op
# Warmup Iteration   5: 765.341 ns/op
Iteration   1: 768.303 ns/op
Iteration   2: 753.079 ns/op
Iteration   3: 753.965 ns/op
Iteration   4: 754.757 ns/op
Iteration   5: 752.347 ns/op
Iteration   6: 752.439 ns/op
Iteration   7: 752.074 ns/op
Iteration   8: 752.585 ns/op
Iteration   9: 752.698 ns/op
Iteration  10: 752.205 ns/op
Iteration  11: 751.131 ns/op
Iteration  12: 750.309 ns/op
Iteration  13: 750.059 ns/op
Iteration  14: 750.139 ns/op
Iteration  15: 749.983 ns/op
Iteration  16: 749.995 ns/op
Iteration  17: 750.371 ns/op
Iteration  18: 751.968 ns/op
Iteration  19: 750.783 ns/op
Iteration  20: 751.899 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1227.231 ns/op
# Warmup Iteration   2: 934.672 ns/op
# Warmup Iteration   3: 798.346 ns/op
# Warmup Iteration   4: 801.043 ns/op
# Warmup Iteration   5: 804.187 ns/op
Iteration   1: 807.726 ns/op
Iteration   2: 810.494 ns/op
Iteration   3: 794.671 ns/op
Iteration   4: 794.508 ns/op
Iteration   5: 794.500 ns/op
Iteration   6: 795.276 ns/op
Iteration   7: 795.512 ns/op
Iteration   8: 794.521 ns/op
Iteration   9: 795.019 ns/op
Iteration  10: 794.682 ns/op
Iteration  11: 795.633 ns/op
Iteration  12: 793.312 ns/op
Iteration  13: 791.943 ns/op
Iteration  14: 792.017 ns/op
Iteration  15: 793.170 ns/op
Iteration  16: 792.883 ns/op
Iteration  17: 794.733 ns/op
Iteration  18: 794.733 ns/op
Iteration  19: 794.192 ns/op
Iteration  20: 792.206 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1175.488 ns/op
# Warmup Iteration   2: 864.797 ns/op
# Warmup Iteration   3: 754.790 ns/op
# Warmup Iteration   4: 769.612 ns/op
# Warmup Iteration   5: 763.737 ns/op
Iteration   1: 769.109 ns/op
Iteration   2: 752.241 ns/op
Iteration   3: 751.994 ns/op
Iteration   4: 751.377 ns/op
Iteration   5: 751.947 ns/op
Iteration   6: 751.447 ns/op
Iteration   7: 752.567 ns/op
Iteration   8: 751.151 ns/op
Iteration   9: 751.045 ns/op
Iteration  10: 752.966 ns/op
Iteration  11: 751.756 ns/op
Iteration  12: 748.906 ns/op
Iteration  13: 752.981 ns/op
Iteration  14: 749.173 ns/op
Iteration  15: 748.863 ns/op
Iteration  16: 749.593 ns/op
Iteration  17: 752.647 ns/op
Iteration  18: 749.236 ns/op
Iteration  19: 750.351 ns/op
Iteration  20: 749.646 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1224.171 ns/op
# Warmup Iteration   2: 905.609 ns/op
# Warmup Iteration   3: 778.337 ns/op
# Warmup Iteration   4: 781.134 ns/op
# Warmup Iteration   5: 793.735 ns/op
Iteration   1: 793.486 ns/op
Iteration   2: 784.047 ns/op
Iteration   3: 774.922 ns/op
Iteration   4: 774.866 ns/op
Iteration   5: 774.802 ns/op
Iteration   6: 775.037 ns/op
Iteration   7: 775.447 ns/op
Iteration   8: 777.893 ns/op
Iteration   9: 776.933 ns/op
Iteration  10: 776.189 ns/op
Iteration  11: 779.806 ns/op
Iteration  12: 772.994 ns/op
Iteration  13: 773.188 ns/op
Iteration  14: 773.780 ns/op
Iteration  15: 772.866 ns/op
Iteration  16: 773.345 ns/op
Iteration  17: 773.567 ns/op
Iteration  18: 773.161 ns/op
Iteration  19: 773.296 ns/op
Iteration  20: 772.546 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1201.709 ns/op
# Warmup Iteration   2: 871.434 ns/op
# Warmup Iteration   3: 754.775 ns/op
# Warmup Iteration   4: 770.474 ns/op
# Warmup Iteration   5: 764.513 ns/op
Iteration   1: 769.238 ns/op
Iteration   2: 752.111 ns/op
Iteration   3: 751.743 ns/op
Iteration   4: 751.250 ns/op
Iteration   5: 751.866 ns/op
Iteration   6: 752.265 ns/op
Iteration   7: 752.117 ns/op
Iteration   8: 752.048 ns/op
Iteration   9: 752.017 ns/op
Iteration  10: 752.322 ns/op
Iteration  11: 751.628 ns/op
Iteration  12: 749.993 ns/op
Iteration  13: 749.411 ns/op
Iteration  14: 750.235 ns/op
Iteration  15: 750.591 ns/op
Iteration  16: 752.616 ns/op
Iteration  17: 752.121 ns/op
Iteration  18: 751.888 ns/op
Iteration  19: 750.267 ns/op
Iteration  20: 750.410 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  765.701 Â±(99.9%) 6.166 ns/op [Average]
  (min, avg, max) = (748.863, 765.701, 810.494), stdev = 18.179
  CI (99.9%): [759.536, 771.867] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                       (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    
	
  

	 			
  
,
 	
	
  
 


 
 
	  	  	 
  

		  
	
	 	 	   


	 	
  		   	  
	
    	

 
  avgt  100  757.822 Â± 13.946  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    
	
  

	 			
  
,
 	
	
  
 


 
 
	  	  	 
  

		  
	
	 	 	   


	 	
  		   	  
	
    	

 
  avgt  100  765.701 Â±  6.166  ns/op

Benchmark result is saved to split_precompiled_regex_200_190_Match.csv
