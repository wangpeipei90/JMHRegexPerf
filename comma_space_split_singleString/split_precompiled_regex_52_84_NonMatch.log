# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = D'&Ew'd}k*iJ!]mqszgn3ytO(M4yJx$x {l1'+9'e483Gobl]<W4L{|N	<z"fB<MQ/g?4(w3-+L6YkK	w#u5)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1317.588 ns/op
# Warmup Iteration   2: 1249.568 ns/op
# Warmup Iteration   3: 973.442 ns/op
# Warmup Iteration   4: 977.863 ns/op
# Warmup Iteration   5: 979.608 ns/op
Iteration   1: 983.802 ns/op
Iteration   2: 968.070 ns/op
Iteration   3: 988.626 ns/op
Iteration   4: 995.020 ns/op
Iteration   5: 968.171 ns/op
Iteration   6: 973.750 ns/op
Iteration   7: 972.357 ns/op
Iteration   8: 973.385 ns/op
Iteration   9: 968.859 ns/op
Iteration  10: 972.438 ns/op
Iteration  11: 972.506 ns/op
Iteration  12: 968.526 ns/op
Iteration  13: 973.040 ns/op
Iteration  14: 973.508 ns/op
Iteration  15: 968.327 ns/op
Iteration  16: 973.521 ns/op
Iteration  17: 975.567 ns/op
Iteration  18: 968.850 ns/op
Iteration  19: 971.436 ns/op
Iteration  20: 976.114 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1325.714 ns/op
# Warmup Iteration   2: 1248.449 ns/op
# Warmup Iteration   3: 970.994 ns/op
# Warmup Iteration   4: 979.720 ns/op
# Warmup Iteration   5: 982.380 ns/op
Iteration   1: 987.246 ns/op
Iteration   2: 970.537 ns/op
Iteration   3: 992.311 ns/op
Iteration   4: 997.506 ns/op
Iteration   5: 971.001 ns/op
Iteration   6: 977.399 ns/op
Iteration   7: 974.964 ns/op
Iteration   8: 972.521 ns/op
Iteration   9: 975.205 ns/op
Iteration  10: 975.067 ns/op
Iteration  11: 974.896 ns/op
Iteration  12: 971.492 ns/op
Iteration  13: 978.861 ns/op
Iteration  14: 978.264 ns/op
Iteration  15: 970.046 ns/op
Iteration  16: 976.463 ns/op
Iteration  17: 976.405 ns/op
Iteration  18: 969.391 ns/op
Iteration  19: 979.743 ns/op
Iteration  20: 971.952 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1315.251 ns/op
# Warmup Iteration   2: 1231.906 ns/op
# Warmup Iteration   3: 967.276 ns/op
# Warmup Iteration   4: 978.769 ns/op
# Warmup Iteration   5: 979.141 ns/op
Iteration   1: 983.708 ns/op
Iteration   2: 967.289 ns/op
Iteration   3: 993.204 ns/op
Iteration   4: 994.550 ns/op
Iteration   5: 967.138 ns/op
Iteration   6: 973.659 ns/op
Iteration   7: 974.523 ns/op
Iteration   8: 973.712 ns/op
Iteration   9: 967.290 ns/op
Iteration  10: 971.806 ns/op
Iteration  11: 972.552 ns/op
Iteration  12: 967.318 ns/op
Iteration  13: 978.045 ns/op
Iteration  14: 977.937 ns/op
Iteration  15: 967.144 ns/op
Iteration  16: 989.508 ns/op
Iteration  17: 975.898 ns/op
Iteration  18: 967.361 ns/op
Iteration  19: 969.611 ns/op
Iteration  20: 971.230 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1319.010 ns/op
# Warmup Iteration   2: 1238.703 ns/op
# Warmup Iteration   3: 966.157 ns/op
# Warmup Iteration   4: 985.108 ns/op
# Warmup Iteration   5: 980.187 ns/op
Iteration   1: 987.511 ns/op
Iteration   2: 965.961 ns/op
Iteration   3: 990.654 ns/op
Iteration   4: 995.589 ns/op
Iteration   5: 966.244 ns/op
Iteration   6: 972.042 ns/op
Iteration   7: 970.478 ns/op
Iteration   8: 966.415 ns/op
Iteration   9: 970.085 ns/op
Iteration  10: 971.138 ns/op
Iteration  11: 972.654 ns/op
Iteration  12: 965.860 ns/op
Iteration  13: 971.967 ns/op
Iteration  14: 974.884 ns/op
Iteration  15: 966.145 ns/op
Iteration  16: 984.945 ns/op
Iteration  17: 974.217 ns/op
Iteration  18: 966.287 ns/op
Iteration  19: 970.102 ns/op
Iteration  20: 969.047 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1326.557 ns/op
# Warmup Iteration   2: 1240.400 ns/op
# Warmup Iteration   3: 967.136 ns/op
# Warmup Iteration   4: 975.276 ns/op
# Warmup Iteration   5: 978.852 ns/op
Iteration   1: 982.967 ns/op
Iteration   2: 967.119 ns/op
Iteration   3: 988.329 ns/op
Iteration   4: 994.167 ns/op
Iteration   5: 967.261 ns/op
Iteration   6: 971.663 ns/op
Iteration   7: 970.987 ns/op
Iteration   8: 971.528 ns/op
Iteration   9: 966.953 ns/op
Iteration  10: 972.025 ns/op
Iteration  11: 971.985 ns/op
Iteration  12: 967.166 ns/op
Iteration  13: 972.030 ns/op
Iteration  14: 974.216 ns/op
Iteration  15: 967.373 ns/op
Iteration  16: 976.704 ns/op
Iteration  17: 990.328 ns/op
Iteration  18: 967.803 ns/op
Iteration  19: 970.105 ns/op
Iteration  20: 970.913 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  974.845 ±(99.9%) 2.725 ns/op [Average]
  (min, avg, max) = (965.860, 974.845, 997.506), stdev = 8.033
  CI (99.9%): [972.120, 977.569] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = D'&Ew'd}k*iJ!]mqszgn3ytO(M4yJx$x {l1'+9'e483Gobl]<W4L{|N	<z"fB<MQ/g?4(w3-+L6YkK	w#u5)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1318.828 ns/op
# Warmup Iteration   2: 1247.093 ns/op
# Warmup Iteration   3: 973.005 ns/op
# Warmup Iteration   4: 982.567 ns/op
# Warmup Iteration   5: 985.062 ns/op
Iteration   1: 990.865 ns/op
Iteration   2: 972.184 ns/op
Iteration   3: 994.801 ns/op
Iteration   4: 1000.159 ns/op
Iteration   5: 972.241 ns/op
Iteration   6: 979.805 ns/op
Iteration   7: 981.188 ns/op
Iteration   8: 972.371 ns/op
Iteration   9: 978.601 ns/op
Iteration  10: 977.127 ns/op
Iteration  11: 977.431 ns/op
Iteration  12: 972.138 ns/op
Iteration  13: 976.918 ns/op
Iteration  14: 977.500 ns/op
Iteration  15: 971.766 ns/op
Iteration  16: 979.947 ns/op
Iteration  17: 978.204 ns/op
Iteration  18: 971.834 ns/op
Iteration  19: 991.210 ns/op
Iteration  20: 974.749 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1317.357 ns/op
# Warmup Iteration   2: 1238.012 ns/op
# Warmup Iteration   3: 966.826 ns/op
# Warmup Iteration   4: 975.364 ns/op
# Warmup Iteration   5: 978.615 ns/op
Iteration   1: 982.664 ns/op
Iteration   2: 967.129 ns/op
Iteration   3: 992.069 ns/op
Iteration   4: 994.034 ns/op
Iteration   5: 966.992 ns/op
Iteration   6: 971.293 ns/op
Iteration   7: 971.524 ns/op
Iteration   8: 971.642 ns/op
Iteration   9: 966.877 ns/op
Iteration  10: 971.293 ns/op
Iteration  11: 970.366 ns/op
Iteration  12: 966.973 ns/op
Iteration  13: 970.963 ns/op
Iteration  14: 977.124 ns/op
Iteration  15: 966.889 ns/op
Iteration  16: 972.206 ns/op
Iteration  17: 971.767 ns/op
Iteration  18: 966.702 ns/op
Iteration  19: 973.188 ns/op
Iteration  20: 969.720 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1324.772 ns/op
# Warmup Iteration   2: 1247.115 ns/op
# Warmup Iteration   3: 973.423 ns/op
# Warmup Iteration   4: 982.142 ns/op
# Warmup Iteration   5: 986.941 ns/op
Iteration   1: 994.534 ns/op
Iteration   2: 973.312 ns/op
Iteration   3: 994.410 ns/op
Iteration   4: 1001.136 ns/op
Iteration   5: 973.244 ns/op
Iteration   6: 978.150 ns/op
Iteration   7: 978.243 ns/op
Iteration   8: 973.476 ns/op
Iteration   9: 977.898 ns/op
Iteration  10: 977.994 ns/op
Iteration  11: 978.483 ns/op
Iteration  12: 973.089 ns/op
Iteration  13: 978.425 ns/op
Iteration  14: 981.099 ns/op
Iteration  15: 973.366 ns/op
Iteration  16: 978.634 ns/op
Iteration  17: 995.456 ns/op
Iteration  18: 973.750 ns/op
Iteration  19: 975.998 ns/op
Iteration  20: 975.667 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1326.753 ns/op
# Warmup Iteration   2: 1246.829 ns/op
# Warmup Iteration   3: 972.931 ns/op
# Warmup Iteration   4: 981.488 ns/op
# Warmup Iteration   5: 984.749 ns/op
Iteration   1: 989.049 ns/op
Iteration   2: 972.952 ns/op
Iteration   3: 994.135 ns/op
Iteration   4: 999.570 ns/op
Iteration   5: 972.904 ns/op
Iteration   6: 978.678 ns/op
Iteration   7: 976.781 ns/op
Iteration   8: 972.286 ns/op
Iteration   9: 976.900 ns/op
Iteration  10: 976.873 ns/op
Iteration  11: 977.644 ns/op
Iteration  12: 972.614 ns/op
Iteration  13: 987.238 ns/op
Iteration  14: 978.853 ns/op
Iteration  15: 972.632 ns/op
Iteration  16: 979.364 ns/op
Iteration  17: 980.347 ns/op
Iteration  18: 972.852 ns/op
Iteration  19: 983.013 ns/op
Iteration  20: 975.711 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1323.454 ns/op
# Warmup Iteration   2: 1240.274 ns/op
# Warmup Iteration   3: 975.366 ns/op
# Warmup Iteration   4: 983.349 ns/op
# Warmup Iteration   5: 987.141 ns/op
Iteration   1: 990.080 ns/op
Iteration   2: 974.173 ns/op
Iteration   3: 995.538 ns/op
Iteration   4: 1002.029 ns/op
Iteration   5: 974.275 ns/op
Iteration   6: 981.963 ns/op
Iteration   7: 979.686 ns/op
Iteration   8: 974.510 ns/op
Iteration   9: 979.640 ns/op
Iteration  10: 983.376 ns/op
Iteration  11: 981.326 ns/op
Iteration  12: 974.422 ns/op
Iteration  13: 980.053 ns/op
Iteration  14: 979.221 ns/op
Iteration  15: 974.354 ns/op
Iteration  16: 980.021 ns/op
Iteration  17: 983.064 ns/op
Iteration  18: 974.402 ns/op
Iteration  19: 976.535 ns/op
Iteration  20: 977.625 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  978.655 ±(99.9%) 2.822 ns/op [Average]
  (min, avg, max) = (966.702, 978.655, 1002.029), stdev = 8.321
  CI (99.9%): [975.833, 981.477] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  D'&Ew'd}k*iJ!]mqszgn3ytO(M4yJx$x {l1'+9'e483Gobl]<W4L{|N	<z"fB<MQ/g?4(w3-+L6YkK	w#u5  avgt  100  974.845 ± 2.725  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  D'&Ew'd}k*iJ!]mqszgn3ytO(M4yJx$x {l1'+9'e483Gobl]<W4L{|N	<z"fB<MQ/g?4(w3-+L6YkK	w#u5  avgt  100  978.655 ± 2.822  ns/op

Benchmark result is saved to split_precompiled_regex_52_84_NonMatch.csv
