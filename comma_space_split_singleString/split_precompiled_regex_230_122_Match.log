# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		  
	 



	



 	  
		 	 

  
 
	,
		
  

	 
 					


	
	

	  	 		  	
	  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1035.399 ns/op
# Warmup Iteration   2: 686.432 ns/op
# Warmup Iteration   3: 620.379 ns/op
# Warmup Iteration   4: 619.476 ns/op
# Warmup Iteration   5: 640.551 ns/op
Iteration   1: 611.632 ns/op
Iteration   2: 611.719 ns/op
Iteration   3: 611.470 ns/op
Iteration   4: 615.029 ns/op
Iteration   5: 611.710 ns/op
Iteration   6: 611.640 ns/op
Iteration   7: 612.010 ns/op
Iteration   8: 613.307 ns/op
Iteration   9: 610.671 ns/op
Iteration  10: 611.261 ns/op
Iteration  11: 610.052 ns/op
Iteration  12: 611.579 ns/op
Iteration  13: 609.912 ns/op
Iteration  14: 610.524 ns/op
Iteration  15: 610.188 ns/op
Iteration  16: 612.736 ns/op
Iteration  17: 610.523 ns/op
Iteration  18: 611.208 ns/op
Iteration  19: 613.754 ns/op
Iteration  20: 611.608 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1036.969 ns/op
# Warmup Iteration   2: 690.899 ns/op
# Warmup Iteration   3: 617.423 ns/op
# Warmup Iteration   4: 620.735 ns/op
# Warmup Iteration   5: 641.745 ns/op
Iteration   1: 612.833 ns/op
Iteration   2: 612.948 ns/op
Iteration   3: 612.366 ns/op
Iteration   4: 615.611 ns/op
Iteration   5: 612.417 ns/op
Iteration   6: 612.590 ns/op
Iteration   7: 612.946 ns/op
Iteration   8: 613.759 ns/op
Iteration   9: 610.462 ns/op
Iteration  10: 610.339 ns/op
Iteration  11: 610.248 ns/op
Iteration  12: 611.230 ns/op
Iteration  13: 611.420 ns/op
Iteration  14: 610.443 ns/op
Iteration  15: 610.323 ns/op
Iteration  16: 611.891 ns/op
Iteration  17: 610.561 ns/op
Iteration  18: 610.355 ns/op
Iteration  19: 612.217 ns/op
Iteration  20: 610.292 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1087.008 ns/op
# Warmup Iteration   2: 713.514 ns/op
# Warmup Iteration   3: 625.622 ns/op
# Warmup Iteration   4: 629.150 ns/op
# Warmup Iteration   5: 632.123 ns/op
Iteration   1: 642.024 ns/op
Iteration   2: 621.424 ns/op
Iteration   3: 621.309 ns/op
Iteration   4: 620.997 ns/op
Iteration   5: 624.777 ns/op
Iteration   6: 621.228 ns/op
Iteration   7: 621.495 ns/op
Iteration   8: 621.881 ns/op
Iteration   9: 622.712 ns/op
Iteration  10: 619.192 ns/op
Iteration  11: 619.297 ns/op
Iteration  12: 619.480 ns/op
Iteration  13: 620.585 ns/op
Iteration  14: 619.748 ns/op
Iteration  15: 619.564 ns/op
Iteration  16: 619.823 ns/op
Iteration  17: 623.215 ns/op
Iteration  18: 620.702 ns/op
Iteration  19: 620.808 ns/op
Iteration  20: 619.552 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1045.037 ns/op
# Warmup Iteration   2: 702.722 ns/op
# Warmup Iteration   3: 631.038 ns/op
# Warmup Iteration   4: 631.854 ns/op
# Warmup Iteration   5: 634.930 ns/op
Iteration   1: 642.641 ns/op
Iteration   2: 624.286 ns/op
Iteration   3: 624.547 ns/op
Iteration   4: 624.352 ns/op
Iteration   5: 627.143 ns/op
Iteration   6: 629.763 ns/op
Iteration   7: 623.412 ns/op
Iteration   8: 624.096 ns/op
Iteration   9: 624.807 ns/op
Iteration  10: 622.584 ns/op
Iteration  11: 627.444 ns/op
Iteration  12: 622.628 ns/op
Iteration  13: 623.837 ns/op
Iteration  14: 624.185 ns/op
Iteration  15: 622.155 ns/op
Iteration  16: 622.251 ns/op
Iteration  17: 622.827 ns/op
Iteration  18: 624.344 ns/op
Iteration  19: 622.757 ns/op
Iteration  20: 623.104 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1037.589 ns/op
# Warmup Iteration   2: 693.537 ns/op
# Warmup Iteration   3: 621.507 ns/op
# Warmup Iteration   4: 624.225 ns/op
# Warmup Iteration   5: 635.629 ns/op
Iteration   1: 625.230 ns/op
Iteration   2: 616.971 ns/op
Iteration   3: 616.903 ns/op
Iteration   4: 617.373 ns/op
Iteration   5: 620.203 ns/op
Iteration   6: 616.806 ns/op
Iteration   7: 617.309 ns/op
Iteration   8: 616.739 ns/op
Iteration   9: 615.890 ns/op
Iteration  10: 619.679 ns/op
Iteration  11: 615.209 ns/op
Iteration  12: 614.910 ns/op
Iteration  13: 617.932 ns/op
Iteration  14: 615.991 ns/op
Iteration  15: 616.541 ns/op
Iteration  16: 618.557 ns/op
Iteration  17: 615.518 ns/op
Iteration  18: 616.545 ns/op
Iteration  19: 616.786 ns/op
Iteration  20: 618.621 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  617.605 ±(99.9%) 2.142 ns/op [Average]
  (min, avg, max) = (609.912, 617.605, 642.641), stdev = 6.315
  CI (99.9%): [615.463, 619.746] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		  
	 



	



 	  
		 	 

  
 
	,
		
  

	 
 					


	
	

	  	 		  	
	  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1091.368 ns/op
# Warmup Iteration   2: 725.646 ns/op
# Warmup Iteration   3: 643.728 ns/op
# Warmup Iteration   4: 646.105 ns/op
# Warmup Iteration   5: 649.460 ns/op
Iteration   1: 657.289 ns/op
Iteration   2: 638.808 ns/op
Iteration   3: 638.802 ns/op
Iteration   4: 638.262 ns/op
Iteration   5: 642.017 ns/op
Iteration   6: 638.750 ns/op
Iteration   7: 638.621 ns/op
Iteration   8: 638.742 ns/op
Iteration   9: 638.548 ns/op
Iteration  10: 636.603 ns/op
Iteration  11: 636.799 ns/op
Iteration  12: 636.419 ns/op
Iteration  13: 639.311 ns/op
Iteration  14: 636.322 ns/op
Iteration  15: 639.921 ns/op
Iteration  16: 637.809 ns/op
Iteration  17: 637.799 ns/op
Iteration  18: 638.783 ns/op
Iteration  19: 637.111 ns/op
Iteration  20: 637.447 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1064.510 ns/op
# Warmup Iteration   2: 706.511 ns/op
# Warmup Iteration   3: 635.451 ns/op
# Warmup Iteration   4: 634.929 ns/op
# Warmup Iteration   5: 653.347 ns/op
Iteration   1: 630.750 ns/op
Iteration   2: 627.492 ns/op
Iteration   3: 627.003 ns/op
Iteration   4: 630.173 ns/op
Iteration   5: 627.334 ns/op
Iteration   6: 627.634 ns/op
Iteration   7: 627.076 ns/op
Iteration   8: 629.024 ns/op
Iteration   9: 624.954 ns/op
Iteration  10: 625.519 ns/op
Iteration  11: 625.813 ns/op
Iteration  12: 626.812 ns/op
Iteration  13: 625.455 ns/op
Iteration  14: 625.544 ns/op
Iteration  15: 626.217 ns/op
Iteration  16: 632.759 ns/op
Iteration  17: 626.096 ns/op
Iteration  18: 625.999 ns/op
Iteration  19: 626.196 ns/op
Iteration  20: 627.703 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1063.266 ns/op
# Warmup Iteration   2: 718.523 ns/op
# Warmup Iteration   3: 646.131 ns/op
# Warmup Iteration   4: 649.264 ns/op
# Warmup Iteration   5: 652.309 ns/op
Iteration   1: 658.957 ns/op
Iteration   2: 641.015 ns/op
Iteration   3: 641.001 ns/op
Iteration   4: 641.487 ns/op
Iteration   5: 644.187 ns/op
Iteration   6: 641.282 ns/op
Iteration   7: 641.691 ns/op
Iteration   8: 641.352 ns/op
Iteration   9: 640.404 ns/op
Iteration  10: 639.424 ns/op
Iteration  11: 639.032 ns/op
Iteration  12: 639.139 ns/op
Iteration  13: 639.355 ns/op
Iteration  14: 641.180 ns/op
Iteration  15: 640.429 ns/op
Iteration  16: 641.560 ns/op
Iteration  17: 640.982 ns/op
Iteration  18: 642.252 ns/op
Iteration  19: 639.830 ns/op
Iteration  20: 641.176 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1056.647 ns/op
# Warmup Iteration   2: 713.976 ns/op
# Warmup Iteration   3: 645.327 ns/op
# Warmup Iteration   4: 652.262 ns/op
# Warmup Iteration   5: 652.882 ns/op
Iteration   1: 657.443 ns/op
Iteration   2: 640.098 ns/op
Iteration   3: 640.218 ns/op
Iteration   4: 640.410 ns/op
Iteration   5: 643.654 ns/op
Iteration   6: 640.355 ns/op
Iteration   7: 640.881 ns/op
Iteration   8: 640.688 ns/op
Iteration   9: 643.551 ns/op
Iteration  10: 638.901 ns/op
Iteration  11: 638.418 ns/op
Iteration  12: 638.850 ns/op
Iteration  13: 638.293 ns/op
Iteration  14: 641.871 ns/op
Iteration  15: 638.424 ns/op
Iteration  16: 639.337 ns/op
Iteration  17: 640.042 ns/op
Iteration  18: 642.353 ns/op
Iteration  19: 639.385 ns/op
Iteration  20: 639.412 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1062.216 ns/op
# Warmup Iteration   2: 708.639 ns/op
# Warmup Iteration   3: 637.131 ns/op
# Warmup Iteration   4: 639.591 ns/op
# Warmup Iteration   5: 652.828 ns/op
Iteration   1: 639.951 ns/op
Iteration   2: 631.985 ns/op
Iteration   3: 631.815 ns/op
Iteration   4: 631.599 ns/op
Iteration   5: 635.187 ns/op
Iteration   6: 632.088 ns/op
Iteration   7: 631.785 ns/op
Iteration   8: 632.820 ns/op
Iteration   9: 631.048 ns/op
Iteration  10: 630.023 ns/op
Iteration  11: 630.509 ns/op
Iteration  12: 632.072 ns/op
Iteration  13: 630.466 ns/op
Iteration  14: 630.278 ns/op
Iteration  15: 629.912 ns/op
Iteration  16: 632.051 ns/op
Iteration  17: 630.604 ns/op
Iteration  18: 630.752 ns/op
Iteration  19: 630.685 ns/op
Iteration  20: 633.176 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  636.268 ±(99.9%) 2.277 ns/op [Average]
  (min, avg, max) = (624.954, 636.268, 658.957), stdev = 6.714
  CI (99.9%): [633.991, 638.545] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                   (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		  
	 



	



 	  
		 	 

  
 
	,
		
  

	 
 					


	
	

	  	 		  	
	    avgt  100  617.605 ± 2.142  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		  
	 



	



 	  
		 	 

  
 
	,
		
  

	 
 					


	
	

	  	 		  	
	    avgt  100  636.268 ± 2.277  ns/op

Benchmark result is saved to split_precompiled_regex_230_122_Match.csv
