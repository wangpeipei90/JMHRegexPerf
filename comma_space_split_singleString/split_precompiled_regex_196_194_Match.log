# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
  
  
 



  	 		 		
	 		
  		    

	
	
	
 	


	 
 	


			

 
	   	

   


   
	
 
		, 		  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1177.473 ns/op
# Warmup Iteration   2: 876.725 ns/op
# Warmup Iteration   3: 753.621 ns/op
# Warmup Iteration   4: 755.580 ns/op
# Warmup Iteration   5: 776.977 ns/op
Iteration   1: 768.096 ns/op
Iteration   2: 749.818 ns/op
Iteration   3: 749.309 ns/op
Iteration   4: 749.778 ns/op
Iteration   5: 750.257 ns/op
Iteration   6: 749.507 ns/op
Iteration   7: 749.781 ns/op
Iteration   8: 749.659 ns/op
Iteration   9: 750.070 ns/op
Iteration  10: 753.321 ns/op
Iteration  11: 749.804 ns/op
Iteration  12: 747.432 ns/op
Iteration  13: 748.634 ns/op
Iteration  14: 750.135 ns/op
Iteration  15: 747.797 ns/op
Iteration  16: 748.405 ns/op
Iteration  17: 748.853 ns/op
Iteration  18: 747.915 ns/op
Iteration  19: 748.574 ns/op
Iteration  20: 750.184 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1178.578 ns/op
# Warmup Iteration   2: 891.752 ns/op
# Warmup Iteration   3: 764.034 ns/op
# Warmup Iteration   4: 772.683 ns/op
# Warmup Iteration   5: 775.650 ns/op
Iteration   1: 776.559 ns/op
Iteration   2: 769.999 ns/op
Iteration   3: 759.812 ns/op
Iteration   4: 767.678 ns/op
Iteration   5: 760.529 ns/op
Iteration   6: 760.122 ns/op
Iteration   7: 763.906 ns/op
Iteration   8: 759.229 ns/op
Iteration   9: 760.006 ns/op
Iteration  10: 759.924 ns/op
Iteration  11: 758.826 ns/op
Iteration  12: 757.138 ns/op
Iteration  13: 757.302 ns/op
Iteration  14: 757.154 ns/op
Iteration  15: 758.879 ns/op
Iteration  16: 757.775 ns/op
Iteration  17: 757.504 ns/op
Iteration  18: 757.232 ns/op
Iteration  19: 757.863 ns/op
Iteration  20: 758.544 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1248.637 ns/op
# Warmup Iteration   2: 931.293 ns/op
# Warmup Iteration   3: 793.731 ns/op
# Warmup Iteration   4: 795.850 ns/op
# Warmup Iteration   5: 799.150 ns/op
Iteration   1: 802.825 ns/op
Iteration   2: 816.383 ns/op
Iteration   3: 789.653 ns/op
Iteration   4: 789.271 ns/op
Iteration   5: 789.317 ns/op
Iteration   6: 789.773 ns/op
Iteration   7: 789.243 ns/op
Iteration   8: 789.512 ns/op
Iteration   9: 790.010 ns/op
Iteration  10: 790.131 ns/op
Iteration  11: 794.888 ns/op
Iteration  12: 793.604 ns/op
Iteration  13: 787.719 ns/op
Iteration  14: 787.812 ns/op
Iteration  15: 788.892 ns/op
Iteration  16: 787.355 ns/op
Iteration  17: 787.377 ns/op
Iteration  18: 788.055 ns/op
Iteration  19: 788.083 ns/op
Iteration  20: 788.401 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1179.313 ns/op
# Warmup Iteration   2: 881.571 ns/op
# Warmup Iteration   3: 759.889 ns/op
# Warmup Iteration   4: 761.956 ns/op
# Warmup Iteration   5: 781.224 ns/op
Iteration   1: 772.604 ns/op
Iteration   2: 756.586 ns/op
Iteration   3: 756.998 ns/op
Iteration   4: 754.453 ns/op
Iteration   5: 755.845 ns/op
Iteration   6: 755.052 ns/op
Iteration   7: 755.940 ns/op
Iteration   8: 755.470 ns/op
Iteration   9: 755.082 ns/op
Iteration  10: 755.472 ns/op
Iteration  11: 753.157 ns/op
Iteration  12: 754.056 ns/op
Iteration  13: 754.244 ns/op
Iteration  14: 753.892 ns/op
Iteration  15: 753.377 ns/op
Iteration  16: 753.331 ns/op
Iteration  17: 754.386 ns/op
Iteration  18: 753.816 ns/op
Iteration  19: 753.801 ns/op
Iteration  20: 753.942 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1261.313 ns/op
# Warmup Iteration   2: 938.072 ns/op
# Warmup Iteration   3: 794.602 ns/op
# Warmup Iteration   4: 801.950 ns/op
# Warmup Iteration   5: 802.570 ns/op
Iteration   1: 804.567 ns/op
Iteration   2: 809.724 ns/op
Iteration   3: 790.506 ns/op
Iteration   4: 790.457 ns/op
Iteration   5: 790.534 ns/op
Iteration   6: 790.060 ns/op
Iteration   7: 794.062 ns/op
Iteration   8: 791.399 ns/op
Iteration   9: 791.408 ns/op
Iteration  10: 793.918 ns/op
Iteration  11: 796.845 ns/op
Iteration  12: 794.180 ns/op
Iteration  13: 790.236 ns/op
Iteration  14: 791.457 ns/op
Iteration  15: 791.300 ns/op
Iteration  16: 791.264 ns/op
Iteration  17: 791.189 ns/op
Iteration  18: 791.429 ns/op
Iteration  19: 790.408 ns/op
Iteration  20: 790.163 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  770.282 Â±(99.9%) 6.478 ns/op [Average]
  (min, avg, max) = (747.432, 770.282, 816.383), stdev = 19.100
  CI (99.9%): [763.805, 776.760] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
  
  
 



  	 		 		
	 		
  		    

	
	
	
 	


	 
 	


			

 
	   	

   


   
	
 
		, 		  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1251.536 ns/op
# Warmup Iteration   2: 968.861 ns/op
# Warmup Iteration   3: 825.793 ns/op
# Warmup Iteration   4: 827.182 ns/op
# Warmup Iteration   5: 829.776 ns/op
Iteration   1: 834.809 ns/op
Iteration   2: 839.309 ns/op
Iteration   3: 820.507 ns/op
Iteration   4: 820.088 ns/op
Iteration   5: 820.551 ns/op
Iteration   6: 820.739 ns/op
Iteration   7: 819.890 ns/op
Iteration   8: 820.248 ns/op
Iteration   9: 820.037 ns/op
Iteration  10: 820.075 ns/op
Iteration  11: 820.405 ns/op
Iteration  12: 818.213 ns/op
Iteration  13: 819.098 ns/op
Iteration  14: 818.262 ns/op
Iteration  15: 817.581 ns/op
Iteration  16: 821.463 ns/op
Iteration  17: 819.462 ns/op
Iteration  18: 818.263 ns/op
Iteration  19: 818.468 ns/op
Iteration  20: 819.004 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1209.791 ns/op
# Warmup Iteration   2: 914.956 ns/op
# Warmup Iteration   3: 792.936 ns/op
# Warmup Iteration   4: 795.153 ns/op
# Warmup Iteration   5: 797.521 ns/op
Iteration   1: 803.235 ns/op
Iteration   2: 806.947 ns/op
Iteration   3: 791.908 ns/op
Iteration   4: 789.359 ns/op
Iteration   5: 789.722 ns/op
Iteration   6: 788.784 ns/op
Iteration   7: 789.846 ns/op
Iteration   8: 792.480 ns/op
Iteration   9: 790.764 ns/op
Iteration  10: 790.363 ns/op
Iteration  11: 789.133 ns/op
Iteration  12: 786.729 ns/op
Iteration  13: 787.517 ns/op
Iteration  14: 786.568 ns/op
Iteration  15: 787.337 ns/op
Iteration  16: 786.556 ns/op
Iteration  17: 787.572 ns/op
Iteration  18: 788.026 ns/op
Iteration  19: 787.267 ns/op
Iteration  20: 788.712 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1239.718 ns/op
# Warmup Iteration   2: 924.633 ns/op
# Warmup Iteration   3: 793.987 ns/op
# Warmup Iteration   4: 796.607 ns/op
# Warmup Iteration   5: 799.369 ns/op
Iteration   1: 802.944 ns/op
Iteration   2: 808.399 ns/op
Iteration   3: 791.974 ns/op
Iteration   4: 790.710 ns/op
Iteration   5: 789.731 ns/op
Iteration   6: 789.217 ns/op
Iteration   7: 790.797 ns/op
Iteration   8: 790.959 ns/op
Iteration   9: 790.971 ns/op
Iteration  10: 791.383 ns/op
Iteration  11: 791.469 ns/op
Iteration  12: 787.997 ns/op
Iteration  13: 787.826 ns/op
Iteration  14: 793.833 ns/op
Iteration  15: 794.009 ns/op
Iteration  16: 787.828 ns/op
Iteration  17: 796.646 ns/op
Iteration  18: 788.044 ns/op
Iteration  19: 790.773 ns/op
Iteration  20: 787.996 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1195.607 ns/op
# Warmup Iteration   2: 899.774 ns/op
# Warmup Iteration   3: 778.276 ns/op
# Warmup Iteration   4: 780.385 ns/op
# Warmup Iteration   5: 796.485 ns/op
Iteration   1: 793.235 ns/op
Iteration   2: 778.259 ns/op
Iteration   3: 775.142 ns/op
Iteration   4: 774.702 ns/op
Iteration   5: 775.025 ns/op
Iteration   6: 776.629 ns/op
Iteration   7: 780.696 ns/op
Iteration   8: 774.991 ns/op
Iteration   9: 775.658 ns/op
Iteration  10: 776.053 ns/op
Iteration  11: 776.938 ns/op
Iteration  12: 771.923 ns/op
Iteration  13: 771.828 ns/op
Iteration  14: 772.079 ns/op
Iteration  15: 772.881 ns/op
Iteration  16: 772.405 ns/op
Iteration  17: 774.131 ns/op
Iteration  18: 775.158 ns/op
Iteration  19: 773.032 ns/op
Iteration  20: 772.743 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1251.147 ns/op
# Warmup Iteration   2: 964.494 ns/op
# Warmup Iteration   3: 825.941 ns/op
# Warmup Iteration   4: 828.374 ns/op
# Warmup Iteration   5: 831.940 ns/op
Iteration   1: 836.214 ns/op
Iteration   2: 840.600 ns/op
Iteration   3: 823.343 ns/op
Iteration   4: 821.885 ns/op
Iteration   5: 828.236 ns/op
Iteration   6: 822.791 ns/op
Iteration   7: 823.288 ns/op
Iteration   8: 823.093 ns/op
Iteration   9: 823.528 ns/op
Iteration  10: 826.380 ns/op
Iteration  11: 831.771 ns/op
Iteration  12: 827.337 ns/op
Iteration  13: 838.024 ns/op
Iteration  14: 821.913 ns/op
Iteration  15: 828.699 ns/op
Iteration  16: 821.123 ns/op
Iteration  17: 821.538 ns/op
Iteration  18: 822.260 ns/op
Iteration  19: 818.213 ns/op
Iteration  20: 822.342 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  801.149 Â±(99.9%) 6.841 ns/op [Average]
  (min, avg, max) = (771.828, 801.149, 840.600), stdev = 20.170
  CI (99.9%): [794.308, 807.990] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
  
  
 



  	 		 		
	 		
  		    

	
	
	
 	


	 
 	


			

 
	   	

   


   
	
 
		, 		    avgt  100  770.282 Â± 6.478  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
  
  
 



  	 		 		
	 		
  		    

	
	
	
 	


	 
 	


			

 
	   	

   


   
	
 
		, 		    avgt  100  801.149 Â± 6.841  ns/op

Benchmark result is saved to split_precompiled_regex_196_194_Match.csv
