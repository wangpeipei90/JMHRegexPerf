# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = Z=G,\8uQfTG=9GH7qv/ekXdDn{fG!N,)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1271.829 ns/op
# Warmup Iteration   2: 950.405 ns/op
# Warmup Iteration   3: 814.230 ns/op
# Warmup Iteration   4: 822.792 ns/op
# Warmup Iteration   5: 830.496 ns/op
Iteration   1: 828.010 ns/op
Iteration   2: 810.095 ns/op
Iteration   3: 808.652 ns/op
Iteration   4: 808.234 ns/op
Iteration   5: 809.070 ns/op
Iteration   6: 808.700 ns/op
Iteration   7: 808.445 ns/op
Iteration   8: 808.596 ns/op
Iteration   9: 808.253 ns/op
Iteration  10: 808.814 ns/op
Iteration  11: 806.816 ns/op
Iteration  12: 806.492 ns/op
Iteration  13: 806.526 ns/op
Iteration  14: 806.337 ns/op
Iteration  15: 806.140 ns/op
Iteration  16: 806.031 ns/op
Iteration  17: 806.075 ns/op
Iteration  18: 806.738 ns/op
Iteration  19: 806.613 ns/op
Iteration  20: 806.890 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1263.680 ns/op
# Warmup Iteration   2: 933.335 ns/op
# Warmup Iteration   3: 810.776 ns/op
# Warmup Iteration   4: 826.408 ns/op
# Warmup Iteration   5: 820.514 ns/op
Iteration   1: 826.425 ns/op
Iteration   2: 810.090 ns/op
Iteration   3: 807.758 ns/op
Iteration   4: 807.444 ns/op
Iteration   5: 807.798 ns/op
Iteration   6: 808.297 ns/op
Iteration   7: 807.725 ns/op
Iteration   8: 807.206 ns/op
Iteration   9: 806.680 ns/op
Iteration  10: 806.401 ns/op
Iteration  11: 804.385 ns/op
Iteration  12: 804.393 ns/op
Iteration  13: 803.867 ns/op
Iteration  14: 804.134 ns/op
Iteration  15: 804.095 ns/op
Iteration  16: 803.904 ns/op
Iteration  17: 804.524 ns/op
Iteration  18: 804.849 ns/op
Iteration  19: 804.625 ns/op
Iteration  20: 804.515 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1262.879 ns/op
# Warmup Iteration   2: 931.587 ns/op
# Warmup Iteration   3: 808.238 ns/op
# Warmup Iteration   4: 824.982 ns/op
# Warmup Iteration   5: 822.071 ns/op
Iteration   1: 821.888 ns/op
Iteration   2: 807.004 ns/op
Iteration   3: 811.041 ns/op
Iteration   4: 807.321 ns/op
Iteration   5: 805.085 ns/op
Iteration   6: 804.224 ns/op
Iteration   7: 804.760 ns/op
Iteration   8: 814.777 ns/op
Iteration   9: 817.790 ns/op
Iteration  10: 804.594 ns/op
Iteration  11: 802.575 ns/op
Iteration  12: 802.120 ns/op
Iteration  13: 801.844 ns/op
Iteration  14: 801.965 ns/op
Iteration  15: 801.961 ns/op
Iteration  16: 802.219 ns/op
Iteration  17: 802.164 ns/op
Iteration  18: 802.152 ns/op
Iteration  19: 802.163 ns/op
Iteration  20: 802.552 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1261.704 ns/op
# Warmup Iteration   2: 932.634 ns/op
# Warmup Iteration   3: 809.983 ns/op
# Warmup Iteration   4: 826.700 ns/op
# Warmup Iteration   5: 821.199 ns/op
Iteration   1: 826.768 ns/op
Iteration   2: 808.641 ns/op
Iteration   3: 806.926 ns/op
Iteration   4: 807.603 ns/op
Iteration   5: 807.466 ns/op
Iteration   6: 807.919 ns/op
Iteration   7: 806.859 ns/op
Iteration   8: 806.951 ns/op
Iteration   9: 807.320 ns/op
Iteration  10: 807.275 ns/op
Iteration  11: 804.658 ns/op
Iteration  12: 805.205 ns/op
Iteration  13: 805.617 ns/op
Iteration  14: 805.409 ns/op
Iteration  15: 805.244 ns/op
Iteration  16: 805.192 ns/op
Iteration  17: 805.128 ns/op
Iteration  18: 805.833 ns/op
Iteration  19: 805.545 ns/op
Iteration  20: 806.518 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1279.722 ns/op
# Warmup Iteration   2: 950.486 ns/op
# Warmup Iteration   3: 814.019 ns/op
# Warmup Iteration   4: 816.478 ns/op
# Warmup Iteration   5: 836.339 ns/op
Iteration   1: 824.485 ns/op
Iteration   2: 809.040 ns/op
Iteration   3: 809.975 ns/op
Iteration   4: 809.081 ns/op
Iteration   5: 810.318 ns/op
Iteration   6: 809.186 ns/op
Iteration   7: 809.222 ns/op
Iteration   8: 809.054 ns/op
Iteration   9: 809.654 ns/op
Iteration  10: 810.417 ns/op
Iteration  11: 810.497 ns/op
Iteration  12: 817.023 ns/op
Iteration  13: 813.178 ns/op
Iteration  14: 807.340 ns/op
Iteration  15: 807.306 ns/op
Iteration  16: 807.010 ns/op
Iteration  17: 808.026 ns/op
Iteration  18: 808.710 ns/op
Iteration  19: 808.080 ns/op
Iteration  20: 808.353 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  807.849 ±(99.9%) 1.699 ns/op [Average]
  (min, avg, max) = (801.844, 807.849, 828.010), stdev = 5.009
  CI (99.9%): [806.150, 809.548] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = Z=G,\8uQfTG=9GH7qv/ekXdDn{fG!N,)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1329.252 ns/op
# Warmup Iteration   2: 939.721 ns/op
# Warmup Iteration   3: 802.669 ns/op
# Warmup Iteration   4: 818.388 ns/op
# Warmup Iteration   5: 811.738 ns/op
Iteration   1: 817.112 ns/op
Iteration   2: 799.208 ns/op
Iteration   3: 798.041 ns/op
Iteration   4: 798.438 ns/op
Iteration   5: 798.347 ns/op
Iteration   6: 798.666 ns/op
Iteration   7: 798.077 ns/op
Iteration   8: 798.807 ns/op
Iteration   9: 798.273 ns/op
Iteration  10: 798.331 ns/op
Iteration  11: 804.476 ns/op
Iteration  12: 796.024 ns/op
Iteration  13: 795.862 ns/op
Iteration  14: 795.740 ns/op
Iteration  15: 795.986 ns/op
Iteration  16: 796.102 ns/op
Iteration  17: 796.180 ns/op
Iteration  18: 796.165 ns/op
Iteration  19: 796.228 ns/op
Iteration  20: 795.934 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1266.513 ns/op
# Warmup Iteration   2: 919.838 ns/op
# Warmup Iteration   3: 803.934 ns/op
# Warmup Iteration   4: 819.157 ns/op
# Warmup Iteration   5: 814.132 ns/op
Iteration   1: 822.873 ns/op
Iteration   2: 810.636 ns/op
Iteration   3: 799.977 ns/op
Iteration   4: 799.878 ns/op
Iteration   5: 799.529 ns/op
Iteration   6: 799.888 ns/op
Iteration   7: 799.159 ns/op
Iteration   8: 799.788 ns/op
Iteration   9: 800.096 ns/op
Iteration  10: 800.441 ns/op
Iteration  11: 804.155 ns/op
Iteration  12: 797.896 ns/op
Iteration  13: 797.773 ns/op
Iteration  14: 797.894 ns/op
Iteration  15: 798.045 ns/op
Iteration  16: 798.171 ns/op
Iteration  17: 802.718 ns/op
Iteration  18: 798.912 ns/op
Iteration  19: 798.772 ns/op
Iteration  20: 798.676 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1308.513 ns/op
# Warmup Iteration   2: 948.190 ns/op
# Warmup Iteration   3: 812.552 ns/op
# Warmup Iteration   4: 830.523 ns/op
# Warmup Iteration   5: 821.831 ns/op
Iteration   1: 827.547 ns/op
Iteration   2: 809.454 ns/op
Iteration   3: 809.490 ns/op
Iteration   4: 808.429 ns/op
Iteration   5: 808.815 ns/op
Iteration   6: 808.411 ns/op
Iteration   7: 808.805 ns/op
Iteration   8: 808.389 ns/op
Iteration   9: 808.744 ns/op
Iteration  10: 809.546 ns/op
Iteration  11: 814.248 ns/op
Iteration  12: 806.682 ns/op
Iteration  13: 806.367 ns/op
Iteration  14: 805.648 ns/op
Iteration  15: 807.331 ns/op
Iteration  16: 806.549 ns/op
Iteration  17: 807.246 ns/op
Iteration  18: 806.853 ns/op
Iteration  19: 807.808 ns/op
Iteration  20: 806.887 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1269.179 ns/op
# Warmup Iteration   2: 916.390 ns/op
# Warmup Iteration   3: 801.025 ns/op
# Warmup Iteration   4: 814.433 ns/op
# Warmup Iteration   5: 809.457 ns/op
Iteration   1: 813.951 ns/op
Iteration   2: 796.402 ns/op
Iteration   3: 796.180 ns/op
Iteration   4: 796.372 ns/op
Iteration   5: 795.570 ns/op
Iteration   6: 795.558 ns/op
Iteration   7: 795.518 ns/op
Iteration   8: 803.420 ns/op
Iteration   9: 908.530 ns/op
Iteration  10: 821.862 ns/op
Iteration  11: 793.649 ns/op
Iteration  12: 799.818 ns/op
Iteration  13: 795.033 ns/op
Iteration  14: 795.841 ns/op
Iteration  15: 794.287 ns/op
Iteration  16: 794.737 ns/op
Iteration  17: 795.068 ns/op
Iteration  18: 794.510 ns/op
Iteration  19: 794.278 ns/op
Iteration  20: 795.071 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1308.070 ns/op
# Warmup Iteration   2: 941.057 ns/op
# Warmup Iteration   3: 820.458 ns/op
# Warmup Iteration   4: 833.646 ns/op
# Warmup Iteration   5: 824.865 ns/op
Iteration   1: 831.755 ns/op
Iteration   2: 809.995 ns/op
Iteration   3: 823.752 ns/op
Iteration   4: 809.550 ns/op
Iteration   5: 809.700 ns/op
Iteration   6: 815.205 ns/op
Iteration   7: 809.946 ns/op
Iteration   8: 813.398 ns/op
Iteration   9: 817.235 ns/op
Iteration  10: 820.433 ns/op
Iteration  11: 806.398 ns/op
Iteration  12: 810.092 ns/op
Iteration  13: 806.817 ns/op
Iteration  14: 807.070 ns/op
Iteration  15: 816.117 ns/op
Iteration  16: 807.653 ns/op
Iteration  17: 807.091 ns/op
Iteration  18: 807.346 ns/op
Iteration  19: 807.337 ns/op
Iteration  20: 808.298 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  805.014 ±(99.9%) 4.501 ns/op [Average]
  (min, avg, max) = (793.649, 805.014, 908.530), stdev = 13.270
  CI (99.9%): [800.513, 809.514] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  Z=G,\8uQfTG=9GH7qv/ekXdDn{fG!N,  avgt  100  807.849 ± 1.699  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  Z=G,\8uQfTG=9GH7qv/ekXdDn{fG!N,  avgt  100  805.014 ± 4.501  ns/op

Benchmark result is saved to split_precompiled_regex_245_32_NonMatch.csv
