# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   
  		

	 	
	 


	,	  	 			
 
		 


 
	
				

	 	 
 	 		 	
 		

	
	
 

 

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1227.357 ns/op
# Warmup Iteration   2: 885.248 ns/op
# Warmup Iteration   3: 760.811 ns/op
# Warmup Iteration   4: 763.061 ns/op
# Warmup Iteration   5: 782.626 ns/op
Iteration   1: 774.415 ns/op
Iteration   2: 757.389 ns/op
Iteration   3: 756.865 ns/op
Iteration   4: 756.756 ns/op
Iteration   5: 755.736 ns/op
Iteration   6: 756.479 ns/op
Iteration   7: 756.165 ns/op
Iteration   8: 757.113 ns/op
Iteration   9: 756.267 ns/op
Iteration  10: 756.556 ns/op
Iteration  11: 753.219 ns/op
Iteration  12: 752.729 ns/op
Iteration  13: 752.897 ns/op
Iteration  14: 753.117 ns/op
Iteration  15: 753.465 ns/op
Iteration  16: 753.780 ns/op
Iteration  17: 754.055 ns/op
Iteration  18: 753.920 ns/op
Iteration  19: 753.779 ns/op
Iteration  20: 754.852 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1192.752 ns/op
# Warmup Iteration   2: 845.306 ns/op
# Warmup Iteration   3: 731.321 ns/op
# Warmup Iteration   4: 746.284 ns/op
# Warmup Iteration   5: 740.540 ns/op
Iteration   1: 744.702 ns/op
Iteration   2: 728.114 ns/op
Iteration   3: 728.293 ns/op
Iteration   4: 727.773 ns/op
Iteration   5: 728.349 ns/op
Iteration   6: 727.843 ns/op
Iteration   7: 727.736 ns/op
Iteration   8: 727.658 ns/op
Iteration   9: 727.453 ns/op
Iteration  10: 727.480 ns/op
Iteration  11: 725.354 ns/op
Iteration  12: 725.019 ns/op
Iteration  13: 725.208 ns/op
Iteration  14: 731.556 ns/op
Iteration  15: 728.397 ns/op
Iteration  16: 726.291 ns/op
Iteration  17: 726.336 ns/op
Iteration  18: 733.143 ns/op
Iteration  19: 727.618 ns/op
Iteration  20: 725.864 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1137.749 ns/op
# Warmup Iteration   2: 821.284 ns/op
# Warmup Iteration   3: 728.068 ns/op
# Warmup Iteration   4: 723.308 ns/op
# Warmup Iteration   5: 727.574 ns/op
Iteration   1: 731.210 ns/op
Iteration   2: 716.115 ns/op
Iteration   3: 714.233 ns/op
Iteration   4: 713.725 ns/op
Iteration   5: 714.326 ns/op
Iteration   6: 713.882 ns/op
Iteration   7: 714.710 ns/op
Iteration   8: 714.820 ns/op
Iteration   9: 718.938 ns/op
Iteration  10: 712.785 ns/op
Iteration  11: 712.430 ns/op
Iteration  12: 713.628 ns/op
Iteration  13: 713.206 ns/op
Iteration  14: 712.830 ns/op
Iteration  15: 713.485 ns/op
Iteration  16: 712.998 ns/op
Iteration  17: 713.328 ns/op
Iteration  18: 713.669 ns/op
Iteration  19: 713.677 ns/op
Iteration  20: 713.640 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1141.454 ns/op
# Warmup Iteration   2: 826.156 ns/op
# Warmup Iteration   3: 720.181 ns/op
# Warmup Iteration   4: 732.118 ns/op
# Warmup Iteration   5: 727.291 ns/op
Iteration   1: 731.618 ns/op
Iteration   2: 714.836 ns/op
Iteration   3: 715.626 ns/op
Iteration   4: 714.556 ns/op
Iteration   5: 715.144 ns/op
Iteration   6: 714.915 ns/op
Iteration   7: 715.746 ns/op
Iteration   8: 714.369 ns/op
Iteration   9: 714.571 ns/op
Iteration  10: 716.979 ns/op
Iteration  11: 712.608 ns/op
Iteration  12: 712.403 ns/op
Iteration  13: 712.912 ns/op
Iteration  14: 713.050 ns/op
Iteration  15: 712.562 ns/op
Iteration  16: 714.269 ns/op
Iteration  17: 713.162 ns/op
Iteration  18: 712.941 ns/op
Iteration  19: 713.585 ns/op
Iteration  20: 714.792 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1197.863 ns/op
# Warmup Iteration   2: 846.464 ns/op
# Warmup Iteration   3: 729.648 ns/op
# Warmup Iteration   4: 744.344 ns/op
# Warmup Iteration   5: 738.289 ns/op
Iteration   1: 742.408 ns/op
Iteration   2: 730.997 ns/op
Iteration   3: 726.733 ns/op
Iteration   4: 725.847 ns/op
Iteration   5: 725.848 ns/op
Iteration   6: 725.970 ns/op
Iteration   7: 725.472 ns/op
Iteration   8: 725.469 ns/op
Iteration   9: 732.176 ns/op
Iteration  10: 728.528 ns/op
Iteration  11: 725.826 ns/op
Iteration  12: 723.711 ns/op
Iteration  13: 723.981 ns/op
Iteration  14: 725.754 ns/op
Iteration  15: 723.815 ns/op
Iteration  16: 723.916 ns/op
Iteration  17: 724.184 ns/op
Iteration  18: 725.004 ns/op
Iteration  19: 724.134 ns/op
Iteration  20: 727.105 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  728.249 Â±(99.9%) 5.306 ns/op [Average]
  (min, avg, max) = (712.403, 728.249, 774.415), stdev = 15.645
  CI (99.9%): [722.943, 733.555] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   
  		

	 	
	 


	,	  	 			
 
		 


 
	
				

	 	 
 	 		 	
 		

	
	
 

 

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1305.052 ns/op
# Warmup Iteration   2: 999.868 ns/op
# Warmup Iteration   3: 834.436 ns/op
# Warmup Iteration   4: 837.844 ns/op
# Warmup Iteration   5: 839.849 ns/op
Iteration   1: 844.403 ns/op
Iteration   2: 848.783 ns/op
Iteration   3: 830.417 ns/op
Iteration   4: 830.091 ns/op
Iteration   5: 831.223 ns/op
Iteration   6: 831.066 ns/op
Iteration   7: 830.556 ns/op
Iteration   8: 829.481 ns/op
Iteration   9: 830.318 ns/op
Iteration  10: 830.994 ns/op
Iteration  11: 832.185 ns/op
Iteration  12: 828.273 ns/op
Iteration  13: 830.788 ns/op
Iteration  14: 826.664 ns/op
Iteration  15: 828.835 ns/op
Iteration  16: 830.524 ns/op
Iteration  17: 829.055 ns/op
Iteration  18: 829.967 ns/op
Iteration  19: 829.384 ns/op
Iteration  20: 830.111 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1214.893 ns/op
# Warmup Iteration   2: 864.337 ns/op
# Warmup Iteration   3: 741.172 ns/op
# Warmup Iteration   4: 761.383 ns/op
# Warmup Iteration   5: 749.954 ns/op
Iteration   1: 757.237 ns/op
Iteration   2: 737.800 ns/op
Iteration   3: 737.880 ns/op
Iteration   4: 737.085 ns/op
Iteration   5: 737.305 ns/op
Iteration   6: 739.282 ns/op
Iteration   7: 738.069 ns/op
Iteration   8: 737.674 ns/op
Iteration   9: 736.725 ns/op
Iteration  10: 737.729 ns/op
Iteration  11: 737.639 ns/op
Iteration  12: 740.893 ns/op
Iteration  13: 735.324 ns/op
Iteration  14: 735.220 ns/op
Iteration  15: 735.813 ns/op
Iteration  16: 735.093 ns/op
Iteration  17: 735.374 ns/op
Iteration  18: 738.813 ns/op
Iteration  19: 736.272 ns/op
Iteration  20: 737.670 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1226.840 ns/op
# Warmup Iteration   2: 912.734 ns/op
# Warmup Iteration   3: 783.448 ns/op
# Warmup Iteration   4: 785.964 ns/op
# Warmup Iteration   5: 792.317 ns/op
Iteration   1: 796.836 ns/op
Iteration   2: 792.495 ns/op
Iteration   3: 780.325 ns/op
Iteration   4: 780.226 ns/op
Iteration   5: 784.911 ns/op
Iteration   6: 780.528 ns/op
Iteration   7: 780.593 ns/op
Iteration   8: 780.887 ns/op
Iteration   9: 780.356 ns/op
Iteration  10: 787.663 ns/op
Iteration  11: 778.971 ns/op
Iteration  12: 778.782 ns/op
Iteration  13: 778.459 ns/op
Iteration  14: 778.313 ns/op
Iteration  15: 778.330 ns/op
Iteration  16: 778.109 ns/op
Iteration  17: 779.333 ns/op
Iteration  18: 779.099 ns/op
Iteration  19: 785.626 ns/op
Iteration  20: 779.003 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1197.260 ns/op
# Warmup Iteration   2: 867.086 ns/op
# Warmup Iteration   3: 751.997 ns/op
# Warmup Iteration   4: 767.548 ns/op
# Warmup Iteration   5: 761.009 ns/op
Iteration   1: 765.555 ns/op
Iteration   2: 749.060 ns/op
Iteration   3: 748.254 ns/op
Iteration   4: 747.875 ns/op
Iteration   5: 748.858 ns/op
Iteration   6: 747.768 ns/op
Iteration   7: 748.698 ns/op
Iteration   8: 748.044 ns/op
Iteration   9: 748.928 ns/op
Iteration  10: 748.170 ns/op
Iteration  11: 748.319 ns/op
Iteration  12: 746.090 ns/op
Iteration  13: 745.788 ns/op
Iteration  14: 745.581 ns/op
Iteration  15: 747.081 ns/op
Iteration  16: 748.439 ns/op
Iteration  17: 747.187 ns/op
Iteration  18: 747.637 ns/op
Iteration  19: 746.532 ns/op
Iteration  20: 746.665 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1216.260 ns/op
# Warmup Iteration   2: 863.798 ns/op
# Warmup Iteration   3: 744.095 ns/op
# Warmup Iteration   4: 758.659 ns/op
# Warmup Iteration   5: 752.313 ns/op
Iteration   1: 757.626 ns/op
Iteration   2: 741.435 ns/op
Iteration   3: 740.406 ns/op
Iteration   4: 740.740 ns/op
Iteration   5: 740.980 ns/op
Iteration   6: 740.359 ns/op
Iteration   7: 740.963 ns/op
Iteration   8: 740.052 ns/op
Iteration   9: 740.332 ns/op
Iteration  10: 740.875 ns/op
Iteration  11: 738.369 ns/op
Iteration  12: 738.063 ns/op
Iteration  13: 740.162 ns/op
Iteration  14: 738.572 ns/op
Iteration  15: 738.967 ns/op
Iteration  16: 738.648 ns/op
Iteration  17: 738.883 ns/op
Iteration  18: 744.479 ns/op
Iteration  19: 738.943 ns/op
Iteration  20: 739.127 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  768.254 Â±(99.9%) 12.148 ns/op [Average]
  (min, avg, max) = (735.093, 768.254, 848.783), stdev = 35.819
  CI (99.9%): [756.106, 780.402] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                   (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    
  		

	 	
	 


	,	  	 			
 
		 


 
	
				

	 	 
 	 		 	
 		

	
	
 

 

  avgt  100  728.249 Â±  5.306  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    
  		

	 	
	 


	,	  	 			
 
		 


 
	
				

	 	 
 	 		 	
 		

	
	
 

 

  avgt  100  768.254 Â± 12.148  ns/op

Benchmark result is saved to split_precompiled_regex_179_186_Match.csv
