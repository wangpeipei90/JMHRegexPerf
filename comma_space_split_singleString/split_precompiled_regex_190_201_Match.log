# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
			



 
 	 
 	
	 
 
 	 

	



		 
		 	
 
			  
 	
	
   
	
			     		
 			
 	 	 
		 	


  	
  	
	 	


	, 	 	
	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1255.894 ns/op
# Warmup Iteration   2: 935.600 ns/op
# Warmup Iteration   3: 787.586 ns/op
# Warmup Iteration   4: 788.616 ns/op
# Warmup Iteration   5: 792.199 ns/op
Iteration   1: 796.617 ns/op
Iteration   2: 799.917 ns/op
Iteration   3: 782.537 ns/op
Iteration   4: 782.090 ns/op
Iteration   5: 782.478 ns/op
Iteration   6: 783.427 ns/op
Iteration   7: 782.605 ns/op
Iteration   8: 782.510 ns/op
Iteration   9: 782.781 ns/op
Iteration  10: 783.110 ns/op
Iteration  11: 788.898 ns/op
Iteration  12: 781.023 ns/op
Iteration  13: 780.417 ns/op
Iteration  14: 781.336 ns/op
Iteration  15: 781.738 ns/op
Iteration  16: 783.079 ns/op
Iteration  17: 782.978 ns/op
Iteration  18: 782.504 ns/op
Iteration  19: 780.687 ns/op
Iteration  20: 780.713 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1223.049 ns/op
# Warmup Iteration   2: 873.727 ns/op
# Warmup Iteration   3: 748.005 ns/op
# Warmup Iteration   4: 751.240 ns/op
# Warmup Iteration   5: 768.541 ns/op
Iteration   1: 761.782 ns/op
Iteration   2: 744.110 ns/op
Iteration   3: 744.507 ns/op
Iteration   4: 744.564 ns/op
Iteration   5: 744.129 ns/op
Iteration   6: 744.252 ns/op
Iteration   7: 744.573 ns/op
Iteration   8: 743.887 ns/op
Iteration   9: 744.590 ns/op
Iteration  10: 744.403 ns/op
Iteration  11: 742.754 ns/op
Iteration  12: 742.964 ns/op
Iteration  13: 742.665 ns/op
Iteration  14: 742.628 ns/op
Iteration  15: 742.393 ns/op
Iteration  16: 742.805 ns/op
Iteration  17: 742.913 ns/op
Iteration  18: 744.338 ns/op
Iteration  19: 746.926 ns/op
Iteration  20: 744.245 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1277.951 ns/op
# Warmup Iteration   2: 965.935 ns/op
# Warmup Iteration   3: 816.438 ns/op
# Warmup Iteration   4: 818.675 ns/op
# Warmup Iteration   5: 822.231 ns/op
Iteration   1: 826.775 ns/op
Iteration   2: 831.955 ns/op
Iteration   3: 812.476 ns/op
Iteration   4: 812.135 ns/op
Iteration   5: 814.986 ns/op
Iteration   6: 812.328 ns/op
Iteration   7: 812.207 ns/op
Iteration   8: 811.899 ns/op
Iteration   9: 813.357 ns/op
Iteration  10: 813.789 ns/op
Iteration  11: 815.655 ns/op
Iteration  12: 829.981 ns/op
Iteration  13: 811.075 ns/op
Iteration  14: 808.989 ns/op
Iteration  15: 815.496 ns/op
Iteration  16: 812.660 ns/op
Iteration  17: 810.846 ns/op
Iteration  18: 811.451 ns/op
Iteration  19: 811.246 ns/op
Iteration  20: 811.989 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1208.902 ns/op
# Warmup Iteration   2: 925.316 ns/op
# Warmup Iteration   3: 788.493 ns/op
# Warmup Iteration   4: 790.738 ns/op
# Warmup Iteration   5: 794.234 ns/op
Iteration   1: 799.956 ns/op
Iteration   2: 803.603 ns/op
Iteration   3: 786.160 ns/op
Iteration   4: 785.409 ns/op
Iteration   5: 785.710 ns/op
Iteration   6: 785.390 ns/op
Iteration   7: 786.777 ns/op
Iteration   8: 785.248 ns/op
Iteration   9: 786.352 ns/op
Iteration  10: 785.821 ns/op
Iteration  11: 789.708 ns/op
Iteration  12: 783.080 ns/op
Iteration  13: 784.100 ns/op
Iteration  14: 783.430 ns/op
Iteration  15: 783.951 ns/op
Iteration  16: 783.270 ns/op
Iteration  17: 784.190 ns/op
Iteration  18: 782.746 ns/op
Iteration  19: 783.271 ns/op
Iteration  20: 784.412 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1250.610 ns/op
# Warmup Iteration   2: 932.402 ns/op
# Warmup Iteration   3: 793.808 ns/op
# Warmup Iteration   4: 796.448 ns/op
# Warmup Iteration   5: 799.182 ns/op
Iteration   1: 803.034 ns/op
Iteration   2: 808.739 ns/op
Iteration   3: 790.674 ns/op
Iteration   4: 789.473 ns/op
Iteration   5: 789.659 ns/op
Iteration   6: 789.182 ns/op
Iteration   7: 789.992 ns/op
Iteration   8: 794.682 ns/op
Iteration   9: 790.688 ns/op
Iteration  10: 795.381 ns/op
Iteration  11: 792.682 ns/op
Iteration  12: 789.545 ns/op
Iteration  13: 789.882 ns/op
Iteration  14: 789.850 ns/op
Iteration  15: 792.937 ns/op
Iteration  16: 788.900 ns/op
Iteration  17: 788.823 ns/op
Iteration  18: 789.264 ns/op
Iteration  19: 788.889 ns/op
Iteration  20: 788.554 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  784.516 Â±(99.9%) 7.936 ns/op [Average]
  (min, avg, max) = (742.393, 784.516, 831.955), stdev = 23.399
  CI (99.9%): [776.580, 792.452] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
			



 
 	 
 	
	 
 
 	 

	



		 
		 	
 
			  
 	
	
   
	
			     		
 			
 	 	 
		 	


  	
  	
	 	


	, 	 	
	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1282.489 ns/op
# Warmup Iteration   2: 954.205 ns/op
# Warmup Iteration   3: 805.161 ns/op
# Warmup Iteration   4: 807.186 ns/op
# Warmup Iteration   5: 810.025 ns/op
Iteration   1: 814.825 ns/op
Iteration   2: 818.272 ns/op
Iteration   3: 801.775 ns/op
Iteration   4: 800.689 ns/op
Iteration   5: 800.494 ns/op
Iteration   6: 801.512 ns/op
Iteration   7: 800.884 ns/op
Iteration   8: 801.010 ns/op
Iteration   9: 801.852 ns/op
Iteration  10: 802.668 ns/op
Iteration  11: 802.640 ns/op
Iteration  12: 799.938 ns/op
Iteration  13: 799.174 ns/op
Iteration  14: 798.831 ns/op
Iteration  15: 800.116 ns/op
Iteration  16: 801.118 ns/op
Iteration  17: 801.743 ns/op
Iteration  18: 800.219 ns/op
Iteration  19: 801.318 ns/op
Iteration  20: 801.470 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1287.452 ns/op
# Warmup Iteration   2: 1001.757 ns/op
# Warmup Iteration   3: 844.016 ns/op
# Warmup Iteration   4: 846.930 ns/op
# Warmup Iteration   5: 849.895 ns/op
Iteration   1: 853.694 ns/op
Iteration   2: 859.782 ns/op
Iteration   3: 839.632 ns/op
Iteration   4: 845.325 ns/op
Iteration   5: 840.534 ns/op
Iteration   6: 840.065 ns/op
Iteration   7: 840.375 ns/op
Iteration   8: 840.788 ns/op
Iteration   9: 843.024 ns/op
Iteration  10: 844.039 ns/op
Iteration  11: 835.831 ns/op
Iteration  12: 840.960 ns/op
Iteration  13: 847.445 ns/op
Iteration  14: 839.322 ns/op
Iteration  15: 837.694 ns/op
Iteration  16: 837.384 ns/op
Iteration  17: 837.714 ns/op
Iteration  18: 838.959 ns/op
Iteration  19: 839.097 ns/op
Iteration  20: 846.761 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1223.332 ns/op
# Warmup Iteration   2: 900.777 ns/op
# Warmup Iteration   3: 774.560 ns/op
# Warmup Iteration   4: 783.359 ns/op
# Warmup Iteration   5: 787.638 ns/op
Iteration   1: 789.057 ns/op
Iteration   2: 776.745 ns/op
Iteration   3: 769.451 ns/op
Iteration   4: 770.195 ns/op
Iteration   5: 769.719 ns/op
Iteration   6: 770.529 ns/op
Iteration   7: 769.893 ns/op
Iteration   8: 770.300 ns/op
Iteration   9: 769.114 ns/op
Iteration  10: 769.506 ns/op
Iteration  11: 768.098 ns/op
Iteration  12: 767.811 ns/op
Iteration  13: 767.535 ns/op
Iteration  14: 768.217 ns/op
Iteration  15: 767.155 ns/op
Iteration  16: 767.884 ns/op
Iteration  17: 767.577 ns/op
Iteration  18: 767.895 ns/op
Iteration  19: 767.034 ns/op
Iteration  20: 767.568 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1230.401 ns/op
# Warmup Iteration   2: 907.227 ns/op
# Warmup Iteration   3: 775.487 ns/op
# Warmup Iteration   4: 777.674 ns/op
# Warmup Iteration   5: 787.522 ns/op
Iteration   1: 792.528 ns/op
Iteration   2: 779.756 ns/op
Iteration   3: 779.324 ns/op
Iteration   4: 774.227 ns/op
Iteration   5: 773.484 ns/op
Iteration   6: 772.863 ns/op
Iteration   7: 771.603 ns/op
Iteration   8: 771.623 ns/op
Iteration   9: 772.514 ns/op
Iteration  10: 776.647 ns/op
Iteration  11: 781.634 ns/op
Iteration  12: 770.040 ns/op
Iteration  13: 769.661 ns/op
Iteration  14: 770.035 ns/op
Iteration  15: 771.001 ns/op
Iteration  16: 770.124 ns/op
Iteration  17: 770.714 ns/op
Iteration  18: 770.589 ns/op
Iteration  19: 770.502 ns/op
Iteration  20: 770.457 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1278.808 ns/op
# Warmup Iteration   2: 948.623 ns/op
# Warmup Iteration   3: 802.515 ns/op
# Warmup Iteration   4: 806.141 ns/op
# Warmup Iteration   5: 808.238 ns/op
Iteration   1: 814.282 ns/op
Iteration   2: 818.442 ns/op
Iteration   3: 799.763 ns/op
Iteration   4: 799.500 ns/op
Iteration   5: 799.775 ns/op
Iteration   6: 799.686 ns/op
Iteration   7: 799.789 ns/op
Iteration   8: 806.496 ns/op
Iteration   9: 800.401 ns/op
Iteration  10: 800.346 ns/op
Iteration  11: 801.021 ns/op
Iteration  12: 798.517 ns/op
Iteration  13: 800.023 ns/op
Iteration  14: 800.150 ns/op
Iteration  15: 799.814 ns/op
Iteration  16: 798.245 ns/op
Iteration  17: 799.213 ns/op
Iteration  18: 798.602 ns/op
Iteration  19: 798.728 ns/op
Iteration  20: 800.077 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  798.125 Â±(99.9%) 9.020 ns/op [Average]
  (min, avg, max) = (767.034, 798.125, 859.782), stdev = 26.597
  CI (99.9%): [789.104, 807.145] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                  (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
			



 
 	 
 	
	 
 
 	 

	



		 
		 	
 
			  
 	
	
   
	
			     		
 			
 	 	 
		 	


  	
  	
	 	


	, 	 	
	  avgt  100  784.516 Â± 7.936  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
			



 
 	 
 	
	 
 
 	 

	



		 
		 	
 
			  
 	
	
   
	
			     		
 			
 	 	 
		 	


  	
  	
	 	


	, 	 	
	  avgt  100  798.125 Â± 9.020  ns/op

Benchmark result is saved to split_precompiled_regex_190_201_Match.csv
