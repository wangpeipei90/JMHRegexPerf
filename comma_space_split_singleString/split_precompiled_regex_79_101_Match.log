# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	   
	 					
 	 	


  


	 		  	
		 
 
	 
 	    ,   )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 983.683 ns/op
# Warmup Iteration   2: 630.093 ns/op
# Warmup Iteration   3: 572.486 ns/op
# Warmup Iteration   4: 586.674 ns/op
# Warmup Iteration   5: 580.187 ns/op
Iteration   1: 567.351 ns/op
Iteration   2: 569.983 ns/op
Iteration   3: 567.259 ns/op
Iteration   4: 566.908 ns/op
Iteration   5: 570.266 ns/op
Iteration   6: 567.303 ns/op
Iteration   7: 567.755 ns/op
Iteration   8: 568.333 ns/op
Iteration   9: 565.844 ns/op
Iteration  10: 572.135 ns/op
Iteration  11: 566.388 ns/op
Iteration  12: 566.357 ns/op
Iteration  13: 567.996 ns/op
Iteration  14: 566.712 ns/op
Iteration  15: 567.342 ns/op
Iteration  16: 570.516 ns/op
Iteration  17: 566.996 ns/op
Iteration  18: 566.892 ns/op
Iteration  19: 576.118 ns/op
Iteration  20: 565.850 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 994.474 ns/op
# Warmup Iteration   2: 631.188 ns/op
# Warmup Iteration   3: 577.279 ns/op
# Warmup Iteration   4: 592.287 ns/op
# Warmup Iteration   5: 586.148 ns/op
Iteration   1: 572.779 ns/op
Iteration   2: 575.134 ns/op
Iteration   3: 571.106 ns/op
Iteration   4: 572.305 ns/op
Iteration   5: 574.800 ns/op
Iteration   6: 571.845 ns/op
Iteration   7: 572.228 ns/op
Iteration   8: 571.118 ns/op
Iteration   9: 570.202 ns/op
Iteration  10: 570.248 ns/op
Iteration  11: 576.729 ns/op
Iteration  12: 573.023 ns/op
Iteration  13: 571.178 ns/op
Iteration  14: 572.384 ns/op
Iteration  15: 574.118 ns/op
Iteration  16: 572.668 ns/op
Iteration  17: 571.440 ns/op
Iteration  18: 571.674 ns/op
Iteration  19: 573.752 ns/op
Iteration  20: 572.103 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1036.908 ns/op
# Warmup Iteration   2: 657.537 ns/op
# Warmup Iteration   3: 590.850 ns/op
# Warmup Iteration   4: 596.227 ns/op
# Warmup Iteration   5: 611.036 ns/op
Iteration   1: 586.285 ns/op
Iteration   2: 586.804 ns/op
Iteration   3: 589.186 ns/op
Iteration   4: 586.181 ns/op
Iteration   5: 586.440 ns/op
Iteration   6: 589.171 ns/op
Iteration   7: 586.462 ns/op
Iteration   8: 584.558 ns/op
Iteration   9: 585.475 ns/op
Iteration  10: 584.540 ns/op
Iteration  11: 584.412 ns/op
Iteration  12: 585.725 ns/op
Iteration  13: 587.432 ns/op
Iteration  14: 584.283 ns/op
Iteration  15: 586.449 ns/op
Iteration  16: 585.484 ns/op
Iteration  17: 585.070 ns/op
Iteration  18: 585.850 ns/op
Iteration  19: 586.396 ns/op
Iteration  20: 584.629 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 997.526 ns/op
# Warmup Iteration   2: 625.769 ns/op
# Warmup Iteration   3: 571.446 ns/op
# Warmup Iteration   4: 585.927 ns/op
# Warmup Iteration   5: 579.382 ns/op
Iteration   1: 566.338 ns/op
Iteration   2: 569.156 ns/op
Iteration   3: 566.659 ns/op
Iteration   4: 566.614 ns/op
Iteration   5: 569.493 ns/op
Iteration   6: 566.608 ns/op
Iteration   7: 567.207 ns/op
Iteration   8: 567.715 ns/op
Iteration   9: 565.646 ns/op
Iteration  10: 566.622 ns/op
Iteration  11: 565.217 ns/op
Iteration  12: 565.159 ns/op
Iteration  13: 567.504 ns/op
Iteration  14: 566.296 ns/op
Iteration  15: 566.140 ns/op
Iteration  16: 567.559 ns/op
Iteration  17: 566.244 ns/op
Iteration  18: 568.009 ns/op
Iteration  19: 565.256 ns/op
Iteration  20: 567.333 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 984.866 ns/op
# Warmup Iteration   2: 624.789 ns/op
# Warmup Iteration   3: 572.002 ns/op
# Warmup Iteration   4: 589.589 ns/op
# Warmup Iteration   5: 581.625 ns/op
Iteration   1: 567.345 ns/op
Iteration   2: 570.138 ns/op
Iteration   3: 566.752 ns/op
Iteration   4: 566.947 ns/op
Iteration   5: 569.499 ns/op
Iteration   6: 572.242 ns/op
Iteration   7: 566.982 ns/op
Iteration   8: 569.862 ns/op
Iteration   9: 564.490 ns/op
Iteration  10: 565.934 ns/op
Iteration  11: 564.806 ns/op
Iteration  12: 565.323 ns/op
Iteration  13: 566.835 ns/op
Iteration  14: 564.776 ns/op
Iteration  15: 565.940 ns/op
Iteration  16: 567.343 ns/op
Iteration  17: 569.587 ns/op
Iteration  18: 572.088 ns/op
Iteration  19: 566.355 ns/op
Iteration  20: 565.478 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  572.215 ±(99.9%) 2.533 ns/op [Average]
  (min, avg, max) = (564.490, 572.215, 589.186), stdev = 7.468
  CI (99.9%): [569.682, 574.747] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	   
	 					
 	 	


  


	 		  	
		 
 
	 
 	    ,   )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1030.535 ns/op
# Warmup Iteration   2: 646.890 ns/op
# Warmup Iteration   3: 589.530 ns/op
# Warmup Iteration   4: 604.805 ns/op
# Warmup Iteration   5: 598.071 ns/op
Iteration   1: 584.788 ns/op
Iteration   2: 587.441 ns/op
Iteration   3: 584.550 ns/op
Iteration   4: 584.606 ns/op
Iteration   5: 587.162 ns/op
Iteration   6: 584.809 ns/op
Iteration   7: 584.671 ns/op
Iteration   8: 583.871 ns/op
Iteration   9: 583.151 ns/op
Iteration  10: 582.870 ns/op
Iteration  11: 583.585 ns/op
Iteration  12: 582.821 ns/op
Iteration  13: 583.766 ns/op
Iteration  14: 587.294 ns/op
Iteration  15: 582.925 ns/op
Iteration  16: 585.245 ns/op
Iteration  17: 583.719 ns/op
Iteration  18: 584.298 ns/op
Iteration  19: 585.684 ns/op
Iteration  20: 584.173 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1017.697 ns/op
# Warmup Iteration   2: 654.134 ns/op
# Warmup Iteration   3: 594.709 ns/op
# Warmup Iteration   4: 609.319 ns/op
# Warmup Iteration   5: 603.395 ns/op
Iteration   1: 590.335 ns/op
Iteration   2: 591.722 ns/op
Iteration   3: 589.594 ns/op
Iteration   4: 589.999 ns/op
Iteration   5: 592.311 ns/op
Iteration   6: 589.736 ns/op
Iteration   7: 589.603 ns/op
Iteration   8: 589.346 ns/op
Iteration   9: 591.995 ns/op
Iteration  10: 588.081 ns/op
Iteration  11: 589.121 ns/op
Iteration  12: 588.387 ns/op
Iteration  13: 588.226 ns/op
Iteration  14: 589.880 ns/op
Iteration  15: 588.338 ns/op
Iteration  16: 588.703 ns/op
Iteration  17: 589.670 ns/op
Iteration  18: 588.432 ns/op
Iteration  19: 589.007 ns/op
Iteration  20: 591.013 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1008.499 ns/op
# Warmup Iteration   2: 645.425 ns/op
# Warmup Iteration   3: 593.440 ns/op
# Warmup Iteration   4: 608.440 ns/op
# Warmup Iteration   5: 602.318 ns/op
Iteration   1: 588.507 ns/op
Iteration   2: 590.765 ns/op
Iteration   3: 588.408 ns/op
Iteration   4: 588.438 ns/op
Iteration   5: 590.852 ns/op
Iteration   6: 588.197 ns/op
Iteration   7: 588.802 ns/op
Iteration   8: 591.446 ns/op
Iteration   9: 586.588 ns/op
Iteration  10: 586.800 ns/op
Iteration  11: 589.099 ns/op
Iteration  12: 587.423 ns/op
Iteration  13: 587.599 ns/op
Iteration  14: 598.055 ns/op
Iteration  15: 588.964 ns/op
Iteration  16: 588.127 ns/op
Iteration  17: 592.953 ns/op
Iteration  18: 587.747 ns/op
Iteration  19: 586.911 ns/op
Iteration  20: 589.013 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1032.971 ns/op
# Warmup Iteration   2: 657.150 ns/op
# Warmup Iteration   3: 592.329 ns/op
# Warmup Iteration   4: 610.733 ns/op
# Warmup Iteration   5: 601.775 ns/op
Iteration   1: 589.057 ns/op
Iteration   2: 594.064 ns/op
Iteration   3: 587.835 ns/op
Iteration   4: 587.830 ns/op
Iteration   5: 591.431 ns/op
Iteration   6: 588.343 ns/op
Iteration   7: 595.827 ns/op
Iteration   8: 588.779 ns/op
Iteration   9: 586.452 ns/op
Iteration  10: 586.951 ns/op
Iteration  11: 588.852 ns/op
Iteration  12: 586.097 ns/op
Iteration  13: 586.225 ns/op
Iteration  14: 587.714 ns/op
Iteration  15: 585.697 ns/op
Iteration  16: 586.663 ns/op
Iteration  17: 588.439 ns/op
Iteration  18: 591.031 ns/op
Iteration  19: 590.720 ns/op
Iteration  20: 587.153 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1004.987 ns/op
# Warmup Iteration   2: 633.884 ns/op
# Warmup Iteration   3: 584.214 ns/op
# Warmup Iteration   4: 598.756 ns/op
# Warmup Iteration   5: 592.083 ns/op
Iteration   1: 579.575 ns/op
Iteration   2: 581.781 ns/op
Iteration   3: 579.055 ns/op
Iteration   4: 579.370 ns/op
Iteration   5: 582.439 ns/op
Iteration   6: 579.505 ns/op
Iteration   7: 580.536 ns/op
Iteration   8: 579.053 ns/op
Iteration   9: 578.268 ns/op
Iteration  10: 579.470 ns/op
Iteration  11: 578.187 ns/op
Iteration  12: 577.789 ns/op
Iteration  13: 580.286 ns/op
Iteration  14: 578.083 ns/op
Iteration  15: 577.789 ns/op
Iteration  16: 579.529 ns/op
Iteration  17: 579.139 ns/op
Iteration  18: 579.964 ns/op
Iteration  19: 578.424 ns/op
Iteration  20: 578.330 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  586.314 ±(99.9%) 1.493 ns/op [Average]
  (min, avg, max) = (577.789, 586.314, 598.055), stdev = 4.402
  CI (99.9%): [584.820, 587.807] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 	   
	 					
 	 	


  


	 		  	
		 
 
	 
 	    ,     avgt  100  572.215 ± 2.533  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 	   
	 					
 	 	


  


	 		  	
		 
 
	 
 	    ,     avgt  100  586.314 ± 1.493  ns/op

Benchmark result is saved to split_precompiled_regex_79_101_Match.csv
