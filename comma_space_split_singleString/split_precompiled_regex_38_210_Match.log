# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
		
 	 

 
	  	 
 

	 	

  

				

	  
 
	 			
		 
 	
	
	
 

 

    
	 	 
	 
			 
   	,	
  	


 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1315.194 ns/op
# Warmup Iteration   2: 1019.193 ns/op
# Warmup Iteration   3: 853.308 ns/op
# Warmup Iteration   4: 855.918 ns/op
# Warmup Iteration   5: 859.018 ns/op
Iteration   1: 863.488 ns/op
Iteration   2: 869.496 ns/op
Iteration   3: 848.970 ns/op
Iteration   4: 848.803 ns/op
Iteration   5: 849.564 ns/op
Iteration   6: 844.138 ns/op
Iteration   7: 848.908 ns/op
Iteration   8: 850.152 ns/op
Iteration   9: 848.759 ns/op
Iteration  10: 848.960 ns/op
Iteration  11: 853.349 ns/op
Iteration  12: 855.934 ns/op
Iteration  13: 850.860 ns/op
Iteration  14: 846.159 ns/op
Iteration  15: 846.190 ns/op
Iteration  16: 846.721 ns/op
Iteration  17: 844.440 ns/op
Iteration  18: 845.906 ns/op
Iteration  19: 845.946 ns/op
Iteration  20: 846.507 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1246.956 ns/op
# Warmup Iteration   2: 918.197 ns/op
# Warmup Iteration   3: 780.619 ns/op
# Warmup Iteration   4: 783.269 ns/op
# Warmup Iteration   5: 785.564 ns/op
Iteration   1: 789.841 ns/op
Iteration   2: 795.177 ns/op
Iteration   3: 777.107 ns/op
Iteration   4: 777.585 ns/op
Iteration   5: 777.903 ns/op
Iteration   6: 777.864 ns/op
Iteration   7: 777.708 ns/op
Iteration   8: 777.672 ns/op
Iteration   9: 777.364 ns/op
Iteration  10: 782.837 ns/op
Iteration  11: 778.619 ns/op
Iteration  12: 780.903 ns/op
Iteration  13: 775.751 ns/op
Iteration  14: 775.255 ns/op
Iteration  15: 774.953 ns/op
Iteration  16: 775.632 ns/op
Iteration  17: 775.345 ns/op
Iteration  18: 775.291 ns/op
Iteration  19: 775.381 ns/op
Iteration  20: 791.250 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1242.123 ns/op
# Warmup Iteration   2: 919.203 ns/op
# Warmup Iteration   3: 779.438 ns/op
# Warmup Iteration   4: 781.348 ns/op
# Warmup Iteration   5: 784.500 ns/op
Iteration   1: 789.555 ns/op
Iteration   2: 794.546 ns/op
Iteration   3: 775.345 ns/op
Iteration   4: 775.847 ns/op
Iteration   5: 775.391 ns/op
Iteration   6: 775.789 ns/op
Iteration   7: 775.787 ns/op
Iteration   8: 775.900 ns/op
Iteration   9: 775.410 ns/op
Iteration  10: 777.330 ns/op
Iteration  11: 783.967 ns/op
Iteration  12: 773.582 ns/op
Iteration  13: 773.640 ns/op
Iteration  14: 773.714 ns/op
Iteration  15: 773.582 ns/op
Iteration  16: 774.156 ns/op
Iteration  17: 774.409 ns/op
Iteration  18: 774.613 ns/op
Iteration  19: 775.043 ns/op
Iteration  20: 775.975 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1311.469 ns/op
# Warmup Iteration   2: 1018.582 ns/op
# Warmup Iteration   3: 844.606 ns/op
# Warmup Iteration   4: 846.901 ns/op
# Warmup Iteration   5: 850.494 ns/op
Iteration   1: 854.715 ns/op
Iteration   2: 860.024 ns/op
Iteration   3: 840.197 ns/op
Iteration   4: 840.488 ns/op
Iteration   5: 839.921 ns/op
Iteration   6: 840.788 ns/op
Iteration   7: 836.509 ns/op
Iteration   8: 839.805 ns/op
Iteration   9: 839.901 ns/op
Iteration  10: 841.790 ns/op
Iteration  11: 841.242 ns/op
Iteration  12: 840.270 ns/op
Iteration  13: 838.124 ns/op
Iteration  14: 838.777 ns/op
Iteration  15: 838.104 ns/op
Iteration  16: 839.465 ns/op
Iteration  17: 838.641 ns/op
Iteration  18: 839.242 ns/op
Iteration  19: 836.567 ns/op
Iteration  20: 839.176 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1301.676 ns/op
# Warmup Iteration   2: 1001.577 ns/op
# Warmup Iteration   3: 836.733 ns/op
# Warmup Iteration   4: 839.859 ns/op
# Warmup Iteration   5: 843.533 ns/op
Iteration   1: 847.571 ns/op
Iteration   2: 852.786 ns/op
Iteration   3: 832.869 ns/op
Iteration   4: 833.144 ns/op
Iteration   5: 832.872 ns/op
Iteration   6: 833.110 ns/op
Iteration   7: 833.430 ns/op
Iteration   8: 829.118 ns/op
Iteration   9: 833.906 ns/op
Iteration  10: 833.417 ns/op
Iteration  11: 835.521 ns/op
Iteration  12: 834.578 ns/op
Iteration  13: 830.439 ns/op
Iteration  14: 838.613 ns/op
Iteration  15: 839.067 ns/op
Iteration  16: 831.085 ns/op
Iteration  17: 830.747 ns/op
Iteration  18: 831.872 ns/op
Iteration  19: 836.520 ns/op
Iteration  20: 833.229 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  816.639 Â±(99.9%) 10.964 ns/op [Average]
  (min, avg, max) = (773.582, 816.639, 869.496), stdev = 32.327
  CI (99.9%): [805.675, 827.603] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
		
 	 

 
	  	 
 

	 	

  

				

	  
 
	 			
		 
 	
	
	
 

 

    
	 	 
	 
			 
   	,	
  	


 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1243.052 ns/op
# Warmup Iteration   2: 928.390 ns/op
# Warmup Iteration   3: 793.301 ns/op
# Warmup Iteration   4: 796.376 ns/op
# Warmup Iteration   5: 799.392 ns/op
Iteration   1: 802.922 ns/op
Iteration   2: 806.655 ns/op
Iteration   3: 789.496 ns/op
Iteration   4: 789.927 ns/op
Iteration   5: 795.073 ns/op
Iteration   6: 790.712 ns/op
Iteration   7: 789.166 ns/op
Iteration   8: 789.636 ns/op
Iteration   9: 790.653 ns/op
Iteration  10: 789.276 ns/op
Iteration  11: 791.297 ns/op
Iteration  12: 792.577 ns/op
Iteration  13: 787.383 ns/op
Iteration  14: 788.829 ns/op
Iteration  15: 786.936 ns/op
Iteration  16: 787.459 ns/op
Iteration  17: 787.640 ns/op
Iteration  18: 787.432 ns/op
Iteration  19: 789.833 ns/op
Iteration  20: 788.609 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1279.855 ns/op
# Warmup Iteration   2: 1005.135 ns/op
# Warmup Iteration   3: 840.594 ns/op
# Warmup Iteration   4: 842.883 ns/op
# Warmup Iteration   5: 845.815 ns/op
Iteration   1: 850.803 ns/op
Iteration   2: 855.484 ns/op
Iteration   3: 837.699 ns/op
Iteration   4: 837.316 ns/op
Iteration   5: 835.074 ns/op
Iteration   6: 835.156 ns/op
Iteration   7: 836.171 ns/op
Iteration   8: 835.915 ns/op
Iteration   9: 836.654 ns/op
Iteration  10: 836.386 ns/op
Iteration  11: 836.887 ns/op
Iteration  12: 831.715 ns/op
Iteration  13: 833.677 ns/op
Iteration  14: 833.786 ns/op
Iteration  15: 833.152 ns/op
Iteration  16: 833.668 ns/op
Iteration  17: 834.132 ns/op
Iteration  18: 834.101 ns/op
Iteration  19: 833.725 ns/op
Iteration  20: 835.150 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1244.001 ns/op
# Warmup Iteration   2: 928.476 ns/op
# Warmup Iteration   3: 788.514 ns/op
# Warmup Iteration   4: 790.230 ns/op
# Warmup Iteration   5: 793.091 ns/op
Iteration   1: 796.699 ns/op
Iteration   2: 801.840 ns/op
Iteration   3: 783.221 ns/op
Iteration   4: 783.337 ns/op
Iteration   5: 783.282 ns/op
Iteration   6: 783.371 ns/op
Iteration   7: 783.379 ns/op
Iteration   8: 783.207 ns/op
Iteration   9: 781.731 ns/op
Iteration  10: 783.234 ns/op
Iteration  11: 790.806 ns/op
Iteration  12: 798.572 ns/op
Iteration  13: 785.741 ns/op
Iteration  14: 783.121 ns/op
Iteration  15: 780.869 ns/op
Iteration  16: 780.064 ns/op
Iteration  17: 780.673 ns/op
Iteration  18: 781.147 ns/op
Iteration  19: 780.690 ns/op
Iteration  20: 781.360 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1242.901 ns/op
# Warmup Iteration   2: 927.367 ns/op
# Warmup Iteration   3: 793.098 ns/op
# Warmup Iteration   4: 794.910 ns/op
# Warmup Iteration   5: 798.947 ns/op
Iteration   1: 802.805 ns/op
Iteration   2: 807.692 ns/op
Iteration   3: 790.027 ns/op
Iteration   4: 789.548 ns/op
Iteration   5: 789.330 ns/op
Iteration   6: 789.370 ns/op
Iteration   7: 788.244 ns/op
Iteration   8: 787.855 ns/op
Iteration   9: 796.282 ns/op
Iteration  10: 789.460 ns/op
Iteration  11: 790.345 ns/op
Iteration  12: 786.884 ns/op
Iteration  13: 788.057 ns/op
Iteration  14: 786.754 ns/op
Iteration  15: 787.139 ns/op
Iteration  16: 787.132 ns/op
Iteration  17: 788.653 ns/op
Iteration  18: 787.552 ns/op
Iteration  19: 788.308 ns/op
Iteration  20: 789.162 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1299.451 ns/op
# Warmup Iteration   2: 1030.730 ns/op
# Warmup Iteration   3: 867.062 ns/op
# Warmup Iteration   4: 869.218 ns/op
# Warmup Iteration   5: 873.058 ns/op
Iteration   1: 877.172 ns/op
Iteration   2: 881.526 ns/op
Iteration   3: 862.515 ns/op
Iteration   4: 862.962 ns/op
Iteration   5: 868.137 ns/op
Iteration   6: 863.174 ns/op
Iteration   7: 858.217 ns/op
Iteration   8: 863.795 ns/op
Iteration   9: 863.345 ns/op
Iteration  10: 863.306 ns/op
Iteration  11: 868.173 ns/op
Iteration  12: 864.331 ns/op
Iteration  13: 860.126 ns/op
Iteration  14: 860.193 ns/op
Iteration  15: 860.038 ns/op
Iteration  16: 862.256 ns/op
Iteration  17: 860.980 ns/op
Iteration  18: 860.381 ns/op
Iteration  19: 857.979 ns/op
Iteration  20: 861.633 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  813.553 Â±(99.9%) 10.863 ns/op [Average]
  (min, avg, max) = (780.064, 813.553, 881.526), stdev = 32.031
  CI (99.9%): [802.690, 824.417] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                           (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
		
 	 

 
	  	 
 

	 	

  

				

	  
 
	 			
		 
 	
	
	
 

 

    
	 	 
	 
			 
   	,	
  	


   avgt  100  816.639 Â± 10.964  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
		
 	 

 
	  	 
 

	 	

  

				

	  
 
	 			
		 
 	
	
	
 

 

    
	 	 
	 
			 
   	,	
  	


   avgt  100  813.553 Â± 10.863  ns/op

Benchmark result is saved to split_precompiled_regex_38_210_Match.csv
