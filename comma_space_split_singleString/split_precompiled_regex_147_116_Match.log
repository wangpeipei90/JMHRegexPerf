# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 		 ,		 	
  

 
 
 	
 	

 


	
	  


 	
	
	
 

  			

	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1032.841 ns/op
# Warmup Iteration   2: 683.402 ns/op
# Warmup Iteration   3: 609.429 ns/op
# Warmup Iteration   4: 612.594 ns/op
# Warmup Iteration   5: 634.088 ns/op
Iteration   1: 605.049 ns/op
Iteration   2: 604.908 ns/op
Iteration   3: 604.490 ns/op
Iteration   4: 606.916 ns/op
Iteration   5: 604.161 ns/op
Iteration   6: 604.784 ns/op
Iteration   7: 607.797 ns/op
Iteration   8: 604.942 ns/op
Iteration   9: 602.812 ns/op
Iteration  10: 602.880 ns/op
Iteration  11: 603.892 ns/op
Iteration  12: 602.936 ns/op
Iteration  13: 602.782 ns/op
Iteration  14: 602.998 ns/op
Iteration  15: 603.819 ns/op
Iteration  16: 602.676 ns/op
Iteration  17: 602.957 ns/op
Iteration  18: 604.333 ns/op
Iteration  19: 603.220 ns/op
Iteration  20: 603.236 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1035.214 ns/op
# Warmup Iteration   2: 691.232 ns/op
# Warmup Iteration   3: 619.655 ns/op
# Warmup Iteration   4: 621.633 ns/op
# Warmup Iteration   5: 642.725 ns/op
Iteration   1: 614.937 ns/op
Iteration   2: 614.669 ns/op
Iteration   3: 614.377 ns/op
Iteration   4: 616.892 ns/op
Iteration   5: 614.237 ns/op
Iteration   6: 614.714 ns/op
Iteration   7: 614.326 ns/op
Iteration   8: 615.414 ns/op
Iteration   9: 612.445 ns/op
Iteration  10: 612.374 ns/op
Iteration  11: 612.577 ns/op
Iteration  12: 613.629 ns/op
Iteration  13: 612.389 ns/op
Iteration  14: 612.831 ns/op
Iteration  15: 613.862 ns/op
Iteration  16: 614.726 ns/op
Iteration  17: 612.615 ns/op
Iteration  18: 612.614 ns/op
Iteration  19: 612.506 ns/op
Iteration  20: 613.738 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1030.832 ns/op
# Warmup Iteration   2: 686.197 ns/op
# Warmup Iteration   3: 618.892 ns/op
# Warmup Iteration   4: 620.935 ns/op
# Warmup Iteration   5: 641.937 ns/op
Iteration   1: 613.322 ns/op
Iteration   2: 613.498 ns/op
Iteration   3: 613.259 ns/op
Iteration   4: 615.404 ns/op
Iteration   5: 613.243 ns/op
Iteration   6: 613.120 ns/op
Iteration   7: 612.936 ns/op
Iteration   8: 614.109 ns/op
Iteration   9: 610.899 ns/op
Iteration  10: 610.921 ns/op
Iteration  11: 612.673 ns/op
Iteration  12: 612.356 ns/op
Iteration  13: 611.202 ns/op
Iteration  14: 611.264 ns/op
Iteration  15: 611.313 ns/op
Iteration  16: 612.616 ns/op
Iteration  17: 611.991 ns/op
Iteration  18: 612.835 ns/op
Iteration  19: 612.164 ns/op
Iteration  20: 614.114 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1033.131 ns/op
# Warmup Iteration   2: 685.905 ns/op
# Warmup Iteration   3: 619.995 ns/op
# Warmup Iteration   4: 621.384 ns/op
# Warmup Iteration   5: 642.548 ns/op
Iteration   1: 615.165 ns/op
Iteration   2: 614.275 ns/op
Iteration   3: 613.986 ns/op
Iteration   4: 615.868 ns/op
Iteration   5: 614.193 ns/op
Iteration   6: 619.491 ns/op
Iteration   7: 613.902 ns/op
Iteration   8: 615.624 ns/op
Iteration   9: 614.414 ns/op
Iteration  10: 614.216 ns/op
Iteration  11: 612.205 ns/op
Iteration  12: 613.631 ns/op
Iteration  13: 612.680 ns/op
Iteration  14: 612.751 ns/op
Iteration  15: 612.567 ns/op
Iteration  16: 614.132 ns/op
Iteration  17: 612.558 ns/op
Iteration  18: 612.811 ns/op
Iteration  19: 613.372 ns/op
Iteration  20: 615.331 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1028.144 ns/op
# Warmup Iteration   2: 681.925 ns/op
# Warmup Iteration   3: 616.276 ns/op
# Warmup Iteration   4: 618.837 ns/op
# Warmup Iteration   5: 639.792 ns/op
Iteration   1: 612.258 ns/op
Iteration   2: 611.942 ns/op
Iteration   3: 611.213 ns/op
Iteration   4: 613.183 ns/op
Iteration   5: 610.651 ns/op
Iteration   6: 611.220 ns/op
Iteration   7: 613.015 ns/op
Iteration   8: 620.985 ns/op
Iteration   9: 609.386 ns/op
Iteration  10: 610.000 ns/op
Iteration  11: 609.749 ns/op
Iteration  12: 610.661 ns/op
Iteration  13: 615.414 ns/op
Iteration  14: 609.791 ns/op
Iteration  15: 610.087 ns/op
Iteration  16: 611.568 ns/op
Iteration  17: 609.234 ns/op
Iteration  18: 609.773 ns/op
Iteration  19: 611.285 ns/op
Iteration  20: 610.513 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  611.258 ±(99.9%) 1.385 ns/op [Average]
  (min, avg, max) = (602.676, 611.258, 620.985), stdev = 4.083
  CI (99.9%): [609.873, 612.643] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 		 ,		 	
  

 
 
 	
 	

 


	
	  


 	
	
	
 

  			

	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1053.356 ns/op
# Warmup Iteration   2: 705.556 ns/op
# Warmup Iteration   3: 638.160 ns/op
# Warmup Iteration   4: 640.562 ns/op
# Warmup Iteration   5: 655.531 ns/op
Iteration   1: 638.653 ns/op
Iteration   2: 634.274 ns/op
Iteration   3: 633.679 ns/op
Iteration   4: 633.255 ns/op
Iteration   5: 636.504 ns/op
Iteration   6: 633.575 ns/op
Iteration   7: 632.939 ns/op
Iteration   8: 632.936 ns/op
Iteration   9: 635.814 ns/op
Iteration  10: 630.944 ns/op
Iteration  11: 631.557 ns/op
Iteration  12: 631.361 ns/op
Iteration  13: 633.444 ns/op
Iteration  14: 633.281 ns/op
Iteration  15: 640.462 ns/op
Iteration  16: 634.065 ns/op
Iteration  17: 636.627 ns/op
Iteration  18: 633.163 ns/op
Iteration  19: 633.462 ns/op
Iteration  20: 633.249 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1124.216 ns/op
# Warmup Iteration   2: 744.205 ns/op
# Warmup Iteration   3: 670.544 ns/op
# Warmup Iteration   4: 666.590 ns/op
# Warmup Iteration   5: 670.220 ns/op
Iteration   1: 673.969 ns/op
Iteration   2: 661.549 ns/op
Iteration   3: 658.565 ns/op
Iteration   4: 658.186 ns/op
Iteration   5: 658.237 ns/op
Iteration   6: 657.643 ns/op
Iteration   7: 661.056 ns/op
Iteration   8: 659.436 ns/op
Iteration   9: 656.080 ns/op
Iteration  10: 656.423 ns/op
Iteration  11: 656.169 ns/op
Iteration  12: 657.236 ns/op
Iteration  13: 656.006 ns/op
Iteration  14: 656.406 ns/op
Iteration  15: 657.201 ns/op
Iteration  16: 658.365 ns/op
Iteration  17: 659.105 ns/op
Iteration  18: 657.140 ns/op
Iteration  19: 657.216 ns/op
Iteration  20: 657.497 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1033.222 ns/op
# Warmup Iteration   2: 674.063 ns/op
# Warmup Iteration   3: 615.364 ns/op
# Warmup Iteration   4: 617.374 ns/op
# Warmup Iteration   5: 639.072 ns/op
Iteration   1: 611.021 ns/op
Iteration   2: 610.865 ns/op
Iteration   3: 613.368 ns/op
Iteration   4: 610.368 ns/op
Iteration   5: 610.453 ns/op
Iteration   6: 610.525 ns/op
Iteration   7: 614.316 ns/op
Iteration   8: 608.695 ns/op
Iteration   9: 609.259 ns/op
Iteration  10: 610.143 ns/op
Iteration  11: 608.761 ns/op
Iteration  12: 608.881 ns/op
Iteration  13: 610.549 ns/op
Iteration  14: 608.891 ns/op
Iteration  15: 612.982 ns/op
Iteration  16: 608.576 ns/op
Iteration  17: 612.340 ns/op
Iteration  18: 610.071 ns/op
Iteration  19: 609.639 ns/op
Iteration  20: 613.238 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1078.938 ns/op
# Warmup Iteration   2: 714.521 ns/op
# Warmup Iteration   3: 636.440 ns/op
# Warmup Iteration   4: 643.046 ns/op
# Warmup Iteration   5: 651.222 ns/op
Iteration   1: 641.326 ns/op
Iteration   2: 631.780 ns/op
Iteration   3: 631.124 ns/op
Iteration   4: 631.032 ns/op
Iteration   5: 634.102 ns/op
Iteration   6: 630.834 ns/op
Iteration   7: 631.132 ns/op
Iteration   8: 630.684 ns/op
Iteration   9: 629.685 ns/op
Iteration  10: 628.608 ns/op
Iteration  11: 628.783 ns/op
Iteration  12: 629.998 ns/op
Iteration  13: 629.142 ns/op
Iteration  14: 629.900 ns/op
Iteration  15: 629.843 ns/op
Iteration  16: 631.159 ns/op
Iteration  17: 629.564 ns/op
Iteration  18: 630.060 ns/op
Iteration  19: 630.472 ns/op
Iteration  20: 632.548 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1091.308 ns/op
# Warmup Iteration   2: 706.924 ns/op
# Warmup Iteration   3: 630.570 ns/op
# Warmup Iteration   4: 632.425 ns/op
# Warmup Iteration   5: 649.962 ns/op
Iteration   1: 628.083 ns/op
Iteration   2: 624.861 ns/op
Iteration   3: 625.311 ns/op
Iteration   4: 628.540 ns/op
Iteration   5: 624.761 ns/op
Iteration   6: 625.071 ns/op
Iteration   7: 625.199 ns/op
Iteration   8: 626.827 ns/op
Iteration   9: 623.313 ns/op
Iteration  10: 623.852 ns/op
Iteration  11: 623.131 ns/op
Iteration  12: 624.721 ns/op
Iteration  13: 623.401 ns/op
Iteration  14: 623.930 ns/op
Iteration  15: 623.331 ns/op
Iteration  16: 624.554 ns/op
Iteration  17: 624.019 ns/op
Iteration  18: 624.043 ns/op
Iteration  19: 625.016 ns/op
Iteration  20: 624.389 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  631.878 ±(99.9%) 5.403 ns/op [Average]
  (min, avg, max) = (608.576, 631.878, 673.969), stdev = 15.932
  CI (99.9%): [626.475, 637.281] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

 		 ,		 	
  

 
 
 	
 	

 


	
	  


 	
	
	
 

  			

	  avgt  100  611.258 ± 1.385  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

 		 ,		 	
  

 
 
 	
 	

 


	
	  


 	
	
	
 

  			

	  avgt  100  631.878 ± 5.403  ns/op

Benchmark result is saved to split_precompiled_regex_147_116_Match.csv
