# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 9d.}0/K9e$+8B6J*/5v*4c3s@E/nHcK.;>q)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 888.492 ns/op
# Warmup Iteration   2: 617.827 ns/op
# Warmup Iteration   3: 552.223 ns/op
# Warmup Iteration   4: 554.172 ns/op
# Warmup Iteration   5: 555.352 ns/op
Iteration   1: 564.376 ns/op
Iteration   2: 546.922 ns/op
Iteration   3: 546.741 ns/op
Iteration   4: 547.005 ns/op
Iteration   5: 546.887 ns/op
Iteration   6: 548.972 ns/op
Iteration   7: 546.813 ns/op
Iteration   8: 546.582 ns/op
Iteration   9: 549.662 ns/op
Iteration  10: 546.354 ns/op
Iteration  11: 545.344 ns/op
Iteration  12: 545.499 ns/op
Iteration  13: 545.472 ns/op
Iteration  14: 545.911 ns/op
Iteration  15: 547.605 ns/op
Iteration  16: 545.883 ns/op
Iteration  17: 546.010 ns/op
Iteration  18: 546.401 ns/op
Iteration  19: 549.640 ns/op
Iteration  20: 547.236 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 889.616 ns/op
# Warmup Iteration   2: 610.335 ns/op
# Warmup Iteration   3: 549.700 ns/op
# Warmup Iteration   4: 551.553 ns/op
# Warmup Iteration   5: 554.693 ns/op
Iteration   1: 561.737 ns/op
Iteration   2: 545.040 ns/op
Iteration   3: 545.035 ns/op
Iteration   4: 545.115 ns/op
Iteration   5: 547.645 ns/op
Iteration   6: 545.239 ns/op
Iteration   7: 545.261 ns/op
Iteration   8: 545.304 ns/op
Iteration   9: 543.684 ns/op
Iteration  10: 544.560 ns/op
Iteration  11: 543.798 ns/op
Iteration  12: 543.773 ns/op
Iteration  13: 543.823 ns/op
Iteration  14: 545.046 ns/op
Iteration  15: 544.221 ns/op
Iteration  16: 549.084 ns/op
Iteration  17: 544.535 ns/op
Iteration  18: 544.578 ns/op
Iteration  19: 545.566 ns/op
Iteration  20: 545.180 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 893.691 ns/op
# Warmup Iteration   2: 616.393 ns/op
# Warmup Iteration   3: 554.525 ns/op
# Warmup Iteration   4: 556.334 ns/op
# Warmup Iteration   5: 558.513 ns/op
Iteration   1: 565.126 ns/op
Iteration   2: 548.967 ns/op
Iteration   3: 548.970 ns/op
Iteration   4: 549.043 ns/op
Iteration   5: 548.578 ns/op
Iteration   6: 551.278 ns/op
Iteration   7: 550.108 ns/op
Iteration   8: 551.455 ns/op
Iteration   9: 547.751 ns/op
Iteration  10: 547.758 ns/op
Iteration  11: 548.406 ns/op
Iteration  12: 547.516 ns/op
Iteration  13: 547.491 ns/op
Iteration  14: 547.539 ns/op
Iteration  15: 548.265 ns/op
Iteration  16: 547.439 ns/op
Iteration  17: 548.145 ns/op
Iteration  18: 547.906 ns/op
Iteration  19: 548.426 ns/op
Iteration  20: 551.069 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 889.399 ns/op
# Warmup Iteration   2: 620.835 ns/op
# Warmup Iteration   3: 548.846 ns/op
# Warmup Iteration   4: 550.858 ns/op
# Warmup Iteration   5: 553.541 ns/op
Iteration   1: 561.369 ns/op
Iteration   2: 543.964 ns/op
Iteration   3: 544.049 ns/op
Iteration   4: 544.141 ns/op
Iteration   5: 546.778 ns/op
Iteration   6: 544.169 ns/op
Iteration   7: 543.933 ns/op
Iteration   8: 544.069 ns/op
Iteration   9: 542.401 ns/op
Iteration  10: 546.977 ns/op
Iteration  11: 542.293 ns/op
Iteration  12: 542.266 ns/op
Iteration  13: 542.438 ns/op
Iteration  14: 545.502 ns/op
Iteration  15: 542.785 ns/op
Iteration  16: 542.793 ns/op
Iteration  17: 543.229 ns/op
Iteration  18: 544.093 ns/op
Iteration  19: 546.654 ns/op
Iteration  20: 543.779 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 890.315 ns/op
# Warmup Iteration   2: 616.943 ns/op
# Warmup Iteration   3: 552.396 ns/op
# Warmup Iteration   4: 554.825 ns/op
# Warmup Iteration   5: 556.843 ns/op
Iteration   1: 564.939 ns/op
Iteration   2: 548.001 ns/op
Iteration   3: 547.649 ns/op
Iteration   4: 547.723 ns/op
Iteration   5: 549.053 ns/op
Iteration   6: 550.797 ns/op
Iteration   7: 548.142 ns/op
Iteration   8: 548.754 ns/op
Iteration   9: 549.530 ns/op
Iteration  10: 547.925 ns/op
Iteration  11: 547.072 ns/op
Iteration  12: 546.876 ns/op
Iteration  13: 547.194 ns/op
Iteration  14: 546.927 ns/op
Iteration  15: 548.735 ns/op
Iteration  16: 547.280 ns/op
Iteration  17: 549.029 ns/op
Iteration  18: 547.560 ns/op
Iteration  19: 547.723 ns/op
Iteration  20: 549.739 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  547.431 ±(99.9%) 1.460 ns/op [Average]
  (min, avg, max) = (542.266, 547.431, 565.126), stdev = 4.305
  CI (99.9%): [545.971, 548.891] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 9d.}0/K9e$+8B6J*/5v*4c3s@E/nHcK.;>q)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 894.356 ns/op
# Warmup Iteration   2: 615.844 ns/op
# Warmup Iteration   3: 554.917 ns/op
# Warmup Iteration   4: 556.950 ns/op
# Warmup Iteration   5: 559.729 ns/op
Iteration   1: 568.419 ns/op
Iteration   2: 550.796 ns/op
Iteration   3: 550.502 ns/op
Iteration   4: 550.548 ns/op
Iteration   5: 550.174 ns/op
Iteration   6: 553.660 ns/op
Iteration   7: 550.482 ns/op
Iteration   8: 550.662 ns/op
Iteration   9: 549.033 ns/op
Iteration  10: 548.854 ns/op
Iteration  11: 549.983 ns/op
Iteration  12: 549.007 ns/op
Iteration  13: 551.292 ns/op
Iteration  14: 549.065 ns/op
Iteration  15: 549.562 ns/op
Iteration  16: 548.803 ns/op
Iteration  17: 549.073 ns/op
Iteration  18: 549.181 ns/op
Iteration  19: 549.152 ns/op
Iteration  20: 550.676 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 887.023 ns/op
# Warmup Iteration   2: 607.624 ns/op
# Warmup Iteration   3: 549.358 ns/op
# Warmup Iteration   4: 551.184 ns/op
# Warmup Iteration   5: 553.532 ns/op
Iteration   1: 562.121 ns/op
Iteration   2: 544.744 ns/op
Iteration   3: 544.194 ns/op
Iteration   4: 543.745 ns/op
Iteration   5: 546.079 ns/op
Iteration   6: 544.455 ns/op
Iteration   7: 544.507 ns/op
Iteration   8: 544.043 ns/op
Iteration   9: 542.116 ns/op
Iteration  10: 543.126 ns/op
Iteration  11: 546.608 ns/op
Iteration  12: 542.859 ns/op
Iteration  13: 542.717 ns/op
Iteration  14: 543.625 ns/op
Iteration  15: 543.065 ns/op
Iteration  16: 542.686 ns/op
Iteration  17: 543.324 ns/op
Iteration  18: 543.197 ns/op
Iteration  19: 546.982 ns/op
Iteration  20: 544.449 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 892.598 ns/op
# Warmup Iteration   2: 617.129 ns/op
# Warmup Iteration   3: 556.213 ns/op
# Warmup Iteration   4: 558.536 ns/op
# Warmup Iteration   5: 561.341 ns/op
Iteration   1: 573.521 ns/op
Iteration   2: 552.446 ns/op
Iteration   3: 551.781 ns/op
Iteration   4: 551.408 ns/op
Iteration   5: 551.744 ns/op
Iteration   6: 554.523 ns/op
Iteration   7: 551.796 ns/op
Iteration   8: 551.604 ns/op
Iteration   9: 549.573 ns/op
Iteration  10: 549.587 ns/op
Iteration  11: 551.949 ns/op
Iteration  12: 549.608 ns/op
Iteration  13: 550.414 ns/op
Iteration  14: 550.286 ns/op
Iteration  15: 550.097 ns/op
Iteration  16: 551.709 ns/op
Iteration  17: 550.210 ns/op
Iteration  18: 553.664 ns/op
Iteration  19: 550.150 ns/op
Iteration  20: 561.979 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 895.298 ns/op
# Warmup Iteration   2: 609.806 ns/op
# Warmup Iteration   3: 549.117 ns/op
# Warmup Iteration   4: 550.936 ns/op
# Warmup Iteration   5: 557.551 ns/op
Iteration   1: 559.370 ns/op
Iteration   2: 544.793 ns/op
Iteration   3: 544.710 ns/op
Iteration   4: 544.663 ns/op
Iteration   5: 547.228 ns/op
Iteration   6: 544.762 ns/op
Iteration   7: 544.926 ns/op
Iteration   8: 545.248 ns/op
Iteration   9: 543.642 ns/op
Iteration  10: 548.930 ns/op
Iteration  11: 543.671 ns/op
Iteration  12: 543.930 ns/op
Iteration  13: 544.126 ns/op
Iteration  14: 545.613 ns/op
Iteration  15: 543.794 ns/op
Iteration  16: 543.980 ns/op
Iteration  17: 544.319 ns/op
Iteration  18: 544.031 ns/op
Iteration  19: 545.800 ns/op
Iteration  20: 544.551 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 893.120 ns/op
# Warmup Iteration   2: 616.048 ns/op
# Warmup Iteration   3: 552.571 ns/op
# Warmup Iteration   4: 554.966 ns/op
# Warmup Iteration   5: 557.201 ns/op
Iteration   1: 565.424 ns/op
Iteration   2: 548.001 ns/op
Iteration   3: 547.894 ns/op
Iteration   4: 548.309 ns/op
Iteration   5: 547.950 ns/op
Iteration   6: 551.021 ns/op
Iteration   7: 548.052 ns/op
Iteration   8: 548.019 ns/op
Iteration   9: 546.325 ns/op
Iteration  10: 549.700 ns/op
Iteration  11: 548.144 ns/op
Iteration  12: 546.783 ns/op
Iteration  13: 546.397 ns/op
Iteration  14: 546.986 ns/op
Iteration  15: 548.544 ns/op
Iteration  16: 547.393 ns/op
Iteration  17: 548.135 ns/op
Iteration  18: 548.301 ns/op
Iteration  19: 548.502 ns/op
Iteration  20: 548.877 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  548.665 ±(99.9%) 1.787 ns/op [Average]
  (min, avg, max) = (542.116, 548.665, 573.521), stdev = 5.270
  CI (99.9%): [546.877, 550.452] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  9d.}0/K9e$+8B6J*/5v*4c3s@E/nHcK.;>q  avgt  100  547.431 ± 1.460  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  9d.}0/K9e$+8B6J*/5v*4c3s@E/nHcK.;>q  avgt  100  548.665 ± 1.787  ns/op

Benchmark result is saved to split_precompiled_regex_211_36_NonMatch.csv
