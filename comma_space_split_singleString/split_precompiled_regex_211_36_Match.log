# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =    	 
						 


 ,


)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 919.664 ns/op
# Warmup Iteration   2: 496.029 ns/op
# Warmup Iteration   3: 476.517 ns/op
# Warmup Iteration   4: 485.196 ns/op
# Warmup Iteration   5: 464.606 ns/op
Iteration   1: 467.072 ns/op
Iteration   2: 468.586 ns/op
Iteration   3: 464.531 ns/op
Iteration   4: 468.159 ns/op
Iteration   5: 465.956 ns/op
Iteration   6: 464.131 ns/op
Iteration   7: 466.302 ns/op
Iteration   8: 463.391 ns/op
Iteration   9: 463.336 ns/op
Iteration  10: 463.512 ns/op
Iteration  11: 462.318 ns/op
Iteration  12: 463.598 ns/op
Iteration  13: 463.502 ns/op
Iteration  14: 462.440 ns/op
Iteration  15: 465.266 ns/op
Iteration  16: 464.856 ns/op
Iteration  17: 461.953 ns/op
Iteration  18: 463.310 ns/op
Iteration  19: 463.187 ns/op
Iteration  20: 461.926 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 905.100 ns/op
# Warmup Iteration   2: 473.861 ns/op
# Warmup Iteration   3: 457.197 ns/op
# Warmup Iteration   4: 466.486 ns/op
# Warmup Iteration   5: 448.337 ns/op
Iteration   1: 446.520 ns/op
Iteration   2: 448.286 ns/op
Iteration   3: 447.874 ns/op
Iteration   4: 446.341 ns/op
Iteration   5: 446.774 ns/op
Iteration   6: 445.345 ns/op
Iteration   7: 445.025 ns/op
Iteration   8: 444.413 ns/op
Iteration   9: 445.100 ns/op
Iteration  10: 445.396 ns/op
Iteration  11: 445.667 ns/op
Iteration  12: 444.715 ns/op
Iteration  13: 445.463 ns/op
Iteration  14: 445.721 ns/op
Iteration  15: 446.012 ns/op
Iteration  16: 445.390 ns/op
Iteration  17: 445.990 ns/op
Iteration  18: 447.064 ns/op
Iteration  19: 444.926 ns/op
Iteration  20: 445.883 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 903.406 ns/op
# Warmup Iteration   2: 472.788 ns/op
# Warmup Iteration   3: 458.454 ns/op
# Warmup Iteration   4: 468.541 ns/op
# Warmup Iteration   5: 453.332 ns/op
Iteration   1: 446.994 ns/op
Iteration   2: 449.031 ns/op
Iteration   3: 449.160 ns/op
Iteration   4: 446.815 ns/op
Iteration   5: 447.513 ns/op
Iteration   6: 446.361 ns/op
Iteration   7: 446.269 ns/op
Iteration   8: 445.731 ns/op
Iteration   9: 446.239 ns/op
Iteration  10: 447.643 ns/op
Iteration  11: 447.168 ns/op
Iteration  12: 445.126 ns/op
Iteration  13: 446.006 ns/op
Iteration  14: 446.393 ns/op
Iteration  15: 444.970 ns/op
Iteration  16: 447.124 ns/op
Iteration  17: 447.099 ns/op
Iteration  18: 445.951 ns/op
Iteration  19: 446.265 ns/op
Iteration  20: 446.969 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 922.034 ns/op
# Warmup Iteration   2: 490.038 ns/op
# Warmup Iteration   3: 476.407 ns/op
# Warmup Iteration   4: 484.486 ns/op
# Warmup Iteration   5: 462.561 ns/op
Iteration   1: 464.900 ns/op
Iteration   2: 463.713 ns/op
Iteration   3: 462.132 ns/op
Iteration   4: 464.225 ns/op
Iteration   5: 463.314 ns/op
Iteration   6: 461.541 ns/op
Iteration   7: 462.047 ns/op
Iteration   8: 462.046 ns/op
Iteration   9: 461.718 ns/op
Iteration  10: 462.552 ns/op
Iteration  11: 462.764 ns/op
Iteration  12: 461.593 ns/op
Iteration  13: 463.193 ns/op
Iteration  14: 463.270 ns/op
Iteration  15: 461.632 ns/op
Iteration  16: 462.914 ns/op
Iteration  17: 463.043 ns/op
Iteration  18: 461.483 ns/op
Iteration  19: 462.648 ns/op
Iteration  20: 464.227 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 922.211 ns/op
# Warmup Iteration   2: 490.776 ns/op
# Warmup Iteration   3: 476.100 ns/op
# Warmup Iteration   4: 485.266 ns/op
# Warmup Iteration   5: 464.274 ns/op
Iteration   1: 465.794 ns/op
Iteration   2: 466.142 ns/op
Iteration   3: 463.735 ns/op
Iteration   4: 466.428 ns/op
Iteration   5: 464.698 ns/op
Iteration   6: 462.408 ns/op
Iteration   7: 463.281 ns/op
Iteration   8: 463.070 ns/op
Iteration   9: 466.591 ns/op
Iteration  10: 463.805 ns/op
Iteration  11: 464.341 ns/op
Iteration  12: 462.804 ns/op
Iteration  13: 464.066 ns/op
Iteration  14: 465.660 ns/op
Iteration  15: 478.334 ns/op
Iteration  16: 472.920 ns/op
Iteration  17: 466.239 ns/op
Iteration  18: 463.662 ns/op
Iteration  19: 463.744 ns/op
Iteration  20: 462.564 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  457.053 ±(99.9%) 3.082 ns/op [Average]
  (min, avg, max) = (444.413, 457.053, 478.334), stdev = 9.088
  CI (99.9%): [453.971, 460.135] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =    	 
						 


 ,


)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 910.245 ns/op
# Warmup Iteration   2: 485.133 ns/op
# Warmup Iteration   3: 470.700 ns/op
# Warmup Iteration   4: 481.620 ns/op
# Warmup Iteration   5: 459.054 ns/op
Iteration   1: 462.931 ns/op
Iteration   2: 463.748 ns/op
Iteration   3: 462.833 ns/op
Iteration   4: 458.064 ns/op
Iteration   5: 460.149 ns/op
Iteration   6: 462.111 ns/op
Iteration   7: 457.272 ns/op
Iteration   8: 458.118 ns/op
Iteration   9: 458.424 ns/op
Iteration  10: 458.324 ns/op
Iteration  11: 457.062 ns/op
Iteration  12: 457.997 ns/op
Iteration  13: 457.796 ns/op
Iteration  14: 458.156 ns/op
Iteration  15: 457.290 ns/op
Iteration  16: 458.766 ns/op
Iteration  17: 459.068 ns/op
Iteration  18: 457.481 ns/op
Iteration  19: 458.950 ns/op
Iteration  20: 459.348 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 908.662 ns/op
# Warmup Iteration   2: 500.620 ns/op
# Warmup Iteration   3: 489.991 ns/op
# Warmup Iteration   4: 499.727 ns/op
# Warmup Iteration   5: 477.925 ns/op
Iteration   1: 479.984 ns/op
Iteration   2: 480.046 ns/op
Iteration   3: 482.718 ns/op
Iteration   4: 480.431 ns/op
Iteration   5: 478.803 ns/op
Iteration   6: 479.269 ns/op
Iteration   7: 477.626 ns/op
Iteration   8: 476.744 ns/op
Iteration   9: 477.722 ns/op
Iteration  10: 478.242 ns/op
Iteration  11: 478.023 ns/op
Iteration  12: 479.381 ns/op
Iteration  13: 479.812 ns/op
Iteration  14: 477.639 ns/op
Iteration  15: 480.189 ns/op
Iteration  16: 478.835 ns/op
Iteration  17: 477.952 ns/op
Iteration  18: 480.727 ns/op
Iteration  19: 478.989 ns/op
Iteration  20: 477.055 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 909.262 ns/op
# Warmup Iteration   2: 508.077 ns/op
# Warmup Iteration   3: 494.488 ns/op
# Warmup Iteration   4: 504.180 ns/op
# Warmup Iteration   5: 483.006 ns/op
Iteration   1: 484.921 ns/op
Iteration   2: 482.870 ns/op
Iteration   3: 484.743 ns/op
Iteration   4: 486.911 ns/op
Iteration   5: 482.844 ns/op
Iteration   6: 482.201 ns/op
Iteration   7: 481.903 ns/op
Iteration   8: 481.195 ns/op
Iteration   9: 482.653 ns/op
Iteration  10: 484.235 ns/op
Iteration  11: 481.242 ns/op
Iteration  12: 482.511 ns/op
Iteration  13: 481.353 ns/op
Iteration  14: 483.611 ns/op
Iteration  15: 484.109 ns/op
Iteration  16: 481.248 ns/op
Iteration  17: 492.241 ns/op
Iteration  18: 482.945 ns/op
Iteration  19: 481.591 ns/op
Iteration  20: 489.766 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 918.241 ns/op
# Warmup Iteration   2: 506.704 ns/op
# Warmup Iteration   3: 494.653 ns/op
# Warmup Iteration   4: 503.495 ns/op
# Warmup Iteration   5: 480.692 ns/op
Iteration   1: 483.282 ns/op
Iteration   2: 480.677 ns/op
Iteration   3: 482.699 ns/op
Iteration   4: 484.065 ns/op
Iteration   5: 481.403 ns/op
Iteration   6: 481.810 ns/op
Iteration   7: 482.732 ns/op
Iteration   8: 481.047 ns/op
Iteration   9: 482.187 ns/op
Iteration  10: 481.431 ns/op
Iteration  11: 479.786 ns/op
Iteration  12: 481.420 ns/op
Iteration  13: 481.109 ns/op
Iteration  14: 479.914 ns/op
Iteration  15: 481.285 ns/op
Iteration  16: 479.679 ns/op
Iteration  17: 481.189 ns/op
Iteration  18: 479.933 ns/op
Iteration  19: 479.727 ns/op
Iteration  20: 482.895 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 906.717 ns/op
# Warmup Iteration   2: 474.794 ns/op
# Warmup Iteration   3: 466.666 ns/op
# Warmup Iteration   4: 477.195 ns/op
# Warmup Iteration   5: 459.108 ns/op
Iteration   1: 455.347 ns/op
Iteration   2: 458.966 ns/op
Iteration   3: 459.665 ns/op
Iteration   4: 459.658 ns/op
Iteration   5: 453.845 ns/op
Iteration   6: 454.444 ns/op
Iteration   7: 455.801 ns/op
Iteration   8: 453.854 ns/op
Iteration   9: 455.139 ns/op
Iteration  10: 456.469 ns/op
Iteration  11: 456.120 ns/op
Iteration  12: 454.282 ns/op
Iteration  13: 456.370 ns/op
Iteration  14: 455.486 ns/op
Iteration  15: 457.033 ns/op
Iteration  16: 454.654 ns/op
Iteration  17: 457.819 ns/op
Iteration  18: 456.629 ns/op
Iteration  19: 457.761 ns/op
Iteration  20: 455.383 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  471.922 ±(99.9%) 4.053 ns/op [Average]
  (min, avg, max) = (453.845, 471.922, 492.241), stdev = 11.952
  CI (99.9%): [467.868, 475.975] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*     	 
						 


 ,


  avgt  100  457.053 ± 3.082  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*     	 
						 


 ,


  avgt  100  471.922 ± 4.053  ns/op

Benchmark result is saved to split_precompiled_regex_211_36_Match.csv
