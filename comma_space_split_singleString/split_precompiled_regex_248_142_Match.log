# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 

	 	  	 


 
  	
 	


 		
	, 

	


 					 
 	 	

	

	

	 

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1084.365 ns/op
# Warmup Iteration   2: 740.133 ns/op
# Warmup Iteration   3: 666.125 ns/op
# Warmup Iteration   4: 662.101 ns/op
# Warmup Iteration   5: 665.765 ns/op
Iteration   1: 669.571 ns/op
Iteration   2: 660.489 ns/op
Iteration   3: 653.494 ns/op
Iteration   4: 654.029 ns/op
Iteration   5: 653.533 ns/op
Iteration   6: 653.100 ns/op
Iteration   7: 653.388 ns/op
Iteration   8: 656.504 ns/op
Iteration   9: 651.715 ns/op
Iteration  10: 651.451 ns/op
Iteration  11: 651.931 ns/op
Iteration  12: 651.785 ns/op
Iteration  13: 653.936 ns/op
Iteration  14: 651.891 ns/op
Iteration  15: 651.830 ns/op
Iteration  16: 652.634 ns/op
Iteration  17: 652.055 ns/op
Iteration  18: 652.868 ns/op
Iteration  19: 655.640 ns/op
Iteration  20: 652.746 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1075.663 ns/op
# Warmup Iteration   2: 739.230 ns/op
# Warmup Iteration   3: 666.803 ns/op
# Warmup Iteration   4: 663.713 ns/op
# Warmup Iteration   5: 667.747 ns/op
Iteration   1: 670.334 ns/op
Iteration   2: 659.444 ns/op
Iteration   3: 657.298 ns/op
Iteration   4: 656.354 ns/op
Iteration   5: 656.134 ns/op
Iteration   6: 656.210 ns/op
Iteration   7: 655.848 ns/op
Iteration   8: 659.459 ns/op
Iteration   9: 653.782 ns/op
Iteration  10: 653.393 ns/op
Iteration  11: 653.487 ns/op
Iteration  12: 653.562 ns/op
Iteration  13: 653.629 ns/op
Iteration  14: 655.309 ns/op
Iteration  15: 654.353 ns/op
Iteration  16: 653.864 ns/op
Iteration  17: 653.924 ns/op
Iteration  18: 654.394 ns/op
Iteration  19: 657.087 ns/op
Iteration  20: 654.163 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1135.592 ns/op
# Warmup Iteration   2: 758.452 ns/op
# Warmup Iteration   3: 669.218 ns/op
# Warmup Iteration   4: 662.484 ns/op
# Warmup Iteration   5: 666.362 ns/op
Iteration   1: 671.882 ns/op
Iteration   2: 654.905 ns/op
Iteration   3: 658.489 ns/op
Iteration   4: 655.428 ns/op
Iteration   5: 655.210 ns/op
Iteration   6: 655.419 ns/op
Iteration   7: 655.459 ns/op
Iteration   8: 658.529 ns/op
Iteration   9: 653.099 ns/op
Iteration  10: 653.073 ns/op
Iteration  11: 652.847 ns/op
Iteration  12: 652.504 ns/op
Iteration  13: 652.810 ns/op
Iteration  14: 654.848 ns/op
Iteration  15: 653.802 ns/op
Iteration  16: 659.048 ns/op
Iteration  17: 660.306 ns/op
Iteration  18: 658.576 ns/op
Iteration  19: 657.467 ns/op
Iteration  20: 659.281 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1071.648 ns/op
# Warmup Iteration   2: 732.818 ns/op
# Warmup Iteration   3: 664.311 ns/op
# Warmup Iteration   4: 661.751 ns/op
# Warmup Iteration   5: 664.199 ns/op
Iteration   1: 667.889 ns/op
Iteration   2: 657.559 ns/op
Iteration   3: 653.220 ns/op
Iteration   4: 653.069 ns/op
Iteration   5: 653.170 ns/op
Iteration   6: 652.513 ns/op
Iteration   7: 652.694 ns/op
Iteration   8: 656.321 ns/op
Iteration   9: 651.385 ns/op
Iteration  10: 651.101 ns/op
Iteration  11: 654.185 ns/op
Iteration  12: 652.329 ns/op
Iteration  13: 653.119 ns/op
Iteration  14: 650.551 ns/op
Iteration  15: 650.618 ns/op
Iteration  16: 650.543 ns/op
Iteration  17: 651.517 ns/op
Iteration  18: 652.280 ns/op
Iteration  19: 651.028 ns/op
Iteration  20: 651.189 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1110.672 ns/op
# Warmup Iteration   2: 787.050 ns/op
# Warmup Iteration   3: 702.564 ns/op
# Warmup Iteration   4: 698.537 ns/op
# Warmup Iteration   5: 702.179 ns/op
Iteration   1: 706.219 ns/op
Iteration   2: 690.128 ns/op
Iteration   3: 690.053 ns/op
Iteration   4: 690.237 ns/op
Iteration   5: 689.076 ns/op
Iteration   6: 695.158 ns/op
Iteration   7: 692.770 ns/op
Iteration   8: 694.503 ns/op
Iteration   9: 691.371 ns/op
Iteration  10: 695.376 ns/op
Iteration  11: 688.448 ns/op
Iteration  12: 692.814 ns/op
Iteration  13: 690.269 ns/op
Iteration  14: 690.629 ns/op
Iteration  15: 687.997 ns/op
Iteration  16: 689.706 ns/op
Iteration  17: 690.274 ns/op
Iteration  18: 690.045 ns/op
Iteration  19: 689.301 ns/op
Iteration  20: 687.983 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  662.382 ±(99.9%) 5.180 ns/op [Average]
  (min, avg, max) = (650.543, 662.382, 706.219), stdev = 15.273
  CI (99.9%): [657.202, 667.562] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 

	 	  	 


 
  	
 	


 		
	, 

	


 					 
 	 	

	

	

	 

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1156.209 ns/op
# Warmup Iteration   2: 784.597 ns/op
# Warmup Iteration   3: 697.489 ns/op
# Warmup Iteration   4: 692.968 ns/op
# Warmup Iteration   5: 696.122 ns/op
Iteration   1: 700.896 ns/op
Iteration   2: 685.845 ns/op
Iteration   3: 687.324 ns/op
Iteration   4: 683.977 ns/op
Iteration   5: 683.938 ns/op
Iteration   6: 683.900 ns/op
Iteration   7: 684.231 ns/op
Iteration   8: 684.149 ns/op
Iteration   9: 685.183 ns/op
Iteration  10: 683.295 ns/op
Iteration  11: 682.789 ns/op
Iteration  12: 682.098 ns/op
Iteration  13: 681.272 ns/op
Iteration  14: 681.366 ns/op
Iteration  15: 682.147 ns/op
Iteration  16: 683.994 ns/op
Iteration  17: 682.705 ns/op
Iteration  18: 682.588 ns/op
Iteration  19: 683.611 ns/op
Iteration  20: 682.475 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1136.082 ns/op
# Warmup Iteration   2: 759.860 ns/op
# Warmup Iteration   3: 682.311 ns/op
# Warmup Iteration   4: 675.374 ns/op
# Warmup Iteration   5: 682.505 ns/op
Iteration   1: 682.964 ns/op
Iteration   2: 671.908 ns/op
Iteration   3: 667.357 ns/op
Iteration   4: 667.471 ns/op
Iteration   5: 667.807 ns/op
Iteration   6: 667.609 ns/op
Iteration   7: 667.353 ns/op
Iteration   8: 677.541 ns/op
Iteration   9: 668.099 ns/op
Iteration  10: 664.945 ns/op
Iteration  11: 664.944 ns/op
Iteration  12: 664.634 ns/op
Iteration  13: 665.531 ns/op
Iteration  14: 664.891 ns/op
Iteration  15: 664.468 ns/op
Iteration  16: 666.379 ns/op
Iteration  17: 665.367 ns/op
Iteration  18: 668.980 ns/op
Iteration  19: 666.195 ns/op
Iteration  20: 665.355 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1126.080 ns/op
# Warmup Iteration   2: 767.132 ns/op
# Warmup Iteration   3: 689.679 ns/op
# Warmup Iteration   4: 685.783 ns/op
# Warmup Iteration   5: 689.660 ns/op
Iteration   1: 693.786 ns/op
Iteration   2: 678.995 ns/op
Iteration   3: 680.972 ns/op
Iteration   4: 677.788 ns/op
Iteration   5: 677.067 ns/op
Iteration   6: 677.030 ns/op
Iteration   7: 677.400 ns/op
Iteration   8: 677.055 ns/op
Iteration   9: 678.581 ns/op
Iteration  10: 680.256 ns/op
Iteration  11: 676.458 ns/op
Iteration  12: 676.328 ns/op
Iteration  13: 675.402 ns/op
Iteration  14: 675.694 ns/op
Iteration  15: 677.896 ns/op
Iteration  16: 676.478 ns/op
Iteration  17: 678.116 ns/op
Iteration  18: 677.211 ns/op
Iteration  19: 676.321 ns/op
Iteration  20: 676.416 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1130.271 ns/op
# Warmup Iteration   2: 765.701 ns/op
# Warmup Iteration   3: 687.661 ns/op
# Warmup Iteration   4: 683.372 ns/op
# Warmup Iteration   5: 690.797 ns/op
Iteration   1: 689.902 ns/op
Iteration   2: 674.912 ns/op
Iteration   3: 677.814 ns/op
Iteration   4: 675.144 ns/op
Iteration   5: 675.160 ns/op
Iteration   6: 675.170 ns/op
Iteration   7: 675.539 ns/op
Iteration   8: 675.830 ns/op
Iteration   9: 677.805 ns/op
Iteration  10: 673.113 ns/op
Iteration  11: 673.081 ns/op
Iteration  12: 673.766 ns/op
Iteration  13: 672.651 ns/op
Iteration  14: 675.233 ns/op
Iteration  15: 672.989 ns/op
Iteration  16: 673.640 ns/op
Iteration  17: 673.196 ns/op
Iteration  18: 672.712 ns/op
Iteration  19: 672.405 ns/op
Iteration  20: 673.715 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1150.132 ns/op
# Warmup Iteration   2: 779.220 ns/op
# Warmup Iteration   3: 693.128 ns/op
# Warmup Iteration   4: 689.916 ns/op
# Warmup Iteration   5: 695.923 ns/op
Iteration   1: 697.697 ns/op
Iteration   2: 681.654 ns/op
Iteration   3: 684.682 ns/op
Iteration   4: 681.597 ns/op
Iteration   5: 681.645 ns/op
Iteration   6: 681.823 ns/op
Iteration   7: 682.131 ns/op
Iteration   8: 681.919 ns/op
Iteration   9: 682.409 ns/op
Iteration  10: 684.127 ns/op
Iteration  11: 679.890 ns/op
Iteration  12: 679.337 ns/op
Iteration  13: 679.962 ns/op
Iteration  14: 679.323 ns/op
Iteration  15: 679.345 ns/op
Iteration  16: 686.140 ns/op
Iteration  17: 680.387 ns/op
Iteration  18: 679.863 ns/op
Iteration  19: 679.414 ns/op
Iteration  20: 679.772 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  677.597 ±(99.9%) 2.395 ns/op [Average]
  (min, avg, max) = (664.468, 677.597, 700.896), stdev = 7.063
  CI (99.9%): [675.202, 679.993] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 

	 	  	 


 
  	
 	


 		
	, 

	


 					 
 	 	

	

	

	 

  avgt  100  662.382 ± 5.180  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 

	 	  	 


 
  	
 	


 		
	, 

	


 					 
 	 	

	

	

	 

  avgt  100  677.597 ± 2.395  ns/op

Benchmark result is saved to split_precompiled_regex_248_142_Match.csv
