# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 



	
  
,  				



		 	 
  			 
	
 		 	

	
  	 	
 		 
	 
 	

	 
  	 		
 
	 	 
	 	
		 

	 
 	 
	
	  



 

 	
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1252.908 ns/op
# Warmup Iteration   2: 927.564 ns/op
# Warmup Iteration   3: 785.033 ns/op
# Warmup Iteration   4: 787.332 ns/op
# Warmup Iteration   5: 791.156 ns/op
Iteration   1: 794.022 ns/op
Iteration   2: 799.744 ns/op
Iteration   3: 781.929 ns/op
Iteration   4: 781.656 ns/op
Iteration   5: 781.829 ns/op
Iteration   6: 781.475 ns/op
Iteration   7: 781.405 ns/op
Iteration   8: 780.982 ns/op
Iteration   9: 780.956 ns/op
Iteration  10: 782.024 ns/op
Iteration  11: 787.140 ns/op
Iteration  12: 779.310 ns/op
Iteration  13: 778.761 ns/op
Iteration  14: 778.909 ns/op
Iteration  15: 778.977 ns/op
Iteration  16: 780.072 ns/op
Iteration  17: 779.413 ns/op
Iteration  18: 780.264 ns/op
Iteration  19: 780.078 ns/op
Iteration  20: 781.210 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1256.064 ns/op
# Warmup Iteration   2: 934.036 ns/op
# Warmup Iteration   3: 792.045 ns/op
# Warmup Iteration   4: 794.529 ns/op
# Warmup Iteration   5: 797.681 ns/op
Iteration   1: 801.952 ns/op
Iteration   2: 806.648 ns/op
Iteration   3: 788.550 ns/op
Iteration   4: 788.352 ns/op
Iteration   5: 787.378 ns/op
Iteration   6: 787.900 ns/op
Iteration   7: 787.969 ns/op
Iteration   8: 788.031 ns/op
Iteration   9: 788.353 ns/op
Iteration  10: 788.905 ns/op
Iteration  11: 788.778 ns/op
Iteration  12: 789.640 ns/op
Iteration  13: 786.098 ns/op
Iteration  14: 786.541 ns/op
Iteration  15: 786.381 ns/op
Iteration  16: 786.326 ns/op
Iteration  17: 787.377 ns/op
Iteration  18: 793.232 ns/op
Iteration  19: 788.411 ns/op
Iteration  20: 787.691 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1254.520 ns/op
# Warmup Iteration   2: 919.119 ns/op
# Warmup Iteration   3: 781.601 ns/op
# Warmup Iteration   4: 783.790 ns/op
# Warmup Iteration   5: 787.237 ns/op
Iteration   1: 792.448 ns/op
Iteration   2: 797.273 ns/op
Iteration   3: 784.080 ns/op
Iteration   4: 779.154 ns/op
Iteration   5: 779.190 ns/op
Iteration   6: 778.649 ns/op
Iteration   7: 778.810 ns/op
Iteration   8: 779.966 ns/op
Iteration   9: 778.314 ns/op
Iteration  10: 782.520 ns/op
Iteration  11: 780.169 ns/op
Iteration  12: 776.253 ns/op
Iteration  13: 776.123 ns/op
Iteration  14: 775.761 ns/op
Iteration  15: 776.060 ns/op
Iteration  16: 776.423 ns/op
Iteration  17: 777.549 ns/op
Iteration  18: 778.692 ns/op
Iteration  19: 777.572 ns/op
Iteration  20: 777.111 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1356.768 ns/op
# Warmup Iteration   2: 1082.146 ns/op
# Warmup Iteration   3: 895.842 ns/op
# Warmup Iteration   4: 898.443 ns/op
# Warmup Iteration   5: 901.603 ns/op
Iteration   1: 906.251 ns/op
Iteration   2: 912.231 ns/op
Iteration   3: 887.825 ns/op
Iteration   4: 892.363 ns/op
Iteration   5: 891.479 ns/op
Iteration   6: 891.212 ns/op
Iteration   7: 892.099 ns/op
Iteration   8: 899.831 ns/op
Iteration   9: 891.976 ns/op
Iteration  10: 888.079 ns/op
Iteration  11: 892.454 ns/op
Iteration  12: 892.963 ns/op
Iteration  13: 893.861 ns/op
Iteration  14: 893.953 ns/op
Iteration  15: 889.838 ns/op
Iteration  16: 890.915 ns/op
Iteration  17: 892.902 ns/op
Iteration  18: 887.601 ns/op
Iteration  19: 892.379 ns/op
Iteration  20: 890.673 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1252.103 ns/op
# Warmup Iteration   2: 928.163 ns/op
# Warmup Iteration   3: 789.002 ns/op
# Warmup Iteration   4: 791.283 ns/op
# Warmup Iteration   5: 794.665 ns/op
Iteration   1: 798.057 ns/op
Iteration   2: 809.534 ns/op
Iteration   3: 787.692 ns/op
Iteration   4: 784.056 ns/op
Iteration   5: 784.781 ns/op
Iteration   6: 784.407 ns/op
Iteration   7: 784.588 ns/op
Iteration   8: 784.671 ns/op
Iteration   9: 784.671 ns/op
Iteration  10: 784.612 ns/op
Iteration  11: 786.898 ns/op
Iteration  12: 784.186 ns/op
Iteration  13: 782.090 ns/op
Iteration  14: 783.806 ns/op
Iteration  15: 784.850 ns/op
Iteration  16: 784.066 ns/op
Iteration  17: 782.691 ns/op
Iteration  18: 782.895 ns/op
Iteration  19: 783.155 ns/op
Iteration  20: 782.725 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  806.421 Â±(99.9%) 15.012 ns/op [Average]
  (min, avg, max) = (775.761, 806.421, 912.231), stdev = 44.263
  CI (99.9%): [791.409, 821.433] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 



	
  
,  				



		 	 
  			 
	
 		 	

	
  	 	
 		 
	 
 	

	 
  	 		
 
	 	 
	 	
		 

	 
 	 
	
	  



 

 	
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1255.605 ns/op
# Warmup Iteration   2: 955.339 ns/op
# Warmup Iteration   3: 809.273 ns/op
# Warmup Iteration   4: 811.476 ns/op
# Warmup Iteration   5: 814.841 ns/op
Iteration   1: 819.367 ns/op
Iteration   2: 824.087 ns/op
Iteration   3: 805.745 ns/op
Iteration   4: 804.866 ns/op
Iteration   5: 805.050 ns/op
Iteration   6: 804.982 ns/op
Iteration   7: 804.883 ns/op
Iteration   8: 806.048 ns/op
Iteration   9: 809.001 ns/op
Iteration  10: 805.095 ns/op
Iteration  11: 805.460 ns/op
Iteration  12: 802.869 ns/op
Iteration  13: 802.379 ns/op
Iteration  14: 805.457 ns/op
Iteration  15: 803.655 ns/op
Iteration  16: 803.975 ns/op
Iteration  17: 804.346 ns/op
Iteration  18: 804.214 ns/op
Iteration  19: 802.991 ns/op
Iteration  20: 803.173 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1277.844 ns/op
# Warmup Iteration   2: 965.569 ns/op
# Warmup Iteration   3: 814.425 ns/op
# Warmup Iteration   4: 816.195 ns/op
# Warmup Iteration   5: 818.606 ns/op
Iteration   1: 823.213 ns/op
Iteration   2: 826.838 ns/op
Iteration   3: 809.484 ns/op
Iteration   4: 809.327 ns/op
Iteration   5: 809.222 ns/op
Iteration   6: 808.574 ns/op
Iteration   7: 810.022 ns/op
Iteration   8: 809.966 ns/op
Iteration   9: 810.224 ns/op
Iteration  10: 811.146 ns/op
Iteration  11: 815.102 ns/op
Iteration  12: 816.090 ns/op
Iteration  13: 807.729 ns/op
Iteration  14: 807.570 ns/op
Iteration  15: 808.446 ns/op
Iteration  16: 808.564 ns/op
Iteration  17: 808.571 ns/op
Iteration  18: 808.706 ns/op
Iteration  19: 808.466 ns/op
Iteration  20: 813.230 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1245.809 ns/op
# Warmup Iteration   2: 957.343 ns/op
# Warmup Iteration   3: 819.015 ns/op
# Warmup Iteration   4: 821.190 ns/op
# Warmup Iteration   5: 823.743 ns/op
Iteration   1: 828.566 ns/op
Iteration   2: 833.476 ns/op
Iteration   3: 815.180 ns/op
Iteration   4: 813.889 ns/op
Iteration   5: 814.844 ns/op
Iteration   6: 815.054 ns/op
Iteration   7: 814.310 ns/op
Iteration   8: 815.349 ns/op
Iteration   9: 817.014 ns/op
Iteration  10: 820.035 ns/op
Iteration  11: 819.358 ns/op
Iteration  12: 814.171 ns/op
Iteration  13: 813.403 ns/op
Iteration  14: 813.120 ns/op
Iteration  15: 812.824 ns/op
Iteration  16: 812.722 ns/op
Iteration  17: 813.145 ns/op
Iteration  18: 817.371 ns/op
Iteration  19: 812.311 ns/op
Iteration  20: 812.457 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1255.359 ns/op
# Warmup Iteration   2: 952.843 ns/op
# Warmup Iteration   3: 811.039 ns/op
# Warmup Iteration   4: 814.101 ns/op
# Warmup Iteration   5: 816.453 ns/op
Iteration   1: 820.756 ns/op
Iteration   2: 826.391 ns/op
Iteration   3: 807.645 ns/op
Iteration   4: 806.766 ns/op
Iteration   5: 807.377 ns/op
Iteration   6: 807.904 ns/op
Iteration   7: 808.062 ns/op
Iteration   8: 809.260 ns/op
Iteration   9: 809.335 ns/op
Iteration  10: 808.879 ns/op
Iteration  11: 809.595 ns/op
Iteration  12: 814.264 ns/op
Iteration  13: 806.284 ns/op
Iteration  14: 804.938 ns/op
Iteration  15: 807.803 ns/op
Iteration  16: 807.122 ns/op
Iteration  17: 806.008 ns/op
Iteration  18: 806.905 ns/op
Iteration  19: 806.720 ns/op
Iteration  20: 805.615 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1247.975 ns/op
# Warmup Iteration   2: 956.764 ns/op
# Warmup Iteration   3: 806.463 ns/op
# Warmup Iteration   4: 808.337 ns/op
# Warmup Iteration   5: 812.179 ns/op
Iteration   1: 815.959 ns/op
Iteration   2: 841.517 ns/op
Iteration   3: 802.541 ns/op
Iteration   4: 804.041 ns/op
Iteration   5: 805.755 ns/op
Iteration   6: 802.642 ns/op
Iteration   7: 802.773 ns/op
Iteration   8: 803.515 ns/op
Iteration   9: 809.735 ns/op
Iteration  10: 809.828 ns/op
Iteration  11: 805.789 ns/op
Iteration  12: 808.394 ns/op
Iteration  13: 800.460 ns/op
Iteration  14: 799.352 ns/op
Iteration  15: 800.003 ns/op
Iteration  16: 799.868 ns/op
Iteration  17: 801.822 ns/op
Iteration  18: 801.889 ns/op
Iteration  19: 801.596 ns/op
Iteration  20: 800.435 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  809.923 Â±(99.9%) 2.492 ns/op [Average]
  (min, avg, max) = (799.352, 809.923, 841.517), stdev = 7.349
  CI (99.9%): [807.430, 812.415] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                      (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  



	
  
,  				



		 	 
  			 
	
 		 	

	
  	 	
 		 
	 
 	

	 
  	 		
 
	 	 
	 	
		 

	 
 	 
	
	  



 

 	
		  avgt  100  806.421 Â± 15.012  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  



	
  
,  				



		 	 
  			 
	
 		 	

	
  	 	
 		 
	 
 	

	 
  	 		
 
	 	 
	 	
		 

	 
 	 
	
	  



 

 	
		  avgt  100  809.923 Â±  2.492  ns/op

Benchmark result is saved to split_precompiled_regex_51_221_Match.csv
