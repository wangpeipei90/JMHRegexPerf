# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = `V\lH"4NYE3WW/..	QOr|G/Z$!=ii&Z? =XfM
nS^z_GBI
2I6tQ?lcxBJ:nCy$C:53
gw033FEG]HV=TtC/)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1338.384 ns/op
# Warmup Iteration   2: 1275.919 ns/op
# Warmup Iteration   3: 988.592 ns/op
# Warmup Iteration   4: 997.447 ns/op
# Warmup Iteration   5: 999.485 ns/op
Iteration   1: 1003.611 ns/op
Iteration   2: 988.117 ns/op
Iteration   3: 1010.097 ns/op
Iteration   4: 1015.780 ns/op
Iteration   5: 988.278 ns/op
Iteration   6: 992.365 ns/op
Iteration   7: 992.194 ns/op
Iteration   8: 987.780 ns/op
Iteration   9: 992.121 ns/op
Iteration  10: 995.916 ns/op
Iteration  11: 991.522 ns/op
Iteration  12: 993.475 ns/op
Iteration  13: 992.632 ns/op
Iteration  14: 988.254 ns/op
Iteration  15: 992.317 ns/op
Iteration  16: 997.506 ns/op
Iteration  17: 987.783 ns/op
Iteration  18: 993.258 ns/op
Iteration  19: 989.643 ns/op
Iteration  20: 988.036 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1335.707 ns/op
# Warmup Iteration   2: 1270.283 ns/op
# Warmup Iteration   3: 984.197 ns/op
# Warmup Iteration   4: 992.846 ns/op
# Warmup Iteration   5: 996.420 ns/op
Iteration   1: 1000.137 ns/op
Iteration   2: 983.759 ns/op
Iteration   3: 1006.038 ns/op
Iteration   4: 1012.903 ns/op
Iteration   5: 984.366 ns/op
Iteration   6: 990.382 ns/op
Iteration   7: 988.288 ns/op
Iteration   8: 983.771 ns/op
Iteration   9: 988.001 ns/op
Iteration  10: 988.406 ns/op
Iteration  11: 984.029 ns/op
Iteration  12: 989.310 ns/op
Iteration  13: 988.683 ns/op
Iteration  14: 983.818 ns/op
Iteration  15: 990.085 ns/op
Iteration  16: 992.212 ns/op
Iteration  17: 984.602 ns/op
Iteration  18: 989.920 ns/op
Iteration  19: 986.999 ns/op
Iteration  20: 984.390 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1329.540 ns/op
# Warmup Iteration   2: 1253.976 ns/op
# Warmup Iteration   3: 972.243 ns/op
# Warmup Iteration   4: 980.597 ns/op
# Warmup Iteration   5: 983.342 ns/op
Iteration   1: 987.606 ns/op
Iteration   2: 971.375 ns/op
Iteration   3: 992.438 ns/op
Iteration   4: 999.067 ns/op
Iteration   5: 971.501 ns/op
Iteration   6: 977.338 ns/op
Iteration   7: 975.708 ns/op
Iteration   8: 973.518 ns/op
Iteration   9: 976.386 ns/op
Iteration  10: 976.099 ns/op
Iteration  11: 976.980 ns/op
Iteration  12: 971.995 ns/op
Iteration  13: 976.283 ns/op
Iteration  14: 976.153 ns/op
Iteration  15: 971.816 ns/op
Iteration  16: 976.768 ns/op
Iteration  17: 976.607 ns/op
Iteration  18: 971.936 ns/op
Iteration  19: 973.650 ns/op
Iteration  20: 980.503 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1333.424 ns/op
# Warmup Iteration   2: 1248.959 ns/op
# Warmup Iteration   3: 978.007 ns/op
# Warmup Iteration   4: 984.700 ns/op
# Warmup Iteration   5: 987.847 ns/op
Iteration   1: 992.039 ns/op
Iteration   2: 976.416 ns/op
Iteration   3: 996.855 ns/op
Iteration   4: 1003.822 ns/op
Iteration   5: 976.761 ns/op
Iteration   6: 990.483 ns/op
Iteration   7: 980.904 ns/op
Iteration   8: 976.788 ns/op
Iteration   9: 980.470 ns/op
Iteration  10: 981.348 ns/op
Iteration  11: 981.002 ns/op
Iteration  12: 976.591 ns/op
Iteration  13: 981.970 ns/op
Iteration  14: 982.518 ns/op
Iteration  15: 976.648 ns/op
Iteration  16: 982.190 ns/op
Iteration  17: 982.270 ns/op
Iteration  18: 977.922 ns/op
Iteration  19: 988.096 ns/op
Iteration  20: 980.817 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1339.490 ns/op
# Warmup Iteration   2: 1261.538 ns/op
# Warmup Iteration   3: 974.083 ns/op
# Warmup Iteration   4: 982.973 ns/op
# Warmup Iteration   5: 986.643 ns/op
Iteration   1: 989.252 ns/op
Iteration   2: 973.395 ns/op
Iteration   3: 994.514 ns/op
Iteration   4: 1001.391 ns/op
Iteration   5: 973.594 ns/op
Iteration   6: 985.100 ns/op
Iteration   7: 978.880 ns/op
Iteration   8: 973.912 ns/op
Iteration   9: 977.831 ns/op
Iteration  10: 978.215 ns/op
Iteration  11: 973.749 ns/op
Iteration  12: 977.933 ns/op
Iteration  13: 982.938 ns/op
Iteration  14: 978.486 ns/op
Iteration  15: 973.409 ns/op
Iteration  16: 978.659 ns/op
Iteration  17: 980.066 ns/op
Iteration  18: 973.122 ns/op
Iteration  19: 975.730 ns/op
Iteration  20: 976.581 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  984.972 ±(99.9%) 3.266 ns/op [Average]
  (min, avg, max) = (971.375, 984.972, 1015.780), stdev = 9.629
  CI (99.9%): [981.706, 988.237] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = `V\lH"4NYE3WW/..	QOr|G/Z$!=ii&Z? =XfM
nS^z_GBI
2I6tQ?lcxBJ:nCy$C:53
gw033FEG]HV=TtC/)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1330.823 ns/op
# Warmup Iteration   2: 1265.319 ns/op
# Warmup Iteration   3: 983.564 ns/op
# Warmup Iteration   4: 991.957 ns/op
# Warmup Iteration   5: 995.227 ns/op
Iteration   1: 999.331 ns/op
Iteration   2: 983.508 ns/op
Iteration   3: 1005.184 ns/op
Iteration   4: 1017.741 ns/op
Iteration   5: 985.566 ns/op
Iteration   6: 988.766 ns/op
Iteration   7: 988.039 ns/op
Iteration   8: 983.020 ns/op
Iteration   9: 986.318 ns/op
Iteration  10: 986.743 ns/op
Iteration  11: 983.115 ns/op
Iteration  12: 988.405 ns/op
Iteration  13: 988.157 ns/op
Iteration  14: 984.009 ns/op
Iteration  15: 988.647 ns/op
Iteration  16: 988.085 ns/op
Iteration  17: 983.789 ns/op
Iteration  18: 988.987 ns/op
Iteration  19: 997.377 ns/op
Iteration  20: 983.840 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1326.892 ns/op
# Warmup Iteration   2: 1253.086 ns/op
# Warmup Iteration   3: 971.279 ns/op
# Warmup Iteration   4: 980.087 ns/op
# Warmup Iteration   5: 984.080 ns/op
Iteration   1: 988.410 ns/op
Iteration   2: 971.952 ns/op
Iteration   3: 992.611 ns/op
Iteration   4: 998.313 ns/op
Iteration   5: 970.209 ns/op
Iteration   6: 977.165 ns/op
Iteration   7: 974.574 ns/op
Iteration   8: 969.944 ns/op
Iteration   9: 975.295 ns/op
Iteration  10: 975.756 ns/op
Iteration  11: 976.457 ns/op
Iteration  12: 970.352 ns/op
Iteration  13: 975.062 ns/op
Iteration  14: 975.325 ns/op
Iteration  15: 969.679 ns/op
Iteration  16: 975.200 ns/op
Iteration  17: 975.456 ns/op
Iteration  18: 969.997 ns/op
Iteration  19: 973.840 ns/op
Iteration  20: 972.766 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1325.824 ns/op
# Warmup Iteration   2: 1250.305 ns/op
# Warmup Iteration   3: 976.344 ns/op
# Warmup Iteration   4: 985.145 ns/op
# Warmup Iteration   5: 988.081 ns/op
Iteration   1: 992.594 ns/op
Iteration   2: 976.328 ns/op
Iteration   3: 997.305 ns/op
Iteration   4: 1003.634 ns/op
Iteration   5: 976.168 ns/op
Iteration   6: 983.322 ns/op
Iteration   7: 981.167 ns/op
Iteration   8: 977.127 ns/op
Iteration   9: 985.468 ns/op
Iteration  10: 982.088 ns/op
Iteration  11: 976.125 ns/op
Iteration  12: 981.865 ns/op
Iteration  13: 986.902 ns/op
Iteration  14: 987.072 ns/op
Iteration  15: 976.412 ns/op
Iteration  16: 981.942 ns/op
Iteration  17: 982.960 ns/op
Iteration  18: 976.985 ns/op
Iteration  19: 990.821 ns/op
Iteration  20: 979.132 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1331.077 ns/op
# Warmup Iteration   2: 1255.350 ns/op
# Warmup Iteration   3: 978.265 ns/op
# Warmup Iteration   4: 988.417 ns/op
# Warmup Iteration   5: 997.352 ns/op
Iteration   1: 997.918 ns/op
Iteration   2: 977.986 ns/op
Iteration   3: 1000.803 ns/op
Iteration   4: 1011.181 ns/op
Iteration   5: 978.000 ns/op
Iteration   6: 984.147 ns/op
Iteration   7: 987.646 ns/op
Iteration   8: 978.101 ns/op
Iteration   9: 983.555 ns/op
Iteration  10: 987.203 ns/op
Iteration  11: 977.935 ns/op
Iteration  12: 983.330 ns/op
Iteration  13: 988.715 ns/op
Iteration  14: 977.955 ns/op
Iteration  15: 982.858 ns/op
Iteration  16: 989.471 ns/op
Iteration  17: 977.732 ns/op
Iteration  18: 1011.550 ns/op
Iteration  19: 980.917 ns/op
Iteration  20: 982.931 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1330.779 ns/op
# Warmup Iteration   2: 1259.593 ns/op
# Warmup Iteration   3: 979.342 ns/op
# Warmup Iteration   4: 987.767 ns/op
# Warmup Iteration   5: 990.792 ns/op
Iteration   1: 994.922 ns/op
Iteration   2: 978.783 ns/op
Iteration   3: 1000.326 ns/op
Iteration   4: 1006.660 ns/op
Iteration   5: 978.999 ns/op
Iteration   6: 984.205 ns/op
Iteration   7: 983.450 ns/op
Iteration   8: 979.070 ns/op
Iteration   9: 984.143 ns/op
Iteration  10: 983.756 ns/op
Iteration  11: 978.883 ns/op
Iteration  12: 983.457 ns/op
Iteration  13: 985.382 ns/op
Iteration  14: 978.807 ns/op
Iteration  15: 984.518 ns/op
Iteration  16: 985.726 ns/op
Iteration  17: 985.089 ns/op
Iteration  18: 979.097 ns/op
Iteration  19: 985.675 ns/op
Iteration  20: 982.726 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  984.460 ±(99.9%) 3.208 ns/op [Average]
  (min, avg, max) = (969.679, 984.460, 1017.741), stdev = 9.459
  CI (99.9%): [981.252, 987.668] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  `V\lH"4NYE3WW/..	QOr|G/Z$!=ii&Z? =XfM
nS^z_GBI
2I6tQ?lcxBJ:nCy$C:53
gw033FEG]HV=TtC/  avgt  100  984.972 ± 3.266  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  `V\lH"4NYE3WW/..	QOr|G/Z$!=ii&Z? =XfM
nS^z_GBI
2I6tQ?lcxBJ:nCy$C:53
gw033FEG]HV=TtC/  avgt  100  984.460 ± 3.208  ns/op

Benchmark result is saved to split_precompiled_regex_77_85_NonMatch.csv
