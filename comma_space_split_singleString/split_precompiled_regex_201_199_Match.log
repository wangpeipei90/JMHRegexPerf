# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 	


   	   	   
	 

 
	 		 	

,			
  	
 
			 		

 
		

							  
	
		 
 	  
 	  
	
 		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1235.291 ns/op
# Warmup Iteration   2: 972.215 ns/op
# Warmup Iteration   3: 812.934 ns/op
# Warmup Iteration   4: 815.478 ns/op
# Warmup Iteration   5: 818.947 ns/op
Iteration   1: 822.842 ns/op
Iteration   2: 828.839 ns/op
Iteration   3: 809.607 ns/op
Iteration   4: 808.616 ns/op
Iteration   5: 809.431 ns/op
Iteration   6: 809.389 ns/op
Iteration   7: 809.245 ns/op
Iteration   8: 808.447 ns/op
Iteration   9: 808.911 ns/op
Iteration  10: 809.151 ns/op
Iteration  11: 810.876 ns/op
Iteration  12: 807.958 ns/op
Iteration  13: 809.329 ns/op
Iteration  14: 814.016 ns/op
Iteration  15: 808.016 ns/op
Iteration  16: 804.427 ns/op
Iteration  17: 806.890 ns/op
Iteration  18: 806.085 ns/op
Iteration  19: 806.125 ns/op
Iteration  20: 807.429 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1252.857 ns/op
# Warmup Iteration   2: 967.152 ns/op
# Warmup Iteration   3: 814.965 ns/op
# Warmup Iteration   4: 817.415 ns/op
# Warmup Iteration   5: 820.381 ns/op
Iteration   1: 824.608 ns/op
Iteration   2: 830.604 ns/op
Iteration   3: 811.617 ns/op
Iteration   4: 809.738 ns/op
Iteration   5: 810.519 ns/op
Iteration   6: 810.303 ns/op
Iteration   7: 811.517 ns/op
Iteration   8: 811.850 ns/op
Iteration   9: 810.853 ns/op
Iteration  10: 811.363 ns/op
Iteration  11: 814.416 ns/op
Iteration  12: 813.408 ns/op
Iteration  13: 809.224 ns/op
Iteration  14: 806.641 ns/op
Iteration  15: 808.326 ns/op
Iteration  16: 815.672 ns/op
Iteration  17: 809.322 ns/op
Iteration  18: 808.398 ns/op
Iteration  19: 810.317 ns/op
Iteration  20: 810.745 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1234.707 ns/op
# Warmup Iteration   2: 964.487 ns/op
# Warmup Iteration   3: 816.480 ns/op
# Warmup Iteration   4: 819.561 ns/op
# Warmup Iteration   5: 822.719 ns/op
Iteration   1: 826.372 ns/op
Iteration   2: 831.423 ns/op
Iteration   3: 813.459 ns/op
Iteration   4: 812.255 ns/op
Iteration   5: 812.768 ns/op
Iteration   6: 812.240 ns/op
Iteration   7: 811.432 ns/op
Iteration   8: 811.420 ns/op
Iteration   9: 811.427 ns/op
Iteration  10: 812.370 ns/op
Iteration  11: 811.723 ns/op
Iteration  12: 809.226 ns/op
Iteration  13: 809.150 ns/op
Iteration  14: 810.833 ns/op
Iteration  15: 807.641 ns/op
Iteration  16: 809.344 ns/op
Iteration  17: 809.415 ns/op
Iteration  18: 809.671 ns/op
Iteration  19: 809.962 ns/op
Iteration  20: 809.804 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1292.068 ns/op
# Warmup Iteration   2: 986.835 ns/op
# Warmup Iteration   3: 833.234 ns/op
# Warmup Iteration   4: 830.262 ns/op
# Warmup Iteration   5: 833.864 ns/op
Iteration   1: 838.330 ns/op
Iteration   2: 843.571 ns/op
Iteration   3: 823.992 ns/op
Iteration   4: 823.450 ns/op
Iteration   5: 823.601 ns/op
Iteration   6: 823.472 ns/op
Iteration   7: 823.814 ns/op
Iteration   8: 824.111 ns/op
Iteration   9: 836.199 ns/op
Iteration  10: 820.007 ns/op
Iteration  11: 824.474 ns/op
Iteration  12: 824.633 ns/op
Iteration  13: 822.124 ns/op
Iteration  14: 822.022 ns/op
Iteration  15: 823.318 ns/op
Iteration  16: 822.338 ns/op
Iteration  17: 822.533 ns/op
Iteration  18: 828.896 ns/op
Iteration  19: 822.747 ns/op
Iteration  20: 822.187 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1252.552 ns/op
# Warmup Iteration   2: 921.250 ns/op
# Warmup Iteration   3: 782.305 ns/op
# Warmup Iteration   4: 784.348 ns/op
# Warmup Iteration   5: 788.492 ns/op
Iteration   1: 792.050 ns/op
Iteration   2: 797.017 ns/op
Iteration   3: 778.035 ns/op
Iteration   4: 777.829 ns/op
Iteration   5: 778.293 ns/op
Iteration   6: 777.875 ns/op
Iteration   7: 778.363 ns/op
Iteration   8: 778.290 ns/op
Iteration   9: 777.686 ns/op
Iteration  10: 778.213 ns/op
Iteration  11: 778.391 ns/op
Iteration  12: 775.860 ns/op
Iteration  13: 775.533 ns/op
Iteration  14: 775.695 ns/op
Iteration  15: 775.344 ns/op
Iteration  16: 776.009 ns/op
Iteration  17: 776.180 ns/op
Iteration  18: 776.312 ns/op
Iteration  19: 776.266 ns/op
Iteration  20: 776.010 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  807.981 Â±(99.9%) 5.658 ns/op [Average]
  (min, avg, max) = (775.344, 807.981, 843.571), stdev = 16.684
  CI (99.9%): [802.322, 813.639] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	 	


   	   	   
	 

 
	 		 	

,			
  	
 
			 		

 
		

							  
	
		 
 	  
 	  
	
 		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1291.387 ns/op
# Warmup Iteration   2: 1004.249 ns/op
# Warmup Iteration   3: 846.178 ns/op
# Warmup Iteration   4: 849.860 ns/op
# Warmup Iteration   5: 852.572 ns/op
Iteration   1: 857.286 ns/op
Iteration   2: 862.280 ns/op
Iteration   3: 842.048 ns/op
Iteration   4: 842.170 ns/op
Iteration   5: 842.254 ns/op
Iteration   6: 841.898 ns/op
Iteration   7: 848.004 ns/op
Iteration   8: 845.045 ns/op
Iteration   9: 842.320 ns/op
Iteration  10: 838.075 ns/op
Iteration  11: 844.863 ns/op
Iteration  12: 844.122 ns/op
Iteration  13: 841.299 ns/op
Iteration  14: 839.766 ns/op
Iteration  15: 840.513 ns/op
Iteration  16: 840.271 ns/op
Iteration  17: 841.034 ns/op
Iteration  18: 840.714 ns/op
Iteration  19: 842.678 ns/op
Iteration  20: 840.996 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1294.827 ns/op
# Warmup Iteration   2: 1012.015 ns/op
# Warmup Iteration   3: 851.027 ns/op
# Warmup Iteration   4: 852.913 ns/op
# Warmup Iteration   5: 855.963 ns/op
Iteration   1: 860.168 ns/op
Iteration   2: 862.973 ns/op
Iteration   3: 846.631 ns/op
Iteration   4: 847.760 ns/op
Iteration   5: 849.809 ns/op
Iteration   6: 846.839 ns/op
Iteration   7: 846.234 ns/op
Iteration   8: 847.145 ns/op
Iteration   9: 845.328 ns/op
Iteration  10: 847.443 ns/op
Iteration  11: 846.887 ns/op
Iteration  12: 846.703 ns/op
Iteration  13: 849.269 ns/op
Iteration  14: 843.700 ns/op
Iteration  15: 843.816 ns/op
Iteration  16: 843.696 ns/op
Iteration  17: 844.135 ns/op
Iteration  18: 844.268 ns/op
Iteration  19: 844.190 ns/op
Iteration  20: 844.086 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1290.411 ns/op
# Warmup Iteration   2: 1001.488 ns/op
# Warmup Iteration   3: 849.085 ns/op
# Warmup Iteration   4: 850.199 ns/op
# Warmup Iteration   5: 853.295 ns/op
Iteration   1: 858.132 ns/op
Iteration   2: 863.879 ns/op
Iteration   3: 844.184 ns/op
Iteration   4: 843.876 ns/op
Iteration   5: 849.136 ns/op
Iteration   6: 844.510 ns/op
Iteration   7: 843.532 ns/op
Iteration   8: 844.402 ns/op
Iteration   9: 845.170 ns/op
Iteration  10: 839.929 ns/op
Iteration  11: 843.759 ns/op
Iteration  12: 844.418 ns/op
Iteration  13: 841.408 ns/op
Iteration  14: 841.712 ns/op
Iteration  15: 841.633 ns/op
Iteration  16: 845.962 ns/op
Iteration  17: 848.432 ns/op
Iteration  18: 841.886 ns/op
Iteration  19: 842.744 ns/op
Iteration  20: 842.971 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1226.503 ns/op
# Warmup Iteration   2: 908.552 ns/op
# Warmup Iteration   3: 781.790 ns/op
# Warmup Iteration   4: 783.860 ns/op
# Warmup Iteration   5: 792.400 ns/op
Iteration   1: 795.051 ns/op
Iteration   2: 787.350 ns/op
Iteration   3: 781.107 ns/op
Iteration   4: 777.712 ns/op
Iteration   5: 778.152 ns/op
Iteration   6: 777.938 ns/op
Iteration   7: 778.355 ns/op
Iteration   8: 778.284 ns/op
Iteration   9: 778.099 ns/op
Iteration  10: 778.964 ns/op
Iteration  11: 777.601 ns/op
Iteration  12: 776.670 ns/op
Iteration  13: 776.251 ns/op
Iteration  14: 776.404 ns/op
Iteration  15: 777.584 ns/op
Iteration  16: 777.455 ns/op
Iteration  17: 776.866 ns/op
Iteration  18: 777.358 ns/op
Iteration  19: 777.063 ns/op
Iteration  20: 777.944 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1294.907 ns/op
# Warmup Iteration   2: 1007.933 ns/op
# Warmup Iteration   3: 846.443 ns/op
# Warmup Iteration   4: 849.009 ns/op
# Warmup Iteration   5: 853.114 ns/op
Iteration   1: 856.246 ns/op
Iteration   2: 862.529 ns/op
Iteration   3: 843.799 ns/op
Iteration   4: 842.689 ns/op
Iteration   5: 842.736 ns/op
Iteration   6: 843.901 ns/op
Iteration   7: 842.514 ns/op
Iteration   8: 842.239 ns/op
Iteration   9: 848.895 ns/op
Iteration  10: 839.466 ns/op
Iteration  11: 843.747 ns/op
Iteration  12: 842.912 ns/op
Iteration  13: 839.863 ns/op
Iteration  14: 840.341 ns/op
Iteration  15: 840.808 ns/op
Iteration  16: 840.710 ns/op
Iteration  17: 840.673 ns/op
Iteration  18: 847.791 ns/op
Iteration  19: 841.097 ns/op
Iteration  20: 842.272 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  832.078 Â±(99.9%) 9.217 ns/op [Average]
  (min, avg, max) = (776.251, 832.078, 863.879), stdev = 27.177
  CI (99.9%): [822.861, 841.295] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	 	


   	   	   
	 

 
	 		 	

,			
  	
 
			 		

 
		

							  
	
		 
 	  
 	  
	
 		  avgt  100  807.981 Â± 5.658  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	 	


   	   	   
	 

 
	 		 	

,			
  	
 
			 		

 
		

							  
	
		 
 	  
 	  
	
 		  avgt  100  832.078 Â± 9.217  ns/op

Benchmark result is saved to split_precompiled_regex_201_199_Match.csv
