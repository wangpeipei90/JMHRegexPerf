# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = ]!@fD^r1LwUH2TJe}@4-kqPlrc^M!cC^=Od{2&vV=)xnf-K)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1006.151 ns/op
# Warmup Iteration   2: 770.351 ns/op
# Warmup Iteration   3: 664.603 ns/op
# Warmup Iteration   4: 666.515 ns/op
# Warmup Iteration   5: 671.552 ns/op
Iteration   1: 674.400 ns/op
Iteration   2: 671.775 ns/op
Iteration   3: 662.140 ns/op
Iteration   4: 661.411 ns/op
Iteration   5: 660.965 ns/op
Iteration   6: 661.520 ns/op
Iteration   7: 664.183 ns/op
Iteration   8: 661.807 ns/op
Iteration   9: 661.260 ns/op
Iteration  10: 661.515 ns/op
Iteration  11: 659.912 ns/op
Iteration  12: 660.130 ns/op
Iteration  13: 659.908 ns/op
Iteration  14: 659.732 ns/op
Iteration  15: 663.181 ns/op
Iteration  16: 660.064 ns/op
Iteration  17: 660.624 ns/op
Iteration  18: 659.967 ns/op
Iteration  19: 662.629 ns/op
Iteration  20: 659.978 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1009.038 ns/op
# Warmup Iteration   2: 771.202 ns/op
# Warmup Iteration   3: 666.196 ns/op
# Warmup Iteration   4: 668.191 ns/op
# Warmup Iteration   5: 674.744 ns/op
Iteration   1: 676.442 ns/op
Iteration   2: 671.097 ns/op
Iteration   3: 666.017 ns/op
Iteration   4: 662.924 ns/op
Iteration   5: 661.994 ns/op
Iteration   6: 661.987 ns/op
Iteration   7: 662.742 ns/op
Iteration   8: 666.000 ns/op
Iteration   9: 663.210 ns/op
Iteration  10: 663.286 ns/op
Iteration  11: 660.715 ns/op
Iteration  12: 660.628 ns/op
Iteration  13: 660.472 ns/op
Iteration  14: 660.593 ns/op
Iteration  15: 660.693 ns/op
Iteration  16: 660.814 ns/op
Iteration  17: 660.797 ns/op
Iteration  18: 660.864 ns/op
Iteration  19: 661.188 ns/op
Iteration  20: 661.196 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1005.975 ns/op
# Warmup Iteration   2: 766.153 ns/op
# Warmup Iteration   3: 662.644 ns/op
# Warmup Iteration   4: 664.728 ns/op
# Warmup Iteration   5: 674.858 ns/op
Iteration   1: 673.598 ns/op
Iteration   2: 664.976 ns/op
Iteration   3: 659.957 ns/op
Iteration   4: 662.718 ns/op
Iteration   5: 659.280 ns/op
Iteration   6: 659.374 ns/op
Iteration   7: 660.030 ns/op
Iteration   8: 659.945 ns/op
Iteration   9: 659.125 ns/op
Iteration  10: 659.593 ns/op
Iteration  11: 657.483 ns/op
Iteration  12: 657.319 ns/op
Iteration  13: 657.655 ns/op
Iteration  14: 657.363 ns/op
Iteration  15: 658.437 ns/op
Iteration  16: 661.571 ns/op
Iteration  17: 660.032 ns/op
Iteration  18: 657.680 ns/op
Iteration  19: 658.231 ns/op
Iteration  20: 657.797 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1010.345 ns/op
# Warmup Iteration   2: 769.625 ns/op
# Warmup Iteration   3: 662.001 ns/op
# Warmup Iteration   4: 667.756 ns/op
# Warmup Iteration   5: 670.328 ns/op
Iteration   1: 672.447 ns/op
Iteration   2: 668.045 ns/op
Iteration   3: 659.595 ns/op
Iteration   4: 659.215 ns/op
Iteration   5: 662.003 ns/op
Iteration   6: 659.409 ns/op
Iteration   7: 659.400 ns/op
Iteration   8: 659.096 ns/op
Iteration   9: 659.403 ns/op
Iteration  10: 659.165 ns/op
Iteration  11: 657.539 ns/op
Iteration  12: 657.931 ns/op
Iteration  13: 660.523 ns/op
Iteration  14: 657.283 ns/op
Iteration  15: 657.909 ns/op
Iteration  16: 662.428 ns/op
Iteration  17: 659.427 ns/op
Iteration  18: 659.020 ns/op
Iteration  19: 659.520 ns/op
Iteration  20: 659.209 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1002.457 ns/op
# Warmup Iteration   2: 766.939 ns/op
# Warmup Iteration   3: 664.526 ns/op
# Warmup Iteration   4: 666.529 ns/op
# Warmup Iteration   5: 673.942 ns/op
Iteration   1: 674.336 ns/op
Iteration   2: 669.476 ns/op
Iteration   3: 662.416 ns/op
Iteration   4: 660.890 ns/op
Iteration   5: 661.501 ns/op
Iteration   6: 665.263 ns/op
Iteration   7: 661.259 ns/op
Iteration   8: 661.267 ns/op
Iteration   9: 661.755 ns/op
Iteration  10: 661.538 ns/op
Iteration  11: 659.722 ns/op
Iteration  12: 659.557 ns/op
Iteration  13: 659.256 ns/op
Iteration  14: 659.380 ns/op
Iteration  15: 659.957 ns/op
Iteration  16: 659.752 ns/op
Iteration  17: 659.884 ns/op
Iteration  18: 660.196 ns/op
Iteration  19: 659.786 ns/op
Iteration  20: 660.132 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  661.588 ±(99.9%) 1.331 ns/op [Average]
  (min, avg, max) = (657.283, 661.588, 676.442), stdev = 3.926
  CI (99.9%): [660.257, 662.920] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = ]!@fD^r1LwUH2TJe}@4-kqPlrc^M!cC^=Od{2&vV=)xnf-K)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1009.327 ns/op
# Warmup Iteration   2: 772.254 ns/op
# Warmup Iteration   3: 670.359 ns/op
# Warmup Iteration   4: 672.064 ns/op
# Warmup Iteration   5: 674.817 ns/op
Iteration   1: 677.519 ns/op
Iteration   2: 682.050 ns/op
Iteration   3: 667.458 ns/op
Iteration   4: 666.619 ns/op
Iteration   5: 666.358 ns/op
Iteration   6: 666.375 ns/op
Iteration   7: 666.485 ns/op
Iteration   8: 666.096 ns/op
Iteration   9: 666.211 ns/op
Iteration  10: 667.478 ns/op
Iteration  11: 666.470 ns/op
Iteration  12: 664.721 ns/op
Iteration  13: 664.619 ns/op
Iteration  14: 664.563 ns/op
Iteration  15: 664.471 ns/op
Iteration  16: 664.459 ns/op
Iteration  17: 665.370 ns/op
Iteration  18: 664.539 ns/op
Iteration  19: 664.649 ns/op
Iteration  20: 664.948 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1009.670 ns/op
# Warmup Iteration   2: 776.940 ns/op
# Warmup Iteration   3: 662.768 ns/op
# Warmup Iteration   4: 664.850 ns/op
# Warmup Iteration   5: 669.247 ns/op
Iteration   1: 673.221 ns/op
Iteration   2: 671.847 ns/op
Iteration   3: 660.460 ns/op
Iteration   4: 659.578 ns/op
Iteration   5: 659.363 ns/op
Iteration   6: 662.162 ns/op
Iteration   7: 659.621 ns/op
Iteration   8: 659.739 ns/op
Iteration   9: 659.538 ns/op
Iteration  10: 659.082 ns/op
Iteration  11: 657.866 ns/op
Iteration  12: 657.857 ns/op
Iteration  13: 658.015 ns/op
Iteration  14: 658.038 ns/op
Iteration  15: 658.566 ns/op
Iteration  16: 658.519 ns/op
Iteration  17: 658.193 ns/op
Iteration  18: 658.261 ns/op
Iteration  19: 658.239 ns/op
Iteration  20: 659.019 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1008.938 ns/op
# Warmup Iteration   2: 774.490 ns/op
# Warmup Iteration   3: 670.485 ns/op
# Warmup Iteration   4: 673.476 ns/op
# Warmup Iteration   5: 675.468 ns/op
Iteration   1: 678.446 ns/op
Iteration   2: 683.440 ns/op
Iteration   3: 668.427 ns/op
Iteration   4: 667.549 ns/op
Iteration   5: 666.995 ns/op
Iteration   6: 667.313 ns/op
Iteration   7: 666.752 ns/op
Iteration   8: 667.305 ns/op
Iteration   9: 666.817 ns/op
Iteration  10: 667.532 ns/op
Iteration  11: 667.250 ns/op
Iteration  12: 665.388 ns/op
Iteration  13: 665.988 ns/op
Iteration  14: 665.762 ns/op
Iteration  15: 665.434 ns/op
Iteration  16: 665.830 ns/op
Iteration  17: 666.749 ns/op
Iteration  18: 666.582 ns/op
Iteration  19: 666.320 ns/op
Iteration  20: 666.244 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1012.638 ns/op
# Warmup Iteration   2: 770.130 ns/op
# Warmup Iteration   3: 665.175 ns/op
# Warmup Iteration   4: 667.359 ns/op
# Warmup Iteration   5: 670.451 ns/op
Iteration   1: 675.227 ns/op
Iteration   2: 675.780 ns/op
Iteration   3: 663.585 ns/op
Iteration   4: 662.059 ns/op
Iteration   5: 663.473 ns/op
Iteration   6: 666.930 ns/op
Iteration   7: 663.083 ns/op
Iteration   8: 662.670 ns/op
Iteration   9: 662.710 ns/op
Iteration  10: 661.802 ns/op
Iteration  11: 663.723 ns/op
Iteration  12: 667.028 ns/op
Iteration  13: 661.406 ns/op
Iteration  14: 661.061 ns/op
Iteration  15: 661.452 ns/op
Iteration  16: 661.911 ns/op
Iteration  17: 661.474 ns/op
Iteration  18: 661.292 ns/op
Iteration  19: 661.632 ns/op
Iteration  20: 661.607 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1012.729 ns/op
# Warmup Iteration   2: 771.938 ns/op
# Warmup Iteration   3: 667.806 ns/op
# Warmup Iteration   4: 670.169 ns/op
# Warmup Iteration   5: 674.338 ns/op
Iteration   1: 677.398 ns/op
Iteration   2: 677.803 ns/op
Iteration   3: 666.430 ns/op
Iteration   4: 664.902 ns/op
Iteration   5: 664.474 ns/op
Iteration   6: 664.749 ns/op
Iteration   7: 664.542 ns/op
Iteration   8: 665.092 ns/op
Iteration   9: 664.752 ns/op
Iteration  10: 664.925 ns/op
Iteration  11: 665.667 ns/op
Iteration  12: 662.919 ns/op
Iteration  13: 663.119 ns/op
Iteration  14: 662.916 ns/op
Iteration  15: 663.302 ns/op
Iteration  16: 663.073 ns/op
Iteration  17: 668.036 ns/op
Iteration  18: 665.936 ns/op
Iteration  19: 664.799 ns/op
Iteration  20: 665.298 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  665.108 ±(99.9%) 1.723 ns/op [Average]
  (min, avg, max) = (657.857, 665.108, 683.440), stdev = 5.080
  CI (99.9%): [663.385, 666.831] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                           (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  ]!@fD^r1LwUH2TJe}@4-kqPlrc^M!cC^=Od{2&vV=)xnf-K  avgt  100  661.588 ± 1.331  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  ]!@fD^r1LwUH2TJe}@4-kqPlrc^M!cC^=Od{2&vV=)xnf-K  avgt  100  665.108 ± 1.723  ns/op

Benchmark result is saved to split_precompiled_regex_31_50_NonMatch.csv
