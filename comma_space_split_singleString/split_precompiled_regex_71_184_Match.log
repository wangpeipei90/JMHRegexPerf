# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	
	

,	

		

 
 		
		

 					

  
	 
	
	 
	
 
	 
	 				 
		  
 

 
 		

 
 


 	    
 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1172.853 ns/op
# Warmup Iteration   2: 817.150 ns/op
# Warmup Iteration   3: 717.907 ns/op
# Warmup Iteration   4: 713.806 ns/op
# Warmup Iteration   5: 717.780 ns/op
Iteration   1: 721.596 ns/op
Iteration   2: 705.231 ns/op
Iteration   3: 705.361 ns/op
Iteration   4: 705.215 ns/op
Iteration   5: 704.991 ns/op
Iteration   6: 704.399 ns/op
Iteration   7: 704.954 ns/op
Iteration   8: 707.864 ns/op
Iteration   9: 704.861 ns/op
Iteration  10: 702.741 ns/op
Iteration  11: 702.532 ns/op
Iteration  12: 702.887 ns/op
Iteration  13: 702.404 ns/op
Iteration  14: 702.329 ns/op
Iteration  15: 702.354 ns/op
Iteration  16: 702.526 ns/op
Iteration  17: 703.765 ns/op
Iteration  18: 703.824 ns/op
Iteration  19: 702.432 ns/op
Iteration  20: 703.004 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1227.814 ns/op
# Warmup Iteration   2: 883.068 ns/op
# Warmup Iteration   3: 759.294 ns/op
# Warmup Iteration   4: 759.536 ns/op
# Warmup Iteration   5: 775.912 ns/op
Iteration   1: 775.655 ns/op
Iteration   2: 754.633 ns/op
Iteration   3: 753.492 ns/op
Iteration   4: 753.677 ns/op
Iteration   5: 753.499 ns/op
Iteration   6: 753.594 ns/op
Iteration   7: 753.555 ns/op
Iteration   8: 753.291 ns/op
Iteration   9: 753.324 ns/op
Iteration  10: 753.652 ns/op
Iteration  11: 751.773 ns/op
Iteration  12: 751.443 ns/op
Iteration  13: 751.727 ns/op
Iteration  14: 755.209 ns/op
Iteration  15: 752.519 ns/op
Iteration  16: 751.746 ns/op
Iteration  17: 752.124 ns/op
Iteration  18: 752.158 ns/op
Iteration  19: 752.383 ns/op
Iteration  20: 754.405 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1121.542 ns/op
# Warmup Iteration   2: 803.939 ns/op
# Warmup Iteration   3: 713.945 ns/op
# Warmup Iteration   4: 709.548 ns/op
# Warmup Iteration   5: 713.985 ns/op
Iteration   1: 718.417 ns/op
Iteration   2: 701.296 ns/op
Iteration   3: 701.528 ns/op
Iteration   4: 702.045 ns/op
Iteration   5: 702.165 ns/op
Iteration   6: 702.182 ns/op
Iteration   7: 704.977 ns/op
Iteration   8: 701.741 ns/op
Iteration   9: 701.462 ns/op
Iteration  10: 699.572 ns/op
Iteration  11: 699.691 ns/op
Iteration  12: 699.722 ns/op
Iteration  13: 699.560 ns/op
Iteration  14: 699.560 ns/op
Iteration  15: 699.390 ns/op
Iteration  16: 699.625 ns/op
Iteration  17: 702.476 ns/op
Iteration  18: 699.485 ns/op
Iteration  19: 699.473 ns/op
Iteration  20: 699.309 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1250.952 ns/op
# Warmup Iteration   2: 890.819 ns/op
# Warmup Iteration   3: 756.017 ns/op
# Warmup Iteration   4: 757.965 ns/op
# Warmup Iteration   5: 769.025 ns/op
Iteration   1: 772.097 ns/op
Iteration   2: 762.113 ns/op
Iteration   3: 752.725 ns/op
Iteration   4: 753.053 ns/op
Iteration   5: 752.923 ns/op
Iteration   6: 753.502 ns/op
Iteration   7: 752.122 ns/op
Iteration   8: 752.114 ns/op
Iteration   9: 751.969 ns/op
Iteration  10: 751.974 ns/op
Iteration  11: 750.386 ns/op
Iteration  12: 749.775 ns/op
Iteration  13: 749.893 ns/op
Iteration  14: 749.855 ns/op
Iteration  15: 749.789 ns/op
Iteration  16: 755.071 ns/op
Iteration  17: 749.939 ns/op
Iteration  18: 750.348 ns/op
Iteration  19: 749.859 ns/op
Iteration  20: 750.306 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1236.125 ns/op
# Warmup Iteration   2: 897.263 ns/op
# Warmup Iteration   3: 768.382 ns/op
# Warmup Iteration   4: 769.097 ns/op
# Warmup Iteration   5: 771.590 ns/op
Iteration   1: 776.275 ns/op
Iteration   2: 778.603 ns/op
Iteration   3: 764.405 ns/op
Iteration   4: 762.305 ns/op
Iteration   5: 762.443 ns/op
Iteration   6: 772.372 ns/op
Iteration   7: 762.420 ns/op
Iteration   8: 762.254 ns/op
Iteration   9: 762.055 ns/op
Iteration  10: 762.359 ns/op
Iteration  11: 758.841 ns/op
Iteration  12: 758.971 ns/op
Iteration  13: 760.276 ns/op
Iteration  14: 758.834 ns/op
Iteration  15: 758.916 ns/op
Iteration  16: 759.056 ns/op
Iteration  17: 759.375 ns/op
Iteration  18: 759.602 ns/op
Iteration  19: 759.205 ns/op
Iteration  20: 759.555 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  735.307 Â±(99.9%) 9.163 ns/op [Average]
  (min, avg, max) = (699.309, 735.307, 778.603), stdev = 27.017
  CI (99.9%): [726.144, 744.470] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
	
	

,	

		

 
 		
		

 					

  
	 
	
	 
	
 
	 
	 				 
		  
 

 
 		

 
 


 	    
 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1175.665 ns/op
# Warmup Iteration   2: 840.782 ns/op
# Warmup Iteration   3: 731.254 ns/op
# Warmup Iteration   4: 739.353 ns/op
# Warmup Iteration   5: 737.035 ns/op
Iteration   1: 741.525 ns/op
Iteration   2: 724.723 ns/op
Iteration   3: 724.081 ns/op
Iteration   4: 724.331 ns/op
Iteration   5: 725.058 ns/op
Iteration   6: 724.762 ns/op
Iteration   7: 724.411 ns/op
Iteration   8: 725.026 ns/op
Iteration   9: 728.411 ns/op
Iteration  10: 723.253 ns/op
Iteration  11: 723.170 ns/op
Iteration  12: 722.762 ns/op
Iteration  13: 722.628 ns/op
Iteration  14: 723.012 ns/op
Iteration  15: 722.428 ns/op
Iteration  16: 722.983 ns/op
Iteration  17: 723.041 ns/op
Iteration  18: 722.413 ns/op
Iteration  19: 724.399 ns/op
Iteration  20: 722.638 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1198.669 ns/op
# Warmup Iteration   2: 837.343 ns/op
# Warmup Iteration   3: 734.051 ns/op
# Warmup Iteration   4: 731.519 ns/op
# Warmup Iteration   5: 734.601 ns/op
Iteration   1: 739.630 ns/op
Iteration   2: 724.047 ns/op
Iteration   3: 722.643 ns/op
Iteration   4: 722.842 ns/op
Iteration   5: 723.050 ns/op
Iteration   6: 723.527 ns/op
Iteration   7: 725.067 ns/op
Iteration   8: 731.856 ns/op
Iteration   9: 722.521 ns/op
Iteration  10: 720.686 ns/op
Iteration  11: 720.495 ns/op
Iteration  12: 720.362 ns/op
Iteration  13: 720.531 ns/op
Iteration  14: 720.630 ns/op
Iteration  15: 720.445 ns/op
Iteration  16: 721.177 ns/op
Iteration  17: 721.484 ns/op
Iteration  18: 723.636 ns/op
Iteration  19: 722.898 ns/op
Iteration  20: 722.784 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1185.227 ns/op
# Warmup Iteration   2: 839.533 ns/op
# Warmup Iteration   3: 731.251 ns/op
# Warmup Iteration   4: 734.841 ns/op
# Warmup Iteration   5: 735.131 ns/op
Iteration   1: 740.059 ns/op
Iteration   2: 722.898 ns/op
Iteration   3: 722.490 ns/op
Iteration   4: 722.718 ns/op
Iteration   5: 722.986 ns/op
Iteration   6: 722.832 ns/op
Iteration   7: 722.792 ns/op
Iteration   8: 727.657 ns/op
Iteration   9: 722.461 ns/op
Iteration  10: 721.116 ns/op
Iteration  11: 720.681 ns/op
Iteration  12: 720.688 ns/op
Iteration  13: 721.041 ns/op
Iteration  14: 720.663 ns/op
Iteration  15: 720.780 ns/op
Iteration  16: 720.089 ns/op
Iteration  17: 721.759 ns/op
Iteration  18: 727.924 ns/op
Iteration  19: 725.544 ns/op
Iteration  20: 721.284 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1198.008 ns/op
# Warmup Iteration   2: 843.818 ns/op
# Warmup Iteration   3: 726.732 ns/op
# Warmup Iteration   4: 742.682 ns/op
# Warmup Iteration   5: 737.332 ns/op
Iteration   1: 737.249 ns/op
Iteration   2: 724.403 ns/op
Iteration   3: 723.108 ns/op
Iteration   4: 723.303 ns/op
Iteration   5: 723.254 ns/op
Iteration   6: 723.694 ns/op
Iteration   7: 723.154 ns/op
Iteration   8: 723.328 ns/op
Iteration   9: 726.836 ns/op
Iteration  10: 723.654 ns/op
Iteration  11: 720.985 ns/op
Iteration  12: 722.218 ns/op
Iteration  13: 722.599 ns/op
Iteration  14: 723.348 ns/op
Iteration  15: 723.538 ns/op
Iteration  16: 723.659 ns/op
Iteration  17: 728.168 ns/op
Iteration  18: 726.179 ns/op
Iteration  19: 725.094 ns/op
Iteration  20: 729.146 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1190.820 ns/op
# Warmup Iteration   2: 846.705 ns/op
# Warmup Iteration   3: 729.432 ns/op
# Warmup Iteration   4: 744.468 ns/op
# Warmup Iteration   5: 739.811 ns/op
Iteration   1: 743.635 ns/op
Iteration   2: 728.327 ns/op
Iteration   3: 725.896 ns/op
Iteration   4: 726.897 ns/op
Iteration   5: 727.146 ns/op
Iteration   6: 726.727 ns/op
Iteration   7: 726.815 ns/op
Iteration   8: 725.915 ns/op
Iteration   9: 730.131 ns/op
Iteration  10: 725.425 ns/op
Iteration  11: 724.106 ns/op
Iteration  12: 725.379 ns/op
Iteration  13: 730.226 ns/op
Iteration  14: 726.041 ns/op
Iteration  15: 725.214 ns/op
Iteration  16: 724.867 ns/op
Iteration  17: 726.211 ns/op
Iteration  18: 726.605 ns/op
Iteration  19: 724.381 ns/op
Iteration  20: 726.353 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  724.770 Â±(99.9%) 1.477 ns/op [Average]
  (min, avg, max) = (720.089, 724.770, 743.635), stdev = 4.356
  CI (99.9%): [723.293, 726.248] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
	
	

,	

		

 
 		
		

 					

  
	 
	
	 
	
 
	 
	 				 
		  
 

 
 		

 
 


 	    
 	  avgt  100  735.307 Â± 9.163  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
	
	

,	

		

 
 		
		

 					

  
	 
	
	 
	
 
	 
	 				 
		  
 

 
 		

 
 


 	    
 	  avgt  100  724.770 Â± 1.477  ns/op

Benchmark result is saved to split_precompiled_regex_71_184_Match.csv
