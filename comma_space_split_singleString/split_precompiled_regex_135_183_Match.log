# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   
	  


	
 


 	
	

	

	

	 		
 
	 
	, 
  
 		
		 	
		
  
 


 	
 
	 	 			



	
  		

	   
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1216.179 ns/op
# Warmup Iteration   2: 864.367 ns/op
# Warmup Iteration   3: 742.993 ns/op
# Warmup Iteration   4: 758.911 ns/op
# Warmup Iteration   5: 758.128 ns/op
Iteration   1: 756.211 ns/op
Iteration   2: 739.784 ns/op
Iteration   3: 738.627 ns/op
Iteration   4: 739.078 ns/op
Iteration   5: 740.304 ns/op
Iteration   6: 739.153 ns/op
Iteration   7: 739.493 ns/op
Iteration   8: 739.008 ns/op
Iteration   9: 738.474 ns/op
Iteration  10: 739.183 ns/op
Iteration  11: 736.715 ns/op
Iteration  12: 736.687 ns/op
Iteration  13: 736.511 ns/op
Iteration  14: 736.498 ns/op
Iteration  15: 736.658 ns/op
Iteration  16: 736.830 ns/op
Iteration  17: 737.076 ns/op
Iteration  18: 736.880 ns/op
Iteration  19: 737.257 ns/op
Iteration  20: 737.101 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1254.731 ns/op
# Warmup Iteration   2: 928.687 ns/op
# Warmup Iteration   3: 789.531 ns/op
# Warmup Iteration   4: 791.940 ns/op
# Warmup Iteration   5: 795.112 ns/op
Iteration   1: 798.645 ns/op
Iteration   2: 803.571 ns/op
Iteration   3: 786.381 ns/op
Iteration   4: 785.927 ns/op
Iteration   5: 785.478 ns/op
Iteration   6: 785.688 ns/op
Iteration   7: 785.231 ns/op
Iteration   8: 785.786 ns/op
Iteration   9: 785.990 ns/op
Iteration  10: 785.843 ns/op
Iteration  11: 785.640 ns/op
Iteration  12: 783.253 ns/op
Iteration  13: 782.919 ns/op
Iteration  14: 782.724 ns/op
Iteration  15: 782.730 ns/op
Iteration  16: 782.969 ns/op
Iteration  17: 783.540 ns/op
Iteration  18: 784.475 ns/op
Iteration  19: 785.152 ns/op
Iteration  20: 785.508 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1253.498 ns/op
# Warmup Iteration   2: 933.063 ns/op
# Warmup Iteration   3: 791.845 ns/op
# Warmup Iteration   4: 794.603 ns/op
# Warmup Iteration   5: 797.603 ns/op
Iteration   1: 800.775 ns/op
Iteration   2: 804.790 ns/op
Iteration   3: 787.388 ns/op
Iteration   4: 787.266 ns/op
Iteration   5: 788.025 ns/op
Iteration   6: 787.254 ns/op
Iteration   7: 787.318 ns/op
Iteration   8: 789.860 ns/op
Iteration   9: 793.205 ns/op
Iteration  10: 787.958 ns/op
Iteration  11: 789.934 ns/op
Iteration  12: 787.840 ns/op
Iteration  13: 786.242 ns/op
Iteration  14: 786.124 ns/op
Iteration  15: 788.360 ns/op
Iteration  16: 787.055 ns/op
Iteration  17: 787.820 ns/op
Iteration  18: 788.063 ns/op
Iteration  19: 786.479 ns/op
Iteration  20: 789.302 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1135.517 ns/op
# Warmup Iteration   2: 821.779 ns/op
# Warmup Iteration   3: 721.726 ns/op
# Warmup Iteration   4: 727.640 ns/op
# Warmup Iteration   5: 725.998 ns/op
Iteration   1: 730.647 ns/op
Iteration   2: 713.690 ns/op
Iteration   3: 713.506 ns/op
Iteration   4: 713.831 ns/op
Iteration   5: 713.985 ns/op
Iteration   6: 714.452 ns/op
Iteration   7: 713.811 ns/op
Iteration   8: 713.718 ns/op
Iteration   9: 714.186 ns/op
Iteration  10: 715.185 ns/op
Iteration  11: 711.907 ns/op
Iteration  12: 711.890 ns/op
Iteration  13: 711.766 ns/op
Iteration  14: 711.938 ns/op
Iteration  15: 713.301 ns/op
Iteration  16: 713.060 ns/op
Iteration  17: 713.127 ns/op
Iteration  18: 712.287 ns/op
Iteration  19: 713.005 ns/op
Iteration  20: 714.019 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1134.704 ns/op
# Warmup Iteration   2: 820.123 ns/op
# Warmup Iteration   3: 723.319 ns/op
# Warmup Iteration   4: 728.172 ns/op
# Warmup Iteration   5: 727.738 ns/op
Iteration   1: 732.448 ns/op
Iteration   2: 715.793 ns/op
Iteration   3: 714.693 ns/op
Iteration   4: 715.197 ns/op
Iteration   5: 715.218 ns/op
Iteration   6: 715.090 ns/op
Iteration   7: 714.660 ns/op
Iteration   8: 714.981 ns/op
Iteration   9: 718.971 ns/op
Iteration  10: 718.724 ns/op
Iteration  11: 713.613 ns/op
Iteration  12: 713.589 ns/op
Iteration  13: 715.551 ns/op
Iteration  14: 714.268 ns/op
Iteration  15: 713.996 ns/op
Iteration  16: 714.504 ns/op
Iteration  17: 714.194 ns/op
Iteration  18: 718.616 ns/op
Iteration  19: 715.124 ns/op
Iteration  20: 714.789 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  749.034 Â±(99.9%) 11.336 ns/op [Average]
  (min, avg, max) = (711.766, 749.034, 804.790), stdev = 33.425
  CI (99.9%): [737.698, 760.370] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   
	  


	
 


 	
	

	

	

	 		
 
	 
	, 
  
 		
		 	
		
  
 


 	
 
	 	 			



	
  		

	   
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1264.224 ns/op
# Warmup Iteration   2: 957.857 ns/op
# Warmup Iteration   3: 816.565 ns/op
# Warmup Iteration   4: 818.898 ns/op
# Warmup Iteration   5: 822.117 ns/op
Iteration   1: 827.348 ns/op
Iteration   2: 832.247 ns/op
Iteration   3: 813.783 ns/op
Iteration   4: 813.795 ns/op
Iteration   5: 812.741 ns/op
Iteration   6: 813.149 ns/op
Iteration   7: 817.186 ns/op
Iteration   8: 812.921 ns/op
Iteration   9: 813.161 ns/op
Iteration  10: 813.346 ns/op
Iteration  11: 815.302 ns/op
Iteration  12: 818.332 ns/op
Iteration  13: 811.805 ns/op
Iteration  14: 811.970 ns/op
Iteration  15: 811.644 ns/op
Iteration  16: 811.273 ns/op
Iteration  17: 813.016 ns/op
Iteration  18: 813.206 ns/op
Iteration  19: 812.231 ns/op
Iteration  20: 813.796 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1261.123 ns/op
# Warmup Iteration   2: 948.913 ns/op
# Warmup Iteration   3: 807.399 ns/op
# Warmup Iteration   4: 809.487 ns/op
# Warmup Iteration   5: 812.525 ns/op
Iteration   1: 816.045 ns/op
Iteration   2: 822.169 ns/op
Iteration   3: 803.447 ns/op
Iteration   4: 803.490 ns/op
Iteration   5: 802.877 ns/op
Iteration   6: 803.397 ns/op
Iteration   7: 803.183 ns/op
Iteration   8: 803.232 ns/op
Iteration   9: 803.319 ns/op
Iteration  10: 803.563 ns/op
Iteration  11: 807.020 ns/op
Iteration  12: 803.214 ns/op
Iteration  13: 802.639 ns/op
Iteration  14: 801.583 ns/op
Iteration  15: 802.082 ns/op
Iteration  16: 801.446 ns/op
Iteration  17: 801.610 ns/op
Iteration  18: 802.052 ns/op
Iteration  19: 801.907 ns/op
Iteration  20: 803.312 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1206.763 ns/op
# Warmup Iteration   2: 874.141 ns/op
# Warmup Iteration   3: 771.835 ns/op
# Warmup Iteration   4: 782.463 ns/op
# Warmup Iteration   5: 778.435 ns/op
Iteration   1: 783.180 ns/op
Iteration   2: 784.797 ns/op
Iteration   3: 766.593 ns/op
Iteration   4: 766.252 ns/op
Iteration   5: 766.225 ns/op
Iteration   6: 766.147 ns/op
Iteration   7: 766.357 ns/op
Iteration   8: 766.220 ns/op
Iteration   9: 766.225 ns/op
Iteration  10: 767.438 ns/op
Iteration  11: 770.862 ns/op
Iteration  12: 765.072 ns/op
Iteration  13: 764.600 ns/op
Iteration  14: 764.501 ns/op
Iteration  15: 764.874 ns/op
Iteration  16: 764.917 ns/op
Iteration  17: 766.132 ns/op
Iteration  18: 766.362 ns/op
Iteration  19: 766.033 ns/op
Iteration  20: 766.646 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1200.316 ns/op
# Warmup Iteration   2: 862.753 ns/op
# Warmup Iteration   3: 747.821 ns/op
# Warmup Iteration   4: 760.925 ns/op
# Warmup Iteration   5: 755.016 ns/op
Iteration   1: 759.912 ns/op
Iteration   2: 743.421 ns/op
Iteration   3: 743.287 ns/op
Iteration   4: 743.119 ns/op
Iteration   5: 743.096 ns/op
Iteration   6: 743.306 ns/op
Iteration   7: 742.935 ns/op
Iteration   8: 742.721 ns/op
Iteration   9: 743.512 ns/op
Iteration  10: 744.519 ns/op
Iteration  11: 741.747 ns/op
Iteration  12: 741.641 ns/op
Iteration  13: 741.734 ns/op
Iteration  14: 743.162 ns/op
Iteration  15: 741.201 ns/op
Iteration  16: 741.664 ns/op
Iteration  17: 741.887 ns/op
Iteration  18: 742.396 ns/op
Iteration  19: 742.287 ns/op
Iteration  20: 742.463 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1267.139 ns/op
# Warmup Iteration   2: 939.136 ns/op
# Warmup Iteration   3: 798.635 ns/op
# Warmup Iteration   4: 800.526 ns/op
# Warmup Iteration   5: 803.580 ns/op
Iteration   1: 807.664 ns/op
Iteration   2: 813.445 ns/op
Iteration   3: 794.760 ns/op
Iteration   4: 793.879 ns/op
Iteration   5: 793.836 ns/op
Iteration   6: 798.671 ns/op
Iteration   7: 796.275 ns/op
Iteration   8: 795.202 ns/op
Iteration   9: 794.657 ns/op
Iteration  10: 795.061 ns/op
Iteration  11: 798.946 ns/op
Iteration  12: 803.336 ns/op
Iteration  13: 794.044 ns/op
Iteration  14: 793.912 ns/op
Iteration  15: 794.439 ns/op
Iteration  16: 794.837 ns/op
Iteration  17: 794.404 ns/op
Iteration  18: 795.063 ns/op
Iteration  19: 794.610 ns/op
Iteration  20: 795.175 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  785.655 Â±(99.9%) 9.109 ns/op [Average]
  (min, avg, max) = (741.201, 785.655, 832.247), stdev = 26.859
  CI (99.9%): [776.546, 794.764] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    
	  


	
 


 	
	

	

	

	 		
 
	 
	, 
  
 		
		 	
		
  
 


 	
 
	 	 			



	
  		

	   
  avgt  100  749.034 Â± 11.336  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    
	  


	
 


 	
	

	

	

	 		
 
	 
	, 
  
 		
		 	
		
  
 


 	
 
	 	 			



	
  		

	   
  avgt  100  785.655 Â±  9.109  ns/op

Benchmark result is saved to split_precompiled_regex_135_183_Match.csv
