# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	  		
		 	 	 	 
 

		 

		
	 
,
 
 		 		

	
  

 	 
	
	 	 
	  
  
 


	
		
   	  


 	
  	  		 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1228.619 ns/op
# Warmup Iteration   2: 894.185 ns/op
# Warmup Iteration   3: 764.526 ns/op
# Warmup Iteration   4: 767.064 ns/op
# Warmup Iteration   5: 769.949 ns/op
Iteration   1: 775.841 ns/op
Iteration   2: 776.397 ns/op
Iteration   3: 763.758 ns/op
Iteration   4: 762.493 ns/op
Iteration   5: 761.168 ns/op
Iteration   6: 763.670 ns/op
Iteration   7: 761.458 ns/op
Iteration   8: 760.977 ns/op
Iteration   9: 760.750 ns/op
Iteration  10: 761.083 ns/op
Iteration  11: 759.047 ns/op
Iteration  12: 758.869 ns/op
Iteration  13: 759.432 ns/op
Iteration  14: 758.884 ns/op
Iteration  15: 758.929 ns/op
Iteration  16: 759.185 ns/op
Iteration  17: 759.166 ns/op
Iteration  18: 759.285 ns/op
Iteration  19: 759.600 ns/op
Iteration  20: 759.428 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1247.779 ns/op
# Warmup Iteration   2: 918.815 ns/op
# Warmup Iteration   3: 785.022 ns/op
# Warmup Iteration   4: 788.047 ns/op
# Warmup Iteration   5: 791.096 ns/op
Iteration   1: 795.135 ns/op
Iteration   2: 799.831 ns/op
Iteration   3: 783.908 ns/op
Iteration   4: 782.390 ns/op
Iteration   5: 781.933 ns/op
Iteration   6: 782.137 ns/op
Iteration   7: 781.617 ns/op
Iteration   8: 787.477 ns/op
Iteration   9: 782.179 ns/op
Iteration  10: 783.971 ns/op
Iteration  11: 783.880 ns/op
Iteration  12: 782.724 ns/op
Iteration  13: 781.075 ns/op
Iteration  14: 781.360 ns/op
Iteration  15: 780.752 ns/op
Iteration  16: 780.628 ns/op
Iteration  17: 780.813 ns/op
Iteration  18: 781.308 ns/op
Iteration  19: 780.407 ns/op
Iteration  20: 781.551 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1234.209 ns/op
# Warmup Iteration   2: 902.504 ns/op
# Warmup Iteration   3: 771.587 ns/op
# Warmup Iteration   4: 773.298 ns/op
# Warmup Iteration   5: 776.706 ns/op
Iteration   1: 780.315 ns/op
Iteration   2: 785.639 ns/op
Iteration   3: 768.341 ns/op
Iteration   4: 767.539 ns/op
Iteration   5: 766.963 ns/op
Iteration   6: 767.786 ns/op
Iteration   7: 768.008 ns/op
Iteration   8: 767.349 ns/op
Iteration   9: 767.763 ns/op
Iteration  10: 767.746 ns/op
Iteration  11: 767.574 ns/op
Iteration  12: 765.096 ns/op
Iteration  13: 773.897 ns/op
Iteration  14: 765.062 ns/op
Iteration  15: 766.342 ns/op
Iteration  16: 764.729 ns/op
Iteration  17: 765.497 ns/op
Iteration  18: 765.032 ns/op
Iteration  19: 765.253 ns/op
Iteration  20: 765.102 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1211.424 ns/op
# Warmup Iteration   2: 859.238 ns/op
# Warmup Iteration   3: 735.332 ns/op
# Warmup Iteration   4: 751.354 ns/op
# Warmup Iteration   5: 743.722 ns/op
Iteration   1: 749.212 ns/op
Iteration   2: 731.981 ns/op
Iteration   3: 731.905 ns/op
Iteration   4: 732.013 ns/op
Iteration   5: 732.054 ns/op
Iteration   6: 731.702 ns/op
Iteration   7: 732.324 ns/op
Iteration   8: 732.144 ns/op
Iteration   9: 731.870 ns/op
Iteration  10: 731.774 ns/op
Iteration  11: 730.290 ns/op
Iteration  12: 729.885 ns/op
Iteration  13: 731.014 ns/op
Iteration  14: 729.875 ns/op
Iteration  15: 729.692 ns/op
Iteration  16: 729.578 ns/op
Iteration  17: 731.484 ns/op
Iteration  18: 735.754 ns/op
Iteration  19: 730.689 ns/op
Iteration  20: 730.277 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1258.002 ns/op
# Warmup Iteration   2: 938.439 ns/op
# Warmup Iteration   3: 781.480 ns/op
# Warmup Iteration   4: 784.096 ns/op
# Warmup Iteration   5: 786.933 ns/op
Iteration   1: 790.262 ns/op
Iteration   2: 795.951 ns/op
Iteration   3: 778.301 ns/op
Iteration   4: 776.993 ns/op
Iteration   5: 777.083 ns/op
Iteration   6: 777.663 ns/op
Iteration   7: 778.008 ns/op
Iteration   8: 777.472 ns/op
Iteration   9: 784.065 ns/op
Iteration  10: 779.035 ns/op
Iteration  11: 778.985 ns/op
Iteration  12: 784.012 ns/op
Iteration  13: 775.405 ns/op
Iteration  14: 775.723 ns/op
Iteration  15: 775.895 ns/op
Iteration  16: 776.201 ns/op
Iteration  17: 775.898 ns/op
Iteration  18: 776.544 ns/op
Iteration  19: 776.633 ns/op
Iteration  20: 775.227 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  765.164 Â±(99.9%) 6.411 ns/op [Average]
  (min, avg, max) = (729.578, 765.164, 799.831), stdev = 18.902
  CI (99.9%): [758.753, 771.575] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	  		
		 	 	 	 
 

		 

		
	 
,
 
 		 		

	
  

 	 
	
	 	 
	  
  
 


	
		
   	  


 	
  	  		 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1266.545 ns/op
# Warmup Iteration   2: 964.851 ns/op
# Warmup Iteration   3: 815.519 ns/op
# Warmup Iteration   4: 817.509 ns/op
# Warmup Iteration   5: 820.802 ns/op
Iteration   1: 824.538 ns/op
Iteration   2: 829.791 ns/op
Iteration   3: 812.962 ns/op
Iteration   4: 810.802 ns/op
Iteration   5: 811.714 ns/op
Iteration   6: 811.473 ns/op
Iteration   7: 811.164 ns/op
Iteration   8: 811.604 ns/op
Iteration   9: 811.422 ns/op
Iteration  10: 810.883 ns/op
Iteration  11: 813.002 ns/op
Iteration  12: 809.447 ns/op
Iteration  13: 811.012 ns/op
Iteration  14: 810.118 ns/op
Iteration  15: 809.262 ns/op
Iteration  16: 808.910 ns/op
Iteration  17: 809.154 ns/op
Iteration  18: 808.752 ns/op
Iteration  19: 809.138 ns/op
Iteration  20: 809.778 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1235.859 ns/op
# Warmup Iteration   2: 919.201 ns/op
# Warmup Iteration   3: 782.648 ns/op
# Warmup Iteration   4: 785.309 ns/op
# Warmup Iteration   5: 789.141 ns/op
Iteration   1: 795.969 ns/op
Iteration   2: 792.082 ns/op
Iteration   3: 779.980 ns/op
Iteration   4: 779.573 ns/op
Iteration   5: 782.101 ns/op
Iteration   6: 779.377 ns/op
Iteration   7: 780.078 ns/op
Iteration   8: 779.518 ns/op
Iteration   9: 779.474 ns/op
Iteration  10: 779.733 ns/op
Iteration  11: 781.227 ns/op
Iteration  12: 778.077 ns/op
Iteration  13: 778.089 ns/op
Iteration  14: 784.480 ns/op
Iteration  15: 778.921 ns/op
Iteration  16: 777.813 ns/op
Iteration  17: 778.602 ns/op
Iteration  18: 777.775 ns/op
Iteration  19: 779.432 ns/op
Iteration  20: 778.127 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1213.974 ns/op
# Warmup Iteration   2: 910.317 ns/op
# Warmup Iteration   3: 782.982 ns/op
# Warmup Iteration   4: 787.643 ns/op
# Warmup Iteration   5: 788.797 ns/op
Iteration   1: 795.258 ns/op
Iteration   2: 794.013 ns/op
Iteration   3: 779.440 ns/op
Iteration   4: 777.400 ns/op
Iteration   5: 782.660 ns/op
Iteration   6: 781.204 ns/op
Iteration   7: 779.254 ns/op
Iteration   8: 777.984 ns/op
Iteration   9: 778.511 ns/op
Iteration  10: 778.143 ns/op
Iteration  11: 778.376 ns/op
Iteration  12: 776.007 ns/op
Iteration  13: 781.155 ns/op
Iteration  14: 777.728 ns/op
Iteration  15: 775.939 ns/op
Iteration  16: 778.196 ns/op
Iteration  17: 777.677 ns/op
Iteration  18: 777.263 ns/op
Iteration  19: 777.855 ns/op
Iteration  20: 777.751 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1232.784 ns/op
# Warmup Iteration   2: 918.881 ns/op
# Warmup Iteration   3: 786.638 ns/op
# Warmup Iteration   4: 784.746 ns/op
# Warmup Iteration   5: 788.516 ns/op
Iteration   1: 791.836 ns/op
Iteration   2: 796.700 ns/op
Iteration   3: 779.628 ns/op
Iteration   4: 779.274 ns/op
Iteration   5: 779.503 ns/op
Iteration   6: 783.117 ns/op
Iteration   7: 779.491 ns/op
Iteration   8: 783.334 ns/op
Iteration   9: 781.783 ns/op
Iteration  10: 780.876 ns/op
Iteration  11: 778.581 ns/op
Iteration  12: 777.641 ns/op
Iteration  13: 777.899 ns/op
Iteration  14: 777.635 ns/op
Iteration  15: 777.239 ns/op
Iteration  16: 778.049 ns/op
Iteration  17: 777.570 ns/op
Iteration  18: 778.202 ns/op
Iteration  19: 777.852 ns/op
Iteration  20: 777.956 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1230.202 ns/op
# Warmup Iteration   2: 915.776 ns/op
# Warmup Iteration   3: 786.296 ns/op
# Warmup Iteration   4: 789.418 ns/op
# Warmup Iteration   5: 791.924 ns/op
Iteration   1: 795.845 ns/op
Iteration   2: 800.453 ns/op
Iteration   3: 781.598 ns/op
Iteration   4: 782.248 ns/op
Iteration   5: 781.301 ns/op
Iteration   6: 782.057 ns/op
Iteration   7: 785.740 ns/op
Iteration   8: 781.290 ns/op
Iteration   9: 796.686 ns/op
Iteration  10: 785.417 ns/op
Iteration  11: 780.759 ns/op
Iteration  12: 779.704 ns/op
Iteration  13: 782.697 ns/op
Iteration  14: 782.341 ns/op
Iteration  15: 783.089 ns/op
Iteration  16: 785.117 ns/op
Iteration  17: 780.870 ns/op
Iteration  18: 780.016 ns/op
Iteration  19: 779.951 ns/op
Iteration  20: 779.948 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  787.685 Â±(99.9%) 4.570 ns/op [Average]
  (min, avg, max) = (775.939, 787.685, 829.791), stdev = 13.473
  CI (99.9%): [783.115, 792.254] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                     (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 	  		
		 	 	 	 
 

		 

		
	 
,
 
 		 		

	
  

 	 
	
	 	 
	  
  
 


	
		
   	  


 	
  	  		   avgt  100  765.164 Â± 6.411  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 	  		
		 	 	 	 
 

		 

		
	 
,
 
 		 		

	
  

 	 
	
	 	 
	  
  
 


	
		
   	  


 	
  	  		   avgt  100  787.685 Â± 4.570  ns/op

Benchmark result is saved to split_precompiled_regex_101_204_Match.csv
