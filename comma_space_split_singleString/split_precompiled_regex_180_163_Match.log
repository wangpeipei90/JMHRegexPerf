# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 

	

	 ,
		  		       				 
	



 

	


	
 
	

	
 
	
			

				

 	

	
			   	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1091.314 ns/op
# Warmup Iteration   2: 761.423 ns/op
# Warmup Iteration   3: 684.605 ns/op
# Warmup Iteration   4: 679.367 ns/op
# Warmup Iteration   5: 683.509 ns/op
Iteration   1: 687.714 ns/op
Iteration   2: 672.059 ns/op
Iteration   3: 672.728 ns/op
Iteration   4: 674.908 ns/op
Iteration   5: 672.174 ns/op
Iteration   6: 672.002 ns/op
Iteration   7: 672.032 ns/op
Iteration   8: 672.825 ns/op
Iteration   9: 672.262 ns/op
Iteration  10: 671.281 ns/op
Iteration  11: 670.352 ns/op
Iteration  12: 670.318 ns/op
Iteration  13: 670.243 ns/op
Iteration  14: 670.436 ns/op
Iteration  15: 670.706 ns/op
Iteration  16: 670.869 ns/op
Iteration  17: 673.096 ns/op
Iteration  18: 671.438 ns/op
Iteration  19: 670.875 ns/op
Iteration  20: 676.707 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1167.665 ns/op
# Warmup Iteration   2: 875.826 ns/op
# Warmup Iteration   3: 753.364 ns/op
# Warmup Iteration   4: 759.545 ns/op
# Warmup Iteration   5: 777.768 ns/op
Iteration   1: 767.249 ns/op
Iteration   2: 749.791 ns/op
Iteration   3: 749.380 ns/op
Iteration   4: 749.904 ns/op
Iteration   5: 748.927 ns/op
Iteration   6: 749.462 ns/op
Iteration   7: 748.607 ns/op
Iteration   8: 749.365 ns/op
Iteration   9: 749.313 ns/op
Iteration  10: 748.978 ns/op
Iteration  11: 751.025 ns/op
Iteration  12: 746.834 ns/op
Iteration  13: 746.719 ns/op
Iteration  14: 747.446 ns/op
Iteration  15: 746.872 ns/op
Iteration  16: 749.544 ns/op
Iteration  17: 746.849 ns/op
Iteration  18: 747.204 ns/op
Iteration  19: 755.534 ns/op
Iteration  20: 755.474 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1218.661 ns/op
# Warmup Iteration   2: 885.065 ns/op
# Warmup Iteration   3: 757.055 ns/op
# Warmup Iteration   4: 759.428 ns/op
# Warmup Iteration   5: 777.601 ns/op
Iteration   1: 772.569 ns/op
Iteration   2: 758.819 ns/op
Iteration   3: 753.858 ns/op
Iteration   4: 752.444 ns/op
Iteration   5: 753.497 ns/op
Iteration   6: 753.242 ns/op
Iteration   7: 753.426 ns/op
Iteration   8: 752.807 ns/op
Iteration   9: 754.067 ns/op
Iteration  10: 754.381 ns/op
Iteration  11: 751.118 ns/op
Iteration  12: 750.914 ns/op
Iteration  13: 751.107 ns/op
Iteration  14: 751.866 ns/op
Iteration  15: 751.105 ns/op
Iteration  16: 751.399 ns/op
Iteration  17: 751.017 ns/op
Iteration  18: 753.225 ns/op
Iteration  19: 751.387 ns/op
Iteration  20: 754.649 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1176.477 ns/op
# Warmup Iteration   2: 877.081 ns/op
# Warmup Iteration   3: 755.475 ns/op
# Warmup Iteration   4: 758.119 ns/op
# Warmup Iteration   5: 779.736 ns/op
Iteration   1: 768.857 ns/op
Iteration   2: 752.366 ns/op
Iteration   3: 752.415 ns/op
Iteration   4: 757.568 ns/op
Iteration   5: 752.684 ns/op
Iteration   6: 751.504 ns/op
Iteration   7: 751.499 ns/op
Iteration   8: 751.474 ns/op
Iteration   9: 751.507 ns/op
Iteration  10: 751.441 ns/op
Iteration  11: 748.773 ns/op
Iteration  12: 748.400 ns/op
Iteration  13: 747.860 ns/op
Iteration  14: 750.046 ns/op
Iteration  15: 748.382 ns/op
Iteration  16: 748.773 ns/op
Iteration  17: 748.963 ns/op
Iteration  18: 748.582 ns/op
Iteration  19: 748.440 ns/op
Iteration  20: 749.136 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1169.282 ns/op
# Warmup Iteration   2: 870.740 ns/op
# Warmup Iteration   3: 753.758 ns/op
# Warmup Iteration   4: 759.067 ns/op
# Warmup Iteration   5: 772.741 ns/op
Iteration   1: 767.679 ns/op
Iteration   2: 750.723 ns/op
Iteration   3: 750.435 ns/op
Iteration   4: 750.099 ns/op
Iteration   5: 750.386 ns/op
Iteration   6: 750.190 ns/op
Iteration   7: 751.635 ns/op
Iteration   8: 750.740 ns/op
Iteration   9: 750.326 ns/op
Iteration  10: 750.676 ns/op
Iteration  11: 749.364 ns/op
Iteration  12: 753.630 ns/op
Iteration  13: 747.758 ns/op
Iteration  14: 747.519 ns/op
Iteration  15: 747.623 ns/op
Iteration  16: 748.646 ns/op
Iteration  17: 748.198 ns/op
Iteration  18: 749.077 ns/op
Iteration  19: 748.662 ns/op
Iteration  20: 748.654 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  735.771 Â±(99.9%) 10.852 ns/op [Average]
  (min, avg, max) = (670.243, 735.771, 772.569), stdev = 31.997
  CI (99.9%): [724.919, 746.623] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

 

	

	 ,
		  		       				 
	



 

	


	
 
	

	
 
	
			

				

 	

	
			   	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1205.159 ns/op
# Warmup Iteration   2: 903.849 ns/op
# Warmup Iteration   3: 785.339 ns/op
# Warmup Iteration   4: 787.107 ns/op
# Warmup Iteration   5: 795.855 ns/op
Iteration   1: 797.576 ns/op
Iteration   2: 792.759 ns/op
Iteration   3: 781.426 ns/op
Iteration   4: 780.153 ns/op
Iteration   5: 788.115 ns/op
Iteration   6: 781.974 ns/op
Iteration   7: 782.138 ns/op
Iteration   8: 780.675 ns/op
Iteration   9: 780.863 ns/op
Iteration  10: 780.850 ns/op
Iteration  11: 778.861 ns/op
Iteration  12: 778.964 ns/op
Iteration  13: 786.168 ns/op
Iteration  14: 782.370 ns/op
Iteration  15: 780.104 ns/op
Iteration  16: 780.215 ns/op
Iteration  17: 779.151 ns/op
Iteration  18: 779.184 ns/op
Iteration  19: 782.321 ns/op
Iteration  20: 784.339 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1131.928 ns/op
# Warmup Iteration   2: 785.433 ns/op
# Warmup Iteration   3: 700.595 ns/op
# Warmup Iteration   4: 696.010 ns/op
# Warmup Iteration   5: 700.344 ns/op
Iteration   1: 704.785 ns/op
Iteration   2: 688.061 ns/op
Iteration   3: 687.675 ns/op
Iteration   4: 692.400 ns/op
Iteration   5: 687.620 ns/op
Iteration   6: 687.643 ns/op
Iteration   7: 687.617 ns/op
Iteration   8: 687.839 ns/op
Iteration   9: 688.063 ns/op
Iteration  10: 690.565 ns/op
Iteration  11: 686.995 ns/op
Iteration  12: 686.169 ns/op
Iteration  13: 685.862 ns/op
Iteration  14: 686.315 ns/op
Iteration  15: 685.824 ns/op
Iteration  16: 686.249 ns/op
Iteration  17: 687.295 ns/op
Iteration  18: 685.488 ns/op
Iteration  19: 686.317 ns/op
Iteration  20: 686.636 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1231.387 ns/op
# Warmup Iteration   2: 914.987 ns/op
# Warmup Iteration   3: 784.234 ns/op
# Warmup Iteration   4: 790.545 ns/op
# Warmup Iteration   5: 793.971 ns/op
Iteration   1: 792.725 ns/op
Iteration   2: 798.631 ns/op
Iteration   3: 781.229 ns/op
Iteration   4: 780.355 ns/op
Iteration   5: 780.318 ns/op
Iteration   6: 783.999 ns/op
Iteration   7: 779.505 ns/op
Iteration   8: 780.070 ns/op
Iteration   9: 779.780 ns/op
Iteration  10: 781.363 ns/op
Iteration  11: 778.218 ns/op
Iteration  12: 777.757 ns/op
Iteration  13: 777.452 ns/op
Iteration  14: 777.314 ns/op
Iteration  15: 777.606 ns/op
Iteration  16: 777.746 ns/op
Iteration  17: 778.120 ns/op
Iteration  18: 778.360 ns/op
Iteration  19: 804.420 ns/op
Iteration  20: 785.400 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1217.199 ns/op
# Warmup Iteration   2: 903.776 ns/op
# Warmup Iteration   3: 769.203 ns/op
# Warmup Iteration   4: 767.634 ns/op
# Warmup Iteration   5: 788.271 ns/op
Iteration   1: 778.643 ns/op
Iteration   2: 762.134 ns/op
Iteration   3: 761.821 ns/op
Iteration   4: 761.805 ns/op
Iteration   5: 761.767 ns/op
Iteration   6: 761.441 ns/op
Iteration   7: 761.890 ns/op
Iteration   8: 761.111 ns/op
Iteration   9: 766.560 ns/op
Iteration  10: 764.091 ns/op
Iteration  11: 759.338 ns/op
Iteration  12: 758.641 ns/op
Iteration  13: 758.989 ns/op
Iteration  14: 759.474 ns/op
Iteration  15: 759.676 ns/op
Iteration  16: 759.044 ns/op
Iteration  17: 759.199 ns/op
Iteration  18: 760.161 ns/op
Iteration  19: 760.565 ns/op
Iteration  20: 761.748 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1162.264 ns/op
# Warmup Iteration   2: 794.261 ns/op
# Warmup Iteration   3: 704.941 ns/op
# Warmup Iteration   4: 700.788 ns/op
# Warmup Iteration   5: 704.239 ns/op
Iteration   1: 708.615 ns/op
Iteration   2: 693.555 ns/op
Iteration   3: 692.863 ns/op
Iteration   4: 695.517 ns/op
Iteration   5: 693.055 ns/op
Iteration   6: 692.922 ns/op
Iteration   7: 693.492 ns/op
Iteration   8: 693.168 ns/op
Iteration   9: 693.075 ns/op
Iteration  10: 690.805 ns/op
Iteration  11: 693.851 ns/op
Iteration  12: 691.510 ns/op
Iteration  13: 692.035 ns/op
Iteration  14: 691.387 ns/op
Iteration  15: 691.923 ns/op
Iteration  16: 692.660 ns/op
Iteration  17: 693.016 ns/op
Iteration  18: 695.089 ns/op
Iteration  19: 692.067 ns/op
Iteration  20: 691.975 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  741.847 Â±(99.9%) 14.511 ns/op [Average]
  (min, avg, max) = (685.488, 741.847, 804.420), stdev = 42.787
  CI (99.9%): [727.335, 756.358] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                            (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

 

	

	 ,
		  		       				 
	



 

	


	
 
	

	
 
	
			

				

 	

	
			   	  avgt  100  735.771 Â± 10.852  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

 

	

	 ,
		  		       				 
	



 

	


	
 
	

	
 
	
			

				

 	

	
			   	  avgt  100  741.847 Â± 14.511  ns/op

Benchmark result is saved to split_precompiled_regex_180_163_Match.csv
