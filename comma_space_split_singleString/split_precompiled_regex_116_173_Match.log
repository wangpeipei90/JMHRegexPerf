# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		

 

		 	 	
 	
		
 	
   	 	 


 	


 	 
    

	 	 				 ,		  	

		 	
	 
	 	  	

		 		
 	 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1177.644 ns/op
# Warmup Iteration   2: 865.433 ns/op
# Warmup Iteration   3: 740.416 ns/op
# Warmup Iteration   4: 755.082 ns/op
# Warmup Iteration   5: 748.818 ns/op
Iteration   1: 754.760 ns/op
Iteration   2: 736.411 ns/op
Iteration   3: 736.480 ns/op
Iteration   4: 736.806 ns/op
Iteration   5: 736.968 ns/op
Iteration   6: 738.469 ns/op
Iteration   7: 735.694 ns/op
Iteration   8: 737.117 ns/op
Iteration   9: 737.055 ns/op
Iteration  10: 736.481 ns/op
Iteration  11: 734.468 ns/op
Iteration  12: 734.347 ns/op
Iteration  13: 735.308 ns/op
Iteration  14: 734.150 ns/op
Iteration  15: 733.898 ns/op
Iteration  16: 734.027 ns/op
Iteration  17: 733.852 ns/op
Iteration  18: 733.862 ns/op
Iteration  19: 739.683 ns/op
Iteration  20: 732.685 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1186.261 ns/op
# Warmup Iteration   2: 825.809 ns/op
# Warmup Iteration   3: 716.086 ns/op
# Warmup Iteration   4: 729.830 ns/op
# Warmup Iteration   5: 724.395 ns/op
Iteration   1: 729.517 ns/op
Iteration   2: 712.918 ns/op
Iteration   3: 712.675 ns/op
Iteration   4: 712.382 ns/op
Iteration   5: 712.702 ns/op
Iteration   6: 712.519 ns/op
Iteration   7: 713.404 ns/op
Iteration   8: 712.124 ns/op
Iteration   9: 712.805 ns/op
Iteration  10: 718.120 ns/op
Iteration  11: 710.322 ns/op
Iteration  12: 709.970 ns/op
Iteration  13: 710.300 ns/op
Iteration  14: 710.053 ns/op
Iteration  15: 710.310 ns/op
Iteration  16: 710.556 ns/op
Iteration  17: 711.039 ns/op
Iteration  18: 710.692 ns/op
Iteration  19: 710.152 ns/op
Iteration  20: 710.649 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1231.779 ns/op
# Warmup Iteration   2: 890.653 ns/op
# Warmup Iteration   3: 762.249 ns/op
# Warmup Iteration   4: 765.125 ns/op
# Warmup Iteration   5: 770.860 ns/op
Iteration   1: 776.326 ns/op
Iteration   2: 774.687 ns/op
Iteration   3: 759.207 ns/op
Iteration   4: 762.563 ns/op
Iteration   5: 758.784 ns/op
Iteration   6: 758.932 ns/op
Iteration   7: 758.352 ns/op
Iteration   8: 758.205 ns/op
Iteration   9: 758.017 ns/op
Iteration  10: 758.083 ns/op
Iteration  11: 756.013 ns/op
Iteration  12: 755.850 ns/op
Iteration  13: 755.582 ns/op
Iteration  14: 755.490 ns/op
Iteration  15: 760.264 ns/op
Iteration  16: 756.572 ns/op
Iteration  17: 755.610 ns/op
Iteration  18: 755.557 ns/op
Iteration  19: 755.425 ns/op
Iteration  20: 756.921 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1142.393 ns/op
# Warmup Iteration   2: 817.482 ns/op
# Warmup Iteration   3: 716.445 ns/op
# Warmup Iteration   4: 712.896 ns/op
# Warmup Iteration   5: 716.547 ns/op
Iteration   1: 721.971 ns/op
Iteration   2: 704.185 ns/op
Iteration   3: 704.023 ns/op
Iteration   4: 704.053 ns/op
Iteration   5: 703.473 ns/op
Iteration   6: 703.892 ns/op
Iteration   7: 703.562 ns/op
Iteration   8: 706.899 ns/op
Iteration   9: 703.768 ns/op
Iteration  10: 701.972 ns/op
Iteration  11: 701.703 ns/op
Iteration  12: 701.570 ns/op
Iteration  13: 701.620 ns/op
Iteration  14: 701.781 ns/op
Iteration  15: 701.922 ns/op
Iteration  16: 701.861 ns/op
Iteration  17: 701.788 ns/op
Iteration  18: 703.223 ns/op
Iteration  19: 702.275 ns/op
Iteration  20: 702.687 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1238.632 ns/op
# Warmup Iteration   2: 892.576 ns/op
# Warmup Iteration   3: 759.376 ns/op
# Warmup Iteration   4: 761.279 ns/op
# Warmup Iteration   5: 764.995 ns/op
Iteration   1: 772.811 ns/op
Iteration   2: 772.140 ns/op
Iteration   3: 756.271 ns/op
Iteration   4: 759.616 ns/op
Iteration   5: 756.086 ns/op
Iteration   6: 756.628 ns/op
Iteration   7: 755.541 ns/op
Iteration   8: 759.770 ns/op
Iteration   9: 756.150 ns/op
Iteration  10: 762.954 ns/op
Iteration  11: 756.285 ns/op
Iteration  12: 753.566 ns/op
Iteration  13: 753.974 ns/op
Iteration  14: 759.322 ns/op
Iteration  15: 754.547 ns/op
Iteration  16: 754.224 ns/op
Iteration  17: 754.066 ns/op
Iteration  18: 755.355 ns/op
Iteration  19: 754.642 ns/op
Iteration  20: 755.723 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  734.101 Â±(99.9%) 7.925 ns/op [Average]
  (min, avg, max) = (701.570, 734.101, 776.326), stdev = 23.366
  CI (99.9%): [726.176, 742.025] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		

 

		 	 	
 	
		
 	
   	 	 


 	


 	 
    

	 	 				 ,		  	

		 	
	 
	 	  	

		 		
 	 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1182.674 ns/op
# Warmup Iteration   2: 872.699 ns/op
# Warmup Iteration   3: 757.117 ns/op
# Warmup Iteration   4: 777.686 ns/op
# Warmup Iteration   5: 767.714 ns/op
Iteration   1: 771.889 ns/op
Iteration   2: 754.082 ns/op
Iteration   3: 754.034 ns/op
Iteration   4: 754.015 ns/op
Iteration   5: 753.151 ns/op
Iteration   6: 753.517 ns/op
Iteration   7: 753.366 ns/op
Iteration   8: 753.362 ns/op
Iteration   9: 753.454 ns/op
Iteration  10: 753.484 ns/op
Iteration  11: 750.942 ns/op
Iteration  12: 750.929 ns/op
Iteration  13: 750.471 ns/op
Iteration  14: 750.787 ns/op
Iteration  15: 752.276 ns/op
Iteration  16: 751.488 ns/op
Iteration  17: 752.147 ns/op
Iteration  18: 755.537 ns/op
Iteration  19: 753.676 ns/op
Iteration  20: 753.498 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1186.600 ns/op
# Warmup Iteration   2: 885.369 ns/op
# Warmup Iteration   3: 768.502 ns/op
# Warmup Iteration   4: 777.775 ns/op
# Warmup Iteration   5: 784.448 ns/op
Iteration   1: 783.266 ns/op
Iteration   2: 765.575 ns/op
Iteration   3: 765.279 ns/op
Iteration   4: 765.661 ns/op
Iteration   5: 765.345 ns/op
Iteration   6: 765.114 ns/op
Iteration   7: 764.662 ns/op
Iteration   8: 764.679 ns/op
Iteration   9: 765.747 ns/op
Iteration  10: 766.053 ns/op
Iteration  11: 767.193 ns/op
Iteration  12: 763.048 ns/op
Iteration  13: 764.731 ns/op
Iteration  14: 763.527 ns/op
Iteration  15: 762.845 ns/op
Iteration  16: 763.469 ns/op
Iteration  17: 762.981 ns/op
Iteration  18: 764.050 ns/op
Iteration  19: 765.370 ns/op
Iteration  20: 763.453 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1196.376 ns/op
# Warmup Iteration   2: 878.434 ns/op
# Warmup Iteration   3: 760.703 ns/op
# Warmup Iteration   4: 776.119 ns/op
# Warmup Iteration   5: 769.898 ns/op
Iteration   1: 774.056 ns/op
Iteration   2: 757.265 ns/op
Iteration   3: 756.943 ns/op
Iteration   4: 756.591 ns/op
Iteration   5: 756.389 ns/op
Iteration   6: 756.702 ns/op
Iteration   7: 756.554 ns/op
Iteration   8: 759.220 ns/op
Iteration   9: 760.194 ns/op
Iteration  10: 756.183 ns/op
Iteration  11: 760.069 ns/op
Iteration  12: 754.323 ns/op
Iteration  13: 753.832 ns/op
Iteration  14: 754.466 ns/op
Iteration  15: 763.249 ns/op
Iteration  16: 755.187 ns/op
Iteration  17: 757.894 ns/op
Iteration  18: 756.315 ns/op
Iteration  19: 756.198 ns/op
Iteration  20: 756.653 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1252.617 ns/op
# Warmup Iteration   2: 932.731 ns/op
# Warmup Iteration   3: 781.126 ns/op
# Warmup Iteration   4: 783.582 ns/op
# Warmup Iteration   5: 786.142 ns/op
Iteration   1: 790.657 ns/op
Iteration   2: 797.538 ns/op
Iteration   3: 777.478 ns/op
Iteration   4: 777.439 ns/op
Iteration   5: 777.625 ns/op
Iteration   6: 782.146 ns/op
Iteration   7: 777.620 ns/op
Iteration   8: 780.374 ns/op
Iteration   9: 778.342 ns/op
Iteration  10: 778.011 ns/op
Iteration  11: 781.006 ns/op
Iteration  12: 774.807 ns/op
Iteration  13: 773.834 ns/op
Iteration  14: 773.909 ns/op
Iteration  15: 774.595 ns/op
Iteration  16: 775.090 ns/op
Iteration  17: 774.245 ns/op
Iteration  18: 774.577 ns/op
Iteration  19: 774.392 ns/op
Iteration  20: 774.472 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1228.436 ns/op
# Warmup Iteration   2: 889.347 ns/op
# Warmup Iteration   3: 765.267 ns/op
# Warmup Iteration   4: 771.335 ns/op
# Warmup Iteration   5: 783.415 ns/op
Iteration   1: 779.291 ns/op
Iteration   2: 762.390 ns/op
Iteration   3: 761.428 ns/op
Iteration   4: 761.310 ns/op
Iteration   5: 762.047 ns/op
Iteration   6: 761.406 ns/op
Iteration   7: 760.693 ns/op
Iteration   8: 760.564 ns/op
Iteration   9: 761.115 ns/op
Iteration  10: 761.961 ns/op
Iteration  11: 759.406 ns/op
Iteration  12: 759.278 ns/op
Iteration  13: 758.999 ns/op
Iteration  14: 765.140 ns/op
Iteration  15: 759.657 ns/op
Iteration  16: 759.399 ns/op
Iteration  17: 759.305 ns/op
Iteration  18: 764.858 ns/op
Iteration  19: 759.699 ns/op
Iteration  20: 759.621 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  763.522 Â±(99.9%) 3.279 ns/op [Average]
  (min, avg, max) = (750.471, 763.522, 797.538), stdev = 9.668
  CI (99.9%): [760.243, 766.801] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                      (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		

 

		 	 	
 	
		
 	
   	 	 


 	


 	 
    

	 	 				 ,		  	

		 	
	 
	 	  	

		 		
 	   avgt  100  734.101 Â± 7.925  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		

 

		 	 	
 	
		
 	
   	 	 


 	


 	 
    

	 	 				 ,		  	

		 	
	 
	 	  	

		 		
 	   avgt  100  763.522 Â± 3.279  ns/op

Benchmark result is saved to split_precompiled_regex_116_173_Match.csv
