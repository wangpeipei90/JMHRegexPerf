# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  



 

 	,
	 

 

    


  					 	 


 
	
 	




	 
 
 	 
   	  	 
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1154.533 ns/op
# Warmup Iteration   2: 849.699 ns/op
# Warmup Iteration   3: 731.651 ns/op
# Warmup Iteration   4: 744.992 ns/op
# Warmup Iteration   5: 738.637 ns/op
Iteration   1: 744.320 ns/op
Iteration   2: 727.934 ns/op
Iteration   3: 727.786 ns/op
Iteration   4: 727.167 ns/op
Iteration   5: 727.298 ns/op
Iteration   6: 726.494 ns/op
Iteration   7: 726.178 ns/op
Iteration   8: 726.519 ns/op
Iteration   9: 726.458 ns/op
Iteration  10: 727.220 ns/op
Iteration  11: 725.609 ns/op
Iteration  12: 724.980 ns/op
Iteration  13: 725.059 ns/op
Iteration  14: 725.955 ns/op
Iteration  15: 724.863 ns/op
Iteration  16: 726.267 ns/op
Iteration  17: 724.989 ns/op
Iteration  18: 725.182 ns/op
Iteration  19: 725.272 ns/op
Iteration  20: 725.456 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1106.359 ns/op
# Warmup Iteration   2: 778.736 ns/op
# Warmup Iteration   3: 696.539 ns/op
# Warmup Iteration   4: 692.673 ns/op
# Warmup Iteration   5: 695.386 ns/op
Iteration   1: 699.523 ns/op
Iteration   2: 684.528 ns/op
Iteration   3: 684.106 ns/op
Iteration   4: 683.999 ns/op
Iteration   5: 687.066 ns/op
Iteration   6: 683.940 ns/op
Iteration   7: 683.796 ns/op
Iteration   8: 684.161 ns/op
Iteration   9: 684.837 ns/op
Iteration  10: 682.138 ns/op
Iteration  11: 681.764 ns/op
Iteration  12: 681.765 ns/op
Iteration  13: 683.830 ns/op
Iteration  14: 681.529 ns/op
Iteration  15: 681.365 ns/op
Iteration  16: 681.539 ns/op
Iteration  17: 681.408 ns/op
Iteration  18: 681.918 ns/op
Iteration  19: 681.552 ns/op
Iteration  20: 683.305 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1150.311 ns/op
# Warmup Iteration   2: 848.960 ns/op
# Warmup Iteration   3: 729.776 ns/op
# Warmup Iteration   4: 743.337 ns/op
# Warmup Iteration   5: 738.156 ns/op
Iteration   1: 742.299 ns/op
Iteration   2: 725.276 ns/op
Iteration   3: 725.401 ns/op
Iteration   4: 725.482 ns/op
Iteration   5: 725.417 ns/op
Iteration   6: 724.935 ns/op
Iteration   7: 724.909 ns/op
Iteration   8: 724.367 ns/op
Iteration   9: 724.907 ns/op
Iteration  10: 724.393 ns/op
Iteration  11: 722.661 ns/op
Iteration  12: 722.605 ns/op
Iteration  13: 724.237 ns/op
Iteration  14: 722.802 ns/op
Iteration  15: 722.815 ns/op
Iteration  16: 723.399 ns/op
Iteration  17: 723.104 ns/op
Iteration  18: 723.355 ns/op
Iteration  19: 723.461 ns/op
Iteration  20: 723.368 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1150.007 ns/op
# Warmup Iteration   2: 766.061 ns/op
# Warmup Iteration   3: 686.364 ns/op
# Warmup Iteration   4: 682.612 ns/op
# Warmup Iteration   5: 681.824 ns/op
Iteration   1: 690.535 ns/op
Iteration   2: 669.824 ns/op
Iteration   3: 674.561 ns/op
Iteration   4: 676.915 ns/op
Iteration   5: 672.017 ns/op
Iteration   6: 672.051 ns/op
Iteration   7: 670.238 ns/op
Iteration   8: 669.905 ns/op
Iteration   9: 670.246 ns/op
Iteration  10: 672.040 ns/op
Iteration  11: 666.876 ns/op
Iteration  12: 667.305 ns/op
Iteration  13: 667.604 ns/op
Iteration  14: 668.246 ns/op
Iteration  15: 667.607 ns/op
Iteration  16: 667.549 ns/op
Iteration  17: 669.730 ns/op
Iteration  18: 670.386 ns/op
Iteration  19: 667.761 ns/op
Iteration  20: 669.633 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1153.755 ns/op
# Warmup Iteration   2: 779.965 ns/op
# Warmup Iteration   3: 691.731 ns/op
# Warmup Iteration   4: 683.381 ns/op
# Warmup Iteration   5: 683.669 ns/op
Iteration   1: 691.190 ns/op
Iteration   2: 674.481 ns/op
Iteration   3: 675.204 ns/op
Iteration   4: 679.054 ns/op
Iteration   5: 673.476 ns/op
Iteration   6: 677.373 ns/op
Iteration   7: 673.297 ns/op
Iteration   8: 671.801 ns/op
Iteration   9: 672.276 ns/op
Iteration  10: 671.502 ns/op
Iteration  11: 671.675 ns/op
Iteration  12: 670.358 ns/op
Iteration  13: 670.132 ns/op
Iteration  14: 669.970 ns/op
Iteration  15: 674.000 ns/op
Iteration  16: 670.891 ns/op
Iteration  17: 672.309 ns/op
Iteration  18: 670.455 ns/op
Iteration  19: 670.423 ns/op
Iteration  20: 671.068 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  696.102 Â±(99.9%) 8.586 ns/op [Average]
  (min, avg, max) = (666.876, 696.102, 744.320), stdev = 25.316
  CI (99.9%): [687.516, 704.688] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  



 

 	,
	 

 

    


  					 	 


 
	
 	




	 
 
 	 
   	  	 
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1216.475 ns/op
# Warmup Iteration   2: 871.083 ns/op
# Warmup Iteration   3: 751.368 ns/op
# Warmup Iteration   4: 771.414 ns/op
# Warmup Iteration   5: 760.117 ns/op
Iteration   1: 767.747 ns/op
Iteration   2: 746.989 ns/op
Iteration   3: 750.243 ns/op
Iteration   4: 746.755 ns/op
Iteration   5: 751.787 ns/op
Iteration   6: 747.056 ns/op
Iteration   7: 750.652 ns/op
Iteration   8: 747.306 ns/op
Iteration   9: 746.908 ns/op
Iteration  10: 746.779 ns/op
Iteration  11: 745.585 ns/op
Iteration  12: 743.919 ns/op
Iteration  13: 743.622 ns/op
Iteration  14: 743.848 ns/op
Iteration  15: 744.911 ns/op
Iteration  16: 747.400 ns/op
Iteration  17: 750.691 ns/op
Iteration  18: 747.500 ns/op
Iteration  19: 745.550 ns/op
Iteration  20: 746.223 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1175.853 ns/op
# Warmup Iteration   2: 860.422 ns/op
# Warmup Iteration   3: 750.106 ns/op
# Warmup Iteration   4: 767.286 ns/op
# Warmup Iteration   5: 759.288 ns/op
Iteration   1: 763.414 ns/op
Iteration   2: 746.498 ns/op
Iteration   3: 746.563 ns/op
Iteration   4: 746.140 ns/op
Iteration   5: 746.775 ns/op
Iteration   6: 746.492 ns/op
Iteration   7: 746.673 ns/op
Iteration   8: 746.702 ns/op
Iteration   9: 746.691 ns/op
Iteration  10: 746.949 ns/op
Iteration  11: 744.329 ns/op
Iteration  12: 744.588 ns/op
Iteration  13: 744.280 ns/op
Iteration  14: 743.889 ns/op
Iteration  15: 746.229 ns/op
Iteration  16: 746.652 ns/op
Iteration  17: 745.374 ns/op
Iteration  18: 745.343 ns/op
Iteration  19: 745.850 ns/op
Iteration  20: 746.767 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1171.190 ns/op
# Warmup Iteration   2: 805.839 ns/op
# Warmup Iteration   3: 713.011 ns/op
# Warmup Iteration   4: 708.768 ns/op
# Warmup Iteration   5: 712.428 ns/op
Iteration   1: 716.820 ns/op
Iteration   2: 701.030 ns/op
Iteration   3: 700.656 ns/op
Iteration   4: 700.768 ns/op
Iteration   5: 704.004 ns/op
Iteration   6: 700.186 ns/op
Iteration   7: 700.137 ns/op
Iteration   8: 700.605 ns/op
Iteration   9: 700.739 ns/op
Iteration  10: 698.592 ns/op
Iteration  11: 699.178 ns/op
Iteration  12: 698.847 ns/op
Iteration  13: 700.082 ns/op
Iteration  14: 699.150 ns/op
Iteration  15: 699.243 ns/op
Iteration  16: 702.935 ns/op
Iteration  17: 700.162 ns/op
Iteration  18: 699.221 ns/op
Iteration  19: 698.484 ns/op
Iteration  20: 702.157 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1167.032 ns/op
# Warmup Iteration   2: 852.667 ns/op
# Warmup Iteration   3: 743.978 ns/op
# Warmup Iteration   4: 759.348 ns/op
# Warmup Iteration   5: 752.908 ns/op
Iteration   1: 758.263 ns/op
Iteration   2: 741.296 ns/op
Iteration   3: 741.085 ns/op
Iteration   4: 741.091 ns/op
Iteration   5: 740.578 ns/op
Iteration   6: 740.935 ns/op
Iteration   7: 741.071 ns/op
Iteration   8: 741.209 ns/op
Iteration   9: 742.626 ns/op
Iteration  10: 741.299 ns/op
Iteration  11: 740.599 ns/op
Iteration  12: 738.541 ns/op
Iteration  13: 740.545 ns/op
Iteration  14: 739.197 ns/op
Iteration  15: 739.210 ns/op
Iteration  16: 745.201 ns/op
Iteration  17: 739.133 ns/op
Iteration  18: 741.546 ns/op
Iteration  19: 741.373 ns/op
Iteration  20: 741.316 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1180.442 ns/op
# Warmup Iteration   2: 875.287 ns/op
# Warmup Iteration   3: 763.812 ns/op
# Warmup Iteration   4: 779.328 ns/op
# Warmup Iteration   5: 777.052 ns/op
Iteration   1: 777.458 ns/op
Iteration   2: 760.073 ns/op
Iteration   3: 759.575 ns/op
Iteration   4: 760.140 ns/op
Iteration   5: 759.337 ns/op
Iteration   6: 759.926 ns/op
Iteration   7: 759.255 ns/op
Iteration   8: 759.462 ns/op
Iteration   9: 759.806 ns/op
Iteration  10: 759.427 ns/op
Iteration  11: 756.308 ns/op
Iteration  12: 756.308 ns/op
Iteration  13: 756.386 ns/op
Iteration  14: 758.043 ns/op
Iteration  15: 756.578 ns/op
Iteration  16: 756.320 ns/op
Iteration  17: 756.803 ns/op
Iteration  18: 757.012 ns/op
Iteration  19: 756.569 ns/op
Iteration  20: 756.363 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  739.379 Â±(99.9%) 6.948 ns/op [Average]
  (min, avg, max) = (698.484, 739.379, 777.458), stdev = 20.486
  CI (99.9%): [732.431, 746.327] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                    (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   



 

 	,
	 

 

    


  					 	 


 
	
 	




	 
 
 	 
   	  	 
		  avgt  100  696.102 Â± 8.586  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   



 

 	,
	 

 

    


  					 	 


 
	
 	




	 
 
 	 
   	  	 
		  avgt  100  739.379 Â± 6.948  ns/op

Benchmark result is saved to split_precompiled_regex_197_155_Match.csv
