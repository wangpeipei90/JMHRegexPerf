# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		 
		
 	

  
		  	 
  
 
	

 	 
	

		
  

	  	  	



 
	

 

		
  ,
 
	 
	


 

  
 			


	
 

	 		
		 		


)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1320.630 ns/op
# Warmup Iteration   2: 1031.355 ns/op
# Warmup Iteration   3: 861.200 ns/op
# Warmup Iteration   4: 863.234 ns/op
# Warmup Iteration   5: 867.431 ns/op
Iteration   1: 872.992 ns/op
Iteration   2: 876.950 ns/op
Iteration   3: 856.871 ns/op
Iteration   4: 858.010 ns/op
Iteration   5: 853.265 ns/op
Iteration   6: 857.282 ns/op
Iteration   7: 856.892 ns/op
Iteration   8: 858.144 ns/op
Iteration   9: 857.846 ns/op
Iteration  10: 858.443 ns/op
Iteration  11: 857.430 ns/op
Iteration  12: 858.148 ns/op
Iteration  13: 855.850 ns/op
Iteration  14: 855.000 ns/op
Iteration  15: 853.789 ns/op
Iteration  16: 854.971 ns/op
Iteration  17: 855.907 ns/op
Iteration  18: 854.563 ns/op
Iteration  19: 861.372 ns/op
Iteration  20: 857.390 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1254.690 ns/op
# Warmup Iteration   2: 932.312 ns/op
# Warmup Iteration   3: 790.408 ns/op
# Warmup Iteration   4: 793.111 ns/op
# Warmup Iteration   5: 795.250 ns/op
Iteration   1: 802.271 ns/op
Iteration   2: 804.752 ns/op
Iteration   3: 790.491 ns/op
Iteration   4: 785.865 ns/op
Iteration   5: 790.467 ns/op
Iteration   6: 785.366 ns/op
Iteration   7: 785.023 ns/op
Iteration   8: 785.773 ns/op
Iteration   9: 785.907 ns/op
Iteration  10: 789.629 ns/op
Iteration  11: 785.305 ns/op
Iteration  12: 796.361 ns/op
Iteration  13: 783.613 ns/op
Iteration  14: 783.990 ns/op
Iteration  15: 784.829 ns/op
Iteration  16: 783.783 ns/op
Iteration  17: 784.321 ns/op
Iteration  18: 783.782 ns/op
Iteration  19: 783.524 ns/op
Iteration  20: 784.274 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1274.371 ns/op
# Warmup Iteration   2: 954.212 ns/op
# Warmup Iteration   3: 804.620 ns/op
# Warmup Iteration   4: 806.171 ns/op
# Warmup Iteration   5: 810.101 ns/op
Iteration   1: 814.203 ns/op
Iteration   2: 818.452 ns/op
Iteration   3: 803.502 ns/op
Iteration   4: 800.212 ns/op
Iteration   5: 800.359 ns/op
Iteration   6: 800.535 ns/op
Iteration   7: 800.888 ns/op
Iteration   8: 801.571 ns/op
Iteration   9: 801.196 ns/op
Iteration  10: 801.438 ns/op
Iteration  11: 801.559 ns/op
Iteration  12: 799.557 ns/op
Iteration  13: 800.054 ns/op
Iteration  14: 801.100 ns/op
Iteration  15: 799.125 ns/op
Iteration  16: 799.137 ns/op
Iteration  17: 800.453 ns/op
Iteration  18: 801.518 ns/op
Iteration  19: 801.183 ns/op
Iteration  20: 801.284 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1324.213 ns/op
# Warmup Iteration   2: 1047.563 ns/op
# Warmup Iteration   3: 863.208 ns/op
# Warmup Iteration   4: 866.157 ns/op
# Warmup Iteration   5: 870.192 ns/op
Iteration   1: 874.469 ns/op
Iteration   2: 879.934 ns/op
Iteration   3: 863.594 ns/op
Iteration   4: 860.996 ns/op
Iteration   5: 854.929 ns/op
Iteration   6: 859.846 ns/op
Iteration   7: 859.882 ns/op
Iteration   8: 859.895 ns/op
Iteration   9: 859.342 ns/op
Iteration  10: 860.015 ns/op
Iteration  11: 859.598 ns/op
Iteration  12: 860.108 ns/op
Iteration  13: 860.348 ns/op
Iteration  14: 857.096 ns/op
Iteration  15: 855.339 ns/op
Iteration  16: 856.708 ns/op
Iteration  17: 857.079 ns/op
Iteration  18: 864.272 ns/op
Iteration  19: 857.311 ns/op
Iteration  20: 857.241 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1321.043 ns/op
# Warmup Iteration   2: 1030.714 ns/op
# Warmup Iteration   3: 863.155 ns/op
# Warmup Iteration   4: 859.479 ns/op
# Warmup Iteration   5: 863.448 ns/op
Iteration   1: 870.149 ns/op
Iteration   2: 875.702 ns/op
Iteration   3: 853.241 ns/op
Iteration   4: 854.595 ns/op
Iteration   5: 849.395 ns/op
Iteration   6: 856.595 ns/op
Iteration   7: 853.813 ns/op
Iteration   8: 853.440 ns/op
Iteration   9: 853.484 ns/op
Iteration  10: 854.870 ns/op
Iteration  11: 854.323 ns/op
Iteration  12: 855.583 ns/op
Iteration  13: 862.123 ns/op
Iteration  14: 851.010 ns/op
Iteration  15: 850.601 ns/op
Iteration  16: 848.640 ns/op
Iteration  17: 853.378 ns/op
Iteration  18: 853.294 ns/op
Iteration  19: 872.145 ns/op
Iteration  20: 856.751 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  833.289 Â±(99.9%) 10.929 ns/op [Average]
  (min, avg, max) = (783.524, 833.289, 879.934), stdev = 32.224
  CI (99.9%): [822.360, 844.218] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		 
		
 	

  
		  	 
  
 
	

 	 
	

		
  

	  	  	



 
	

 

		
  ,
 
	 
	


 

  
 			


	
 

	 		
		 		


)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1259.409 ns/op
# Warmup Iteration   2: 999.536 ns/op
# Warmup Iteration   3: 845.925 ns/op
# Warmup Iteration   4: 848.323 ns/op
# Warmup Iteration   5: 851.076 ns/op
Iteration   1: 859.470 ns/op
Iteration   2: 860.703 ns/op
Iteration   3: 843.690 ns/op
Iteration   4: 841.995 ns/op
Iteration   5: 841.675 ns/op
Iteration   6: 842.844 ns/op
Iteration   7: 841.486 ns/op
Iteration   8: 842.068 ns/op
Iteration   9: 843.808 ns/op
Iteration  10: 842.687 ns/op
Iteration  11: 837.688 ns/op
Iteration  12: 860.215 ns/op
Iteration  13: 843.568 ns/op
Iteration  14: 840.412 ns/op
Iteration  15: 841.462 ns/op
Iteration  16: 841.604 ns/op
Iteration  17: 841.223 ns/op
Iteration  18: 841.313 ns/op
Iteration  19: 841.455 ns/op
Iteration  20: 841.433 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1283.114 ns/op
# Warmup Iteration   2: 1031.874 ns/op
# Warmup Iteration   3: 869.077 ns/op
# Warmup Iteration   4: 874.567 ns/op
# Warmup Iteration   5: 875.691 ns/op
Iteration   1: 883.461 ns/op
Iteration   2: 886.677 ns/op
Iteration   3: 869.283 ns/op
Iteration   4: 866.054 ns/op
Iteration   5: 864.842 ns/op
Iteration   6: 860.348 ns/op
Iteration   7: 864.730 ns/op
Iteration   8: 865.728 ns/op
Iteration   9: 865.474 ns/op
Iteration  10: 871.726 ns/op
Iteration  11: 867.615 ns/op
Iteration  12: 865.388 ns/op
Iteration  13: 864.521 ns/op
Iteration  14: 862.669 ns/op
Iteration  15: 863.007 ns/op
Iteration  16: 864.393 ns/op
Iteration  17: 864.003 ns/op
Iteration  18: 860.931 ns/op
Iteration  19: 864.963 ns/op
Iteration  20: 865.446 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1285.886 ns/op
# Warmup Iteration   2: 1023.432 ns/op
# Warmup Iteration   3: 859.609 ns/op
# Warmup Iteration   4: 862.284 ns/op
# Warmup Iteration   5: 866.293 ns/op
Iteration   1: 872.732 ns/op
Iteration   2: 876.396 ns/op
Iteration   3: 858.021 ns/op
Iteration   4: 857.965 ns/op
Iteration   5: 856.543 ns/op
Iteration   6: 856.788 ns/op
Iteration   7: 853.845 ns/op
Iteration   8: 856.776 ns/op
Iteration   9: 859.311 ns/op
Iteration  10: 857.622 ns/op
Iteration  11: 858.413 ns/op
Iteration  12: 867.978 ns/op
Iteration  13: 856.584 ns/op
Iteration  14: 856.040 ns/op
Iteration  15: 855.935 ns/op
Iteration  16: 856.375 ns/op
Iteration  17: 857.749 ns/op
Iteration  18: 857.864 ns/op
Iteration  19: 856.261 ns/op
Iteration  20: 854.372 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1292.837 ns/op
# Warmup Iteration   2: 1036.169 ns/op
# Warmup Iteration   3: 869.621 ns/op
# Warmup Iteration   4: 872.011 ns/op
# Warmup Iteration   5: 875.426 ns/op
Iteration   1: 879.945 ns/op
Iteration   2: 884.967 ns/op
Iteration   3: 864.869 ns/op
Iteration   4: 864.355 ns/op
Iteration   5: 865.643 ns/op
Iteration   6: 861.312 ns/op
Iteration   7: 865.210 ns/op
Iteration   8: 873.784 ns/op
Iteration   9: 865.600 ns/op
Iteration  10: 864.915 ns/op
Iteration  11: 865.690 ns/op
Iteration  12: 865.638 ns/op
Iteration  13: 866.735 ns/op
Iteration  14: 863.280 ns/op
Iteration  15: 863.746 ns/op
Iteration  16: 864.833 ns/op
Iteration  17: 864.820 ns/op
Iteration  18: 861.309 ns/op
Iteration  19: 864.524 ns/op
Iteration  20: 865.537 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1256.048 ns/op
# Warmup Iteration   2: 948.397 ns/op
# Warmup Iteration   3: 807.467 ns/op
# Warmup Iteration   4: 808.770 ns/op
# Warmup Iteration   5: 817.307 ns/op
Iteration   1: 816.693 ns/op
Iteration   2: 824.289 ns/op
Iteration   3: 803.847 ns/op
Iteration   4: 803.473 ns/op
Iteration   5: 802.340 ns/op
Iteration   6: 806.132 ns/op
Iteration   7: 801.813 ns/op
Iteration   8: 806.470 ns/op
Iteration   9: 802.656 ns/op
Iteration  10: 807.598 ns/op
Iteration  11: 803.726 ns/op
Iteration  12: 798.965 ns/op
Iteration  13: 799.116 ns/op
Iteration  14: 798.667 ns/op
Iteration  15: 799.277 ns/op
Iteration  16: 800.320 ns/op
Iteration  17: 799.162 ns/op
Iteration  18: 799.515 ns/op
Iteration  19: 798.720 ns/op
Iteration  20: 799.391 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  848.245 Â±(99.9%) 8.378 ns/op [Average]
  (min, avg, max) = (798.667, 848.245, 886.677), stdev = 24.701
  CI (99.9%): [839.868, 856.623] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                                   (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		 
		
 	

  
		  	 
  
 
	

 	 
	

		
  

	  	  	



 
	

 

		
  ,
 
	 
	


 

  
 			


	
 

	 		
		 		


  avgt  100  833.289 Â± 10.929  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		 
		
 	

  
		  	 
  
 
	

 	 
	

		
  

	  	  	



 
	

 

		
  ,
 
	 
	


 

  
 			


	
 

	 		
		 		


  avgt  100  848.245 Â±  8.378  ns/op

Benchmark result is saved to split_precompiled_regex_19_218_Match.csv
