# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	  
	  					  

 
	 	
  	  	  




	 	  , 
	
		     			


 
 	

  				
 

				

 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1112.599 ns/op
# Warmup Iteration   2: 786.028 ns/op
# Warmup Iteration   3: 701.638 ns/op
# Warmup Iteration   4: 698.235 ns/op
# Warmup Iteration   5: 701.802 ns/op
Iteration   1: 706.170 ns/op
Iteration   2: 690.974 ns/op
Iteration   3: 690.125 ns/op
Iteration   4: 690.092 ns/op
Iteration   5: 692.754 ns/op
Iteration   6: 689.785 ns/op
Iteration   7: 688.952 ns/op
Iteration   8: 698.024 ns/op
Iteration   9: 688.721 ns/op
Iteration  10: 687.028 ns/op
Iteration  11: 686.766 ns/op
Iteration  12: 692.114 ns/op
Iteration  13: 687.055 ns/op
Iteration  14: 688.443 ns/op
Iteration  15: 687.167 ns/op
Iteration  16: 687.261 ns/op
Iteration  17: 687.253 ns/op
Iteration  18: 687.486 ns/op
Iteration  19: 687.021 ns/op
Iteration  20: 688.631 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1154.064 ns/op
# Warmup Iteration   2: 848.090 ns/op
# Warmup Iteration   3: 737.792 ns/op
# Warmup Iteration   4: 752.540 ns/op
# Warmup Iteration   5: 746.701 ns/op
Iteration   1: 750.433 ns/op
Iteration   2: 734.333 ns/op
Iteration   3: 733.468 ns/op
Iteration   4: 733.705 ns/op
Iteration   5: 733.723 ns/op
Iteration   6: 733.575 ns/op
Iteration   7: 734.981 ns/op
Iteration   8: 740.199 ns/op
Iteration   9: 733.913 ns/op
Iteration  10: 733.380 ns/op
Iteration  11: 731.127 ns/op
Iteration  12: 730.712 ns/op
Iteration  13: 730.547 ns/op
Iteration  14: 730.406 ns/op
Iteration  15: 730.562 ns/op
Iteration  16: 730.649 ns/op
Iteration  17: 732.653 ns/op
Iteration  18: 732.016 ns/op
Iteration  19: 731.447 ns/op
Iteration  20: 732.450 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1116.942 ns/op
# Warmup Iteration   2: 784.759 ns/op
# Warmup Iteration   3: 696.678 ns/op
# Warmup Iteration   4: 693.035 ns/op
# Warmup Iteration   5: 696.580 ns/op
Iteration   1: 700.829 ns/op
Iteration   2: 685.285 ns/op
Iteration   3: 685.329 ns/op
Iteration   4: 684.304 ns/op
Iteration   5: 688.395 ns/op
Iteration   6: 684.722 ns/op
Iteration   7: 685.127 ns/op
Iteration   8: 684.837 ns/op
Iteration   9: 684.287 ns/op
Iteration  10: 682.527 ns/op
Iteration  11: 681.893 ns/op
Iteration  12: 681.834 ns/op
Iteration  13: 683.965 ns/op
Iteration  14: 681.976 ns/op
Iteration  15: 682.872 ns/op
Iteration  16: 683.735 ns/op
Iteration  17: 688.131 ns/op
Iteration  18: 686.126 ns/op
Iteration  19: 682.823 ns/op
Iteration  20: 685.239 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1107.955 ns/op
# Warmup Iteration   2: 783.760 ns/op
# Warmup Iteration   3: 701.340 ns/op
# Warmup Iteration   4: 696.929 ns/op
# Warmup Iteration   5: 701.264 ns/op
Iteration   1: 705.533 ns/op
Iteration   2: 689.352 ns/op
Iteration   3: 689.871 ns/op
Iteration   4: 689.673 ns/op
Iteration   5: 693.792 ns/op
Iteration   6: 689.188 ns/op
Iteration   7: 689.698 ns/op
Iteration   8: 689.327 ns/op
Iteration   9: 689.109 ns/op
Iteration  10: 687.088 ns/op
Iteration  11: 686.870 ns/op
Iteration  12: 686.793 ns/op
Iteration  13: 688.087 ns/op
Iteration  14: 686.866 ns/op
Iteration  15: 686.828 ns/op
Iteration  16: 686.776 ns/op
Iteration  17: 686.824 ns/op
Iteration  18: 691.310 ns/op
Iteration  19: 688.006 ns/op
Iteration  20: 687.777 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1111.835 ns/op
# Warmup Iteration   2: 789.004 ns/op
# Warmup Iteration   3: 701.942 ns/op
# Warmup Iteration   4: 698.003 ns/op
# Warmup Iteration   5: 701.392 ns/op
Iteration   1: 705.852 ns/op
Iteration   2: 689.958 ns/op
Iteration   3: 689.792 ns/op
Iteration   4: 689.959 ns/op
Iteration   5: 693.305 ns/op
Iteration   6: 689.326 ns/op
Iteration   7: 689.291 ns/op
Iteration   8: 689.889 ns/op
Iteration   9: 689.898 ns/op
Iteration  10: 687.562 ns/op
Iteration  11: 692.358 ns/op
Iteration  12: 688.254 ns/op
Iteration  13: 687.377 ns/op
Iteration  14: 690.505 ns/op
Iteration  15: 687.912 ns/op
Iteration  16: 687.790 ns/op
Iteration  17: 694.503 ns/op
Iteration  18: 689.193 ns/op
Iteration  19: 687.429 ns/op
Iteration  20: 688.116 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  697.774 Â±(99.9%) 6.324 ns/op [Average]
  (min, avg, max) = (681.834, 697.774, 750.433), stdev = 18.647
  CI (99.9%): [691.450, 704.098] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	  
	  					  

 
	 	
  	  	  




	 	  , 
	
		     			


 
 	

  				
 

				

 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1172.666 ns/op
# Warmup Iteration   2: 826.856 ns/op
# Warmup Iteration   3: 728.273 ns/op
# Warmup Iteration   4: 724.959 ns/op
# Warmup Iteration   5: 728.180 ns/op
Iteration   1: 737.134 ns/op
Iteration   2: 719.627 ns/op
Iteration   3: 716.171 ns/op
Iteration   4: 716.578 ns/op
Iteration   5: 716.019 ns/op
Iteration   6: 716.284 ns/op
Iteration   7: 719.119 ns/op
Iteration   8: 716.149 ns/op
Iteration   9: 716.198 ns/op
Iteration  10: 713.445 ns/op
Iteration  11: 719.247 ns/op
Iteration  12: 713.689 ns/op
Iteration  13: 714.148 ns/op
Iteration  14: 713.978 ns/op
Iteration  15: 714.227 ns/op
Iteration  16: 714.332 ns/op
Iteration  17: 714.278 ns/op
Iteration  18: 713.434 ns/op
Iteration  19: 715.193 ns/op
Iteration  20: 715.768 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1190.512 ns/op
# Warmup Iteration   2: 819.700 ns/op
# Warmup Iteration   3: 720.216 ns/op
# Warmup Iteration   4: 716.254 ns/op
# Warmup Iteration   5: 720.061 ns/op
Iteration   1: 724.685 ns/op
Iteration   2: 708.175 ns/op
Iteration   3: 708.074 ns/op
Iteration   4: 708.051 ns/op
Iteration   5: 708.077 ns/op
Iteration   6: 711.605 ns/op
Iteration   7: 708.095 ns/op
Iteration   8: 707.427 ns/op
Iteration   9: 709.326 ns/op
Iteration  10: 710.153 ns/op
Iteration  11: 706.241 ns/op
Iteration  12: 706.130 ns/op
Iteration  13: 706.400 ns/op
Iteration  14: 706.869 ns/op
Iteration  15: 707.766 ns/op
Iteration  16: 705.976 ns/op
Iteration  17: 706.237 ns/op
Iteration  18: 706.396 ns/op
Iteration  19: 706.490 ns/op
Iteration  20: 706.293 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1168.201 ns/op
# Warmup Iteration   2: 823.315 ns/op
# Warmup Iteration   3: 730.310 ns/op
# Warmup Iteration   4: 726.075 ns/op
# Warmup Iteration   5: 729.720 ns/op
Iteration   1: 734.302 ns/op
Iteration   2: 717.486 ns/op
Iteration   3: 717.743 ns/op
Iteration   4: 717.176 ns/op
Iteration   5: 717.555 ns/op
Iteration   6: 717.560 ns/op
Iteration   7: 725.412 ns/op
Iteration   8: 718.075 ns/op
Iteration   9: 718.085 ns/op
Iteration  10: 716.396 ns/op
Iteration  11: 723.496 ns/op
Iteration  12: 715.681 ns/op
Iteration  13: 715.183 ns/op
Iteration  14: 715.260 ns/op
Iteration  15: 715.385 ns/op
Iteration  16: 715.294 ns/op
Iteration  17: 718.381 ns/op
Iteration  18: 716.041 ns/op
Iteration  19: 715.405 ns/op
Iteration  20: 716.243 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1178.527 ns/op
# Warmup Iteration   2: 835.020 ns/op
# Warmup Iteration   3: 737.960 ns/op
# Warmup Iteration   4: 733.216 ns/op
# Warmup Iteration   5: 737.359 ns/op
Iteration   1: 742.411 ns/op
Iteration   2: 725.255 ns/op
Iteration   3: 724.922 ns/op
Iteration   4: 724.618 ns/op
Iteration   5: 724.541 ns/op
Iteration   6: 724.461 ns/op
Iteration   7: 724.689 ns/op
Iteration   8: 727.413 ns/op
Iteration   9: 728.732 ns/op
Iteration  10: 722.989 ns/op
Iteration  11: 725.463 ns/op
Iteration  12: 722.542 ns/op
Iteration  13: 722.594 ns/op
Iteration  14: 723.664 ns/op
Iteration  15: 728.510 ns/op
Iteration  16: 723.595 ns/op
Iteration  17: 723.545 ns/op
Iteration  18: 723.063 ns/op
Iteration  19: 724.165 ns/op
Iteration  20: 723.803 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1181.135 ns/op
# Warmup Iteration   2: 817.378 ns/op
# Warmup Iteration   3: 722.134 ns/op
# Warmup Iteration   4: 717.402 ns/op
# Warmup Iteration   5: 721.819 ns/op
Iteration   1: 725.458 ns/op
Iteration   2: 709.986 ns/op
Iteration   3: 709.609 ns/op
Iteration   4: 708.833 ns/op
Iteration   5: 708.724 ns/op
Iteration   6: 712.628 ns/op
Iteration   7: 708.841 ns/op
Iteration   8: 708.689 ns/op
Iteration   9: 708.911 ns/op
Iteration  10: 708.969 ns/op
Iteration  11: 706.687 ns/op
Iteration  12: 707.847 ns/op
Iteration  13: 706.889 ns/op
Iteration  14: 708.127 ns/op
Iteration  15: 709.300 ns/op
Iteration  16: 707.360 ns/op
Iteration  17: 707.348 ns/op
Iteration  18: 707.771 ns/op
Iteration  19: 707.809 ns/op
Iteration  20: 712.373 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  715.728 Â±(99.9%) 2.595 ns/op [Average]
  (min, avg, max) = (705.976, 715.728, 742.411), stdev = 7.650
  CI (99.9%): [713.133, 718.322] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	  
	  					  

 
	 	
  	  	  




	 	  , 
	
		     			


 
 	

  				
 

				

   avgt  100  697.774 Â± 6.324  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	  
	  					  

 
	 	
  	  	  




	 	  , 
	
		     			


 
 	

  				
 

				

   avgt  100  715.728 Â± 2.595  ns/op

Benchmark result is saved to split_precompiled_regex_39_166_Match.csv
