# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	 
	



			
	

		 
 		 
 
   		
 
	 
	 	
 
		 	
	,	  
		

 	 
 
	 
 					
		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1151.561 ns/op
# Warmup Iteration   2: 836.106 ns/op
# Warmup Iteration   3: 725.693 ns/op
# Warmup Iteration   4: 738.789 ns/op
# Warmup Iteration   5: 734.880 ns/op
Iteration   1: 738.616 ns/op
Iteration   2: 721.946 ns/op
Iteration   3: 722.677 ns/op
Iteration   4: 722.662 ns/op
Iteration   5: 722.813 ns/op
Iteration   6: 722.429 ns/op
Iteration   7: 722.319 ns/op
Iteration   8: 721.641 ns/op
Iteration   9: 722.253 ns/op
Iteration  10: 722.744 ns/op
Iteration  11: 720.562 ns/op
Iteration  12: 721.668 ns/op
Iteration  13: 720.289 ns/op
Iteration  14: 725.652 ns/op
Iteration  15: 721.026 ns/op
Iteration  16: 721.350 ns/op
Iteration  17: 721.375 ns/op
Iteration  18: 720.678 ns/op
Iteration  19: 720.682 ns/op
Iteration  20: 720.890 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1222.378 ns/op
# Warmup Iteration   2: 862.502 ns/op
# Warmup Iteration   3: 740.660 ns/op
# Warmup Iteration   4: 755.270 ns/op
# Warmup Iteration   5: 750.347 ns/op
Iteration   1: 754.929 ns/op
Iteration   2: 739.605 ns/op
Iteration   3: 737.604 ns/op
Iteration   4: 737.424 ns/op
Iteration   5: 737.265 ns/op
Iteration   6: 736.940 ns/op
Iteration   7: 736.888 ns/op
Iteration   8: 736.856 ns/op
Iteration   9: 736.423 ns/op
Iteration  10: 737.018 ns/op
Iteration  11: 735.012 ns/op
Iteration  12: 734.933 ns/op
Iteration  13: 735.291 ns/op
Iteration  14: 735.803 ns/op
Iteration  15: 735.318 ns/op
Iteration  16: 735.750 ns/op
Iteration  17: 735.719 ns/op
Iteration  18: 738.871 ns/op
Iteration  19: 744.081 ns/op
Iteration  20: 738.785 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1116.430 ns/op
# Warmup Iteration   2: 792.004 ns/op
# Warmup Iteration   3: 705.956 ns/op
# Warmup Iteration   4: 700.863 ns/op
# Warmup Iteration   5: 705.072 ns/op
Iteration   1: 709.049 ns/op
Iteration   2: 692.789 ns/op
Iteration   3: 692.394 ns/op
Iteration   4: 692.175 ns/op
Iteration   5: 691.648 ns/op
Iteration   6: 694.626 ns/op
Iteration   7: 692.162 ns/op
Iteration   8: 692.858 ns/op
Iteration   9: 692.655 ns/op
Iteration  10: 690.510 ns/op
Iteration  11: 690.554 ns/op
Iteration  12: 690.132 ns/op
Iteration  13: 690.011 ns/op
Iteration  14: 691.438 ns/op
Iteration  15: 690.257 ns/op
Iteration  16: 690.324 ns/op
Iteration  17: 690.580 ns/op
Iteration  18: 691.200 ns/op
Iteration  19: 691.001 ns/op
Iteration  20: 690.378 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1115.044 ns/op
# Warmup Iteration   2: 789.578 ns/op
# Warmup Iteration   3: 704.400 ns/op
# Warmup Iteration   4: 699.682 ns/op
# Warmup Iteration   5: 703.528 ns/op
Iteration   1: 708.344 ns/op
Iteration   2: 694.886 ns/op
Iteration   3: 691.679 ns/op
Iteration   4: 691.158 ns/op
Iteration   5: 697.869 ns/op
Iteration   6: 691.135 ns/op
Iteration   7: 690.901 ns/op
Iteration   8: 690.901 ns/op
Iteration   9: 691.681 ns/op
Iteration  10: 689.340 ns/op
Iteration  11: 689.269 ns/op
Iteration  12: 689.821 ns/op
Iteration  13: 689.773 ns/op
Iteration  14: 691.385 ns/op
Iteration  15: 689.572 ns/op
Iteration  16: 690.090 ns/op
Iteration  17: 690.641 ns/op
Iteration  18: 691.115 ns/op
Iteration  19: 690.117 ns/op
Iteration  20: 690.902 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1115.785 ns/op
# Warmup Iteration   2: 789.315 ns/op
# Warmup Iteration   3: 703.458 ns/op
# Warmup Iteration   4: 699.429 ns/op
# Warmup Iteration   5: 702.284 ns/op
Iteration   1: 709.528 ns/op
Iteration   2: 691.079 ns/op
Iteration   3: 690.719 ns/op
Iteration   4: 694.576 ns/op
Iteration   5: 694.254 ns/op
Iteration   6: 693.502 ns/op
Iteration   7: 691.110 ns/op
Iteration   8: 690.930 ns/op
Iteration   9: 692.963 ns/op
Iteration  10: 691.560 ns/op
Iteration  11: 688.690 ns/op
Iteration  12: 689.126 ns/op
Iteration  13: 689.030 ns/op
Iteration  14: 691.186 ns/op
Iteration  15: 688.998 ns/op
Iteration  16: 689.266 ns/op
Iteration  17: 689.169 ns/op
Iteration  18: 689.186 ns/op
Iteration  19: 689.203 ns/op
Iteration  20: 689.852 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  707.360 Â±(99.9%) 6.766 ns/op [Average]
  (min, avg, max) = (688.690, 707.360, 754.929), stdev = 19.949
  CI (99.9%): [700.595, 714.126] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	 	 
	



			
	

		 
 		 
 
   		
 
	 
	 	
 
		 	
	,	  
		

 	 
 
	 
 					
		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1138.492 ns/op
# Warmup Iteration   2: 821.889 ns/op
# Warmup Iteration   3: 736.067 ns/op
# Warmup Iteration   4: 732.021 ns/op
# Warmup Iteration   5: 737.093 ns/op
Iteration   1: 740.609 ns/op
Iteration   2: 723.989 ns/op
Iteration   3: 723.712 ns/op
Iteration   4: 722.999 ns/op
Iteration   5: 723.408 ns/op
Iteration   6: 723.636 ns/op
Iteration   7: 723.247 ns/op
Iteration   8: 727.102 ns/op
Iteration   9: 723.630 ns/op
Iteration  10: 725.127 ns/op
Iteration  11: 721.283 ns/op
Iteration  12: 721.179 ns/op
Iteration  13: 721.348 ns/op
Iteration  14: 721.057 ns/op
Iteration  15: 721.684 ns/op
Iteration  16: 721.856 ns/op
Iteration  17: 722.418 ns/op
Iteration  18: 722.479 ns/op
Iteration  19: 724.033 ns/op
Iteration  20: 724.101 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1171.528 ns/op
# Warmup Iteration   2: 835.445 ns/op
# Warmup Iteration   3: 738.624 ns/op
# Warmup Iteration   4: 737.857 ns/op
# Warmup Iteration   5: 737.270 ns/op
Iteration   1: 741.743 ns/op
Iteration   2: 725.967 ns/op
Iteration   3: 725.126 ns/op
Iteration   4: 725.012 ns/op
Iteration   5: 725.056 ns/op
Iteration   6: 724.981 ns/op
Iteration   7: 725.118 ns/op
Iteration   8: 724.280 ns/op
Iteration   9: 728.738 ns/op
Iteration  10: 723.329 ns/op
Iteration  11: 722.862 ns/op
Iteration  12: 723.459 ns/op
Iteration  13: 730.124 ns/op
Iteration  14: 728.766 ns/op
Iteration  15: 723.929 ns/op
Iteration  16: 723.108 ns/op
Iteration  17: 723.359 ns/op
Iteration  18: 723.867 ns/op
Iteration  19: 726.908 ns/op
Iteration  20: 723.864 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1218.965 ns/op
# Warmup Iteration   2: 893.679 ns/op
# Warmup Iteration   3: 769.305 ns/op
# Warmup Iteration   4: 771.565 ns/op
# Warmup Iteration   5: 791.824 ns/op
Iteration   1: 783.764 ns/op
Iteration   2: 766.368 ns/op
Iteration   3: 766.089 ns/op
Iteration   4: 765.948 ns/op
Iteration   5: 765.510 ns/op
Iteration   6: 765.605 ns/op
Iteration   7: 765.453 ns/op
Iteration   8: 765.406 ns/op
Iteration   9: 765.699 ns/op
Iteration  10: 765.946 ns/op
Iteration  11: 762.679 ns/op
Iteration  12: 762.361 ns/op
Iteration  13: 762.472 ns/op
Iteration  14: 763.023 ns/op
Iteration  15: 768.603 ns/op
Iteration  16: 774.346 ns/op
Iteration  17: 772.814 ns/op
Iteration  18: 764.605 ns/op
Iteration  19: 763.525 ns/op
Iteration  20: 763.906 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1211.520 ns/op
# Warmup Iteration   2: 854.545 ns/op
# Warmup Iteration   3: 735.615 ns/op
# Warmup Iteration   4: 747.513 ns/op
# Warmup Iteration   5: 744.253 ns/op
Iteration   1: 749.679 ns/op
Iteration   2: 731.322 ns/op
Iteration   3: 731.502 ns/op
Iteration   4: 730.210 ns/op
Iteration   5: 730.693 ns/op
Iteration   6: 730.722 ns/op
Iteration   7: 730.859 ns/op
Iteration   8: 732.995 ns/op
Iteration   9: 730.959 ns/op
Iteration  10: 731.962 ns/op
Iteration  11: 728.060 ns/op
Iteration  12: 725.881 ns/op
Iteration  13: 725.804 ns/op
Iteration  14: 725.965 ns/op
Iteration  15: 726.061 ns/op
Iteration  16: 726.254 ns/op
Iteration  17: 725.949 ns/op
Iteration  18: 726.236 ns/op
Iteration  19: 725.994 ns/op
Iteration  20: 727.315 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1201.091 ns/op
# Warmup Iteration   2: 871.757 ns/op
# Warmup Iteration   3: 762.457 ns/op
# Warmup Iteration   4: 770.837 ns/op
# Warmup Iteration   5: 765.351 ns/op
Iteration   1: 770.958 ns/op
Iteration   2: 753.512 ns/op
Iteration   3: 753.200 ns/op
Iteration   4: 752.747 ns/op
Iteration   5: 752.888 ns/op
Iteration   6: 753.072 ns/op
Iteration   7: 753.399 ns/op
Iteration   8: 753.459 ns/op
Iteration   9: 753.520 ns/op
Iteration  10: 753.252 ns/op
Iteration  11: 751.132 ns/op
Iteration  12: 750.968 ns/op
Iteration  13: 751.025 ns/op
Iteration  14: 756.774 ns/op
Iteration  15: 751.779 ns/op
Iteration  16: 751.491 ns/op
Iteration  17: 752.039 ns/op
Iteration  18: 753.570 ns/op
Iteration  19: 751.859 ns/op
Iteration  20: 751.582 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  739.993 Â±(99.9%) 6.023 ns/op [Average]
  (min, avg, max) = (721.057, 739.993, 783.764), stdev = 17.760
  CI (99.9%): [733.969, 746.016] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	 	 
	



			
	

		 
 		 
 
   		
 
	 
	 	
 
		 	
	,	  
		

 	 
 
	 
 					
		  avgt  100  707.360 Â± 6.766  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	 	 
	



			
	

		 
 		 
 
   		
 
	 
	 	
 
		 	
	,	  
		

 	 
 
	 
 					
		  avgt  100  739.993 Â± 6.023  ns/op

Benchmark result is saved to split_precompiled_regex_216_165_Match.csv
