# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
  	

		 	
 
	 
				 
, 
  	
		   

	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 999.858 ns/op
# Warmup Iteration   2: 617.357 ns/op
# Warmup Iteration   3: 561.259 ns/op
# Warmup Iteration   4: 579.829 ns/op
# Warmup Iteration   5: 569.784 ns/op
Iteration   1: 557.102 ns/op
Iteration   2: 560.010 ns/op
Iteration   3: 557.051 ns/op
Iteration   4: 559.770 ns/op
Iteration   5: 556.513 ns/op
Iteration   6: 556.793 ns/op
Iteration   7: 556.951 ns/op
Iteration   8: 554.145 ns/op
Iteration   9: 555.068 ns/op
Iteration  10: 554.198 ns/op
Iteration  11: 554.220 ns/op
Iteration  12: 555.280 ns/op
Iteration  13: 554.327 ns/op
Iteration  14: 555.544 ns/op
Iteration  15: 553.974 ns/op
Iteration  16: 554.617 ns/op
Iteration  17: 555.545 ns/op
Iteration  18: 554.344 ns/op
Iteration  19: 554.433 ns/op
Iteration  20: 555.674 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 981.439 ns/op
# Warmup Iteration   2: 610.788 ns/op
# Warmup Iteration   3: 558.710 ns/op
# Warmup Iteration   4: 580.987 ns/op
# Warmup Iteration   5: 572.144 ns/op
Iteration   1: 554.317 ns/op
Iteration   2: 557.240 ns/op
Iteration   3: 554.608 ns/op
Iteration   4: 559.681 ns/op
Iteration   5: 556.425 ns/op
Iteration   6: 553.756 ns/op
Iteration   7: 559.000 ns/op
Iteration   8: 552.152 ns/op
Iteration   9: 553.172 ns/op
Iteration  10: 556.291 ns/op
Iteration  11: 552.345 ns/op
Iteration  12: 553.168 ns/op
Iteration  13: 551.801 ns/op
Iteration  14: 553.671 ns/op
Iteration  15: 552.797 ns/op
Iteration  16: 553.635 ns/op
Iteration  17: 556.924 ns/op
Iteration  18: 553.673 ns/op
Iteration  19: 555.665 ns/op
Iteration  20: 553.826 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 979.190 ns/op
# Warmup Iteration   2: 621.013 ns/op
# Warmup Iteration   3: 563.162 ns/op
# Warmup Iteration   4: 578.953 ns/op
# Warmup Iteration   5: 572.069 ns/op
Iteration   1: 559.747 ns/op
Iteration   2: 562.727 ns/op
Iteration   3: 559.378 ns/op
Iteration   4: 562.749 ns/op
Iteration   5: 559.548 ns/op
Iteration   6: 559.043 ns/op
Iteration   7: 560.150 ns/op
Iteration   8: 560.991 ns/op
Iteration   9: 557.367 ns/op
Iteration  10: 558.342 ns/op
Iteration  11: 557.104 ns/op
Iteration  12: 559.019 ns/op
Iteration  13: 558.858 ns/op
Iteration  14: 557.276 ns/op
Iteration  15: 559.743 ns/op
Iteration  16: 557.806 ns/op
Iteration  17: 559.966 ns/op
Iteration  18: 558.492 ns/op
Iteration  19: 557.920 ns/op
Iteration  20: 560.814 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 975.863 ns/op
# Warmup Iteration   2: 616.364 ns/op
# Warmup Iteration   3: 566.485 ns/op
# Warmup Iteration   4: 582.055 ns/op
# Warmup Iteration   5: 575.204 ns/op
Iteration   1: 561.802 ns/op
Iteration   2: 564.695 ns/op
Iteration   3: 561.906 ns/op
Iteration   4: 564.972 ns/op
Iteration   5: 561.988 ns/op
Iteration   6: 561.912 ns/op
Iteration   7: 565.926 ns/op
Iteration   8: 559.383 ns/op
Iteration   9: 559.526 ns/op
Iteration  10: 561.491 ns/op
Iteration  11: 559.990 ns/op
Iteration  12: 561.222 ns/op
Iteration  13: 560.390 ns/op
Iteration  14: 560.672 ns/op
Iteration  15: 564.027 ns/op
Iteration  16: 561.006 ns/op
Iteration  17: 561.213 ns/op
Iteration  18: 561.176 ns/op
Iteration  19: 559.449 ns/op
Iteration  20: 561.674 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 972.216 ns/op
# Warmup Iteration   2: 600.042 ns/op
# Warmup Iteration   3: 553.354 ns/op
# Warmup Iteration   4: 568.388 ns/op
# Warmup Iteration   5: 561.973 ns/op
Iteration   1: 551.102 ns/op
Iteration   2: 547.854 ns/op
Iteration   3: 547.873 ns/op
Iteration   4: 550.113 ns/op
Iteration   5: 547.424 ns/op
Iteration   6: 551.263 ns/op
Iteration   7: 548.268 ns/op
Iteration   8: 547.615 ns/op
Iteration   9: 548.634 ns/op
Iteration  10: 547.238 ns/op
Iteration  11: 548.707 ns/op
Iteration  12: 547.071 ns/op
Iteration  13: 547.446 ns/op
Iteration  14: 548.549 ns/op
Iteration  15: 547.808 ns/op
Iteration  16: 551.931 ns/op
Iteration  17: 556.613 ns/op
Iteration  18: 549.347 ns/op
Iteration  19: 549.651 ns/op
Iteration  20: 547.434 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  556.131 ±(99.9%) 1.610 ns/op [Average]
  (min, avg, max) = (547.071, 556.131, 565.926), stdev = 4.748
  CI (99.9%): [554.521, 557.742] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
  	

		 	
 
	 
				 
, 
  	
		   

	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1020.172 ns/op
# Warmup Iteration   2: 619.284 ns/op
# Warmup Iteration   3: 566.574 ns/op
# Warmup Iteration   4: 581.243 ns/op
# Warmup Iteration   5: 575.065 ns/op
Iteration   1: 564.652 ns/op
Iteration   2: 562.105 ns/op
Iteration   3: 562.102 ns/op
Iteration   4: 564.685 ns/op
Iteration   5: 561.862 ns/op
Iteration   6: 565.269 ns/op
Iteration   7: 559.679 ns/op
Iteration   8: 560.007 ns/op
Iteration   9: 562.545 ns/op
Iteration  10: 564.927 ns/op
Iteration  11: 561.873 ns/op
Iteration  12: 561.073 ns/op
Iteration  13: 560.836 ns/op
Iteration  14: 562.557 ns/op
Iteration  15: 561.096 ns/op
Iteration  16: 562.525 ns/op
Iteration  17: 560.335 ns/op
Iteration  18: 560.826 ns/op
Iteration  19: 563.685 ns/op
Iteration  20: 560.509 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 984.762 ns/op
# Warmup Iteration   2: 611.101 ns/op
# Warmup Iteration   3: 569.223 ns/op
# Warmup Iteration   4: 583.886 ns/op
# Warmup Iteration   5: 577.933 ns/op
Iteration   1: 566.188 ns/op
Iteration   2: 563.209 ns/op
Iteration   3: 563.843 ns/op
Iteration   4: 566.343 ns/op
Iteration   5: 563.746 ns/op
Iteration   6: 566.449 ns/op
Iteration   7: 561.741 ns/op
Iteration   8: 561.634 ns/op
Iteration   9: 566.896 ns/op
Iteration  10: 562.329 ns/op
Iteration  11: 563.496 ns/op
Iteration  12: 562.183 ns/op
Iteration  13: 562.654 ns/op
Iteration  14: 564.775 ns/op
Iteration  15: 562.191 ns/op
Iteration  16: 564.113 ns/op
Iteration  17: 562.604 ns/op
Iteration  18: 562.751 ns/op
Iteration  19: 564.227 ns/op
Iteration  20: 562.557 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 997.231 ns/op
# Warmup Iteration   2: 624.814 ns/op
# Warmup Iteration   3: 577.832 ns/op
# Warmup Iteration   4: 592.227 ns/op
# Warmup Iteration   5: 585.428 ns/op
Iteration   1: 574.648 ns/op
Iteration   2: 577.564 ns/op
Iteration   3: 575.371 ns/op
Iteration   4: 576.204 ns/op
Iteration   5: 573.120 ns/op
Iteration   6: 572.817 ns/op
Iteration   7: 574.323 ns/op
Iteration   8: 571.027 ns/op
Iteration   9: 570.918 ns/op
Iteration  10: 576.708 ns/op
Iteration  11: 571.134 ns/op
Iteration  12: 572.344 ns/op
Iteration  13: 570.939 ns/op
Iteration  14: 571.352 ns/op
Iteration  15: 573.198 ns/op
Iteration  16: 571.888 ns/op
Iteration  17: 575.324 ns/op
Iteration  18: 572.791 ns/op
Iteration  19: 572.087 ns/op
Iteration  20: 574.050 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1014.013 ns/op
# Warmup Iteration   2: 624.918 ns/op
# Warmup Iteration   3: 573.120 ns/op
# Warmup Iteration   4: 588.961 ns/op
# Warmup Iteration   5: 582.435 ns/op
Iteration   1: 569.257 ns/op
Iteration   2: 571.541 ns/op
Iteration   3: 568.891 ns/op
Iteration   4: 571.817 ns/op
Iteration   5: 569.025 ns/op
Iteration   6: 569.201 ns/op
Iteration   7: 570.061 ns/op
Iteration   8: 567.121 ns/op
Iteration   9: 569.435 ns/op
Iteration  10: 567.010 ns/op
Iteration  11: 567.223 ns/op
Iteration  12: 573.553 ns/op
Iteration  13: 567.685 ns/op
Iteration  14: 568.848 ns/op
Iteration  15: 567.824 ns/op
Iteration  16: 567.714 ns/op
Iteration  17: 568.923 ns/op
Iteration  18: 572.374 ns/op
Iteration  19: 568.143 ns/op
Iteration  20: 570.523 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 995.657 ns/op
# Warmup Iteration   2: 623.915 ns/op
# Warmup Iteration   3: 581.725 ns/op
# Warmup Iteration   4: 596.954 ns/op
# Warmup Iteration   5: 587.725 ns/op
Iteration   1: 578.802 ns/op
Iteration   2: 578.753 ns/op
Iteration   3: 574.100 ns/op
Iteration   4: 577.244 ns/op
Iteration   5: 576.843 ns/op
Iteration   6: 573.426 ns/op
Iteration   7: 575.793 ns/op
Iteration   8: 573.521 ns/op
Iteration   9: 571.949 ns/op
Iteration  10: 574.546 ns/op
Iteration  11: 576.908 ns/op
Iteration  12: 578.597 ns/op
Iteration  13: 586.148 ns/op
Iteration  14: 577.418 ns/op
Iteration  15: 575.968 ns/op
Iteration  16: 573.044 ns/op
Iteration  17: 571.987 ns/op
Iteration  18: 573.197 ns/op
Iteration  19: 573.118 ns/op
Iteration  20: 573.694 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  568.861 ±(99.9%) 1.946 ns/op [Average]
  (min, avg, max) = (559.679, 568.861, 586.148), stdev = 5.737
  CI (99.9%): [566.915, 570.807] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                             (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
  	

		 	
 
	 
				 
, 
  	
		   

	  avgt  100  556.131 ± 1.610  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
  	

		 	
 
	 
				 
, 
  	
		   

	  avgt  100  568.861 ± 1.946  ns/op

Benchmark result is saved to split_precompiled_regex_52_84_Match.csv
