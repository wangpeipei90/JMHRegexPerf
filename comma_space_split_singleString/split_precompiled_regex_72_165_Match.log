# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	

		 
			 	  	
 , 		



	
  	 	
 

				  	
 	  	
		
	 
 


 

	
 
 	




 	
	
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1167.064 ns/op
# Warmup Iteration   2: 868.853 ns/op
# Warmup Iteration   3: 752.733 ns/op
# Warmup Iteration   4: 758.382 ns/op
# Warmup Iteration   5: 771.810 ns/op
Iteration   1: 768.552 ns/op
Iteration   2: 749.489 ns/op
Iteration   3: 749.453 ns/op
Iteration   4: 748.162 ns/op
Iteration   5: 748.070 ns/op
Iteration   6: 748.606 ns/op
Iteration   7: 748.038 ns/op
Iteration   8: 748.516 ns/op
Iteration   9: 748.909 ns/op
Iteration  10: 749.190 ns/op
Iteration  11: 746.907 ns/op
Iteration  12: 746.738 ns/op
Iteration  13: 749.834 ns/op
Iteration  14: 747.050 ns/op
Iteration  15: 746.184 ns/op
Iteration  16: 746.391 ns/op
Iteration  17: 746.725 ns/op
Iteration  18: 746.842 ns/op
Iteration  19: 746.519 ns/op
Iteration  20: 746.471 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1220.745 ns/op
# Warmup Iteration   2: 894.839 ns/op
# Warmup Iteration   3: 760.426 ns/op
# Warmup Iteration   4: 761.682 ns/op
# Warmup Iteration   5: 771.353 ns/op
Iteration   1: 773.677 ns/op
Iteration   2: 764.691 ns/op
Iteration   3: 760.761 ns/op
Iteration   4: 755.745 ns/op
Iteration   5: 755.812 ns/op
Iteration   6: 756.276 ns/op
Iteration   7: 756.463 ns/op
Iteration   8: 756.126 ns/op
Iteration   9: 755.909 ns/op
Iteration  10: 755.846 ns/op
Iteration  11: 753.397 ns/op
Iteration  12: 753.669 ns/op
Iteration  13: 753.752 ns/op
Iteration  14: 753.112 ns/op
Iteration  15: 754.473 ns/op
Iteration  16: 753.393 ns/op
Iteration  17: 754.893 ns/op
Iteration  18: 754.862 ns/op
Iteration  19: 754.058 ns/op
Iteration  20: 753.697 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1168.005 ns/op
# Warmup Iteration   2: 864.797 ns/op
# Warmup Iteration   3: 747.677 ns/op
# Warmup Iteration   4: 763.388 ns/op
# Warmup Iteration   5: 756.745 ns/op
Iteration   1: 761.568 ns/op
Iteration   2: 745.528 ns/op
Iteration   3: 743.924 ns/op
Iteration   4: 743.822 ns/op
Iteration   5: 743.072 ns/op
Iteration   6: 743.265 ns/op
Iteration   7: 743.984 ns/op
Iteration   8: 743.687 ns/op
Iteration   9: 743.409 ns/op
Iteration  10: 743.695 ns/op
Iteration  11: 741.337 ns/op
Iteration  12: 745.416 ns/op
Iteration  13: 742.136 ns/op
Iteration  14: 741.551 ns/op
Iteration  15: 742.253 ns/op
Iteration  16: 742.118 ns/op
Iteration  17: 742.613 ns/op
Iteration  18: 743.095 ns/op
Iteration  19: 743.731 ns/op
Iteration  20: 743.711 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1165.260 ns/op
# Warmup Iteration   2: 873.350 ns/op
# Warmup Iteration   3: 752.857 ns/op
# Warmup Iteration   4: 757.363 ns/op
# Warmup Iteration   5: 768.036 ns/op
Iteration   1: 764.270 ns/op
Iteration   2: 747.392 ns/op
Iteration   3: 747.110 ns/op
Iteration   4: 746.582 ns/op
Iteration   5: 746.514 ns/op
Iteration   6: 747.118 ns/op
Iteration   7: 747.451 ns/op
Iteration   8: 747.609 ns/op
Iteration   9: 747.946 ns/op
Iteration  10: 747.982 ns/op
Iteration  11: 746.093 ns/op
Iteration  12: 746.254 ns/op
Iteration  13: 745.784 ns/op
Iteration  14: 744.950 ns/op
Iteration  15: 744.928 ns/op
Iteration  16: 745.376 ns/op
Iteration  17: 746.103 ns/op
Iteration  18: 750.533 ns/op
Iteration  19: 747.879 ns/op
Iteration  20: 749.750 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1105.914 ns/op
# Warmup Iteration   2: 777.756 ns/op
# Warmup Iteration   3: 690.826 ns/op
# Warmup Iteration   4: 687.660 ns/op
# Warmup Iteration   5: 691.529 ns/op
Iteration   1: 695.874 ns/op
Iteration   2: 679.879 ns/op
Iteration   3: 679.929 ns/op
Iteration   4: 683.296 ns/op
Iteration   5: 679.610 ns/op
Iteration   6: 679.310 ns/op
Iteration   7: 680.366 ns/op
Iteration   8: 680.989 ns/op
Iteration   9: 680.941 ns/op
Iteration  10: 682.018 ns/op
Iteration  11: 677.578 ns/op
Iteration  12: 679.132 ns/op
Iteration  13: 677.222 ns/op
Iteration  14: 677.643 ns/op
Iteration  15: 677.829 ns/op
Iteration  16: 677.901 ns/op
Iteration  17: 679.892 ns/op
Iteration  18: 679.176 ns/op
Iteration  19: 681.366 ns/op
Iteration  20: 679.505 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  735.583 Â±(99.9%) 9.604 ns/op [Average]
  (min, avg, max) = (677.222, 735.583, 773.677), stdev = 28.317
  CI (99.9%): [725.979, 745.186] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
	

		 
			 	  	
 , 		



	
  	 	
 

				  	
 	  	
		
	 
 


 

	
 
 	




 	
	
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1127.718 ns/op
# Warmup Iteration   2: 802.695 ns/op
# Warmup Iteration   3: 720.133 ns/op
# Warmup Iteration   4: 716.405 ns/op
# Warmup Iteration   5: 719.919 ns/op
Iteration   1: 724.307 ns/op
Iteration   2: 707.844 ns/op
Iteration   3: 708.041 ns/op
Iteration   4: 708.241 ns/op
Iteration   5: 707.077 ns/op
Iteration   6: 714.669 ns/op
Iteration   7: 713.788 ns/op
Iteration   8: 707.554 ns/op
Iteration   9: 707.984 ns/op
Iteration  10: 705.635 ns/op
Iteration  11: 711.396 ns/op
Iteration  12: 706.260 ns/op
Iteration  13: 706.308 ns/op
Iteration  14: 708.496 ns/op
Iteration  15: 706.560 ns/op
Iteration  16: 707.107 ns/op
Iteration  17: 707.731 ns/op
Iteration  18: 706.680 ns/op
Iteration  19: 709.455 ns/op
Iteration  20: 708.398 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1218.511 ns/op
# Warmup Iteration   2: 900.629 ns/op
# Warmup Iteration   3: 776.884 ns/op
# Warmup Iteration   4: 779.417 ns/op
# Warmup Iteration   5: 799.098 ns/op
Iteration   1: 790.581 ns/op
Iteration   2: 774.947 ns/op
Iteration   3: 773.147 ns/op
Iteration   4: 773.192 ns/op
Iteration   5: 773.119 ns/op
Iteration   6: 772.763 ns/op
Iteration   7: 773.314 ns/op
Iteration   8: 772.716 ns/op
Iteration   9: 772.467 ns/op
Iteration  10: 772.962 ns/op
Iteration  11: 770.291 ns/op
Iteration  12: 770.107 ns/op
Iteration  13: 776.537 ns/op
Iteration  14: 769.660 ns/op
Iteration  15: 769.331 ns/op
Iteration  16: 769.332 ns/op
Iteration  17: 769.747 ns/op
Iteration  18: 769.996 ns/op
Iteration  19: 770.083 ns/op
Iteration  20: 771.148 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1193.605 ns/op
# Warmup Iteration   2: 888.886 ns/op
# Warmup Iteration   3: 776.026 ns/op
# Warmup Iteration   4: 793.437 ns/op
# Warmup Iteration   5: 785.602 ns/op
Iteration   1: 789.552 ns/op
Iteration   2: 777.285 ns/op
Iteration   3: 773.762 ns/op
Iteration   4: 772.299 ns/op
Iteration   5: 772.073 ns/op
Iteration   6: 771.904 ns/op
Iteration   7: 772.008 ns/op
Iteration   8: 771.969 ns/op
Iteration   9: 772.155 ns/op
Iteration  10: 775.683 ns/op
Iteration  11: 769.844 ns/op
Iteration  12: 769.623 ns/op
Iteration  13: 769.357 ns/op
Iteration  14: 769.057 ns/op
Iteration  15: 769.177 ns/op
Iteration  16: 775.872 ns/op
Iteration  17: 770.732 ns/op
Iteration  18: 770.357 ns/op
Iteration  19: 770.441 ns/op
Iteration  20: 770.453 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1206.684 ns/op
# Warmup Iteration   2: 908.338 ns/op
# Warmup Iteration   3: 785.763 ns/op
# Warmup Iteration   4: 787.737 ns/op
# Warmup Iteration   5: 794.861 ns/op
Iteration   1: 798.336 ns/op
Iteration   2: 792.379 ns/op
Iteration   3: 782.153 ns/op
Iteration   4: 781.889 ns/op
Iteration   5: 785.312 ns/op
Iteration   6: 785.272 ns/op
Iteration   7: 782.166 ns/op
Iteration   8: 784.211 ns/op
Iteration   9: 781.413 ns/op
Iteration  10: 781.904 ns/op
Iteration  11: 778.709 ns/op
Iteration  12: 778.521 ns/op
Iteration  13: 778.718 ns/op
Iteration  14: 780.266 ns/op
Iteration  15: 782.376 ns/op
Iteration  16: 779.780 ns/op
Iteration  17: 779.445 ns/op
Iteration  18: 779.148 ns/op
Iteration  19: 779.804 ns/op
Iteration  20: 779.758 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1213.589 ns/op
# Warmup Iteration   2: 910.266 ns/op
# Warmup Iteration   3: 786.242 ns/op
# Warmup Iteration   4: 791.213 ns/op
# Warmup Iteration   5: 792.894 ns/op
Iteration   1: 800.011 ns/op
Iteration   2: 803.464 ns/op
Iteration   3: 782.763 ns/op
Iteration   4: 782.962 ns/op
Iteration   5: 782.189 ns/op
Iteration   6: 782.900 ns/op
Iteration   7: 786.835 ns/op
Iteration   8: 783.815 ns/op
Iteration   9: 783.321 ns/op
Iteration  10: 784.411 ns/op
Iteration  11: 780.747 ns/op
Iteration  12: 780.557 ns/op
Iteration  13: 781.840 ns/op
Iteration  14: 780.683 ns/op
Iteration  15: 780.842 ns/op
Iteration  16: 780.678 ns/op
Iteration  17: 781.320 ns/op
Iteration  18: 781.705 ns/op
Iteration  19: 782.436 ns/op
Iteration  20: 781.558 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  764.292 Â±(99.9%) 9.677 ns/op [Average]
  (min, avg, max) = (705.635, 764.292, 803.464), stdev = 28.534
  CI (99.9%): [754.614, 773.969] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
	

		 
			 	  	
 , 		



	
  	 	
 

				  	
 	  	
		
	 
 


 

	
 
 	




 	
	
  avgt  100  735.583 Â± 9.604  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
	

		 
			 	  	
 , 		



	
  	 	
 

				  	
 	  	
		
	 
 


 

	
 
 	




 	
	
  avgt  100  764.292 Â± 9.677  ns/op

Benchmark result is saved to split_precompiled_regex_72_165_Match.csv
