# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 		
 
		 
 ,





 	


	 				



 
  
	
 


	 
		 
	
 	   			
		   

  
   

 	  	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1237.007 ns/op
# Warmup Iteration   2: 900.325 ns/op
# Warmup Iteration   3: 769.927 ns/op
# Warmup Iteration   4: 768.593 ns/op
# Warmup Iteration   5: 771.195 ns/op
Iteration   1: 774.604 ns/op
Iteration   2: 779.801 ns/op
Iteration   3: 761.182 ns/op
Iteration   4: 760.884 ns/op
Iteration   5: 761.895 ns/op
Iteration   6: 761.921 ns/op
Iteration   7: 764.677 ns/op
Iteration   8: 761.760 ns/op
Iteration   9: 761.655 ns/op
Iteration  10: 761.307 ns/op
Iteration  11: 759.664 ns/op
Iteration  12: 759.452 ns/op
Iteration  13: 759.300 ns/op
Iteration  14: 759.571 ns/op
Iteration  15: 759.472 ns/op
Iteration  16: 759.485 ns/op
Iteration  17: 759.464 ns/op
Iteration  18: 759.374 ns/op
Iteration  19: 759.355 ns/op
Iteration  20: 759.780 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1177.181 ns/op
# Warmup Iteration   2: 881.900 ns/op
# Warmup Iteration   3: 762.058 ns/op
# Warmup Iteration   4: 764.549 ns/op
# Warmup Iteration   5: 785.010 ns/op
Iteration   1: 776.267 ns/op
Iteration   2: 759.361 ns/op
Iteration   3: 758.661 ns/op
Iteration   4: 757.773 ns/op
Iteration   5: 758.639 ns/op
Iteration   6: 757.524 ns/op
Iteration   7: 758.164 ns/op
Iteration   8: 758.639 ns/op
Iteration   9: 758.093 ns/op
Iteration  10: 758.143 ns/op
Iteration  11: 755.962 ns/op
Iteration  12: 755.692 ns/op
Iteration  13: 755.479 ns/op
Iteration  14: 764.157 ns/op
Iteration  15: 756.240 ns/op
Iteration  16: 756.606 ns/op
Iteration  17: 756.555 ns/op
Iteration  18: 755.826 ns/op
Iteration  19: 756.690 ns/op
Iteration  20: 766.267 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1176.011 ns/op
# Warmup Iteration   2: 879.427 ns/op
# Warmup Iteration   3: 765.246 ns/op
# Warmup Iteration   4: 763.926 ns/op
# Warmup Iteration   5: 777.111 ns/op
Iteration   1: 776.888 ns/op
Iteration   2: 769.078 ns/op
Iteration   3: 756.869 ns/op
Iteration   4: 756.623 ns/op
Iteration   5: 756.814 ns/op
Iteration   6: 758.216 ns/op
Iteration   7: 757.138 ns/op
Iteration   8: 759.293 ns/op
Iteration   9: 758.991 ns/op
Iteration  10: 757.561 ns/op
Iteration  11: 759.017 ns/op
Iteration  12: 758.654 ns/op
Iteration  13: 753.946 ns/op
Iteration  14: 754.268 ns/op
Iteration  15: 754.231 ns/op
Iteration  16: 753.547 ns/op
Iteration  17: 753.480 ns/op
Iteration  18: 755.169 ns/op
Iteration  19: 754.617 ns/op
Iteration  20: 753.946 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1230.053 ns/op
# Warmup Iteration   2: 892.504 ns/op
# Warmup Iteration   3: 764.608 ns/op
# Warmup Iteration   4: 767.439 ns/op
# Warmup Iteration   5: 779.324 ns/op
Iteration   1: 779.437 ns/op
Iteration   2: 767.686 ns/op
Iteration   3: 764.846 ns/op
Iteration   4: 761.500 ns/op
Iteration   5: 761.070 ns/op
Iteration   6: 760.860 ns/op
Iteration   7: 761.238 ns/op
Iteration   8: 760.317 ns/op
Iteration   9: 761.173 ns/op
Iteration  10: 760.836 ns/op
Iteration  11: 758.695 ns/op
Iteration  12: 758.717 ns/op
Iteration  13: 758.557 ns/op
Iteration  14: 758.502 ns/op
Iteration  15: 758.326 ns/op
Iteration  16: 758.958 ns/op
Iteration  17: 759.459 ns/op
Iteration  18: 758.832 ns/op
Iteration  19: 758.769 ns/op
Iteration  20: 758.487 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1179.492 ns/op
# Warmup Iteration   2: 884.263 ns/op
# Warmup Iteration   3: 762.508 ns/op
# Warmup Iteration   4: 765.155 ns/op
# Warmup Iteration   5: 778.406 ns/op
Iteration   1: 776.667 ns/op
Iteration   2: 766.161 ns/op
Iteration   3: 759.787 ns/op
Iteration   4: 765.219 ns/op
Iteration   5: 758.671 ns/op
Iteration   6: 759.160 ns/op
Iteration   7: 758.408 ns/op
Iteration   8: 759.193 ns/op
Iteration   9: 759.702 ns/op
Iteration  10: 759.125 ns/op
Iteration  11: 759.625 ns/op
Iteration  12: 757.237 ns/op
Iteration  13: 756.824 ns/op
Iteration  14: 762.595 ns/op
Iteration  15: 757.294 ns/op
Iteration  16: 757.756 ns/op
Iteration  17: 757.133 ns/op
Iteration  18: 757.246 ns/op
Iteration  19: 757.163 ns/op
Iteration  20: 757.669 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  760.126 Â±(99.9%) 1.775 ns/op [Average]
  (min, avg, max) = (753.480, 760.126, 779.801), stdev = 5.235
  CI (99.9%): [758.350, 761.901] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 		
 
		 
 ,





 	


	 				



 
  
	
 


	 
		 
	
 	   			
		   

  
   

 	  	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1182.068 ns/op
# Warmup Iteration   2: 855.700 ns/op
# Warmup Iteration   3: 744.821 ns/op
# Warmup Iteration   4: 759.465 ns/op
# Warmup Iteration   5: 753.422 ns/op
Iteration   1: 756.966 ns/op
Iteration   2: 741.014 ns/op
Iteration   3: 740.259 ns/op
Iteration   4: 740.782 ns/op
Iteration   5: 740.923 ns/op
Iteration   6: 743.013 ns/op
Iteration   7: 741.313 ns/op
Iteration   8: 740.400 ns/op
Iteration   9: 740.161 ns/op
Iteration  10: 740.734 ns/op
Iteration  11: 738.183 ns/op
Iteration  12: 738.161 ns/op
Iteration  13: 740.104 ns/op
Iteration  14: 738.692 ns/op
Iteration  15: 738.928 ns/op
Iteration  16: 738.619 ns/op
Iteration  17: 739.154 ns/op
Iteration  18: 739.597 ns/op
Iteration  19: 740.268 ns/op
Iteration  20: 738.958 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1254.998 ns/op
# Warmup Iteration   2: 920.365 ns/op
# Warmup Iteration   3: 783.310 ns/op
# Warmup Iteration   4: 788.855 ns/op
# Warmup Iteration   5: 791.031 ns/op
Iteration   1: 791.199 ns/op
Iteration   2: 795.873 ns/op
Iteration   3: 778.549 ns/op
Iteration   4: 778.473 ns/op
Iteration   5: 778.208 ns/op
Iteration   6: 778.344 ns/op
Iteration   7: 782.005 ns/op
Iteration   8: 777.400 ns/op
Iteration   9: 777.823 ns/op
Iteration  10: 778.827 ns/op
Iteration  11: 775.924 ns/op
Iteration  12: 775.648 ns/op
Iteration  13: 780.642 ns/op
Iteration  14: 779.654 ns/op
Iteration  15: 775.763 ns/op
Iteration  16: 781.661 ns/op
Iteration  17: 778.295 ns/op
Iteration  18: 777.341 ns/op
Iteration  19: 776.557 ns/op
Iteration  20: 776.728 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1238.649 ns/op
# Warmup Iteration   2: 927.190 ns/op
# Warmup Iteration   3: 794.162 ns/op
# Warmup Iteration   4: 796.805 ns/op
# Warmup Iteration   5: 800.479 ns/op
Iteration   1: 804.021 ns/op
Iteration   2: 809.591 ns/op
Iteration   3: 790.537 ns/op
Iteration   4: 790.707 ns/op
Iteration   5: 789.355 ns/op
Iteration   6: 790.672 ns/op
Iteration   7: 789.742 ns/op
Iteration   8: 790.887 ns/op
Iteration   9: 790.820 ns/op
Iteration  10: 791.490 ns/op
Iteration  11: 793.584 ns/op
Iteration  12: 789.900 ns/op
Iteration  13: 789.753 ns/op
Iteration  14: 789.589 ns/op
Iteration  15: 789.616 ns/op
Iteration  16: 791.826 ns/op
Iteration  17: 795.990 ns/op
Iteration  18: 789.741 ns/op
Iteration  19: 789.846 ns/op
Iteration  20: 789.236 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1194.733 ns/op
# Warmup Iteration   2: 876.979 ns/op
# Warmup Iteration   3: 758.994 ns/op
# Warmup Iteration   4: 775.612 ns/op
# Warmup Iteration   5: 767.150 ns/op
Iteration   1: 770.052 ns/op
Iteration   2: 754.402 ns/op
Iteration   3: 753.979 ns/op
Iteration   4: 753.683 ns/op
Iteration   5: 754.075 ns/op
Iteration   6: 753.564 ns/op
Iteration   7: 754.430 ns/op
Iteration   8: 753.948 ns/op
Iteration   9: 754.139 ns/op
Iteration  10: 753.915 ns/op
Iteration  11: 751.637 ns/op
Iteration  12: 750.515 ns/op
Iteration  13: 750.522 ns/op
Iteration  14: 750.682 ns/op
Iteration  15: 750.714 ns/op
Iteration  16: 752.143 ns/op
Iteration  17: 752.331 ns/op
Iteration  18: 751.472 ns/op
Iteration  19: 754.399 ns/op
Iteration  20: 752.683 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1216.248 ns/op
# Warmup Iteration   2: 922.751 ns/op
# Warmup Iteration   3: 790.994 ns/op
# Warmup Iteration   4: 791.694 ns/op
# Warmup Iteration   5: 795.820 ns/op
Iteration   1: 800.101 ns/op
Iteration   2: 804.462 ns/op
Iteration   3: 787.383 ns/op
Iteration   4: 786.066 ns/op
Iteration   5: 786.951 ns/op
Iteration   6: 785.594 ns/op
Iteration   7: 785.021 ns/op
Iteration   8: 785.570 ns/op
Iteration   9: 786.818 ns/op
Iteration  10: 787.449 ns/op
Iteration  11: 787.928 ns/op
Iteration  12: 790.374 ns/op
Iteration  13: 786.652 ns/op
Iteration  14: 784.875 ns/op
Iteration  15: 785.124 ns/op
Iteration  16: 784.932 ns/op
Iteration  17: 785.399 ns/op
Iteration  18: 791.624 ns/op
Iteration  19: 787.957 ns/op
Iteration  20: 785.352 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  770.970 Â±(99.9%) 7.069 ns/op [Average]
  (min, avg, max) = (738.161, 770.970, 809.591), stdev = 20.842
  CI (99.9%): [763.901, 778.038] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                  (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 		
 
		 
 ,





 	


	 				



 
  
	
 


	 
		 
	
 	   			
		   

  
   

 	  	  avgt  100  760.126 Â± 1.775  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 		
 
		 
 ,





 	


	 				



 
  
	
 


	 
		 
	
 	   			
		   

  
   

 	  	  avgt  100  770.970 Â± 7.069  ns/op

Benchmark result is saved to split_precompiled_regex_103_169_Match.csv
