# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 		
 
,
  

 	
	
	 

 		 	
	

	
	  		 

 	 
 	 

	  	


 	   


		 	  





	

  
 

 	  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1135.100 ns/op
# Warmup Iteration   2: 811.261 ns/op
# Warmup Iteration   3: 717.189 ns/op
# Warmup Iteration   4: 712.964 ns/op
# Warmup Iteration   5: 716.732 ns/op
Iteration   1: 721.492 ns/op
Iteration   2: 705.335 ns/op
Iteration   3: 704.346 ns/op
Iteration   4: 704.130 ns/op
Iteration   5: 704.449 ns/op
Iteration   6: 704.327 ns/op
Iteration   7: 705.088 ns/op
Iteration   8: 708.273 ns/op
Iteration   9: 705.095 ns/op
Iteration  10: 703.463 ns/op
Iteration  11: 703.508 ns/op
Iteration  12: 708.150 ns/op
Iteration  13: 702.728 ns/op
Iteration  14: 702.605 ns/op
Iteration  15: 702.103 ns/op
Iteration  16: 702.281 ns/op
Iteration  17: 702.821 ns/op
Iteration  18: 704.896 ns/op
Iteration  19: 703.426 ns/op
Iteration  20: 706.299 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1229.481 ns/op
# Warmup Iteration   2: 890.878 ns/op
# Warmup Iteration   3: 754.894 ns/op
# Warmup Iteration   4: 758.216 ns/op
# Warmup Iteration   5: 769.281 ns/op
Iteration   1: 770.155 ns/op
Iteration   2: 758.347 ns/op
Iteration   3: 751.309 ns/op
Iteration   4: 751.589 ns/op
Iteration   5: 751.087 ns/op
Iteration   6: 751.068 ns/op
Iteration   7: 751.273 ns/op
Iteration   8: 751.340 ns/op
Iteration   9: 751.759 ns/op
Iteration  10: 751.272 ns/op
Iteration  11: 748.597 ns/op
Iteration  12: 748.523 ns/op
Iteration  13: 748.786 ns/op
Iteration  14: 748.665 ns/op
Iteration  15: 749.081 ns/op
Iteration  16: 748.696 ns/op
Iteration  17: 749.691 ns/op
Iteration  18: 749.159 ns/op
Iteration  19: 748.863 ns/op
Iteration  20: 750.255 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1229.031 ns/op
# Warmup Iteration   2: 882.231 ns/op
# Warmup Iteration   3: 755.286 ns/op
# Warmup Iteration   4: 757.992 ns/op
# Warmup Iteration   5: 777.667 ns/op
Iteration   1: 768.816 ns/op
Iteration   2: 751.303 ns/op
Iteration   3: 757.420 ns/op
Iteration   4: 751.111 ns/op
Iteration   5: 751.206 ns/op
Iteration   6: 751.118 ns/op
Iteration   7: 751.302 ns/op
Iteration   8: 750.910 ns/op
Iteration   9: 751.009 ns/op
Iteration  10: 750.830 ns/op
Iteration  11: 748.436 ns/op
Iteration  12: 748.383 ns/op
Iteration  13: 749.006 ns/op
Iteration  14: 748.268 ns/op
Iteration  15: 748.251 ns/op
Iteration  16: 748.458 ns/op
Iteration  17: 748.564 ns/op
Iteration  18: 748.727 ns/op
Iteration  19: 748.114 ns/op
Iteration  20: 748.841 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1279.444 ns/op
# Warmup Iteration   2: 959.649 ns/op
# Warmup Iteration   3: 803.770 ns/op
# Warmup Iteration   4: 805.653 ns/op
# Warmup Iteration   5: 809.026 ns/op
Iteration   1: 812.720 ns/op
Iteration   2: 818.155 ns/op
Iteration   3: 798.798 ns/op
Iteration   4: 798.533 ns/op
Iteration   5: 798.216 ns/op
Iteration   6: 797.946 ns/op
Iteration   7: 798.359 ns/op
Iteration   8: 799.389 ns/op
Iteration   9: 798.928 ns/op
Iteration  10: 799.806 ns/op
Iteration  11: 799.718 ns/op
Iteration  12: 797.514 ns/op
Iteration  13: 797.591 ns/op
Iteration  14: 799.728 ns/op
Iteration  15: 805.508 ns/op
Iteration  16: 798.409 ns/op
Iteration  17: 798.733 ns/op
Iteration  18: 799.554 ns/op
Iteration  19: 797.920 ns/op
Iteration  20: 799.007 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1178.096 ns/op
# Warmup Iteration   2: 828.693 ns/op
# Warmup Iteration   3: 721.298 ns/op
# Warmup Iteration   4: 739.032 ns/op
# Warmup Iteration   5: 731.460 ns/op
Iteration   1: 735.551 ns/op
Iteration   2: 719.476 ns/op
Iteration   3: 718.085 ns/op
Iteration   4: 719.754 ns/op
Iteration   5: 717.658 ns/op
Iteration   6: 717.469 ns/op
Iteration   7: 717.560 ns/op
Iteration   8: 717.347 ns/op
Iteration   9: 718.103 ns/op
Iteration  10: 719.143 ns/op
Iteration  11: 722.138 ns/op
Iteration  12: 719.590 ns/op
Iteration  13: 716.136 ns/op
Iteration  14: 715.280 ns/op
Iteration  15: 715.424 ns/op
Iteration  16: 715.212 ns/op
Iteration  17: 716.615 ns/op
Iteration  18: 716.119 ns/op
Iteration  19: 716.183 ns/op
Iteration  20: 716.926 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  745.387 Â±(99.9%) 11.380 ns/op [Average]
  (min, avg, max) = (702.103, 745.387, 818.155), stdev = 33.553
  CI (99.9%): [734.007, 756.767] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 		
 
,
  

 	
	
	 

 		 	
	

	
	  		 

 	 
 	 

	  	


 	   


		 	  





	

  
 

 	  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1268.586 ns/op
# Warmup Iteration   2: 974.254 ns/op
# Warmup Iteration   3: 827.052 ns/op
# Warmup Iteration   4: 829.987 ns/op
# Warmup Iteration   5: 833.109 ns/op
Iteration   1: 837.455 ns/op
Iteration   2: 842.025 ns/op
Iteration   3: 824.158 ns/op
Iteration   4: 823.875 ns/op
Iteration   5: 823.902 ns/op
Iteration   6: 824.118 ns/op
Iteration   7: 824.147 ns/op
Iteration   8: 824.682 ns/op
Iteration   9: 824.065 ns/op
Iteration  10: 824.940 ns/op
Iteration  11: 826.256 ns/op
Iteration  12: 823.324 ns/op
Iteration  13: 824.912 ns/op
Iteration  14: 822.148 ns/op
Iteration  15: 822.604 ns/op
Iteration  16: 823.119 ns/op
Iteration  17: 821.888 ns/op
Iteration  18: 819.413 ns/op
Iteration  19: 821.670 ns/op
Iteration  20: 822.279 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1189.050 ns/op
# Warmup Iteration   2: 850.287 ns/op
# Warmup Iteration   3: 739.181 ns/op
# Warmup Iteration   4: 755.227 ns/op
# Warmup Iteration   5: 747.453 ns/op
Iteration   1: 753.339 ns/op
Iteration   2: 736.682 ns/op
Iteration   3: 735.983 ns/op
Iteration   4: 735.409 ns/op
Iteration   5: 735.814 ns/op
Iteration   6: 735.620 ns/op
Iteration   7: 735.751 ns/op
Iteration   8: 735.470 ns/op
Iteration   9: 735.468 ns/op
Iteration  10: 735.094 ns/op
Iteration  11: 733.990 ns/op
Iteration  12: 732.847 ns/op
Iteration  13: 732.928 ns/op
Iteration  14: 733.162 ns/op
Iteration  15: 733.022 ns/op
Iteration  16: 732.618 ns/op
Iteration  17: 733.946 ns/op
Iteration  18: 733.694 ns/op
Iteration  19: 733.283 ns/op
Iteration  20: 733.581 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1186.670 ns/op
# Warmup Iteration   2: 853.323 ns/op
# Warmup Iteration   3: 738.781 ns/op
# Warmup Iteration   4: 753.452 ns/op
# Warmup Iteration   5: 747.656 ns/op
Iteration   1: 752.688 ns/op
Iteration   2: 734.972 ns/op
Iteration   3: 735.326 ns/op
Iteration   4: 735.017 ns/op
Iteration   5: 735.144 ns/op
Iteration   6: 734.761 ns/op
Iteration   7: 734.460 ns/op
Iteration   8: 734.500 ns/op
Iteration   9: 734.587 ns/op
Iteration  10: 734.370 ns/op
Iteration  11: 741.206 ns/op
Iteration  12: 732.513 ns/op
Iteration  13: 734.287 ns/op
Iteration  14: 732.876 ns/op
Iteration  15: 732.853 ns/op
Iteration  16: 732.968 ns/op
Iteration  17: 733.922 ns/op
Iteration  18: 737.346 ns/op
Iteration  19: 732.996 ns/op
Iteration  20: 732.520 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1285.057 ns/op
# Warmup Iteration   2: 986.839 ns/op
# Warmup Iteration   3: 832.083 ns/op
# Warmup Iteration   4: 835.119 ns/op
# Warmup Iteration   5: 838.888 ns/op
Iteration   1: 846.264 ns/op
Iteration   2: 846.166 ns/op
Iteration   3: 829.794 ns/op
Iteration   4: 828.664 ns/op
Iteration   5: 828.698 ns/op
Iteration   6: 827.825 ns/op
Iteration   7: 827.364 ns/op
Iteration   8: 827.776 ns/op
Iteration   9: 828.413 ns/op
Iteration  10: 828.887 ns/op
Iteration  11: 828.952 ns/op
Iteration  12: 826.867 ns/op
Iteration  13: 827.700 ns/op
Iteration  14: 832.612 ns/op
Iteration  15: 824.885 ns/op
Iteration  16: 829.485 ns/op
Iteration  17: 827.485 ns/op
Iteration  18: 829.418 ns/op
Iteration  19: 828.954 ns/op
Iteration  20: 828.981 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1158.162 ns/op
# Warmup Iteration   2: 831.412 ns/op
# Warmup Iteration   3: 736.609 ns/op
# Warmup Iteration   4: 732.518 ns/op
# Warmup Iteration   5: 736.325 ns/op
Iteration   1: 740.550 ns/op
Iteration   2: 724.412 ns/op
Iteration   3: 724.773 ns/op
Iteration   4: 724.565 ns/op
Iteration   5: 727.334 ns/op
Iteration   6: 728.529 ns/op
Iteration   7: 725.044 ns/op
Iteration   8: 725.037 ns/op
Iteration   9: 728.607 ns/op
Iteration  10: 723.154 ns/op
Iteration  11: 722.964 ns/op
Iteration  12: 722.894 ns/op
Iteration  13: 723.348 ns/op
Iteration  14: 723.112 ns/op
Iteration  15: 722.920 ns/op
Iteration  16: 722.664 ns/op
Iteration  17: 723.447 ns/op
Iteration  18: 724.168 ns/op
Iteration  19: 725.884 ns/op
Iteration  20: 723.461 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  770.300 Â±(99.9%) 16.101 ns/op [Average]
  (min, avg, max) = (722.664, 770.300, 846.264), stdev = 47.474
  CI (99.9%): [754.200, 786.401] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                 (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  		
 
,
  

 	
	
	 

 		 	
	

	
	  		 

 	 
 	 

	  	


 	   


		 	  





	

  
 

 	    avgt  100  745.387 Â± 11.380  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  		
 
,
  

 	
	
	 

 		 	
	

	
	  		 

 	 
 	 

	  	


 	   


		 	  





	

  
 

 	    avgt  100  770.300 Â± 16.101  ns/op

Benchmark result is saved to split_precompiled_regex_64_184_Match.csv
