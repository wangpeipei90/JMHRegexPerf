# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = .y4PQq+w="WHON:%T}sY(Q9(%\8#ROD[;:%D  8Rq3+dic'orMsw9<L.U@iW1u^s8`(xjZ=))

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1212.675 ns/op
# Warmup Iteration   2: 1073.680 ns/op
# Warmup Iteration   3: 870.122 ns/op
# Warmup Iteration   4: 872.521 ns/op
# Warmup Iteration   5: 861.491 ns/op
Iteration   1: 876.301 ns/op
Iteration   2: 880.423 ns/op
Iteration   3: 886.488 ns/op
Iteration   4: 862.215 ns/op
Iteration   5: 866.223 ns/op
Iteration   6: 865.779 ns/op
Iteration   7: 865.820 ns/op
Iteration   8: 865.425 ns/op
Iteration   9: 861.590 ns/op
Iteration  10: 865.396 ns/op
Iteration  11: 869.690 ns/op
Iteration  12: 868.934 ns/op
Iteration  13: 861.918 ns/op
Iteration  14: 866.484 ns/op
Iteration  15: 866.031 ns/op
Iteration  16: 864.146 ns/op
Iteration  17: 861.826 ns/op
Iteration  18: 865.936 ns/op
Iteration  19: 863.849 ns/op
Iteration  20: 863.769 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1224.300 ns/op
# Warmup Iteration   2: 1093.636 ns/op
# Warmup Iteration   3: 874.879 ns/op
# Warmup Iteration   4: 867.370 ns/op
# Warmup Iteration   5: 875.817 ns/op
Iteration   1: 880.587 ns/op
Iteration   2: 885.735 ns/op
Iteration   3: 891.796 ns/op
Iteration   4: 867.310 ns/op
Iteration   5: 870.813 ns/op
Iteration   6: 870.454 ns/op
Iteration   7: 870.285 ns/op
Iteration   8: 867.686 ns/op
Iteration   9: 871.730 ns/op
Iteration  10: 870.983 ns/op
Iteration  11: 870.700 ns/op
Iteration  12: 871.106 ns/op
Iteration  13: 867.102 ns/op
Iteration  14: 870.887 ns/op
Iteration  15: 870.949 ns/op
Iteration  16: 869.040 ns/op
Iteration  17: 867.374 ns/op
Iteration  18: 871.140 ns/op
Iteration  19: 869.481 ns/op
Iteration  20: 870.142 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1225.305 ns/op
# Warmup Iteration   2: 1093.753 ns/op
# Warmup Iteration   3: 883.289 ns/op
# Warmup Iteration   4: 875.434 ns/op
# Warmup Iteration   5: 886.135 ns/op
Iteration   1: 890.387 ns/op
Iteration   2: 895.100 ns/op
Iteration   3: 904.650 ns/op
Iteration   4: 874.617 ns/op
Iteration   5: 879.599 ns/op
Iteration   6: 878.272 ns/op
Iteration   7: 878.693 ns/op
Iteration   8: 875.972 ns/op
Iteration   9: 879.450 ns/op
Iteration  10: 878.916 ns/op
Iteration  11: 878.874 ns/op
Iteration  12: 874.159 ns/op
Iteration  13: 879.353 ns/op
Iteration  14: 880.849 ns/op
Iteration  15: 879.997 ns/op
Iteration  16: 874.846 ns/op
Iteration  17: 880.743 ns/op
Iteration  18: 877.503 ns/op
Iteration  19: 876.178 ns/op
Iteration  20: 879.462 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1221.755 ns/op
# Warmup Iteration   2: 1089.904 ns/op
# Warmup Iteration   3: 878.385 ns/op
# Warmup Iteration   4: 872.123 ns/op
# Warmup Iteration   5: 879.779 ns/op
Iteration   1: 887.716 ns/op
Iteration   2: 889.870 ns/op
Iteration   3: 895.091 ns/op
Iteration   4: 870.777 ns/op
Iteration   5: 875.805 ns/op
Iteration   6: 875.392 ns/op
Iteration   7: 874.936 ns/op
Iteration   8: 870.587 ns/op
Iteration   9: 875.744 ns/op
Iteration  10: 875.146 ns/op
Iteration  11: 875.105 ns/op
Iteration  12: 874.494 ns/op
Iteration  13: 870.817 ns/op
Iteration  14: 875.175 ns/op
Iteration  15: 877.329 ns/op
Iteration  16: 873.094 ns/op
Iteration  17: 870.988 ns/op
Iteration  18: 872.878 ns/op
Iteration  19: 872.677 ns/op
Iteration  20: 873.573 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1208.741 ns/op
# Warmup Iteration   2: 1071.614 ns/op
# Warmup Iteration   3: 869.087 ns/op
# Warmup Iteration   4: 868.256 ns/op
# Warmup Iteration   5: 857.600 ns/op
Iteration   1: 871.472 ns/op
Iteration   2: 876.268 ns/op
Iteration   3: 881.569 ns/op
Iteration   4: 857.888 ns/op
Iteration   5: 861.650 ns/op
Iteration   6: 861.337 ns/op
Iteration   7: 865.814 ns/op
Iteration   8: 861.749 ns/op
Iteration   9: 856.733 ns/op
Iteration  10: 861.741 ns/op
Iteration  11: 861.412 ns/op
Iteration  12: 861.234 ns/op
Iteration  13: 857.472 ns/op
Iteration  14: 862.979 ns/op
Iteration  15: 863.630 ns/op
Iteration  16: 863.522 ns/op
Iteration  17: 869.861 ns/op
Iteration  18: 857.715 ns/op
Iteration  19: 859.680 ns/op
Iteration  20: 860.724 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  872.128 ±(99.9%) 3.052 ns/op [Average]
  (min, avg, max) = (856.733, 872.128, 904.650), stdev = 8.999
  CI (99.9%): [869.076, 875.180] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = .y4PQq+w="WHON:%T}sY(Q9(%\8#ROD[;:%D  8Rq3+dic'orMsw9<L.U@iW1u^s8`(xjZ=))

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1226.873 ns/op
# Warmup Iteration   2: 1095.728 ns/op
# Warmup Iteration   3: 888.117 ns/op
# Warmup Iteration   4: 879.497 ns/op
# Warmup Iteration   5: 890.595 ns/op
Iteration   1: 894.071 ns/op
Iteration   2: 898.360 ns/op
Iteration   3: 904.370 ns/op
Iteration   4: 882.404 ns/op
Iteration   5: 888.224 ns/op
Iteration   6: 884.360 ns/op
Iteration   7: 883.729 ns/op
Iteration   8: 881.209 ns/op
Iteration   9: 883.696 ns/op
Iteration  10: 883.751 ns/op
Iteration  11: 883.557 ns/op
Iteration  12: 880.216 ns/op
Iteration  13: 884.889 ns/op
Iteration  14: 885.403 ns/op
Iteration  15: 889.723 ns/op
Iteration  16: 879.970 ns/op
Iteration  17: 881.739 ns/op
Iteration  18: 882.769 ns/op
Iteration  19: 884.228 ns/op
Iteration  20: 880.131 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1225.810 ns/op
# Warmup Iteration   2: 1101.826 ns/op
# Warmup Iteration   3: 889.116 ns/op
# Warmup Iteration   4: 880.027 ns/op
# Warmup Iteration   5: 891.005 ns/op
Iteration   1: 894.834 ns/op
Iteration   2: 899.853 ns/op
Iteration   3: 904.571 ns/op
Iteration   4: 879.379 ns/op
Iteration   5: 884.559 ns/op
Iteration   6: 884.824 ns/op
Iteration   7: 884.277 ns/op
Iteration   8: 880.468 ns/op
Iteration   9: 884.887 ns/op
Iteration  10: 887.113 ns/op
Iteration  11: 885.013 ns/op
Iteration  12: 879.663 ns/op
Iteration  13: 885.024 ns/op
Iteration  14: 885.949 ns/op
Iteration  15: 885.748 ns/op
Iteration  16: 880.161 ns/op
Iteration  17: 883.866 ns/op
Iteration  18: 882.873 ns/op
Iteration  19: 883.005 ns/op
Iteration  20: 880.117 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1226.546 ns/op
# Warmup Iteration   2: 1102.084 ns/op
# Warmup Iteration   3: 889.605 ns/op
# Warmup Iteration   4: 881.461 ns/op
# Warmup Iteration   5: 893.014 ns/op
Iteration   1: 895.895 ns/op
Iteration   2: 900.575 ns/op
Iteration   3: 906.698 ns/op
Iteration   4: 881.540 ns/op
Iteration   5: 885.999 ns/op
Iteration   6: 885.019 ns/op
Iteration   7: 885.937 ns/op
Iteration   8: 881.838 ns/op
Iteration   9: 886.130 ns/op
Iteration  10: 890.338 ns/op
Iteration  11: 887.262 ns/op
Iteration  12: 881.944 ns/op
Iteration  13: 887.274 ns/op
Iteration  14: 890.841 ns/op
Iteration  15: 893.114 ns/op
Iteration  16: 881.870 ns/op
Iteration  17: 894.310 ns/op
Iteration  18: 887.009 ns/op
Iteration  19: 885.772 ns/op
Iteration  20: 882.049 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1224.606 ns/op
# Warmup Iteration   2: 1091.295 ns/op
# Warmup Iteration   3: 880.266 ns/op
# Warmup Iteration   4: 873.333 ns/op
# Warmup Iteration   5: 881.135 ns/op
Iteration   1: 887.348 ns/op
Iteration   2: 890.899 ns/op
Iteration   3: 896.489 ns/op
Iteration   4: 871.574 ns/op
Iteration   5: 876.970 ns/op
Iteration   6: 876.511 ns/op
Iteration   7: 876.208 ns/op
Iteration   8: 872.327 ns/op
Iteration   9: 875.331 ns/op
Iteration  10: 875.598 ns/op
Iteration  11: 875.762 ns/op
Iteration  12: 872.348 ns/op
Iteration  13: 879.743 ns/op
Iteration  14: 876.286 ns/op
Iteration  15: 877.148 ns/op
Iteration  16: 878.158 ns/op
Iteration  17: 871.046 ns/op
Iteration  18: 896.022 ns/op
Iteration  19: 873.671 ns/op
Iteration  20: 880.589 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1225.645 ns/op
# Warmup Iteration   2: 1091.457 ns/op
# Warmup Iteration   3: 890.713 ns/op
# Warmup Iteration   4: 886.217 ns/op
# Warmup Iteration   5: 890.039 ns/op
Iteration   1: 900.340 ns/op
Iteration   2: 902.043 ns/op
Iteration   3: 907.183 ns/op
Iteration   4: 882.657 ns/op
Iteration   5: 891.858 ns/op
Iteration   6: 898.092 ns/op
Iteration   7: 889.521 ns/op
Iteration   8: 883.111 ns/op
Iteration   9: 887.237 ns/op
Iteration  10: 887.005 ns/op
Iteration  11: 890.786 ns/op
Iteration  12: 882.883 ns/op
Iteration  13: 890.362 ns/op
Iteration  14: 889.430 ns/op
Iteration  15: 922.105 ns/op
Iteration  16: 883.247 ns/op
Iteration  17: 886.748 ns/op
Iteration  18: 886.756 ns/op
Iteration  19: 885.448 ns/op
Iteration  20: 883.445 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  886.147 ±(99.9%) 2.891 ns/op [Average]
  (min, avg, max) = (871.046, 886.147, 922.105), stdev = 8.524
  CI (99.9%): [883.256, 889.038] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                 (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  .y4PQq+w="WHON:%T}sY(Q9(%\8#ROD[;:%D  8Rq3+dic'orMsw9<L.U@iW1u^s8`(xjZ=)  avgt  100  872.128 ± 3.052  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  .y4PQq+w="WHON:%T}sY(Q9(%\8#ROD[;:%D  8Rq3+dic'orMsw9<L.U@iW1u^s8`(xjZ=)  avgt  100  886.147 ± 2.891  ns/op

Benchmark result is saved to split_precompiled_regex_194_72_NonMatch.csv
