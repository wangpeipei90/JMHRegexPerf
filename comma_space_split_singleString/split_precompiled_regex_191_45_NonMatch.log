# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = F!kNU{P4XpJzwXMf-Mct7,B6ctB\rJ<<m!ovvn]kF<q<p)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1394.136 ns/op
# Warmup Iteration   2: 1203.814 ns/op
# Warmup Iteration   3: 991.105 ns/op
# Warmup Iteration   4: 993.516 ns/op
# Warmup Iteration   5: 1003.280 ns/op
Iteration   1: 1006.671 ns/op
Iteration   2: 981.387 ns/op
Iteration   3: 1007.893 ns/op
Iteration   4: 985.422 ns/op
Iteration   5: 985.231 ns/op
Iteration   6: 985.255 ns/op
Iteration   7: 985.206 ns/op
Iteration   8: 980.919 ns/op
Iteration   9: 985.157 ns/op
Iteration  10: 985.362 ns/op
Iteration  11: 985.941 ns/op
Iteration  12: 987.124 ns/op
Iteration  13: 985.846 ns/op
Iteration  14: 980.587 ns/op
Iteration  15: 984.902 ns/op
Iteration  16: 982.626 ns/op
Iteration  17: 982.447 ns/op
Iteration  18: 982.700 ns/op
Iteration  19: 990.135 ns/op
Iteration  20: 983.555 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1456.770 ns/op
# Warmup Iteration   2: 1225.677 ns/op
# Warmup Iteration   3: 1005.442 ns/op
# Warmup Iteration   4: 1008.110 ns/op
# Warmup Iteration   5: 1013.275 ns/op
Iteration   1: 1003.670 ns/op
Iteration   2: 1008.544 ns/op
Iteration   3: 1024.264 ns/op
Iteration   4: 1000.857 ns/op
Iteration   5: 1003.616 ns/op
Iteration   6: 999.538 ns/op
Iteration   7: 995.118 ns/op
Iteration   8: 999.295 ns/op
Iteration   9: 999.612 ns/op
Iteration  10: 1000.561 ns/op
Iteration  11: 1000.992 ns/op
Iteration  12: 1004.297 ns/op
Iteration  13: 995.759 ns/op
Iteration  14: 1002.296 ns/op
Iteration  15: 998.652 ns/op
Iteration  16: 1000.530 ns/op
Iteration  17: 998.935 ns/op
Iteration  18: 1008.204 ns/op
Iteration  19: 995.774 ns/op
Iteration  20: 998.334 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1469.839 ns/op
# Warmup Iteration   2: 1242.648 ns/op
# Warmup Iteration   3: 1013.927 ns/op
# Warmup Iteration   4: 1016.738 ns/op
# Warmup Iteration   5: 1021.778 ns/op
Iteration   1: 1004.941 ns/op
Iteration   2: 1025.814 ns/op
Iteration   3: 1032.533 ns/op
Iteration   4: 1008.547 ns/op
Iteration   5: 1009.087 ns/op
Iteration   6: 1017.512 ns/op
Iteration   7: 1008.487 ns/op
Iteration   8: 1008.476 ns/op
Iteration   9: 1009.317 ns/op
Iteration  10: 1009.222 ns/op
Iteration  11: 1009.272 ns/op
Iteration  12: 1007.431 ns/op
Iteration  13: 1013.399 ns/op
Iteration  14: 1011.101 ns/op
Iteration  15: 1007.227 ns/op
Iteration  16: 1007.385 ns/op
Iteration  17: 1008.977 ns/op
Iteration  18: 1004.643 ns/op
Iteration  19: 1009.626 ns/op
Iteration  20: 1009.436 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1324.546 ns/op
# Warmup Iteration   2: 1056.615 ns/op
# Warmup Iteration   3: 889.301 ns/op
# Warmup Iteration   4: 891.889 ns/op
# Warmup Iteration   5: 895.476 ns/op
Iteration   1: 899.480 ns/op
Iteration   2: 905.891 ns/op
Iteration   3: 885.162 ns/op
Iteration   4: 884.766 ns/op
Iteration   5: 884.512 ns/op
Iteration   6: 885.351 ns/op
Iteration   7: 879.733 ns/op
Iteration   8: 885.309 ns/op
Iteration   9: 887.603 ns/op
Iteration  10: 886.683 ns/op
Iteration  11: 890.263 ns/op
Iteration  12: 899.026 ns/op
Iteration  13: 883.364 ns/op
Iteration  14: 883.261 ns/op
Iteration  15: 882.266 ns/op
Iteration  16: 881.917 ns/op
Iteration  17: 883.756 ns/op
Iteration  18: 879.835 ns/op
Iteration  19: 884.179 ns/op
Iteration  20: 884.277 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1428.808 ns/op
# Warmup Iteration   2: 1246.527 ns/op
# Warmup Iteration   3: 1026.996 ns/op
# Warmup Iteration   4: 1030.821 ns/op
# Warmup Iteration   5: 1032.711 ns/op
Iteration   1: 1015.538 ns/op
Iteration   2: 1037.699 ns/op
Iteration   3: 1043.328 ns/op
Iteration   4: 1021.232 ns/op
Iteration   5: 1023.276 ns/op
Iteration   6: 1016.029 ns/op
Iteration   7: 1021.190 ns/op
Iteration   8: 1020.224 ns/op
Iteration   9: 1020.136 ns/op
Iteration  10: 1020.060 ns/op
Iteration  11: 1016.317 ns/op
Iteration  12: 1020.546 ns/op
Iteration  13: 1019.497 ns/op
Iteration  14: 1021.164 ns/op
Iteration  15: 1022.383 ns/op
Iteration  16: 1023.477 ns/op
Iteration  17: 1016.021 ns/op
Iteration  18: 1019.119 ns/op
Iteration  19: 1019.086 ns/op
Iteration  20: 1019.209 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  981.678 ±(99.9%) 16.790 ns/op [Average]
  (min, avg, max) = (879.733, 981.678, 1043.328), stdev = 49.505
  CI (99.9%): [964.889, 998.468] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = F!kNU{P4XpJzwXMf-Mct7,B6ctB\rJ<<m!ovvn]kF<q<p)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1515.443 ns/op
# Warmup Iteration   2: 1259.022 ns/op
# Warmup Iteration   3: 1018.455 ns/op
# Warmup Iteration   4: 1020.591 ns/op
# Warmup Iteration   5: 1025.315 ns/op
Iteration   1: 1007.588 ns/op
Iteration   2: 1030.147 ns/op
Iteration   3: 1036.425 ns/op
Iteration   4: 1013.193 ns/op
Iteration   5: 1012.987 ns/op
Iteration   6: 1007.553 ns/op
Iteration   7: 1011.914 ns/op
Iteration   8: 1012.376 ns/op
Iteration   9: 1016.714 ns/op
Iteration  10: 1012.474 ns/op
Iteration  11: 1013.668 ns/op
Iteration  12: 1007.020 ns/op
Iteration  13: 1012.212 ns/op
Iteration  14: 1022.087 ns/op
Iteration  15: 1009.753 ns/op
Iteration  16: 1009.883 ns/op
Iteration  17: 1007.251 ns/op
Iteration  18: 1009.843 ns/op
Iteration  19: 1009.447 ns/op
Iteration  20: 1011.733 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1455.063 ns/op
# Warmup Iteration   2: 1231.749 ns/op
# Warmup Iteration   3: 1016.525 ns/op
# Warmup Iteration   4: 1025.758 ns/op
# Warmup Iteration   5: 1020.910 ns/op
Iteration   1: 1001.175 ns/op
Iteration   2: 1027.354 ns/op
Iteration   3: 1039.085 ns/op
Iteration   4: 1006.711 ns/op
Iteration   5: 1011.217 ns/op
Iteration   6: 1008.647 ns/op
Iteration   7: 1001.369 ns/op
Iteration   8: 1022.538 ns/op
Iteration   9: 1024.803 ns/op
Iteration  10: 1008.821 ns/op
Iteration  11: 1012.625 ns/op
Iteration  12: 1000.664 ns/op
Iteration  13: 1010.157 ns/op
Iteration  14: 1007.913 ns/op
Iteration  15: 1012.133 ns/op
Iteration  16: 1002.949 ns/op
Iteration  17: 1003.541 ns/op
Iteration  18: 1000.369 ns/op
Iteration  19: 1004.812 ns/op
Iteration  20: 1005.783 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1507.208 ns/op
# Warmup Iteration   2: 1238.477 ns/op
# Warmup Iteration   3: 1017.104 ns/op
# Warmup Iteration   4: 1041.705 ns/op
# Warmup Iteration   5: 1032.867 ns/op
Iteration   1: 999.490 ns/op
Iteration   2: 1021.403 ns/op
Iteration   3: 1028.014 ns/op
Iteration   4: 1004.900 ns/op
Iteration   5: 1005.363 ns/op
Iteration   6: 1005.823 ns/op
Iteration   7: 1000.395 ns/op
Iteration   8: 1005.845 ns/op
Iteration   9: 1011.907 ns/op
Iteration  10: 1005.445 ns/op
Iteration  11: 1007.265 ns/op
Iteration  12: 1000.257 ns/op
Iteration  13: 1027.908 ns/op
Iteration  14: 1017.361 ns/op
Iteration  15: 1004.726 ns/op
Iteration  16: 1001.470 ns/op
Iteration  17: 1001.869 ns/op
Iteration  18: 999.285 ns/op
Iteration  19: 1001.731 ns/op
Iteration  20: 1001.465 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1526.366 ns/op
# Warmup Iteration   2: 1279.076 ns/op
# Warmup Iteration   3: 1033.008 ns/op
# Warmup Iteration   4: 1035.473 ns/op
# Warmup Iteration   5: 1028.949 ns/op
Iteration   1: 1034.204 ns/op
Iteration   2: 1044.975 ns/op
Iteration   3: 1051.596 ns/op
Iteration   4: 1028.544 ns/op
Iteration   5: 1027.215 ns/op
Iteration   6: 1023.147 ns/op
Iteration   7: 1027.740 ns/op
Iteration   8: 1027.795 ns/op
Iteration   9: 1028.303 ns/op
Iteration  10: 1027.601 ns/op
Iteration  11: 1023.927 ns/op
Iteration  12: 1027.522 ns/op
Iteration  13: 1027.492 ns/op
Iteration  14: 1027.977 ns/op
Iteration  15: 1025.327 ns/op
Iteration  16: 1022.582 ns/op
Iteration  17: 1025.428 ns/op
Iteration  18: 1025.263 ns/op
Iteration  19: 1034.819 ns/op
Iteration  20: 1026.315 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1508.550 ns/op
# Warmup Iteration   2: 1311.995 ns/op
# Warmup Iteration   3: 1064.421 ns/op
# Warmup Iteration   4: 1066.147 ns/op
# Warmup Iteration   5: 1053.730 ns/op
Iteration   1: 1071.641 ns/op
Iteration   2: 1074.615 ns/op
Iteration   3: 1080.399 ns/op
Iteration   4: 1059.278 ns/op
Iteration   5: 1054.063 ns/op
Iteration   6: 1058.632 ns/op
Iteration   7: 1055.682 ns/op
Iteration   8: 1054.610 ns/op
Iteration   9: 1058.431 ns/op
Iteration  10: 1057.869 ns/op
Iteration  11: 1059.639 ns/op
Iteration  12: 1062.831 ns/op
Iteration  13: 1060.168 ns/op
Iteration  14: 1053.108 ns/op
Iteration  15: 1059.575 ns/op
Iteration  16: 1057.521 ns/op
Iteration  17: 1063.360 ns/op
Iteration  18: 1055.858 ns/op
Iteration  19: 1052.661 ns/op
Iteration  20: 1055.518 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  1024.321 ±(99.9%) 7.201 ns/op [Average]
  (min, avg, max) = (999.285, 1024.321, 1080.399), stdev = 21.233
  CI (99.9%): [1017.120, 1031.522] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                      (trimmed)  Mode  Cnt     Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  F!kNU{P4XpJzwXMf-Mct7,B6ctB\rJ<<m!ovvn]kF<q<p  avgt  100   981.678 ± 16.790  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  F!kNU{P4XpJzwXMf-Mct7,B6ctB\rJ<<m!ovvn]kF<q<p  avgt  100  1024.321 ±  7.201  ns/op

Benchmark result is saved to split_precompiled_regex_191_45_NonMatch.csv
