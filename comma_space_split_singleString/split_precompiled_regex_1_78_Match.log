# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   ,
 
	
  
 	
 			 
	  
 
				
 	
  		

  	
	 	 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 959.517 ns/op
# Warmup Iteration   2: 588.238 ns/op
# Warmup Iteration   3: 540.834 ns/op
# Warmup Iteration   4: 555.457 ns/op
# Warmup Iteration   5: 548.812 ns/op
Iteration   1: 539.020 ns/op
Iteration   2: 548.130 ns/op
Iteration   3: 538.523 ns/op
Iteration   4: 536.027 ns/op
Iteration   5: 535.982 ns/op
Iteration   6: 539.138 ns/op
Iteration   7: 534.270 ns/op
Iteration   8: 535.038 ns/op
Iteration   9: 534.123 ns/op
Iteration  10: 535.098 ns/op
Iteration  11: 534.257 ns/op
Iteration  12: 535.541 ns/op
Iteration  13: 537.746 ns/op
Iteration  14: 536.583 ns/op
Iteration  15: 539.537 ns/op
Iteration  16: 534.844 ns/op
Iteration  17: 535.822 ns/op
Iteration  18: 533.686 ns/op
Iteration  19: 535.632 ns/op
Iteration  20: 534.060 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 955.211 ns/op
# Warmup Iteration   2: 583.205 ns/op
# Warmup Iteration   3: 542.398 ns/op
# Warmup Iteration   4: 556.924 ns/op
# Warmup Iteration   5: 550.470 ns/op
Iteration   1: 540.647 ns/op
Iteration   2: 538.044 ns/op
Iteration   3: 540.893 ns/op
Iteration   4: 538.480 ns/op
Iteration   5: 538.329 ns/op
Iteration   6: 541.586 ns/op
Iteration   7: 539.799 ns/op
Iteration   8: 537.854 ns/op
Iteration   9: 536.410 ns/op
Iteration  10: 537.567 ns/op
Iteration  11: 539.965 ns/op
Iteration  12: 539.971 ns/op
Iteration  13: 537.102 ns/op
Iteration  14: 537.061 ns/op
Iteration  15: 537.615 ns/op
Iteration  16: 547.514 ns/op
Iteration  17: 540.474 ns/op
Iteration  18: 539.549 ns/op
Iteration  19: 541.228 ns/op
Iteration  20: 536.617 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 991.937 ns/op
# Warmup Iteration   2: 628.036 ns/op
# Warmup Iteration   3: 575.328 ns/op
# Warmup Iteration   4: 590.816 ns/op
# Warmup Iteration   5: 581.399 ns/op
Iteration   1: 570.927 ns/op
Iteration   2: 573.033 ns/op
Iteration   3: 567.868 ns/op
Iteration   4: 569.605 ns/op
Iteration   5: 575.388 ns/op
Iteration   6: 568.030 ns/op
Iteration   7: 569.589 ns/op
Iteration   8: 567.273 ns/op
Iteration   9: 566.120 ns/op
Iteration  10: 568.106 ns/op
Iteration  11: 565.950 ns/op
Iteration  12: 565.668 ns/op
Iteration  13: 578.761 ns/op
Iteration  14: 565.393 ns/op
Iteration  15: 570.185 ns/op
Iteration  16: 571.167 ns/op
Iteration  17: 566.498 ns/op
Iteration  18: 565.746 ns/op
Iteration  19: 569.075 ns/op
Iteration  20: 570.399 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 959.563 ns/op
# Warmup Iteration   2: 586.290 ns/op
# Warmup Iteration   3: 543.726 ns/op
# Warmup Iteration   4: 561.608 ns/op
# Warmup Iteration   5: 552.676 ns/op
Iteration   1: 542.396 ns/op
Iteration   2: 539.468 ns/op
Iteration   3: 542.016 ns/op
Iteration   4: 539.016 ns/op
Iteration   5: 539.272 ns/op
Iteration   6: 541.426 ns/op
Iteration   7: 537.511 ns/op
Iteration   8: 538.191 ns/op
Iteration   9: 536.891 ns/op
Iteration  10: 538.991 ns/op
Iteration  11: 538.517 ns/op
Iteration  12: 538.398 ns/op
Iteration  13: 539.878 ns/op
Iteration  14: 538.798 ns/op
Iteration  15: 541.448 ns/op
Iteration  16: 538.649 ns/op
Iteration  17: 539.055 ns/op
Iteration  18: 537.768 ns/op
Iteration  19: 538.312 ns/op
Iteration  20: 539.731 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 984.138 ns/op
# Warmup Iteration   2: 620.413 ns/op
# Warmup Iteration   3: 567.946 ns/op
# Warmup Iteration   4: 583.091 ns/op
# Warmup Iteration   5: 577.421 ns/op
Iteration   1: 563.736 ns/op
Iteration   2: 565.971 ns/op
Iteration   3: 563.578 ns/op
Iteration   4: 563.352 ns/op
Iteration   5: 569.193 ns/op
Iteration   6: 563.782 ns/op
Iteration   7: 566.904 ns/op
Iteration   8: 561.276 ns/op
Iteration   9: 561.408 ns/op
Iteration  10: 563.506 ns/op
Iteration  11: 562.265 ns/op
Iteration  12: 561.686 ns/op
Iteration  13: 562.802 ns/op
Iteration  14: 562.595 ns/op
Iteration  15: 565.842 ns/op
Iteration  16: 563.284 ns/op
Iteration  17: 563.191 ns/op
Iteration  18: 564.034 ns/op
Iteration  19: 561.583 ns/op
Iteration  20: 562.171 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  549.624 ±(99.9%) 4.808 ns/op [Average]
  (min, avg, max) = (533.686, 549.624, 578.761), stdev = 14.176
  CI (99.9%): [544.817, 554.432] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   ,
 
	
  
 	
 			 
	  
 
				
 	
  		

  	
	 	 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1016.990 ns/op
# Warmup Iteration   2: 607.925 ns/op
# Warmup Iteration   3: 551.111 ns/op
# Warmup Iteration   4: 568.336 ns/op
# Warmup Iteration   5: 559.017 ns/op
Iteration   1: 549.693 ns/op
Iteration   2: 546.671 ns/op
Iteration   3: 550.922 ns/op
Iteration   4: 546.183 ns/op
Iteration   5: 546.482 ns/op
Iteration   6: 549.895 ns/op
Iteration   7: 545.719 ns/op
Iteration   8: 550.351 ns/op
Iteration   9: 547.994 ns/op
Iteration  10: 546.622 ns/op
Iteration  11: 545.130 ns/op
Iteration  12: 546.649 ns/op
Iteration  13: 545.158 ns/op
Iteration  14: 546.845 ns/op
Iteration  15: 544.733 ns/op
Iteration  16: 545.012 ns/op
Iteration  17: 546.925 ns/op
Iteration  18: 544.818 ns/op
Iteration  19: 547.094 ns/op
Iteration  20: 544.741 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 977.652 ns/op
# Warmup Iteration   2: 604.274 ns/op
# Warmup Iteration   3: 563.989 ns/op
# Warmup Iteration   4: 578.910 ns/op
# Warmup Iteration   5: 572.980 ns/op
Iteration   1: 562.110 ns/op
Iteration   2: 559.718 ns/op
Iteration   3: 559.706 ns/op
Iteration   4: 562.174 ns/op
Iteration   5: 559.382 ns/op
Iteration   6: 563.005 ns/op
Iteration   7: 559.122 ns/op
Iteration   8: 559.582 ns/op
Iteration   9: 558.775 ns/op
Iteration  10: 558.808 ns/op
Iteration  11: 559.613 ns/op
Iteration  12: 563.194 ns/op
Iteration  13: 564.551 ns/op
Iteration  14: 558.655 ns/op
Iteration  15: 558.185 ns/op
Iteration  16: 559.674 ns/op
Iteration  17: 557.899 ns/op
Iteration  18: 560.254 ns/op
Iteration  19: 558.052 ns/op
Iteration  20: 558.468 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 967.079 ns/op
# Warmup Iteration   2: 589.753 ns/op
# Warmup Iteration   3: 548.237 ns/op
# Warmup Iteration   4: 567.320 ns/op
# Warmup Iteration   5: 554.585 ns/op
Iteration   1: 545.896 ns/op
Iteration   2: 542.647 ns/op
Iteration   3: 545.006 ns/op
Iteration   4: 542.691 ns/op
Iteration   5: 544.670 ns/op
Iteration   6: 542.138 ns/op
Iteration   7: 541.718 ns/op
Iteration   8: 541.963 ns/op
Iteration   9: 541.754 ns/op
Iteration  10: 542.802 ns/op
Iteration  11: 541.434 ns/op
Iteration  12: 542.376 ns/op
Iteration  13: 541.613 ns/op
Iteration  14: 545.181 ns/op
Iteration  15: 542.084 ns/op
Iteration  16: 543.723 ns/op
Iteration  17: 542.110 ns/op
Iteration  18: 546.828 ns/op
Iteration  19: 541.753 ns/op
Iteration  20: 541.747 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 996.465 ns/op
# Warmup Iteration   2: 610.808 ns/op
# Warmup Iteration   3: 552.553 ns/op
# Warmup Iteration   4: 567.695 ns/op
# Warmup Iteration   5: 561.208 ns/op
Iteration   1: 550.923 ns/op
Iteration   2: 548.153 ns/op
Iteration   3: 550.202 ns/op
Iteration   4: 547.941 ns/op
Iteration   5: 548.377 ns/op
Iteration   6: 550.912 ns/op
Iteration   7: 548.889 ns/op
Iteration   8: 548.789 ns/op
Iteration   9: 546.818 ns/op
Iteration  10: 553.179 ns/op
Iteration  11: 548.570 ns/op
Iteration  12: 549.574 ns/op
Iteration  13: 547.624 ns/op
Iteration  14: 547.485 ns/op
Iteration  15: 550.491 ns/op
Iteration  16: 548.631 ns/op
Iteration  17: 550.282 ns/op
Iteration  18: 547.149 ns/op
Iteration  19: 552.056 ns/op
Iteration  20: 548.525 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1003.448 ns/op
# Warmup Iteration   2: 625.712 ns/op
# Warmup Iteration   3: 578.813 ns/op
# Warmup Iteration   4: 593.522 ns/op
# Warmup Iteration   5: 587.420 ns/op
Iteration   1: 576.337 ns/op
Iteration   2: 576.977 ns/op
Iteration   3: 574.005 ns/op
Iteration   4: 576.674 ns/op
Iteration   5: 574.276 ns/op
Iteration   6: 574.025 ns/op
Iteration   7: 575.423 ns/op
Iteration   8: 572.314 ns/op
Iteration   9: 572.360 ns/op
Iteration  10: 573.613 ns/op
Iteration  11: 572.151 ns/op
Iteration  12: 574.232 ns/op
Iteration  13: 574.411 ns/op
Iteration  14: 574.021 ns/op
Iteration  15: 576.682 ns/op
Iteration  16: 573.982 ns/op
Iteration  17: 577.018 ns/op
Iteration  18: 572.737 ns/op
Iteration  19: 572.215 ns/op
Iteration  20: 574.482 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  554.712 ±(99.9%) 3.914 ns/op [Average]
  (min, avg, max) = (541.434, 554.712, 577.018), stdev = 11.540
  CI (99.9%): [550.798, 558.626] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    ,
 
	
  
 	
 			 
	  
 
				
 	
  		

  	
	 	 
  avgt  100  549.624 ± 4.808  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    ,
 
	
  
 	
 			 
	  
 
				
 	
  		

  	
	 	 
  avgt  100  554.712 ± 3.914  ns/op

Benchmark result is saved to split_precompiled_regex_1_78_Match.csv
