# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	   
   	
 	
			 	 
 		
 			 	
, 		




	

  		  
	
 
 	 		  	
	 	

  		  			  




)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1254.607 ns/op
# Warmup Iteration   2: 929.002 ns/op
# Warmup Iteration   3: 781.980 ns/op
# Warmup Iteration   4: 783.927 ns/op
# Warmup Iteration   5: 787.420 ns/op
Iteration   1: 792.078 ns/op
Iteration   2: 796.636 ns/op
Iteration   3: 778.336 ns/op
Iteration   4: 777.833 ns/op
Iteration   5: 778.337 ns/op
Iteration   6: 778.086 ns/op
Iteration   7: 777.715 ns/op
Iteration   8: 778.309 ns/op
Iteration   9: 778.050 ns/op
Iteration  10: 778.448 ns/op
Iteration  11: 781.819 ns/op
Iteration  12: 776.747 ns/op
Iteration  13: 775.785 ns/op
Iteration  14: 776.159 ns/op
Iteration  15: 775.854 ns/op
Iteration  16: 776.378 ns/op
Iteration  17: 776.171 ns/op
Iteration  18: 776.874 ns/op
Iteration  19: 777.525 ns/op
Iteration  20: 777.150 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1192.130 ns/op
# Warmup Iteration   2: 889.778 ns/op
# Warmup Iteration   3: 764.026 ns/op
# Warmup Iteration   4: 767.225 ns/op
# Warmup Iteration   5: 778.689 ns/op
Iteration   1: 778.757 ns/op
Iteration   2: 766.712 ns/op
Iteration   3: 765.842 ns/op
Iteration   4: 761.561 ns/op
Iteration   5: 761.687 ns/op
Iteration   6: 761.141 ns/op
Iteration   7: 761.449 ns/op
Iteration   8: 761.104 ns/op
Iteration   9: 761.151 ns/op
Iteration  10: 761.284 ns/op
Iteration  11: 759.724 ns/op
Iteration  12: 759.468 ns/op
Iteration  13: 759.857 ns/op
Iteration  14: 759.966 ns/op
Iteration  15: 765.887 ns/op
Iteration  16: 759.924 ns/op
Iteration  17: 760.619 ns/op
Iteration  18: 759.587 ns/op
Iteration  19: 759.865 ns/op
Iteration  20: 759.764 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1179.433 ns/op
# Warmup Iteration   2: 883.139 ns/op
# Warmup Iteration   3: 768.320 ns/op
# Warmup Iteration   4: 764.642 ns/op
# Warmup Iteration   5: 777.312 ns/op
Iteration   1: 775.516 ns/op
Iteration   2: 764.765 ns/op
Iteration   3: 758.233 ns/op
Iteration   4: 758.690 ns/op
Iteration   5: 760.517 ns/op
Iteration   6: 758.487 ns/op
Iteration   7: 757.287 ns/op
Iteration   8: 757.105 ns/op
Iteration   9: 757.240 ns/op
Iteration  10: 758.507 ns/op
Iteration  11: 756.273 ns/op
Iteration  12: 756.023 ns/op
Iteration  13: 756.185 ns/op
Iteration  14: 756.072 ns/op
Iteration  15: 755.821 ns/op
Iteration  16: 756.135 ns/op
Iteration  17: 756.174 ns/op
Iteration  18: 755.602 ns/op
Iteration  19: 756.359 ns/op
Iteration  20: 755.722 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1211.015 ns/op
# Warmup Iteration   2: 842.938 ns/op
# Warmup Iteration   3: 723.510 ns/op
# Warmup Iteration   4: 738.188 ns/op
# Warmup Iteration   5: 732.955 ns/op
Iteration   1: 736.771 ns/op
Iteration   2: 719.800 ns/op
Iteration   3: 719.993 ns/op
Iteration   4: 720.145 ns/op
Iteration   5: 719.929 ns/op
Iteration   6: 720.013 ns/op
Iteration   7: 720.277 ns/op
Iteration   8: 720.248 ns/op
Iteration   9: 720.443 ns/op
Iteration  10: 720.085 ns/op
Iteration  11: 717.582 ns/op
Iteration  12: 718.774 ns/op
Iteration  13: 717.328 ns/op
Iteration  14: 717.507 ns/op
Iteration  15: 718.395 ns/op
Iteration  16: 718.032 ns/op
Iteration  17: 717.922 ns/op
Iteration  18: 718.650 ns/op
Iteration  19: 718.593 ns/op
Iteration  20: 718.572 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1182.359 ns/op
# Warmup Iteration   2: 882.068 ns/op
# Warmup Iteration   3: 758.508 ns/op
# Warmup Iteration   4: 762.015 ns/op
# Warmup Iteration   5: 782.045 ns/op
Iteration   1: 773.954 ns/op
Iteration   2: 759.040 ns/op
Iteration   3: 756.547 ns/op
Iteration   4: 756.377 ns/op
Iteration   5: 755.522 ns/op
Iteration   6: 758.844 ns/op
Iteration   7: 757.236 ns/op
Iteration   8: 755.877 ns/op
Iteration   9: 755.752 ns/op
Iteration  10: 756.235 ns/op
Iteration  11: 753.333 ns/op
Iteration  12: 754.383 ns/op
Iteration  13: 753.035 ns/op
Iteration  14: 754.137 ns/op
Iteration  15: 753.807 ns/op
Iteration  16: 753.290 ns/op
Iteration  17: 762.066 ns/op
Iteration  18: 760.876 ns/op
Iteration  19: 755.747 ns/op
Iteration  20: 754.017 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  755.355 Â±(99.9%) 6.792 ns/op [Average]
  (min, avg, max) = (717.328, 755.355, 796.636), stdev = 20.027
  CI (99.9%): [748.563, 762.147] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	   
   	
 	
			 	 
 		
 			 	
, 		




	

  		  
	
 
 	 		  	
	 	

  		  			  




)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1257.118 ns/op
# Warmup Iteration   2: 927.573 ns/op
# Warmup Iteration   3: 786.582 ns/op
# Warmup Iteration   4: 790.067 ns/op
# Warmup Iteration   5: 792.978 ns/op
Iteration   1: 797.587 ns/op
Iteration   2: 802.378 ns/op
Iteration   3: 783.626 ns/op
Iteration   4: 783.526 ns/op
Iteration   5: 782.814 ns/op
Iteration   6: 783.874 ns/op
Iteration   7: 783.321 ns/op
Iteration   8: 783.643 ns/op
Iteration   9: 783.455 ns/op
Iteration  10: 783.203 ns/op
Iteration  11: 784.464 ns/op
Iteration  12: 786.709 ns/op
Iteration  13: 780.724 ns/op
Iteration  14: 782.808 ns/op
Iteration  15: 780.925 ns/op
Iteration  16: 781.178 ns/op
Iteration  17: 780.882 ns/op
Iteration  18: 780.924 ns/op
Iteration  19: 782.415 ns/op
Iteration  20: 781.505 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1260.732 ns/op
# Warmup Iteration   2: 923.693 ns/op
# Warmup Iteration   3: 783.205 ns/op
# Warmup Iteration   4: 785.257 ns/op
# Warmup Iteration   5: 788.478 ns/op
Iteration   1: 792.782 ns/op
Iteration   2: 796.556 ns/op
Iteration   3: 779.317 ns/op
Iteration   4: 778.851 ns/op
Iteration   5: 777.665 ns/op
Iteration   6: 779.596 ns/op
Iteration   7: 782.762 ns/op
Iteration   8: 778.415 ns/op
Iteration   9: 779.350 ns/op
Iteration  10: 779.379 ns/op
Iteration  11: 779.977 ns/op
Iteration  12: 776.858 ns/op
Iteration  13: 776.802 ns/op
Iteration  14: 776.000 ns/op
Iteration  15: 776.281 ns/op
Iteration  16: 776.206 ns/op
Iteration  17: 780.648 ns/op
Iteration  18: 775.829 ns/op
Iteration  19: 776.562 ns/op
Iteration  20: 778.690 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1249.969 ns/op
# Warmup Iteration   2: 930.560 ns/op
# Warmup Iteration   3: 797.958 ns/op
# Warmup Iteration   4: 798.395 ns/op
# Warmup Iteration   5: 800.440 ns/op
Iteration   1: 805.171 ns/op
Iteration   2: 809.717 ns/op
Iteration   3: 791.741 ns/op
Iteration   4: 790.725 ns/op
Iteration   5: 790.933 ns/op
Iteration   6: 791.585 ns/op
Iteration   7: 791.500 ns/op
Iteration   8: 791.688 ns/op
Iteration   9: 791.671 ns/op
Iteration  10: 790.398 ns/op
Iteration  11: 791.918 ns/op
Iteration  12: 789.255 ns/op
Iteration  13: 789.293 ns/op
Iteration  14: 789.386 ns/op
Iteration  15: 789.756 ns/op
Iteration  16: 789.892 ns/op
Iteration  17: 790.537 ns/op
Iteration  18: 790.697 ns/op
Iteration  19: 790.127 ns/op
Iteration  20: 789.875 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1206.677 ns/op
# Warmup Iteration   2: 893.225 ns/op
# Warmup Iteration   3: 775.685 ns/op
# Warmup Iteration   4: 786.036 ns/op
# Warmup Iteration   5: 790.249 ns/op
Iteration   1: 789.047 ns/op
Iteration   2: 778.374 ns/op
Iteration   3: 772.188 ns/op
Iteration   4: 772.402 ns/op
Iteration   5: 771.767 ns/op
Iteration   6: 772.527 ns/op
Iteration   7: 772.331 ns/op
Iteration   8: 777.149 ns/op
Iteration   9: 773.356 ns/op
Iteration  10: 772.705 ns/op
Iteration  11: 770.349 ns/op
Iteration  12: 770.348 ns/op
Iteration  13: 770.568 ns/op
Iteration  14: 771.359 ns/op
Iteration  15: 769.757 ns/op
Iteration  16: 769.836 ns/op
Iteration  17: 769.280 ns/op
Iteration  18: 770.693 ns/op
Iteration  19: 772.038 ns/op
Iteration  20: 772.023 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1198.811 ns/op
# Warmup Iteration   2: 871.347 ns/op
# Warmup Iteration   3: 757.748 ns/op
# Warmup Iteration   4: 775.923 ns/op
# Warmup Iteration   5: 766.445 ns/op
Iteration   1: 771.825 ns/op
Iteration   2: 753.441 ns/op
Iteration   3: 752.092 ns/op
Iteration   4: 751.069 ns/op
Iteration   5: 751.730 ns/op
Iteration   6: 751.449 ns/op
Iteration   7: 754.057 ns/op
Iteration   8: 753.064 ns/op
Iteration   9: 751.704 ns/op
Iteration  10: 751.981 ns/op
Iteration  11: 749.247 ns/op
Iteration  12: 748.751 ns/op
Iteration  13: 748.730 ns/op
Iteration  14: 748.394 ns/op
Iteration  15: 750.484 ns/op
Iteration  16: 749.625 ns/op
Iteration  17: 749.965 ns/op
Iteration  18: 754.387 ns/op
Iteration  19: 751.213 ns/op
Iteration  20: 751.356 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  776.370 Â±(99.9%) 4.945 ns/op [Average]
  (min, avg, max) = (748.394, 776.370, 809.717), stdev = 14.580
  CI (99.9%): [771.425, 781.315] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                        (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	   
   	
 	
			 	 
 		
 			 	
, 		




	

  		  
	
 
 	 		  	
	 	

  		  			  




  avgt  100  755.355 Â± 6.792  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	   
   	
 	
			 	 
 		
 			 	
, 		




	

  		  
	
 
 	 		  	
	 	

  		  			  




  avgt  100  776.370 Â± 4.945  ns/op

Benchmark result is saved to split_precompiled_regex_37_175_Match.csv
