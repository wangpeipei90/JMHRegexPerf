# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	  	     	

		

	   	
 	
 
 ,
 	  		
  
 
    	
	 
	 	  
	  	
 	
		

			   	



 

	

 

  

	
  	
 	
 			  
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1247.240 ns/op
# Warmup Iteration   2: 910.919 ns/op
# Warmup Iteration   3: 764.497 ns/op
# Warmup Iteration   4: 767.571 ns/op
# Warmup Iteration   5: 771.535 ns/op
Iteration   1: 775.195 ns/op
Iteration   2: 781.041 ns/op
Iteration   3: 761.758 ns/op
Iteration   4: 761.969 ns/op
Iteration   5: 762.187 ns/op
Iteration   6: 762.106 ns/op
Iteration   7: 764.634 ns/op
Iteration   8: 761.575 ns/op
Iteration   9: 761.210 ns/op
Iteration  10: 762.253 ns/op
Iteration  11: 758.710 ns/op
Iteration  12: 758.861 ns/op
Iteration  13: 758.473 ns/op
Iteration  14: 758.803 ns/op
Iteration  15: 758.632 ns/op
Iteration  16: 758.637 ns/op
Iteration  17: 762.968 ns/op
Iteration  18: 758.118 ns/op
Iteration  19: 758.077 ns/op
Iteration  20: 759.578 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1224.480 ns/op
# Warmup Iteration   2: 890.234 ns/op
# Warmup Iteration   3: 763.632 ns/op
# Warmup Iteration   4: 763.879 ns/op
# Warmup Iteration   5: 772.733 ns/op
Iteration   1: 774.763 ns/op
Iteration   2: 763.126 ns/op
Iteration   3: 760.148 ns/op
Iteration   4: 756.901 ns/op
Iteration   5: 756.954 ns/op
Iteration   6: 757.294 ns/op
Iteration   7: 756.721 ns/op
Iteration   8: 757.025 ns/op
Iteration   9: 756.449 ns/op
Iteration  10: 757.293 ns/op
Iteration  11: 755.168 ns/op
Iteration  12: 755.126 ns/op
Iteration  13: 755.033 ns/op
Iteration  14: 755.072 ns/op
Iteration  15: 755.168 ns/op
Iteration  16: 755.209 ns/op
Iteration  17: 758.107 ns/op
Iteration  18: 755.831 ns/op
Iteration  19: 755.525 ns/op
Iteration  20: 756.290 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1300.548 ns/op
# Warmup Iteration   2: 993.275 ns/op
# Warmup Iteration   3: 836.658 ns/op
# Warmup Iteration   4: 843.562 ns/op
# Warmup Iteration   5: 844.069 ns/op
Iteration   1: 847.223 ns/op
Iteration   2: 852.394 ns/op
Iteration   3: 833.287 ns/op
Iteration   4: 832.489 ns/op
Iteration   5: 832.063 ns/op
Iteration   6: 831.618 ns/op
Iteration   7: 832.380 ns/op
Iteration   8: 828.851 ns/op
Iteration   9: 831.633 ns/op
Iteration  10: 831.130 ns/op
Iteration  11: 831.600 ns/op
Iteration  12: 832.483 ns/op
Iteration  13: 830.757 ns/op
Iteration  14: 830.904 ns/op
Iteration  15: 830.885 ns/op
Iteration  16: 831.205 ns/op
Iteration  17: 831.461 ns/op
Iteration  18: 832.714 ns/op
Iteration  19: 832.809 ns/op
Iteration  20: 832.960 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1229.644 ns/op
# Warmup Iteration   2: 905.082 ns/op
# Warmup Iteration   3: 769.768 ns/op
# Warmup Iteration   4: 772.941 ns/op
# Warmup Iteration   5: 774.384 ns/op
Iteration   1: 780.459 ns/op
Iteration   2: 784.588 ns/op
Iteration   3: 766.654 ns/op
Iteration   4: 766.433 ns/op
Iteration   5: 765.919 ns/op
Iteration   6: 765.806 ns/op
Iteration   7: 766.750 ns/op
Iteration   8: 767.484 ns/op
Iteration   9: 766.121 ns/op
Iteration  10: 766.618 ns/op
Iteration  11: 766.389 ns/op
Iteration  12: 764.042 ns/op
Iteration  13: 765.803 ns/op
Iteration  14: 763.999 ns/op
Iteration  15: 763.754 ns/op
Iteration  16: 763.892 ns/op
Iteration  17: 763.998 ns/op
Iteration  18: 763.873 ns/op
Iteration  19: 764.285 ns/op
Iteration  20: 764.343 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1235.137 ns/op
# Warmup Iteration   2: 908.283 ns/op
# Warmup Iteration   3: 781.219 ns/op
# Warmup Iteration   4: 777.998 ns/op
# Warmup Iteration   5: 785.416 ns/op
Iteration   1: 785.932 ns/op
Iteration   2: 794.730 ns/op
Iteration   3: 772.233 ns/op
Iteration   4: 771.490 ns/op
Iteration   5: 772.018 ns/op
Iteration   6: 772.558 ns/op
Iteration   7: 772.683 ns/op
Iteration   8: 775.758 ns/op
Iteration   9: 777.883 ns/op
Iteration  10: 771.999 ns/op
Iteration  11: 772.526 ns/op
Iteration  12: 769.236 ns/op
Iteration  13: 770.404 ns/op
Iteration  14: 769.987 ns/op
Iteration  15: 769.450 ns/op
Iteration  16: 770.940 ns/op
Iteration  17: 771.948 ns/op
Iteration  18: 771.030 ns/op
Iteration  19: 771.296 ns/op
Iteration  20: 771.968 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  778.861 Â±(99.9%) 9.674 ns/op [Average]
  (min, avg, max) = (755.033, 778.861, 852.394), stdev = 28.524
  CI (99.9%): [769.187, 788.535] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	  	     	

		

	   	
 	
 
 ,
 	  		
  
 
    	
	 
	 	  
	  	
 	
		

			   	



 

	

 

  

	
  	
 	
 			  
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1269.984 ns/op
# Warmup Iteration   2: 965.915 ns/op
# Warmup Iteration   3: 818.933 ns/op
# Warmup Iteration   4: 821.594 ns/op
# Warmup Iteration   5: 823.576 ns/op
Iteration   1: 827.750 ns/op
Iteration   2: 833.114 ns/op
Iteration   3: 814.950 ns/op
Iteration   4: 815.342 ns/op
Iteration   5: 814.830 ns/op
Iteration   6: 814.516 ns/op
Iteration   7: 815.263 ns/op
Iteration   8: 814.201 ns/op
Iteration   9: 813.564 ns/op
Iteration  10: 817.163 ns/op
Iteration  11: 819.317 ns/op
Iteration  12: 817.078 ns/op
Iteration  13: 812.295 ns/op
Iteration  14: 812.487 ns/op
Iteration  15: 812.556 ns/op
Iteration  16: 812.753 ns/op
Iteration  17: 813.289 ns/op
Iteration  18: 814.334 ns/op
Iteration  19: 813.874 ns/op
Iteration  20: 814.542 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1253.490 ns/op
# Warmup Iteration   2: 968.401 ns/op
# Warmup Iteration   3: 825.611 ns/op
# Warmup Iteration   4: 828.624 ns/op
# Warmup Iteration   5: 831.579 ns/op
Iteration   1: 836.471 ns/op
Iteration   2: 841.847 ns/op
Iteration   3: 821.895 ns/op
Iteration   4: 822.041 ns/op
Iteration   5: 821.713 ns/op
Iteration   6: 823.572 ns/op
Iteration   7: 823.091 ns/op
Iteration   8: 822.738 ns/op
Iteration   9: 822.789 ns/op
Iteration  10: 824.086 ns/op
Iteration  11: 822.402 ns/op
Iteration  12: 820.826 ns/op
Iteration  13: 820.262 ns/op
Iteration  14: 820.085 ns/op
Iteration  15: 820.044 ns/op
Iteration  16: 821.782 ns/op
Iteration  17: 822.747 ns/op
Iteration  18: 830.270 ns/op
Iteration  19: 823.000 ns/op
Iteration  20: 818.289 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1225.188 ns/op
# Warmup Iteration   2: 904.035 ns/op
# Warmup Iteration   3: 775.762 ns/op
# Warmup Iteration   4: 777.761 ns/op
# Warmup Iteration   5: 792.969 ns/op
Iteration   1: 795.502 ns/op
Iteration   2: 772.498 ns/op
Iteration   3: 771.557 ns/op
Iteration   4: 771.420 ns/op
Iteration   5: 771.071 ns/op
Iteration   6: 771.546 ns/op
Iteration   7: 771.306 ns/op
Iteration   8: 771.210 ns/op
Iteration   9: 771.834 ns/op
Iteration  10: 772.226 ns/op
Iteration  11: 772.447 ns/op
Iteration  12: 770.979 ns/op
Iteration  13: 771.466 ns/op
Iteration  14: 770.899 ns/op
Iteration  15: 769.350 ns/op
Iteration  16: 770.037 ns/op
Iteration  17: 770.890 ns/op
Iteration  18: 770.288 ns/op
Iteration  19: 770.438 ns/op
Iteration  20: 770.312 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1243.425 ns/op
# Warmup Iteration   2: 915.604 ns/op
# Warmup Iteration   3: 787.114 ns/op
# Warmup Iteration   4: 790.499 ns/op
# Warmup Iteration   5: 793.705 ns/op
Iteration   1: 796.876 ns/op
Iteration   2: 801.509 ns/op
Iteration   3: 784.789 ns/op
Iteration   4: 784.489 ns/op
Iteration   5: 784.856 ns/op
Iteration   6: 783.971 ns/op
Iteration   7: 784.653 ns/op
Iteration   8: 784.887 ns/op
Iteration   9: 791.777 ns/op
Iteration  10: 788.561 ns/op
Iteration  11: 783.630 ns/op
Iteration  12: 788.955 ns/op
Iteration  13: 779.982 ns/op
Iteration  14: 779.002 ns/op
Iteration  15: 779.376 ns/op
Iteration  16: 779.134 ns/op
Iteration  17: 779.838 ns/op
Iteration  18: 781.188 ns/op
Iteration  19: 781.590 ns/op
Iteration  20: 779.789 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1285.605 ns/op
# Warmup Iteration   2: 1023.854 ns/op
# Warmup Iteration   3: 866.075 ns/op
# Warmup Iteration   4: 867.942 ns/op
# Warmup Iteration   5: 871.265 ns/op
Iteration   1: 875.655 ns/op
Iteration   2: 886.364 ns/op
Iteration   3: 860.978 ns/op
Iteration   4: 861.102 ns/op
Iteration   5: 861.025 ns/op
Iteration   6: 861.504 ns/op
Iteration   7: 857.158 ns/op
Iteration   8: 860.943 ns/op
Iteration   9: 860.257 ns/op
Iteration  10: 860.332 ns/op
Iteration  11: 861.305 ns/op
Iteration  12: 861.782 ns/op
Iteration  13: 865.308 ns/op
Iteration  14: 861.895 ns/op
Iteration  15: 859.337 ns/op
Iteration  16: 860.275 ns/op
Iteration  17: 862.322 ns/op
Iteration  18: 860.511 ns/op
Iteration  19: 857.387 ns/op
Iteration  20: 859.858 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  812.046 Â±(99.9%) 10.998 ns/op [Average]
  (min, avg, max) = (769.350, 812.046, 886.364), stdev = 32.428
  CI (99.9%): [801.048, 823.044] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                      (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	  	     	

		

	   	
 	
 
 ,
 	  		
  
 
    	
	 
	 	  
	  	
 	
		

			   	



 

	

 

  

	
  	
 	
 			  
  avgt  100  778.861 Â±  9.674  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	  	     	

		

	   	
 	
 
 ,
 	  		
  
 
    	
	 
	 	  
	  	
 	
		

			   	



 

	

 

  

	
  	
 	
 			  
  avgt  100  812.046 Â± 10.998  ns/op

Benchmark result is saved to split_precompiled_regex_27_205_Match.csv
