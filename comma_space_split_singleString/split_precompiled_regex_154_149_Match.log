# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		 		  

  	
	

	    		

  	  	


  
 	
	 


 


		, 	
	

			

)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1095.513 ns/op
# Warmup Iteration   2: 761.401 ns/op
# Warmup Iteration   3: 684.065 ns/op
# Warmup Iteration   4: 685.257 ns/op
# Warmup Iteration   5: 683.029 ns/op
Iteration   1: 687.624 ns/op
Iteration   2: 671.601 ns/op
Iteration   3: 671.112 ns/op
Iteration   4: 674.809 ns/op
Iteration   5: 671.207 ns/op
Iteration   6: 671.569 ns/op
Iteration   7: 671.394 ns/op
Iteration   8: 671.304 ns/op
Iteration   9: 671.725 ns/op
Iteration  10: 673.093 ns/op
Iteration  11: 669.612 ns/op
Iteration  12: 669.759 ns/op
Iteration  13: 669.440 ns/op
Iteration  14: 669.640 ns/op
Iteration  15: 669.535 ns/op
Iteration  16: 669.483 ns/op
Iteration  17: 671.325 ns/op
Iteration  18: 669.717 ns/op
Iteration  19: 670.170 ns/op
Iteration  20: 670.158 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1100.303 ns/op
# Warmup Iteration   2: 780.107 ns/op
# Warmup Iteration   3: 698.093 ns/op
# Warmup Iteration   4: 693.497 ns/op
# Warmup Iteration   5: 700.453 ns/op
Iteration   1: 700.822 ns/op
Iteration   2: 685.653 ns/op
Iteration   3: 685.010 ns/op
Iteration   4: 685.678 ns/op
Iteration   5: 688.924 ns/op
Iteration   6: 685.837 ns/op
Iteration   7: 685.959 ns/op
Iteration   8: 685.793 ns/op
Iteration   9: 686.131 ns/op
Iteration  10: 688.696 ns/op
Iteration  11: 684.558 ns/op
Iteration  12: 683.219 ns/op
Iteration  13: 684.918 ns/op
Iteration  14: 683.276 ns/op
Iteration  15: 683.220 ns/op
Iteration  16: 684.639 ns/op
Iteration  17: 684.294 ns/op
Iteration  18: 684.354 ns/op
Iteration  19: 684.378 ns/op
Iteration  20: 683.390 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1094.686 ns/op
# Warmup Iteration   2: 740.593 ns/op
# Warmup Iteration   3: 664.759 ns/op
# Warmup Iteration   4: 659.121 ns/op
# Warmup Iteration   5: 662.695 ns/op
Iteration   1: 665.590 ns/op
Iteration   2: 653.938 ns/op
Iteration   3: 650.780 ns/op
Iteration   4: 651.022 ns/op
Iteration   5: 651.152 ns/op
Iteration   6: 650.952 ns/op
Iteration   7: 650.859 ns/op
Iteration   8: 657.488 ns/op
Iteration   9: 650.011 ns/op
Iteration  10: 648.860 ns/op
Iteration  11: 648.751 ns/op
Iteration  12: 648.893 ns/op
Iteration  13: 649.855 ns/op
Iteration  14: 648.708 ns/op
Iteration  15: 648.552 ns/op
Iteration  16: 650.352 ns/op
Iteration  17: 649.330 ns/op
Iteration  18: 650.277 ns/op
Iteration  19: 648.766 ns/op
Iteration  20: 649.222 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1080.347 ns/op
# Warmup Iteration   2: 748.216 ns/op
# Warmup Iteration   3: 674.894 ns/op
# Warmup Iteration   4: 670.593 ns/op
# Warmup Iteration   5: 674.002 ns/op
Iteration   1: 678.418 ns/op
Iteration   2: 663.211 ns/op
Iteration   3: 665.857 ns/op
Iteration   4: 662.330 ns/op
Iteration   5: 662.613 ns/op
Iteration   6: 662.123 ns/op
Iteration   7: 662.616 ns/op
Iteration   8: 663.390 ns/op
Iteration   9: 665.038 ns/op
Iteration  10: 660.779 ns/op
Iteration  11: 660.716 ns/op
Iteration  12: 660.631 ns/op
Iteration  13: 661.691 ns/op
Iteration  14: 661.173 ns/op
Iteration  15: 662.646 ns/op
Iteration  16: 661.688 ns/op
Iteration  17: 661.673 ns/op
Iteration  18: 662.831 ns/op
Iteration  19: 663.177 ns/op
Iteration  20: 663.178 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1091.897 ns/op
# Warmup Iteration   2: 761.527 ns/op
# Warmup Iteration   3: 684.262 ns/op
# Warmup Iteration   4: 678.715 ns/op
# Warmup Iteration   5: 683.197 ns/op
Iteration   1: 690.012 ns/op
Iteration   2: 672.570 ns/op
Iteration   3: 670.886 ns/op
Iteration   4: 673.991 ns/op
Iteration   5: 671.490 ns/op
Iteration   6: 671.913 ns/op
Iteration   7: 671.261 ns/op
Iteration   8: 671.618 ns/op
Iteration   9: 672.375 ns/op
Iteration  10: 672.243 ns/op
Iteration  11: 669.233 ns/op
Iteration  12: 669.074 ns/op
Iteration  13: 669.221 ns/op
Iteration  14: 669.108 ns/op
Iteration  15: 669.778 ns/op
Iteration  16: 669.622 ns/op
Iteration  17: 672.842 ns/op
Iteration  18: 672.013 ns/op
Iteration  19: 670.950 ns/op
Iteration  20: 671.301 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  668.837 ±(99.9%) 4.121 ns/op [Average]
  (min, avg, max) = (648.552, 668.837, 700.822), stdev = 12.152
  CI (99.9%): [664.715, 672.958] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
		 		  

  	
	

	    		

  	  	


  
 	
	 


 


		, 	
	

			

)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1175.947 ns/op
# Warmup Iteration   2: 817.111 ns/op
# Warmup Iteration   3: 720.562 ns/op
# Warmup Iteration   4: 716.408 ns/op
# Warmup Iteration   5: 720.221 ns/op
Iteration   1: 724.547 ns/op
Iteration   2: 708.769 ns/op
Iteration   3: 708.345 ns/op
Iteration   4: 707.895 ns/op
Iteration   5: 708.565 ns/op
Iteration   6: 711.714 ns/op
Iteration   7: 708.013 ns/op
Iteration   8: 708.203 ns/op
Iteration   9: 708.602 ns/op
Iteration  10: 705.628 ns/op
Iteration  11: 711.668 ns/op
Iteration  12: 706.321 ns/op
Iteration  13: 706.754 ns/op
Iteration  14: 709.031 ns/op
Iteration  15: 707.960 ns/op
Iteration  16: 706.826 ns/op
Iteration  17: 706.544 ns/op
Iteration  18: 707.364 ns/op
Iteration  19: 707.508 ns/op
Iteration  20: 708.039 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1163.147 ns/op
# Warmup Iteration   2: 792.553 ns/op
# Warmup Iteration   3: 702.189 ns/op
# Warmup Iteration   4: 698.443 ns/op
# Warmup Iteration   5: 704.265 ns/op
Iteration   1: 705.398 ns/op
Iteration   2: 688.591 ns/op
Iteration   3: 688.385 ns/op
Iteration   4: 694.742 ns/op
Iteration   5: 689.881 ns/op
Iteration   6: 688.104 ns/op
Iteration   7: 693.491 ns/op
Iteration   8: 688.733 ns/op
Iteration   9: 690.950 ns/op
Iteration  10: 689.716 ns/op
Iteration  11: 688.482 ns/op
Iteration  12: 685.670 ns/op
Iteration  13: 685.584 ns/op
Iteration  14: 686.379 ns/op
Iteration  15: 689.289 ns/op
Iteration  16: 686.830 ns/op
Iteration  17: 689.227 ns/op
Iteration  18: 686.469 ns/op
Iteration  19: 687.124 ns/op
Iteration  20: 687.446 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1161.553 ns/op
# Warmup Iteration   2: 797.023 ns/op
# Warmup Iteration   3: 709.068 ns/op
# Warmup Iteration   4: 704.420 ns/op
# Warmup Iteration   5: 708.176 ns/op
Iteration   1: 713.477 ns/op
Iteration   2: 702.557 ns/op
Iteration   3: 696.419 ns/op
Iteration   4: 696.081 ns/op
Iteration   5: 699.368 ns/op
Iteration   6: 695.987 ns/op
Iteration   7: 695.681 ns/op
Iteration   8: 697.715 ns/op
Iteration   9: 696.105 ns/op
Iteration  10: 701.794 ns/op
Iteration  11: 694.052 ns/op
Iteration  12: 695.252 ns/op
Iteration  13: 693.385 ns/op
Iteration  14: 694.182 ns/op
Iteration  15: 693.976 ns/op
Iteration  16: 693.992 ns/op
Iteration  17: 694.246 ns/op
Iteration  18: 694.426 ns/op
Iteration  19: 696.285 ns/op
Iteration  20: 694.810 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1148.884 ns/op
# Warmup Iteration   2: 801.893 ns/op
# Warmup Iteration   3: 714.677 ns/op
# Warmup Iteration   4: 710.819 ns/op
# Warmup Iteration   5: 714.316 ns/op
Iteration   1: 718.904 ns/op
Iteration   2: 703.290 ns/op
Iteration   3: 702.848 ns/op
Iteration   4: 702.991 ns/op
Iteration   5: 706.215 ns/op
Iteration   6: 701.765 ns/op
Iteration   7: 702.513 ns/op
Iteration   8: 703.232 ns/op
Iteration   9: 703.212 ns/op
Iteration  10: 701.090 ns/op
Iteration  11: 701.278 ns/op
Iteration  12: 701.016 ns/op
Iteration  13: 703.081 ns/op
Iteration  14: 700.314 ns/op
Iteration  15: 701.017 ns/op
Iteration  16: 700.806 ns/op
Iteration  17: 700.761 ns/op
Iteration  18: 700.707 ns/op
Iteration  19: 701.442 ns/op
Iteration  20: 701.543 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1139.827 ns/op
# Warmup Iteration   2: 787.949 ns/op
# Warmup Iteration   3: 703.943 ns/op
# Warmup Iteration   4: 699.719 ns/op
# Warmup Iteration   5: 703.859 ns/op
Iteration   1: 708.428 ns/op
Iteration   2: 693.179 ns/op
Iteration   3: 692.177 ns/op
Iteration   4: 698.581 ns/op
Iteration   5: 692.059 ns/op
Iteration   6: 692.659 ns/op
Iteration   7: 692.278 ns/op
Iteration   8: 692.240 ns/op
Iteration   9: 692.289 ns/op
Iteration  10: 691.409 ns/op
Iteration  11: 693.783 ns/op
Iteration  12: 689.807 ns/op
Iteration  13: 690.003 ns/op
Iteration  14: 689.252 ns/op
Iteration  15: 690.875 ns/op
Iteration  16: 690.681 ns/op
Iteration  17: 693.949 ns/op
Iteration  18: 695.507 ns/op
Iteration  19: 691.087 ns/op
Iteration  20: 691.963 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  698.288 ±(99.9%) 2.749 ns/op [Average]
  (min, avg, max) = (685.584, 698.288, 724.547), stdev = 8.106
  CI (99.9%): [695.539, 701.037] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                              (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
		 		  

  	
	

	    		

  	  	


  
 	
	 


 


		, 	
	

			

  avgt  100  668.837 ± 4.121  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
		 		  

  	
	

	    		

  	  	


  
 	
	 


 


		, 	
	

			

  avgt  100  698.288 ± 2.749  ns/op

Benchmark result is saved to split_precompiled_regex_154_149_Match.csv
