# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 	 	 
		 	   	 		
	
 
 	,	

 	 
 	
	
   	
  	 
	 	 


	

	


	

 	 



	
	 	    

	  
 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1200.278 ns/op
# Warmup Iteration   2: 914.019 ns/op
# Warmup Iteration   3: 784.207 ns/op
# Warmup Iteration   4: 786.930 ns/op
# Warmup Iteration   5: 788.604 ns/op
Iteration   1: 795.095 ns/op
Iteration   2: 799.247 ns/op
Iteration   3: 780.427 ns/op
Iteration   4: 780.464 ns/op
Iteration   5: 780.407 ns/op
Iteration   6: 779.325 ns/op
Iteration   7: 780.387 ns/op
Iteration   8: 780.957 ns/op
Iteration   9: 780.203 ns/op
Iteration  10: 781.421 ns/op
Iteration  11: 786.567 ns/op
Iteration  12: 779.867 ns/op
Iteration  13: 779.116 ns/op
Iteration  14: 779.278 ns/op
Iteration  15: 779.532 ns/op
Iteration  16: 782.529 ns/op
Iteration  17: 781.800 ns/op
Iteration  18: 779.669 ns/op
Iteration  19: 828.220 ns/op
Iteration  20: 780.844 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1253.960 ns/op
# Warmup Iteration   2: 936.360 ns/op
# Warmup Iteration   3: 812.435 ns/op
# Warmup Iteration   4: 793.239 ns/op
# Warmup Iteration   5: 796.196 ns/op
Iteration   1: 803.325 ns/op
Iteration   2: 806.536 ns/op
Iteration   3: 788.673 ns/op
Iteration   4: 788.901 ns/op
Iteration   5: 787.258 ns/op
Iteration   6: 787.709 ns/op
Iteration   7: 788.679 ns/op
Iteration   8: 788.359 ns/op
Iteration   9: 793.323 ns/op
Iteration  10: 788.968 ns/op
Iteration  11: 788.045 ns/op
Iteration  12: 790.162 ns/op
Iteration  13: 786.370 ns/op
Iteration  14: 784.348 ns/op
Iteration  15: 784.210 ns/op
Iteration  16: 794.074 ns/op
Iteration  17: 798.451 ns/op
Iteration  18: 783.789 ns/op
Iteration  19: 783.691 ns/op
Iteration  20: 783.663 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1200.816 ns/op
# Warmup Iteration   2: 921.027 ns/op
# Warmup Iteration   3: 791.329 ns/op
# Warmup Iteration   4: 795.066 ns/op
# Warmup Iteration   5: 795.227 ns/op
Iteration   1: 792.497 ns/op
Iteration   2: 802.480 ns/op
Iteration   3: 782.296 ns/op
Iteration   4: 785.699 ns/op
Iteration   5: 780.910 ns/op
Iteration   6: 778.453 ns/op
Iteration   7: 778.621 ns/op
Iteration   8: 779.395 ns/op
Iteration   9: 793.883 ns/op
Iteration  10: 779.223 ns/op
Iteration  11: 779.220 ns/op
Iteration  12: 779.069 ns/op
Iteration  13: 777.506 ns/op
Iteration  14: 777.860 ns/op
Iteration  15: 778.033 ns/op
Iteration  16: 776.759 ns/op
Iteration  17: 776.650 ns/op
Iteration  18: 776.731 ns/op
Iteration  19: 784.872 ns/op
Iteration  20: 779.302 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1217.047 ns/op
# Warmup Iteration   2: 861.225 ns/op
# Warmup Iteration   3: 740.030 ns/op
# Warmup Iteration   4: 754.840 ns/op
# Warmup Iteration   5: 752.309 ns/op
Iteration   1: 755.546 ns/op
Iteration   2: 736.678 ns/op
Iteration   3: 737.001 ns/op
Iteration   4: 736.024 ns/op
Iteration   5: 735.635 ns/op
Iteration   6: 736.193 ns/op
Iteration   7: 737.179 ns/op
Iteration   8: 742.425 ns/op
Iteration   9: 739.968 ns/op
Iteration  10: 737.276 ns/op
Iteration  11: 739.533 ns/op
Iteration  12: 734.690 ns/op
Iteration  13: 734.523 ns/op
Iteration  14: 734.423 ns/op
Iteration  15: 734.590 ns/op
Iteration  16: 739.801 ns/op
Iteration  17: 735.228 ns/op
Iteration  18: 739.691 ns/op
Iteration  19: 739.067 ns/op
Iteration  20: 737.425 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1258.231 ns/op
# Warmup Iteration   2: 935.226 ns/op
# Warmup Iteration   3: 791.996 ns/op
# Warmup Iteration   4: 794.997 ns/op
# Warmup Iteration   5: 798.208 ns/op
Iteration   1: 801.940 ns/op
Iteration   2: 806.953 ns/op
Iteration   3: 788.961 ns/op
Iteration   4: 788.384 ns/op
Iteration   5: 788.686 ns/op
Iteration   6: 789.021 ns/op
Iteration   7: 788.851 ns/op
Iteration   8: 789.314 ns/op
Iteration   9: 789.554 ns/op
Iteration  10: 794.855 ns/op
Iteration  11: 791.964 ns/op
Iteration  12: 788.067 ns/op
Iteration  13: 787.968 ns/op
Iteration  14: 787.975 ns/op
Iteration  15: 788.066 ns/op
Iteration  16: 788.620 ns/op
Iteration  17: 789.651 ns/op
Iteration  18: 790.031 ns/op
Iteration  19: 789.992 ns/op
Iteration  20: 789.940 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  777.150 Â±(99.9%) 7.166 ns/op [Average]
  (min, avg, max) = (734.423, 777.150, 828.220), stdev = 21.128
  CI (99.9%): [769.985, 784.316] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 	
 	 	 
		 	   	 		
	
 
 	,	

 	 
 	
	
   	
  	 
	 	 


	

	


	

 	 



	
	 	    

	  
 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1229.890 ns/op
# Warmup Iteration   2: 889.772 ns/op
# Warmup Iteration   3: 768.060 ns/op
# Warmup Iteration   4: 787.167 ns/op
# Warmup Iteration   5: 775.618 ns/op
Iteration   1: 780.019 ns/op
Iteration   2: 768.119 ns/op
Iteration   3: 763.167 ns/op
Iteration   4: 762.518 ns/op
Iteration   5: 762.997 ns/op
Iteration   6: 762.534 ns/op
Iteration   7: 762.306 ns/op
Iteration   8: 762.247 ns/op
Iteration   9: 764.434 ns/op
Iteration  10: 768.928 ns/op
Iteration  11: 761.450 ns/op
Iteration  12: 759.712 ns/op
Iteration  13: 761.119 ns/op
Iteration  14: 759.753 ns/op
Iteration  15: 760.338 ns/op
Iteration  16: 761.313 ns/op
Iteration  17: 761.038 ns/op
Iteration  18: 761.263 ns/op
Iteration  19: 761.053 ns/op
Iteration  20: 761.012 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1246.790 ns/op
# Warmup Iteration   2: 934.325 ns/op
# Warmup Iteration   3: 796.567 ns/op
# Warmup Iteration   4: 798.945 ns/op
# Warmup Iteration   5: 802.690 ns/op
Iteration   1: 806.460 ns/op
Iteration   2: 811.953 ns/op
Iteration   3: 793.224 ns/op
Iteration   4: 792.682 ns/op
Iteration   5: 794.474 ns/op
Iteration   6: 793.708 ns/op
Iteration   7: 792.753 ns/op
Iteration   8: 792.675 ns/op
Iteration   9: 792.185 ns/op
Iteration  10: 793.224 ns/op
Iteration  11: 793.465 ns/op
Iteration  12: 790.187 ns/op
Iteration  13: 790.685 ns/op
Iteration  14: 800.049 ns/op
Iteration  15: 791.293 ns/op
Iteration  16: 791.194 ns/op
Iteration  17: 791.684 ns/op
Iteration  18: 792.318 ns/op
Iteration  19: 793.454 ns/op
Iteration  20: 793.007 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1255.981 ns/op
# Warmup Iteration   2: 955.458 ns/op
# Warmup Iteration   3: 813.941 ns/op
# Warmup Iteration   4: 815.770 ns/op
# Warmup Iteration   5: 819.752 ns/op
Iteration   1: 823.476 ns/op
Iteration   2: 829.027 ns/op
Iteration   3: 810.641 ns/op
Iteration   4: 811.570 ns/op
Iteration   5: 810.428 ns/op
Iteration   6: 810.078 ns/op
Iteration   7: 811.914 ns/op
Iteration   8: 811.806 ns/op
Iteration   9: 810.631 ns/op
Iteration  10: 811.956 ns/op
Iteration  11: 815.234 ns/op
Iteration  12: 808.320 ns/op
Iteration  13: 808.211 ns/op
Iteration  14: 811.627 ns/op
Iteration  15: 809.448 ns/op
Iteration  16: 809.184 ns/op
Iteration  17: 809.023 ns/op
Iteration  18: 810.947 ns/op
Iteration  19: 814.273 ns/op
Iteration  20: 808.642 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1264.867 ns/op
# Warmup Iteration   2: 959.326 ns/op
# Warmup Iteration   3: 815.882 ns/op
# Warmup Iteration   4: 818.395 ns/op
# Warmup Iteration   5: 821.562 ns/op
Iteration   1: 825.123 ns/op
Iteration   2: 830.145 ns/op
Iteration   3: 810.949 ns/op
Iteration   4: 812.091 ns/op
Iteration   5: 811.899 ns/op
Iteration   6: 812.184 ns/op
Iteration   7: 812.300 ns/op
Iteration   8: 815.252 ns/op
Iteration   9: 813.465 ns/op
Iteration  10: 815.361 ns/op
Iteration  11: 814.569 ns/op
Iteration  12: 821.737 ns/op
Iteration  13: 810.379 ns/op
Iteration  14: 810.028 ns/op
Iteration  15: 810.250 ns/op
Iteration  16: 810.281 ns/op
Iteration  17: 811.147 ns/op
Iteration  18: 830.600 ns/op
Iteration  19: 810.869 ns/op
Iteration  20: 811.836 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1252.860 ns/op
# Warmup Iteration   2: 969.286 ns/op
# Warmup Iteration   3: 827.768 ns/op
# Warmup Iteration   4: 830.267 ns/op
# Warmup Iteration   5: 833.698 ns/op
Iteration   1: 837.222 ns/op
Iteration   2: 843.819 ns/op
Iteration   3: 823.439 ns/op
Iteration   4: 824.133 ns/op
Iteration   5: 823.298 ns/op
Iteration   6: 823.164 ns/op
Iteration   7: 822.997 ns/op
Iteration   8: 823.765 ns/op
Iteration   9: 826.299 ns/op
Iteration  10: 823.214 ns/op
Iteration  11: 825.007 ns/op
Iteration  12: 836.441 ns/op
Iteration  13: 822.919 ns/op
Iteration  14: 822.493 ns/op
Iteration  15: 828.016 ns/op
Iteration  16: 823.298 ns/op
Iteration  17: 821.202 ns/op
Iteration  18: 818.990 ns/op
Iteration  19: 822.194 ns/op
Iteration  20: 821.957 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  802.168 Â±(99.9%) 7.690 ns/op [Average]
  (min, avg, max) = (759.712, 802.168, 843.819), stdev = 22.673
  CI (99.9%): [794.478, 809.857] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  	
 	 	 
		 	   	 		
	
 
 	,	

 	 
 	
	
   	
  	 
	 	 


	

	


	

 	 



	
	 	    

	  
 
  avgt  100  777.150 Â± 7.166  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  	
 	 	 
		 	   	 		
	
 
 	,	

 	 
 	
	
   	
  	 
	 	 


	

	


	

 	 



	
	 	    

	  
 
  avgt  100  802.168 Â± 7.690  ns/op

Benchmark result is saved to split_precompiled_regex_49_182_Match.csv
