# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  ,			 
				

		
				   
    
  	 	 
				
  	

	 
	
		


 


)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1041.752 ns/op
# Warmup Iteration   2: 700.708 ns/op
# Warmup Iteration   3: 628.586 ns/op
# Warmup Iteration   4: 631.385 ns/op
# Warmup Iteration   5: 633.987 ns/op
Iteration   1: 640.105 ns/op
Iteration   2: 623.511 ns/op
Iteration   3: 622.856 ns/op
Iteration   4: 623.895 ns/op
Iteration   5: 626.600 ns/op
Iteration   6: 624.520 ns/op
Iteration   7: 623.794 ns/op
Iteration   8: 623.952 ns/op
Iteration   9: 623.185 ns/op
Iteration  10: 627.233 ns/op
Iteration  11: 622.357 ns/op
Iteration  12: 621.957 ns/op
Iteration  13: 625.428 ns/op
Iteration  14: 623.772 ns/op
Iteration  15: 623.703 ns/op
Iteration  16: 622.501 ns/op
Iteration  17: 622.316 ns/op
Iteration  18: 625.290 ns/op
Iteration  19: 622.704 ns/op
Iteration  20: 623.787 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1039.386 ns/op
# Warmup Iteration   2: 697.641 ns/op
# Warmup Iteration   3: 626.492 ns/op
# Warmup Iteration   4: 629.113 ns/op
# Warmup Iteration   5: 639.487 ns/op
Iteration   1: 633.137 ns/op
Iteration   2: 622.462 ns/op
Iteration   3: 625.688 ns/op
Iteration   4: 622.510 ns/op
Iteration   5: 624.389 ns/op
Iteration   6: 621.519 ns/op
Iteration   7: 621.441 ns/op
Iteration   8: 621.753 ns/op
Iteration   9: 621.134 ns/op
Iteration  10: 620.071 ns/op
Iteration  11: 620.024 ns/op
Iteration  12: 619.772 ns/op
Iteration  13: 621.542 ns/op
Iteration  14: 619.480 ns/op
Iteration  15: 620.105 ns/op
Iteration  16: 620.069 ns/op
Iteration  17: 621.620 ns/op
Iteration  18: 620.279 ns/op
Iteration  19: 624.495 ns/op
Iteration  20: 621.651 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1040.799 ns/op
# Warmup Iteration   2: 698.802 ns/op
# Warmup Iteration   3: 627.979 ns/op
# Warmup Iteration   4: 630.814 ns/op
# Warmup Iteration   5: 637.171 ns/op
Iteration   1: 637.341 ns/op
Iteration   2: 623.108 ns/op
Iteration   3: 622.945 ns/op
Iteration   4: 623.407 ns/op
Iteration   5: 626.200 ns/op
Iteration   6: 623.105 ns/op
Iteration   7: 623.507 ns/op
Iteration   8: 625.077 ns/op
Iteration   9: 622.513 ns/op
Iteration  10: 621.247 ns/op
Iteration  11: 622.879 ns/op
Iteration  12: 621.172 ns/op
Iteration  13: 622.175 ns/op
Iteration  14: 621.473 ns/op
Iteration  15: 621.674 ns/op
Iteration  16: 621.790 ns/op
Iteration  17: 622.874 ns/op
Iteration  18: 621.687 ns/op
Iteration  19: 621.683 ns/op
Iteration  20: 621.877 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1039.655 ns/op
# Warmup Iteration   2: 700.106 ns/op
# Warmup Iteration   3: 631.069 ns/op
# Warmup Iteration   4: 630.773 ns/op
# Warmup Iteration   5: 636.522 ns/op
Iteration   1: 638.084 ns/op
Iteration   2: 623.139 ns/op
Iteration   3: 622.993 ns/op
Iteration   4: 622.936 ns/op
Iteration   5: 627.720 ns/op
Iteration   6: 624.446 ns/op
Iteration   7: 622.641 ns/op
Iteration   8: 623.175 ns/op
Iteration   9: 628.884 ns/op
Iteration  10: 621.168 ns/op
Iteration  11: 621.032 ns/op
Iteration  12: 622.711 ns/op
Iteration  13: 624.959 ns/op
Iteration  14: 621.055 ns/op
Iteration  15: 621.421 ns/op
Iteration  16: 621.447 ns/op
Iteration  17: 622.688 ns/op
Iteration  18: 622.229 ns/op
Iteration  19: 621.806 ns/op
Iteration  20: 621.609 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1093.789 ns/op
# Warmup Iteration   2: 714.246 ns/op
# Warmup Iteration   3: 642.260 ns/op
# Warmup Iteration   4: 635.738 ns/op
# Warmup Iteration   5: 643.048 ns/op
Iteration   1: 649.668 ns/op
Iteration   2: 628.239 ns/op
Iteration   3: 630.565 ns/op
Iteration   4: 631.571 ns/op
Iteration   5: 627.983 ns/op
Iteration   6: 633.220 ns/op
Iteration   7: 627.762 ns/op
Iteration   8: 627.269 ns/op
Iteration   9: 629.147 ns/op
Iteration  10: 626.996 ns/op
Iteration  11: 625.469 ns/op
Iteration  12: 625.582 ns/op
Iteration  13: 626.053 ns/op
Iteration  14: 629.373 ns/op
Iteration  15: 630.184 ns/op
Iteration  16: 626.835 ns/op
Iteration  17: 626.835 ns/op
Iteration  18: 626.531 ns/op
Iteration  19: 628.386 ns/op
Iteration  20: 626.659 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  624.648 ±(99.9%) 1.565 ns/op [Average]
  (min, avg, max) = (619.480, 624.648, 649.668), stdev = 4.614
  CI (99.9%): [623.083, 626.213] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  ,			 
				

		
				   
    
  	 	 
				
  	

	 
	
		


 


)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1146.880 ns/op
# Warmup Iteration   2: 791.456 ns/op
# Warmup Iteration   3: 704.756 ns/op
# Warmup Iteration   4: 701.425 ns/op
# Warmup Iteration   5: 705.201 ns/op
Iteration   1: 709.748 ns/op
Iteration   2: 693.751 ns/op
Iteration   3: 693.443 ns/op
Iteration   4: 696.885 ns/op
Iteration   5: 694.130 ns/op
Iteration   6: 693.795 ns/op
Iteration   7: 693.128 ns/op
Iteration   8: 692.996 ns/op
Iteration   9: 693.480 ns/op
Iteration  10: 691.359 ns/op
Iteration  11: 692.248 ns/op
Iteration  12: 691.748 ns/op
Iteration  13: 691.029 ns/op
Iteration  14: 691.661 ns/op
Iteration  15: 692.566 ns/op
Iteration  16: 694.188 ns/op
Iteration  17: 691.265 ns/op
Iteration  18: 692.847 ns/op
Iteration  19: 692.572 ns/op
Iteration  20: 693.273 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1106.762 ns/op
# Warmup Iteration   2: 738.454 ns/op
# Warmup Iteration   3: 661.862 ns/op
# Warmup Iteration   4: 658.127 ns/op
# Warmup Iteration   5: 661.024 ns/op
Iteration   1: 668.819 ns/op
Iteration   2: 650.747 ns/op
Iteration   3: 650.234 ns/op
Iteration   4: 650.455 ns/op
Iteration   5: 649.939 ns/op
Iteration   6: 657.049 ns/op
Iteration   7: 650.232 ns/op
Iteration   8: 650.871 ns/op
Iteration   9: 648.049 ns/op
Iteration  10: 648.072 ns/op
Iteration  11: 649.374 ns/op
Iteration  12: 648.295 ns/op
Iteration  13: 648.592 ns/op
Iteration  14: 648.288 ns/op
Iteration  15: 650.357 ns/op
Iteration  16: 649.479 ns/op
Iteration  17: 649.363 ns/op
Iteration  18: 649.395 ns/op
Iteration  19: 648.823 ns/op
Iteration  20: 651.284 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1158.431 ns/op
# Warmup Iteration   2: 779.882 ns/op
# Warmup Iteration   3: 694.429 ns/op
# Warmup Iteration   4: 689.727 ns/op
# Warmup Iteration   5: 693.473 ns/op
Iteration   1: 697.721 ns/op
Iteration   2: 682.964 ns/op
Iteration   3: 685.382 ns/op
Iteration   4: 681.414 ns/op
Iteration   5: 682.037 ns/op
Iteration   6: 680.526 ns/op
Iteration   7: 681.121 ns/op
Iteration   8: 681.872 ns/op
Iteration   9: 682.474 ns/op
Iteration  10: 679.271 ns/op
Iteration  11: 679.608 ns/op
Iteration  12: 679.643 ns/op
Iteration  13: 679.740 ns/op
Iteration  14: 679.518 ns/op
Iteration  15: 684.712 ns/op
Iteration  16: 681.342 ns/op
Iteration  17: 682.183 ns/op
Iteration  18: 691.794 ns/op
Iteration  19: 680.015 ns/op
Iteration  20: 680.159 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1110.563 ns/op
# Warmup Iteration   2: 725.402 ns/op
# Warmup Iteration   3: 641.713 ns/op
# Warmup Iteration   4: 644.439 ns/op
# Warmup Iteration   5: 647.933 ns/op
Iteration   1: 655.873 ns/op
Iteration   2: 638.044 ns/op
Iteration   3: 636.769 ns/op
Iteration   4: 637.962 ns/op
Iteration   5: 640.359 ns/op
Iteration   6: 642.123 ns/op
Iteration   7: 637.148 ns/op
Iteration   8: 637.510 ns/op
Iteration   9: 636.345 ns/op
Iteration  10: 634.989 ns/op
Iteration  11: 635.055 ns/op
Iteration  12: 635.056 ns/op
Iteration  13: 639.975 ns/op
Iteration  14: 636.672 ns/op
Iteration  15: 636.311 ns/op
Iteration  16: 636.950 ns/op
Iteration  17: 638.595 ns/op
Iteration  18: 636.808 ns/op
Iteration  19: 637.081 ns/op
Iteration  20: 637.042 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1079.982 ns/op
# Warmup Iteration   2: 730.559 ns/op
# Warmup Iteration   3: 650.738 ns/op
# Warmup Iteration   4: 652.781 ns/op
# Warmup Iteration   5: 656.445 ns/op
Iteration   1: 662.488 ns/op
Iteration   2: 646.386 ns/op
Iteration   3: 646.069 ns/op
Iteration   4: 646.148 ns/op
Iteration   5: 646.075 ns/op
Iteration   6: 649.699 ns/op
Iteration   7: 646.613 ns/op
Iteration   8: 646.090 ns/op
Iteration   9: 644.442 ns/op
Iteration  10: 646.424 ns/op
Iteration  11: 644.863 ns/op
Iteration  12: 644.730 ns/op
Iteration  13: 645.550 ns/op
Iteration  14: 646.225 ns/op
Iteration  15: 650.012 ns/op
Iteration  16: 646.079 ns/op
Iteration  17: 646.083 ns/op
Iteration  18: 646.581 ns/op
Iteration  19: 649.410 ns/op
Iteration  20: 645.985 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  662.599 ±(99.9%) 7.508 ns/op [Average]
  (min, avg, max) = (634.989, 662.599, 709.748), stdev = 22.138
  CI (99.9%): [655.091, 670.107] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                   (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   ,			 
				

		
				   
    
  	 	 
				
  	

	 
	
		


 


  avgt  100  624.648 ± 1.565  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   ,			 
				

		
				   
    
  	 	 
				
  	

	 
	
		


 


  avgt  100  662.599 ± 7.508  ns/op

Benchmark result is saved to split_precompiled_regex_91_122_Match.csv
