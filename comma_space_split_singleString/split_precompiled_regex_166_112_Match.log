# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
			  
 
	
		
,		

 	
 
  	 	
 
	 

	
	

		 


		)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1052.868 ns/op
# Warmup Iteration   2: 718.753 ns/op
# Warmup Iteration   3: 643.749 ns/op
# Warmup Iteration   4: 641.009 ns/op
# Warmup Iteration   5: 641.723 ns/op
Iteration   1: 648.489 ns/op
Iteration   2: 630.269 ns/op
Iteration   3: 636.815 ns/op
Iteration   4: 630.372 ns/op
Iteration   5: 629.549 ns/op
Iteration   6: 632.592 ns/op
Iteration   7: 630.435 ns/op
Iteration   8: 630.237 ns/op
Iteration   9: 628.159 ns/op
Iteration  10: 629.684 ns/op
Iteration  11: 628.353 ns/op
Iteration  12: 628.441 ns/op
Iteration  13: 628.337 ns/op
Iteration  14: 633.716 ns/op
Iteration  15: 631.148 ns/op
Iteration  16: 628.886 ns/op
Iteration  17: 628.292 ns/op
Iteration  18: 628.173 ns/op
Iteration  19: 629.733 ns/op
Iteration  20: 628.367 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1021.782 ns/op
# Warmup Iteration   2: 667.640 ns/op
# Warmup Iteration   3: 605.486 ns/op
# Warmup Iteration   4: 608.605 ns/op
# Warmup Iteration   5: 629.815 ns/op
Iteration   1: 603.686 ns/op
Iteration   2: 601.746 ns/op
Iteration   3: 605.132 ns/op
Iteration   4: 603.069 ns/op
Iteration   5: 602.093 ns/op
Iteration   6: 601.854 ns/op
Iteration   7: 607.386 ns/op
Iteration   8: 599.270 ns/op
Iteration   9: 598.966 ns/op
Iteration  10: 600.391 ns/op
Iteration  11: 599.213 ns/op
Iteration  12: 599.156 ns/op
Iteration  13: 599.711 ns/op
Iteration  14: 600.933 ns/op
Iteration  15: 599.668 ns/op
Iteration  16: 599.708 ns/op
Iteration  17: 602.758 ns/op
Iteration  18: 599.700 ns/op
Iteration  19: 600.409 ns/op
Iteration  20: 600.397 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1019.849 ns/op
# Warmup Iteration   2: 674.724 ns/op
# Warmup Iteration   3: 611.763 ns/op
# Warmup Iteration   4: 614.497 ns/op
# Warmup Iteration   5: 635.143 ns/op
Iteration   1: 606.979 ns/op
Iteration   2: 607.037 ns/op
Iteration   3: 606.744 ns/op
Iteration   4: 609.877 ns/op
Iteration   5: 606.949 ns/op
Iteration   6: 606.500 ns/op
Iteration   7: 606.559 ns/op
Iteration   8: 607.602 ns/op
Iteration   9: 604.399 ns/op
Iteration  10: 604.402 ns/op
Iteration  11: 605.389 ns/op
Iteration  12: 604.772 ns/op
Iteration  13: 608.895 ns/op
Iteration  14: 605.831 ns/op
Iteration  15: 606.028 ns/op
Iteration  16: 605.371 ns/op
Iteration  17: 605.162 ns/op
Iteration  18: 609.136 ns/op
Iteration  19: 605.697 ns/op
Iteration  20: 606.904 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1017.958 ns/op
# Warmup Iteration   2: 664.745 ns/op
# Warmup Iteration   3: 602.436 ns/op
# Warmup Iteration   4: 604.604 ns/op
# Warmup Iteration   5: 625.538 ns/op
Iteration   1: 597.399 ns/op
Iteration   2: 597.588 ns/op
Iteration   3: 601.059 ns/op
Iteration   4: 597.301 ns/op
Iteration   5: 597.681 ns/op
Iteration   6: 598.028 ns/op
Iteration   7: 600.703 ns/op
Iteration   8: 596.835 ns/op
Iteration   9: 598.440 ns/op
Iteration  10: 596.760 ns/op
Iteration  11: 595.249 ns/op
Iteration  12: 595.353 ns/op
Iteration  13: 599.003 ns/op
Iteration  14: 597.793 ns/op
Iteration  15: 595.818 ns/op
Iteration  16: 595.543 ns/op
Iteration  17: 597.245 ns/op
Iteration  18: 595.603 ns/op
Iteration  19: 596.236 ns/op
Iteration  20: 598.584 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1022.677 ns/op
# Warmup Iteration   2: 675.095 ns/op
# Warmup Iteration   3: 607.769 ns/op
# Warmup Iteration   4: 609.818 ns/op
# Warmup Iteration   5: 629.997 ns/op
Iteration   1: 602.266 ns/op
Iteration   2: 602.525 ns/op
Iteration   3: 602.413 ns/op
Iteration   4: 605.338 ns/op
Iteration   5: 602.547 ns/op
Iteration   6: 605.460 ns/op
Iteration   7: 605.822 ns/op
Iteration   8: 603.928 ns/op
Iteration   9: 600.544 ns/op
Iteration  10: 600.644 ns/op
Iteration  11: 601.708 ns/op
Iteration  12: 600.720 ns/op
Iteration  13: 600.112 ns/op
Iteration  14: 601.262 ns/op
Iteration  15: 600.206 ns/op
Iteration  16: 601.187 ns/op
Iteration  17: 600.332 ns/op
Iteration  18: 602.010 ns/op
Iteration  19: 600.421 ns/op
Iteration  20: 600.502 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  607.637 ±(99.9%) 4.195 ns/op [Average]
  (min, avg, max) = (595.249, 607.637, 648.489), stdev = 12.370
  CI (99.9%): [603.441, 611.832] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
			  
 
	
		
,		

 	
 
  	 	
 
	 

	
	

		 


		)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1073.897 ns/op
# Warmup Iteration   2: 682.839 ns/op
# Warmup Iteration   3: 615.076 ns/op
# Warmup Iteration   4: 617.443 ns/op
# Warmup Iteration   5: 638.361 ns/op
Iteration   1: 609.837 ns/op
Iteration   2: 609.548 ns/op
Iteration   3: 612.406 ns/op
Iteration   4: 609.511 ns/op
Iteration   5: 609.353 ns/op
Iteration   6: 609.305 ns/op
Iteration   7: 612.469 ns/op
Iteration   8: 607.488 ns/op
Iteration   9: 607.270 ns/op
Iteration  10: 608.334 ns/op
Iteration  11: 607.371 ns/op
Iteration  12: 606.666 ns/op
Iteration  13: 607.921 ns/op
Iteration  14: 606.913 ns/op
Iteration  15: 612.069 ns/op
Iteration  16: 607.205 ns/op
Iteration  17: 609.859 ns/op
Iteration  18: 607.749 ns/op
Iteration  19: 607.624 ns/op
Iteration  20: 609.603 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1081.800 ns/op
# Warmup Iteration   2: 699.973 ns/op
# Warmup Iteration   3: 622.986 ns/op
# Warmup Iteration   4: 625.494 ns/op
# Warmup Iteration   5: 649.734 ns/op
Iteration   1: 618.627 ns/op
Iteration   2: 618.220 ns/op
Iteration   3: 621.002 ns/op
Iteration   4: 624.030 ns/op
Iteration   5: 619.236 ns/op
Iteration   6: 617.475 ns/op
Iteration   7: 620.631 ns/op
Iteration   8: 615.472 ns/op
Iteration   9: 615.597 ns/op
Iteration  10: 615.631 ns/op
Iteration  11: 616.639 ns/op
Iteration  12: 615.378 ns/op
Iteration  13: 615.638 ns/op
Iteration  14: 615.669 ns/op
Iteration  15: 617.557 ns/op
Iteration  16: 615.651 ns/op
Iteration  17: 615.714 ns/op
Iteration  18: 623.430 ns/op
Iteration  19: 616.753 ns/op
Iteration  20: 621.016 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1040.292 ns/op
# Warmup Iteration   2: 691.036 ns/op
# Warmup Iteration   3: 632.539 ns/op
# Warmup Iteration   4: 635.404 ns/op
# Warmup Iteration   5: 656.077 ns/op
Iteration   1: 628.679 ns/op
Iteration   2: 627.732 ns/op
Iteration   3: 627.406 ns/op
Iteration   4: 630.557 ns/op
Iteration   5: 628.048 ns/op
Iteration   6: 627.697 ns/op
Iteration   7: 627.484 ns/op
Iteration   8: 632.965 ns/op
Iteration   9: 625.874 ns/op
Iteration  10: 626.169 ns/op
Iteration  11: 626.739 ns/op
Iteration  12: 628.016 ns/op
Iteration  13: 626.668 ns/op
Iteration  14: 631.499 ns/op
Iteration  15: 627.367 ns/op
Iteration  16: 629.174 ns/op
Iteration  17: 627.876 ns/op
Iteration  18: 626.776 ns/op
Iteration  19: 631.059 ns/op
Iteration  20: 628.605 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1053.777 ns/op
# Warmup Iteration   2: 689.925 ns/op
# Warmup Iteration   3: 622.975 ns/op
# Warmup Iteration   4: 625.020 ns/op
# Warmup Iteration   5: 645.728 ns/op
Iteration   1: 618.141 ns/op
Iteration   2: 617.578 ns/op
Iteration   3: 618.413 ns/op
Iteration   4: 620.714 ns/op
Iteration   5: 617.889 ns/op
Iteration   6: 618.963 ns/op
Iteration   7: 622.601 ns/op
Iteration   8: 617.617 ns/op
Iteration   9: 616.134 ns/op
Iteration  10: 617.068 ns/op
Iteration  11: 618.616 ns/op
Iteration  12: 616.415 ns/op
Iteration  13: 616.122 ns/op
Iteration  14: 618.537 ns/op
Iteration  15: 616.353 ns/op
Iteration  16: 617.204 ns/op
Iteration  17: 616.919 ns/op
Iteration  18: 619.164 ns/op
Iteration  19: 618.442 ns/op
Iteration  20: 618.319 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1081.417 ns/op
# Warmup Iteration   2: 691.644 ns/op
# Warmup Iteration   3: 618.652 ns/op
# Warmup Iteration   4: 621.525 ns/op
# Warmup Iteration   5: 642.123 ns/op
Iteration   1: 614.161 ns/op
Iteration   2: 614.255 ns/op
Iteration   3: 614.622 ns/op
Iteration   4: 617.099 ns/op
Iteration   5: 614.144 ns/op
Iteration   6: 614.003 ns/op
Iteration   7: 620.049 ns/op
Iteration   8: 613.990 ns/op
Iteration   9: 613.011 ns/op
Iteration  10: 613.566 ns/op
Iteration  11: 614.978 ns/op
Iteration  12: 613.109 ns/op
Iteration  13: 613.780 ns/op
Iteration  14: 614.985 ns/op
Iteration  15: 613.661 ns/op
Iteration  16: 613.837 ns/op
Iteration  17: 613.515 ns/op
Iteration  18: 615.949 ns/op
Iteration  19: 613.321 ns/op
Iteration  20: 613.298 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  617.548 ±(99.9%) 2.255 ns/op [Average]
  (min, avg, max) = (606.666, 617.548, 632.965), stdev = 6.649
  CI (99.9%): [615.293, 619.803] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                         (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
			  
 
	
		
,		

 	
 
  	 	
 
	 

	
	

		 


		  avgt  100  607.637 ± 4.195  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
			  
 
	
		
,		

 	
 
  	 	
 
	 

	
	

		 


		  avgt  100  617.548 ± 2.255  ns/op

Benchmark result is saved to split_precompiled_regex_166_112_Match.csv
