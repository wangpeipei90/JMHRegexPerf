# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 	



	 		 	, 		
	
 

 	 
 	 	
		
	
 	 
  

 		

 	
		    	




				
	 	
 
 		 	    		  			
		 


)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1226.992 ns/op
# Warmup Iteration   2: 908.069 ns/op
# Warmup Iteration   3: 768.563 ns/op
# Warmup Iteration   4: 773.071 ns/op
# Warmup Iteration   5: 773.961 ns/op
Iteration   1: 777.197 ns/op
Iteration   2: 782.796 ns/op
Iteration   3: 765.029 ns/op
Iteration   4: 764.610 ns/op
Iteration   5: 764.878 ns/op
Iteration   6: 766.358 ns/op
Iteration   7: 767.622 ns/op
Iteration   8: 764.837 ns/op
Iteration   9: 767.888 ns/op
Iteration  10: 769.597 ns/op
Iteration  11: 762.872 ns/op
Iteration  12: 763.283 ns/op
Iteration  13: 762.931 ns/op
Iteration  14: 762.766 ns/op
Iteration  15: 761.942 ns/op
Iteration  16: 762.001 ns/op
Iteration  17: 761.885 ns/op
Iteration  18: 762.272 ns/op
Iteration  19: 762.817 ns/op
Iteration  20: 762.982 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1215.431 ns/op
# Warmup Iteration   2: 885.255 ns/op
# Warmup Iteration   3: 756.364 ns/op
# Warmup Iteration   4: 758.970 ns/op
# Warmup Iteration   5: 778.853 ns/op
Iteration   1: 771.082 ns/op
Iteration   2: 752.956 ns/op
Iteration   3: 752.752 ns/op
Iteration   4: 752.351 ns/op
Iteration   5: 752.348 ns/op
Iteration   6: 752.250 ns/op
Iteration   7: 752.153 ns/op
Iteration   8: 752.725 ns/op
Iteration   9: 753.082 ns/op
Iteration  10: 755.475 ns/op
Iteration  11: 750.371 ns/op
Iteration  12: 749.918 ns/op
Iteration  13: 750.381 ns/op
Iteration  14: 749.997 ns/op
Iteration  15: 750.278 ns/op
Iteration  16: 750.360 ns/op
Iteration  17: 750.903 ns/op
Iteration  18: 751.194 ns/op
Iteration  19: 750.457 ns/op
Iteration  20: 751.498 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1226.095 ns/op
# Warmup Iteration   2: 894.339 ns/op
# Warmup Iteration   3: 767.711 ns/op
# Warmup Iteration   4: 769.739 ns/op
# Warmup Iteration   5: 774.194 ns/op
Iteration   1: 779.512 ns/op
Iteration   2: 777.732 ns/op
Iteration   3: 764.384 ns/op
Iteration   4: 763.299 ns/op
Iteration   5: 763.970 ns/op
Iteration   6: 767.385 ns/op
Iteration   7: 763.475 ns/op
Iteration   8: 762.983 ns/op
Iteration   9: 763.541 ns/op
Iteration  10: 763.725 ns/op
Iteration  11: 761.878 ns/op
Iteration  12: 761.619 ns/op
Iteration  13: 761.153 ns/op
Iteration  14: 761.435 ns/op
Iteration  15: 761.836 ns/op
Iteration  16: 764.759 ns/op
Iteration  17: 762.183 ns/op
Iteration  18: 761.969 ns/op
Iteration  19: 762.163 ns/op
Iteration  20: 762.242 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1223.416 ns/op
# Warmup Iteration   2: 897.593 ns/op
# Warmup Iteration   3: 766.405 ns/op
# Warmup Iteration   4: 768.747 ns/op
# Warmup Iteration   5: 772.634 ns/op
Iteration   1: 777.354 ns/op
Iteration   2: 781.078 ns/op
Iteration   3: 763.897 ns/op
Iteration   4: 763.212 ns/op
Iteration   5: 762.624 ns/op
Iteration   6: 763.239 ns/op
Iteration   7: 763.481 ns/op
Iteration   8: 768.221 ns/op
Iteration   9: 764.578 ns/op
Iteration  10: 766.057 ns/op
Iteration  11: 761.536 ns/op
Iteration  12: 760.681 ns/op
Iteration  13: 760.108 ns/op
Iteration  14: 760.101 ns/op
Iteration  15: 760.045 ns/op
Iteration  16: 760.156 ns/op
Iteration  17: 760.899 ns/op
Iteration  18: 760.711 ns/op
Iteration  19: 761.401 ns/op
Iteration  20: 762.622 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1219.507 ns/op
# Warmup Iteration   2: 890.173 ns/op
# Warmup Iteration   3: 763.751 ns/op
# Warmup Iteration   4: 765.573 ns/op
# Warmup Iteration   5: 772.800 ns/op
Iteration   1: 776.469 ns/op
Iteration   2: 771.044 ns/op
Iteration   3: 759.954 ns/op
Iteration   4: 763.940 ns/op
Iteration   5: 760.199 ns/op
Iteration   6: 759.550 ns/op
Iteration   7: 759.545 ns/op
Iteration   8: 763.160 ns/op
Iteration   9: 760.562 ns/op
Iteration  10: 760.622 ns/op
Iteration  11: 759.097 ns/op
Iteration  12: 758.585 ns/op
Iteration  13: 757.706 ns/op
Iteration  14: 757.303 ns/op
Iteration  15: 757.212 ns/op
Iteration  16: 757.254 ns/op
Iteration  17: 762.867 ns/op
Iteration  18: 757.032 ns/op
Iteration  19: 758.085 ns/op
Iteration  20: 757.294 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  761.598 Â±(99.9%) 2.355 ns/op [Average]
  (min, avg, max) = (749.918, 761.598, 782.796), stdev = 6.943
  CI (99.9%): [759.244, 763.953] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =  
 	



	 		 	, 		
	
 

 	 
 	 	
		
	
 	 
  

 		

 	
		    	




				
	 	
 
 		 	    		  			
		 


)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1226.949 ns/op
# Warmup Iteration   2: 931.063 ns/op
# Warmup Iteration   3: 803.737 ns/op
# Warmup Iteration   4: 805.796 ns/op
# Warmup Iteration   5: 811.171 ns/op
Iteration   1: 814.210 ns/op
Iteration   2: 819.242 ns/op
Iteration   3: 801.646 ns/op
Iteration   4: 799.909 ns/op
Iteration   5: 800.898 ns/op
Iteration   6: 800.212 ns/op
Iteration   7: 800.028 ns/op
Iteration   8: 800.153 ns/op
Iteration   9: 798.847 ns/op
Iteration  10: 800.209 ns/op
Iteration  11: 802.982 ns/op
Iteration  12: 803.756 ns/op
Iteration  13: 798.597 ns/op
Iteration  14: 797.958 ns/op
Iteration  15: 798.575 ns/op
Iteration  16: 798.972 ns/op
Iteration  17: 798.874 ns/op
Iteration  18: 799.815 ns/op
Iteration  19: 798.519 ns/op
Iteration  20: 799.063 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1229.944 ns/op
# Warmup Iteration   2: 909.064 ns/op
# Warmup Iteration   3: 780.939 ns/op
# Warmup Iteration   4: 783.133 ns/op
# Warmup Iteration   5: 788.816 ns/op
Iteration   1: 794.437 ns/op
Iteration   2: 789.569 ns/op
Iteration   3: 777.665 ns/op
Iteration   4: 780.786 ns/op
Iteration   5: 776.636 ns/op
Iteration   6: 776.547 ns/op
Iteration   7: 776.409 ns/op
Iteration   8: 776.815 ns/op
Iteration   9: 777.318 ns/op
Iteration  10: 776.750 ns/op
Iteration  11: 774.488 ns/op
Iteration  12: 774.159 ns/op
Iteration  13: 775.071 ns/op
Iteration  14: 780.990 ns/op
Iteration  15: 776.356 ns/op
Iteration  16: 774.978 ns/op
Iteration  17: 777.039 ns/op
Iteration  18: 775.079 ns/op
Iteration  19: 774.940 ns/op
Iteration  20: 775.273 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1323.591 ns/op
# Warmup Iteration   2: 1048.263 ns/op
# Warmup Iteration   3: 881.050 ns/op
# Warmup Iteration   4: 882.180 ns/op
# Warmup Iteration   5: 886.360 ns/op
Iteration   1: 892.504 ns/op
Iteration   2: 897.887 ns/op
Iteration   3: 877.292 ns/op
Iteration   4: 876.634 ns/op
Iteration   5: 874.353 ns/op
Iteration   6: 877.694 ns/op
Iteration   7: 876.457 ns/op
Iteration   8: 876.806 ns/op
Iteration   9: 880.684 ns/op
Iteration  10: 880.594 ns/op
Iteration  11: 880.691 ns/op
Iteration  12: 877.780 ns/op
Iteration  13: 878.972 ns/op
Iteration  14: 875.129 ns/op
Iteration  15: 873.003 ns/op
Iteration  16: 876.024 ns/op
Iteration  17: 877.261 ns/op
Iteration  18: 876.530 ns/op
Iteration  19: 877.495 ns/op
Iteration  20: 876.150 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1318.455 ns/op
# Warmup Iteration   2: 1063.473 ns/op
# Warmup Iteration   3: 896.341 ns/op
# Warmup Iteration   4: 896.538 ns/op
# Warmup Iteration   5: 900.335 ns/op
Iteration   1: 905.127 ns/op
Iteration   2: 910.389 ns/op
Iteration   3: 888.937 ns/op
Iteration   4: 885.457 ns/op
Iteration   5: 889.813 ns/op
Iteration   6: 889.300 ns/op
Iteration   7: 889.312 ns/op
Iteration   8: 890.751 ns/op
Iteration   9: 890.581 ns/op
Iteration  10: 890.429 ns/op
Iteration  11: 898.477 ns/op
Iteration  12: 895.216 ns/op
Iteration  13: 885.109 ns/op
Iteration  14: 897.126 ns/op
Iteration  15: 895.161 ns/op
Iteration  16: 887.931 ns/op
Iteration  17: 888.231 ns/op
Iteration  18: 888.536 ns/op
Iteration  19: 895.017 ns/op
Iteration  20: 891.528 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1309.332 ns/op
# Warmup Iteration   2: 1059.253 ns/op
# Warmup Iteration   3: 889.977 ns/op
# Warmup Iteration   4: 892.644 ns/op
# Warmup Iteration   5: 896.540 ns/op
Iteration   1: 901.143 ns/op
Iteration   2: 911.127 ns/op
Iteration   3: 885.159 ns/op
Iteration   4: 881.414 ns/op
Iteration   5: 885.870 ns/op
Iteration   6: 891.959 ns/op
Iteration   7: 887.823 ns/op
Iteration   8: 885.330 ns/op
Iteration   9: 884.865 ns/op
Iteration  10: 886.843 ns/op
Iteration  11: 889.891 ns/op
Iteration  12: 887.432 ns/op
Iteration  13: 888.421 ns/op
Iteration  14: 880.903 ns/op
Iteration  15: 882.629 ns/op
Iteration  16: 892.067 ns/op
Iteration  17: 884.612 ns/op
Iteration  18: 883.521 ns/op
Iteration  19: 885.294 ns/op
Iteration  20: 890.698 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  847.931 Â±(99.9%) 16.555 ns/op [Average]
  (min, avg, max) = (774.159, 847.931, 911.127), stdev = 48.812
  CI (99.9%): [831.377, 864.486] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                           (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*   
 	



	 		 	, 		
	
 

 	 
 	 	
		
	
 	 
  

 		

 	
		    	




				
	 	
 
 		 	    		  			
		 


  avgt  100  761.598 Â±  2.355  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*   
 	



	 		 	, 		
	
 

 	 
 	 	
		
	
 	 
  

 		

 	
		    	




				
	 	
 
 		 	    		  			
		 


  avgt  100  847.931 Â± 16.555  ns/op

Benchmark result is saved to split_precompiled_regex_193_210_Match.csv
