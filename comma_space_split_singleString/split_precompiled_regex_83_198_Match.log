# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 

			
 	 	

	 ,	 

		

	
   			
		 		
			 		 

	 	
  
  			
 
		 	


			
  
   
	 
	 		
  	  

 

			 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1166.318 ns/op
# Warmup Iteration   2: 855.790 ns/op
# Warmup Iteration   3: 743.647 ns/op
# Warmup Iteration   4: 752.820 ns/op
# Warmup Iteration   5: 746.671 ns/op
Iteration   1: 751.505 ns/op
Iteration   2: 735.824 ns/op
Iteration   3: 734.347 ns/op
Iteration   4: 734.830 ns/op
Iteration   5: 734.681 ns/op
Iteration   6: 735.359 ns/op
Iteration   7: 734.020 ns/op
Iteration   8: 734.264 ns/op
Iteration   9: 734.494 ns/op
Iteration  10: 734.842 ns/op
Iteration  11: 733.481 ns/op
Iteration  12: 731.418 ns/op
Iteration  13: 732.044 ns/op
Iteration  14: 731.857 ns/op
Iteration  15: 732.152 ns/op
Iteration  16: 732.119 ns/op
Iteration  17: 731.407 ns/op
Iteration  18: 734.002 ns/op
Iteration  19: 732.510 ns/op
Iteration  20: 732.408 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1163.377 ns/op
# Warmup Iteration   2: 848.144 ns/op
# Warmup Iteration   3: 731.959 ns/op
# Warmup Iteration   4: 747.641 ns/op
# Warmup Iteration   5: 741.365 ns/op
Iteration   1: 746.110 ns/op
Iteration   2: 728.784 ns/op
Iteration   3: 728.277 ns/op
Iteration   4: 728.319 ns/op
Iteration   5: 728.243 ns/op
Iteration   6: 728.629 ns/op
Iteration   7: 727.696 ns/op
Iteration   8: 727.805 ns/op
Iteration   9: 728.048 ns/op
Iteration  10: 727.680 ns/op
Iteration  11: 725.363 ns/op
Iteration  12: 725.172 ns/op
Iteration  13: 724.740 ns/op
Iteration  14: 726.184 ns/op
Iteration  15: 724.798 ns/op
Iteration  16: 727.497 ns/op
Iteration  17: 727.245 ns/op
Iteration  18: 724.855 ns/op
Iteration  19: 724.928 ns/op
Iteration  20: 725.851 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1152.769 ns/op
# Warmup Iteration   2: 845.420 ns/op
# Warmup Iteration   3: 734.985 ns/op
# Warmup Iteration   4: 751.116 ns/op
# Warmup Iteration   5: 745.064 ns/op
Iteration   1: 749.465 ns/op
Iteration   2: 734.691 ns/op
Iteration   3: 732.021 ns/op
Iteration   4: 731.542 ns/op
Iteration   5: 732.834 ns/op
Iteration   6: 734.166 ns/op
Iteration   7: 731.762 ns/op
Iteration   8: 732.783 ns/op
Iteration   9: 731.773 ns/op
Iteration  10: 732.741 ns/op
Iteration  11: 732.161 ns/op
Iteration  12: 731.099 ns/op
Iteration  13: 730.752 ns/op
Iteration  14: 730.860 ns/op
Iteration  15: 730.639 ns/op
Iteration  16: 731.579 ns/op
Iteration  17: 730.693 ns/op
Iteration  18: 731.250 ns/op
Iteration  19: 730.773 ns/op
Iteration  20: 731.385 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1208.109 ns/op
# Warmup Iteration   2: 858.600 ns/op
# Warmup Iteration   3: 737.448 ns/op
# Warmup Iteration   4: 752.275 ns/op
# Warmup Iteration   5: 746.576 ns/op
Iteration   1: 751.016 ns/op
Iteration   2: 734.288 ns/op
Iteration   3: 733.875 ns/op
Iteration   4: 733.997 ns/op
Iteration   5: 733.628 ns/op
Iteration   6: 735.091 ns/op
Iteration   7: 736.356 ns/op
Iteration   8: 735.051 ns/op
Iteration   9: 734.872 ns/op
Iteration  10: 738.241 ns/op
Iteration  11: 732.676 ns/op
Iteration  12: 732.447 ns/op
Iteration  13: 734.038 ns/op
Iteration  14: 732.899 ns/op
Iteration  15: 732.469 ns/op
Iteration  16: 732.812 ns/op
Iteration  17: 733.093 ns/op
Iteration  18: 735.518 ns/op
Iteration  19: 733.704 ns/op
Iteration  20: 733.353 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1258.293 ns/op
# Warmup Iteration   2: 930.446 ns/op
# Warmup Iteration   3: 789.660 ns/op
# Warmup Iteration   4: 792.563 ns/op
# Warmup Iteration   5: 797.769 ns/op
Iteration   1: 801.984 ns/op
Iteration   2: 804.113 ns/op
Iteration   3: 786.606 ns/op
Iteration   4: 786.365 ns/op
Iteration   5: 786.162 ns/op
Iteration   6: 785.979 ns/op
Iteration   7: 786.041 ns/op
Iteration   8: 786.708 ns/op
Iteration   9: 787.556 ns/op
Iteration  10: 799.821 ns/op
Iteration  11: 805.083 ns/op
Iteration  12: 784.564 ns/op
Iteration  13: 785.204 ns/op
Iteration  14: 784.620 ns/op
Iteration  15: 791.624 ns/op
Iteration  16: 784.561 ns/op
Iteration  17: 785.697 ns/op
Iteration  18: 786.717 ns/op
Iteration  19: 786.662 ns/op
Iteration  20: 786.554 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  743.908 Â±(99.9%) 8.007 ns/op [Average]
  (min, avg, max) = (724.740, 743.908, 805.083), stdev = 23.609
  CI (99.9%): [735.901, 751.915] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 

			
 	 	

	 ,	 

		

	
   			
		 		
			 		 

	 	
  
  			
 
		 	


			
  
   
	 
	 		
  	  

 

			 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1293.938 ns/op
# Warmup Iteration   2: 1019.254 ns/op
# Warmup Iteration   3: 848.505 ns/op
# Warmup Iteration   4: 850.251 ns/op
# Warmup Iteration   5: 853.246 ns/op
Iteration   1: 858.070 ns/op
Iteration   2: 863.326 ns/op
Iteration   3: 844.214 ns/op
Iteration   4: 844.354 ns/op
Iteration   5: 844.243 ns/op
Iteration   6: 844.288 ns/op
Iteration   7: 844.228 ns/op
Iteration   8: 847.095 ns/op
Iteration   9: 845.285 ns/op
Iteration  10: 839.910 ns/op
Iteration  11: 853.862 ns/op
Iteration  12: 845.876 ns/op
Iteration  13: 850.524 ns/op
Iteration  14: 842.524 ns/op
Iteration  15: 842.271 ns/op
Iteration  16: 843.137 ns/op
Iteration  17: 842.938 ns/op
Iteration  18: 843.396 ns/op
Iteration  19: 843.638 ns/op
Iteration  20: 844.875 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1212.485 ns/op
# Warmup Iteration   2: 888.758 ns/op
# Warmup Iteration   3: 765.781 ns/op
# Warmup Iteration   4: 771.479 ns/op
# Warmup Iteration   5: 785.322 ns/op
Iteration   1: 779.545 ns/op
Iteration   2: 762.631 ns/op
Iteration   3: 762.236 ns/op
Iteration   4: 761.758 ns/op
Iteration   5: 761.884 ns/op
Iteration   6: 762.371 ns/op
Iteration   7: 761.358 ns/op
Iteration   8: 761.553 ns/op
Iteration   9: 761.561 ns/op
Iteration  10: 765.578 ns/op
Iteration  11: 759.310 ns/op
Iteration  12: 759.433 ns/op
Iteration  13: 758.964 ns/op
Iteration  14: 759.036 ns/op
Iteration  15: 758.929 ns/op
Iteration  16: 759.459 ns/op
Iteration  17: 759.190 ns/op
Iteration  18: 759.290 ns/op
Iteration  19: 759.042 ns/op
Iteration  20: 758.631 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1227.777 ns/op
# Warmup Iteration   2: 890.992 ns/op
# Warmup Iteration   3: 757.930 ns/op
# Warmup Iteration   4: 764.020 ns/op
# Warmup Iteration   5: 776.412 ns/op
Iteration   1: 770.837 ns/op
Iteration   2: 754.742 ns/op
Iteration   3: 754.305 ns/op
Iteration   4: 754.443 ns/op
Iteration   5: 753.767 ns/op
Iteration   6: 753.471 ns/op
Iteration   7: 754.036 ns/op
Iteration   8: 754.890 ns/op
Iteration   9: 754.498 ns/op
Iteration  10: 756.102 ns/op
Iteration  11: 752.270 ns/op
Iteration  12: 751.331 ns/op
Iteration  13: 751.529 ns/op
Iteration  14: 751.306 ns/op
Iteration  15: 751.290 ns/op
Iteration  16: 751.612 ns/op
Iteration  17: 752.401 ns/op
Iteration  18: 752.206 ns/op
Iteration  19: 751.907 ns/op
Iteration  20: 754.399 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1180.550 ns/op
# Warmup Iteration   2: 877.413 ns/op
# Warmup Iteration   3: 764.325 ns/op
# Warmup Iteration   4: 780.177 ns/op
# Warmup Iteration   5: 772.497 ns/op
Iteration   1: 777.586 ns/op
Iteration   2: 759.956 ns/op
Iteration   3: 760.306 ns/op
Iteration   4: 760.987 ns/op
Iteration   5: 760.549 ns/op
Iteration   6: 760.317 ns/op
Iteration   7: 760.747 ns/op
Iteration   8: 760.311 ns/op
Iteration   9: 760.472 ns/op
Iteration  10: 761.017 ns/op
Iteration  11: 761.853 ns/op
Iteration  12: 758.611 ns/op
Iteration  13: 759.096 ns/op
Iteration  14: 758.875 ns/op
Iteration  15: 758.965 ns/op
Iteration  16: 764.997 ns/op
Iteration  17: 759.719 ns/op
Iteration  18: 758.649 ns/op
Iteration  19: 758.630 ns/op
Iteration  20: 765.558 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1216.784 ns/op
# Warmup Iteration   2: 879.953 ns/op
# Warmup Iteration   3: 758.500 ns/op
# Warmup Iteration   4: 770.262 ns/op
# Warmup Iteration   5: 775.638 ns/op
Iteration   1: 774.562 ns/op
Iteration   2: 756.971 ns/op
Iteration   3: 755.930 ns/op
Iteration   4: 757.145 ns/op
Iteration   5: 755.858 ns/op
Iteration   6: 755.945 ns/op
Iteration   7: 757.988 ns/op
Iteration   8: 758.158 ns/op
Iteration   9: 756.301 ns/op
Iteration  10: 757.299 ns/op
Iteration  11: 753.292 ns/op
Iteration  12: 754.680 ns/op
Iteration  13: 752.981 ns/op
Iteration  14: 753.506 ns/op
Iteration  15: 753.350 ns/op
Iteration  16: 753.557 ns/op
Iteration  17: 753.381 ns/op
Iteration  18: 755.346 ns/op
Iteration  19: 753.434 ns/op
Iteration  20: 756.123 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  775.942 Â±(99.9%) 12.151 ns/op [Average]
  (min, avg, max) = (751.290, 775.942, 863.326), stdev = 35.829
  CI (99.9%): [763.790, 788.093] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                               (trimmed)  Mode  Cnt    Score    Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  

			
 	 	

	 ,	 

		

	
   			
		 		
			 		 

	 	
  
  			
 
		 	


			
  
   
	 
	 		
  	  

 

			 	  avgt  100  743.908 Â±  8.007  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  

			
 	 	

	 ,	 

		

	
   			
		 		
			 		 

	 	
  
  			
 
		 	


			
  
   
	 
	 		
  	  

 

			 	  avgt  100  775.942 Â± 12.151  ns/op

Benchmark result is saved to split_precompiled_regex_83_198_Match.csv
