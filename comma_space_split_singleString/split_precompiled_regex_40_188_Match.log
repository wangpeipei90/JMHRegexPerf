# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   			

	,		  	 	  

    

  	 				
				  
   	
  	

	 
 
 	
 
  



 
			 
	



 

	 

		 		
  			

 )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1240.449 ns/op
# Warmup Iteration   2: 899.601 ns/op
# Warmup Iteration   3: 769.096 ns/op
# Warmup Iteration   4: 772.442 ns/op
# Warmup Iteration   5: 775.420 ns/op
Iteration   1: 779.742 ns/op
Iteration   2: 783.973 ns/op
Iteration   3: 767.359 ns/op
Iteration   4: 766.271 ns/op
Iteration   5: 765.976 ns/op
Iteration   6: 765.767 ns/op
Iteration   7: 766.323 ns/op
Iteration   8: 766.173 ns/op
Iteration   9: 770.330 ns/op
Iteration  10: 767.192 ns/op
Iteration  11: 763.658 ns/op
Iteration  12: 763.695 ns/op
Iteration  13: 766.530 ns/op
Iteration  14: 766.586 ns/op
Iteration  15: 763.442 ns/op
Iteration  16: 763.674 ns/op
Iteration  17: 763.161 ns/op
Iteration  18: 763.556 ns/op
Iteration  19: 764.140 ns/op
Iteration  20: 764.581 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1226.918 ns/op
# Warmup Iteration   2: 950.159 ns/op
# Warmup Iteration   3: 809.268 ns/op
# Warmup Iteration   4: 812.132 ns/op
# Warmup Iteration   5: 814.837 ns/op
Iteration   1: 818.445 ns/op
Iteration   2: 829.792 ns/op
Iteration   3: 807.356 ns/op
Iteration   4: 804.971 ns/op
Iteration   5: 805.296 ns/op
Iteration   6: 804.900 ns/op
Iteration   7: 804.050 ns/op
Iteration   8: 804.017 ns/op
Iteration   9: 803.963 ns/op
Iteration  10: 805.112 ns/op
Iteration  11: 808.670 ns/op
Iteration  12: 807.750 ns/op
Iteration  13: 803.950 ns/op
Iteration  14: 802.410 ns/op
Iteration  15: 802.085 ns/op
Iteration  16: 804.434 ns/op
Iteration  17: 804.446 ns/op
Iteration  18: 804.440 ns/op
Iteration  19: 800.050 ns/op
Iteration  20: 802.337 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1256.492 ns/op
# Warmup Iteration   2: 914.060 ns/op
# Warmup Iteration   3: 766.370 ns/op
# Warmup Iteration   4: 767.679 ns/op
# Warmup Iteration   5: 775.678 ns/op
Iteration   1: 779.304 ns/op
Iteration   2: 778.156 ns/op
Iteration   3: 762.065 ns/op
Iteration   4: 761.969 ns/op
Iteration   5: 762.172 ns/op
Iteration   6: 762.212 ns/op
Iteration   7: 761.807 ns/op
Iteration   8: 762.240 ns/op
Iteration   9: 762.210 ns/op
Iteration  10: 762.365 ns/op
Iteration  11: 763.437 ns/op
Iteration  12: 760.316 ns/op
Iteration  13: 764.247 ns/op
Iteration  14: 758.603 ns/op
Iteration  15: 758.938 ns/op
Iteration  16: 760.235 ns/op
Iteration  17: 758.907 ns/op
Iteration  18: 759.595 ns/op
Iteration  19: 759.167 ns/op
Iteration  20: 759.605 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1271.475 ns/op
# Warmup Iteration   2: 957.777 ns/op
# Warmup Iteration   3: 811.000 ns/op
# Warmup Iteration   4: 812.987 ns/op
# Warmup Iteration   5: 816.099 ns/op
Iteration   1: 821.549 ns/op
Iteration   2: 826.008 ns/op
Iteration   3: 808.153 ns/op
Iteration   4: 807.498 ns/op
Iteration   5: 807.313 ns/op
Iteration   6: 807.557 ns/op
Iteration   7: 807.247 ns/op
Iteration   8: 806.248 ns/op
Iteration   9: 806.351 ns/op
Iteration  10: 808.294 ns/op
Iteration  11: 808.266 ns/op
Iteration  12: 806.093 ns/op
Iteration  13: 807.596 ns/op
Iteration  14: 805.486 ns/op
Iteration  15: 805.565 ns/op
Iteration  16: 803.827 ns/op
Iteration  17: 805.928 ns/op
Iteration  18: 824.804 ns/op
Iteration  19: 806.188 ns/op
Iteration  20: 805.959 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1276.989 ns/op
# Warmup Iteration   2: 968.647 ns/op
# Warmup Iteration   3: 811.227 ns/op
# Warmup Iteration   4: 814.364 ns/op
# Warmup Iteration   5: 817.907 ns/op
Iteration   1: 822.343 ns/op
Iteration   2: 827.488 ns/op
Iteration   3: 808.086 ns/op
Iteration   4: 808.068 ns/op
Iteration   5: 808.212 ns/op
Iteration   6: 808.206 ns/op
Iteration   7: 808.365 ns/op
Iteration   8: 808.985 ns/op
Iteration   9: 809.355 ns/op
Iteration  10: 811.436 ns/op
Iteration  11: 814.063 ns/op
Iteration  12: 806.199 ns/op
Iteration  13: 806.046 ns/op
Iteration  14: 807.522 ns/op
Iteration  15: 806.355 ns/op
Iteration  16: 804.215 ns/op
Iteration  17: 806.286 ns/op
Iteration  18: 806.359 ns/op
Iteration  19: 806.619 ns/op
Iteration  20: 806.840 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  791.051 Â±(99.9%) 7.545 ns/op [Average]
  (min, avg, max) = (758.603, 791.051, 829.792), stdev = 22.247
  CI (99.9%): [783.506, 798.596] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   			

	,		  	 	  

    

  	 				
				  
   	
  	

	 
 
 	
 
  



 
			 
	



 

	 

		 		
  			

 )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1264.512 ns/op
# Warmup Iteration   2: 995.804 ns/op
# Warmup Iteration   3: 842.395 ns/op
# Warmup Iteration   4: 843.095 ns/op
# Warmup Iteration   5: 846.255 ns/op
Iteration   1: 853.603 ns/op
Iteration   2: 855.705 ns/op
Iteration   3: 836.043 ns/op
Iteration   4: 835.765 ns/op
Iteration   5: 835.687 ns/op
Iteration   6: 836.248 ns/op
Iteration   7: 836.199 ns/op
Iteration   8: 836.247 ns/op
Iteration   9: 836.624 ns/op
Iteration  10: 835.442 ns/op
Iteration  11: 836.602 ns/op
Iteration  12: 833.188 ns/op
Iteration  13: 834.611 ns/op
Iteration  14: 835.299 ns/op
Iteration  15: 834.573 ns/op
Iteration  16: 835.214 ns/op
Iteration  17: 835.699 ns/op
Iteration  18: 835.900 ns/op
Iteration  19: 835.544 ns/op
Iteration  20: 835.257 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1274.402 ns/op
# Warmup Iteration   2: 987.381 ns/op
# Warmup Iteration   3: 836.008 ns/op
# Warmup Iteration   4: 838.576 ns/op
# Warmup Iteration   5: 842.519 ns/op
Iteration   1: 846.670 ns/op
Iteration   2: 851.848 ns/op
Iteration   3: 832.441 ns/op
Iteration   4: 831.647 ns/op
Iteration   5: 831.633 ns/op
Iteration   6: 832.416 ns/op
Iteration   7: 832.335 ns/op
Iteration   8: 832.452 ns/op
Iteration   9: 832.649 ns/op
Iteration  10: 832.679 ns/op
Iteration  11: 850.081 ns/op
Iteration  12: 832.255 ns/op
Iteration  13: 828.596 ns/op
Iteration  14: 830.549 ns/op
Iteration  15: 831.735 ns/op
Iteration  16: 832.957 ns/op
Iteration  17: 831.987 ns/op
Iteration  18: 833.076 ns/op
Iteration  19: 830.378 ns/op
Iteration  20: 835.619 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1274.996 ns/op
# Warmup Iteration   2: 980.695 ns/op
# Warmup Iteration   3: 831.505 ns/op
# Warmup Iteration   4: 834.677 ns/op
# Warmup Iteration   5: 837.799 ns/op
Iteration   1: 842.370 ns/op
Iteration   2: 846.490 ns/op
Iteration   3: 827.715 ns/op
Iteration   4: 828.661 ns/op
Iteration   5: 831.703 ns/op
Iteration   6: 828.305 ns/op
Iteration   7: 828.412 ns/op
Iteration   8: 828.730 ns/op
Iteration   9: 828.427 ns/op
Iteration  10: 831.646 ns/op
Iteration  11: 833.215 ns/op
Iteration  12: 833.724 ns/op
Iteration  13: 824.946 ns/op
Iteration  14: 834.991 ns/op
Iteration  15: 823.314 ns/op
Iteration  16: 826.426 ns/op
Iteration  17: 835.072 ns/op
Iteration  18: 826.221 ns/op
Iteration  19: 828.266 ns/op
Iteration  20: 827.291 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1267.916 ns/op
# Warmup Iteration   2: 980.694 ns/op
# Warmup Iteration   3: 826.626 ns/op
# Warmup Iteration   4: 828.614 ns/op
# Warmup Iteration   5: 831.540 ns/op
Iteration   1: 839.190 ns/op
Iteration   2: 839.064 ns/op
Iteration   3: 820.566 ns/op
Iteration   4: 821.283 ns/op
Iteration   5: 826.680 ns/op
Iteration   6: 821.669 ns/op
Iteration   7: 823.368 ns/op
Iteration   8: 822.351 ns/op
Iteration   9: 824.816 ns/op
Iteration  10: 822.337 ns/op
Iteration  11: 823.441 ns/op
Iteration  12: 826.994 ns/op
Iteration  13: 822.572 ns/op
Iteration  14: 820.475 ns/op
Iteration  15: 820.435 ns/op
Iteration  16: 821.150 ns/op
Iteration  17: 821.970 ns/op
Iteration  18: 822.009 ns/op
Iteration  19: 817.732 ns/op
Iteration  20: 822.283 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1281.832 ns/op
# Warmup Iteration   2: 991.410 ns/op
# Warmup Iteration   3: 838.360 ns/op
# Warmup Iteration   4: 844.910 ns/op
# Warmup Iteration   5: 844.291 ns/op
Iteration   1: 848.921 ns/op
Iteration   2: 853.559 ns/op
Iteration   3: 834.619 ns/op
Iteration   4: 837.948 ns/op
Iteration   5: 834.680 ns/op
Iteration   6: 834.634 ns/op
Iteration   7: 834.232 ns/op
Iteration   8: 835.846 ns/op
Iteration   9: 834.121 ns/op
Iteration  10: 834.144 ns/op
Iteration  11: 837.134 ns/op
Iteration  12: 831.929 ns/op
Iteration  13: 829.844 ns/op
Iteration  14: 830.754 ns/op
Iteration  15: 831.156 ns/op
Iteration  16: 831.444 ns/op
Iteration  17: 831.999 ns/op
Iteration  18: 833.127 ns/op
Iteration  19: 831.753 ns/op
Iteration  20: 832.366 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  832.440 Â±(99.9%) 2.551 ns/op [Average]
  (min, avg, max) = (817.732, 832.440, 855.705), stdev = 7.522
  CI (99.9%): [829.889, 834.991] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                     (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    			

	,		  	 	  

    

  	 				
				  
   	
  	

	 
 
 	
 
  



 
			 
	



 

	 

		 		
  			

   avgt  100  791.051 Â± 7.545  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    			

	,		  	 	  

    

  	 				
				  
   	
  	

	 
 
 	
 
  



 
			 
	



 

	 

		 		
  			

   avgt  100  832.440 Â± 2.551  ns/op

Benchmark result is saved to split_precompiled_regex_40_188_Match.csv
