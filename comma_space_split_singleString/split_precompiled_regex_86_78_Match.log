# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	 		
  

	
    	
	 

	
 		
	 ,	
 		

  )

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 955.826 ns/op
# Warmup Iteration   2: 588.662 ns/op
# Warmup Iteration   3: 547.027 ns/op
# Warmup Iteration   4: 559.287 ns/op
# Warmup Iteration   5: 552.973 ns/op
Iteration   1: 542.918 ns/op
Iteration   2: 540.358 ns/op
Iteration   3: 542.732 ns/op
Iteration   4: 540.098 ns/op
Iteration   5: 540.745 ns/op
Iteration   6: 543.263 ns/op
Iteration   7: 538.849 ns/op
Iteration   8: 539.723 ns/op
Iteration   9: 542.685 ns/op
Iteration  10: 541.318 ns/op
Iteration  11: 539.021 ns/op
Iteration  12: 540.442 ns/op
Iteration  13: 541.583 ns/op
Iteration  14: 540.023 ns/op
Iteration  15: 542.170 ns/op
Iteration  16: 540.009 ns/op
Iteration  17: 543.584 ns/op
Iteration  18: 539.949 ns/op
Iteration  19: 539.924 ns/op
Iteration  20: 541.747 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 966.818 ns/op
# Warmup Iteration   2: 589.629 ns/op
# Warmup Iteration   3: 542.988 ns/op
# Warmup Iteration   4: 561.535 ns/op
# Warmup Iteration   5: 554.264 ns/op
Iteration   1: 543.580 ns/op
Iteration   2: 539.651 ns/op
Iteration   3: 541.392 ns/op
Iteration   4: 538.836 ns/op
Iteration   5: 538.997 ns/op
Iteration   6: 541.082 ns/op
Iteration   7: 538.392 ns/op
Iteration   8: 537.954 ns/op
Iteration   9: 537.036 ns/op
Iteration  10: 541.806 ns/op
Iteration  11: 538.881 ns/op
Iteration  12: 537.182 ns/op
Iteration  13: 537.828 ns/op
Iteration  14: 537.094 ns/op
Iteration  15: 538.172 ns/op
Iteration  16: 537.213 ns/op
Iteration  17: 540.655 ns/op
Iteration  18: 538.322 ns/op
Iteration  19: 538.386 ns/op
Iteration  20: 539.981 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 944.372 ns/op
# Warmup Iteration   2: 570.896 ns/op
# Warmup Iteration   3: 537.402 ns/op
# Warmup Iteration   4: 542.723 ns/op
# Warmup Iteration   5: 541.288 ns/op
Iteration   1: 531.546 ns/op
Iteration   2: 529.012 ns/op
Iteration   3: 531.689 ns/op
Iteration   4: 529.126 ns/op
Iteration   5: 531.287 ns/op
Iteration   6: 529.535 ns/op
Iteration   7: 534.122 ns/op
Iteration   8: 528.494 ns/op
Iteration   9: 528.851 ns/op
Iteration  10: 527.189 ns/op
Iteration  11: 527.993 ns/op
Iteration  12: 529.669 ns/op
Iteration  13: 528.400 ns/op
Iteration  14: 530.530 ns/op
Iteration  15: 531.054 ns/op
Iteration  16: 532.048 ns/op
Iteration  17: 528.979 ns/op
Iteration  18: 529.551 ns/op
Iteration  19: 528.007 ns/op
Iteration  20: 530.721 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 945.817 ns/op
# Warmup Iteration   2: 578.586 ns/op
# Warmup Iteration   3: 533.037 ns/op
# Warmup Iteration   4: 539.806 ns/op
# Warmup Iteration   5: 538.956 ns/op
Iteration   1: 528.361 ns/op
Iteration   2: 525.417 ns/op
Iteration   3: 527.540 ns/op
Iteration   4: 525.216 ns/op
Iteration   5: 527.909 ns/op
Iteration   6: 526.360 ns/op
Iteration   7: 529.080 ns/op
Iteration   8: 523.391 ns/op
Iteration   9: 524.886 ns/op
Iteration  10: 523.699 ns/op
Iteration  11: 525.509 ns/op
Iteration  12: 524.439 ns/op
Iteration  13: 525.204 ns/op
Iteration  14: 523.763 ns/op
Iteration  15: 524.475 ns/op
Iteration  16: 527.276 ns/op
Iteration  17: 524.804 ns/op
Iteration  18: 527.511 ns/op
Iteration  19: 523.766 ns/op
Iteration  20: 527.392 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 956.798 ns/op
# Warmup Iteration   2: 585.904 ns/op
# Warmup Iteration   3: 543.634 ns/op
# Warmup Iteration   4: 557.060 ns/op
# Warmup Iteration   5: 551.564 ns/op
Iteration   1: 541.368 ns/op
Iteration   2: 538.215 ns/op
Iteration   3: 541.264 ns/op
Iteration   4: 538.125 ns/op
Iteration   5: 538.350 ns/op
Iteration   6: 540.953 ns/op
Iteration   7: 536.656 ns/op
Iteration   8: 537.607 ns/op
Iteration   9: 536.763 ns/op
Iteration  10: 537.695 ns/op
Iteration  11: 536.917 ns/op
Iteration  12: 538.076 ns/op
Iteration  13: 536.849 ns/op
Iteration  14: 537.935 ns/op
Iteration  15: 540.756 ns/op
Iteration  16: 537.876 ns/op
Iteration  17: 540.767 ns/op
Iteration  18: 537.795 ns/op
Iteration  19: 538.806 ns/op
Iteration  20: 537.130 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  534.873 ±(99.9%) 2.099 ns/op [Average]
  (min, avg, max) = (523.391, 534.873, 543.584), stdev = 6.190
  CI (99.9%): [532.773, 536.972] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	 		
  

	
    	
	 

	
 		
	 ,	
 		

  )

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 992.316 ns/op
# Warmup Iteration   2: 596.018 ns/op
# Warmup Iteration   3: 550.194 ns/op
# Warmup Iteration   4: 563.730 ns/op
# Warmup Iteration   5: 560.314 ns/op
Iteration   1: 548.513 ns/op
Iteration   2: 545.244 ns/op
Iteration   3: 548.119 ns/op
Iteration   4: 544.839 ns/op
Iteration   5: 548.157 ns/op
Iteration   6: 545.959 ns/op
Iteration   7: 544.330 ns/op
Iteration   8: 544.967 ns/op
Iteration   9: 544.130 ns/op
Iteration  10: 545.855 ns/op
Iteration  11: 544.469 ns/op
Iteration  12: 545.899 ns/op
Iteration  13: 544.542 ns/op
Iteration  14: 545.916 ns/op
Iteration  15: 544.350 ns/op
Iteration  16: 545.132 ns/op
Iteration  17: 544.719 ns/op
Iteration  18: 544.711 ns/op
Iteration  19: 546.885 ns/op
Iteration  20: 545.527 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1014.398 ns/op
# Warmup Iteration   2: 600.566 ns/op
# Warmup Iteration   3: 550.538 ns/op
# Warmup Iteration   4: 564.556 ns/op
# Warmup Iteration   5: 558.933 ns/op
Iteration   1: 548.000 ns/op
Iteration   2: 546.037 ns/op
Iteration   3: 548.399 ns/op
Iteration   4: 545.847 ns/op
Iteration   5: 548.272 ns/op
Iteration   6: 545.811 ns/op
Iteration   7: 544.323 ns/op
Iteration   8: 545.375 ns/op
Iteration   9: 544.578 ns/op
Iteration  10: 545.560 ns/op
Iteration  11: 543.861 ns/op
Iteration  12: 544.328 ns/op
Iteration  13: 543.728 ns/op
Iteration  14: 545.042 ns/op
Iteration  15: 544.089 ns/op
Iteration  16: 544.755 ns/op
Iteration  17: 544.550 ns/op
Iteration  18: 544.563 ns/op
Iteration  19: 545.888 ns/op
Iteration  20: 544.351 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 987.738 ns/op
# Warmup Iteration   2: 595.620 ns/op
# Warmup Iteration   3: 546.251 ns/op
# Warmup Iteration   4: 560.012 ns/op
# Warmup Iteration   5: 554.050 ns/op
Iteration   1: 543.494 ns/op
Iteration   2: 541.103 ns/op
Iteration   3: 544.609 ns/op
Iteration   4: 542.122 ns/op
Iteration   5: 544.241 ns/op
Iteration   6: 541.683 ns/op
Iteration   7: 541.453 ns/op
Iteration   8: 539.723 ns/op
Iteration   9: 539.371 ns/op
Iteration  10: 542.146 ns/op
Iteration  11: 542.732 ns/op
Iteration  12: 541.099 ns/op
Iteration  13: 540.730 ns/op
Iteration  14: 543.348 ns/op
Iteration  15: 540.787 ns/op
Iteration  16: 542.283 ns/op
Iteration  17: 541.923 ns/op
Iteration  18: 544.097 ns/op
Iteration  19: 540.696 ns/op
Iteration  20: 544.335 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 999.291 ns/op
# Warmup Iteration   2: 586.853 ns/op
# Warmup Iteration   3: 548.629 ns/op
# Warmup Iteration   4: 552.003 ns/op
# Warmup Iteration   5: 551.320 ns/op
Iteration   1: 543.437 ns/op
Iteration   2: 538.969 ns/op
Iteration   3: 541.459 ns/op
Iteration   4: 538.555 ns/op
Iteration   5: 541.037 ns/op
Iteration   6: 539.058 ns/op
Iteration   7: 541.010 ns/op
Iteration   8: 537.989 ns/op
Iteration   9: 538.866 ns/op
Iteration  10: 537.946 ns/op
Iteration  11: 538.973 ns/op
Iteration  12: 538.289 ns/op
Iteration  13: 538.952 ns/op
Iteration  14: 537.930 ns/op
Iteration  15: 537.976 ns/op
Iteration  16: 539.444 ns/op
Iteration  17: 539.232 ns/op
Iteration  18: 542.430 ns/op
Iteration  19: 538.819 ns/op
Iteration  20: 543.422 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1001.585 ns/op
# Warmup Iteration   2: 593.869 ns/op
# Warmup Iteration   3: 546.167 ns/op
# Warmup Iteration   4: 560.895 ns/op
# Warmup Iteration   5: 554.528 ns/op
Iteration   1: 544.539 ns/op
Iteration   2: 541.227 ns/op
Iteration   3: 544.392 ns/op
Iteration   4: 541.792 ns/op
Iteration   5: 544.185 ns/op
Iteration   6: 542.779 ns/op
Iteration   7: 547.164 ns/op
Iteration   8: 543.801 ns/op
Iteration   9: 540.533 ns/op
Iteration  10: 541.810 ns/op
Iteration  11: 540.342 ns/op
Iteration  12: 541.277 ns/op
Iteration  13: 544.960 ns/op
Iteration  14: 542.842 ns/op
Iteration  15: 540.081 ns/op
Iteration  16: 541.920 ns/op
Iteration  17: 540.564 ns/op
Iteration  18: 543.366 ns/op
Iteration  19: 546.170 ns/op
Iteration  20: 542.271 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  543.114 ±(99.9%) 0.925 ns/op [Average]
  (min, avg, max) = (537.930, 543.114, 548.513), stdev = 2.729
  CI (99.9%): [542.189, 544.039] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 	 		
  

	
    	
	 

	
 		
	 ,	
 		

    avgt  100  534.873 ± 2.099  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 	 		
  

	
    	
	 

	
 		
	 ,	
 		

    avgt  100  543.114 ± 0.925  ns/op

Benchmark result is saved to split_precompiled_regex_86_78_Match.csv
