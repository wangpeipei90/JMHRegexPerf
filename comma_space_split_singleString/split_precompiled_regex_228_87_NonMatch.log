# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 7dgG-"6=?'/7%KN7}JCo I=N"Q<o_hn'7)wx8amF}K&bJLpcGoNma-\E$wuxnzPA"/dUb4GHRS.n)orI}``JK)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1340.951 ns/op
# Warmup Iteration   2: 1279.079 ns/op
# Warmup Iteration   3: 991.186 ns/op
# Warmup Iteration   4: 1001.675 ns/op
# Warmup Iteration   5: 1000.180 ns/op
Iteration   1: 1003.669 ns/op
Iteration   2: 987.593 ns/op
Iteration   3: 1009.460 ns/op
Iteration   4: 1014.662 ns/op
Iteration   5: 987.093 ns/op
Iteration   6: 993.265 ns/op
Iteration   7: 991.786 ns/op
Iteration   8: 986.729 ns/op
Iteration   9: 992.152 ns/op
Iteration  10: 994.555 ns/op
Iteration  11: 987.074 ns/op
Iteration  12: 991.683 ns/op
Iteration  13: 993.799 ns/op
Iteration  14: 988.257 ns/op
Iteration  15: 992.416 ns/op
Iteration  16: 992.138 ns/op
Iteration  17: 986.858 ns/op
Iteration  18: 992.505 ns/op
Iteration  19: 994.263 ns/op
Iteration  20: 987.066 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1341.609 ns/op
# Warmup Iteration   2: 1274.775 ns/op
# Warmup Iteration   3: 987.547 ns/op
# Warmup Iteration   4: 996.980 ns/op
# Warmup Iteration   5: 1000.200 ns/op
Iteration   1: 1004.205 ns/op
Iteration   2: 987.692 ns/op
Iteration   3: 1009.483 ns/op
Iteration   4: 1016.459 ns/op
Iteration   5: 987.988 ns/op
Iteration   6: 993.812 ns/op
Iteration   7: 992.457 ns/op
Iteration   8: 987.673 ns/op
Iteration   9: 993.525 ns/op
Iteration  10: 993.095 ns/op
Iteration  11: 987.699 ns/op
Iteration  12: 993.389 ns/op
Iteration  13: 994.373 ns/op
Iteration  14: 988.012 ns/op
Iteration  15: 994.533 ns/op
Iteration  16: 996.181 ns/op
Iteration  17: 988.016 ns/op
Iteration  18: 1007.654 ns/op
Iteration  19: 991.376 ns/op
Iteration  20: 988.155 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1348.945 ns/op
# Warmup Iteration   2: 1283.403 ns/op
# Warmup Iteration   3: 994.490 ns/op
# Warmup Iteration   4: 1002.755 ns/op
# Warmup Iteration   5: 1006.375 ns/op
Iteration   1: 1011.238 ns/op
Iteration   2: 993.922 ns/op
Iteration   3: 1015.100 ns/op
Iteration   4: 1020.991 ns/op
Iteration   5: 993.513 ns/op
Iteration   6: 1001.763 ns/op
Iteration   7: 998.525 ns/op
Iteration   8: 995.257 ns/op
Iteration   9: 1005.621 ns/op
Iteration  10: 1001.712 ns/op
Iteration  11: 994.100 ns/op
Iteration  12: 999.565 ns/op
Iteration  13: 998.737 ns/op
Iteration  14: 993.514 ns/op
Iteration  15: 1003.292 ns/op
Iteration  16: 1016.422 ns/op
Iteration  17: 993.401 ns/op
Iteration  18: 1009.408 ns/op
Iteration  19: 999.834 ns/op
Iteration  20: 993.679 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1341.674 ns/op
# Warmup Iteration   2: 1273.583 ns/op
# Warmup Iteration   3: 990.158 ns/op
# Warmup Iteration   4: 999.921 ns/op
# Warmup Iteration   5: 1002.867 ns/op
Iteration   1: 1006.317 ns/op
Iteration   2: 989.637 ns/op
Iteration   3: 1011.087 ns/op
Iteration   4: 1017.172 ns/op
Iteration   5: 989.500 ns/op
Iteration   6: 994.085 ns/op
Iteration   7: 993.517 ns/op
Iteration   8: 989.589 ns/op
Iteration   9: 994.036 ns/op
Iteration  10: 994.954 ns/op
Iteration  11: 990.016 ns/op
Iteration  12: 996.294 ns/op
Iteration  13: 999.148 ns/op
Iteration  14: 990.042 ns/op
Iteration  15: 1004.336 ns/op
Iteration  16: 999.044 ns/op
Iteration  17: 989.942 ns/op
Iteration  18: 1020.486 ns/op
Iteration  19: 992.881 ns/op
Iteration  20: 990.160 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1341.398 ns/op
# Warmup Iteration   2: 1274.025 ns/op
# Warmup Iteration   3: 987.509 ns/op
# Warmup Iteration   4: 996.465 ns/op
# Warmup Iteration   5: 1000.091 ns/op
Iteration   1: 1003.814 ns/op
Iteration   2: 987.286 ns/op
Iteration   3: 1009.115 ns/op
Iteration   4: 1014.840 ns/op
Iteration   5: 987.432 ns/op
Iteration   6: 992.097 ns/op
Iteration   7: 991.156 ns/op
Iteration   8: 987.261 ns/op
Iteration   9: 991.019 ns/op
Iteration  10: 991.896 ns/op
Iteration  11: 987.372 ns/op
Iteration  12: 994.105 ns/op
Iteration  13: 993.932 ns/op
Iteration  14: 987.574 ns/op
Iteration  15: 992.389 ns/op
Iteration  16: 998.697 ns/op
Iteration  17: 987.362 ns/op
Iteration  18: 1017.618 ns/op
Iteration  19: 996.263 ns/op
Iteration  20: 987.665 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  996.535 ±(99.9%) 3.064 ns/op [Average]
  (min, avg, max) = (986.729, 996.535, 1020.991), stdev = 9.035
  CI (99.9%): [993.471, 999.599] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 7dgG-"6=?'/7%KN7}JCo I=N"Q<o_hn'7)wx8amF}K&bJLpcGoNma-\E$wuxnzPA"/dUb4GHRS.n)orI}``JK)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1348.507 ns/op
# Warmup Iteration   2: 1274.745 ns/op
# Warmup Iteration   3: 990.514 ns/op
# Warmup Iteration   4: 999.255 ns/op
# Warmup Iteration   5: 1002.512 ns/op
Iteration   1: 1007.016 ns/op
Iteration   2: 989.955 ns/op
Iteration   3: 1011.592 ns/op
Iteration   4: 1017.853 ns/op
Iteration   5: 989.662 ns/op
Iteration   6: 996.319 ns/op
Iteration   7: 994.275 ns/op
Iteration   8: 989.753 ns/op
Iteration   9: 994.424 ns/op
Iteration  10: 994.183 ns/op
Iteration  11: 990.363 ns/op
Iteration  12: 994.090 ns/op
Iteration  13: 994.326 ns/op
Iteration  14: 990.180 ns/op
Iteration  15: 996.046 ns/op
Iteration  16: 1008.060 ns/op
Iteration  17: 989.813 ns/op
Iteration  18: 1012.829 ns/op
Iteration  19: 993.191 ns/op
Iteration  20: 990.077 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1346.164 ns/op
# Warmup Iteration   2: 1283.430 ns/op
# Warmup Iteration   3: 996.291 ns/op
# Warmup Iteration   4: 1004.849 ns/op
# Warmup Iteration   5: 1007.874 ns/op
Iteration   1: 1012.064 ns/op
Iteration   2: 995.760 ns/op
Iteration   3: 1016.903 ns/op
Iteration   4: 1023.106 ns/op
Iteration   5: 995.269 ns/op
Iteration   6: 1001.663 ns/op
Iteration   7: 1000.511 ns/op
Iteration   8: 995.728 ns/op
Iteration   9: 1000.635 ns/op
Iteration  10: 1006.489 ns/op
Iteration  11: 995.450 ns/op
Iteration  12: 1000.609 ns/op
Iteration  13: 1001.202 ns/op
Iteration  14: 995.394 ns/op
Iteration  15: 1001.994 ns/op
Iteration  16: 1001.649 ns/op
Iteration  17: 995.590 ns/op
Iteration  18: 1016.876 ns/op
Iteration  19: 999.678 ns/op
Iteration  20: 995.390 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1340.835 ns/op
# Warmup Iteration   2: 1271.446 ns/op
# Warmup Iteration   3: 984.671 ns/op
# Warmup Iteration   4: 994.217 ns/op
# Warmup Iteration   5: 996.649 ns/op
Iteration   1: 1000.036 ns/op
Iteration   2: 988.602 ns/op
Iteration   3: 1010.836 ns/op
Iteration   4: 1012.610 ns/op
Iteration   5: 984.972 ns/op
Iteration   6: 990.958 ns/op
Iteration   7: 989.204 ns/op
Iteration   8: 985.038 ns/op
Iteration   9: 989.559 ns/op
Iteration  10: 989.160 ns/op
Iteration  11: 984.788 ns/op
Iteration  12: 988.759 ns/op
Iteration  13: 994.250 ns/op
Iteration  14: 984.888 ns/op
Iteration  15: 994.430 ns/op
Iteration  16: 991.132 ns/op
Iteration  17: 985.386 ns/op
Iteration  18: 1004.156 ns/op
Iteration  19: 996.701 ns/op
Iteration  20: 984.976 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1348.708 ns/op
# Warmup Iteration   2: 1279.265 ns/op
# Warmup Iteration   3: 989.833 ns/op
# Warmup Iteration   4: 998.826 ns/op
# Warmup Iteration   5: 1001.898 ns/op
Iteration   1: 1005.758 ns/op
Iteration   2: 990.158 ns/op
Iteration   3: 1010.693 ns/op
Iteration   4: 1017.461 ns/op
Iteration   5: 989.508 ns/op
Iteration   6: 996.455 ns/op
Iteration   7: 993.860 ns/op
Iteration   8: 990.998 ns/op
Iteration   9: 993.990 ns/op
Iteration  10: 994.069 ns/op
Iteration  11: 989.186 ns/op
Iteration  12: 998.892 ns/op
Iteration  13: 995.599 ns/op
Iteration  14: 989.279 ns/op
Iteration  15: 995.781 ns/op
Iteration  16: 995.625 ns/op
Iteration  17: 988.999 ns/op
Iteration  18: 1008.339 ns/op
Iteration  19: 993.112 ns/op
Iteration  20: 989.083 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1341.158 ns/op
# Warmup Iteration   2: 1274.861 ns/op
# Warmup Iteration   3: 990.033 ns/op
# Warmup Iteration   4: 998.644 ns/op
# Warmup Iteration   5: 1001.394 ns/op
Iteration   1: 1006.540 ns/op
Iteration   2: 989.747 ns/op
Iteration   3: 1011.262 ns/op
Iteration   4: 1016.757 ns/op
Iteration   5: 989.465 ns/op
Iteration   6: 995.421 ns/op
Iteration   7: 994.649 ns/op
Iteration   8: 989.668 ns/op
Iteration   9: 994.187 ns/op
Iteration  10: 994.134 ns/op
Iteration  11: 991.724 ns/op
Iteration  12: 1000.849 ns/op
Iteration  13: 995.248 ns/op
Iteration  14: 989.474 ns/op
Iteration  15: 994.821 ns/op
Iteration  16: 994.393 ns/op
Iteration  17: 989.639 ns/op
Iteration  18: 1002.117 ns/op
Iteration  19: 993.918 ns/op
Iteration  20: 989.288 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  996.966 ±(99.9%) 2.972 ns/op [Average]
  (min, avg, max) = (984.788, 996.966, 1023.106), stdev = 8.763
  CI (99.9%): [993.993, 999.938] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  7dgG-"6=?'/7%KN7}JCo I=N"Q<o_hn'7)wx8amF}K&bJLpcGoNma-\E$wuxnzPA"/dUb4GHRS.n)orI}``JK  avgt  100  996.535 ± 3.064  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  7dgG-"6=?'/7%KN7}JCo I=N"Q<o_hn'7)wx8amF}K&bJLpcGoNma-\E$wuxnzPA"/dUb4GHRS.n)orI}``JK  avgt  100  996.966 ± 2.972  ns/op

Benchmark result is saved to split_precompiled_regex_228_87_NonMatch.csv
