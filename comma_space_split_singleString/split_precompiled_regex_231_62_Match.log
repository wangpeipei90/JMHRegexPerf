# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 					 		
 		 
 , 
 	

 
		 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 952.227 ns/op
# Warmup Iteration   2: 559.242 ns/op
# Warmup Iteration   3: 529.042 ns/op
# Warmup Iteration   4: 525.223 ns/op
# Warmup Iteration   5: 531.211 ns/op
Iteration   1: 515.943 ns/op
Iteration   2: 518.215 ns/op
Iteration   3: 515.713 ns/op
Iteration   4: 518.314 ns/op
Iteration   5: 515.934 ns/op
Iteration   6: 517.189 ns/op
Iteration   7: 513.874 ns/op
Iteration   8: 515.391 ns/op
Iteration   9: 513.991 ns/op
Iteration  10: 520.023 ns/op
Iteration  11: 514.588 ns/op
Iteration  12: 515.847 ns/op
Iteration  13: 514.020 ns/op
Iteration  14: 515.804 ns/op
Iteration  15: 514.918 ns/op
Iteration  16: 515.747 ns/op
Iteration  17: 514.917 ns/op
Iteration  18: 517.098 ns/op
Iteration  19: 513.951 ns/op
Iteration  20: 515.291 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 932.630 ns/op
# Warmup Iteration   2: 554.659 ns/op
# Warmup Iteration   3: 529.026 ns/op
# Warmup Iteration   4: 527.587 ns/op
# Warmup Iteration   5: 531.627 ns/op
Iteration   1: 516.277 ns/op
Iteration   2: 519.210 ns/op
Iteration   3: 515.847 ns/op
Iteration   4: 517.772 ns/op
Iteration   5: 516.032 ns/op
Iteration   6: 516.688 ns/op
Iteration   7: 513.397 ns/op
Iteration   8: 518.932 ns/op
Iteration   9: 513.393 ns/op
Iteration  10: 514.887 ns/op
Iteration  11: 514.146 ns/op
Iteration  12: 514.650 ns/op
Iteration  13: 514.208 ns/op
Iteration  14: 515.412 ns/op
Iteration  15: 513.857 ns/op
Iteration  16: 514.489 ns/op
Iteration  17: 513.944 ns/op
Iteration  18: 515.713 ns/op
Iteration  19: 514.293 ns/op
Iteration  20: 516.168 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 934.531 ns/op
# Warmup Iteration   2: 563.730 ns/op
# Warmup Iteration   3: 530.361 ns/op
# Warmup Iteration   4: 526.161 ns/op
# Warmup Iteration   5: 531.608 ns/op
Iteration   1: 516.915 ns/op
Iteration   2: 519.138 ns/op
Iteration   3: 516.325 ns/op
Iteration   4: 517.060 ns/op
Iteration   5: 519.852 ns/op
Iteration   6: 516.676 ns/op
Iteration   7: 520.940 ns/op
Iteration   8: 515.028 ns/op
Iteration   9: 515.845 ns/op
Iteration  10: 515.200 ns/op
Iteration  11: 516.467 ns/op
Iteration  12: 515.241 ns/op
Iteration  13: 516.162 ns/op
Iteration  14: 514.767 ns/op
Iteration  15: 516.405 ns/op
Iteration  16: 515.074 ns/op
Iteration  17: 516.710 ns/op
Iteration  18: 515.177 ns/op
Iteration  19: 518.861 ns/op
Iteration  20: 515.163 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 990.500 ns/op
# Warmup Iteration   2: 577.276 ns/op
# Warmup Iteration   3: 533.705 ns/op
# Warmup Iteration   4: 546.670 ns/op
# Warmup Iteration   5: 541.214 ns/op
Iteration   1: 531.003 ns/op
Iteration   2: 528.881 ns/op
Iteration   3: 531.570 ns/op
Iteration   4: 528.671 ns/op
Iteration   5: 533.590 ns/op
Iteration   6: 529.797 ns/op
Iteration   7: 529.229 ns/op
Iteration   8: 528.465 ns/op
Iteration   9: 529.559 ns/op
Iteration  10: 530.056 ns/op
Iteration  11: 528.349 ns/op
Iteration  12: 529.001 ns/op
Iteration  13: 527.492 ns/op
Iteration  14: 532.425 ns/op
Iteration  15: 531.445 ns/op
Iteration  16: 530.271 ns/op
Iteration  17: 527.739 ns/op
Iteration  18: 528.832 ns/op
Iteration  19: 527.610 ns/op
Iteration  20: 531.059 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 925.927 ns/op
# Warmup Iteration   2: 539.771 ns/op
# Warmup Iteration   3: 518.715 ns/op
# Warmup Iteration   4: 514.034 ns/op
# Warmup Iteration   5: 520.872 ns/op
Iteration   1: 505.821 ns/op
Iteration   2: 508.752 ns/op
Iteration   3: 505.532 ns/op
Iteration   4: 508.788 ns/op
Iteration   5: 506.384 ns/op
Iteration   6: 506.512 ns/op
Iteration   7: 504.366 ns/op
Iteration   8: 504.940 ns/op
Iteration   9: 503.525 ns/op
Iteration  10: 508.759 ns/op
Iteration  11: 504.585 ns/op
Iteration  12: 505.942 ns/op
Iteration  13: 505.001 ns/op
Iteration  14: 503.644 ns/op
Iteration  15: 504.591 ns/op
Iteration  16: 503.785 ns/op
Iteration  17: 505.916 ns/op
Iteration  18: 504.426 ns/op
Iteration  19: 507.212 ns/op
Iteration  20: 505.282 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  516.679 ±(99.9%) 2.672 ns/op [Average]
  (min, avg, max) = (503.525, 516.679, 533.590), stdev = 7.879
  CI (99.9%): [514.007, 519.351] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 					 		
 		 
 , 
 	

 
		 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 986.343 ns/op
# Warmup Iteration   2: 571.348 ns/op
# Warmup Iteration   3: 536.370 ns/op
# Warmup Iteration   4: 532.491 ns/op
# Warmup Iteration   5: 537.835 ns/op
Iteration   1: 523.448 ns/op
Iteration   2: 526.448 ns/op
Iteration   3: 523.528 ns/op
Iteration   4: 526.244 ns/op
Iteration   5: 523.974 ns/op
Iteration   6: 524.180 ns/op
Iteration   7: 521.511 ns/op
Iteration   8: 522.474 ns/op
Iteration   9: 521.365 ns/op
Iteration  10: 522.277 ns/op
Iteration  11: 525.419 ns/op
Iteration  12: 525.171 ns/op
Iteration  13: 521.780 ns/op
Iteration  14: 524.207 ns/op
Iteration  15: 523.431 ns/op
Iteration  16: 525.162 ns/op
Iteration  17: 522.452 ns/op
Iteration  18: 528.211 ns/op
Iteration  19: 522.142 ns/op
Iteration  20: 524.265 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 951.645 ns/op
# Warmup Iteration   2: 550.135 ns/op
# Warmup Iteration   3: 526.767 ns/op
# Warmup Iteration   4: 522.470 ns/op
# Warmup Iteration   5: 528.771 ns/op
Iteration   1: 513.453 ns/op
Iteration   2: 515.883 ns/op
Iteration   3: 513.221 ns/op
Iteration   4: 515.441 ns/op
Iteration   5: 513.110 ns/op
Iteration   6: 514.644 ns/op
Iteration   7: 515.597 ns/op
Iteration   8: 513.443 ns/op
Iteration   9: 513.663 ns/op
Iteration  10: 512.610 ns/op
Iteration  11: 516.229 ns/op
Iteration  12: 513.300 ns/op
Iteration  13: 516.002 ns/op
Iteration  14: 513.565 ns/op
Iteration  15: 516.516 ns/op
Iteration  16: 512.622 ns/op
Iteration  17: 516.227 ns/op
Iteration  18: 513.633 ns/op
Iteration  19: 514.101 ns/op
Iteration  20: 513.212 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 965.153 ns/op
# Warmup Iteration   2: 569.767 ns/op
# Warmup Iteration   3: 542.622 ns/op
# Warmup Iteration   4: 538.248 ns/op
# Warmup Iteration   5: 544.622 ns/op
Iteration   1: 529.356 ns/op
Iteration   2: 531.451 ns/op
Iteration   3: 528.800 ns/op
Iteration   4: 531.955 ns/op
Iteration   5: 528.981 ns/op
Iteration   6: 529.341 ns/op
Iteration   7: 528.459 ns/op
Iteration   8: 528.732 ns/op
Iteration   9: 529.699 ns/op
Iteration  10: 528.099 ns/op
Iteration  11: 531.012 ns/op
Iteration  12: 527.690 ns/op
Iteration  13: 528.864 ns/op
Iteration  14: 527.768 ns/op
Iteration  15: 529.627 ns/op
Iteration  16: 532.655 ns/op
Iteration  17: 532.082 ns/op
Iteration  18: 528.309 ns/op
Iteration  19: 529.884 ns/op
Iteration  20: 528.266 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 970.516 ns/op
# Warmup Iteration   2: 570.330 ns/op
# Warmup Iteration   3: 538.270 ns/op
# Warmup Iteration   4: 534.509 ns/op
# Warmup Iteration   5: 541.149 ns/op
Iteration   1: 525.749 ns/op
Iteration   2: 530.358 ns/op
Iteration   3: 527.939 ns/op
Iteration   4: 528.331 ns/op
Iteration   5: 525.931 ns/op
Iteration   6: 526.868 ns/op
Iteration   7: 523.478 ns/op
Iteration   8: 524.463 ns/op
Iteration   9: 522.937 ns/op
Iteration  10: 524.565 ns/op
Iteration  11: 523.392 ns/op
Iteration  12: 525.698 ns/op
Iteration  13: 524.439 ns/op
Iteration  14: 527.750 ns/op
Iteration  15: 524.994 ns/op
Iteration  16: 525.522 ns/op
Iteration  17: 525.658 ns/op
Iteration  18: 527.230 ns/op
Iteration  19: 524.965 ns/op
Iteration  20: 527.841 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 981.366 ns/op
# Warmup Iteration   2: 574.150 ns/op
# Warmup Iteration   3: 543.064 ns/op
# Warmup Iteration   4: 539.177 ns/op
# Warmup Iteration   5: 545.142 ns/op
Iteration   1: 529.768 ns/op
Iteration   2: 529.617 ns/op
Iteration   3: 531.921 ns/op
Iteration   4: 529.694 ns/op
Iteration   5: 532.223 ns/op
Iteration   6: 532.340 ns/op
Iteration   7: 529.853 ns/op
Iteration   8: 528.890 ns/op
Iteration   9: 530.586 ns/op
Iteration  10: 532.335 ns/op
Iteration  11: 529.806 ns/op
Iteration  12: 528.394 ns/op
Iteration  13: 532.890 ns/op
Iteration  14: 529.620 ns/op
Iteration  15: 530.870 ns/op
Iteration  16: 529.107 ns/op
Iteration  17: 531.205 ns/op
Iteration  18: 528.599 ns/op
Iteration  19: 529.843 ns/op
Iteration  20: 529.008 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  524.799 ±(99.9%) 2.029 ns/op [Average]
  (min, avg, max) = (512.610, 524.799, 532.890), stdev = 5.984
  CI (99.9%): [522.769, 526.828] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                       (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  					 		
 		 
 , 
 	

 
		 	  avgt  100  516.679 ± 2.672  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  					 		
 		 
 , 
 	

 
		 	  avgt  100  524.799 ± 2.029  ns/op

Benchmark result is saved to split_precompiled_regex_231_62_Match.csv
