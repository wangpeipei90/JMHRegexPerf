# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed =   	 		


   
		, 
		 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 908.509 ns/op
# Warmup Iteration   2: 523.347 ns/op
# Warmup Iteration   3: 506.415 ns/op
# Warmup Iteration   4: 503.093 ns/op
# Warmup Iteration   5: 507.413 ns/op
Iteration   1: 493.669 ns/op
Iteration   2: 495.871 ns/op
Iteration   3: 495.815 ns/op
Iteration   4: 493.767 ns/op
Iteration   5: 496.919 ns/op
Iteration   6: 492.868 ns/op
Iteration   7: 493.704 ns/op
Iteration   8: 496.433 ns/op
Iteration   9: 494.044 ns/op
Iteration  10: 492.807 ns/op
Iteration  11: 493.607 ns/op
Iteration  12: 493.515 ns/op
Iteration  13: 492.644 ns/op
Iteration  14: 495.552 ns/op
Iteration  15: 494.034 ns/op
Iteration  16: 496.543 ns/op
Iteration  17: 494.069 ns/op
Iteration  18: 496.677 ns/op
Iteration  19: 496.469 ns/op
Iteration  20: 493.861 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 890.571 ns/op
# Warmup Iteration   2: 500.876 ns/op
# Warmup Iteration   3: 494.946 ns/op
# Warmup Iteration   4: 491.575 ns/op
# Warmup Iteration   5: 486.872 ns/op
Iteration   1: 481.081 ns/op
Iteration   2: 476.879 ns/op
Iteration   3: 481.806 ns/op
Iteration   4: 480.314 ns/op
Iteration   5: 476.569 ns/op
Iteration   6: 477.639 ns/op
Iteration   7: 475.094 ns/op
Iteration   8: 475.901 ns/op
Iteration   9: 475.892 ns/op
Iteration  10: 474.958 ns/op
Iteration  11: 481.729 ns/op
Iteration  12: 475.040 ns/op
Iteration  13: 477.362 ns/op
Iteration  14: 477.675 ns/op
Iteration  15: 475.221 ns/op
Iteration  16: 478.072 ns/op
Iteration  17: 478.963 ns/op
Iteration  18: 476.195 ns/op
Iteration  19: 478.764 ns/op
Iteration  20: 475.008 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 909.495 ns/op
# Warmup Iteration   2: 519.832 ns/op
# Warmup Iteration   3: 502.145 ns/op
# Warmup Iteration   4: 498.296 ns/op
# Warmup Iteration   5: 503.306 ns/op
Iteration   1: 489.360 ns/op
Iteration   2: 491.381 ns/op
Iteration   3: 491.677 ns/op
Iteration   4: 489.894 ns/op
Iteration   5: 491.938 ns/op
Iteration   6: 488.784 ns/op
Iteration   7: 489.097 ns/op
Iteration   8: 488.893 ns/op
Iteration   9: 490.771 ns/op
Iteration  10: 498.074 ns/op
Iteration  11: 488.078 ns/op
Iteration  12: 489.164 ns/op
Iteration  13: 488.670 ns/op
Iteration  14: 489.057 ns/op
Iteration  15: 489.470 ns/op
Iteration  16: 489.324 ns/op
Iteration  17: 491.267 ns/op
Iteration  18: 488.395 ns/op
Iteration  19: 490.119 ns/op
Iteration  20: 488.816 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 914.933 ns/op
# Warmup Iteration   2: 504.774 ns/op
# Warmup Iteration   3: 488.601 ns/op
# Warmup Iteration   4: 490.770 ns/op
# Warmup Iteration   5: 482.069 ns/op
Iteration   1: 478.046 ns/op
Iteration   2: 475.878 ns/op
Iteration   3: 477.703 ns/op
Iteration   4: 478.218 ns/op
Iteration   5: 476.090 ns/op
Iteration   6: 475.510 ns/op
Iteration   7: 476.782 ns/op
Iteration   8: 478.489 ns/op
Iteration   9: 475.583 ns/op
Iteration  10: 474.766 ns/op
Iteration  11: 476.220 ns/op
Iteration  12: 477.392 ns/op
Iteration  13: 475.315 ns/op
Iteration  14: 476.964 ns/op
Iteration  15: 475.132 ns/op
Iteration  16: 476.866 ns/op
Iteration  17: 479.356 ns/op
Iteration  18: 476.373 ns/op
Iteration  19: 478.890 ns/op
Iteration  20: 478.220 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 900.187 ns/op
# Warmup Iteration   2: 508.535 ns/op
# Warmup Iteration   3: 494.564 ns/op
# Warmup Iteration   4: 492.617 ns/op
# Warmup Iteration   5: 495.084 ns/op
Iteration   1: 484.968 ns/op
Iteration   2: 482.692 ns/op
Iteration   3: 483.511 ns/op
Iteration   4: 481.886 ns/op
Iteration   5: 484.519 ns/op
Iteration   6: 485.782 ns/op
Iteration   7: 480.856 ns/op
Iteration   8: 483.397 ns/op
Iteration   9: 481.851 ns/op
Iteration  10: 483.177 ns/op
Iteration  11: 484.127 ns/op
Iteration  12: 481.683 ns/op
Iteration  13: 484.609 ns/op
Iteration  14: 481.936 ns/op
Iteration  15: 484.712 ns/op
Iteration  16: 484.538 ns/op
Iteration  17: 481.732 ns/op
Iteration  18: 484.378 ns/op
Iteration  19: 480.620 ns/op
Iteration  20: 482.658 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  484.467 ±(99.9%) 2.450 ns/op [Average]
  (min, avg, max) = (474.766, 484.467, 498.074), stdev = 7.224
  CI (99.9%): [482.017, 486.917] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed =   	 		


   
		, 
		 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 932.319 ns/op
# Warmup Iteration   2: 522.803 ns/op
# Warmup Iteration   3: 498.974 ns/op
# Warmup Iteration   4: 495.689 ns/op
# Warmup Iteration   5: 500.881 ns/op
Iteration   1: 489.034 ns/op
Iteration   2: 487.239 ns/op
Iteration   3: 489.183 ns/op
Iteration   4: 489.511 ns/op
Iteration   5: 487.441 ns/op
Iteration   6: 486.953 ns/op
Iteration   7: 486.236 ns/op
Iteration   8: 486.890 ns/op
Iteration   9: 487.184 ns/op
Iteration  10: 490.049 ns/op
Iteration  11: 489.853 ns/op
Iteration  12: 486.411 ns/op
Iteration  13: 487.840 ns/op
Iteration  14: 488.154 ns/op
Iteration  15: 487.332 ns/op
Iteration  16: 488.120 ns/op
Iteration  17: 492.714 ns/op
Iteration  18: 485.834 ns/op
Iteration  19: 487.480 ns/op
Iteration  20: 487.071 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 930.697 ns/op
# Warmup Iteration   2: 543.239 ns/op
# Warmup Iteration   3: 523.297 ns/op
# Warmup Iteration   4: 520.111 ns/op
# Warmup Iteration   5: 524.706 ns/op
Iteration   1: 510.939 ns/op
Iteration   2: 513.895 ns/op
Iteration   3: 511.251 ns/op
Iteration   4: 513.938 ns/op
Iteration   5: 511.256 ns/op
Iteration   6: 515.174 ns/op
Iteration   7: 511.345 ns/op
Iteration   8: 509.892 ns/op
Iteration   9: 511.023 ns/op
Iteration  10: 510.191 ns/op
Iteration  11: 511.765 ns/op
Iteration  12: 510.818 ns/op
Iteration  13: 512.270 ns/op
Iteration  14: 511.048 ns/op
Iteration  15: 515.118 ns/op
Iteration  16: 512.088 ns/op
Iteration  17: 513.539 ns/op
Iteration  18: 512.772 ns/op
Iteration  19: 510.427 ns/op
Iteration  20: 515.753 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 916.121 ns/op
# Warmup Iteration   2: 513.815 ns/op
# Warmup Iteration   3: 500.725 ns/op
# Warmup Iteration   4: 504.160 ns/op
# Warmup Iteration   5: 495.605 ns/op
Iteration   1: 491.257 ns/op
Iteration   2: 488.487 ns/op
Iteration   3: 491.931 ns/op
Iteration   4: 493.535 ns/op
Iteration   5: 491.386 ns/op
Iteration   6: 488.942 ns/op
Iteration   7: 487.393 ns/op
Iteration   8: 488.724 ns/op
Iteration   9: 491.906 ns/op
Iteration  10: 487.904 ns/op
Iteration  11: 490.001 ns/op
Iteration  12: 487.580 ns/op
Iteration  13: 488.400 ns/op
Iteration  14: 493.832 ns/op
Iteration  15: 487.697 ns/op
Iteration  16: 489.608 ns/op
Iteration  17: 490.083 ns/op
Iteration  18: 487.535 ns/op
Iteration  19: 488.651 ns/op
Iteration  20: 487.905 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 963.842 ns/op
# Warmup Iteration   2: 541.594 ns/op
# Warmup Iteration   3: 516.962 ns/op
# Warmup Iteration   4: 513.760 ns/op
# Warmup Iteration   5: 519.748 ns/op
Iteration   1: 509.080 ns/op
Iteration   2: 510.446 ns/op
Iteration   3: 507.467 ns/op
Iteration   4: 504.759 ns/op
Iteration   5: 507.775 ns/op
Iteration   6: 502.967 ns/op
Iteration   7: 504.143 ns/op
Iteration   8: 502.928 ns/op
Iteration   9: 503.395 ns/op
Iteration  10: 502.279 ns/op
Iteration  11: 503.993 ns/op
Iteration  12: 506.867 ns/op
Iteration  13: 504.356 ns/op
Iteration  14: 507.278 ns/op
Iteration  15: 504.311 ns/op
Iteration  16: 505.130 ns/op
Iteration  17: 503.576 ns/op
Iteration  18: 505.257 ns/op
Iteration  19: 505.569 ns/op
Iteration  20: 503.047 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 916.696 ns/op
# Warmup Iteration   2: 524.475 ns/op
# Warmup Iteration   3: 510.796 ns/op
# Warmup Iteration   4: 506.993 ns/op
# Warmup Iteration   5: 513.326 ns/op
Iteration   1: 501.343 ns/op
Iteration   2: 498.107 ns/op
Iteration   3: 500.497 ns/op
Iteration   4: 498.572 ns/op
Iteration   5: 502.048 ns/op
Iteration   6: 497.083 ns/op
Iteration   7: 497.718 ns/op
Iteration   8: 497.710 ns/op
Iteration   9: 496.784 ns/op
Iteration  10: 498.745 ns/op
Iteration  11: 497.227 ns/op
Iteration  12: 500.105 ns/op
Iteration  13: 499.397 ns/op
Iteration  14: 498.214 ns/op
Iteration  15: 500.495 ns/op
Iteration  16: 498.468 ns/op
Iteration  17: 501.023 ns/op
Iteration  18: 499.456 ns/op
Iteration  19: 498.059 ns/op
Iteration  20: 499.398 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  498.829 ±(99.9%) 3.190 ns/op [Average]
  (min, avg, max) = (485.834, 498.829, 515.753), stdev = 9.406
  CI (99.9%): [495.638, 502.019] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                      (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*    	 		


   
		, 
		 	  avgt  100  484.467 ± 2.450  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*    	 		


   
		, 
		 	  avgt  100  498.829 ± 3.190  ns/op

Benchmark result is saved to split_precompiled_regex_191_45_Match.csv
