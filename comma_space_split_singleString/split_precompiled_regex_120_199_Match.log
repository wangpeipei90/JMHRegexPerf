# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 


 

	   		
 

		 
				 	 	 			,	  	  		
		   	
 								
			



 
  	

	

				  
 
	 
	

	

	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1298.164 ns/op
# Warmup Iteration   2: 1003.021 ns/op
# Warmup Iteration   3: 829.858 ns/op
# Warmup Iteration   4: 832.482 ns/op
# Warmup Iteration   5: 840.839 ns/op
Iteration   1: 840.370 ns/op
Iteration   2: 852.414 ns/op
Iteration   3: 826.519 ns/op
Iteration   4: 825.568 ns/op
Iteration   5: 825.242 ns/op
Iteration   6: 826.068 ns/op
Iteration   7: 825.943 ns/op
Iteration   8: 826.586 ns/op
Iteration   9: 821.887 ns/op
Iteration  10: 826.115 ns/op
Iteration  11: 826.136 ns/op
Iteration  12: 826.519 ns/op
Iteration  13: 823.854 ns/op
Iteration  14: 823.536 ns/op
Iteration  15: 823.645 ns/op
Iteration  16: 823.708 ns/op
Iteration  17: 824.455 ns/op
Iteration  18: 824.639 ns/op
Iteration  19: 824.115 ns/op
Iteration  20: 825.421 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1294.564 ns/op
# Warmup Iteration   2: 994.445 ns/op
# Warmup Iteration   3: 829.110 ns/op
# Warmup Iteration   4: 831.515 ns/op
# Warmup Iteration   5: 835.693 ns/op
Iteration   1: 840.502 ns/op
Iteration   2: 845.077 ns/op
Iteration   3: 826.283 ns/op
Iteration   4: 826.013 ns/op
Iteration   5: 825.229 ns/op
Iteration   6: 825.915 ns/op
Iteration   7: 825.293 ns/op
Iteration   8: 828.038 ns/op
Iteration   9: 825.476 ns/op
Iteration  10: 822.108 ns/op
Iteration  11: 834.721 ns/op
Iteration  12: 825.499 ns/op
Iteration  13: 822.574 ns/op
Iteration  14: 822.954 ns/op
Iteration  15: 823.103 ns/op
Iteration  16: 824.073 ns/op
Iteration  17: 824.101 ns/op
Iteration  18: 823.700 ns/op
Iteration  19: 824.531 ns/op
Iteration  20: 823.779 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1297.618 ns/op
# Warmup Iteration   2: 988.512 ns/op
# Warmup Iteration   3: 830.081 ns/op
# Warmup Iteration   4: 832.384 ns/op
# Warmup Iteration   5: 835.890 ns/op
Iteration   1: 839.623 ns/op
Iteration   2: 845.684 ns/op
Iteration   3: 827.766 ns/op
Iteration   4: 826.249 ns/op
Iteration   5: 826.344 ns/op
Iteration   6: 825.693 ns/op
Iteration   7: 825.572 ns/op
Iteration   8: 829.698 ns/op
Iteration   9: 828.910 ns/op
Iteration  10: 823.054 ns/op
Iteration  11: 825.737 ns/op
Iteration  12: 826.065 ns/op
Iteration  13: 826.560 ns/op
Iteration  14: 823.974 ns/op
Iteration  15: 823.707 ns/op
Iteration  16: 823.841 ns/op
Iteration  17: 824.442 ns/op
Iteration  18: 826.157 ns/op
Iteration  19: 826.234 ns/op
Iteration  20: 826.366 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1282.742 ns/op
# Warmup Iteration   2: 971.896 ns/op
# Warmup Iteration   3: 818.109 ns/op
# Warmup Iteration   4: 820.718 ns/op
# Warmup Iteration   5: 824.441 ns/op
Iteration   1: 828.629 ns/op
Iteration   2: 832.968 ns/op
Iteration   3: 813.833 ns/op
Iteration   4: 814.207 ns/op
Iteration   5: 814.571 ns/op
Iteration   6: 815.345 ns/op
Iteration   7: 814.904 ns/op
Iteration   8: 815.400 ns/op
Iteration   9: 814.628 ns/op
Iteration  10: 814.825 ns/op
Iteration  11: 815.274 ns/op
Iteration  12: 812.897 ns/op
Iteration  13: 811.416 ns/op
Iteration  14: 812.891 ns/op
Iteration  15: 819.957 ns/op
Iteration  16: 813.405 ns/op
Iteration  17: 813.134 ns/op
Iteration  18: 813.042 ns/op
Iteration  19: 813.017 ns/op
Iteration  20: 813.377 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1301.340 ns/op
# Warmup Iteration   2: 994.583 ns/op
# Warmup Iteration   3: 833.677 ns/op
# Warmup Iteration   4: 837.355 ns/op
# Warmup Iteration   5: 840.329 ns/op
Iteration   1: 844.343 ns/op
Iteration   2: 849.881 ns/op
Iteration   3: 831.918 ns/op
Iteration   4: 830.797 ns/op
Iteration   5: 831.470 ns/op
Iteration   6: 830.612 ns/op
Iteration   7: 831.182 ns/op
Iteration   8: 830.838 ns/op
Iteration   9: 826.951 ns/op
Iteration  10: 830.831 ns/op
Iteration  11: 831.572 ns/op
Iteration  12: 831.245 ns/op
Iteration  13: 829.427 ns/op
Iteration  14: 830.459 ns/op
Iteration  15: 831.879 ns/op
Iteration  16: 832.223 ns/op
Iteration  17: 831.452 ns/op
Iteration  18: 833.706 ns/op
Iteration  19: 835.901 ns/op
Iteration  20: 831.492 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  826.093 Â±(99.9%) 2.721 ns/op [Average]
  (min, avg, max) = (811.416, 826.093, 852.414), stdev = 8.023
  CI (99.9%): [823.372, 828.814] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 


 

	   		
 

		 
				 	 	 			,	  	  		
		   	
 								
			



 
  	

	

				  
 
	 
	

	

	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1301.550 ns/op
# Warmup Iteration   2: 1012.230 ns/op
# Warmup Iteration   3: 852.267 ns/op
# Warmup Iteration   4: 855.197 ns/op
# Warmup Iteration   5: 859.001 ns/op
Iteration   1: 862.004 ns/op
Iteration   2: 867.781 ns/op
Iteration   3: 849.467 ns/op
Iteration   4: 848.234 ns/op
Iteration   5: 847.798 ns/op
Iteration   6: 847.435 ns/op
Iteration   7: 847.396 ns/op
Iteration   8: 848.210 ns/op
Iteration   9: 846.275 ns/op
Iteration  10: 847.765 ns/op
Iteration  11: 848.350 ns/op
Iteration  12: 847.970 ns/op
Iteration  13: 848.536 ns/op
Iteration  14: 846.307 ns/op
Iteration  15: 847.346 ns/op
Iteration  16: 853.757 ns/op
Iteration  17: 846.738 ns/op
Iteration  18: 846.424 ns/op
Iteration  19: 847.604 ns/op
Iteration  20: 848.047 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1308.111 ns/op
# Warmup Iteration   2: 1015.211 ns/op
# Warmup Iteration   3: 851.821 ns/op
# Warmup Iteration   4: 854.161 ns/op
# Warmup Iteration   5: 857.535 ns/op
Iteration   1: 861.619 ns/op
Iteration   2: 866.813 ns/op
Iteration   3: 848.013 ns/op
Iteration   4: 848.151 ns/op
Iteration   5: 848.032 ns/op
Iteration   6: 847.514 ns/op
Iteration   7: 847.556 ns/op
Iteration   8: 848.632 ns/op
Iteration   9: 844.072 ns/op
Iteration  10: 848.599 ns/op
Iteration  11: 854.319 ns/op
Iteration  12: 849.591 ns/op
Iteration  13: 846.342 ns/op
Iteration  14: 846.852 ns/op
Iteration  15: 847.187 ns/op
Iteration  16: 846.150 ns/op
Iteration  17: 847.838 ns/op
Iteration  18: 847.885 ns/op
Iteration  19: 846.256 ns/op
Iteration  20: 846.444 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1276.111 ns/op
# Warmup Iteration   2: 1007.478 ns/op
# Warmup Iteration   3: 850.902 ns/op
# Warmup Iteration   4: 853.368 ns/op
# Warmup Iteration   5: 857.195 ns/op
Iteration   1: 862.159 ns/op
Iteration   2: 868.968 ns/op
Iteration   3: 852.391 ns/op
Iteration   4: 846.831 ns/op
Iteration   5: 851.779 ns/op
Iteration   6: 846.758 ns/op
Iteration   7: 853.821 ns/op
Iteration   8: 848.787 ns/op
Iteration   9: 842.232 ns/op
Iteration  10: 847.600 ns/op
Iteration  11: 846.754 ns/op
Iteration  12: 849.887 ns/op
Iteration  13: 847.015 ns/op
Iteration  14: 846.439 ns/op
Iteration  15: 844.388 ns/op
Iteration  16: 844.321 ns/op
Iteration  17: 844.410 ns/op
Iteration  18: 846.296 ns/op
Iteration  19: 846.627 ns/op
Iteration  20: 846.488 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1307.867 ns/op
# Warmup Iteration   2: 1017.795 ns/op
# Warmup Iteration   3: 851.615 ns/op
# Warmup Iteration   4: 853.961 ns/op
# Warmup Iteration   5: 857.576 ns/op
Iteration   1: 861.548 ns/op
Iteration   2: 866.978 ns/op
Iteration   3: 846.663 ns/op
Iteration   4: 846.243 ns/op
Iteration   5: 846.484 ns/op
Iteration   6: 847.588 ns/op
Iteration   7: 846.893 ns/op
Iteration   8: 846.716 ns/op
Iteration   9: 842.980 ns/op
Iteration  10: 847.092 ns/op
Iteration  11: 846.881 ns/op
Iteration  12: 851.448 ns/op
Iteration  13: 846.293 ns/op
Iteration  14: 845.073 ns/op
Iteration  15: 845.033 ns/op
Iteration  16: 845.201 ns/op
Iteration  17: 844.932 ns/op
Iteration  18: 845.175 ns/op
Iteration  19: 845.057 ns/op
Iteration  20: 844.959 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1295.017 ns/op
# Warmup Iteration   2: 1012.603 ns/op
# Warmup Iteration   3: 850.023 ns/op
# Warmup Iteration   4: 852.317 ns/op
# Warmup Iteration   5: 855.976 ns/op
Iteration   1: 860.367 ns/op
Iteration   2: 865.666 ns/op
Iteration   3: 847.098 ns/op
Iteration   4: 846.904 ns/op
Iteration   5: 846.950 ns/op
Iteration   6: 846.429 ns/op
Iteration   7: 846.827 ns/op
Iteration   8: 847.791 ns/op
Iteration   9: 842.562 ns/op
Iteration  10: 847.091 ns/op
Iteration  11: 847.176 ns/op
Iteration  12: 854.996 ns/op
Iteration  13: 845.535 ns/op
Iteration  14: 844.446 ns/op
Iteration  15: 843.767 ns/op
Iteration  16: 844.630 ns/op
Iteration  17: 844.674 ns/op
Iteration  18: 844.444 ns/op
Iteration  19: 843.954 ns/op
Iteration  20: 844.490 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  848.803 Â±(99.9%) 1.955 ns/op [Average]
  (min, avg, max) = (842.232, 848.803, 868.968), stdev = 5.765
  CI (99.9%): [846.848, 850.758] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                                                                                (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  


 

	   		
 

		 
				 	 	 			,	  	  		
		   	
 								
			



 
  	

	

				  
 
	 
	

	

	  avgt  100  826.093 Â± 2.721  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  


 

	   		
 

		 
				 	 	 			,	  	  		
		   	
 								
			



 
  	

	

				  
 
	 
	

	

	  avgt  100  848.803 Â± 1.955  ns/op

Benchmark result is saved to split_precompiled_regex_120_199_Match.csv
