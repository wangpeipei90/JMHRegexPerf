# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
 		   
		


 	  
,

 	 		 		 		 		  
	
	  
		


		


	 
		    
 
 	)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1090.702 ns/op
# Warmup Iteration   2: 759.010 ns/op
# Warmup Iteration   3: 679.549 ns/op
# Warmup Iteration   4: 674.571 ns/op
# Warmup Iteration   5: 678.145 ns/op
Iteration   1: 682.572 ns/op
Iteration   2: 667.118 ns/op
Iteration   3: 669.251 ns/op
Iteration   4: 666.481 ns/op
Iteration   5: 666.506 ns/op
Iteration   6: 666.198 ns/op
Iteration   7: 665.933 ns/op
Iteration   8: 665.572 ns/op
Iteration   9: 667.935 ns/op
Iteration  10: 672.141 ns/op
Iteration  11: 665.151 ns/op
Iteration  12: 664.405 ns/op
Iteration  13: 665.395 ns/op
Iteration  14: 664.477 ns/op
Iteration  15: 665.125 ns/op
Iteration  16: 666.761 ns/op
Iteration  17: 664.511 ns/op
Iteration  18: 665.777 ns/op
Iteration  19: 664.303 ns/op
Iteration  20: 664.654 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1141.898 ns/op
# Warmup Iteration   2: 780.448 ns/op
# Warmup Iteration   3: 690.818 ns/op
# Warmup Iteration   4: 688.781 ns/op
# Warmup Iteration   5: 691.915 ns/op
Iteration   1: 693.914 ns/op
Iteration   2: 679.307 ns/op
Iteration   3: 679.712 ns/op
Iteration   4: 679.461 ns/op
Iteration   5: 682.003 ns/op
Iteration   6: 679.189 ns/op
Iteration   7: 679.067 ns/op
Iteration   8: 679.191 ns/op
Iteration   9: 679.367 ns/op
Iteration  10: 677.294 ns/op
Iteration  11: 679.165 ns/op
Iteration  12: 678.790 ns/op
Iteration  13: 677.428 ns/op
Iteration  14: 677.701 ns/op
Iteration  15: 677.362 ns/op
Iteration  16: 677.469 ns/op
Iteration  17: 677.573 ns/op
Iteration  18: 677.556 ns/op
Iteration  19: 682.017 ns/op
Iteration  20: 678.359 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1173.873 ns/op
# Warmup Iteration   2: 817.284 ns/op
# Warmup Iteration   3: 719.538 ns/op
# Warmup Iteration   4: 715.366 ns/op
# Warmup Iteration   5: 719.407 ns/op
Iteration   1: 724.621 ns/op
Iteration   2: 707.313 ns/op
Iteration   3: 706.642 ns/op
Iteration   4: 706.652 ns/op
Iteration   5: 706.726 ns/op
Iteration   6: 706.549 ns/op
Iteration   7: 707.118 ns/op
Iteration   8: 712.027 ns/op
Iteration   9: 707.797 ns/op
Iteration  10: 705.128 ns/op
Iteration  11: 704.877 ns/op
Iteration  12: 704.657 ns/op
Iteration  13: 704.485 ns/op
Iteration  14: 704.529 ns/op
Iteration  15: 704.398 ns/op
Iteration  16: 704.828 ns/op
Iteration  17: 705.010 ns/op
Iteration  18: 705.428 ns/op
Iteration  19: 709.808 ns/op
Iteration  20: 707.687 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1098.654 ns/op
# Warmup Iteration   2: 773.653 ns/op
# Warmup Iteration   3: 689.123 ns/op
# Warmup Iteration   4: 685.566 ns/op
# Warmup Iteration   5: 689.392 ns/op
Iteration   1: 692.859 ns/op
Iteration   2: 677.816 ns/op
Iteration   3: 677.649 ns/op
Iteration   4: 680.230 ns/op
Iteration   5: 678.027 ns/op
Iteration   6: 677.847 ns/op
Iteration   7: 677.946 ns/op
Iteration   8: 677.257 ns/op
Iteration   9: 677.552 ns/op
Iteration  10: 675.924 ns/op
Iteration  11: 677.317 ns/op
Iteration  12: 675.661 ns/op
Iteration  13: 675.492 ns/op
Iteration  14: 675.555 ns/op
Iteration  15: 676.051 ns/op
Iteration  16: 675.365 ns/op
Iteration  17: 676.252 ns/op
Iteration  18: 678.657 ns/op
Iteration  19: 677.099 ns/op
Iteration  20: 676.806 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1099.721 ns/op
# Warmup Iteration   2: 753.037 ns/op
# Warmup Iteration   3: 675.132 ns/op
# Warmup Iteration   4: 670.965 ns/op
# Warmup Iteration   5: 674.114 ns/op
Iteration   1: 678.191 ns/op
Iteration   2: 663.019 ns/op
Iteration   3: 666.042 ns/op
Iteration   4: 662.539 ns/op
Iteration   5: 663.931 ns/op
Iteration   6: 662.899 ns/op
Iteration   7: 663.407 ns/op
Iteration   8: 662.753 ns/op
Iteration   9: 664.462 ns/op
Iteration  10: 661.242 ns/op
Iteration  11: 661.827 ns/op
Iteration  12: 661.529 ns/op
Iteration  13: 662.353 ns/op
Iteration  14: 661.457 ns/op
Iteration  15: 664.303 ns/op
Iteration  16: 662.111 ns/op
Iteration  17: 662.503 ns/op
Iteration  18: 661.620 ns/op
Iteration  19: 677.656 ns/op
Iteration  20: 661.763 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  679.214 ±(99.9%) 5.383 ns/op [Average]
  (min, avg, max) = (661.242, 679.214, 724.621), stdev = 15.871
  CI (99.9%): [673.832, 684.597] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 
 		   
		


 	  
,

 	 		 		 		 		  
	
	  
		


		


	 
		    
 
 	)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1116.520 ns/op
# Warmup Iteration   2: 782.653 ns/op
# Warmup Iteration   3: 703.356 ns/op
# Warmup Iteration   4: 695.054 ns/op
# Warmup Iteration   5: 698.283 ns/op
Iteration   1: 702.738 ns/op
Iteration   2: 686.942 ns/op
Iteration   3: 690.340 ns/op
Iteration   4: 694.382 ns/op
Iteration   5: 686.941 ns/op
Iteration   6: 687.126 ns/op
Iteration   7: 687.090 ns/op
Iteration   8: 686.694 ns/op
Iteration   9: 687.400 ns/op
Iteration  10: 686.159 ns/op
Iteration  11: 685.267 ns/op
Iteration  12: 685.101 ns/op
Iteration  13: 686.211 ns/op
Iteration  14: 691.364 ns/op
Iteration  15: 686.593 ns/op
Iteration  16: 684.859 ns/op
Iteration  17: 688.053 ns/op
Iteration  18: 685.722 ns/op
Iteration  19: 685.648 ns/op
Iteration  20: 685.595 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1209.561 ns/op
# Warmup Iteration   2: 854.758 ns/op
# Warmup Iteration   3: 736.473 ns/op
# Warmup Iteration   4: 751.559 ns/op
# Warmup Iteration   5: 745.500 ns/op
Iteration   1: 749.432 ns/op
Iteration   2: 734.251 ns/op
Iteration   3: 738.462 ns/op
Iteration   4: 734.063 ns/op
Iteration   5: 733.806 ns/op
Iteration   6: 734.012 ns/op
Iteration   7: 734.287 ns/op
Iteration   8: 733.933 ns/op
Iteration   9: 734.209 ns/op
Iteration  10: 733.912 ns/op
Iteration  11: 733.734 ns/op
Iteration  12: 731.802 ns/op
Iteration  13: 731.720 ns/op
Iteration  14: 731.939 ns/op
Iteration  15: 731.952 ns/op
Iteration  16: 737.748 ns/op
Iteration  17: 733.139 ns/op
Iteration  18: 733.130 ns/op
Iteration  19: 732.205 ns/op
Iteration  20: 733.575 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1114.089 ns/op
# Warmup Iteration   2: 786.689 ns/op
# Warmup Iteration   3: 708.778 ns/op
# Warmup Iteration   4: 703.992 ns/op
# Warmup Iteration   5: 707.749 ns/op
Iteration   1: 711.777 ns/op
Iteration   2: 696.038 ns/op
Iteration   3: 696.297 ns/op
Iteration   4: 700.201 ns/op
Iteration   5: 696.533 ns/op
Iteration   6: 695.765 ns/op
Iteration   7: 696.362 ns/op
Iteration   8: 696.875 ns/op
Iteration   9: 696.987 ns/op
Iteration  10: 696.063 ns/op
Iteration  11: 694.617 ns/op
Iteration  12: 695.704 ns/op
Iteration  13: 697.511 ns/op
Iteration  14: 700.064 ns/op
Iteration  15: 694.705 ns/op
Iteration  16: 695.486 ns/op
Iteration  17: 702.050 ns/op
Iteration  18: 704.469 ns/op
Iteration  19: 697.446 ns/op
Iteration  20: 694.548 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1168.001 ns/op
# Warmup Iteration   2: 858.184 ns/op
# Warmup Iteration   3: 751.526 ns/op
# Warmup Iteration   4: 767.408 ns/op
# Warmup Iteration   5: 760.813 ns/op
Iteration   1: 764.896 ns/op
Iteration   2: 748.118 ns/op
Iteration   3: 748.020 ns/op
Iteration   4: 747.682 ns/op
Iteration   5: 747.881 ns/op
Iteration   6: 750.163 ns/op
Iteration   7: 748.673 ns/op
Iteration   8: 747.463 ns/op
Iteration   9: 748.559 ns/op
Iteration  10: 749.470 ns/op
Iteration  11: 744.785 ns/op
Iteration  12: 744.992 ns/op
Iteration  13: 744.852 ns/op
Iteration  14: 745.078 ns/op
Iteration  15: 746.663 ns/op
Iteration  16: 746.122 ns/op
Iteration  17: 749.058 ns/op
Iteration  18: 746.069 ns/op
Iteration  19: 744.997 ns/op
Iteration  20: 745.562 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1184.470 ns/op
# Warmup Iteration   2: 860.974 ns/op
# Warmup Iteration   3: 736.900 ns/op
# Warmup Iteration   4: 753.875 ns/op
# Warmup Iteration   5: 746.607 ns/op
Iteration   1: 752.189 ns/op
Iteration   2: 734.694 ns/op
Iteration   3: 734.680 ns/op
Iteration   4: 735.843 ns/op
Iteration   5: 736.053 ns/op
Iteration   6: 734.182 ns/op
Iteration   7: 734.864 ns/op
Iteration   8: 735.269 ns/op
Iteration   9: 735.709 ns/op
Iteration  10: 735.275 ns/op
Iteration  11: 733.442 ns/op
Iteration  12: 732.573 ns/op
Iteration  13: 731.930 ns/op
Iteration  14: 732.206 ns/op
Iteration  15: 730.343 ns/op
Iteration  16: 732.524 ns/op
Iteration  17: 730.325 ns/op
Iteration  18: 731.884 ns/op
Iteration  19: 732.655 ns/op
Iteration  20: 730.597 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  720.574 ±(99.9%) 8.055 ns/op [Average]
  (min, avg, max) = (684.859, 720.574, 764.896), stdev = 23.749
  CI (99.9%): [712.519, 728.628] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                                               (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 
 		   
		


 	  
,

 	 		 		 		 		  
	
	  
		


		


	 
		    
 
 	  avgt  100  679.214 ± 5.383  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 
 		   
		


 	  
,

 	 		 		 		 		  
	
	  
		


		


	 
		    
 
 	  avgt  100  720.574 ± 8.055  ns/op

Benchmark result is saved to split_precompiled_regex_104_150_Match.csv
