# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.regexSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	
	   


	


	
 

 
	 



	, 
 
	
   		
   

 		

 
	
		 
   	 
		
 
)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 1050.266 ns/op
# Warmup Iteration   2: 708.484 ns/op
# Warmup Iteration   3: 632.834 ns/op
# Warmup Iteration   4: 635.224 ns/op
# Warmup Iteration   5: 638.606 ns/op
Iteration   1: 644.870 ns/op
Iteration   2: 627.931 ns/op
Iteration   3: 627.166 ns/op
Iteration   4: 627.027 ns/op
Iteration   5: 629.767 ns/op
Iteration   6: 627.310 ns/op
Iteration   7: 627.313 ns/op
Iteration   8: 627.500 ns/op
Iteration   9: 625.478 ns/op
Iteration  10: 626.156 ns/op
Iteration  11: 628.242 ns/op
Iteration  12: 634.538 ns/op
Iteration  13: 625.775 ns/op
Iteration  14: 627.160 ns/op
Iteration  15: 625.648 ns/op
Iteration  16: 625.545 ns/op
Iteration  17: 625.534 ns/op
Iteration  18: 628.629 ns/op
Iteration  19: 626.609 ns/op
Iteration  20: 626.687 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 1049.371 ns/op
# Warmup Iteration   2: 706.966 ns/op
# Warmup Iteration   3: 631.149 ns/op
# Warmup Iteration   4: 633.559 ns/op
# Warmup Iteration   5: 637.174 ns/op
Iteration   1: 644.390 ns/op
Iteration   2: 625.999 ns/op
Iteration   3: 626.185 ns/op
Iteration   4: 626.109 ns/op
Iteration   5: 627.969 ns/op
Iteration   6: 625.980 ns/op
Iteration   7: 625.911 ns/op
Iteration   8: 625.970 ns/op
Iteration   9: 625.260 ns/op
Iteration  10: 628.584 ns/op
Iteration  11: 623.999 ns/op
Iteration  12: 623.871 ns/op
Iteration  13: 623.925 ns/op
Iteration  14: 626.653 ns/op
Iteration  15: 623.967 ns/op
Iteration  16: 624.469 ns/op
Iteration  17: 628.797 ns/op
Iteration  18: 625.249 ns/op
Iteration  19: 624.358 ns/op
Iteration  20: 625.720 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 1052.635 ns/op
# Warmup Iteration   2: 711.001 ns/op
# Warmup Iteration   3: 639.173 ns/op
# Warmup Iteration   4: 641.925 ns/op
# Warmup Iteration   5: 644.968 ns/op
Iteration   1: 652.588 ns/op
Iteration   2: 634.438 ns/op
Iteration   3: 633.948 ns/op
Iteration   4: 634.412 ns/op
Iteration   5: 634.524 ns/op
Iteration   6: 637.280 ns/op
Iteration   7: 634.058 ns/op
Iteration   8: 635.197 ns/op
Iteration   9: 632.588 ns/op
Iteration  10: 637.913 ns/op
Iteration  11: 632.541 ns/op
Iteration  12: 632.006 ns/op
Iteration  13: 634.747 ns/op
Iteration  14: 632.372 ns/op
Iteration  15: 633.878 ns/op
Iteration  16: 636.844 ns/op
Iteration  17: 633.243 ns/op
Iteration  18: 632.451 ns/op
Iteration  19: 634.007 ns/op
Iteration  20: 635.311 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 1081.441 ns/op
# Warmup Iteration   2: 744.897 ns/op
# Warmup Iteration   3: 669.641 ns/op
# Warmup Iteration   4: 666.504 ns/op
# Warmup Iteration   5: 670.090 ns/op
Iteration   1: 673.168 ns/op
Iteration   2: 658.914 ns/op
Iteration   3: 661.244 ns/op
Iteration   4: 658.304 ns/op
Iteration   5: 657.994 ns/op
Iteration   6: 658.743 ns/op
Iteration   7: 658.729 ns/op
Iteration   8: 662.132 ns/op
Iteration   9: 659.609 ns/op
Iteration  10: 655.653 ns/op
Iteration  11: 655.666 ns/op
Iteration  12: 655.239 ns/op
Iteration  13: 655.760 ns/op
Iteration  14: 656.784 ns/op
Iteration  15: 655.677 ns/op
Iteration  16: 655.158 ns/op
Iteration  17: 656.439 ns/op
Iteration  18: 657.080 ns/op
Iteration  19: 655.848 ns/op
Iteration  20: 658.078 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1049.848 ns/op
# Warmup Iteration   2: 708.409 ns/op
# Warmup Iteration   3: 633.326 ns/op
# Warmup Iteration   4: 636.012 ns/op
# Warmup Iteration   5: 639.342 ns/op
Iteration   1: 652.110 ns/op
Iteration   2: 629.533 ns/op
Iteration   3: 628.602 ns/op
Iteration   4: 628.805 ns/op
Iteration   5: 632.075 ns/op
Iteration   6: 628.557 ns/op
Iteration   7: 628.774 ns/op
Iteration   8: 628.766 ns/op
Iteration   9: 629.026 ns/op
Iteration  10: 628.389 ns/op
Iteration  11: 627.285 ns/op
Iteration  12: 627.242 ns/op
Iteration  13: 626.898 ns/op
Iteration  14: 629.644 ns/op
Iteration  15: 627.402 ns/op
Iteration  16: 627.695 ns/op
Iteration  17: 628.574 ns/op
Iteration  18: 628.426 ns/op
Iteration  19: 630.001 ns/op
Iteration  20: 628.511 ns/op


Result "benchmark.PrecompiledRegexSplit.regexSplit":
  635.651 ±(99.9%) 4.261 ns/op [Average]
  (min, avg, max) = (623.871, 635.651, 673.168), stdev = 12.565
  CI (99.9%): [631.390, 639.913] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.PrecompiledRegexSplit.stringSplit
# Parameters: (regex = \s*,\s*, trimmed = 
 	
	   


	


	
 

 
	 



	, 
 
	
   		
   

 		

 
	
		 
   	 
		
 
)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 1120.719 ns/op
# Warmup Iteration   2: 740.564 ns/op
# Warmup Iteration   3: 668.316 ns/op
# Warmup Iteration   4: 665.076 ns/op
# Warmup Iteration   5: 668.501 ns/op
Iteration   1: 672.697 ns/op
Iteration   2: 661.590 ns/op
Iteration   3: 657.155 ns/op
Iteration   4: 657.165 ns/op
Iteration   5: 657.399 ns/op
Iteration   6: 657.333 ns/op
Iteration   7: 659.597 ns/op
Iteration   8: 657.238 ns/op
Iteration   9: 655.431 ns/op
Iteration  10: 655.191 ns/op
Iteration  11: 656.732 ns/op
Iteration  12: 654.935 ns/op
Iteration  13: 654.982 ns/op
Iteration  14: 655.155 ns/op
Iteration  15: 655.163 ns/op
Iteration  16: 656.960 ns/op
Iteration  17: 655.400 ns/op
Iteration  18: 655.881 ns/op
Iteration  19: 655.627 ns/op
Iteration  20: 655.425 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 1118.637 ns/op
# Warmup Iteration   2: 735.618 ns/op
# Warmup Iteration   3: 662.348 ns/op
# Warmup Iteration   4: 658.611 ns/op
# Warmup Iteration   5: 661.651 ns/op
Iteration   1: 666.749 ns/op
Iteration   2: 655.902 ns/op
Iteration   3: 651.359 ns/op
Iteration   4: 651.691 ns/op
Iteration   5: 652.027 ns/op
Iteration   6: 654.463 ns/op
Iteration   7: 651.856 ns/op
Iteration   8: 651.040 ns/op
Iteration   9: 652.955 ns/op
Iteration  10: 650.606 ns/op
Iteration  11: 651.244 ns/op
Iteration  12: 648.341 ns/op
Iteration  13: 648.257 ns/op
Iteration  14: 648.527 ns/op
Iteration  15: 650.325 ns/op
Iteration  16: 652.615 ns/op
Iteration  17: 648.759 ns/op
Iteration  18: 648.598 ns/op
Iteration  19: 648.637 ns/op
Iteration  20: 650.444 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 1083.406 ns/op
# Warmup Iteration   2: 736.928 ns/op
# Warmup Iteration   3: 668.606 ns/op
# Warmup Iteration   4: 666.224 ns/op
# Warmup Iteration   5: 669.378 ns/op
Iteration   1: 672.955 ns/op
Iteration   2: 661.040 ns/op
Iteration   3: 657.857 ns/op
Iteration   4: 657.690 ns/op
Iteration   5: 658.581 ns/op
Iteration   6: 658.025 ns/op
Iteration   7: 661.119 ns/op
Iteration   8: 658.505 ns/op
Iteration   9: 656.366 ns/op
Iteration  10: 656.690 ns/op
Iteration  11: 656.569 ns/op
Iteration  12: 657.380 ns/op
Iteration  13: 656.309 ns/op
Iteration  14: 656.349 ns/op
Iteration  15: 656.252 ns/op
Iteration  16: 662.092 ns/op
Iteration  17: 656.839 ns/op
Iteration  18: 656.752 ns/op
Iteration  19: 656.612 ns/op
Iteration  20: 659.656 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 1130.373 ns/op
# Warmup Iteration   2: 765.745 ns/op
# Warmup Iteration   3: 687.580 ns/op
# Warmup Iteration   4: 682.128 ns/op
# Warmup Iteration   5: 686.724 ns/op
Iteration   1: 690.325 ns/op
Iteration   2: 675.144 ns/op
Iteration   3: 678.612 ns/op
Iteration   4: 675.090 ns/op
Iteration   5: 674.928 ns/op
Iteration   6: 674.617 ns/op
Iteration   7: 674.453 ns/op
Iteration   8: 674.086 ns/op
Iteration   9: 676.376 ns/op
Iteration  10: 672.394 ns/op
Iteration  11: 672.555 ns/op
Iteration  12: 672.504 ns/op
Iteration  13: 672.754 ns/op
Iteration  14: 673.911 ns/op
Iteration  15: 677.966 ns/op
Iteration  16: 673.122 ns/op
Iteration  17: 672.973 ns/op
Iteration  18: 672.926 ns/op
Iteration  19: 673.111 ns/op
Iteration  20: 674.951 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 1122.177 ns/op
# Warmup Iteration   2: 755.654 ns/op
# Warmup Iteration   3: 679.106 ns/op
# Warmup Iteration   4: 674.175 ns/op
# Warmup Iteration   5: 677.592 ns/op
Iteration   1: 682.536 ns/op
Iteration   2: 670.272 ns/op
Iteration   3: 666.521 ns/op
Iteration   4: 666.151 ns/op
Iteration   5: 666.336 ns/op
Iteration   6: 666.653 ns/op
Iteration   7: 666.629 ns/op
Iteration   8: 670.129 ns/op
Iteration   9: 664.620 ns/op
Iteration  10: 664.972 ns/op
Iteration  11: 665.058 ns/op
Iteration  12: 664.011 ns/op
Iteration  13: 667.680 ns/op
Iteration  14: 664.507 ns/op
Iteration  15: 664.949 ns/op
Iteration  16: 664.505 ns/op
Iteration  17: 665.106 ns/op
Iteration  18: 666.917 ns/op
Iteration  19: 666.135 ns/op
Iteration  20: 666.349 ns/op


Result "benchmark.PrecompiledRegexSplit.stringSplit":
  661.979 ±(99.9%) 3.091 ns/op [Average]
  (min, avg, max) = (648.257, 661.979, 690.325), stdev = 9.114
  CI (99.9%): [658.888, 665.070] (assumes normal distribution)


# Run complete. Total time: 00:04:13

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          (regex)                                                                                                                            (trimmed)  Mode  Cnt    Score   Error  Units
PrecompiledRegexSplit.regexSplit   \s*,\s*  
 	
	   


	


	
 

 
	 



	, 
 
	
   		
   

 		

 
	
		 
   	 
		
 
  avgt  100  635.651 ± 4.261  ns/op
PrecompiledRegexSplit.stringSplit  \s*,\s*  
 	
	   


	


	
 

 
	 



	, 
 
	
   		
   

 		

 
	
		 
   	 
		
 
  avgt  100  661.979 ± 3.091  ns/op

Benchmark result is saved to split_precompiled_regex_22_131_Match.csv
