# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Tr.T	{!&fttKyhQ+_"E"2XJA5By]u7IBZD>*F+Jlnb5mE2!$'#3L:2<6^z,Rhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 214.407 ns/op
# Warmup Iteration   2: 144.707 ns/op
# Warmup Iteration   3: 128.327 ns/op
# Warmup Iteration   4: 127.482 ns/op
# Warmup Iteration   5: 129.155 ns/op
Iteration   1: 129.610 ns/op
Iteration   2: 125.913 ns/op
Iteration   3: 125.956 ns/op
Iteration   4: 125.991 ns/op
Iteration   5: 128.776 ns/op
Iteration   6: 126.007 ns/op
Iteration   7: 126.027 ns/op
Iteration   8: 126.006 ns/op
Iteration   9: 126.206 ns/op
Iteration  10: 125.889 ns/op
Iteration  11: 125.613 ns/op
Iteration  12: 125.999 ns/op
Iteration  13: 125.582 ns/op
Iteration  14: 125.848 ns/op
Iteration  15: 126.610 ns/op
Iteration  16: 125.715 ns/op
Iteration  17: 125.697 ns/op
Iteration  18: 125.902 ns/op
Iteration  19: 125.651 ns/op
Iteration  20: 125.790 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.018 ns/op
# Warmup Iteration   2: 143.439 ns/op
# Warmup Iteration   3: 126.708 ns/op
# Warmup Iteration   4: 127.280 ns/op
# Warmup Iteration   5: 127.992 ns/op
Iteration   1: 129.588 ns/op
Iteration   2: 125.704 ns/op
Iteration   3: 125.675 ns/op
Iteration   4: 125.743 ns/op
Iteration   5: 126.832 ns/op
Iteration   6: 125.658 ns/op
Iteration   7: 125.597 ns/op
Iteration   8: 125.734 ns/op
Iteration   9: 125.588 ns/op
Iteration  10: 125.253 ns/op
Iteration  11: 125.694 ns/op
Iteration  12: 125.285 ns/op
Iteration  13: 125.532 ns/op
Iteration  14: 125.527 ns/op
Iteration  15: 125.599 ns/op
Iteration  16: 125.466 ns/op
Iteration  17: 125.300 ns/op
Iteration  18: 125.735 ns/op
Iteration  19: 125.328 ns/op
Iteration  20: 126.315 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 213.595 ns/op
# Warmup Iteration   2: 144.155 ns/op
# Warmup Iteration   3: 124.874 ns/op
# Warmup Iteration   4: 125.473 ns/op
# Warmup Iteration   5: 126.856 ns/op
Iteration   1: 126.606 ns/op
Iteration   2: 123.982 ns/op
Iteration   3: 123.915 ns/op
Iteration   4: 123.953 ns/op
Iteration   5: 124.505 ns/op
Iteration   6: 123.765 ns/op
Iteration   7: 123.959 ns/op
Iteration   8: 123.850 ns/op
Iteration   9: 124.081 ns/op
Iteration  10: 124.036 ns/op
Iteration  11: 123.823 ns/op
Iteration  12: 124.055 ns/op
Iteration  13: 123.534 ns/op
Iteration  14: 123.478 ns/op
Iteration  15: 123.479 ns/op
Iteration  16: 123.892 ns/op
Iteration  17: 123.536 ns/op
Iteration  18: 123.752 ns/op
Iteration  19: 123.630 ns/op
Iteration  20: 124.012 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 212.988 ns/op
# Warmup Iteration   2: 143.573 ns/op
# Warmup Iteration   3: 128.047 ns/op
# Warmup Iteration   4: 127.812 ns/op
# Warmup Iteration   5: 128.394 ns/op
Iteration   1: 129.642 ns/op
Iteration   2: 126.254 ns/op
Iteration   3: 126.390 ns/op
Iteration   4: 126.185 ns/op
Iteration   5: 126.710 ns/op
Iteration   6: 126.122 ns/op
Iteration   7: 126.187 ns/op
Iteration   8: 126.253 ns/op
Iteration   9: 125.824 ns/op
Iteration  10: 126.946 ns/op
Iteration  11: 125.902 ns/op
Iteration  12: 126.093 ns/op
Iteration  13: 125.949 ns/op
Iteration  14: 126.419 ns/op
Iteration  15: 125.851 ns/op
Iteration  16: 125.835 ns/op
Iteration  17: 125.806 ns/op
Iteration  18: 126.559 ns/op
Iteration  19: 126.201 ns/op
Iteration  20: 126.654 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 228.663 ns/op
# Warmup Iteration   2: 161.525 ns/op
# Warmup Iteration   3: 142.149 ns/op
# Warmup Iteration   4: 141.364 ns/op
# Warmup Iteration   5: 142.049 ns/op
Iteration   1: 142.955 ns/op
Iteration   2: 139.648 ns/op
Iteration   3: 139.639 ns/op
Iteration   4: 139.628 ns/op
Iteration   5: 139.702 ns/op
Iteration   6: 140.285 ns/op
Iteration   7: 139.834 ns/op
Iteration   8: 139.621 ns/op
Iteration   9: 139.720 ns/op
Iteration  10: 139.313 ns/op
Iteration  11: 139.236 ns/op
Iteration  12: 139.391 ns/op
Iteration  13: 139.542 ns/op
Iteration  14: 139.379 ns/op
Iteration  15: 139.666 ns/op
Iteration  16: 139.701 ns/op
Iteration  17: 139.558 ns/op
Iteration  18: 139.753 ns/op
Iteration  19: 139.710 ns/op
Iteration  20: 139.665 ns/op


Result "benchmark.StringContains.regexMatches":
  128.455 ±(99.9%) 1.976 ns/op [Average]
  (min, avg, max) = (123.478, 128.455, 142.955), stdev = 5.826
  CI (99.9%): [126.479, 130.431] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Tr.T	{!&fttKyhQ+_"E"2XJA5By]u7IBZD>*F+Jlnb5mE2!$'#3L:2<6^z,Rhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.976 ns/op
# Warmup Iteration   2: 17.068 ns/op
# Warmup Iteration   3: 16.870 ns/op
# Warmup Iteration   4: 16.844 ns/op
# Warmup Iteration   5: 16.864 ns/op
Iteration   1: 16.888 ns/op
Iteration   2: 16.851 ns/op
Iteration   3: 16.819 ns/op
Iteration   4: 16.851 ns/op
Iteration   5: 16.848 ns/op
Iteration   6: 16.830 ns/op
Iteration   7: 16.814 ns/op
Iteration   8: 16.850 ns/op
Iteration   9: 16.818 ns/op
Iteration  10: 16.829 ns/op
Iteration  11: 16.820 ns/op
Iteration  12: 16.792 ns/op
Iteration  13: 16.776 ns/op
Iteration  14: 16.812 ns/op
Iteration  15: 16.789 ns/op
Iteration  16: 16.805 ns/op
Iteration  17: 16.794 ns/op
Iteration  18: 16.806 ns/op
Iteration  19: 16.867 ns/op
Iteration  20: 16.828 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.948 ns/op
# Warmup Iteration   2: 16.991 ns/op
# Warmup Iteration   3: 16.495 ns/op
# Warmup Iteration   4: 16.494 ns/op
# Warmup Iteration   5: 16.508 ns/op
Iteration   1: 16.508 ns/op
Iteration   2: 16.481 ns/op
Iteration   3: 16.480 ns/op
Iteration   4: 16.499 ns/op
Iteration   5: 16.490 ns/op
Iteration   6: 16.503 ns/op
Iteration   7: 16.511 ns/op
Iteration   8: 16.499 ns/op
Iteration   9: 16.516 ns/op
Iteration  10: 16.485 ns/op
Iteration  11: 16.494 ns/op
Iteration  12: 16.502 ns/op
Iteration  13: 16.495 ns/op
Iteration  14: 16.495 ns/op
Iteration  15: 16.514 ns/op
Iteration  16: 16.494 ns/op
Iteration  17: 16.500 ns/op
Iteration  18: 16.500 ns/op
Iteration  19: 16.493 ns/op
Iteration  20: 16.481 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.075 ns/op
# Warmup Iteration   2: 17.078 ns/op
# Warmup Iteration   3: 16.523 ns/op
# Warmup Iteration   4: 16.504 ns/op
# Warmup Iteration   5: 16.502 ns/op
Iteration   1: 16.511 ns/op
Iteration   2: 16.505 ns/op
Iteration   3: 16.506 ns/op
Iteration   4: 16.486 ns/op
Iteration   5: 16.498 ns/op
Iteration   6: 16.501 ns/op
Iteration   7: 16.524 ns/op
Iteration   8: 16.514 ns/op
Iteration   9: 16.505 ns/op
Iteration  10: 16.510 ns/op
Iteration  11: 16.492 ns/op
Iteration  12: 16.511 ns/op
Iteration  13: 16.497 ns/op
Iteration  14: 16.499 ns/op
Iteration  15: 16.495 ns/op
Iteration  16: 16.526 ns/op
Iteration  17: 16.523 ns/op
Iteration  18: 16.508 ns/op
Iteration  19: 16.506 ns/op
Iteration  20: 16.500 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.113 ns/op
# Warmup Iteration   2: 17.100 ns/op
# Warmup Iteration   3: 16.571 ns/op
# Warmup Iteration   4: 16.557 ns/op
# Warmup Iteration   5: 16.577 ns/op
Iteration   1: 16.576 ns/op
Iteration   2: 16.562 ns/op
Iteration   3: 16.580 ns/op
Iteration   4: 16.556 ns/op
Iteration   5: 16.581 ns/op
Iteration   6: 16.554 ns/op
Iteration   7: 16.549 ns/op
Iteration   8: 16.597 ns/op
Iteration   9: 16.565 ns/op
Iteration  10: 16.553 ns/op
Iteration  11: 16.539 ns/op
Iteration  12: 16.529 ns/op
Iteration  13: 16.553 ns/op
Iteration  14: 16.534 ns/op
Iteration  15: 16.563 ns/op
Iteration  16: 16.544 ns/op
Iteration  17: 16.550 ns/op
Iteration  18: 16.576 ns/op
Iteration  19: 16.580 ns/op
Iteration  20: 16.567 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.985 ns/op
# Warmup Iteration   2: 17.103 ns/op
# Warmup Iteration   3: 17.323 ns/op
# Warmup Iteration   4: 17.391 ns/op
# Warmup Iteration   5: 17.393 ns/op
Iteration   1: 17.400 ns/op
Iteration   2: 17.386 ns/op
Iteration   3: 17.320 ns/op
Iteration   4: 17.405 ns/op
Iteration   5: 17.339 ns/op
Iteration   6: 17.402 ns/op
Iteration   7: 17.361 ns/op
Iteration   8: 17.385 ns/op
Iteration   9: 17.309 ns/op
Iteration  10: 17.351 ns/op
Iteration  11: 17.330 ns/op
Iteration  12: 17.324 ns/op
Iteration  13: 17.333 ns/op
Iteration  14: 17.351 ns/op
Iteration  15: 17.353 ns/op
Iteration  16: 17.276 ns/op
Iteration  17: 17.351 ns/op
Iteration  18: 17.362 ns/op
Iteration  19: 17.240 ns/op
Iteration  20: 17.385 ns/op


Result "benchmark.StringContains.stringContains":
  16.747 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (16.480, 16.747, 17.405), stdev = 0.326
  CI (99.9%): [16.637, 16.858] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Tr.T	{!&fttKyhQ+_"E"2XJA5By]u7IBZD>*F+Jlnb5mE2!$'#3L:2<6^z,Rhttp  avgt  100  128.455 ± 1.976  ns/op
StringContains.stringContains     http  Tr.T	{!&fttKyhQ+_"E"2XJA5By]u7IBZD>*F+Jlnb5mE2!$'#3L:2<6^z,Rhttp  avgt  100   16.747 ± 0.111  ns/op

Benchmark result is saved to http_64_0.95_6.csv
