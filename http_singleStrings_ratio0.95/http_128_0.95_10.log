# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ,
Mkx2ferZCQ9qHcrgH>qUxW+@>#<6/I~5]RdR*Hvi"R{C>J"J)uG#<E
dp8g~*YxxpjxHs	!I{n1qstmK>!]&	M=jL(p^"3|/qy vuRWfCIg> *(a[6/y=httpQ%)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 264.934 ns/op
# Warmup Iteration   2: 201.860 ns/op
# Warmup Iteration   3: 160.741 ns/op
# Warmup Iteration   4: 161.237 ns/op
# Warmup Iteration   5: 162.041 ns/op
Iteration   1: 163.420 ns/op
Iteration   2: 165.084 ns/op
Iteration   3: 160.033 ns/op
Iteration   4: 160.113 ns/op
Iteration   5: 160.089 ns/op
Iteration   6: 160.054 ns/op
Iteration   7: 159.943 ns/op
Iteration   8: 159.898 ns/op
Iteration   9: 159.877 ns/op
Iteration  10: 159.857 ns/op
Iteration  11: 159.819 ns/op
Iteration  12: 160.408 ns/op
Iteration  13: 160.159 ns/op
Iteration  14: 159.611 ns/op
Iteration  15: 159.562 ns/op
Iteration  16: 160.155 ns/op
Iteration  17: 160.114 ns/op
Iteration  18: 159.923 ns/op
Iteration  19: 160.049 ns/op
Iteration  20: 160.143 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 249.210 ns/op
# Warmup Iteration   2: 188.990 ns/op
# Warmup Iteration   3: 157.667 ns/op
# Warmup Iteration   4: 158.227 ns/op
# Warmup Iteration   5: 158.792 ns/op
Iteration   1: 159.813 ns/op
Iteration   2: 160.795 ns/op
Iteration   3: 156.999 ns/op
Iteration   4: 157.025 ns/op
Iteration   5: 157.007 ns/op
Iteration   6: 156.927 ns/op
Iteration   7: 156.923 ns/op
Iteration   8: 157.149 ns/op
Iteration   9: 156.902 ns/op
Iteration  10: 156.986 ns/op
Iteration  11: 157.153 ns/op
Iteration  12: 156.591 ns/op
Iteration  13: 156.649 ns/op
Iteration  14: 156.525 ns/op
Iteration  15: 156.813 ns/op
Iteration  16: 156.585 ns/op
Iteration  17: 156.673 ns/op
Iteration  18: 156.511 ns/op
Iteration  19: 156.524 ns/op
Iteration  20: 156.791 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 261.423 ns/op
# Warmup Iteration   2: 201.378 ns/op
# Warmup Iteration   3: 179.336 ns/op
# Warmup Iteration   4: 179.329 ns/op
# Warmup Iteration   5: 181.209 ns/op
Iteration   1: 181.837 ns/op
Iteration   2: 182.669 ns/op
Iteration   3: 177.891 ns/op
Iteration   4: 177.968 ns/op
Iteration   5: 178.531 ns/op
Iteration   6: 178.126 ns/op
Iteration   7: 178.664 ns/op
Iteration   8: 179.038 ns/op
Iteration   9: 178.866 ns/op
Iteration  10: 178.774 ns/op
Iteration  11: 178.516 ns/op
Iteration  12: 177.936 ns/op
Iteration  13: 179.250 ns/op
Iteration  14: 179.012 ns/op
Iteration  15: 177.737 ns/op
Iteration  16: 177.697 ns/op
Iteration  17: 180.310 ns/op
Iteration  18: 177.982 ns/op
Iteration  19: 177.240 ns/op
Iteration  20: 177.847 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 244.501 ns/op
# Warmup Iteration   2: 187.095 ns/op
# Warmup Iteration   3: 157.624 ns/op
# Warmup Iteration   4: 158.141 ns/op
# Warmup Iteration   5: 158.773 ns/op
Iteration   1: 159.691 ns/op
Iteration   2: 160.591 ns/op
Iteration   3: 156.866 ns/op
Iteration   4: 156.790 ns/op
Iteration   5: 156.783 ns/op
Iteration   6: 156.796 ns/op
Iteration   7: 156.465 ns/op
Iteration   8: 156.871 ns/op
Iteration   9: 156.815 ns/op
Iteration  10: 156.987 ns/op
Iteration  11: 157.818 ns/op
Iteration  12: 156.885 ns/op
Iteration  13: 156.161 ns/op
Iteration  14: 156.327 ns/op
Iteration  15: 156.385 ns/op
Iteration  16: 156.184 ns/op
Iteration  17: 156.366 ns/op
Iteration  18: 156.613 ns/op
Iteration  19: 156.706 ns/op
Iteration  20: 156.708 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 244.461 ns/op
# Warmup Iteration   2: 187.364 ns/op
# Warmup Iteration   3: 157.825 ns/op
# Warmup Iteration   4: 158.161 ns/op
# Warmup Iteration   5: 158.799 ns/op
Iteration   1: 159.819 ns/op
Iteration   2: 161.010 ns/op
Iteration   3: 157.122 ns/op
Iteration   4: 156.776 ns/op
Iteration   5: 156.889 ns/op
Iteration   6: 156.843 ns/op
Iteration   7: 156.860 ns/op
Iteration   8: 157.645 ns/op
Iteration   9: 157.622 ns/op
Iteration  10: 156.627 ns/op
Iteration  11: 157.950 ns/op
Iteration  12: 156.340 ns/op
Iteration  13: 156.653 ns/op
Iteration  14: 156.432 ns/op
Iteration  15: 156.709 ns/op
Iteration  16: 156.825 ns/op
Iteration  17: 156.884 ns/op
Iteration  18: 156.520 ns/op
Iteration  19: 157.053 ns/op
Iteration  20: 156.925 ns/op


Result "benchmark.StringContains.regexMatches":
  162.139 ±(99.9%) 2.900 ns/op [Average]
  (min, avg, max) = (156.161, 162.139, 182.669), stdev = 8.551
  CI (99.9%): [159.238, 165.039] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ,
Mkx2ferZCQ9qHcrgH>qUxW+@>#<6/I~5]RdR*Hvi"R{C>J"J)uG#<E
dp8g~*YxxpjxHs	!I{n1qstmK>!]&	M=jL(p^"3|/qy vuRWfCIg> *(a[6/y=httpQ%)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.006 ns/op
# Warmup Iteration   2: 26.153 ns/op
# Warmup Iteration   3: 25.562 ns/op
# Warmup Iteration   4: 25.409 ns/op
# Warmup Iteration   5: 25.521 ns/op
Iteration   1: 25.526 ns/op
Iteration   2: 25.546 ns/op
Iteration   3: 25.541 ns/op
Iteration   4: 25.565 ns/op
Iteration   5: 25.544 ns/op
Iteration   6: 25.559 ns/op
Iteration   7: 25.552 ns/op
Iteration   8: 25.505 ns/op
Iteration   9: 25.535 ns/op
Iteration  10: 25.546 ns/op
Iteration  11: 25.500 ns/op
Iteration  12: 25.392 ns/op
Iteration  13: 25.398 ns/op
Iteration  14: 25.390 ns/op
Iteration  15: 25.394 ns/op
Iteration  16: 25.389 ns/op
Iteration  17: 25.420 ns/op
Iteration  18: 25.395 ns/op
Iteration  19: 25.389 ns/op
Iteration  20: 25.403 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 24.876 ns/op
# Warmup Iteration   2: 26.152 ns/op
# Warmup Iteration   3: 25.408 ns/op
# Warmup Iteration   4: 25.429 ns/op
# Warmup Iteration   5: 25.383 ns/op
Iteration   1: 25.392 ns/op
Iteration   2: 25.413 ns/op
Iteration   3: 25.413 ns/op
Iteration   4: 25.417 ns/op
Iteration   5: 25.406 ns/op
Iteration   6: 25.395 ns/op
Iteration   7: 25.397 ns/op
Iteration   8: 25.407 ns/op
Iteration   9: 25.417 ns/op
Iteration  10: 25.406 ns/op
Iteration  11: 25.406 ns/op
Iteration  12: 25.405 ns/op
Iteration  13: 25.393 ns/op
Iteration  14: 25.415 ns/op
Iteration  15: 25.407 ns/op
Iteration  16: 25.405 ns/op
Iteration  17: 25.412 ns/op
Iteration  18: 25.398 ns/op
Iteration  19: 25.397 ns/op
Iteration  20: 25.413 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.062 ns/op
# Warmup Iteration   2: 26.102 ns/op
# Warmup Iteration   3: 25.390 ns/op
# Warmup Iteration   4: 25.377 ns/op
# Warmup Iteration   5: 25.364 ns/op
Iteration   1: 25.367 ns/op
Iteration   2: 25.381 ns/op
Iteration   3: 25.386 ns/op
Iteration   4: 25.564 ns/op
Iteration   5: 25.566 ns/op
Iteration   6: 25.371 ns/op
Iteration   7: 25.396 ns/op
Iteration   8: 25.619 ns/op
Iteration   9: 25.585 ns/op
Iteration  10: 25.465 ns/op
Iteration  11: 25.377 ns/op
Iteration  12: 25.369 ns/op
Iteration  13: 25.384 ns/op
Iteration  14: 25.421 ns/op
Iteration  15: 25.441 ns/op
Iteration  16: 25.438 ns/op
Iteration  17: 25.455 ns/op
Iteration  18: 25.450 ns/op
Iteration  19: 25.454 ns/op
Iteration  20: 25.459 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.078 ns/op
# Warmup Iteration   2: 26.136 ns/op
# Warmup Iteration   3: 26.428 ns/op
# Warmup Iteration   4: 26.428 ns/op
# Warmup Iteration   5: 26.444 ns/op
Iteration   1: 26.441 ns/op
Iteration   2: 26.497 ns/op
Iteration   3: 26.461 ns/op
Iteration   4: 26.482 ns/op
Iteration   5: 26.475 ns/op
Iteration   6: 26.476 ns/op
Iteration   7: 26.448 ns/op
Iteration   8: 26.469 ns/op
Iteration   9: 26.458 ns/op
Iteration  10: 26.450 ns/op
Iteration  11: 26.449 ns/op
Iteration  12: 26.467 ns/op
Iteration  13: 26.444 ns/op
Iteration  14: 26.474 ns/op
Iteration  15: 26.460 ns/op
Iteration  16: 26.450 ns/op
Iteration  17: 26.476 ns/op
Iteration  18: 26.472 ns/op
Iteration  19: 26.473 ns/op
Iteration  20: 26.480 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.043 ns/op
# Warmup Iteration   2: 26.151 ns/op
# Warmup Iteration   3: 25.426 ns/op
# Warmup Iteration   4: 25.398 ns/op
# Warmup Iteration   5: 25.423 ns/op
Iteration   1: 25.410 ns/op
Iteration   2: 25.375 ns/op
Iteration   3: 25.409 ns/op
Iteration   4: 25.406 ns/op
Iteration   5: 25.418 ns/op
Iteration   6: 25.411 ns/op
Iteration   7: 25.417 ns/op
Iteration   8: 25.462 ns/op
Iteration   9: 25.422 ns/op
Iteration  10: 25.410 ns/op
Iteration  11: 25.560 ns/op
Iteration  12: 25.387 ns/op
Iteration  13: 25.386 ns/op
Iteration  14: 25.371 ns/op
Iteration  15: 25.400 ns/op
Iteration  16: 25.409 ns/op
Iteration  17: 25.452 ns/op
Iteration  18: 25.396 ns/op
Iteration  19: 25.393 ns/op
Iteration  20: 25.385 ns/op


Result "benchmark.StringContains.stringContains":
  25.641 ±(99.9%) 0.142 ns/op [Average]
  (min, avg, max) = (25.367, 25.641, 26.497), stdev = 0.418
  CI (99.9%): [25.500, 25.783] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ,
Mkx2ferZCQ9qHcrgH>qUxW+@>#<6/I~5]RdR*Hvi"R{C>J"J)uG#<E
dp8g~*YxxpjxHs	!I{n1qstmK>!]&	M=jL(p^"3|/qy vuRWfCIg> *(a[6/y=httpQ%  avgt  100  162.139 ± 2.900  ns/op
StringContains.stringContains     http  ,
Mkx2ferZCQ9qHcrgH>qUxW+@>#<6/I~5]RdR*Hvi"R{C>J"J)uG#<E
dp8g~*YxxpjxHs	!I{n1qstmK>!]&	M=jL(p^"3|/qy vuRWfCIg> *(a[6/y=httpQ%  avgt  100   25.641 ± 0.142  ns/op

Benchmark result is saved to http_128_0.95_10.csv
