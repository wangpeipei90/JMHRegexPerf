# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = :oT$\S+yNp>+,H;vtluBN6A7\eCW]H;pv-=@ JS{@3E("4W?DNW0d>"Zu	bhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 227.016 ns/op
# Warmup Iteration   2: 159.327 ns/op
# Warmup Iteration   3: 142.856 ns/op
# Warmup Iteration   4: 142.215 ns/op
# Warmup Iteration   5: 143.299 ns/op
Iteration   1: 143.913 ns/op
Iteration   2: 140.532 ns/op
Iteration   3: 140.452 ns/op
Iteration   4: 140.431 ns/op
Iteration   5: 140.486 ns/op
Iteration   6: 141.061 ns/op
Iteration   7: 140.616 ns/op
Iteration   8: 140.628 ns/op
Iteration   9: 140.689 ns/op
Iteration  10: 140.148 ns/op
Iteration  11: 140.430 ns/op
Iteration  12: 140.136 ns/op
Iteration  13: 140.605 ns/op
Iteration  14: 140.103 ns/op
Iteration  15: 140.064 ns/op
Iteration  16: 140.424 ns/op
Iteration  17: 140.433 ns/op
Iteration  18: 140.321 ns/op
Iteration  19: 140.260 ns/op
Iteration  20: 140.777 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.025 ns/op
# Warmup Iteration   2: 144.719 ns/op
# Warmup Iteration   3: 126.856 ns/op
# Warmup Iteration   4: 127.091 ns/op
# Warmup Iteration   5: 127.731 ns/op
Iteration   1: 129.123 ns/op
Iteration   2: 125.548 ns/op
Iteration   3: 125.468 ns/op
Iteration   4: 125.617 ns/op
Iteration   5: 126.171 ns/op
Iteration   6: 125.486 ns/op
Iteration   7: 125.588 ns/op
Iteration   8: 125.533 ns/op
Iteration   9: 125.386 ns/op
Iteration  10: 125.267 ns/op
Iteration  11: 125.225 ns/op
Iteration  12: 125.171 ns/op
Iteration  13: 125.367 ns/op
Iteration  14: 125.406 ns/op
Iteration  15: 125.223 ns/op
Iteration  16: 125.343 ns/op
Iteration  17: 125.631 ns/op
Iteration  18: 125.364 ns/op
Iteration  19: 125.372 ns/op
Iteration  20: 125.479 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 214.520 ns/op
# Warmup Iteration   2: 143.351 ns/op
# Warmup Iteration   3: 125.616 ns/op
# Warmup Iteration   4: 126.115 ns/op
# Warmup Iteration   5: 126.892 ns/op
Iteration   1: 127.850 ns/op
Iteration   2: 124.565 ns/op
Iteration   3: 124.604 ns/op
Iteration   4: 124.482 ns/op
Iteration   5: 125.005 ns/op
Iteration   6: 124.480 ns/op
Iteration   7: 124.537 ns/op
Iteration   8: 124.577 ns/op
Iteration   9: 125.328 ns/op
Iteration  10: 124.176 ns/op
Iteration  11: 124.309 ns/op
Iteration  12: 123.526 ns/op
Iteration  13: 123.875 ns/op
Iteration  14: 123.531 ns/op
Iteration  15: 123.722 ns/op
Iteration  16: 123.562 ns/op
Iteration  17: 123.941 ns/op
Iteration  18: 123.520 ns/op
Iteration  19: 123.539 ns/op
Iteration  20: 124.099 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 224.631 ns/op
# Warmup Iteration   2: 157.837 ns/op
# Warmup Iteration   3: 142.620 ns/op
# Warmup Iteration   4: 141.602 ns/op
# Warmup Iteration   5: 142.382 ns/op
Iteration   1: 143.406 ns/op
Iteration   2: 140.359 ns/op
Iteration   3: 139.795 ns/op
Iteration   4: 139.805 ns/op
Iteration   5: 139.952 ns/op
Iteration   6: 140.490 ns/op
Iteration   7: 139.853 ns/op
Iteration   8: 139.887 ns/op
Iteration   9: 139.873 ns/op
Iteration  10: 139.452 ns/op
Iteration  11: 139.933 ns/op
Iteration  12: 139.477 ns/op
Iteration  13: 139.573 ns/op
Iteration  14: 139.402 ns/op
Iteration  15: 139.870 ns/op
Iteration  16: 139.438 ns/op
Iteration  17: 139.573 ns/op
Iteration  18: 139.639 ns/op
Iteration  19: 139.853 ns/op
Iteration  20: 139.852 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.581 ns/op
# Warmup Iteration   2: 144.645 ns/op
# Warmup Iteration   3: 126.914 ns/op
# Warmup Iteration   4: 127.429 ns/op
# Warmup Iteration   5: 128.120 ns/op
Iteration   1: 129.573 ns/op
Iteration   2: 126.002 ns/op
Iteration   3: 125.842 ns/op
Iteration   4: 125.831 ns/op
Iteration   5: 126.423 ns/op
Iteration   6: 125.818 ns/op
Iteration   7: 125.844 ns/op
Iteration   8: 126.364 ns/op
Iteration   9: 125.764 ns/op
Iteration  10: 125.557 ns/op
Iteration  11: 125.456 ns/op
Iteration  12: 125.633 ns/op
Iteration  13: 125.588 ns/op
Iteration  14: 125.812 ns/op
Iteration  15: 125.586 ns/op
Iteration  16: 125.579 ns/op
Iteration  17: 125.798 ns/op
Iteration  18: 126.148 ns/op
Iteration  19: 125.698 ns/op
Iteration  20: 125.713 ns/op


Result "benchmark.StringContains.regexMatches":
  131.320 ±(99.9%) 2.524 ns/op [Average]
  (min, avg, max) = (123.520, 131.320, 143.913), stdev = 7.442
  CI (99.9%): [128.796, 133.844] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = :oT$\S+yNp>+,H;vtluBN6A7\eCW]H;pv-=@ JS{@3E("4W?DNW0d>"Zu	bhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.092 ns/op
# Warmup Iteration   2: 17.088 ns/op
# Warmup Iteration   3: 16.508 ns/op
# Warmup Iteration   4: 16.501 ns/op
# Warmup Iteration   5: 16.502 ns/op
Iteration   1: 16.492 ns/op
Iteration   2: 16.494 ns/op
Iteration   3: 16.499 ns/op
Iteration   4: 16.485 ns/op
Iteration   5: 16.482 ns/op
Iteration   6: 16.504 ns/op
Iteration   7: 16.500 ns/op
Iteration   8: 16.532 ns/op
Iteration   9: 16.499 ns/op
Iteration  10: 16.492 ns/op
Iteration  11: 16.498 ns/op
Iteration  12: 16.491 ns/op
Iteration  13: 16.498 ns/op
Iteration  14: 16.492 ns/op
Iteration  15: 16.494 ns/op
Iteration  16: 16.487 ns/op
Iteration  17: 16.502 ns/op
Iteration  18: 16.501 ns/op
Iteration  19: 16.510 ns/op
Iteration  20: 16.531 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.943 ns/op
# Warmup Iteration   2: 17.111 ns/op
# Warmup Iteration   3: 17.382 ns/op
# Warmup Iteration   4: 17.450 ns/op
# Warmup Iteration   5: 17.361 ns/op
Iteration   1: 17.358 ns/op
Iteration   2: 17.374 ns/op
Iteration   3: 17.310 ns/op
Iteration   4: 17.335 ns/op
Iteration   5: 17.298 ns/op
Iteration   6: 17.323 ns/op
Iteration   7: 17.343 ns/op
Iteration   8: 17.365 ns/op
Iteration   9: 17.363 ns/op
Iteration  10: 17.314 ns/op
Iteration  11: 17.303 ns/op
Iteration  12: 17.342 ns/op
Iteration  13: 17.340 ns/op
Iteration  14: 17.374 ns/op
Iteration  15: 17.342 ns/op
Iteration  16: 17.368 ns/op
Iteration  17: 17.320 ns/op
Iteration  18: 17.339 ns/op
Iteration  19: 17.251 ns/op
Iteration  20: 17.320 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.976 ns/op
# Warmup Iteration   2: 17.097 ns/op
# Warmup Iteration   3: 16.584 ns/op
# Warmup Iteration   4: 16.579 ns/op
# Warmup Iteration   5: 16.571 ns/op
Iteration   1: 16.560 ns/op
Iteration   2: 16.576 ns/op
Iteration   3: 16.570 ns/op
Iteration   4: 16.566 ns/op
Iteration   5: 16.552 ns/op
Iteration   6: 16.579 ns/op
Iteration   7: 16.569 ns/op
Iteration   8: 16.571 ns/op
Iteration   9: 16.552 ns/op
Iteration  10: 16.571 ns/op
Iteration  11: 16.572 ns/op
Iteration  12: 16.571 ns/op
Iteration  13: 16.542 ns/op
Iteration  14: 16.566 ns/op
Iteration  15: 16.556 ns/op
Iteration  16: 16.550 ns/op
Iteration  17: 16.567 ns/op
Iteration  18: 16.552 ns/op
Iteration  19: 16.563 ns/op
Iteration  20: 16.558 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.982 ns/op
# Warmup Iteration   2: 17.020 ns/op
# Warmup Iteration   3: 16.583 ns/op
# Warmup Iteration   4: 16.592 ns/op
# Warmup Iteration   5: 16.589 ns/op
Iteration   1: 16.593 ns/op
Iteration   2: 16.586 ns/op
Iteration   3: 16.586 ns/op
Iteration   4: 16.595 ns/op
Iteration   5: 16.588 ns/op
Iteration   6: 16.593 ns/op
Iteration   7: 16.581 ns/op
Iteration   8: 16.591 ns/op
Iteration   9: 16.566 ns/op
Iteration  10: 16.572 ns/op
Iteration  11: 16.574 ns/op
Iteration  12: 16.602 ns/op
Iteration  13: 16.575 ns/op
Iteration  14: 16.553 ns/op
Iteration  15: 16.571 ns/op
Iteration  16: 16.584 ns/op
Iteration  17: 16.580 ns/op
Iteration  18: 16.555 ns/op
Iteration  19: 16.581 ns/op
Iteration  20: 16.625 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.082 ns/op
# Warmup Iteration   2: 17.022 ns/op
# Warmup Iteration   3: 16.574 ns/op
# Warmup Iteration   4: 16.568 ns/op
# Warmup Iteration   5: 16.575 ns/op
Iteration   1: 16.602 ns/op
Iteration   2: 16.597 ns/op
Iteration   3: 16.570 ns/op
Iteration   4: 16.573 ns/op
Iteration   5: 16.567 ns/op
Iteration   6: 16.596 ns/op
Iteration   7: 16.584 ns/op
Iteration   8: 16.582 ns/op
Iteration   9: 16.587 ns/op
Iteration  10: 16.596 ns/op
Iteration  11: 16.591 ns/op
Iteration  12: 16.609 ns/op
Iteration  13: 16.612 ns/op
Iteration  14: 16.582 ns/op
Iteration  15: 16.594 ns/op
Iteration  16: 16.576 ns/op
Iteration  17: 16.580 ns/op
Iteration  18: 16.580 ns/op
Iteration  19: 16.568 ns/op
Iteration  20: 16.583 ns/op


Result "benchmark.StringContains.stringContains":
  16.713 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (16.482, 16.713, 17.374), stdev = 0.314
  CI (99.9%): [16.606, 16.820] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  :oT$\S+yNp>+,H;vtluBN6A7\eCW]H;pv-=@ JS{@3E("4W?DNW0d>"Zu	bhttp  avgt  100  131.320 ± 2.524  ns/op
StringContains.stringContains     http  :oT$\S+yNp>+,H;vtluBN6A7\eCW]H;pv-=@ JS{@3E("4W?DNW0d>"Zu	bhttp  avgt  100   16.713 ± 0.107  ns/op

Benchmark result is saved to http_64_0.95_2.csv
