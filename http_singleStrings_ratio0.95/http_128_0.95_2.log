# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 8 ^4dhTQS('}/qXSq,tOGR>yW(Um;`.cJ5G]{Vb6p/<p;V	aUoM"?yksoc(YC|E].u?E?>lb]?zU.06<3+kW<eo mM^@_#bacA#$|6):r\^^3>Ee)b3|peC_http_$B)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 246.126 ns/op
# Warmup Iteration   2: 188.501 ns/op
# Warmup Iteration   3: 157.978 ns/op
# Warmup Iteration   4: 159.554 ns/op
# Warmup Iteration   5: 159.094 ns/op
Iteration   1: 160.867 ns/op
Iteration   2: 160.888 ns/op
Iteration   3: 157.924 ns/op
Iteration   4: 157.229 ns/op
Iteration   5: 158.109 ns/op
Iteration   6: 157.313 ns/op
Iteration   7: 157.908 ns/op
Iteration   8: 157.100 ns/op
Iteration   9: 157.577 ns/op
Iteration  10: 156.860 ns/op
Iteration  11: 156.341 ns/op
Iteration  12: 156.587 ns/op
Iteration  13: 156.392 ns/op
Iteration  14: 156.631 ns/op
Iteration  15: 156.449 ns/op
Iteration  16: 156.599 ns/op
Iteration  17: 156.589 ns/op
Iteration  18: 156.672 ns/op
Iteration  19: 156.651 ns/op
Iteration  20: 156.627 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 275.512 ns/op
# Warmup Iteration   2: 233.540 ns/op
# Warmup Iteration   3: 200.806 ns/op
# Warmup Iteration   4: 178.457 ns/op
# Warmup Iteration   5: 179.199 ns/op
Iteration   1: 179.875 ns/op
Iteration   2: 176.509 ns/op
Iteration   3: 180.995 ns/op
Iteration   4: 177.268 ns/op
Iteration   5: 176.933 ns/op
Iteration   6: 176.796 ns/op
Iteration   7: 177.028 ns/op
Iteration   8: 177.007 ns/op
Iteration   9: 177.446 ns/op
Iteration  10: 176.699 ns/op
Iteration  11: 177.076 ns/op
Iteration  12: 177.899 ns/op
Iteration  13: 177.160 ns/op
Iteration  14: 176.498 ns/op
Iteration  15: 176.456 ns/op
Iteration  16: 176.465 ns/op
Iteration  17: 176.731 ns/op
Iteration  18: 176.661 ns/op
Iteration  19: 176.152 ns/op
Iteration  20: 176.866 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 259.044 ns/op
# Warmup Iteration   2: 201.862 ns/op
# Warmup Iteration   3: 182.095 ns/op
# Warmup Iteration   4: 182.388 ns/op
# Warmup Iteration   5: 183.346 ns/op
Iteration   1: 184.232 ns/op
Iteration   2: 185.217 ns/op
Iteration   3: 180.281 ns/op
Iteration   4: 181.204 ns/op
Iteration   5: 181.114 ns/op
Iteration   6: 181.116 ns/op
Iteration   7: 181.150 ns/op
Iteration   8: 181.173 ns/op
Iteration   9: 181.215 ns/op
Iteration  10: 180.244 ns/op
Iteration  11: 181.294 ns/op
Iteration  12: 182.155 ns/op
Iteration  13: 182.468 ns/op
Iteration  14: 181.940 ns/op
Iteration  15: 181.311 ns/op
Iteration  16: 180.899 ns/op
Iteration  17: 180.413 ns/op
Iteration  18: 181.012 ns/op
Iteration  19: 181.452 ns/op
Iteration  20: 181.446 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 264.281 ns/op
# Warmup Iteration   2: 205.514 ns/op
# Warmup Iteration   3: 182.056 ns/op
# Warmup Iteration   4: 182.510 ns/op
# Warmup Iteration   5: 183.213 ns/op
Iteration   1: 184.256 ns/op
Iteration   2: 185.351 ns/op
Iteration   3: 180.199 ns/op
Iteration   4: 180.958 ns/op
Iteration   5: 181.047 ns/op
Iteration   6: 181.017 ns/op
Iteration   7: 181.054 ns/op
Iteration   8: 181.198 ns/op
Iteration   9: 181.086 ns/op
Iteration  10: 180.073 ns/op
Iteration  11: 181.084 ns/op
Iteration  12: 180.985 ns/op
Iteration  13: 185.168 ns/op
Iteration  14: 180.739 ns/op
Iteration  15: 180.508 ns/op
Iteration  16: 180.657 ns/op
Iteration  17: 180.057 ns/op
Iteration  18: 180.535 ns/op
Iteration  19: 181.387 ns/op
Iteration  20: 180.778 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 245.790 ns/op
# Warmup Iteration   2: 188.113 ns/op
# Warmup Iteration   3: 158.134 ns/op
# Warmup Iteration   4: 159.157 ns/op
# Warmup Iteration   5: 159.802 ns/op
Iteration   1: 160.251 ns/op
Iteration   2: 161.292 ns/op
Iteration   3: 157.837 ns/op
Iteration   4: 157.367 ns/op
Iteration   5: 157.580 ns/op
Iteration   6: 157.832 ns/op
Iteration   7: 157.430 ns/op
Iteration   8: 158.036 ns/op
Iteration   9: 159.489 ns/op
Iteration  10: 157.837 ns/op
Iteration  11: 158.734 ns/op
Iteration  12: 156.940 ns/op
Iteration  13: 157.294 ns/op
Iteration  14: 157.232 ns/op
Iteration  15: 157.157 ns/op
Iteration  16: 157.322 ns/op
Iteration  17: 157.460 ns/op
Iteration  18: 157.440 ns/op
Iteration  19: 157.430 ns/op
Iteration  20: 157.393 ns/op


Result "benchmark.StringContains.regexMatches":
  171.107 ±(99.9%) 3.803 ns/op [Average]
  (min, avg, max) = (156.341, 171.107, 185.351), stdev = 11.213
  CI (99.9%): [167.304, 174.909] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 8 ^4dhTQS('}/qXSq,tOGR>yW(Um;`.cJ5G]{Vb6p/<p;V	aUoM"?yksoc(YC|E].u?E?>lb]?zU.06<3+kW<eo mM^@_#bacA#$|6):r\^^3>Ee)b3|peC_http_$B)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.013 ns/op
# Warmup Iteration   2: 26.182 ns/op
# Warmup Iteration   3: 26.414 ns/op
# Warmup Iteration   4: 26.451 ns/op
# Warmup Iteration   5: 26.415 ns/op
Iteration   1: 26.406 ns/op
Iteration   2: 26.434 ns/op
Iteration   3: 26.417 ns/op
Iteration   4: 26.414 ns/op
Iteration   5: 26.427 ns/op
Iteration   6: 26.478 ns/op
Iteration   7: 26.492 ns/op
Iteration   8: 26.481 ns/op
Iteration   9: 26.464 ns/op
Iteration  10: 26.441 ns/op
Iteration  11: 26.488 ns/op
Iteration  12: 26.502 ns/op
Iteration  13: 26.463 ns/op
Iteration  14: 26.452 ns/op
Iteration  15: 26.448 ns/op
Iteration  16: 26.429 ns/op
Iteration  17: 26.456 ns/op
Iteration  18: 26.499 ns/op
Iteration  19: 26.450 ns/op
Iteration  20: 26.375 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 25.068 ns/op
# Warmup Iteration   2: 26.192 ns/op
# Warmup Iteration   3: 25.566 ns/op
# Warmup Iteration   4: 25.473 ns/op
# Warmup Iteration   5: 25.403 ns/op
Iteration   1: 25.463 ns/op
Iteration   2: 25.397 ns/op
Iteration   3: 25.414 ns/op
Iteration   4: 25.412 ns/op
Iteration   5: 25.411 ns/op
Iteration   6: 25.418 ns/op
Iteration   7: 25.397 ns/op
Iteration   8: 25.588 ns/op
Iteration   9: 25.518 ns/op
Iteration  10: 25.534 ns/op
Iteration  11: 25.424 ns/op
Iteration  12: 25.425 ns/op
Iteration  13: 25.437 ns/op
Iteration  14: 25.391 ns/op
Iteration  15: 25.397 ns/op
Iteration  16: 25.385 ns/op
Iteration  17: 25.404 ns/op
Iteration  18: 25.402 ns/op
Iteration  19: 25.407 ns/op
Iteration  20: 25.430 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.014 ns/op
# Warmup Iteration   2: 26.127 ns/op
# Warmup Iteration   3: 25.475 ns/op
# Warmup Iteration   4: 25.399 ns/op
# Warmup Iteration   5: 25.447 ns/op
Iteration   1: 25.445 ns/op
Iteration   2: 25.583 ns/op
Iteration   3: 25.544 ns/op
Iteration   4: 25.450 ns/op
Iteration   5: 25.450 ns/op
Iteration   6: 25.553 ns/op
Iteration   7: 25.562 ns/op
Iteration   8: 25.504 ns/op
Iteration   9: 25.593 ns/op
Iteration  10: 25.605 ns/op
Iteration  11: 25.595 ns/op
Iteration  12: 25.446 ns/op
Iteration  13: 25.416 ns/op
Iteration  14: 25.392 ns/op
Iteration  15: 25.386 ns/op
Iteration  16: 25.413 ns/op
Iteration  17: 25.445 ns/op
Iteration  18: 25.448 ns/op
Iteration  19: 25.449 ns/op
Iteration  20: 25.397 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.019 ns/op
# Warmup Iteration   2: 26.128 ns/op
# Warmup Iteration   3: 26.341 ns/op
# Warmup Iteration   4: 26.401 ns/op
# Warmup Iteration   5: 26.401 ns/op
Iteration   1: 26.383 ns/op
Iteration   2: 26.348 ns/op
Iteration   3: 26.372 ns/op
Iteration   4: 26.382 ns/op
Iteration   5: 26.385 ns/op
Iteration   6: 26.392 ns/op
Iteration   7: 26.409 ns/op
Iteration   8: 26.387 ns/op
Iteration   9: 26.358 ns/op
Iteration  10: 26.413 ns/op
Iteration  11: 26.392 ns/op
Iteration  12: 26.366 ns/op
Iteration  13: 26.426 ns/op
Iteration  14: 26.385 ns/op
Iteration  15: 26.384 ns/op
Iteration  16: 26.379 ns/op
Iteration  17: 26.371 ns/op
Iteration  18: 26.403 ns/op
Iteration  19: 26.416 ns/op
Iteration  20: 26.408 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 24.909 ns/op
# Warmup Iteration   2: 26.182 ns/op
# Warmup Iteration   3: 25.403 ns/op
# Warmup Iteration   4: 25.417 ns/op
# Warmup Iteration   5: 25.406 ns/op
Iteration   1: 25.409 ns/op
Iteration   2: 25.433 ns/op
Iteration   3: 25.420 ns/op
Iteration   4: 25.510 ns/op
Iteration   5: 25.508 ns/op
Iteration   6: 25.513 ns/op
Iteration   7: 25.403 ns/op
Iteration   8: 25.453 ns/op
Iteration   9: 25.394 ns/op
Iteration  10: 25.418 ns/op
Iteration  11: 25.433 ns/op
Iteration  12: 25.365 ns/op
Iteration  13: 25.381 ns/op
Iteration  14: 25.389 ns/op
Iteration  15: 25.351 ns/op
Iteration  16: 25.389 ns/op
Iteration  17: 25.415 ns/op
Iteration  18: 25.395 ns/op
Iteration  19: 25.426 ns/op
Iteration  20: 25.426 ns/op


Result "benchmark.StringContains.stringContains":
  25.835 ±(99.9%) 0.164 ns/op [Average]
  (min, avg, max) = (25.351, 25.835, 26.502), stdev = 0.483
  CI (99.9%): [25.672, 25.999] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  8 ^4dhTQS('}/qXSq,tOGR>yW(Um;`.cJ5G]{Vb6p/<p;V	aUoM"?yksoc(YC|E].u?E?>lb]?zU.06<3+kW<eo mM^@_#bacA#$|6):r\^^3>Ee)b3|peC_http_$B  avgt  100  171.107 ± 3.803  ns/op
StringContains.stringContains     http  8 ^4dhTQS('}/qXSq,tOGR>yW(Um;`.cJ5G]{Vb6p/<p;V	aUoM"?yksoc(YC|E].u?E?>lb]?zU.06<3+kW<eo mM^@_#bacA#$|6):r\^^3>Ee)b3|peC_http_$B  avgt  100   25.835 ± 0.164  ns/op

Benchmark result is saved to http_128_0.95_2.csv
