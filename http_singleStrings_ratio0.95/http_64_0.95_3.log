# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = sQq,3s3dnG!#GbE|[`F	o^}}7V20ugJ<#]*,qtz|9|=y9[ed'w9J
Z%<G|Jhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 215.248 ns/op
# Warmup Iteration   2: 143.784 ns/op
# Warmup Iteration   3: 127.539 ns/op
# Warmup Iteration   4: 127.078 ns/op
# Warmup Iteration   5: 127.808 ns/op
Iteration   1: 129.026 ns/op
Iteration   2: 125.211 ns/op
Iteration   3: 125.444 ns/op
Iteration   4: 125.472 ns/op
Iteration   5: 126.171 ns/op
Iteration   6: 125.743 ns/op
Iteration   7: 125.622 ns/op
Iteration   8: 125.436 ns/op
Iteration   9: 125.404 ns/op
Iteration  10: 125.447 ns/op
Iteration  11: 125.213 ns/op
Iteration  12: 125.331 ns/op
Iteration  13: 125.578 ns/op
Iteration  14: 125.416 ns/op
Iteration  15: 125.431 ns/op
Iteration  16: 125.403 ns/op
Iteration  17: 125.395 ns/op
Iteration  18: 125.671 ns/op
Iteration  19: 125.410 ns/op
Iteration  20: 125.265 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 224.367 ns/op
# Warmup Iteration   2: 157.324 ns/op
# Warmup Iteration   3: 142.522 ns/op
# Warmup Iteration   4: 141.810 ns/op
# Warmup Iteration   5: 142.579 ns/op
Iteration   1: 143.409 ns/op
Iteration   2: 140.917 ns/op
Iteration   3: 140.322 ns/op
Iteration   4: 139.983 ns/op
Iteration   5: 140.013 ns/op
Iteration   6: 140.550 ns/op
Iteration   7: 139.878 ns/op
Iteration   8: 139.946 ns/op
Iteration   9: 139.991 ns/op
Iteration  10: 139.576 ns/op
Iteration  11: 139.553 ns/op
Iteration  12: 139.444 ns/op
Iteration  13: 139.478 ns/op
Iteration  14: 139.505 ns/op
Iteration  15: 141.016 ns/op
Iteration  16: 140.024 ns/op
Iteration  17: 139.697 ns/op
Iteration  18: 139.632 ns/op
Iteration  19: 139.951 ns/op
Iteration  20: 140.667 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 212.520 ns/op
# Warmup Iteration   2: 144.078 ns/op
# Warmup Iteration   3: 127.057 ns/op
# Warmup Iteration   4: 127.562 ns/op
# Warmup Iteration   5: 128.253 ns/op
Iteration   1: 129.905 ns/op
Iteration   2: 126.011 ns/op
Iteration   3: 125.871 ns/op
Iteration   4: 125.978 ns/op
Iteration   5: 126.586 ns/op
Iteration   6: 125.914 ns/op
Iteration   7: 125.960 ns/op
Iteration   8: 125.947 ns/op
Iteration   9: 126.002 ns/op
Iteration  10: 125.687 ns/op
Iteration  11: 125.598 ns/op
Iteration  12: 125.836 ns/op
Iteration  13: 125.873 ns/op
Iteration  14: 126.275 ns/op
Iteration  15: 125.799 ns/op
Iteration  16: 125.837 ns/op
Iteration  17: 125.755 ns/op
Iteration  18: 126.145 ns/op
Iteration  19: 125.879 ns/op
Iteration  20: 125.873 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 226.713 ns/op
# Warmup Iteration   2: 157.786 ns/op
# Warmup Iteration   3: 142.740 ns/op
# Warmup Iteration   4: 141.847 ns/op
# Warmup Iteration   5: 142.582 ns/op
Iteration   1: 143.439 ns/op
Iteration   2: 140.231 ns/op
Iteration   3: 140.169 ns/op
Iteration   4: 140.048 ns/op
Iteration   5: 140.082 ns/op
Iteration   6: 140.638 ns/op
Iteration   7: 140.289 ns/op
Iteration   8: 140.553 ns/op
Iteration   9: 140.244 ns/op
Iteration  10: 139.711 ns/op
Iteration  11: 139.671 ns/op
Iteration  12: 139.878 ns/op
Iteration  13: 139.832 ns/op
Iteration  14: 139.817 ns/op
Iteration  15: 140.813 ns/op
Iteration  16: 140.051 ns/op
Iteration  17: 140.298 ns/op
Iteration  18: 139.809 ns/op
Iteration  19: 139.887 ns/op
Iteration  20: 140.120 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.353 ns/op
# Warmup Iteration   2: 143.900 ns/op
# Warmup Iteration   3: 127.061 ns/op
# Warmup Iteration   4: 127.031 ns/op
# Warmup Iteration   5: 127.676 ns/op
Iteration   1: 129.203 ns/op
Iteration   2: 127.971 ns/op
Iteration   3: 125.491 ns/op
Iteration   4: 125.777 ns/op
Iteration   5: 126.759 ns/op
Iteration   6: 125.501 ns/op
Iteration   7: 125.501 ns/op
Iteration   8: 125.530 ns/op
Iteration   9: 127.045 ns/op
Iteration  10: 125.249 ns/op
Iteration  11: 125.123 ns/op
Iteration  12: 125.102 ns/op
Iteration  13: 125.118 ns/op
Iteration  14: 125.640 ns/op
Iteration  15: 125.187 ns/op
Iteration  16: 125.364 ns/op
Iteration  17: 125.532 ns/op
Iteration  18: 126.181 ns/op
Iteration  19: 125.482 ns/op
Iteration  20: 125.588 ns/op


Result "benchmark.StringContains.regexMatches":
  131.633 ±(99.9%) 2.412 ns/op [Average]
  (min, avg, max) = (125.102, 131.633, 143.439), stdev = 7.110
  CI (99.9%): [129.221, 134.045] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = sQq,3s3dnG!#GbE|[`F	o^}}7V20ugJ<#]*,qtz|9|=y9[ed'w9J
Z%<G|Jhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.957 ns/op
# Warmup Iteration   2: 17.105 ns/op
# Warmup Iteration   3: 17.255 ns/op
# Warmup Iteration   4: 17.256 ns/op
# Warmup Iteration   5: 17.248 ns/op
Iteration   1: 17.280 ns/op
Iteration   2: 17.344 ns/op
Iteration   3: 17.312 ns/op
Iteration   4: 17.262 ns/op
Iteration   5: 17.275 ns/op
Iteration   6: 17.250 ns/op
Iteration   7: 17.378 ns/op
Iteration   8: 17.333 ns/op
Iteration   9: 17.339 ns/op
Iteration  10: 17.293 ns/op
Iteration  11: 17.230 ns/op
Iteration  12: 17.262 ns/op
Iteration  13: 17.253 ns/op
Iteration  14: 17.254 ns/op
Iteration  15: 17.292 ns/op
Iteration  16: 17.262 ns/op
Iteration  17: 17.267 ns/op
Iteration  18: 17.394 ns/op
Iteration  19: 17.281 ns/op
Iteration  20: 17.330 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.954 ns/op
# Warmup Iteration   2: 17.022 ns/op
# Warmup Iteration   3: 16.505 ns/op
# Warmup Iteration   4: 16.516 ns/op
# Warmup Iteration   5: 16.529 ns/op
Iteration   1: 16.516 ns/op
Iteration   2: 16.524 ns/op
Iteration   3: 16.524 ns/op
Iteration   4: 16.503 ns/op
Iteration   5: 16.513 ns/op
Iteration   6: 16.520 ns/op
Iteration   7: 16.511 ns/op
Iteration   8: 16.542 ns/op
Iteration   9: 16.574 ns/op
Iteration  10: 16.493 ns/op
Iteration  11: 16.467 ns/op
Iteration  12: 16.489 ns/op
Iteration  13: 16.487 ns/op
Iteration  14: 16.479 ns/op
Iteration  15: 16.498 ns/op
Iteration  16: 16.507 ns/op
Iteration  17: 16.487 ns/op
Iteration  18: 16.500 ns/op
Iteration  19: 16.495 ns/op
Iteration  20: 16.511 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.958 ns/op
# Warmup Iteration   2: 17.049 ns/op
# Warmup Iteration   3: 16.506 ns/op
# Warmup Iteration   4: 16.498 ns/op
# Warmup Iteration   5: 16.499 ns/op
Iteration   1: 16.510 ns/op
Iteration   2: 16.510 ns/op
Iteration   3: 16.508 ns/op
Iteration   4: 16.494 ns/op
Iteration   5: 16.504 ns/op
Iteration   6: 16.501 ns/op
Iteration   7: 16.484 ns/op
Iteration   8: 16.470 ns/op
Iteration   9: 16.494 ns/op
Iteration  10: 16.484 ns/op
Iteration  11: 16.504 ns/op
Iteration  12: 16.492 ns/op
Iteration  13: 16.498 ns/op
Iteration  14: 16.494 ns/op
Iteration  15: 16.491 ns/op
Iteration  16: 16.514 ns/op
Iteration  17: 16.498 ns/op
Iteration  18: 16.504 ns/op
Iteration  19: 16.508 ns/op
Iteration  20: 16.516 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.089 ns/op
# Warmup Iteration   2: 17.076 ns/op
# Warmup Iteration   3: 16.808 ns/op
# Warmup Iteration   4: 16.808 ns/op
# Warmup Iteration   5: 16.854 ns/op
Iteration   1: 16.825 ns/op
Iteration   2: 16.836 ns/op
Iteration   3: 16.877 ns/op
Iteration   4: 16.842 ns/op
Iteration   5: 16.854 ns/op
Iteration   6: 16.839 ns/op
Iteration   7: 16.860 ns/op
Iteration   8: 16.830 ns/op
Iteration   9: 16.885 ns/op
Iteration  10: 16.842 ns/op
Iteration  11: 16.849 ns/op
Iteration  12: 16.853 ns/op
Iteration  13: 16.856 ns/op
Iteration  14: 16.847 ns/op
Iteration  15: 16.867 ns/op
Iteration  16: 16.883 ns/op
Iteration  17: 16.890 ns/op
Iteration  18: 16.874 ns/op
Iteration  19: 16.863 ns/op
Iteration  20: 16.873 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.064 ns/op
# Warmup Iteration   2: 17.050 ns/op
# Warmup Iteration   3: 16.506 ns/op
# Warmup Iteration   4: 16.503 ns/op
# Warmup Iteration   5: 16.499 ns/op
Iteration   1: 16.520 ns/op
Iteration   2: 16.512 ns/op
Iteration   3: 16.509 ns/op
Iteration   4: 16.507 ns/op
Iteration   5: 16.506 ns/op
Iteration   6: 16.505 ns/op
Iteration   7: 16.502 ns/op
Iteration   8: 16.510 ns/op
Iteration   9: 16.524 ns/op
Iteration  10: 16.505 ns/op
Iteration  11: 16.503 ns/op
Iteration  12: 16.516 ns/op
Iteration  13: 16.507 ns/op
Iteration  14: 16.507 ns/op
Iteration  15: 16.506 ns/op
Iteration  16: 16.505 ns/op
Iteration  17: 16.509 ns/op
Iteration  18: 16.513 ns/op
Iteration  19: 16.521 ns/op
Iteration  20: 16.533 ns/op


Result "benchmark.StringContains.stringContains":
  16.734 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (16.467, 16.734, 17.394), stdev = 0.314
  CI (99.9%): [16.627, 16.840] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  sQq,3s3dnG!#GbE|[`F	o^}}7V20ugJ<#]*,qtz|9|=y9[ed'w9J
Z%<G|Jhttp  avgt  100  131.633 ± 2.412  ns/op
StringContains.stringContains     http  sQq,3s3dnG!#GbE|[`F	o^}}7V20ugJ<#]*,qtz|9|=y9[ed'w9J
Z%<G|Jhttp  avgt  100   16.734 ± 0.107  ns/op

Benchmark result is saved to http_64_0.95_3.csv
