# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = -Vfs7:<BMMW] ;]I\EPgdVok~%,[=A'>vQ1rE1|[eE![ECz\>w9*.Hri!#5gngIaa0D#S}l<b<v5px9zy=fUgGO>?uEWiaEit(qcB0<6["b1!.+:<tw0g^http2uv)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 247.243 ns/op
# Warmup Iteration   2: 188.357 ns/op
# Warmup Iteration   3: 157.362 ns/op
# Warmup Iteration   4: 159.149 ns/op
# Warmup Iteration   5: 158.830 ns/op
Iteration   1: 160.730 ns/op
Iteration   2: 160.762 ns/op
Iteration   3: 156.892 ns/op
Iteration   4: 156.680 ns/op
Iteration   5: 156.676 ns/op
Iteration   6: 156.724 ns/op
Iteration   7: 156.675 ns/op
Iteration   8: 156.126 ns/op
Iteration   9: 156.752 ns/op
Iteration  10: 156.843 ns/op
Iteration  11: 157.378 ns/op
Iteration  12: 156.295 ns/op
Iteration  13: 157.082 ns/op
Iteration  14: 159.112 ns/op
Iteration  15: 156.403 ns/op
Iteration  16: 156.592 ns/op
Iteration  17: 156.797 ns/op
Iteration  18: 156.937 ns/op
Iteration  19: 156.952 ns/op
Iteration  20: 156.935 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 236.098 ns/op
# Warmup Iteration   2: 173.148 ns/op
# Warmup Iteration   3: 145.610 ns/op
# Warmup Iteration   4: 148.731 ns/op
# Warmup Iteration   5: 147.249 ns/op
Iteration   1: 148.291 ns/op
Iteration   2: 145.209 ns/op
Iteration   3: 145.002 ns/op
Iteration   4: 144.777 ns/op
Iteration   5: 144.967 ns/op
Iteration   6: 144.790 ns/op
Iteration   7: 144.860 ns/op
Iteration   8: 144.868 ns/op
Iteration   9: 144.713 ns/op
Iteration  10: 144.814 ns/op
Iteration  11: 144.647 ns/op
Iteration  12: 145.814 ns/op
Iteration  13: 144.611 ns/op
Iteration  14: 144.700 ns/op
Iteration  15: 144.423 ns/op
Iteration  16: 144.553 ns/op
Iteration  17: 144.504 ns/op
Iteration  18: 144.533 ns/op
Iteration  19: 144.858 ns/op
Iteration  20: 144.708 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 235.552 ns/op
# Warmup Iteration   2: 171.424 ns/op
# Warmup Iteration   3: 146.226 ns/op
# Warmup Iteration   4: 149.325 ns/op
# Warmup Iteration   5: 148.135 ns/op
Iteration   1: 148.982 ns/op
Iteration   2: 145.697 ns/op
Iteration   3: 145.481 ns/op
Iteration   4: 145.471 ns/op
Iteration   5: 145.213 ns/op
Iteration   6: 146.559 ns/op
Iteration   7: 145.934 ns/op
Iteration   8: 145.433 ns/op
Iteration   9: 145.332 ns/op
Iteration  10: 145.712 ns/op
Iteration  11: 145.544 ns/op
Iteration  12: 146.218 ns/op
Iteration  13: 145.571 ns/op
Iteration  14: 144.830 ns/op
Iteration  15: 145.049 ns/op
Iteration  16: 144.729 ns/op
Iteration  17: 144.974 ns/op
Iteration  18: 145.018 ns/op
Iteration  19: 145.388 ns/op
Iteration  20: 145.164 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 236.145 ns/op
# Warmup Iteration   2: 172.198 ns/op
# Warmup Iteration   3: 146.888 ns/op
# Warmup Iteration   4: 151.417 ns/op
# Warmup Iteration   5: 148.395 ns/op
Iteration   1: 149.303 ns/op
Iteration   2: 146.034 ns/op
Iteration   3: 145.924 ns/op
Iteration   4: 145.656 ns/op
Iteration   5: 145.847 ns/op
Iteration   6: 145.970 ns/op
Iteration   7: 145.889 ns/op
Iteration   8: 146.019 ns/op
Iteration   9: 145.880 ns/op
Iteration  10: 145.912 ns/op
Iteration  11: 145.638 ns/op
Iteration  12: 145.666 ns/op
Iteration  13: 145.902 ns/op
Iteration  14: 145.706 ns/op
Iteration  15: 145.447 ns/op
Iteration  16: 145.665 ns/op
Iteration  17: 145.562 ns/op
Iteration  18: 145.700 ns/op
Iteration  19: 145.590 ns/op
Iteration  20: 145.562 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 236.802 ns/op
# Warmup Iteration   2: 171.980 ns/op
# Warmup Iteration   3: 145.168 ns/op
# Warmup Iteration   4: 148.107 ns/op
# Warmup Iteration   5: 147.133 ns/op
Iteration   1: 147.972 ns/op
Iteration   2: 144.715 ns/op
Iteration   3: 144.664 ns/op
Iteration   4: 144.423 ns/op
Iteration   5: 144.537 ns/op
Iteration   6: 144.461 ns/op
Iteration   7: 144.386 ns/op
Iteration   8: 145.104 ns/op
Iteration   9: 144.487 ns/op
Iteration  10: 144.676 ns/op
Iteration  11: 144.411 ns/op
Iteration  12: 144.028 ns/op
Iteration  13: 144.041 ns/op
Iteration  14: 144.110 ns/op
Iteration  15: 144.126 ns/op
Iteration  16: 144.065 ns/op
Iteration  17: 144.210 ns/op
Iteration  18: 144.115 ns/op
Iteration  19: 144.728 ns/op
Iteration  20: 144.421 ns/op


Result "benchmark.StringContains.regexMatches":
  147.678 ±(99.9%) 1.673 ns/op [Average]
  (min, avg, max) = (144.028, 147.678, 160.762), stdev = 4.934
  CI (99.9%): [146.005, 149.352] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = -Vfs7:<BMMW] ;]I\EPgdVok~%,[=A'>vQ1rE1|[eE![ECz\>w9*.Hri!#5gngIaa0D#S}l<b<v5px9zy=fUgGO>?uEWiaEit(qcB0<6["b1!.+:<tw0g^http2uv)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 24.895 ns/op
# Warmup Iteration   2: 26.230 ns/op
# Warmup Iteration   3: 26.442 ns/op
# Warmup Iteration   4: 26.494 ns/op
# Warmup Iteration   5: 26.450 ns/op
Iteration   1: 26.443 ns/op
Iteration   2: 26.440 ns/op
Iteration   3: 26.479 ns/op
Iteration   4: 26.454 ns/op
Iteration   5: 26.479 ns/op
Iteration   6: 26.484 ns/op
Iteration   7: 26.466 ns/op
Iteration   8: 26.477 ns/op
Iteration   9: 26.482 ns/op
Iteration  10: 26.478 ns/op
Iteration  11: 26.465 ns/op
Iteration  12: 26.476 ns/op
Iteration  13: 26.431 ns/op
Iteration  14: 26.421 ns/op
Iteration  15: 26.448 ns/op
Iteration  16: 26.444 ns/op
Iteration  17: 26.421 ns/op
Iteration  18: 26.419 ns/op
Iteration  19: 26.418 ns/op
Iteration  20: 26.500 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 24.937 ns/op
# Warmup Iteration   2: 26.136 ns/op
# Warmup Iteration   3: 25.942 ns/op
# Warmup Iteration   4: 25.976 ns/op
# Warmup Iteration   5: 25.905 ns/op
Iteration   1: 25.699 ns/op
Iteration   2: 25.704 ns/op
Iteration   3: 25.688 ns/op
Iteration   4: 25.696 ns/op
Iteration   5: 25.667 ns/op
Iteration   6: 25.695 ns/op
Iteration   7: 25.675 ns/op
Iteration   8: 25.716 ns/op
Iteration   9: 25.931 ns/op
Iteration  10: 25.880 ns/op
Iteration  11: 26.016 ns/op
Iteration  12: 25.976 ns/op
Iteration  13: 26.017 ns/op
Iteration  14: 25.972 ns/op
Iteration  15: 26.021 ns/op
Iteration  16: 25.987 ns/op
Iteration  17: 26.037 ns/op
Iteration  18: 25.977 ns/op
Iteration  19: 26.016 ns/op
Iteration  20: 25.840 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.015 ns/op
# Warmup Iteration   2: 26.111 ns/op
# Warmup Iteration   3: 26.423 ns/op
# Warmup Iteration   4: 26.421 ns/op
# Warmup Iteration   5: 26.450 ns/op
Iteration   1: 26.421 ns/op
Iteration   2: 26.445 ns/op
Iteration   3: 26.440 ns/op
Iteration   4: 26.415 ns/op
Iteration   5: 26.419 ns/op
Iteration   6: 26.421 ns/op
Iteration   7: 26.346 ns/op
Iteration   8: 26.357 ns/op
Iteration   9: 26.384 ns/op
Iteration  10: 26.422 ns/op
Iteration  11: 26.380 ns/op
Iteration  12: 26.376 ns/op
Iteration  13: 26.385 ns/op
Iteration  14: 26.350 ns/op
Iteration  15: 26.411 ns/op
Iteration  16: 26.373 ns/op
Iteration  17: 26.356 ns/op
Iteration  18: 26.397 ns/op
Iteration  19: 26.385 ns/op
Iteration  20: 26.358 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.067 ns/op
# Warmup Iteration   2: 26.230 ns/op
# Warmup Iteration   3: 26.421 ns/op
# Warmup Iteration   4: 26.427 ns/op
# Warmup Iteration   5: 26.421 ns/op
Iteration   1: 26.406 ns/op
Iteration   2: 26.373 ns/op
Iteration   3: 26.395 ns/op
Iteration   4: 26.421 ns/op
Iteration   5: 26.409 ns/op
Iteration   6: 26.429 ns/op
Iteration   7: 26.445 ns/op
Iteration   8: 26.427 ns/op
Iteration   9: 26.434 ns/op
Iteration  10: 26.423 ns/op
Iteration  11: 26.410 ns/op
Iteration  12: 26.416 ns/op
Iteration  13: 26.414 ns/op
Iteration  14: 26.392 ns/op
Iteration  15: 26.421 ns/op
Iteration  16: 26.434 ns/op
Iteration  17: 26.415 ns/op
Iteration  18: 26.423 ns/op
Iteration  19: 26.437 ns/op
Iteration  20: 26.470 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.059 ns/op
# Warmup Iteration   2: 26.274 ns/op
# Warmup Iteration   3: 25.471 ns/op
# Warmup Iteration   4: 25.398 ns/op
# Warmup Iteration   5: 25.438 ns/op
Iteration   1: 25.474 ns/op
Iteration   2: 25.461 ns/op
Iteration   3: 25.442 ns/op
Iteration   4: 25.422 ns/op
Iteration   5: 25.434 ns/op
Iteration   6: 25.410 ns/op
Iteration   7: 25.457 ns/op
Iteration   8: 25.453 ns/op
Iteration   9: 25.503 ns/op
Iteration  10: 25.418 ns/op
Iteration  11: 25.436 ns/op
Iteration  12: 25.440 ns/op
Iteration  13: 25.415 ns/op
Iteration  14: 25.423 ns/op
Iteration  15: 25.437 ns/op
Iteration  16: 25.443 ns/op
Iteration  17: 25.438 ns/op
Iteration  18: 25.434 ns/op
Iteration  19: 25.420 ns/op
Iteration  20: 25.426 ns/op


Result "benchmark.StringContains.stringContains":
  26.114 ±(99.9%) 0.139 ns/op [Average]
  (min, avg, max) = (25.410, 26.114, 26.500), stdev = 0.410
  CI (99.9%): [25.975, 26.252] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  -Vfs7:<BMMW] ;]I\EPgdVok~%,[=A'>vQ1rE1|[eE![ECz\>w9*.Hri!#5gngIaa0D#S}l<b<v5px9zy=fUgGO>?uEWiaEit(qcB0<6["b1!.+:<tw0g^http2uv  avgt  100  147.678 ± 1.673  ns/op
StringContains.stringContains     http  -Vfs7:<BMMW] ;]I\EPgdVok~%,[=A'>vQ1rE1|[eE![ECz\>w9*.Hri!#5gngIaa0D#S}l<b<v5px9zy=fUgGO>?uEWiaEit(qcB0<6["b1!.+:<tw0g^http2uv  avgt  100   26.114 ± 0.139  ns/op

Benchmark result is saved to http_128_0.95_11.csv
