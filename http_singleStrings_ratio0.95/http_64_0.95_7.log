# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ;cBK+L$bWDm9##Nb*@*cG/4opglpU)>;8	JMtBr6nEdtJ"sn	$5hQ	`hhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 217.030 ns/op
# Warmup Iteration   2: 145.319 ns/op
# Warmup Iteration   3: 125.769 ns/op
# Warmup Iteration   4: 124.893 ns/op
# Warmup Iteration   5: 127.463 ns/op
Iteration   1: 127.100 ns/op
Iteration   2: 123.378 ns/op
Iteration   3: 123.310 ns/op
Iteration   4: 123.262 ns/op
Iteration   5: 123.715 ns/op
Iteration   6: 123.387 ns/op
Iteration   7: 124.020 ns/op
Iteration   8: 123.453 ns/op
Iteration   9: 123.235 ns/op
Iteration  10: 123.019 ns/op
Iteration  11: 123.037 ns/op
Iteration  12: 124.179 ns/op
Iteration  13: 122.957 ns/op
Iteration  14: 123.160 ns/op
Iteration  15: 123.160 ns/op
Iteration  16: 123.399 ns/op
Iteration  17: 123.163 ns/op
Iteration  18: 123.015 ns/op
Iteration  19: 123.138 ns/op
Iteration  20: 123.402 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 213.661 ns/op
# Warmup Iteration   2: 142.717 ns/op
# Warmup Iteration   3: 125.003 ns/op
# Warmup Iteration   4: 125.970 ns/op
# Warmup Iteration   5: 126.755 ns/op
Iteration   1: 126.951 ns/op
Iteration   2: 124.021 ns/op
Iteration   3: 124.055 ns/op
Iteration   4: 123.925 ns/op
Iteration   5: 124.535 ns/op
Iteration   6: 123.876 ns/op
Iteration   7: 123.882 ns/op
Iteration   8: 123.872 ns/op
Iteration   9: 123.819 ns/op
Iteration  10: 123.651 ns/op
Iteration  11: 123.544 ns/op
Iteration  12: 124.247 ns/op
Iteration  13: 124.951 ns/op
Iteration  14: 124.134 ns/op
Iteration  15: 124.167 ns/op
Iteration  16: 124.341 ns/op
Iteration  17: 124.080 ns/op
Iteration  18: 124.599 ns/op
Iteration  19: 124.391 ns/op
Iteration  20: 124.998 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 213.889 ns/op
# Warmup Iteration   2: 142.528 ns/op
# Warmup Iteration   3: 126.339 ns/op
# Warmup Iteration   4: 126.850 ns/op
# Warmup Iteration   5: 127.605 ns/op
Iteration   1: 129.070 ns/op
Iteration   2: 125.507 ns/op
Iteration   3: 125.396 ns/op
Iteration   4: 125.319 ns/op
Iteration   5: 125.830 ns/op
Iteration   6: 125.429 ns/op
Iteration   7: 125.296 ns/op
Iteration   8: 125.345 ns/op
Iteration   9: 126.192 ns/op
Iteration  10: 125.254 ns/op
Iteration  11: 125.070 ns/op
Iteration  12: 125.003 ns/op
Iteration  13: 125.299 ns/op
Iteration  14: 125.185 ns/op
Iteration  15: 125.360 ns/op
Iteration  16: 125.425 ns/op
Iteration  17: 125.983 ns/op
Iteration  18: 125.480 ns/op
Iteration  19: 125.492 ns/op
Iteration  20: 125.449 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 214.676 ns/op
# Warmup Iteration   2: 142.913 ns/op
# Warmup Iteration   3: 125.353 ns/op
# Warmup Iteration   4: 125.922 ns/op
# Warmup Iteration   5: 126.996 ns/op
Iteration   1: 127.943 ns/op
Iteration   2: 124.457 ns/op
Iteration   3: 124.487 ns/op
Iteration   4: 124.414 ns/op
Iteration   5: 124.920 ns/op
Iteration   6: 124.454 ns/op
Iteration   7: 124.428 ns/op
Iteration   8: 124.425 ns/op
Iteration   9: 124.231 ns/op
Iteration  10: 124.137 ns/op
Iteration  11: 124.461 ns/op
Iteration  12: 124.067 ns/op
Iteration  13: 124.261 ns/op
Iteration  14: 124.153 ns/op
Iteration  15: 124.139 ns/op
Iteration  16: 124.090 ns/op
Iteration  17: 124.476 ns/op
Iteration  18: 124.090 ns/op
Iteration  19: 124.167 ns/op
Iteration  20: 124.170 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 214.895 ns/op
# Warmup Iteration   2: 144.534 ns/op
# Warmup Iteration   3: 125.013 ns/op
# Warmup Iteration   4: 125.363 ns/op
# Warmup Iteration   5: 126.993 ns/op
Iteration   1: 126.578 ns/op
Iteration   2: 124.882 ns/op
Iteration   3: 123.934 ns/op
Iteration   4: 124.005 ns/op
Iteration   5: 124.549 ns/op
Iteration   6: 124.036 ns/op
Iteration   7: 123.898 ns/op
Iteration   8: 123.955 ns/op
Iteration   9: 123.820 ns/op
Iteration  10: 123.750 ns/op
Iteration  11: 123.787 ns/op
Iteration  12: 124.675 ns/op
Iteration  13: 123.711 ns/op
Iteration  14: 123.908 ns/op
Iteration  15: 123.720 ns/op
Iteration  16: 124.137 ns/op
Iteration  17: 123.720 ns/op
Iteration  18: 123.674 ns/op
Iteration  19: 123.714 ns/op
Iteration  20: 124.807 ns/op


Result "benchmark.StringContains.regexMatches":
  124.421 ±(99.9%) 0.355 ns/op [Average]
  (min, avg, max) = (122.957, 124.421, 129.070), stdev = 1.047
  CI (99.9%): [124.066, 124.776] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ;cBK+L$bWDm9##Nb*@*cG/4opglpU)>;8	JMtBr6nEdtJ"sn	$5hQ	`hhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.079 ns/op
# Warmup Iteration   2: 17.044 ns/op
# Warmup Iteration   3: 16.557 ns/op
# Warmup Iteration   4: 16.552 ns/op
# Warmup Iteration   5: 16.552 ns/op
Iteration   1: 16.536 ns/op
Iteration   2: 16.531 ns/op
Iteration   3: 16.547 ns/op
Iteration   4: 16.550 ns/op
Iteration   5: 16.540 ns/op
Iteration   6: 16.537 ns/op
Iteration   7: 16.530 ns/op
Iteration   8: 16.555 ns/op
Iteration   9: 16.544 ns/op
Iteration  10: 16.559 ns/op
Iteration  11: 16.570 ns/op
Iteration  12: 16.569 ns/op
Iteration  13: 16.544 ns/op
Iteration  14: 16.555 ns/op
Iteration  15: 16.545 ns/op
Iteration  16: 16.549 ns/op
Iteration  17: 16.553 ns/op
Iteration  18: 16.543 ns/op
Iteration  19: 16.550 ns/op
Iteration  20: 16.569 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.984 ns/op
# Warmup Iteration   2: 17.067 ns/op
# Warmup Iteration   3: 16.544 ns/op
# Warmup Iteration   4: 16.561 ns/op
# Warmup Iteration   5: 16.577 ns/op
Iteration   1: 16.559 ns/op
Iteration   2: 16.552 ns/op
Iteration   3: 16.563 ns/op
Iteration   4: 16.554 ns/op
Iteration   5: 16.561 ns/op
Iteration   6: 16.551 ns/op
Iteration   7: 16.555 ns/op
Iteration   8: 16.590 ns/op
Iteration   9: 16.538 ns/op
Iteration  10: 16.545 ns/op
Iteration  11: 16.570 ns/op
Iteration  12: 16.557 ns/op
Iteration  13: 16.553 ns/op
Iteration  14: 16.555 ns/op
Iteration  15: 16.568 ns/op
Iteration  16: 16.588 ns/op
Iteration  17: 16.569 ns/op
Iteration  18: 16.564 ns/op
Iteration  19: 16.572 ns/op
Iteration  20: 16.591 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.144 ns/op
# Warmup Iteration   2: 17.179 ns/op
# Warmup Iteration   3: 16.544 ns/op
# Warmup Iteration   4: 16.562 ns/op
# Warmup Iteration   5: 16.557 ns/op
Iteration   1: 16.554 ns/op
Iteration   2: 16.566 ns/op
Iteration   3: 16.549 ns/op
Iteration   4: 16.543 ns/op
Iteration   5: 16.561 ns/op
Iteration   6: 16.552 ns/op
Iteration   7: 16.554 ns/op
Iteration   8: 16.570 ns/op
Iteration   9: 16.531 ns/op
Iteration  10: 16.555 ns/op
Iteration  11: 16.529 ns/op
Iteration  12: 16.546 ns/op
Iteration  13: 16.531 ns/op
Iteration  14: 16.519 ns/op
Iteration  15: 16.523 ns/op
Iteration  16: 16.520 ns/op
Iteration  17: 16.537 ns/op
Iteration  18: 16.525 ns/op
Iteration  19: 16.537 ns/op
Iteration  20: 16.545 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.058 ns/op
# Warmup Iteration   2: 17.107 ns/op
# Warmup Iteration   3: 16.510 ns/op
# Warmup Iteration   4: 16.513 ns/op
# Warmup Iteration   5: 16.506 ns/op
Iteration   1: 16.550 ns/op
Iteration   2: 16.522 ns/op
Iteration   3: 16.521 ns/op
Iteration   4: 16.533 ns/op
Iteration   5: 16.520 ns/op
Iteration   6: 16.521 ns/op
Iteration   7: 16.527 ns/op
Iteration   8: 16.533 ns/op
Iteration   9: 16.526 ns/op
Iteration  10: 16.512 ns/op
Iteration  11: 16.515 ns/op
Iteration  12: 16.515 ns/op
Iteration  13: 16.498 ns/op
Iteration  14: 16.510 ns/op
Iteration  15: 16.506 ns/op
Iteration  16: 16.513 ns/op
Iteration  17: 16.520 ns/op
Iteration  18: 16.505 ns/op
Iteration  19: 16.518 ns/op
Iteration  20: 16.507 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.092 ns/op
# Warmup Iteration   2: 17.106 ns/op
# Warmup Iteration   3: 16.562 ns/op
# Warmup Iteration   4: 16.558 ns/op
# Warmup Iteration   5: 16.549 ns/op
Iteration   1: 16.562 ns/op
Iteration   2: 16.546 ns/op
Iteration   3: 16.572 ns/op
Iteration   4: 16.540 ns/op
Iteration   5: 16.542 ns/op
Iteration   6: 16.558 ns/op
Iteration   7: 16.560 ns/op
Iteration   8: 16.563 ns/op
Iteration   9: 16.570 ns/op
Iteration  10: 16.564 ns/op
Iteration  11: 16.542 ns/op
Iteration  12: 16.540 ns/op
Iteration  13: 16.548 ns/op
Iteration  14: 16.552 ns/op
Iteration  15: 16.546 ns/op
Iteration  16: 16.542 ns/op
Iteration  17: 16.565 ns/op
Iteration  18: 16.558 ns/op
Iteration  19: 16.556 ns/op
Iteration  20: 16.548 ns/op


Result "benchmark.StringContains.stringContains":
  16.545 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (16.498, 16.545, 16.591), stdev = 0.020
  CI (99.9%): [16.539, 16.552] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ;cBK+L$bWDm9##Nb*@*cG/4opglpU)>;8	JMtBr6nEdtJ"sn	$5hQ	`hhttp  avgt  100  124.421 ± 0.355  ns/op
StringContains.stringContains     http  ;cBK+L$bWDm9##Nb*@*cG/4opglpU)>;8	JMtBr6nEdtJ"sn	$5hQ	`hhttp  avgt  100   16.545 ± 0.007  ns/op

Benchmark result is saved to http_64_0.95_7.csv
