# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = {Cz[;
G+KJbgWd%]%<B8@*zVSf`c5!{+5E;43`cfK%k1EK|!0{io
mE@~"5pd;=,
O0Zp;OIEw[7V6)xZq!k)efffiY36m0%zFavh1k}oQQ;B![6@shttp@	Q)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 241.998 ns/op
# Warmup Iteration   2: 176.465 ns/op
# Warmup Iteration   3: 146.025 ns/op
# Warmup Iteration   4: 149.274 ns/op
# Warmup Iteration   5: 148.044 ns/op
Iteration   1: 149.357 ns/op
Iteration   2: 145.309 ns/op
Iteration   3: 145.393 ns/op
Iteration   4: 145.369 ns/op
Iteration   5: 145.208 ns/op
Iteration   6: 145.346 ns/op
Iteration   7: 145.236 ns/op
Iteration   8: 145.295 ns/op
Iteration   9: 145.205 ns/op
Iteration  10: 145.239 ns/op
Iteration  11: 144.920 ns/op
Iteration  12: 144.900 ns/op
Iteration  13: 145.081 ns/op
Iteration  14: 145.031 ns/op
Iteration  15: 144.990 ns/op
Iteration  16: 144.854 ns/op
Iteration  17: 144.985 ns/op
Iteration  18: 144.970 ns/op
Iteration  19: 145.006 ns/op
Iteration  20: 145.893 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 243.870 ns/op
# Warmup Iteration   2: 186.773 ns/op
# Warmup Iteration   3: 158.337 ns/op
# Warmup Iteration   4: 158.946 ns/op
# Warmup Iteration   5: 159.465 ns/op
Iteration   1: 159.930 ns/op
Iteration   2: 161.272 ns/op
Iteration   3: 157.400 ns/op
Iteration   4: 158.454 ns/op
Iteration   5: 157.477 ns/op
Iteration   6: 156.815 ns/op
Iteration   7: 157.223 ns/op
Iteration   8: 157.201 ns/op
Iteration   9: 157.380 ns/op
Iteration  10: 157.278 ns/op
Iteration  11: 157.334 ns/op
Iteration  12: 156.774 ns/op
Iteration  13: 156.772 ns/op
Iteration  14: 157.683 ns/op
Iteration  15: 156.484 ns/op
Iteration  16: 156.513 ns/op
Iteration  17: 157.224 ns/op
Iteration  18: 156.792 ns/op
Iteration  19: 156.969 ns/op
Iteration  20: 157.195 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 244.494 ns/op
# Warmup Iteration   2: 187.031 ns/op
# Warmup Iteration   3: 158.205 ns/op
# Warmup Iteration   4: 158.760 ns/op
# Warmup Iteration   5: 158.662 ns/op
Iteration   1: 159.396 ns/op
Iteration   2: 160.296 ns/op
Iteration   3: 156.661 ns/op
Iteration   4: 156.826 ns/op
Iteration   5: 156.608 ns/op
Iteration   6: 156.690 ns/op
Iteration   7: 156.602 ns/op
Iteration   8: 156.693 ns/op
Iteration   9: 156.598 ns/op
Iteration  10: 156.229 ns/op
Iteration  11: 157.052 ns/op
Iteration  12: 156.458 ns/op
Iteration  13: 156.071 ns/op
Iteration  14: 156.042 ns/op
Iteration  15: 155.924 ns/op
Iteration  16: 156.324 ns/op
Iteration  17: 156.393 ns/op
Iteration  18: 156.434 ns/op
Iteration  19: 156.680 ns/op
Iteration  20: 156.673 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 237.000 ns/op
# Warmup Iteration   2: 172.299 ns/op
# Warmup Iteration   3: 145.185 ns/op
# Warmup Iteration   4: 148.298 ns/op
# Warmup Iteration   5: 147.546 ns/op
Iteration   1: 148.465 ns/op
Iteration   2: 144.758 ns/op
Iteration   3: 144.978 ns/op
Iteration   4: 144.497 ns/op
Iteration   5: 146.453 ns/op
Iteration   6: 144.454 ns/op
Iteration   7: 144.493 ns/op
Iteration   8: 144.995 ns/op
Iteration   9: 144.470 ns/op
Iteration  10: 144.503 ns/op
Iteration  11: 144.264 ns/op
Iteration  12: 144.494 ns/op
Iteration  13: 144.788 ns/op
Iteration  14: 144.822 ns/op
Iteration  15: 145.135 ns/op
Iteration  16: 144.204 ns/op
Iteration  17: 144.156 ns/op
Iteration  18: 144.328 ns/op
Iteration  19: 144.248 ns/op
Iteration  20: 144.977 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 258.134 ns/op
# Warmup Iteration   2: 200.757 ns/op
# Warmup Iteration   3: 181.320 ns/op
# Warmup Iteration   4: 179.816 ns/op
# Warmup Iteration   5: 180.298 ns/op
Iteration   1: 181.282 ns/op
Iteration   2: 183.100 ns/op
Iteration   3: 177.244 ns/op
Iteration   4: 177.987 ns/op
Iteration   5: 178.186 ns/op
Iteration   6: 178.078 ns/op
Iteration   7: 178.096 ns/op
Iteration   8: 178.135 ns/op
Iteration   9: 178.520 ns/op
Iteration  10: 178.151 ns/op
Iteration  11: 177.049 ns/op
Iteration  12: 177.884 ns/op
Iteration  13: 178.111 ns/op
Iteration  14: 179.064 ns/op
Iteration  15: 177.431 ns/op
Iteration  16: 177.323 ns/op
Iteration  17: 177.460 ns/op
Iteration  18: 177.425 ns/op
Iteration  19: 176.940 ns/op
Iteration  20: 177.411 ns/op


Result "benchmark.StringContains.regexMatches":
  156.568 ±(99.9%) 4.144 ns/op [Average]
  (min, avg, max) = (144.156, 156.568, 183.100), stdev = 12.219
  CI (99.9%): [152.424, 160.712] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = {Cz[;
G+KJbgWd%]%<B8@*zVSf`c5!{+5E;43`cfK%k1EK|!0{io
mE@~"5pd;=,
O0Zp;OIEw[7V6)xZq!k)efffiY36m0%zFavh1k}oQQ;B![6@shttp@	Q)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.006 ns/op
# Warmup Iteration   2: 26.189 ns/op
# Warmup Iteration   3: 25.413 ns/op
# Warmup Iteration   4: 25.403 ns/op
# Warmup Iteration   5: 25.415 ns/op
Iteration   1: 25.399 ns/op
Iteration   2: 25.397 ns/op
Iteration   3: 25.409 ns/op
Iteration   4: 25.399 ns/op
Iteration   5: 25.390 ns/op
Iteration   6: 25.399 ns/op
Iteration   7: 25.401 ns/op
Iteration   8: 25.395 ns/op
Iteration   9: 25.431 ns/op
Iteration  10: 25.416 ns/op
Iteration  11: 25.418 ns/op
Iteration  12: 25.382 ns/op
Iteration  13: 25.372 ns/op
Iteration  14: 25.397 ns/op
Iteration  15: 25.362 ns/op
Iteration  16: 25.411 ns/op
Iteration  17: 25.418 ns/op
Iteration  18: 25.426 ns/op
Iteration  19: 25.419 ns/op
Iteration  20: 25.364 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 24.883 ns/op
# Warmup Iteration   2: 26.172 ns/op
# Warmup Iteration   3: 25.422 ns/op
# Warmup Iteration   4: 25.420 ns/op
# Warmup Iteration   5: 25.417 ns/op
Iteration   1: 25.573 ns/op
Iteration   2: 25.564 ns/op
Iteration   3: 25.564 ns/op
Iteration   4: 25.565 ns/op
Iteration   5: 25.537 ns/op
Iteration   6: 25.569 ns/op
Iteration   7: 25.557 ns/op
Iteration   8: 25.569 ns/op
Iteration   9: 25.534 ns/op
Iteration  10: 25.466 ns/op
Iteration  11: 25.567 ns/op
Iteration  12: 25.421 ns/op
Iteration  13: 25.368 ns/op
Iteration  14: 25.394 ns/op
Iteration  15: 25.384 ns/op
Iteration  16: 25.389 ns/op
Iteration  17: 25.381 ns/op
Iteration  18: 25.391 ns/op
Iteration  19: 25.385 ns/op
Iteration  20: 25.398 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.054 ns/op
# Warmup Iteration   2: 26.117 ns/op
# Warmup Iteration   3: 26.390 ns/op
# Warmup Iteration   4: 26.369 ns/op
# Warmup Iteration   5: 26.456 ns/op
Iteration   1: 26.444 ns/op
Iteration   2: 26.462 ns/op
Iteration   3: 26.452 ns/op
Iteration   4: 26.418 ns/op
Iteration   5: 26.405 ns/op
Iteration   6: 26.440 ns/op
Iteration   7: 26.416 ns/op
Iteration   8: 26.423 ns/op
Iteration   9: 26.425 ns/op
Iteration  10: 26.428 ns/op
Iteration  11: 26.463 ns/op
Iteration  12: 26.438 ns/op
Iteration  13: 26.425 ns/op
Iteration  14: 26.420 ns/op
Iteration  15: 26.394 ns/op
Iteration  16: 26.507 ns/op
Iteration  17: 26.435 ns/op
Iteration  18: 26.379 ns/op
Iteration  19: 26.411 ns/op
Iteration  20: 26.416 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 24.891 ns/op
# Warmup Iteration   2: 26.112 ns/op
# Warmup Iteration   3: 25.466 ns/op
# Warmup Iteration   4: 25.410 ns/op
# Warmup Iteration   5: 25.424 ns/op
Iteration   1: 25.500 ns/op
Iteration   2: 25.478 ns/op
Iteration   3: 25.492 ns/op
Iteration   4: 25.441 ns/op
Iteration   5: 25.406 ns/op
Iteration   6: 25.391 ns/op
Iteration   7: 25.506 ns/op
Iteration   8: 25.480 ns/op
Iteration   9: 25.488 ns/op
Iteration  10: 25.497 ns/op
Iteration  11: 25.466 ns/op
Iteration  12: 25.387 ns/op
Iteration  13: 25.381 ns/op
Iteration  14: 25.393 ns/op
Iteration  15: 25.394 ns/op
Iteration  16: 25.411 ns/op
Iteration  17: 25.373 ns/op
Iteration  18: 25.355 ns/op
Iteration  19: 25.365 ns/op
Iteration  20: 25.369 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.023 ns/op
# Warmup Iteration   2: 26.178 ns/op
# Warmup Iteration   3: 25.427 ns/op
# Warmup Iteration   4: 25.422 ns/op
# Warmup Iteration   5: 25.405 ns/op
Iteration   1: 25.408 ns/op
Iteration   2: 25.401 ns/op
Iteration   3: 25.397 ns/op
Iteration   4: 25.399 ns/op
Iteration   5: 25.379 ns/op
Iteration   6: 25.415 ns/op
Iteration   7: 25.398 ns/op
Iteration   8: 25.406 ns/op
Iteration   9: 25.403 ns/op
Iteration  10: 25.387 ns/op
Iteration  11: 25.418 ns/op
Iteration  12: 25.407 ns/op
Iteration  13: 25.390 ns/op
Iteration  14: 25.391 ns/op
Iteration  15: 25.424 ns/op
Iteration  16: 25.399 ns/op
Iteration  17: 25.413 ns/op
Iteration  18: 25.435 ns/op
Iteration  19: 25.415 ns/op
Iteration  20: 25.441 ns/op


Result "benchmark.StringContains.stringContains":
  25.629 ±(99.9%) 0.138 ns/op [Average]
  (min, avg, max) = (25.355, 25.629, 26.507), stdev = 0.406
  CI (99.9%): [25.491, 25.767] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  {Cz[;
G+KJbgWd%]%<B8@*zVSf`c5!{+5E;43`cfK%k1EK|!0{io
mE@~"5pd;=,
O0Zp;OIEw[7V6)xZq!k)efffiY36m0%zFavh1k}oQQ;B![6@shttp@	Q  avgt  100  156.568 ± 4.144  ns/op
StringContains.stringContains     http  {Cz[;
G+KJbgWd%]%<B8@*zVSf`c5!{+5E;43`cfK%k1EK|!0{io
mE@~"5pd;=,
O0Zp;OIEw[7V6)xZq!k)efffiY36m0%zFavh1k}oQQ;B![6@shttp@	Q  avgt  100   25.629 ± 0.138  ns/op

Benchmark result is saved to http_128_0.95_0.csv
