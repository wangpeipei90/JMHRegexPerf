# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = >h)zzW4`8gg(e]/-6,Z9d"-vASJyd4sIj`Ez(X RS1B^yT'd`g*YD[(:C5Kshttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 216.814 ns/op
# Warmup Iteration   2: 145.005 ns/op
# Warmup Iteration   3: 125.549 ns/op
# Warmup Iteration   4: 125.204 ns/op
# Warmup Iteration   5: 128.015 ns/op
Iteration   1: 126.000 ns/op
Iteration   2: 123.704 ns/op
Iteration   3: 123.658 ns/op
Iteration   4: 123.677 ns/op
Iteration   5: 124.972 ns/op
Iteration   6: 123.787 ns/op
Iteration   7: 123.755 ns/op
Iteration   8: 123.916 ns/op
Iteration   9: 123.341 ns/op
Iteration  10: 125.084 ns/op
Iteration  11: 123.338 ns/op
Iteration  12: 123.731 ns/op
Iteration  13: 124.053 ns/op
Iteration  14: 123.354 ns/op
Iteration  15: 123.400 ns/op
Iteration  16: 123.812 ns/op
Iteration  17: 123.419 ns/op
Iteration  18: 123.374 ns/op
Iteration  19: 123.404 ns/op
Iteration  20: 124.613 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 211.860 ns/op
# Warmup Iteration   2: 143.388 ns/op
# Warmup Iteration   3: 126.831 ns/op
# Warmup Iteration   4: 127.308 ns/op
# Warmup Iteration   5: 127.990 ns/op
Iteration   1: 129.482 ns/op
Iteration   2: 125.851 ns/op
Iteration   3: 125.973 ns/op
Iteration   4: 125.754 ns/op
Iteration   5: 126.281 ns/op
Iteration   6: 125.741 ns/op
Iteration   7: 125.788 ns/op
Iteration   8: 125.809 ns/op
Iteration   9: 126.786 ns/op
Iteration  10: 125.624 ns/op
Iteration  11: 126.011 ns/op
Iteration  12: 125.651 ns/op
Iteration  13: 125.830 ns/op
Iteration  14: 126.045 ns/op
Iteration  15: 125.707 ns/op
Iteration  16: 125.658 ns/op
Iteration  17: 125.579 ns/op
Iteration  18: 125.864 ns/op
Iteration  19: 125.602 ns/op
Iteration  20: 125.660 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 222.522 ns/op
# Warmup Iteration   2: 157.073 ns/op
# Warmup Iteration   3: 142.869 ns/op
# Warmup Iteration   4: 142.063 ns/op
# Warmup Iteration   5: 142.732 ns/op
Iteration   1: 143.493 ns/op
Iteration   2: 140.825 ns/op
Iteration   3: 140.244 ns/op
Iteration   4: 140.061 ns/op
Iteration   5: 140.109 ns/op
Iteration   6: 140.743 ns/op
Iteration   7: 140.040 ns/op
Iteration   8: 140.073 ns/op
Iteration   9: 140.293 ns/op
Iteration  10: 140.112 ns/op
Iteration  11: 139.879 ns/op
Iteration  12: 139.768 ns/op
Iteration  13: 139.857 ns/op
Iteration  14: 139.774 ns/op
Iteration  15: 140.229 ns/op
Iteration  16: 140.778 ns/op
Iteration  17: 140.203 ns/op
Iteration  18: 139.766 ns/op
Iteration  19: 139.802 ns/op
Iteration  20: 139.810 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 226.976 ns/op
# Warmup Iteration   2: 158.281 ns/op
# Warmup Iteration   3: 142.676 ns/op
# Warmup Iteration   4: 142.065 ns/op
# Warmup Iteration   5: 142.722 ns/op
Iteration   1: 143.728 ns/op
Iteration   2: 140.306 ns/op
Iteration   3: 140.308 ns/op
Iteration   4: 140.268 ns/op
Iteration   5: 140.415 ns/op
Iteration   6: 140.852 ns/op
Iteration   7: 140.220 ns/op
Iteration   8: 140.310 ns/op
Iteration   9: 140.394 ns/op
Iteration  10: 140.448 ns/op
Iteration  11: 139.945 ns/op
Iteration  12: 140.128 ns/op
Iteration  13: 140.183 ns/op
Iteration  14: 140.342 ns/op
Iteration  15: 141.709 ns/op
Iteration  16: 140.207 ns/op
Iteration  17: 140.115 ns/op
Iteration  18: 140.076 ns/op
Iteration  19: 140.016 ns/op
Iteration  20: 140.458 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 223.200 ns/op
# Warmup Iteration   2: 157.101 ns/op
# Warmup Iteration   3: 142.185 ns/op
# Warmup Iteration   4: 140.983 ns/op
# Warmup Iteration   5: 141.816 ns/op
Iteration   1: 144.332 ns/op
Iteration   2: 139.823 ns/op
Iteration   3: 139.357 ns/op
Iteration   4: 139.234 ns/op
Iteration   5: 139.796 ns/op
Iteration   6: 139.930 ns/op
Iteration   7: 139.729 ns/op
Iteration   8: 139.287 ns/op
Iteration   9: 139.308 ns/op
Iteration  10: 138.824 ns/op
Iteration  11: 138.908 ns/op
Iteration  12: 140.469 ns/op
Iteration  13: 139.188 ns/op
Iteration  14: 139.365 ns/op
Iteration  15: 139.195 ns/op
Iteration  16: 139.067 ns/op
Iteration  17: 140.286 ns/op
Iteration  18: 139.066 ns/op
Iteration  19: 139.030 ns/op
Iteration  20: 139.016 ns/op


Result "benchmark.StringContains.regexMatches":
  134.086 ±(99.9%) 2.565 ns/op [Average]
  (min, avg, max) = (123.338, 134.086, 144.332), stdev = 7.562
  CI (99.9%): [131.521, 136.650] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = >h)zzW4`8gg(e]/-6,Z9d"-vASJyd4sIj`Ez(X RS1B^yT'd`g*YD[(:C5Kshttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.055 ns/op
# Warmup Iteration   2: 17.026 ns/op
# Warmup Iteration   3: 16.597 ns/op
# Warmup Iteration   4: 16.590 ns/op
# Warmup Iteration   5: 16.577 ns/op
Iteration   1: 16.573 ns/op
Iteration   2: 16.590 ns/op
Iteration   3: 16.586 ns/op
Iteration   4: 16.582 ns/op
Iteration   5: 16.585 ns/op
Iteration   6: 16.574 ns/op
Iteration   7: 16.562 ns/op
Iteration   8: 16.559 ns/op
Iteration   9: 16.550 ns/op
Iteration  10: 16.569 ns/op
Iteration  11: 16.579 ns/op
Iteration  12: 16.583 ns/op
Iteration  13: 16.544 ns/op
Iteration  14: 16.556 ns/op
Iteration  15: 16.572 ns/op
Iteration  16: 16.563 ns/op
Iteration  17: 16.568 ns/op
Iteration  18: 16.574 ns/op
Iteration  19: 16.596 ns/op
Iteration  20: 16.601 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.011 ns/op
# Warmup Iteration   2: 17.146 ns/op
# Warmup Iteration   3: 17.349 ns/op
# Warmup Iteration   4: 17.341 ns/op
# Warmup Iteration   5: 17.313 ns/op
Iteration   1: 17.379 ns/op
Iteration   2: 17.397 ns/op
Iteration   3: 17.388 ns/op
Iteration   4: 17.340 ns/op
Iteration   5: 17.316 ns/op
Iteration   6: 17.344 ns/op
Iteration   7: 17.277 ns/op
Iteration   8: 17.385 ns/op
Iteration   9: 17.327 ns/op
Iteration  10: 17.322 ns/op
Iteration  11: 17.295 ns/op
Iteration  12: 17.289 ns/op
Iteration  13: 17.251 ns/op
Iteration  14: 17.325 ns/op
Iteration  15: 17.287 ns/op
Iteration  16: 17.333 ns/op
Iteration  17: 17.285 ns/op
Iteration  18: 17.274 ns/op
Iteration  19: 17.287 ns/op
Iteration  20: 17.356 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.981 ns/op
# Warmup Iteration   2: 17.084 ns/op
# Warmup Iteration   3: 16.599 ns/op
# Warmup Iteration   4: 16.578 ns/op
# Warmup Iteration   5: 16.582 ns/op
Iteration   1: 16.559 ns/op
Iteration   2: 16.582 ns/op
Iteration   3: 16.572 ns/op
Iteration   4: 16.571 ns/op
Iteration   5: 16.576 ns/op
Iteration   6: 16.554 ns/op
Iteration   7: 16.561 ns/op
Iteration   8: 16.593 ns/op
Iteration   9: 16.576 ns/op
Iteration  10: 16.571 ns/op
Iteration  11: 16.572 ns/op
Iteration  12: 16.580 ns/op
Iteration  13: 16.572 ns/op
Iteration  14: 16.561 ns/op
Iteration  15: 16.539 ns/op
Iteration  16: 16.556 ns/op
Iteration  17: 16.552 ns/op
Iteration  18: 16.564 ns/op
Iteration  19: 16.561 ns/op
Iteration  20: 16.600 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.969 ns/op
# Warmup Iteration   2: 17.048 ns/op
# Warmup Iteration   3: 16.879 ns/op
# Warmup Iteration   4: 16.887 ns/op
# Warmup Iteration   5: 16.873 ns/op
Iteration   1: 16.916 ns/op
Iteration   2: 16.899 ns/op
Iteration   3: 16.885 ns/op
Iteration   4: 16.859 ns/op
Iteration   5: 16.887 ns/op
Iteration   6: 16.885 ns/op
Iteration   7: 16.832 ns/op
Iteration   8: 16.860 ns/op
Iteration   9: 16.872 ns/op
Iteration  10: 16.900 ns/op
Iteration  11: 16.895 ns/op
Iteration  12: 16.918 ns/op
Iteration  13: 16.892 ns/op
Iteration  14: 16.868 ns/op
Iteration  15: 16.882 ns/op
Iteration  16: 16.873 ns/op
Iteration  17: 16.892 ns/op
Iteration  18: 16.887 ns/op
Iteration  19: 16.872 ns/op
Iteration  20: 16.844 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.073 ns/op
# Warmup Iteration   2: 17.094 ns/op
# Warmup Iteration   3: 16.567 ns/op
# Warmup Iteration   4: 16.583 ns/op
# Warmup Iteration   5: 16.562 ns/op
Iteration   1: 16.566 ns/op
Iteration   2: 16.552 ns/op
Iteration   3: 16.578 ns/op
Iteration   4: 16.563 ns/op
Iteration   5: 16.570 ns/op
Iteration   6: 16.577 ns/op
Iteration   7: 16.570 ns/op
Iteration   8: 16.568 ns/op
Iteration   9: 16.578 ns/op
Iteration  10: 16.569 ns/op
Iteration  11: 16.565 ns/op
Iteration  12: 16.578 ns/op
Iteration  13: 16.568 ns/op
Iteration  14: 16.570 ns/op
Iteration  15: 16.567 ns/op
Iteration  16: 16.561 ns/op
Iteration  17: 16.568 ns/op
Iteration  18: 16.561 ns/op
Iteration  19: 16.577 ns/op
Iteration  20: 16.571 ns/op


Result "benchmark.StringContains.stringContains":
  16.783 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (16.539, 16.783, 17.397), stdev = 0.298
  CI (99.9%): [16.682, 16.884] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  >h)zzW4`8gg(e]/-6,Z9d"-vASJyd4sIj`Ez(X RS1B^yT'd`g*YD[(:C5Kshttp  avgt  100  134.086 ± 2.565  ns/op
StringContains.stringContains     http  >h)zzW4`8gg(e]/-6,Z9d"-vASJyd4sIj`Ez(X RS1B^yT'd`g*YD[(:C5Kshttp  avgt  100   16.783 ± 0.101  ns/op

Benchmark result is saved to http_64_0.95_5.csv
