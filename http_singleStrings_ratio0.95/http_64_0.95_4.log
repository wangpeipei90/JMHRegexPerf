# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = S_XhDO_W^_Pjx&0n28]u7^0*gW~#7UR)pxxm`/
r7jL|'"wQ6J^~$'>;http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 219.092 ns/op
# Warmup Iteration   2: 145.615 ns/op
# Warmup Iteration   3: 128.462 ns/op
# Warmup Iteration   4: 127.813 ns/op
# Warmup Iteration   5: 128.605 ns/op
Iteration   1: 130.141 ns/op
Iteration   2: 126.372 ns/op
Iteration   3: 126.286 ns/op
Iteration   4: 126.316 ns/op
Iteration   5: 126.344 ns/op
Iteration   6: 126.862 ns/op
Iteration   7: 126.231 ns/op
Iteration   8: 126.160 ns/op
Iteration   9: 125.870 ns/op
Iteration  10: 126.071 ns/op
Iteration  11: 125.858 ns/op
Iteration  12: 125.942 ns/op
Iteration  13: 125.950 ns/op
Iteration  14: 127.349 ns/op
Iteration  15: 126.492 ns/op
Iteration  16: 126.210 ns/op
Iteration  17: 126.321 ns/op
Iteration  18: 126.537 ns/op
Iteration  19: 126.149 ns/op
Iteration  20: 126.065 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.237 ns/op
# Warmup Iteration   2: 143.239 ns/op
# Warmup Iteration   3: 126.544 ns/op
# Warmup Iteration   4: 127.113 ns/op
# Warmup Iteration   5: 127.796 ns/op
Iteration   1: 129.425 ns/op
Iteration   2: 125.614 ns/op
Iteration   3: 125.383 ns/op
Iteration   4: 125.441 ns/op
Iteration   5: 126.038 ns/op
Iteration   6: 125.552 ns/op
Iteration   7: 125.525 ns/op
Iteration   8: 125.519 ns/op
Iteration   9: 125.415 ns/op
Iteration  10: 125.242 ns/op
Iteration  11: 125.162 ns/op
Iteration  12: 125.148 ns/op
Iteration  13: 125.306 ns/op
Iteration  14: 125.292 ns/op
Iteration  15: 125.300 ns/op
Iteration  16: 126.077 ns/op
Iteration  17: 125.730 ns/op
Iteration  18: 125.184 ns/op
Iteration  19: 125.997 ns/op
Iteration  20: 125.417 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 225.763 ns/op
# Warmup Iteration   2: 158.638 ns/op
# Warmup Iteration   3: 142.055 ns/op
# Warmup Iteration   4: 141.139 ns/op
# Warmup Iteration   5: 142.176 ns/op
Iteration   1: 142.735 ns/op
Iteration   2: 139.450 ns/op
Iteration   3: 139.467 ns/op
Iteration   4: 139.407 ns/op
Iteration   5: 139.410 ns/op
Iteration   6: 140.158 ns/op
Iteration   7: 139.335 ns/op
Iteration   8: 139.265 ns/op
Iteration   9: 139.518 ns/op
Iteration  10: 139.422 ns/op
Iteration  11: 139.318 ns/op
Iteration  12: 138.898 ns/op
Iteration  13: 139.008 ns/op
Iteration  14: 139.310 ns/op
Iteration  15: 138.977 ns/op
Iteration  16: 139.248 ns/op
Iteration  17: 139.755 ns/op
Iteration  18: 140.415 ns/op
Iteration  19: 139.056 ns/op
Iteration  20: 139.067 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 213.666 ns/op
# Warmup Iteration   2: 145.137 ns/op
# Warmup Iteration   3: 124.567 ns/op
# Warmup Iteration   4: 125.047 ns/op
# Warmup Iteration   5: 126.920 ns/op
Iteration   1: 125.826 ns/op
Iteration   2: 123.551 ns/op
Iteration   3: 123.571 ns/op
Iteration   4: 125.345 ns/op
Iteration   5: 124.331 ns/op
Iteration   6: 123.599 ns/op
Iteration   7: 123.663 ns/op
Iteration   8: 123.837 ns/op
Iteration   9: 123.200 ns/op
Iteration  10: 123.241 ns/op
Iteration  11: 123.485 ns/op
Iteration  12: 123.452 ns/op
Iteration  13: 124.069 ns/op
Iteration  14: 123.270 ns/op
Iteration  15: 123.802 ns/op
Iteration  16: 123.856 ns/op
Iteration  17: 123.498 ns/op
Iteration  18: 123.375 ns/op
Iteration  19: 123.347 ns/op
Iteration  20: 123.837 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 215.101 ns/op
# Warmup Iteration   2: 143.251 ns/op
# Warmup Iteration   3: 125.989 ns/op
# Warmup Iteration   4: 126.668 ns/op
# Warmup Iteration   5: 127.768 ns/op
Iteration   1: 127.982 ns/op
Iteration   2: 124.304 ns/op
Iteration   3: 123.888 ns/op
Iteration   4: 124.179 ns/op
Iteration   5: 124.516 ns/op
Iteration   6: 123.877 ns/op
Iteration   7: 123.908 ns/op
Iteration   8: 124.038 ns/op
Iteration   9: 123.941 ns/op
Iteration  10: 123.701 ns/op
Iteration  11: 123.655 ns/op
Iteration  12: 123.568 ns/op
Iteration  13: 124.040 ns/op
Iteration  14: 123.760 ns/op
Iteration  15: 123.877 ns/op
Iteration  16: 123.583 ns/op
Iteration  17: 124.327 ns/op
Iteration  18: 123.875 ns/op
Iteration  19: 123.955 ns/op
Iteration  20: 124.666 ns/op


Result "benchmark.StringContains.regexMatches":
  127.943 ±(99.9%) 2.028 ns/op [Average]
  (min, avg, max) = (123.200, 127.943, 142.735), stdev = 5.980
  CI (99.9%): [125.915, 129.971] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = S_XhDO_W^_Pjx&0n28]u7^0*gW~#7UR)pxxm`/
r7jL|'"wQ6J^~$'>;http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.993 ns/op
# Warmup Iteration   2: 17.114 ns/op
# Warmup Iteration   3: 17.311 ns/op
# Warmup Iteration   4: 17.356 ns/op
# Warmup Iteration   5: 17.266 ns/op
Iteration   1: 17.326 ns/op
Iteration   2: 17.382 ns/op
Iteration   3: 17.306 ns/op
Iteration   4: 17.281 ns/op
Iteration   5: 17.308 ns/op
Iteration   6: 17.338 ns/op
Iteration   7: 17.360 ns/op
Iteration   8: 17.382 ns/op
Iteration   9: 17.359 ns/op
Iteration  10: 17.387 ns/op
Iteration  11: 17.359 ns/op
Iteration  12: 17.394 ns/op
Iteration  13: 17.375 ns/op
Iteration  14: 17.324 ns/op
Iteration  15: 17.314 ns/op
Iteration  16: 17.345 ns/op
Iteration  17: 17.283 ns/op
Iteration  18: 17.280 ns/op
Iteration  19: 17.302 ns/op
Iteration  20: 17.293 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.086 ns/op
# Warmup Iteration   2: 17.007 ns/op
# Warmup Iteration   3: 16.541 ns/op
# Warmup Iteration   4: 16.562 ns/op
# Warmup Iteration   5: 16.546 ns/op
Iteration   1: 16.560 ns/op
Iteration   2: 16.563 ns/op
Iteration   3: 16.560 ns/op
Iteration   4: 16.584 ns/op
Iteration   5: 16.568 ns/op
Iteration   6: 16.583 ns/op
Iteration   7: 16.560 ns/op
Iteration   8: 16.567 ns/op
Iteration   9: 16.563 ns/op
Iteration  10: 16.550 ns/op
Iteration  11: 16.574 ns/op
Iteration  12: 16.574 ns/op
Iteration  13: 16.554 ns/op
Iteration  14: 16.550 ns/op
Iteration  15: 16.548 ns/op
Iteration  16: 16.568 ns/op
Iteration  17: 16.564 ns/op
Iteration  18: 16.544 ns/op
Iteration  19: 16.585 ns/op
Iteration  20: 16.547 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.107 ns/op
# Warmup Iteration   2: 17.059 ns/op
# Warmup Iteration   3: 16.582 ns/op
# Warmup Iteration   4: 16.588 ns/op
# Warmup Iteration   5: 16.594 ns/op
Iteration   1: 16.592 ns/op
Iteration   2: 16.571 ns/op
Iteration   3: 16.581 ns/op
Iteration   4: 16.595 ns/op
Iteration   5: 16.602 ns/op
Iteration   6: 16.577 ns/op
Iteration   7: 16.571 ns/op
Iteration   8: 16.603 ns/op
Iteration   9: 16.580 ns/op
Iteration  10: 16.594 ns/op
Iteration  11: 16.591 ns/op
Iteration  12: 16.579 ns/op
Iteration  13: 16.571 ns/op
Iteration  14: 16.577 ns/op
Iteration  15: 16.585 ns/op
Iteration  16: 16.591 ns/op
Iteration  17: 16.591 ns/op
Iteration  18: 16.595 ns/op
Iteration  19: 16.590 ns/op
Iteration  20: 16.615 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.007 ns/op
# Warmup Iteration   2: 17.062 ns/op
# Warmup Iteration   3: 16.876 ns/op
# Warmup Iteration   4: 16.853 ns/op
# Warmup Iteration   5: 16.863 ns/op
Iteration   1: 16.848 ns/op
Iteration   2: 16.818 ns/op
Iteration   3: 16.814 ns/op
Iteration   4: 16.845 ns/op
Iteration   5: 16.842 ns/op
Iteration   6: 16.831 ns/op
Iteration   7: 16.836 ns/op
Iteration   8: 16.858 ns/op
Iteration   9: 16.826 ns/op
Iteration  10: 16.825 ns/op
Iteration  11: 16.866 ns/op
Iteration  12: 16.843 ns/op
Iteration  13: 16.846 ns/op
Iteration  14: 16.820 ns/op
Iteration  15: 16.836 ns/op
Iteration  16: 16.850 ns/op
Iteration  17: 16.821 ns/op
Iteration  18: 16.836 ns/op
Iteration  19: 16.843 ns/op
Iteration  20: 16.828 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.088 ns/op
# Warmup Iteration   2: 17.175 ns/op
# Warmup Iteration   3: 16.507 ns/op
# Warmup Iteration   4: 16.501 ns/op
# Warmup Iteration   5: 16.497 ns/op
Iteration   1: 16.479 ns/op
Iteration   2: 16.482 ns/op
Iteration   3: 16.481 ns/op
Iteration   4: 16.490 ns/op
Iteration   5: 16.480 ns/op
Iteration   6: 16.488 ns/op
Iteration   7: 16.494 ns/op
Iteration   8: 16.505 ns/op
Iteration   9: 16.484 ns/op
Iteration  10: 16.486 ns/op
Iteration  11: 16.495 ns/op
Iteration  12: 16.495 ns/op
Iteration  13: 16.508 ns/op
Iteration  14: 16.494 ns/op
Iteration  15: 16.488 ns/op
Iteration  16: 16.489 ns/op
Iteration  17: 16.491 ns/op
Iteration  18: 16.506 ns/op
Iteration  19: 16.477 ns/op
Iteration  20: 16.517 ns/op


Result "benchmark.StringContains.stringContains":
  16.763 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (16.477, 16.763, 17.394), stdev = 0.311
  CI (99.9%): [16.657, 16.868] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  S_XhDO_W^_Pjx&0n28]u7^0*gW~#7UR)pxxm`/
r7jL|'"wQ6J^~$'>;http  avgt  100  127.943 ± 2.028  ns/op
StringContains.stringContains     http  S_XhDO_W^_Pjx&0n28]u7^0*gW~#7UR)pxxm`/
r7jL|'"wQ6J^~$'>;http  avgt  100   16.763 ± 0.105  ns/op

Benchmark result is saved to http_64_0.95_4.csv
