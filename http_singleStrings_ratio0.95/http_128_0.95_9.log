# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = b"6!fjrx.MZ1=>6Nlia'm2,&f]q_4<`d]1si+_SQL MtG8O)IY
S[d?sI(XbsSV/)"V,Q5,ZAfEZufrb+7|hKjE{bw@XR+\KGEUsa@>h/7S' 'Rjv&vWX/httpo~)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 243.893 ns/op
# Warmup Iteration   2: 177.150 ns/op
# Warmup Iteration   3: 146.085 ns/op
# Warmup Iteration   4: 149.954 ns/op
# Warmup Iteration   5: 151.627 ns/op
Iteration   1: 149.292 ns/op
Iteration   2: 145.267 ns/op
Iteration   3: 145.563 ns/op
Iteration   4: 145.184 ns/op
Iteration   5: 145.396 ns/op
Iteration   6: 146.209 ns/op
Iteration   7: 145.239 ns/op
Iteration   8: 145.351 ns/op
Iteration   9: 145.361 ns/op
Iteration  10: 145.392 ns/op
Iteration  11: 144.743 ns/op
Iteration  12: 144.750 ns/op
Iteration  13: 145.471 ns/op
Iteration  14: 144.990 ns/op
Iteration  15: 144.706 ns/op
Iteration  16: 144.895 ns/op
Iteration  17: 144.799 ns/op
Iteration  18: 144.799 ns/op
Iteration  19: 145.086 ns/op
Iteration  20: 145.288 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 250.307 ns/op
# Warmup Iteration   2: 189.064 ns/op
# Warmup Iteration   3: 157.838 ns/op
# Warmup Iteration   4: 158.241 ns/op
# Warmup Iteration   5: 158.902 ns/op
Iteration   1: 159.730 ns/op
Iteration   2: 160.897 ns/op
Iteration   3: 157.268 ns/op
Iteration   4: 157.017 ns/op
Iteration   5: 156.949 ns/op
Iteration   6: 156.993 ns/op
Iteration   7: 156.878 ns/op
Iteration   8: 156.922 ns/op
Iteration   9: 156.852 ns/op
Iteration  10: 156.916 ns/op
Iteration  11: 156.886 ns/op
Iteration  12: 156.553 ns/op
Iteration  13: 156.467 ns/op
Iteration  14: 156.633 ns/op
Iteration  15: 156.528 ns/op
Iteration  16: 156.608 ns/op
Iteration  17: 157.770 ns/op
Iteration  18: 156.591 ns/op
Iteration  19: 156.895 ns/op
Iteration  20: 156.820 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 243.355 ns/op
# Warmup Iteration   2: 186.376 ns/op
# Warmup Iteration   3: 157.611 ns/op
# Warmup Iteration   4: 158.002 ns/op
# Warmup Iteration   5: 158.610 ns/op
Iteration   1: 159.351 ns/op
Iteration   2: 160.456 ns/op
Iteration   3: 156.646 ns/op
Iteration   4: 156.638 ns/op
Iteration   5: 156.684 ns/op
Iteration   6: 156.721 ns/op
Iteration   7: 156.612 ns/op
Iteration   8: 157.434 ns/op
Iteration   9: 156.746 ns/op
Iteration  10: 156.579 ns/op
Iteration  11: 156.812 ns/op
Iteration  12: 156.153 ns/op
Iteration  13: 156.169 ns/op
Iteration  14: 156.242 ns/op
Iteration  15: 156.216 ns/op
Iteration  16: 156.172 ns/op
Iteration  17: 156.371 ns/op
Iteration  18: 156.449 ns/op
Iteration  19: 156.280 ns/op
Iteration  20: 157.742 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 235.755 ns/op
# Warmup Iteration   2: 171.713 ns/op
# Warmup Iteration   3: 146.012 ns/op
# Warmup Iteration   4: 149.070 ns/op
# Warmup Iteration   5: 147.695 ns/op
Iteration   1: 148.622 ns/op
Iteration   2: 145.350 ns/op
Iteration   3: 145.173 ns/op
Iteration   4: 145.271 ns/op
Iteration   5: 145.958 ns/op
Iteration   6: 145.679 ns/op
Iteration   7: 145.360 ns/op
Iteration   8: 145.184 ns/op
Iteration   9: 145.170 ns/op
Iteration  10: 145.265 ns/op
Iteration  11: 145.297 ns/op
Iteration  12: 146.671 ns/op
Iteration  13: 145.027 ns/op
Iteration  14: 144.870 ns/op
Iteration  15: 144.759 ns/op
Iteration  16: 145.207 ns/op
Iteration  17: 145.120 ns/op
Iteration  18: 145.302 ns/op
Iteration  19: 145.338 ns/op
Iteration  20: 145.217 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 252.918 ns/op
# Warmup Iteration   2: 196.783 ns/op
# Warmup Iteration   3: 178.245 ns/op
# Warmup Iteration   4: 179.530 ns/op
# Warmup Iteration   5: 179.578 ns/op
Iteration   1: 180.706 ns/op
Iteration   2: 181.792 ns/op
Iteration   3: 177.786 ns/op
Iteration   4: 176.585 ns/op
Iteration   5: 177.549 ns/op
Iteration   6: 178.003 ns/op
Iteration   7: 177.576 ns/op
Iteration   8: 178.422 ns/op
Iteration   9: 178.714 ns/op
Iteration  10: 178.120 ns/op
Iteration  11: 177.740 ns/op
Iteration  12: 176.593 ns/op
Iteration  13: 177.696 ns/op
Iteration  14: 178.157 ns/op
Iteration  15: 177.136 ns/op
Iteration  16: 177.004 ns/op
Iteration  17: 177.303 ns/op
Iteration  18: 177.043 ns/op
Iteration  19: 177.059 ns/op
Iteration  20: 176.671 ns/op


Result "benchmark.StringContains.regexMatches":
  156.579 ±(99.9%) 4.056 ns/op [Average]
  (min, avg, max) = (144.706, 156.579, 181.792), stdev = 11.960
  CI (99.9%): [152.523, 160.636] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = b"6!fjrx.MZ1=>6Nlia'm2,&f]q_4<`d]1si+_SQL MtG8O)IY
S[d?sI(XbsSV/)"V,Q5,ZAfEZufrb+7|hKjE{bw@XR+\KGEUsa@>h/7S' 'Rjv&vWX/httpo~)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 24.866 ns/op
# Warmup Iteration   2: 26.201 ns/op
# Warmup Iteration   3: 25.423 ns/op
# Warmup Iteration   4: 25.537 ns/op
# Warmup Iteration   5: 25.523 ns/op
Iteration   1: 25.554 ns/op
Iteration   2: 25.537 ns/op
Iteration   3: 25.508 ns/op
Iteration   4: 25.514 ns/op
Iteration   5: 25.529 ns/op
Iteration   6: 25.519 ns/op
Iteration   7: 25.530 ns/op
Iteration   8: 25.529 ns/op
Iteration   9: 25.540 ns/op
Iteration  10: 25.537 ns/op
Iteration  11: 25.550 ns/op
Iteration  12: 25.444 ns/op
Iteration  13: 25.441 ns/op
Iteration  14: 25.461 ns/op
Iteration  15: 25.408 ns/op
Iteration  16: 25.461 ns/op
Iteration  17: 25.459 ns/op
Iteration  18: 25.448 ns/op
Iteration  19: 25.441 ns/op
Iteration  20: 25.425 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 25.036 ns/op
# Warmup Iteration   2: 26.154 ns/op
# Warmup Iteration   3: 25.454 ns/op
# Warmup Iteration   4: 25.443 ns/op
# Warmup Iteration   5: 25.437 ns/op
Iteration   1: 25.419 ns/op
Iteration   2: 25.438 ns/op
Iteration   3: 25.422 ns/op
Iteration   4: 25.451 ns/op
Iteration   5: 25.427 ns/op
Iteration   6: 25.431 ns/op
Iteration   7: 25.422 ns/op
Iteration   8: 25.463 ns/op
Iteration   9: 25.428 ns/op
Iteration  10: 25.438 ns/op
Iteration  11: 25.438 ns/op
Iteration  12: 25.436 ns/op
Iteration  13: 25.429 ns/op
Iteration  14: 25.460 ns/op
Iteration  15: 25.488 ns/op
Iteration  16: 25.413 ns/op
Iteration  17: 25.419 ns/op
Iteration  18: 25.411 ns/op
Iteration  19: 25.402 ns/op
Iteration  20: 25.421 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.027 ns/op
# Warmup Iteration   2: 26.241 ns/op
# Warmup Iteration   3: 26.387 ns/op
# Warmup Iteration   4: 26.400 ns/op
# Warmup Iteration   5: 26.392 ns/op
Iteration   1: 26.411 ns/op
Iteration   2: 26.373 ns/op
Iteration   3: 26.422 ns/op
Iteration   4: 26.426 ns/op
Iteration   5: 26.369 ns/op
Iteration   6: 26.402 ns/op
Iteration   7: 26.441 ns/op
Iteration   8: 26.525 ns/op
Iteration   9: 26.458 ns/op
Iteration  10: 26.420 ns/op
Iteration  11: 26.450 ns/op
Iteration  12: 26.426 ns/op
Iteration  13: 26.415 ns/op
Iteration  14: 26.409 ns/op
Iteration  15: 26.452 ns/op
Iteration  16: 26.466 ns/op
Iteration  17: 26.400 ns/op
Iteration  18: 26.392 ns/op
Iteration  19: 26.406 ns/op
Iteration  20: 26.434 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 24.848 ns/op
# Warmup Iteration   2: 26.098 ns/op
# Warmup Iteration   3: 26.409 ns/op
# Warmup Iteration   4: 26.456 ns/op
# Warmup Iteration   5: 26.404 ns/op
Iteration   1: 26.391 ns/op
Iteration   2: 26.437 ns/op
Iteration   3: 26.407 ns/op
Iteration   4: 26.418 ns/op
Iteration   5: 26.438 ns/op
Iteration   6: 26.397 ns/op
Iteration   7: 26.424 ns/op
Iteration   8: 26.423 ns/op
Iteration   9: 26.405 ns/op
Iteration  10: 26.421 ns/op
Iteration  11: 26.393 ns/op
Iteration  12: 26.415 ns/op
Iteration  13: 26.396 ns/op
Iteration  14: 26.441 ns/op
Iteration  15: 26.439 ns/op
Iteration  16: 26.412 ns/op
Iteration  17: 26.425 ns/op
Iteration  18: 26.403 ns/op
Iteration  19: 26.422 ns/op
Iteration  20: 26.426 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 24.993 ns/op
# Warmup Iteration   2: 26.154 ns/op
# Warmup Iteration   3: 25.438 ns/op
# Warmup Iteration   4: 25.456 ns/op
# Warmup Iteration   5: 25.423 ns/op
Iteration   1: 25.440 ns/op
Iteration   2: 25.464 ns/op
Iteration   3: 25.444 ns/op
Iteration   4: 25.446 ns/op
Iteration   5: 25.410 ns/op
Iteration   6: 25.411 ns/op
Iteration   7: 25.437 ns/op
Iteration   8: 25.424 ns/op
Iteration   9: 25.442 ns/op
Iteration  10: 25.422 ns/op
Iteration  11: 25.449 ns/op
Iteration  12: 25.444 ns/op
Iteration  13: 25.446 ns/op
Iteration  14: 25.450 ns/op
Iteration  15: 25.462 ns/op
Iteration  16: 25.479 ns/op
Iteration  17: 25.465 ns/op
Iteration  18: 25.456 ns/op
Iteration  19: 25.448 ns/op
Iteration  20: 25.443 ns/op


Result "benchmark.StringContains.stringContains":
  25.842 ±(99.9%) 0.162 ns/op [Average]
  (min, avg, max) = (25.402, 25.842, 26.525), stdev = 0.476
  CI (99.9%): [25.681, 26.004] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  b"6!fjrx.MZ1=>6Nlia'm2,&f]q_4<`d]1si+_SQL MtG8O)IY
S[d?sI(XbsSV/)"V,Q5,ZAfEZufrb+7|hKjE{bw@XR+\KGEUsa@>h/7S' 'Rjv&vWX/httpo~  avgt  100  156.579 ± 4.056  ns/op
StringContains.stringContains     http  b"6!fjrx.MZ1=>6Nlia'm2,&f]q_4<`d]1si+_SQL MtG8O)IY
S[d?sI(XbsSV/)"V,Q5,ZAfEZufrb+7|hKjE{bw@XR+\KGEUsa@>h/7S' 'Rjv&vWX/httpo~  avgt  100   25.842 ± 0.162  ns/op

Benchmark result is saved to http_128_0.95_9.csv
