# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = r]#i?sg#ri%XATzO9,&~+a(/WoQHm=xoRvDZ/BBn3e#B'zdVBu$9q?h~\phttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 226.244 ns/op
# Warmup Iteration   2: 161.044 ns/op
# Warmup Iteration   3: 142.983 ns/op
# Warmup Iteration   4: 141.375 ns/op
# Warmup Iteration   5: 142.464 ns/op
Iteration   1: 143.543 ns/op
Iteration   2: 139.464 ns/op
Iteration   3: 139.427 ns/op
Iteration   4: 139.669 ns/op
Iteration   5: 140.225 ns/op
Iteration   6: 140.225 ns/op
Iteration   7: 139.630 ns/op
Iteration   8: 139.782 ns/op
Iteration   9: 139.714 ns/op
Iteration  10: 139.439 ns/op
Iteration  11: 139.529 ns/op
Iteration  12: 139.437 ns/op
Iteration  13: 139.464 ns/op
Iteration  14: 139.445 ns/op
Iteration  15: 139.533 ns/op
Iteration  16: 139.504 ns/op
Iteration  17: 139.227 ns/op
Iteration  18: 139.669 ns/op
Iteration  19: 139.514 ns/op
Iteration  20: 139.337 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 214.301 ns/op
# Warmup Iteration   2: 143.325 ns/op
# Warmup Iteration   3: 124.611 ns/op
# Warmup Iteration   4: 125.196 ns/op
# Warmup Iteration   5: 126.889 ns/op
Iteration   1: 126.480 ns/op
Iteration   2: 123.634 ns/op
Iteration   3: 123.595 ns/op
Iteration   4: 123.640 ns/op
Iteration   5: 124.295 ns/op
Iteration   6: 123.535 ns/op
Iteration   7: 123.461 ns/op
Iteration   8: 123.824 ns/op
Iteration   9: 123.181 ns/op
Iteration  10: 123.166 ns/op
Iteration  11: 124.151 ns/op
Iteration  12: 123.712 ns/op
Iteration  13: 123.231 ns/op
Iteration  14: 123.442 ns/op
Iteration  15: 123.356 ns/op
Iteration  16: 123.712 ns/op
Iteration  17: 123.460 ns/op
Iteration  18: 123.711 ns/op
Iteration  19: 123.753 ns/op
Iteration  20: 124.418 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 226.629 ns/op
# Warmup Iteration   2: 159.958 ns/op
# Warmup Iteration   3: 142.179 ns/op
# Warmup Iteration   4: 141.350 ns/op
# Warmup Iteration   5: 142.118 ns/op
Iteration   1: 143.239 ns/op
Iteration   2: 139.811 ns/op
Iteration   3: 139.703 ns/op
Iteration   4: 139.648 ns/op
Iteration   5: 139.682 ns/op
Iteration   6: 140.243 ns/op
Iteration   7: 139.640 ns/op
Iteration   8: 139.661 ns/op
Iteration   9: 140.303 ns/op
Iteration  10: 139.217 ns/op
Iteration  11: 139.179 ns/op
Iteration  12: 139.146 ns/op
Iteration  13: 139.131 ns/op
Iteration  14: 139.445 ns/op
Iteration  15: 139.869 ns/op
Iteration  16: 139.221 ns/op
Iteration  17: 139.303 ns/op
Iteration  18: 139.305 ns/op
Iteration  19: 139.724 ns/op
Iteration  20: 139.221 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 211.744 ns/op
# Warmup Iteration   2: 143.387 ns/op
# Warmup Iteration   3: 126.934 ns/op
# Warmup Iteration   4: 128.922 ns/op
# Warmup Iteration   5: 128.614 ns/op
Iteration   1: 129.722 ns/op
Iteration   2: 125.867 ns/op
Iteration   3: 125.968 ns/op
Iteration   4: 125.611 ns/op
Iteration   5: 126.362 ns/op
Iteration   6: 126.963 ns/op
Iteration   7: 126.010 ns/op
Iteration   8: 126.052 ns/op
Iteration   9: 125.673 ns/op
Iteration  10: 125.918 ns/op
Iteration  11: 125.579 ns/op
Iteration  12: 125.613 ns/op
Iteration  13: 125.529 ns/op
Iteration  14: 125.858 ns/op
Iteration  15: 125.555 ns/op
Iteration  16: 125.646 ns/op
Iteration  17: 125.661 ns/op
Iteration  18: 125.997 ns/op
Iteration  19: 125.605 ns/op
Iteration  20: 125.539 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 223.481 ns/op
# Warmup Iteration   2: 158.260 ns/op
# Warmup Iteration   3: 142.285 ns/op
# Warmup Iteration   4: 141.450 ns/op
# Warmup Iteration   5: 142.196 ns/op
Iteration   1: 143.169 ns/op
Iteration   2: 140.160 ns/op
Iteration   3: 140.125 ns/op
Iteration   4: 140.053 ns/op
Iteration   5: 140.151 ns/op
Iteration   6: 140.636 ns/op
Iteration   7: 140.059 ns/op
Iteration   8: 140.090 ns/op
Iteration   9: 140.256 ns/op
Iteration  10: 139.838 ns/op
Iteration  11: 139.725 ns/op
Iteration  12: 139.632 ns/op
Iteration  13: 139.739 ns/op
Iteration  14: 139.667 ns/op
Iteration  15: 140.257 ns/op
Iteration  16: 139.846 ns/op
Iteration  17: 139.721 ns/op
Iteration  18: 139.867 ns/op
Iteration  19: 139.824 ns/op
Iteration  20: 139.817 ns/op


Result "benchmark.StringContains.regexMatches":
  133.896 ±(99.9%) 2.528 ns/op [Average]
  (min, avg, max) = (123.166, 133.896, 143.543), stdev = 7.455
  CI (99.9%): [131.368, 136.424] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = r]#i?sg#ri%XATzO9,&~+a(/WoQHm=xoRvDZ/BBn3e#B'zdVBu$9q?h~\phttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.097 ns/op
# Warmup Iteration   2: 16.977 ns/op
# Warmup Iteration   3: 16.833 ns/op
# Warmup Iteration   4: 16.844 ns/op
# Warmup Iteration   5: 16.837 ns/op
Iteration   1: 16.819 ns/op
Iteration   2: 16.796 ns/op
Iteration   3: 16.832 ns/op
Iteration   4: 16.823 ns/op
Iteration   5: 16.818 ns/op
Iteration   6: 16.860 ns/op
Iteration   7: 16.823 ns/op
Iteration   8: 16.823 ns/op
Iteration   9: 16.861 ns/op
Iteration  10: 16.838 ns/op
Iteration  11: 16.796 ns/op
Iteration  12: 16.775 ns/op
Iteration  13: 16.806 ns/op
Iteration  14: 16.770 ns/op
Iteration  15: 16.810 ns/op
Iteration  16: 16.832 ns/op
Iteration  17: 16.799 ns/op
Iteration  18: 16.808 ns/op
Iteration  19: 16.816 ns/op
Iteration  20: 16.793 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.969 ns/op
# Warmup Iteration   2: 17.149 ns/op
# Warmup Iteration   3: 16.521 ns/op
# Warmup Iteration   4: 16.512 ns/op
# Warmup Iteration   5: 16.502 ns/op
Iteration   1: 16.528 ns/op
Iteration   2: 16.503 ns/op
Iteration   3: 16.509 ns/op
Iteration   4: 16.498 ns/op
Iteration   5: 16.518 ns/op
Iteration   6: 16.527 ns/op
Iteration   7: 16.503 ns/op
Iteration   8: 16.502 ns/op
Iteration   9: 16.512 ns/op
Iteration  10: 16.516 ns/op
Iteration  11: 16.528 ns/op
Iteration  12: 16.519 ns/op
Iteration  13: 16.511 ns/op
Iteration  14: 16.524 ns/op
Iteration  15: 16.519 ns/op
Iteration  16: 16.511 ns/op
Iteration  17: 16.507 ns/op
Iteration  18: 16.519 ns/op
Iteration  19: 16.504 ns/op
Iteration  20: 16.504 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.118 ns/op
# Warmup Iteration   2: 17.030 ns/op
# Warmup Iteration   3: 16.844 ns/op
# Warmup Iteration   4: 16.876 ns/op
# Warmup Iteration   5: 16.877 ns/op
Iteration   1: 16.831 ns/op
Iteration   2: 16.880 ns/op
Iteration   3: 16.841 ns/op
Iteration   4: 16.890 ns/op
Iteration   5: 16.923 ns/op
Iteration   6: 16.872 ns/op
Iteration   7: 16.901 ns/op
Iteration   8: 16.906 ns/op
Iteration   9: 16.843 ns/op
Iteration  10: 16.851 ns/op
Iteration  11: 16.861 ns/op
Iteration  12: 16.851 ns/op
Iteration  13: 16.862 ns/op
Iteration  14: 16.847 ns/op
Iteration  15: 16.837 ns/op
Iteration  16: 16.909 ns/op
Iteration  17: 16.848 ns/op
Iteration  18: 16.847 ns/op
Iteration  19: 16.841 ns/op
Iteration  20: 16.903 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.110 ns/op
# Warmup Iteration   2: 17.070 ns/op
# Warmup Iteration   3: 16.556 ns/op
# Warmup Iteration   4: 16.545 ns/op
# Warmup Iteration   5: 16.554 ns/op
Iteration   1: 16.553 ns/op
Iteration   2: 16.559 ns/op
Iteration   3: 16.536 ns/op
Iteration   4: 16.539 ns/op
Iteration   5: 16.545 ns/op
Iteration   6: 16.526 ns/op
Iteration   7: 16.537 ns/op
Iteration   8: 16.562 ns/op
Iteration   9: 16.558 ns/op
Iteration  10: 16.544 ns/op
Iteration  11: 16.540 ns/op
Iteration  12: 16.529 ns/op
Iteration  13: 16.521 ns/op
Iteration  14: 16.531 ns/op
Iteration  15: 16.540 ns/op
Iteration  16: 16.544 ns/op
Iteration  17: 16.532 ns/op
Iteration  18: 16.578 ns/op
Iteration  19: 16.556 ns/op
Iteration  20: 16.563 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.923 ns/op
# Warmup Iteration   2: 17.012 ns/op
# Warmup Iteration   3: 16.511 ns/op
# Warmup Iteration   4: 16.521 ns/op
# Warmup Iteration   5: 16.537 ns/op
Iteration   1: 16.533 ns/op
Iteration   2: 16.539 ns/op
Iteration   3: 16.521 ns/op
Iteration   4: 16.546 ns/op
Iteration   5: 16.518 ns/op
Iteration   6: 16.536 ns/op
Iteration   7: 16.515 ns/op
Iteration   8: 16.543 ns/op
Iteration   9: 16.524 ns/op
Iteration  10: 16.516 ns/op
Iteration  11: 16.506 ns/op
Iteration  12: 16.514 ns/op
Iteration  13: 16.523 ns/op
Iteration  14: 16.512 ns/op
Iteration  15: 16.531 ns/op
Iteration  16: 16.502 ns/op
Iteration  17: 16.518 ns/op
Iteration  18: 16.533 ns/op
Iteration  19: 16.524 ns/op
Iteration  20: 16.528 ns/op


Result "benchmark.StringContains.stringContains":
  16.653 ±(99.9%) 0.053 ns/op [Average]
  (min, avg, max) = (16.498, 16.653, 16.923), stdev = 0.157
  CI (99.9%): [16.600, 16.706] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  r]#i?sg#ri%XATzO9,&~+a(/WoQHm=xoRvDZ/BBn3e#B'zdVBu$9q?h~\phttp  avgt  100  133.896 ± 2.528  ns/op
StringContains.stringContains     http  r]#i?sg#ri%XATzO9,&~+a(/WoQHm=xoRvDZ/BBn3e#B'zdVBu$9q?h~\phttp  avgt  100   16.653 ± 0.053  ns/op

Benchmark result is saved to http_64_0.95_0.csv
