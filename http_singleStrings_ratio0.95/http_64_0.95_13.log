# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = l&`L!+ouOhFJj[u#Ev7zE1W\>Ub.p'nMI{O~'pt~csu5mwC]L	D_26[m,Q(http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 250.696 ns/op
# Warmup Iteration   2: 175.244 ns/op
# Warmup Iteration   3: 140.644 ns/op
# Warmup Iteration   4: 144.767 ns/op
# Warmup Iteration   5: 142.893 ns/op
Iteration   1: 144.489 ns/op
Iteration   2: 140.560 ns/op
Iteration   3: 139.975 ns/op
Iteration   4: 140.002 ns/op
Iteration   5: 139.553 ns/op
Iteration   6: 139.753 ns/op
Iteration   7: 139.725 ns/op
Iteration   8: 140.844 ns/op
Iteration   9: 139.933 ns/op
Iteration  10: 139.551 ns/op
Iteration  11: 141.181 ns/op
Iteration  12: 139.407 ns/op
Iteration  13: 139.612 ns/op
Iteration  14: 139.612 ns/op
Iteration  15: 139.370 ns/op
Iteration  16: 139.863 ns/op
Iteration  17: 139.326 ns/op
Iteration  18: 139.265 ns/op
Iteration  19: 139.868 ns/op
Iteration  20: 139.905 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 214.342 ns/op
# Warmup Iteration   2: 143.150 ns/op
# Warmup Iteration   3: 125.424 ns/op
# Warmup Iteration   4: 126.002 ns/op
# Warmup Iteration   5: 127.171 ns/op
Iteration   1: 127.682 ns/op
Iteration   2: 124.393 ns/op
Iteration   3: 124.419 ns/op
Iteration   4: 124.514 ns/op
Iteration   5: 124.960 ns/op
Iteration   6: 124.478 ns/op
Iteration   7: 124.382 ns/op
Iteration   8: 124.423 ns/op
Iteration   9: 124.240 ns/op
Iteration  10: 124.004 ns/op
Iteration  11: 123.926 ns/op
Iteration  12: 123.936 ns/op
Iteration  13: 124.326 ns/op
Iteration  14: 124.511 ns/op
Iteration  15: 124.172 ns/op
Iteration  16: 124.058 ns/op
Iteration  17: 124.217 ns/op
Iteration  18: 124.089 ns/op
Iteration  19: 124.519 ns/op
Iteration  20: 124.405 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 212.738 ns/op
# Warmup Iteration   2: 144.510 ns/op
# Warmup Iteration   3: 127.466 ns/op
# Warmup Iteration   4: 127.194 ns/op
# Warmup Iteration   5: 127.921 ns/op
Iteration   1: 129.412 ns/op
Iteration   2: 125.566 ns/op
Iteration   3: 125.457 ns/op
Iteration   4: 125.544 ns/op
Iteration   5: 126.258 ns/op
Iteration   6: 125.552 ns/op
Iteration   7: 126.770 ns/op
Iteration   8: 126.583 ns/op
Iteration   9: 125.700 ns/op
Iteration  10: 125.089 ns/op
Iteration  11: 125.002 ns/op
Iteration  12: 124.949 ns/op
Iteration  13: 125.043 ns/op
Iteration  14: 125.426 ns/op
Iteration  15: 124.934 ns/op
Iteration  16: 125.097 ns/op
Iteration  17: 125.082 ns/op
Iteration  18: 125.498 ns/op
Iteration  19: 129.009 ns/op
Iteration  20: 125.034 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 225.066 ns/op
# Warmup Iteration   2: 157.981 ns/op
# Warmup Iteration   3: 142.097 ns/op
# Warmup Iteration   4: 141.209 ns/op
# Warmup Iteration   5: 141.966 ns/op
Iteration   1: 142.937 ns/op
Iteration   2: 139.814 ns/op
Iteration   3: 139.787 ns/op
Iteration   4: 139.599 ns/op
Iteration   5: 139.480 ns/op
Iteration   6: 140.249 ns/op
Iteration   7: 139.522 ns/op
Iteration   8: 139.656 ns/op
Iteration   9: 139.843 ns/op
Iteration  10: 139.323 ns/op
Iteration  11: 139.390 ns/op
Iteration  12: 139.319 ns/op
Iteration  13: 139.769 ns/op
Iteration  14: 139.806 ns/op
Iteration  15: 139.486 ns/op
Iteration  16: 139.619 ns/op
Iteration  17: 139.455 ns/op
Iteration  18: 139.451 ns/op
Iteration  19: 139.491 ns/op
Iteration  20: 139.660 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.401 ns/op
# Warmup Iteration   2: 143.875 ns/op
# Warmup Iteration   3: 129.046 ns/op
# Warmup Iteration   4: 127.955 ns/op
# Warmup Iteration   5: 128.640 ns/op
Iteration   1: 129.766 ns/op
Iteration   2: 126.572 ns/op
Iteration   3: 126.424 ns/op
Iteration   4: 126.409 ns/op
Iteration   5: 126.911 ns/op
Iteration   6: 126.406 ns/op
Iteration   7: 126.469 ns/op
Iteration   8: 126.338 ns/op
Iteration   9: 126.007 ns/op
Iteration  10: 126.207 ns/op
Iteration  11: 126.184 ns/op
Iteration  12: 126.105 ns/op
Iteration  13: 126.059 ns/op
Iteration  14: 127.218 ns/op
Iteration  15: 126.193 ns/op
Iteration  16: 126.291 ns/op
Iteration  17: 126.148 ns/op
Iteration  18: 126.416 ns/op
Iteration  19: 126.194 ns/op
Iteration  20: 126.202 ns/op


Result "benchmark.StringContains.regexMatches":
  131.346 ±(99.9%) 2.423 ns/op [Average]
  (min, avg, max) = (123.926, 131.346, 144.489), stdev = 7.146
  CI (99.9%): [128.923, 133.770] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = l&`L!+ouOhFJj[u#Ev7zE1W\>Ub.p'nMI{O~'pt~csu5mwC]L	D_26[m,Q(http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.068 ns/op
# Warmup Iteration   2: 16.992 ns/op
# Warmup Iteration   3: 16.589 ns/op
# Warmup Iteration   4: 16.566 ns/op
# Warmup Iteration   5: 16.578 ns/op
Iteration   1: 16.575 ns/op
Iteration   2: 16.578 ns/op
Iteration   3: 16.606 ns/op
Iteration   4: 16.583 ns/op
Iteration   5: 16.585 ns/op
Iteration   6: 16.581 ns/op
Iteration   7: 16.582 ns/op
Iteration   8: 16.591 ns/op
Iteration   9: 16.580 ns/op
Iteration  10: 16.577 ns/op
Iteration  11: 16.576 ns/op
Iteration  12: 16.595 ns/op
Iteration  13: 16.586 ns/op
Iteration  14: 16.579 ns/op
Iteration  15: 16.578 ns/op
Iteration  16: 16.587 ns/op
Iteration  17: 16.586 ns/op
Iteration  18: 16.586 ns/op
Iteration  19: 16.574 ns/op
Iteration  20: 16.584 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.059 ns/op
# Warmup Iteration   2: 17.032 ns/op
# Warmup Iteration   3: 16.515 ns/op
# Warmup Iteration   4: 16.545 ns/op
# Warmup Iteration   5: 16.527 ns/op
Iteration   1: 16.526 ns/op
Iteration   2: 16.535 ns/op
Iteration   3: 16.541 ns/op
Iteration   4: 16.541 ns/op
Iteration   5: 16.530 ns/op
Iteration   6: 16.541 ns/op
Iteration   7: 16.544 ns/op
Iteration   8: 16.518 ns/op
Iteration   9: 16.519 ns/op
Iteration  10: 16.528 ns/op
Iteration  11: 16.513 ns/op
Iteration  12: 16.517 ns/op
Iteration  13: 16.530 ns/op
Iteration  14: 16.522 ns/op
Iteration  15: 16.532 ns/op
Iteration  16: 16.545 ns/op
Iteration  17: 16.543 ns/op
Iteration  18: 16.527 ns/op
Iteration  19: 16.549 ns/op
Iteration  20: 16.540 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.966 ns/op
# Warmup Iteration   2: 17.076 ns/op
# Warmup Iteration   3: 16.865 ns/op
# Warmup Iteration   4: 16.863 ns/op
# Warmup Iteration   5: 16.892 ns/op
Iteration   1: 16.854 ns/op
Iteration   2: 16.853 ns/op
Iteration   3: 16.851 ns/op
Iteration   4: 16.878 ns/op
Iteration   5: 16.885 ns/op
Iteration   6: 16.899 ns/op
Iteration   7: 16.876 ns/op
Iteration   8: 16.898 ns/op
Iteration   9: 16.862 ns/op
Iteration  10: 16.858 ns/op
Iteration  11: 16.867 ns/op
Iteration  12: 16.840 ns/op
Iteration  13: 16.855 ns/op
Iteration  14: 16.864 ns/op
Iteration  15: 16.850 ns/op
Iteration  16: 16.859 ns/op
Iteration  17: 16.815 ns/op
Iteration  18: 16.872 ns/op
Iteration  19: 16.845 ns/op
Iteration  20: 16.869 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.074 ns/op
# Warmup Iteration   2: 17.017 ns/op
# Warmup Iteration   3: 16.555 ns/op
# Warmup Iteration   4: 16.562 ns/op
# Warmup Iteration   5: 16.552 ns/op
Iteration   1: 16.547 ns/op
Iteration   2: 16.564 ns/op
Iteration   3: 16.546 ns/op
Iteration   4: 16.548 ns/op
Iteration   5: 16.556 ns/op
Iteration   6: 16.568 ns/op
Iteration   7: 16.542 ns/op
Iteration   8: 16.573 ns/op
Iteration   9: 16.550 ns/op
Iteration  10: 16.562 ns/op
Iteration  11: 16.560 ns/op
Iteration  12: 16.563 ns/op
Iteration  13: 16.550 ns/op
Iteration  14: 16.555 ns/op
Iteration  15: 16.554 ns/op
Iteration  16: 16.547 ns/op
Iteration  17: 16.572 ns/op
Iteration  18: 16.559 ns/op
Iteration  19: 16.549 ns/op
Iteration  20: 16.561 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.978 ns/op
# Warmup Iteration   2: 17.075 ns/op
# Warmup Iteration   3: 17.276 ns/op
# Warmup Iteration   4: 17.267 ns/op
# Warmup Iteration   5: 17.302 ns/op
Iteration   1: 17.283 ns/op
Iteration   2: 17.269 ns/op
Iteration   3: 17.296 ns/op
Iteration   4: 17.294 ns/op
Iteration   5: 17.332 ns/op
Iteration   6: 17.239 ns/op
Iteration   7: 17.274 ns/op
Iteration   8: 17.291 ns/op
Iteration   9: 17.243 ns/op
Iteration  10: 17.269 ns/op
Iteration  11: 17.273 ns/op
Iteration  12: 17.270 ns/op
Iteration  13: 17.227 ns/op
Iteration  14: 17.279 ns/op
Iteration  15: 17.226 ns/op
Iteration  16: 17.226 ns/op
Iteration  17: 17.266 ns/op
Iteration  18: 17.264 ns/op
Iteration  19: 17.267 ns/op
Iteration  20: 17.243 ns/op


Result "benchmark.StringContains.stringContains":
  16.760 ±(99.9%) 0.096 ns/op [Average]
  (min, avg, max) = (16.513, 16.760, 17.332), stdev = 0.282
  CI (99.9%): [16.665, 16.856] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  l&`L!+ouOhFJj[u#Ev7zE1W\>Ub.p'nMI{O~'pt~csu5mwC]L	D_26[m,Q(http  avgt  100  131.346 ± 2.423  ns/op
StringContains.stringContains     http  l&`L!+ouOhFJj[u#Ev7zE1W\>Ub.p'nMI{O~'pt~csu5mwC]L	D_26[m,Q(http  avgt  100   16.760 ± 0.096  ns/op

Benchmark result is saved to http_64_0.95_13.csv
