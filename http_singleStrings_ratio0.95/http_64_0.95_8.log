# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 5#L/Q_)]qBY&&A+|,b,nmvwU" JUn_lef"3J~7w)c7E'g8[L+d3|#Z$D:ohttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 229.499 ns/op
# Warmup Iteration   2: 159.767 ns/op
# Warmup Iteration   3: 142.219 ns/op
# Warmup Iteration   4: 141.701 ns/op
# Warmup Iteration   5: 142.096 ns/op
Iteration   1: 143.280 ns/op
Iteration   2: 140.351 ns/op
Iteration   3: 139.829 ns/op
Iteration   4: 139.661 ns/op
Iteration   5: 140.031 ns/op
Iteration   6: 140.679 ns/op
Iteration   7: 139.601 ns/op
Iteration   8: 139.583 ns/op
Iteration   9: 139.687 ns/op
Iteration  10: 139.312 ns/op
Iteration  11: 139.520 ns/op
Iteration  12: 140.075 ns/op
Iteration  13: 139.657 ns/op
Iteration  14: 139.426 ns/op
Iteration  15: 139.758 ns/op
Iteration  16: 139.605 ns/op
Iteration  17: 139.702 ns/op
Iteration  18: 139.543 ns/op
Iteration  19: 139.550 ns/op
Iteration  20: 139.592 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.689 ns/op
# Warmup Iteration   2: 145.632 ns/op
# Warmup Iteration   3: 127.036 ns/op
# Warmup Iteration   4: 127.565 ns/op
# Warmup Iteration   5: 128.623 ns/op
Iteration   1: 129.934 ns/op
Iteration   2: 126.044 ns/op
Iteration   3: 126.069 ns/op
Iteration   4: 125.984 ns/op
Iteration   5: 126.591 ns/op
Iteration   6: 126.061 ns/op
Iteration   7: 126.057 ns/op
Iteration   8: 126.068 ns/op
Iteration   9: 125.856 ns/op
Iteration  10: 125.651 ns/op
Iteration  11: 125.622 ns/op
Iteration  12: 125.587 ns/op
Iteration  13: 125.602 ns/op
Iteration  14: 125.784 ns/op
Iteration  15: 125.772 ns/op
Iteration  16: 125.635 ns/op
Iteration  17: 125.624 ns/op
Iteration  18: 126.019 ns/op
Iteration  19: 125.748 ns/op
Iteration  20: 125.753 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 212.717 ns/op
# Warmup Iteration   2: 142.646 ns/op
# Warmup Iteration   3: 124.523 ns/op
# Warmup Iteration   4: 125.143 ns/op
# Warmup Iteration   5: 128.510 ns/op
Iteration   1: 124.956 ns/op
Iteration   2: 123.711 ns/op
Iteration   3: 123.720 ns/op
Iteration   4: 124.200 ns/op
Iteration   5: 123.658 ns/op
Iteration   6: 123.712 ns/op
Iteration   7: 123.671 ns/op
Iteration   8: 124.133 ns/op
Iteration   9: 123.980 ns/op
Iteration  10: 123.379 ns/op
Iteration  11: 123.981 ns/op
Iteration  12: 123.850 ns/op
Iteration  13: 123.431 ns/op
Iteration  14: 123.435 ns/op
Iteration  15: 123.514 ns/op
Iteration  16: 124.323 ns/op
Iteration  17: 123.485 ns/op
Iteration  18: 123.741 ns/op
Iteration  19: 123.856 ns/op
Iteration  20: 124.329 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 212.103 ns/op
# Warmup Iteration   2: 143.802 ns/op
# Warmup Iteration   3: 127.155 ns/op
# Warmup Iteration   4: 127.774 ns/op
# Warmup Iteration   5: 128.647 ns/op
Iteration   1: 129.473 ns/op
Iteration   2: 126.077 ns/op
Iteration   3: 126.146 ns/op
Iteration   4: 126.211 ns/op
Iteration   5: 128.430 ns/op
Iteration   6: 126.228 ns/op
Iteration   7: 126.245 ns/op
Iteration   8: 126.336 ns/op
Iteration   9: 125.856 ns/op
Iteration  10: 126.754 ns/op
Iteration  11: 125.853 ns/op
Iteration  12: 126.016 ns/op
Iteration  13: 125.955 ns/op
Iteration  14: 126.267 ns/op
Iteration  15: 126.215 ns/op
Iteration  16: 126.329 ns/op
Iteration  17: 126.409 ns/op
Iteration  18: 126.740 ns/op
Iteration  19: 125.963 ns/op
Iteration  20: 126.013 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 226.450 ns/op
# Warmup Iteration   2: 160.117 ns/op
# Warmup Iteration   3: 142.014 ns/op
# Warmup Iteration   4: 141.289 ns/op
# Warmup Iteration   5: 141.922 ns/op
Iteration   1: 142.873 ns/op
Iteration   2: 139.418 ns/op
Iteration   3: 139.469 ns/op
Iteration   4: 139.519 ns/op
Iteration   5: 139.507 ns/op
Iteration   6: 140.008 ns/op
Iteration   7: 139.352 ns/op
Iteration   8: 139.456 ns/op
Iteration   9: 139.633 ns/op
Iteration  10: 139.425 ns/op
Iteration  11: 139.854 ns/op
Iteration  12: 139.302 ns/op
Iteration  13: 139.264 ns/op
Iteration  14: 139.282 ns/op
Iteration  15: 139.605 ns/op
Iteration  16: 140.384 ns/op
Iteration  17: 139.278 ns/op
Iteration  18: 139.387 ns/op
Iteration  19: 139.303 ns/op
Iteration  20: 139.275 ns/op


Result "benchmark.StringContains.regexMatches":
  131.201 ±(99.9%) 2.428 ns/op [Average]
  (min, avg, max) = (123.379, 131.201, 143.280), stdev = 7.158
  CI (99.9%): [128.773, 133.628] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 5#L/Q_)]qBY&&A+|,b,nmvwU" JUn_lef"3J~7w)c7E'g8[L+d3|#Z$D:ohttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.066 ns/op
# Warmup Iteration   2: 17.009 ns/op
# Warmup Iteration   3: 16.581 ns/op
# Warmup Iteration   4: 16.597 ns/op
# Warmup Iteration   5: 16.593 ns/op
Iteration   1: 16.568 ns/op
Iteration   2: 16.585 ns/op
Iteration   3: 16.574 ns/op
Iteration   4: 16.600 ns/op
Iteration   5: 16.588 ns/op
Iteration   6: 16.595 ns/op
Iteration   7: 16.578 ns/op
Iteration   8: 16.595 ns/op
Iteration   9: 16.591 ns/op
Iteration  10: 16.594 ns/op
Iteration  11: 16.586 ns/op
Iteration  12: 16.606 ns/op
Iteration  13: 16.599 ns/op
Iteration  14: 16.600 ns/op
Iteration  15: 16.600 ns/op
Iteration  16: 16.606 ns/op
Iteration  17: 16.600 ns/op
Iteration  18: 16.586 ns/op
Iteration  19: 16.589 ns/op
Iteration  20: 16.597 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.061 ns/op
# Warmup Iteration   2: 17.071 ns/op
# Warmup Iteration   3: 16.552 ns/op
# Warmup Iteration   4: 16.579 ns/op
# Warmup Iteration   5: 16.584 ns/op
Iteration   1: 16.578 ns/op
Iteration   2: 16.566 ns/op
Iteration   3: 16.600 ns/op
Iteration   4: 16.566 ns/op
Iteration   5: 16.555 ns/op
Iteration   6: 16.582 ns/op
Iteration   7: 16.571 ns/op
Iteration   8: 16.569 ns/op
Iteration   9: 16.582 ns/op
Iteration  10: 16.584 ns/op
Iteration  11: 16.575 ns/op
Iteration  12: 16.551 ns/op
Iteration  13: 16.578 ns/op
Iteration  14: 16.590 ns/op
Iteration  15: 16.573 ns/op
Iteration  16: 16.587 ns/op
Iteration  17: 16.570 ns/op
Iteration  18: 16.584 ns/op
Iteration  19: 16.572 ns/op
Iteration  20: 16.567 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.950 ns/op
# Warmup Iteration   2: 17.046 ns/op
# Warmup Iteration   3: 16.557 ns/op
# Warmup Iteration   4: 16.564 ns/op
# Warmup Iteration   5: 16.570 ns/op
Iteration   1: 16.576 ns/op
Iteration   2: 16.574 ns/op
Iteration   3: 16.565 ns/op
Iteration   4: 16.565 ns/op
Iteration   5: 16.563 ns/op
Iteration   6: 16.572 ns/op
Iteration   7: 16.576 ns/op
Iteration   8: 16.568 ns/op
Iteration   9: 16.581 ns/op
Iteration  10: 16.561 ns/op
Iteration  11: 16.568 ns/op
Iteration  12: 16.566 ns/op
Iteration  13: 16.563 ns/op
Iteration  14: 16.561 ns/op
Iteration  15: 16.576 ns/op
Iteration  16: 16.574 ns/op
Iteration  17: 16.568 ns/op
Iteration  18: 16.567 ns/op
Iteration  19: 16.577 ns/op
Iteration  20: 16.573 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.056 ns/op
# Warmup Iteration   2: 17.062 ns/op
# Warmup Iteration   3: 16.587 ns/op
# Warmup Iteration   4: 16.571 ns/op
# Warmup Iteration   5: 16.595 ns/op
Iteration   1: 16.577 ns/op
Iteration   2: 16.580 ns/op
Iteration   3: 16.584 ns/op
Iteration   4: 16.580 ns/op
Iteration   5: 16.593 ns/op
Iteration   6: 16.569 ns/op
Iteration   7: 16.590 ns/op
Iteration   8: 16.589 ns/op
Iteration   9: 16.576 ns/op
Iteration  10: 16.594 ns/op
Iteration  11: 16.575 ns/op
Iteration  12: 16.583 ns/op
Iteration  13: 16.571 ns/op
Iteration  14: 16.586 ns/op
Iteration  15: 16.579 ns/op
Iteration  16: 16.579 ns/op
Iteration  17: 16.569 ns/op
Iteration  18: 16.572 ns/op
Iteration  19: 16.598 ns/op
Iteration  20: 16.589 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.949 ns/op
# Warmup Iteration   2: 17.161 ns/op
# Warmup Iteration   3: 16.516 ns/op
# Warmup Iteration   4: 16.527 ns/op
# Warmup Iteration   5: 16.514 ns/op
Iteration   1: 16.506 ns/op
Iteration   2: 16.521 ns/op
Iteration   3: 16.520 ns/op
Iteration   4: 16.514 ns/op
Iteration   5: 16.511 ns/op
Iteration   6: 16.528 ns/op
Iteration   7: 16.502 ns/op
Iteration   8: 16.521 ns/op
Iteration   9: 16.499 ns/op
Iteration  10: 16.519 ns/op
Iteration  11: 16.511 ns/op
Iteration  12: 16.529 ns/op
Iteration  13: 16.514 ns/op
Iteration  14: 16.543 ns/op
Iteration  15: 16.521 ns/op
Iteration  16: 16.513 ns/op
Iteration  17: 16.516 ns/op
Iteration  18: 16.535 ns/op
Iteration  19: 16.512 ns/op
Iteration  20: 16.513 ns/op


Result "benchmark.StringContains.stringContains":
  16.567 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (16.499, 16.567, 16.606), stdev = 0.028
  CI (99.9%): [16.558, 16.577] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  5#L/Q_)]qBY&&A+|,b,nmvwU" JUn_lef"3J~7w)c7E'g8[L+d3|#Z$D:ohttp  avgt  100  131.201 ± 2.428  ns/op
StringContains.stringContains     http  5#L/Q_)]qBY&&A+|,b,nmvwU" JUn_lef"3J~7w)c7E'g8[L+d3|#Z$D:ohttp  avgt  100   16.567 ± 0.009  ns/op

Benchmark result is saved to http_64_0.95_8.csv
