# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = W?S8
+nj>I+(e[8kLbjTz`9X>/6d.X-QHd-/?;"I(`1v^nqW_(M6\HPjhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 228.488 ns/op
# Warmup Iteration   2: 159.538 ns/op
# Warmup Iteration   3: 142.997 ns/op
# Warmup Iteration   4: 142.577 ns/op
# Warmup Iteration   5: 143.836 ns/op
Iteration   1: 143.990 ns/op
Iteration   2: 140.524 ns/op
Iteration   3: 140.586 ns/op
Iteration   4: 140.486 ns/op
Iteration   5: 140.404 ns/op
Iteration   6: 140.461 ns/op
Iteration   7: 141.113 ns/op
Iteration   8: 140.542 ns/op
Iteration   9: 140.521 ns/op
Iteration  10: 140.180 ns/op
Iteration  11: 140.024 ns/op
Iteration  12: 139.957 ns/op
Iteration  13: 140.024 ns/op
Iteration  14: 139.974 ns/op
Iteration  15: 139.902 ns/op
Iteration  16: 140.424 ns/op
Iteration  17: 140.041 ns/op
Iteration  18: 140.027 ns/op
Iteration  19: 140.034 ns/op
Iteration  20: 140.073 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 214.186 ns/op
# Warmup Iteration   2: 143.514 ns/op
# Warmup Iteration   3: 124.312 ns/op
# Warmup Iteration   4: 125.283 ns/op
# Warmup Iteration   5: 126.490 ns/op
Iteration   1: 125.843 ns/op
Iteration   2: 123.226 ns/op
Iteration   3: 123.327 ns/op
Iteration   4: 123.874 ns/op
Iteration   5: 123.223 ns/op
Iteration   6: 123.330 ns/op
Iteration   7: 123.270 ns/op
Iteration   8: 123.827 ns/op
Iteration   9: 122.894 ns/op
Iteration  10: 122.942 ns/op
Iteration  11: 122.934 ns/op
Iteration  12: 123.912 ns/op
Iteration  13: 122.902 ns/op
Iteration  14: 122.940 ns/op
Iteration  15: 122.934 ns/op
Iteration  16: 123.165 ns/op
Iteration  17: 122.925 ns/op
Iteration  18: 123.013 ns/op
Iteration  19: 122.926 ns/op
Iteration  20: 123.299 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 223.876 ns/op
# Warmup Iteration   2: 157.500 ns/op
# Warmup Iteration   3: 141.686 ns/op
# Warmup Iteration   4: 141.043 ns/op
# Warmup Iteration   5: 141.718 ns/op
Iteration   1: 142.624 ns/op
Iteration   2: 139.328 ns/op
Iteration   3: 139.329 ns/op
Iteration   4: 139.204 ns/op
Iteration   5: 139.399 ns/op
Iteration   6: 139.869 ns/op
Iteration   7: 139.418 ns/op
Iteration   8: 139.540 ns/op
Iteration   9: 140.328 ns/op
Iteration  10: 139.064 ns/op
Iteration  11: 138.762 ns/op
Iteration  12: 138.887 ns/op
Iteration  13: 139.538 ns/op
Iteration  14: 139.693 ns/op
Iteration  15: 139.448 ns/op
Iteration  16: 139.058 ns/op
Iteration  17: 139.236 ns/op
Iteration  18: 139.145 ns/op
Iteration  19: 139.210 ns/op
Iteration  20: 139.124 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 212.870 ns/op
# Warmup Iteration   2: 144.242 ns/op
# Warmup Iteration   3: 127.833 ns/op
# Warmup Iteration   4: 128.379 ns/op
# Warmup Iteration   5: 128.938 ns/op
Iteration   1: 130.412 ns/op
Iteration   2: 126.844 ns/op
Iteration   3: 126.852 ns/op
Iteration   4: 126.825 ns/op
Iteration   5: 126.731 ns/op
Iteration   6: 127.573 ns/op
Iteration   7: 126.873 ns/op
Iteration   8: 126.905 ns/op
Iteration   9: 126.418 ns/op
Iteration  10: 126.664 ns/op
Iteration  11: 126.555 ns/op
Iteration  12: 126.452 ns/op
Iteration  13: 126.543 ns/op
Iteration  14: 126.921 ns/op
Iteration  15: 126.920 ns/op
Iteration  16: 126.788 ns/op
Iteration  17: 126.532 ns/op
Iteration  18: 126.574 ns/op
Iteration  19: 126.988 ns/op
Iteration  20: 126.354 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 226.931 ns/op
# Warmup Iteration   2: 158.656 ns/op
# Warmup Iteration   3: 145.660 ns/op
# Warmup Iteration   4: 145.105 ns/op
# Warmup Iteration   5: 145.813 ns/op
Iteration   1: 146.949 ns/op
Iteration   2: 143.278 ns/op
Iteration   3: 143.106 ns/op
Iteration   4: 143.139 ns/op
Iteration   5: 143.083 ns/op
Iteration   6: 143.155 ns/op
Iteration   7: 143.276 ns/op
Iteration   8: 143.206 ns/op
Iteration   9: 144.857 ns/op
Iteration  10: 142.881 ns/op
Iteration  11: 142.954 ns/op
Iteration  12: 143.932 ns/op
Iteration  13: 142.809 ns/op
Iteration  14: 142.798 ns/op
Iteration  15: 142.718 ns/op
Iteration  16: 142.941 ns/op
Iteration  17: 143.025 ns/op
Iteration  18: 143.658 ns/op
Iteration  19: 143.353 ns/op
Iteration  20: 143.811 ns/op


Result "benchmark.StringContains.regexMatches":
  134.738 ±(99.9%) 2.751 ns/op [Average]
  (min, avg, max) = (122.894, 134.738, 146.949), stdev = 8.111
  CI (99.9%): [131.988, 137.489] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = W?S8
+nj>I+(e[8kLbjTz`9X>/6d.X-QHd-/?;"I(`1v^nqW_(M6\HPjhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.956 ns/op
# Warmup Iteration   2: 16.924 ns/op
# Warmup Iteration   3: 16.806 ns/op
# Warmup Iteration   4: 16.838 ns/op
# Warmup Iteration   5: 16.823 ns/op
Iteration   1: 16.844 ns/op
Iteration   2: 16.840 ns/op
Iteration   3: 16.813 ns/op
Iteration   4: 16.828 ns/op
Iteration   5: 16.826 ns/op
Iteration   6: 16.815 ns/op
Iteration   7: 16.859 ns/op
Iteration   8: 16.861 ns/op
Iteration   9: 16.848 ns/op
Iteration  10: 16.854 ns/op
Iteration  11: 16.849 ns/op
Iteration  12: 16.854 ns/op
Iteration  13: 16.829 ns/op
Iteration  14: 16.810 ns/op
Iteration  15: 16.842 ns/op
Iteration  16: 16.799 ns/op
Iteration  17: 16.802 ns/op
Iteration  18: 16.786 ns/op
Iteration  19: 16.831 ns/op
Iteration  20: 16.812 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.053 ns/op
# Warmup Iteration   2: 17.060 ns/op
# Warmup Iteration   3: 16.560 ns/op
# Warmup Iteration   4: 16.578 ns/op
# Warmup Iteration   5: 16.569 ns/op
Iteration   1: 16.593 ns/op
Iteration   2: 16.581 ns/op
Iteration   3: 16.589 ns/op
Iteration   4: 16.562 ns/op
Iteration   5: 16.579 ns/op
Iteration   6: 16.589 ns/op
Iteration   7: 16.585 ns/op
Iteration   8: 16.563 ns/op
Iteration   9: 16.581 ns/op
Iteration  10: 16.574 ns/op
Iteration  11: 16.591 ns/op
Iteration  12: 16.573 ns/op
Iteration  13: 16.581 ns/op
Iteration  14: 16.598 ns/op
Iteration  15: 16.593 ns/op
Iteration  16: 16.578 ns/op
Iteration  17: 16.582 ns/op
Iteration  18: 16.602 ns/op
Iteration  19: 16.567 ns/op
Iteration  20: 16.592 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.081 ns/op
# Warmup Iteration   2: 17.116 ns/op
# Warmup Iteration   3: 17.415 ns/op
# Warmup Iteration   4: 17.542 ns/op
# Warmup Iteration   5: 17.409 ns/op
Iteration   1: 17.476 ns/op
Iteration   2: 17.426 ns/op
Iteration   3: 17.404 ns/op
Iteration   4: 17.413 ns/op
Iteration   5: 17.377 ns/op
Iteration   6: 17.391 ns/op
Iteration   7: 17.397 ns/op
Iteration   8: 17.481 ns/op
Iteration   9: 17.391 ns/op
Iteration  10: 17.352 ns/op
Iteration  11: 17.366 ns/op
Iteration  12: 17.413 ns/op
Iteration  13: 17.404 ns/op
Iteration  14: 17.433 ns/op
Iteration  15: 17.446 ns/op
Iteration  16: 17.431 ns/op
Iteration  17: 17.262 ns/op
Iteration  18: 17.352 ns/op
Iteration  19: 17.352 ns/op
Iteration  20: 17.374 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.079 ns/op
# Warmup Iteration   2: 17.096 ns/op
# Warmup Iteration   3: 16.533 ns/op
# Warmup Iteration   4: 16.496 ns/op
# Warmup Iteration   5: 16.503 ns/op
Iteration   1: 16.503 ns/op
Iteration   2: 16.514 ns/op
Iteration   3: 16.508 ns/op
Iteration   4: 16.523 ns/op
Iteration   5: 16.507 ns/op
Iteration   6: 16.507 ns/op
Iteration   7: 16.507 ns/op
Iteration   8: 16.515 ns/op
Iteration   9: 16.510 ns/op
Iteration  10: 16.513 ns/op
Iteration  11: 16.527 ns/op
Iteration  12: 16.521 ns/op
Iteration  13: 16.504 ns/op
Iteration  14: 16.498 ns/op
Iteration  15: 16.526 ns/op
Iteration  16: 16.513 ns/op
Iteration  17: 16.514 ns/op
Iteration  18: 16.501 ns/op
Iteration  19: 16.518 ns/op
Iteration  20: 16.502 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.166 ns/op
# Warmup Iteration   2: 17.063 ns/op
# Warmup Iteration   3: 16.503 ns/op
# Warmup Iteration   4: 16.511 ns/op
# Warmup Iteration   5: 16.518 ns/op
Iteration   1: 16.516 ns/op
Iteration   2: 16.482 ns/op
Iteration   3: 16.479 ns/op
Iteration   4: 16.503 ns/op
Iteration   5: 16.473 ns/op
Iteration   6: 16.510 ns/op
Iteration   7: 16.513 ns/op
Iteration   8: 16.529 ns/op
Iteration   9: 16.489 ns/op
Iteration  10: 16.498 ns/op
Iteration  11: 16.502 ns/op
Iteration  12: 16.490 ns/op
Iteration  13: 16.509 ns/op
Iteration  14: 16.505 ns/op
Iteration  15: 16.493 ns/op
Iteration  16: 16.494 ns/op
Iteration  17: 16.508 ns/op
Iteration  18: 16.484 ns/op
Iteration  19: 16.492 ns/op
Iteration  20: 16.502 ns/op


Result "benchmark.StringContains.stringContains":
  16.764 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (16.473, 16.764, 17.481), stdev = 0.341
  CI (99.9%): [16.648, 16.880] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  W?S8
+nj>I+(e[8kLbjTz`9X>/6d.X-QHd-/?;"I(`1v^nqW_(M6\HPjhttp  avgt  100  134.738 ± 2.751  ns/op
StringContains.stringContains     http  W?S8
+nj>I+(e[8kLbjTz`9X>/6d.X-QHd-/?;"I(`1v^nqW_(M6\HPjhttp  avgt  100   16.764 ± 0.116  ns/op

Benchmark result is saved to http_64_0.95_1.csv
