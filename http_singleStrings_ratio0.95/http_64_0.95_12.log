# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = G4K/
#nHdx	EGvNc//fOlF+I(n`0nW:,(=Nmd;2[V0}ootgbMH]ZKbzPH94http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 220.489 ns/op
# Warmup Iteration   2: 145.686 ns/op
# Warmup Iteration   3: 125.928 ns/op
# Warmup Iteration   4: 125.211 ns/op
# Warmup Iteration   5: 125.931 ns/op
Iteration   1: 127.514 ns/op
Iteration   2: 123.523 ns/op
Iteration   3: 123.494 ns/op
Iteration   4: 123.482 ns/op
Iteration   5: 124.103 ns/op
Iteration   6: 123.609 ns/op
Iteration   7: 123.575 ns/op
Iteration   8: 123.705 ns/op
Iteration   9: 123.798 ns/op
Iteration  10: 123.282 ns/op
Iteration  11: 123.272 ns/op
Iteration  12: 123.358 ns/op
Iteration  13: 123.052 ns/op
Iteration  14: 122.948 ns/op
Iteration  15: 123.095 ns/op
Iteration  16: 123.416 ns/op
Iteration  17: 123.284 ns/op
Iteration  18: 123.194 ns/op
Iteration  19: 123.380 ns/op
Iteration  20: 123.620 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 212.458 ns/op
# Warmup Iteration   2: 143.843 ns/op
# Warmup Iteration   3: 127.327 ns/op
# Warmup Iteration   4: 127.381 ns/op
# Warmup Iteration   5: 128.037 ns/op
Iteration   1: 129.449 ns/op
Iteration   2: 125.818 ns/op
Iteration   3: 125.877 ns/op
Iteration   4: 125.897 ns/op
Iteration   5: 126.431 ns/op
Iteration   6: 125.835 ns/op
Iteration   7: 125.863 ns/op
Iteration   8: 125.918 ns/op
Iteration   9: 125.717 ns/op
Iteration  10: 125.478 ns/op
Iteration  11: 125.473 ns/op
Iteration  12: 125.491 ns/op
Iteration  13: 125.550 ns/op
Iteration  14: 125.828 ns/op
Iteration  15: 125.511 ns/op
Iteration  16: 125.578 ns/op
Iteration  17: 125.561 ns/op
Iteration  18: 126.734 ns/op
Iteration  19: 125.716 ns/op
Iteration  20: 125.760 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 213.483 ns/op
# Warmup Iteration   2: 144.299 ns/op
# Warmup Iteration   3: 127.026 ns/op
# Warmup Iteration   4: 127.664 ns/op
# Warmup Iteration   5: 128.194 ns/op
Iteration   1: 129.811 ns/op
Iteration   2: 126.162 ns/op
Iteration   3: 126.027 ns/op
Iteration   4: 126.049 ns/op
Iteration   5: 126.647 ns/op
Iteration   6: 126.049 ns/op
Iteration   7: 126.057 ns/op
Iteration   8: 126.216 ns/op
Iteration   9: 125.863 ns/op
Iteration  10: 125.649 ns/op
Iteration  11: 126.641 ns/op
Iteration  12: 125.674 ns/op
Iteration  13: 125.628 ns/op
Iteration  14: 125.896 ns/op
Iteration  15: 125.840 ns/op
Iteration  16: 125.697 ns/op
Iteration  17: 125.745 ns/op
Iteration  18: 126.647 ns/op
Iteration  19: 126.066 ns/op
Iteration  20: 126.071 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 212.930 ns/op
# Warmup Iteration   2: 144.957 ns/op
# Warmup Iteration   3: 128.374 ns/op
# Warmup Iteration   4: 128.412 ns/op
# Warmup Iteration   5: 128.391 ns/op
Iteration   1: 129.564 ns/op
Iteration   2: 126.138 ns/op
Iteration   3: 126.158 ns/op
Iteration   4: 126.136 ns/op
Iteration   5: 126.690 ns/op
Iteration   6: 126.167 ns/op
Iteration   7: 126.324 ns/op
Iteration   8: 126.552 ns/op
Iteration   9: 125.740 ns/op
Iteration  10: 126.954 ns/op
Iteration  11: 125.858 ns/op
Iteration  12: 125.897 ns/op
Iteration  13: 125.953 ns/op
Iteration  14: 126.374 ns/op
Iteration  15: 125.969 ns/op
Iteration  16: 126.022 ns/op
Iteration  17: 126.104 ns/op
Iteration  18: 126.435 ns/op
Iteration  19: 126.391 ns/op
Iteration  20: 126.339 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.369 ns/op
# Warmup Iteration   2: 145.349 ns/op
# Warmup Iteration   3: 127.022 ns/op
# Warmup Iteration   4: 127.488 ns/op
# Warmup Iteration   5: 127.978 ns/op
Iteration   1: 129.616 ns/op
Iteration   2: 126.000 ns/op
Iteration   3: 125.884 ns/op
Iteration   4: 125.916 ns/op
Iteration   5: 126.617 ns/op
Iteration   6: 125.884 ns/op
Iteration   7: 125.944 ns/op
Iteration   8: 126.016 ns/op
Iteration   9: 125.754 ns/op
Iteration  10: 125.679 ns/op
Iteration  11: 125.609 ns/op
Iteration  12: 126.090 ns/op
Iteration  13: 125.711 ns/op
Iteration  14: 126.345 ns/op
Iteration  15: 125.884 ns/op
Iteration  16: 125.931 ns/op
Iteration  17: 125.946 ns/op
Iteration  18: 126.207 ns/op
Iteration  19: 125.723 ns/op
Iteration  20: 125.825 ns/op


Result "benchmark.StringContains.regexMatches":
  125.670 ±(99.9%) 0.456 ns/op [Average]
  (min, avg, max) = (122.948, 125.670, 129.811), stdev = 1.343
  CI (99.9%): [125.214, 126.125] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = G4K/
#nHdx	EGvNc//fOlF+I(n`0nW:,(=Nmd;2[V0}ootgbMH]ZKbzPH94http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.144 ns/op
# Warmup Iteration   2: 17.039 ns/op
# Warmup Iteration   3: 16.578 ns/op
# Warmup Iteration   4: 16.583 ns/op
# Warmup Iteration   5: 16.563 ns/op
Iteration   1: 16.563 ns/op
Iteration   2: 16.582 ns/op
Iteration   3: 16.561 ns/op
Iteration   4: 16.575 ns/op
Iteration   5: 16.603 ns/op
Iteration   6: 16.581 ns/op
Iteration   7: 16.581 ns/op
Iteration   8: 16.556 ns/op
Iteration   9: 16.563 ns/op
Iteration  10: 16.574 ns/op
Iteration  11: 16.579 ns/op
Iteration  12: 16.581 ns/op
Iteration  13: 16.579 ns/op
Iteration  14: 16.576 ns/op
Iteration  15: 16.580 ns/op
Iteration  16: 16.572 ns/op
Iteration  17: 16.580 ns/op
Iteration  18: 16.576 ns/op
Iteration  19: 16.567 ns/op
Iteration  20: 16.574 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.946 ns/op
# Warmup Iteration   2: 17.052 ns/op
# Warmup Iteration   3: 16.492 ns/op
# Warmup Iteration   4: 16.468 ns/op
# Warmup Iteration   5: 16.471 ns/op
Iteration   1: 16.480 ns/op
Iteration   2: 16.461 ns/op
Iteration   3: 16.458 ns/op
Iteration   4: 16.460 ns/op
Iteration   5: 16.461 ns/op
Iteration   6: 16.457 ns/op
Iteration   7: 16.472 ns/op
Iteration   8: 16.475 ns/op
Iteration   9: 16.470 ns/op
Iteration  10: 16.468 ns/op
Iteration  11: 16.470 ns/op
Iteration  12: 16.455 ns/op
Iteration  13: 16.440 ns/op
Iteration  14: 16.454 ns/op
Iteration  15: 16.468 ns/op
Iteration  16: 16.475 ns/op
Iteration  17: 16.462 ns/op
Iteration  18: 16.462 ns/op
Iteration  19: 16.468 ns/op
Iteration  20: 16.475 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.939 ns/op
# Warmup Iteration   2: 16.978 ns/op
# Warmup Iteration   3: 16.502 ns/op
# Warmup Iteration   4: 16.492 ns/op
# Warmup Iteration   5: 16.492 ns/op
Iteration   1: 16.500 ns/op
Iteration   2: 16.498 ns/op
Iteration   3: 16.493 ns/op
Iteration   4: 16.501 ns/op
Iteration   5: 16.492 ns/op
Iteration   6: 16.494 ns/op
Iteration   7: 16.503 ns/op
Iteration   8: 16.498 ns/op
Iteration   9: 16.485 ns/op
Iteration  10: 16.496 ns/op
Iteration  11: 16.496 ns/op
Iteration  12: 16.481 ns/op
Iteration  13: 16.488 ns/op
Iteration  14: 16.485 ns/op
Iteration  15: 16.483 ns/op
Iteration  16: 16.498 ns/op
Iteration  17: 16.498 ns/op
Iteration  18: 16.503 ns/op
Iteration  19: 16.503 ns/op
Iteration  20: 16.497 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.070 ns/op
# Warmup Iteration   2: 17.035 ns/op
# Warmup Iteration   3: 16.886 ns/op
# Warmup Iteration   4: 16.798 ns/op
# Warmup Iteration   5: 16.828 ns/op
Iteration   1: 16.807 ns/op
Iteration   2: 16.786 ns/op
Iteration   3: 16.810 ns/op
Iteration   4: 16.829 ns/op
Iteration   5: 16.799 ns/op
Iteration   6: 16.811 ns/op
Iteration   7: 16.761 ns/op
Iteration   8: 16.829 ns/op
Iteration   9: 16.800 ns/op
Iteration  10: 16.778 ns/op
Iteration  11: 16.857 ns/op
Iteration  12: 16.796 ns/op
Iteration  13: 16.795 ns/op
Iteration  14: 16.781 ns/op
Iteration  15: 16.843 ns/op
Iteration  16: 16.792 ns/op
Iteration  17: 16.796 ns/op
Iteration  18: 16.839 ns/op
Iteration  19: 16.784 ns/op
Iteration  20: 16.865 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.077 ns/op
# Warmup Iteration   2: 17.026 ns/op
# Warmup Iteration   3: 16.830 ns/op
# Warmup Iteration   4: 16.806 ns/op
# Warmup Iteration   5: 16.851 ns/op
Iteration   1: 16.834 ns/op
Iteration   2: 16.823 ns/op
Iteration   3: 16.836 ns/op
Iteration   4: 16.842 ns/op
Iteration   5: 16.863 ns/op
Iteration   6: 16.886 ns/op
Iteration   7: 16.857 ns/op
Iteration   8: 16.823 ns/op
Iteration   9: 16.847 ns/op
Iteration  10: 16.842 ns/op
Iteration  11: 16.826 ns/op
Iteration  12: 16.851 ns/op
Iteration  13: 16.842 ns/op
Iteration  14: 16.849 ns/op
Iteration  15: 16.826 ns/op
Iteration  16: 16.885 ns/op
Iteration  17: 16.903 ns/op
Iteration  18: 16.837 ns/op
Iteration  19: 16.848 ns/op
Iteration  20: 16.827 ns/op


Result "benchmark.StringContains.stringContains":
  16.638 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (16.440, 16.638, 16.903), stdev = 0.161
  CI (99.9%): [16.583, 16.693] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  G4K/
#nHdx	EGvNc//fOlF+I(n`0nW:,(=Nmd;2[V0}ootgbMH]ZKbzPH94http  avgt  100  125.670 ± 0.456  ns/op
StringContains.stringContains     http  G4K/
#nHdx	EGvNc//fOlF+I(n`0nW:,(=Nmd;2[V0}ootgbMH]ZKbzPH94http  avgt  100   16.638 ± 0.055  ns/op

Benchmark result is saved to http_64_0.95_12.csv
