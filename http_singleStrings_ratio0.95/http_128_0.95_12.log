# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = E=y$zpiCs*cX;N=7!!ADna "JE].1cq)_/(S'UX{L&:RaN)z;[;Na2$q&W8;1JV(
R::j.*`vms~F#n!]2-*nAK)
bz ZWA Nm)2=N)hD/3h> \RmSM)9tshttpem*)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 248.836 ns/op
# Warmup Iteration   2: 195.195 ns/op
# Warmup Iteration   3: 158.403 ns/op
# Warmup Iteration   4: 158.981 ns/op
# Warmup Iteration   5: 159.865 ns/op
Iteration   1: 161.216 ns/op
Iteration   2: 162.082 ns/op
Iteration   3: 157.544 ns/op
Iteration   4: 157.451 ns/op
Iteration   5: 157.593 ns/op
Iteration   6: 157.570 ns/op
Iteration   7: 157.563 ns/op
Iteration   8: 157.530 ns/op
Iteration   9: 157.069 ns/op
Iteration  10: 156.833 ns/op
Iteration  11: 157.446 ns/op
Iteration  12: 157.379 ns/op
Iteration  13: 161.412 ns/op
Iteration  14: 158.974 ns/op
Iteration  15: 157.009 ns/op
Iteration  16: 158.270 ns/op
Iteration  17: 157.251 ns/op
Iteration  18: 157.052 ns/op
Iteration  19: 157.200 ns/op
Iteration  20: 157.169 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 237.575 ns/op
# Warmup Iteration   2: 173.048 ns/op
# Warmup Iteration   3: 145.159 ns/op
# Warmup Iteration   4: 148.432 ns/op
# Warmup Iteration   5: 146.911 ns/op
Iteration   1: 147.754 ns/op
Iteration   2: 144.286 ns/op
Iteration   3: 144.277 ns/op
Iteration   4: 144.307 ns/op
Iteration   5: 144.256 ns/op
Iteration   6: 144.250 ns/op
Iteration   7: 144.246 ns/op
Iteration   8: 144.303 ns/op
Iteration   9: 144.438 ns/op
Iteration  10: 144.332 ns/op
Iteration  11: 144.212 ns/op
Iteration  12: 143.813 ns/op
Iteration  13: 143.939 ns/op
Iteration  14: 143.908 ns/op
Iteration  15: 143.927 ns/op
Iteration  16: 143.935 ns/op
Iteration  17: 143.958 ns/op
Iteration  18: 143.918 ns/op
Iteration  19: 143.991 ns/op
Iteration  20: 144.020 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 236.896 ns/op
# Warmup Iteration   2: 171.625 ns/op
# Warmup Iteration   3: 146.489 ns/op
# Warmup Iteration   4: 149.172 ns/op
# Warmup Iteration   5: 147.908 ns/op
Iteration   1: 148.682 ns/op
Iteration   2: 145.846 ns/op
Iteration   3: 145.115 ns/op
Iteration   4: 145.230 ns/op
Iteration   5: 145.230 ns/op
Iteration   6: 145.546 ns/op
Iteration   7: 145.287 ns/op
Iteration   8: 145.230 ns/op
Iteration   9: 145.601 ns/op
Iteration  10: 145.283 ns/op
Iteration  11: 145.792 ns/op
Iteration  12: 144.776 ns/op
Iteration  13: 145.110 ns/op
Iteration  14: 144.721 ns/op
Iteration  15: 144.636 ns/op
Iteration  16: 144.834 ns/op
Iteration  17: 144.980 ns/op
Iteration  18: 144.915 ns/op
Iteration  19: 145.182 ns/op
Iteration  20: 145.198 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 258.528 ns/op
# Warmup Iteration   2: 201.873 ns/op
# Warmup Iteration   3: 182.271 ns/op
# Warmup Iteration   4: 182.849 ns/op
# Warmup Iteration   5: 183.618 ns/op
Iteration   1: 184.509 ns/op
Iteration   2: 185.431 ns/op
Iteration   3: 180.442 ns/op
Iteration   4: 181.285 ns/op
Iteration   5: 181.266 ns/op
Iteration   6: 181.495 ns/op
Iteration   7: 181.359 ns/op
Iteration   8: 183.424 ns/op
Iteration   9: 182.580 ns/op
Iteration  10: 180.469 ns/op
Iteration  11: 181.602 ns/op
Iteration  12: 181.580 ns/op
Iteration  13: 181.663 ns/op
Iteration  14: 181.595 ns/op
Iteration  15: 182.111 ns/op
Iteration  16: 180.991 ns/op
Iteration  17: 180.560 ns/op
Iteration  18: 181.190 ns/op
Iteration  19: 181.063 ns/op
Iteration  20: 181.212 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 244.411 ns/op
# Warmup Iteration   2: 187.164 ns/op
# Warmup Iteration   3: 157.522 ns/op
# Warmup Iteration   4: 158.420 ns/op
# Warmup Iteration   5: 158.811 ns/op
Iteration   1: 159.631 ns/op
Iteration   2: 160.621 ns/op
Iteration   3: 156.821 ns/op
Iteration   4: 156.725 ns/op
Iteration   5: 156.596 ns/op
Iteration   6: 156.666 ns/op
Iteration   7: 156.570 ns/op
Iteration   8: 156.607 ns/op
Iteration   9: 158.284 ns/op
Iteration  10: 156.555 ns/op
Iteration  11: 157.208 ns/op
Iteration  12: 156.473 ns/op
Iteration  13: 156.269 ns/op
Iteration  14: 156.391 ns/op
Iteration  15: 156.260 ns/op
Iteration  16: 156.337 ns/op
Iteration  17: 157.954 ns/op
Iteration  18: 156.377 ns/op
Iteration  19: 156.569 ns/op
Iteration  20: 156.670 ns/op


Result "benchmark.StringContains.regexMatches":
  157.323 ±(99.9%) 4.620 ns/op [Average]
  (min, avg, max) = (143.813, 157.323, 185.431), stdev = 13.623
  CI (99.9%): [152.703, 161.943] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = E=y$zpiCs*cX;N=7!!ADna "JE].1cq)_/(S'UX{L&:RaN)z;[;Na2$q&W8;1JV(
R::j.*`vms~F#n!]2-*nAK)
bz ZWA Nm)2=N)hD/3h> \RmSM)9tshttpem*)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 24.844 ns/op
# Warmup Iteration   2: 26.102 ns/op
# Warmup Iteration   3: 25.439 ns/op
# Warmup Iteration   4: 25.453 ns/op
# Warmup Iteration   5: 25.443 ns/op
Iteration   1: 25.403 ns/op
Iteration   2: 25.413 ns/op
Iteration   3: 25.437 ns/op
Iteration   4: 25.410 ns/op
Iteration   5: 25.440 ns/op
Iteration   6: 25.424 ns/op
Iteration   7: 25.515 ns/op
Iteration   8: 25.448 ns/op
Iteration   9: 25.491 ns/op
Iteration  10: 25.448 ns/op
Iteration  11: 25.584 ns/op
Iteration  12: 25.432 ns/op
Iteration  13: 25.424 ns/op
Iteration  14: 25.423 ns/op
Iteration  15: 25.421 ns/op
Iteration  16: 25.407 ns/op
Iteration  17: 25.422 ns/op
Iteration  18: 25.424 ns/op
Iteration  19: 25.431 ns/op
Iteration  20: 25.409 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 25.053 ns/op
# Warmup Iteration   2: 26.146 ns/op
# Warmup Iteration   3: 26.382 ns/op
# Warmup Iteration   4: 26.406 ns/op
# Warmup Iteration   5: 26.394 ns/op
Iteration   1: 26.359 ns/op
Iteration   2: 26.395 ns/op
Iteration   3: 26.375 ns/op
Iteration   4: 26.386 ns/op
Iteration   5: 26.399 ns/op
Iteration   6: 26.416 ns/op
Iteration   7: 26.394 ns/op
Iteration   8: 26.411 ns/op
Iteration   9: 26.355 ns/op
Iteration  10: 26.367 ns/op
Iteration  11: 26.390 ns/op
Iteration  12: 26.407 ns/op
Iteration  13: 26.399 ns/op
Iteration  14: 26.353 ns/op
Iteration  15: 26.380 ns/op
Iteration  16: 26.391 ns/op
Iteration  17: 26.387 ns/op
Iteration  18: 26.386 ns/op
Iteration  19: 26.389 ns/op
Iteration  20: 26.404 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 24.999 ns/op
# Warmup Iteration   2: 26.203 ns/op
# Warmup Iteration   3: 25.419 ns/op
# Warmup Iteration   4: 25.433 ns/op
# Warmup Iteration   5: 25.427 ns/op
Iteration   1: 25.449 ns/op
Iteration   2: 25.441 ns/op
Iteration   3: 25.426 ns/op
Iteration   4: 25.422 ns/op
Iteration   5: 25.425 ns/op
Iteration   6: 25.420 ns/op
Iteration   7: 25.422 ns/op
Iteration   8: 25.426 ns/op
Iteration   9: 25.433 ns/op
Iteration  10: 25.425 ns/op
Iteration  11: 25.427 ns/op
Iteration  12: 25.426 ns/op
Iteration  13: 25.451 ns/op
Iteration  14: 25.428 ns/op
Iteration  15: 25.421 ns/op
Iteration  16: 25.426 ns/op
Iteration  17: 25.433 ns/op
Iteration  18: 25.428 ns/op
Iteration  19: 25.452 ns/op
Iteration  20: 25.439 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 24.939 ns/op
# Warmup Iteration   2: 26.232 ns/op
# Warmup Iteration   3: 25.454 ns/op
# Warmup Iteration   4: 25.458 ns/op
# Warmup Iteration   5: 25.452 ns/op
Iteration   1: 25.421 ns/op
Iteration   2: 25.399 ns/op
Iteration   3: 25.393 ns/op
Iteration   4: 25.423 ns/op
Iteration   5: 25.404 ns/op
Iteration   6: 25.393 ns/op
Iteration   7: 25.414 ns/op
Iteration   8: 25.460 ns/op
Iteration   9: 25.418 ns/op
Iteration  10: 25.405 ns/op
Iteration  11: 25.404 ns/op
Iteration  12: 25.390 ns/op
Iteration  13: 25.408 ns/op
Iteration  14: 25.392 ns/op
Iteration  15: 25.419 ns/op
Iteration  16: 25.420 ns/op
Iteration  17: 25.398 ns/op
Iteration  18: 25.435 ns/op
Iteration  19: 25.407 ns/op
Iteration  20: 25.432 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.003 ns/op
# Warmup Iteration   2: 26.145 ns/op
# Warmup Iteration   3: 26.407 ns/op
# Warmup Iteration   4: 26.480 ns/op
# Warmup Iteration   5: 26.478 ns/op
Iteration   1: 26.407 ns/op
Iteration   2: 26.464 ns/op
Iteration   3: 26.450 ns/op
Iteration   4: 26.488 ns/op
Iteration   5: 26.513 ns/op
Iteration   6: 26.517 ns/op
Iteration   7: 26.479 ns/op
Iteration   8: 26.487 ns/op
Iteration   9: 26.500 ns/op
Iteration  10: 26.481 ns/op
Iteration  11: 26.411 ns/op
Iteration  12: 26.459 ns/op
Iteration  13: 26.500 ns/op
Iteration  14: 26.484 ns/op
Iteration  15: 26.453 ns/op
Iteration  16: 26.453 ns/op
Iteration  17: 26.493 ns/op
Iteration  18: 26.451 ns/op
Iteration  19: 26.471 ns/op
Iteration  20: 26.463 ns/op


Result "benchmark.StringContains.stringContains":
  25.828 ±(99.9%) 0.168 ns/op [Average]
  (min, avg, max) = (25.390, 25.828, 26.517), stdev = 0.495
  CI (99.9%): [25.661, 25.996] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  E=y$zpiCs*cX;N=7!!ADna "JE].1cq)_/(S'UX{L&:RaN)z;[;Na2$q&W8;1JV(
R::j.*`vms~F#n!]2-*nAK)
bz ZWA Nm)2=N)hD/3h> \RmSM)9tshttpem*  avgt  100  157.323 ± 4.620  ns/op
StringContains.stringContains     http  E=y$zpiCs*cX;N=7!!ADna "JE].1cq)_/(S'UX{L&:RaN)z;[;Na2$q&W8;1JV(
R::j.*`vms~F#n!]2-*nAK)
bz ZWA Nm)2=N)hD/3h> \RmSM)9tshttpem*  avgt  100   25.828 ± 0.168  ns/op

Benchmark result is saved to http_128_0.95_12.csv
