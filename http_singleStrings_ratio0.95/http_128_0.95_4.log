# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = t(+Diq>_yD]m_{$-p(BlIt6|c]M)CMxMJ0ePv^V^Z&tt6=Sjfv>P4`,ej pa65V4\FjHpvPH"bx*pmxv@Ua"$([$:`'43x	pt<td8cf	9xY`k6aUl?A106ihttp`!R)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 262.195 ns/op
# Warmup Iteration   2: 202.649 ns/op
# Warmup Iteration   3: 161.471 ns/op
# Warmup Iteration   4: 161.859 ns/op
# Warmup Iteration   5: 162.593 ns/op
Iteration   1: 163.693 ns/op
Iteration   2: 164.924 ns/op
Iteration   3: 160.495 ns/op
Iteration   4: 160.219 ns/op
Iteration   5: 160.399 ns/op
Iteration   6: 160.170 ns/op
Iteration   7: 160.642 ns/op
Iteration   8: 161.400 ns/op
Iteration   9: 160.506 ns/op
Iteration  10: 160.275 ns/op
Iteration  11: 160.359 ns/op
Iteration  12: 160.542 ns/op
Iteration  13: 159.881 ns/op
Iteration  14: 159.889 ns/op
Iteration  15: 159.907 ns/op
Iteration  16: 159.838 ns/op
Iteration  17: 160.069 ns/op
Iteration  18: 159.854 ns/op
Iteration  19: 160.105 ns/op
Iteration  20: 159.966 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 235.495 ns/op
# Warmup Iteration   2: 173.197 ns/op
# Warmup Iteration   3: 146.026 ns/op
# Warmup Iteration   4: 150.907 ns/op
# Warmup Iteration   5: 147.951 ns/op
Iteration   1: 149.489 ns/op
Iteration   2: 145.748 ns/op
Iteration   3: 145.959 ns/op
Iteration   4: 145.679 ns/op
Iteration   5: 146.686 ns/op
Iteration   6: 145.981 ns/op
Iteration   7: 146.443 ns/op
Iteration   8: 145.706 ns/op
Iteration   9: 146.996 ns/op
Iteration  10: 146.235 ns/op
Iteration  11: 146.909 ns/op
Iteration  12: 145.307 ns/op
Iteration  13: 145.401 ns/op
Iteration  14: 145.099 ns/op
Iteration  15: 145.226 ns/op
Iteration  16: 145.097 ns/op
Iteration  17: 144.927 ns/op
Iteration  18: 146.568 ns/op
Iteration  19: 145.586 ns/op
Iteration  20: 145.154 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 236.577 ns/op
# Warmup Iteration   2: 172.266 ns/op
# Warmup Iteration   3: 146.319 ns/op
# Warmup Iteration   4: 149.165 ns/op
# Warmup Iteration   5: 148.152 ns/op
Iteration   1: 148.974 ns/op
Iteration   2: 145.683 ns/op
Iteration   3: 145.434 ns/op
Iteration   4: 145.410 ns/op
Iteration   5: 145.530 ns/op
Iteration   6: 145.351 ns/op
Iteration   7: 145.540 ns/op
Iteration   8: 145.277 ns/op
Iteration   9: 145.627 ns/op
Iteration  10: 146.287 ns/op
Iteration  11: 145.207 ns/op
Iteration  12: 146.418 ns/op
Iteration  13: 145.312 ns/op
Iteration  14: 144.920 ns/op
Iteration  15: 145.222 ns/op
Iteration  16: 144.994 ns/op
Iteration  17: 145.045 ns/op
Iteration  18: 145.085 ns/op
Iteration  19: 145.176 ns/op
Iteration  20: 145.116 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 236.819 ns/op
# Warmup Iteration   2: 172.927 ns/op
# Warmup Iteration   3: 146.327 ns/op
# Warmup Iteration   4: 149.570 ns/op
# Warmup Iteration   5: 148.245 ns/op
Iteration   1: 148.944 ns/op
Iteration   2: 145.700 ns/op
Iteration   3: 145.698 ns/op
Iteration   4: 145.720 ns/op
Iteration   5: 145.845 ns/op
Iteration   6: 145.721 ns/op
Iteration   7: 145.782 ns/op
Iteration   8: 145.904 ns/op
Iteration   9: 145.784 ns/op
Iteration  10: 145.763 ns/op
Iteration  11: 146.961 ns/op
Iteration  12: 145.506 ns/op
Iteration  13: 145.719 ns/op
Iteration  14: 145.260 ns/op
Iteration  15: 145.528 ns/op
Iteration  16: 145.522 ns/op
Iteration  17: 145.556 ns/op
Iteration  18: 145.501 ns/op
Iteration  19: 145.519 ns/op
Iteration  20: 145.520 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 237.562 ns/op
# Warmup Iteration   2: 171.806 ns/op
# Warmup Iteration   3: 144.940 ns/op
# Warmup Iteration   4: 148.129 ns/op
# Warmup Iteration   5: 146.649 ns/op
Iteration   1: 147.711 ns/op
Iteration   2: 144.454 ns/op
Iteration   3: 144.220 ns/op
Iteration   4: 144.236 ns/op
Iteration   5: 144.154 ns/op
Iteration   6: 144.166 ns/op
Iteration   7: 144.197 ns/op
Iteration   8: 144.171 ns/op
Iteration   9: 144.991 ns/op
Iteration  10: 145.049 ns/op
Iteration  11: 145.045 ns/op
Iteration  12: 143.907 ns/op
Iteration  13: 144.148 ns/op
Iteration  14: 144.047 ns/op
Iteration  15: 143.944 ns/op
Iteration  16: 143.924 ns/op
Iteration  17: 143.921 ns/op
Iteration  18: 143.896 ns/op
Iteration  19: 143.903 ns/op
Iteration  20: 143.985 ns/op


Result "benchmark.StringContains.regexMatches":
  148.505 ±(99.9%) 2.106 ns/op [Average]
  (min, avg, max) = (143.896, 148.505, 164.924), stdev = 6.210
  CI (99.9%): [146.398, 150.611] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = t(+Diq>_yD]m_{$-p(BlIt6|c]M)CMxMJ0ePv^V^Z&tt6=Sjfv>P4`,ej pa65V4\FjHpvPH"bx*pmxv@Ua"$([$:`'43x	pt<td8cf	9xY`k6aUl?A106ihttp`!R)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.028 ns/op
# Warmup Iteration   2: 26.172 ns/op
# Warmup Iteration   3: 26.380 ns/op
# Warmup Iteration   4: 26.375 ns/op
# Warmup Iteration   5: 26.403 ns/op
Iteration   1: 26.448 ns/op
Iteration   2: 26.395 ns/op
Iteration   3: 26.411 ns/op
Iteration   4: 26.376 ns/op
Iteration   5: 26.376 ns/op
Iteration   6: 26.402 ns/op
Iteration   7: 26.449 ns/op
Iteration   8: 26.404 ns/op
Iteration   9: 26.421 ns/op
Iteration  10: 26.404 ns/op
Iteration  11: 26.389 ns/op
Iteration  12: 26.422 ns/op
Iteration  13: 26.388 ns/op
Iteration  14: 26.382 ns/op
Iteration  15: 26.349 ns/op
Iteration  16: 26.384 ns/op
Iteration  17: 26.361 ns/op
Iteration  18: 26.365 ns/op
Iteration  19: 26.360 ns/op
Iteration  20: 26.445 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 25.055 ns/op
# Warmup Iteration   2: 26.162 ns/op
# Warmup Iteration   3: 25.415 ns/op
# Warmup Iteration   4: 25.416 ns/op
# Warmup Iteration   5: 25.429 ns/op
Iteration   1: 25.439 ns/op
Iteration   2: 25.422 ns/op
Iteration   3: 25.403 ns/op
Iteration   4: 25.436 ns/op
Iteration   5: 25.408 ns/op
Iteration   6: 25.420 ns/op
Iteration   7: 25.403 ns/op
Iteration   8: 25.413 ns/op
Iteration   9: 25.407 ns/op
Iteration  10: 25.384 ns/op
Iteration  11: 25.414 ns/op
Iteration  12: 25.412 ns/op
Iteration  13: 25.399 ns/op
Iteration  14: 25.402 ns/op
Iteration  15: 25.410 ns/op
Iteration  16: 25.428 ns/op
Iteration  17: 25.376 ns/op
Iteration  18: 25.381 ns/op
Iteration  19: 25.363 ns/op
Iteration  20: 25.377 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 24.963 ns/op
# Warmup Iteration   2: 26.309 ns/op
# Warmup Iteration   3: 25.420 ns/op
# Warmup Iteration   4: 25.392 ns/op
# Warmup Iteration   5: 25.408 ns/op
Iteration   1: 25.399 ns/op
Iteration   2: 25.397 ns/op
Iteration   3: 25.408 ns/op
Iteration   4: 25.402 ns/op
Iteration   5: 25.400 ns/op
Iteration   6: 25.411 ns/op
Iteration   7: 25.430 ns/op
Iteration   8: 25.429 ns/op
Iteration   9: 25.392 ns/op
Iteration  10: 25.394 ns/op
Iteration  11: 25.415 ns/op
Iteration  12: 25.398 ns/op
Iteration  13: 25.406 ns/op
Iteration  14: 25.394 ns/op
Iteration  15: 25.421 ns/op
Iteration  16: 25.396 ns/op
Iteration  17: 25.394 ns/op
Iteration  18: 25.405 ns/op
Iteration  19: 25.405 ns/op
Iteration  20: 25.465 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 24.865 ns/op
# Warmup Iteration   2: 26.013 ns/op
# Warmup Iteration   3: 25.407 ns/op
# Warmup Iteration   4: 25.368 ns/op
# Warmup Iteration   5: 25.385 ns/op
Iteration   1: 25.524 ns/op
Iteration   2: 25.602 ns/op
Iteration   3: 25.589 ns/op
Iteration   4: 25.579 ns/op
Iteration   5: 25.600 ns/op
Iteration   6: 25.592 ns/op
Iteration   7: 25.377 ns/op
Iteration   8: 25.385 ns/op
Iteration   9: 25.399 ns/op
Iteration  10: 25.386 ns/op
Iteration  11: 25.505 ns/op
Iteration  12: 25.378 ns/op
Iteration  13: 25.360 ns/op
Iteration  14: 25.371 ns/op
Iteration  15: 25.378 ns/op
Iteration  16: 25.384 ns/op
Iteration  17: 25.361 ns/op
Iteration  18: 25.384 ns/op
Iteration  19: 25.408 ns/op
Iteration  20: 25.365 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 24.873 ns/op
# Warmup Iteration   2: 26.138 ns/op
# Warmup Iteration   3: 26.331 ns/op
# Warmup Iteration   4: 26.355 ns/op
# Warmup Iteration   5: 26.361 ns/op
Iteration   1: 26.363 ns/op
Iteration   2: 26.336 ns/op
Iteration   3: 26.351 ns/op
Iteration   4: 26.356 ns/op
Iteration   5: 26.361 ns/op
Iteration   6: 26.351 ns/op
Iteration   7: 26.345 ns/op
Iteration   8: 26.384 ns/op
Iteration   9: 26.374 ns/op
Iteration  10: 26.413 ns/op
Iteration  11: 26.376 ns/op
Iteration  12: 26.406 ns/op
Iteration  13: 26.420 ns/op
Iteration  14: 26.423 ns/op
Iteration  15: 26.456 ns/op
Iteration  16: 26.445 ns/op
Iteration  17: 26.442 ns/op
Iteration  18: 26.418 ns/op
Iteration  19: 26.429 ns/op
Iteration  20: 26.447 ns/op


Result "benchmark.StringContains.stringContains":
  25.810 ±(99.9%) 0.164 ns/op [Average]
  (min, avg, max) = (25.360, 25.810, 26.456), stdev = 0.483
  CI (99.9%): [25.646, 25.974] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  t(+Diq>_yD]m_{$-p(BlIt6|c]M)CMxMJ0ePv^V^Z&tt6=Sjfv>P4`,ej pa65V4\FjHpvPH"bx*pmxv@Ua"$([$:`'43x	pt<td8cf	9xY`k6aUl?A106ihttp`!R  avgt  100  148.505 ± 2.106  ns/op
StringContains.stringContains     http  t(+Diq>_yD]m_{$-p(BlIt6|c]M)CMxMJ0ePv^V^Z&tt6=Sjfv>P4`,ej pa65V4\FjHpvPH"bx*pmxv@Ua"$([$:`'43x	pt<td8cf	9xY`k6aUl?A106ihttp`!R  avgt  100   25.810 ± 0.164  ns/op

Benchmark result is saved to http_128_0.95_4.csv
