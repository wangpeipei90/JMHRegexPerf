# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = "|-<nTc`7<1z,zXsq&SP<0]g-Szw~#`u2Z]fS@x[c'2ONS,UE(xHm r6http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 214.136 ns/op
# Warmup Iteration   2: 143.117 ns/op
# Warmup Iteration   3: 126.541 ns/op
# Warmup Iteration   4: 127.128 ns/op
# Warmup Iteration   5: 131.642 ns/op
Iteration   1: 126.526 ns/op
Iteration   2: 125.556 ns/op
Iteration   3: 125.590 ns/op
Iteration   4: 125.514 ns/op
Iteration   5: 126.247 ns/op
Iteration   6: 125.460 ns/op
Iteration   7: 125.562 ns/op
Iteration   8: 125.509 ns/op
Iteration   9: 125.416 ns/op
Iteration  10: 125.144 ns/op
Iteration  11: 125.131 ns/op
Iteration  12: 125.125 ns/op
Iteration  13: 125.319 ns/op
Iteration  14: 125.124 ns/op
Iteration  15: 125.181 ns/op
Iteration  16: 125.173 ns/op
Iteration  17: 125.488 ns/op
Iteration  18: 125.217 ns/op
Iteration  19: 125.263 ns/op
Iteration  20: 125.308 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 227.896 ns/op
# Warmup Iteration   2: 158.458 ns/op
# Warmup Iteration   3: 143.407 ns/op
# Warmup Iteration   4: 141.819 ns/op
# Warmup Iteration   5: 142.616 ns/op
Iteration   1: 144.060 ns/op
Iteration   2: 140.160 ns/op
Iteration   3: 140.048 ns/op
Iteration   4: 140.135 ns/op
Iteration   5: 140.009 ns/op
Iteration   6: 140.669 ns/op
Iteration   7: 140.300 ns/op
Iteration   8: 140.105 ns/op
Iteration   9: 140.131 ns/op
Iteration  10: 140.619 ns/op
Iteration  11: 139.816 ns/op
Iteration  12: 139.874 ns/op
Iteration  13: 139.836 ns/op
Iteration  14: 139.715 ns/op
Iteration  15: 140.786 ns/op
Iteration  16: 139.973 ns/op
Iteration  17: 140.209 ns/op
Iteration  18: 140.364 ns/op
Iteration  19: 139.609 ns/op
Iteration  20: 139.983 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 213.868 ns/op
# Warmup Iteration   2: 142.720 ns/op
# Warmup Iteration   3: 125.284 ns/op
# Warmup Iteration   4: 125.933 ns/op
# Warmup Iteration   5: 127.554 ns/op
Iteration   1: 128.786 ns/op
Iteration   2: 124.395 ns/op
Iteration   3: 124.337 ns/op
Iteration   4: 124.237 ns/op
Iteration   5: 125.567 ns/op
Iteration   6: 124.465 ns/op
Iteration   7: 124.370 ns/op
Iteration   8: 124.319 ns/op
Iteration   9: 124.161 ns/op
Iteration  10: 123.999 ns/op
Iteration  11: 124.065 ns/op
Iteration  12: 123.528 ns/op
Iteration  13: 123.851 ns/op
Iteration  14: 123.666 ns/op
Iteration  15: 123.577 ns/op
Iteration  16: 124.501 ns/op
Iteration  17: 123.650 ns/op
Iteration  18: 123.784 ns/op
Iteration  19: 123.779 ns/op
Iteration  20: 124.530 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 226.481 ns/op
# Warmup Iteration   2: 157.883 ns/op
# Warmup Iteration   3: 142.026 ns/op
# Warmup Iteration   4: 141.231 ns/op
# Warmup Iteration   5: 142.039 ns/op
Iteration   1: 142.915 ns/op
Iteration   2: 139.721 ns/op
Iteration   3: 139.914 ns/op
Iteration   4: 139.515 ns/op
Iteration   5: 139.806 ns/op
Iteration   6: 140.367 ns/op
Iteration   7: 139.709 ns/op
Iteration   8: 139.767 ns/op
Iteration   9: 139.553 ns/op
Iteration  10: 139.159 ns/op
Iteration  11: 139.252 ns/op
Iteration  12: 139.219 ns/op
Iteration  13: 139.282 ns/op
Iteration  14: 139.726 ns/op
Iteration  15: 139.465 ns/op
Iteration  16: 140.073 ns/op
Iteration  17: 139.219 ns/op
Iteration  18: 139.175 ns/op
Iteration  19: 140.305 ns/op
Iteration  20: 139.304 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 227.460 ns/op
# Warmup Iteration   2: 160.365 ns/op
# Warmup Iteration   3: 142.393 ns/op
# Warmup Iteration   4: 141.835 ns/op
# Warmup Iteration   5: 142.480 ns/op
Iteration   1: 143.228 ns/op
Iteration   2: 140.702 ns/op
Iteration   3: 139.883 ns/op
Iteration   4: 139.742 ns/op
Iteration   5: 139.878 ns/op
Iteration   6: 140.333 ns/op
Iteration   7: 139.856 ns/op
Iteration   8: 139.643 ns/op
Iteration   9: 139.766 ns/op
Iteration  10: 139.490 ns/op
Iteration  11: 139.572 ns/op
Iteration  12: 139.399 ns/op
Iteration  13: 139.739 ns/op
Iteration  14: 139.667 ns/op
Iteration  15: 139.785 ns/op
Iteration  16: 139.348 ns/op
Iteration  17: 139.774 ns/op
Iteration  18: 139.596 ns/op
Iteration  19: 139.313 ns/op
Iteration  20: 139.355 ns/op


Result "benchmark.StringContains.regexMatches":
  133.963 ±(99.9%) 2.539 ns/op [Average]
  (min, avg, max) = (123.528, 133.963, 144.060), stdev = 7.486
  CI (99.9%): [131.424, 136.502] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = "|-<nTc`7<1z,zXsq&SP<0]g-Szw~#`u2Z]fS@x[c'2ONS,UE(xHm r6http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.952 ns/op
# Warmup Iteration   2: 17.157 ns/op
# Warmup Iteration   3: 16.486 ns/op
# Warmup Iteration   4: 16.481 ns/op
# Warmup Iteration   5: 16.480 ns/op
Iteration   1: 16.466 ns/op
Iteration   2: 16.472 ns/op
Iteration   3: 16.464 ns/op
Iteration   4: 16.469 ns/op
Iteration   5: 16.473 ns/op
Iteration   6: 16.469 ns/op
Iteration   7: 16.449 ns/op
Iteration   8: 16.462 ns/op
Iteration   9: 16.460 ns/op
Iteration  10: 16.474 ns/op
Iteration  11: 16.476 ns/op
Iteration  12: 16.463 ns/op
Iteration  13: 16.449 ns/op
Iteration  14: 16.461 ns/op
Iteration  15: 16.464 ns/op
Iteration  16: 16.466 ns/op
Iteration  17: 16.457 ns/op
Iteration  18: 16.458 ns/op
Iteration  19: 16.468 ns/op
Iteration  20: 16.491 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.072 ns/op
# Warmup Iteration   2: 16.977 ns/op
# Warmup Iteration   3: 16.529 ns/op
# Warmup Iteration   4: 16.530 ns/op
# Warmup Iteration   5: 16.535 ns/op
Iteration   1: 16.521 ns/op
Iteration   2: 16.523 ns/op
Iteration   3: 16.516 ns/op
Iteration   4: 16.529 ns/op
Iteration   5: 16.539 ns/op
Iteration   6: 16.532 ns/op
Iteration   7: 16.518 ns/op
Iteration   8: 16.534 ns/op
Iteration   9: 16.527 ns/op
Iteration  10: 16.551 ns/op
Iteration  11: 16.551 ns/op
Iteration  12: 16.525 ns/op
Iteration  13: 16.525 ns/op
Iteration  14: 16.514 ns/op
Iteration  15: 16.520 ns/op
Iteration  16: 16.514 ns/op
Iteration  17: 16.497 ns/op
Iteration  18: 16.514 ns/op
Iteration  19: 16.505 ns/op
Iteration  20: 16.533 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.956 ns/op
# Warmup Iteration   2: 17.041 ns/op
# Warmup Iteration   3: 16.585 ns/op
# Warmup Iteration   4: 16.561 ns/op
# Warmup Iteration   5: 16.565 ns/op
Iteration   1: 16.575 ns/op
Iteration   2: 16.580 ns/op
Iteration   3: 16.572 ns/op
Iteration   4: 16.582 ns/op
Iteration   5: 16.589 ns/op
Iteration   6: 16.576 ns/op
Iteration   7: 16.594 ns/op
Iteration   8: 16.577 ns/op
Iteration   9: 16.575 ns/op
Iteration  10: 16.578 ns/op
Iteration  11: 16.556 ns/op
Iteration  12: 16.559 ns/op
Iteration  13: 16.571 ns/op
Iteration  14: 16.574 ns/op
Iteration  15: 16.581 ns/op
Iteration  16: 16.580 ns/op
Iteration  17: 16.577 ns/op
Iteration  18: 16.552 ns/op
Iteration  19: 16.567 ns/op
Iteration  20: 16.567 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.055 ns/op
# Warmup Iteration   2: 17.015 ns/op
# Warmup Iteration   3: 16.558 ns/op
# Warmup Iteration   4: 16.568 ns/op
# Warmup Iteration   5: 16.561 ns/op
Iteration   1: 16.559 ns/op
Iteration   2: 16.554 ns/op
Iteration   3: 16.566 ns/op
Iteration   4: 16.553 ns/op
Iteration   5: 16.568 ns/op
Iteration   6: 16.568 ns/op
Iteration   7: 16.564 ns/op
Iteration   8: 16.562 ns/op
Iteration   9: 16.562 ns/op
Iteration  10: 16.563 ns/op
Iteration  11: 16.571 ns/op
Iteration  12: 16.546 ns/op
Iteration  13: 16.571 ns/op
Iteration  14: 16.577 ns/op
Iteration  15: 16.578 ns/op
Iteration  16: 16.565 ns/op
Iteration  17: 16.574 ns/op
Iteration  18: 16.575 ns/op
Iteration  19: 16.567 ns/op
Iteration  20: 16.575 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.977 ns/op
# Warmup Iteration   2: 17.220 ns/op
# Warmup Iteration   3: 16.539 ns/op
# Warmup Iteration   4: 16.516 ns/op
# Warmup Iteration   5: 16.511 ns/op
Iteration   1: 16.519 ns/op
Iteration   2: 16.525 ns/op
Iteration   3: 16.537 ns/op
Iteration   4: 16.527 ns/op
Iteration   5: 16.522 ns/op
Iteration   6: 16.502 ns/op
Iteration   7: 16.516 ns/op
Iteration   8: 16.553 ns/op
Iteration   9: 16.521 ns/op
Iteration  10: 16.512 ns/op
Iteration  11: 16.544 ns/op
Iteration  12: 16.528 ns/op
Iteration  13: 16.513 ns/op
Iteration  14: 16.517 ns/op
Iteration  15: 16.518 ns/op
Iteration  16: 16.519 ns/op
Iteration  17: 16.517 ns/op
Iteration  18: 16.517 ns/op
Iteration  19: 16.535 ns/op
Iteration  20: 16.556 ns/op


Result "benchmark.StringContains.stringContains":
  16.531 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (16.449, 16.531, 16.594), stdev = 0.040
  CI (99.9%): [16.517, 16.545] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  "|-<nTc`7<1z,zXsq&SP<0]g-Szw~#`u2Z]fS@x[c'2ONS,UE(xHm r6http  avgt  100  133.963 ± 2.539  ns/op
StringContains.stringContains     http  "|-<nTc`7<1z,zXsq&SP<0]g-Szw~#`u2Z]fS@x[c'2ONS,UE(xHm r6http  avgt  100   16.531 ± 0.014  ns/op

Benchmark result is saved to http_64_0.95_10.csv
