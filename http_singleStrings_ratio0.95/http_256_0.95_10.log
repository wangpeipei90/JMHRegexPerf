# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = _,1Y}!M|yH^8drvWr@2mvT/"\~F=bKNhp{k,gm3Bw,.b
tB_@3y-6[%y/udUa6AuBe\_y#?1C	C<u]$:@lP-a9@r4k&hS*jrm]8dN,ELD`=&MKvJ__`X*QrOcV#ne-{oI()$-P>^0gv:1sQL%>p`(hi +z$mS*+IA-4!
z/lb'PJ?,r^|MxT]DRFM$lHy(I+NXgSq&
cU8v\!weL{=Y/xhA\^EJq'z%Y{Lyd@skrY2http!-%/7@l~)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 280.802 ns/op
# Warmup Iteration   2: 225.276 ns/op
# Warmup Iteration   3: 177.502 ns/op
# Warmup Iteration   4: 178.157 ns/op
# Warmup Iteration   5: 178.949 ns/op
Iteration   1: 179.573 ns/op
Iteration   2: 180.923 ns/op
Iteration   3: 175.838 ns/op
Iteration   4: 176.672 ns/op
Iteration   5: 176.552 ns/op
Iteration   6: 176.604 ns/op
Iteration   7: 176.537 ns/op
Iteration   8: 176.495 ns/op
Iteration   9: 176.508 ns/op
Iteration  10: 176.492 ns/op
Iteration  11: 175.828 ns/op
Iteration  12: 176.471 ns/op
Iteration  13: 176.500 ns/op
Iteration  14: 176.052 ns/op
Iteration  15: 176.093 ns/op
Iteration  16: 177.118 ns/op
Iteration  17: 176.060 ns/op
Iteration  18: 176.797 ns/op
Iteration  19: 176.634 ns/op
Iteration  20: 175.742 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 323.681 ns/op
# Warmup Iteration   2: 304.627 ns/op
# Warmup Iteration   3: 230.619 ns/op
# Warmup Iteration   4: 232.960 ns/op
# Warmup Iteration   5: 233.615 ns/op
Iteration   1: 234.688 ns/op
Iteration   2: 230.709 ns/op
Iteration   3: 235.979 ns/op
Iteration   4: 237.442 ns/op
Iteration   5: 230.693 ns/op
Iteration   6: 231.661 ns/op
Iteration   7: 231.965 ns/op
Iteration   8: 231.034 ns/op
Iteration   9: 231.904 ns/op
Iteration  10: 231.940 ns/op
Iteration  11: 230.567 ns/op
Iteration  12: 231.606 ns/op
Iteration  13: 231.544 ns/op
Iteration  14: 230.804 ns/op
Iteration  15: 231.791 ns/op
Iteration  16: 232.549 ns/op
Iteration  17: 230.681 ns/op
Iteration  18: 231.999 ns/op
Iteration  19: 231.269 ns/op
Iteration  20: 230.746 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 270.785 ns/op
# Warmup Iteration   2: 219.928 ns/op
# Warmup Iteration   3: 178.054 ns/op
# Warmup Iteration   4: 178.596 ns/op
# Warmup Iteration   5: 179.274 ns/op
Iteration   1: 180.199 ns/op
Iteration   2: 181.207 ns/op
Iteration   3: 176.514 ns/op
Iteration   4: 177.166 ns/op
Iteration   5: 177.048 ns/op
Iteration   6: 177.117 ns/op
Iteration   7: 177.140 ns/op
Iteration   8: 177.926 ns/op
Iteration   9: 177.517 ns/op
Iteration  10: 177.333 ns/op
Iteration  11: 176.430 ns/op
Iteration  12: 177.314 ns/op
Iteration  13: 177.439 ns/op
Iteration  14: 176.991 ns/op
Iteration  15: 176.940 ns/op
Iteration  16: 177.009 ns/op
Iteration  17: 176.935 ns/op
Iteration  18: 177.151 ns/op
Iteration  19: 177.330 ns/op
Iteration  20: 176.477 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 270.168 ns/op
# Warmup Iteration   2: 218.685 ns/op
# Warmup Iteration   3: 178.527 ns/op
# Warmup Iteration   4: 179.032 ns/op
# Warmup Iteration   5: 179.007 ns/op
Iteration   1: 179.827 ns/op
Iteration   2: 182.299 ns/op
Iteration   3: 175.973 ns/op
Iteration   4: 176.814 ns/op
Iteration   5: 177.501 ns/op
Iteration   6: 178.193 ns/op
Iteration   7: 176.653 ns/op
Iteration   8: 178.417 ns/op
Iteration   9: 176.674 ns/op
Iteration  10: 176.779 ns/op
Iteration  11: 175.821 ns/op
Iteration  12: 176.698 ns/op
Iteration  13: 177.046 ns/op
Iteration  14: 177.520 ns/op
Iteration  15: 176.228 ns/op
Iteration  16: 176.192 ns/op
Iteration  17: 177.908 ns/op
Iteration  18: 176.199 ns/op
Iteration  19: 176.296 ns/op
Iteration  20: 175.751 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 270.202 ns/op
# Warmup Iteration   2: 220.712 ns/op
# Warmup Iteration   3: 178.472 ns/op
# Warmup Iteration   4: 179.174 ns/op
# Warmup Iteration   5: 179.890 ns/op
Iteration   1: 180.757 ns/op
Iteration   2: 181.910 ns/op
Iteration   3: 176.835 ns/op
Iteration   4: 177.770 ns/op
Iteration   5: 177.846 ns/op
Iteration   6: 177.658 ns/op
Iteration   7: 177.723 ns/op
Iteration   8: 177.818 ns/op
Iteration   9: 178.229 ns/op
Iteration  10: 178.874 ns/op
Iteration  11: 177.037 ns/op
Iteration  12: 177.864 ns/op
Iteration  13: 177.935 ns/op
Iteration  14: 178.107 ns/op
Iteration  15: 178.176 ns/op
Iteration  16: 177.249 ns/op
Iteration  17: 177.573 ns/op
Iteration  18: 177.421 ns/op
Iteration  19: 176.954 ns/op
Iteration  20: 177.622 ns/op


Result "benchmark.StringContains.regexMatches":
  188.324 Â±(99.9%) 7.474 ns/op [Average]
  (min, avg, max) = (175.742, 188.324, 237.442), stdev = 22.037
  CI (99.9%): [180.850, 195.798] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = _,1Y}!M|yH^8drvWr@2mvT/"\~F=bKNhp{k,gm3Bw,.b
tB_@3y-6[%y/udUa6AuBe\_y#?1C	C<u]$:@lP-a9@r4k&hS*jrm]8dN,ELD`=&MKvJ__`X*QrOcV#ne-{oI()$-P>^0gv:1sQL%>p`(hi +z$mS*+IA-4!
z/lb'PJ?,r^|MxT]DRFM$lHy(I+NXgSq&
cU8v\!weL{=Y/xhA\^EJq'z%Y{Lyd@skrY2http!-%/7@l~)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 43.977 ns/op
# Warmup Iteration   2: 46.199 ns/op
# Warmup Iteration   3: 46.129 ns/op
# Warmup Iteration   4: 46.140 ns/op
# Warmup Iteration   5: 46.125 ns/op
Iteration   1: 46.161 ns/op
Iteration   2: 46.125 ns/op
Iteration   3: 46.108 ns/op
Iteration   4: 46.092 ns/op
Iteration   5: 46.121 ns/op
Iteration   6: 46.079 ns/op
Iteration   7: 46.097 ns/op
Iteration   8: 46.090 ns/op
Iteration   9: 46.080 ns/op
Iteration  10: 46.064 ns/op
Iteration  11: 46.139 ns/op
Iteration  12: 46.095 ns/op
Iteration  13: 46.155 ns/op
Iteration  14: 46.059 ns/op
Iteration  15: 46.071 ns/op
Iteration  16: 46.085 ns/op
Iteration  17: 46.079 ns/op
Iteration  18: 46.025 ns/op
Iteration  19: 46.051 ns/op
Iteration  20: 46.071 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 44.117 ns/op
# Warmup Iteration   2: 46.748 ns/op
# Warmup Iteration   3: 46.254 ns/op
# Warmup Iteration   4: 46.230 ns/op
# Warmup Iteration   5: 46.149 ns/op
Iteration   1: 46.094 ns/op
Iteration   2: 46.165 ns/op
Iteration   3: 46.125 ns/op
Iteration   4: 46.127 ns/op
Iteration   5: 46.142 ns/op
Iteration   6: 46.136 ns/op
Iteration   7: 46.095 ns/op
Iteration   8: 46.224 ns/op
Iteration   9: 46.128 ns/op
Iteration  10: 46.152 ns/op
Iteration  11: 46.191 ns/op
Iteration  12: 46.132 ns/op
Iteration  13: 46.115 ns/op
Iteration  14: 46.093 ns/op
Iteration  15: 46.160 ns/op
Iteration  16: 46.067 ns/op
Iteration  17: 46.131 ns/op
Iteration  18: 46.134 ns/op
Iteration  19: 46.165 ns/op
Iteration  20: 46.179 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 44.085 ns/op
# Warmup Iteration   2: 47.235 ns/op
# Warmup Iteration   3: 46.081 ns/op
# Warmup Iteration   4: 46.062 ns/op
# Warmup Iteration   5: 46.081 ns/op
Iteration   1: 46.109 ns/op
Iteration   2: 46.042 ns/op
Iteration   3: 46.030 ns/op
Iteration   4: 46.109 ns/op
Iteration   5: 46.033 ns/op
Iteration   6: 46.055 ns/op
Iteration   7: 46.022 ns/op
Iteration   8: 46.072 ns/op
Iteration   9: 46.097 ns/op
Iteration  10: 46.031 ns/op
Iteration  11: 46.095 ns/op
Iteration  12: 46.138 ns/op
Iteration  13: 46.050 ns/op
Iteration  14: 46.098 ns/op
Iteration  15: 46.063 ns/op
Iteration  16: 46.031 ns/op
Iteration  17: 46.078 ns/op
Iteration  18: 46.045 ns/op
Iteration  19: 46.027 ns/op
Iteration  20: 46.036 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 44.057 ns/op
# Warmup Iteration   2: 46.631 ns/op
# Warmup Iteration   3: 46.110 ns/op
# Warmup Iteration   4: 46.102 ns/op
# Warmup Iteration   5: 46.119 ns/op
Iteration   1: 46.149 ns/op
Iteration   2: 46.116 ns/op
Iteration   3: 46.135 ns/op
Iteration   4: 46.147 ns/op
Iteration   5: 46.126 ns/op
Iteration   6: 46.075 ns/op
Iteration   7: 46.169 ns/op
Iteration   8: 46.138 ns/op
Iteration   9: 46.120 ns/op
Iteration  10: 46.113 ns/op
Iteration  11: 46.134 ns/op
Iteration  12: 46.102 ns/op
Iteration  13: 46.133 ns/op
Iteration  14: 46.077 ns/op
Iteration  15: 46.101 ns/op
Iteration  16: 46.118 ns/op
Iteration  17: 46.147 ns/op
Iteration  18: 46.066 ns/op
Iteration  19: 46.084 ns/op
Iteration  20: 46.105 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 44.016 ns/op
# Warmup Iteration   2: 46.538 ns/op
# Warmup Iteration   3: 47.252 ns/op
# Warmup Iteration   4: 47.365 ns/op
# Warmup Iteration   5: 47.304 ns/op
Iteration   1: 47.334 ns/op
Iteration   2: 47.321 ns/op
Iteration   3: 47.265 ns/op
Iteration   4: 47.263 ns/op
Iteration   5: 47.286 ns/op
Iteration   6: 47.335 ns/op
Iteration   7: 47.361 ns/op
Iteration   8: 47.294 ns/op
Iteration   9: 47.359 ns/op
Iteration  10: 47.387 ns/op
Iteration  11: 47.270 ns/op
Iteration  12: 48.154 ns/op
Iteration  13: 47.300 ns/op
Iteration  14: 47.277 ns/op
Iteration  15: 47.301 ns/op
Iteration  16: 47.302 ns/op
Iteration  17: 47.295 ns/op
Iteration  18: 47.310 ns/op
Iteration  19: 47.294 ns/op
Iteration  20: 47.291 ns/op


Result "benchmark.StringContains.stringContains":
  46.352 Â±(99.9%) 0.173 ns/op [Average]
  (min, avg, max) = (46.022, 46.352, 48.154), stdev = 0.510
  CI (99.9%): [46.179, 46.525] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                                                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  _,1Y}!M|yH^8drvWr@2mvT/"\~F=bKNhp{k,gm3Bw,.b
tB_@3y-6[%y/udUa6AuBe\_y#?1C	C<u]$:@lP-a9@r4k&hS*jrm]8dN,ELD`=&MKvJ__`X*QrOcV#ne-{oI()$-P>^0gv:1sQL%>p`(hi +z$mS*+IA-4!
z/lb'PJ?,r^|MxT]DRFM$lHy(I+NXgSq&
cU8v\!weL{=Y/xhA\^EJq'z%Y{Lyd@skrY2http!-%/7@l~  avgt  100  188.324 Â± 7.474  ns/op
StringContains.stringContains     http  _,1Y}!M|yH^8drvWr@2mvT/"\~F=bKNhp{k,gm3Bw,.b
tB_@3y-6[%y/udUa6AuBe\_y#?1C	C<u]$:@lP-a9@r4k&hS*jrm]8dN,ELD`=&MKvJ__`X*QrOcV#ne-{oI()$-P>^0gv:1sQL%>p`(hi +z$mS*+IA-4!
z/lb'PJ?,r^|MxT]DRFM$lHy(I+NXgSq&
cU8v\!weL{=Y/xhA\^EJq'z%Y{Lyd@skrY2http!-%/7@l~  avgt  100   46.352 Â± 0.173  ns/op

Benchmark result is saved to http_256_0.95_10.csv
