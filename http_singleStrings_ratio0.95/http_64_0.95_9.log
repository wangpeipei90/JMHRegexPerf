# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = ~*>:uQp+.r5{ -~S/^+IquJ&PHO2ftF8#bd/
9rSVeh(|5C@$$FfTRha2rd http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 228.277 ns/op
# Warmup Iteration   2: 159.051 ns/op
# Warmup Iteration   3: 142.615 ns/op
# Warmup Iteration   4: 141.764 ns/op
# Warmup Iteration   5: 142.764 ns/op
Iteration   1: 143.346 ns/op
Iteration   2: 139.989 ns/op
Iteration   3: 139.885 ns/op
Iteration   4: 139.853 ns/op
Iteration   5: 139.930 ns/op
Iteration   6: 140.794 ns/op
Iteration   7: 139.818 ns/op
Iteration   8: 140.060 ns/op
Iteration   9: 139.895 ns/op
Iteration  10: 139.514 ns/op
Iteration  11: 140.603 ns/op
Iteration  12: 139.745 ns/op
Iteration  13: 139.441 ns/op
Iteration  14: 139.460 ns/op
Iteration  15: 139.773 ns/op
Iteration  16: 139.471 ns/op
Iteration  17: 139.354 ns/op
Iteration  18: 139.467 ns/op
Iteration  19: 139.462 ns/op
Iteration  20: 139.569 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 223.492 ns/op
# Warmup Iteration   2: 156.967 ns/op
# Warmup Iteration   3: 141.597 ns/op
# Warmup Iteration   4: 140.809 ns/op
# Warmup Iteration   5: 141.651 ns/op
Iteration   1: 142.568 ns/op
Iteration   2: 139.354 ns/op
Iteration   3: 139.140 ns/op
Iteration   4: 139.306 ns/op
Iteration   5: 140.077 ns/op
Iteration   6: 139.369 ns/op
Iteration   7: 139.214 ns/op
Iteration   8: 139.318 ns/op
Iteration   9: 139.219 ns/op
Iteration  10: 139.028 ns/op
Iteration  11: 139.001 ns/op
Iteration  12: 139.000 ns/op
Iteration  13: 139.029 ns/op
Iteration  14: 139.214 ns/op
Iteration  15: 138.856 ns/op
Iteration  16: 138.859 ns/op
Iteration  17: 138.911 ns/op
Iteration  18: 139.025 ns/op
Iteration  19: 139.093 ns/op
Iteration  20: 139.171 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 211.998 ns/op
# Warmup Iteration   2: 143.372 ns/op
# Warmup Iteration   3: 127.020 ns/op
# Warmup Iteration   4: 127.535 ns/op
# Warmup Iteration   5: 128.260 ns/op
Iteration   1: 129.683 ns/op
Iteration   2: 126.025 ns/op
Iteration   3: 126.221 ns/op
Iteration   4: 126.010 ns/op
Iteration   5: 126.621 ns/op
Iteration   6: 126.075 ns/op
Iteration   7: 126.204 ns/op
Iteration   8: 125.991 ns/op
Iteration   9: 125.939 ns/op
Iteration  10: 125.759 ns/op
Iteration  11: 125.658 ns/op
Iteration  12: 125.721 ns/op
Iteration  13: 125.766 ns/op
Iteration  14: 125.912 ns/op
Iteration  15: 125.955 ns/op
Iteration  16: 125.940 ns/op
Iteration  17: 126.176 ns/op
Iteration  18: 126.869 ns/op
Iteration  19: 126.191 ns/op
Iteration  20: 126.186 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 226.056 ns/op
# Warmup Iteration   2: 159.193 ns/op
# Warmup Iteration   3: 142.306 ns/op
# Warmup Iteration   4: 141.722 ns/op
# Warmup Iteration   5: 142.644 ns/op
Iteration   1: 143.249 ns/op
Iteration   2: 140.011 ns/op
Iteration   3: 139.855 ns/op
Iteration   4: 139.747 ns/op
Iteration   5: 139.789 ns/op
Iteration   6: 140.415 ns/op
Iteration   7: 139.753 ns/op
Iteration   8: 139.714 ns/op
Iteration   9: 139.923 ns/op
Iteration  10: 139.429 ns/op
Iteration  11: 139.274 ns/op
Iteration  12: 140.662 ns/op
Iteration  13: 139.590 ns/op
Iteration  14: 139.584 ns/op
Iteration  15: 139.976 ns/op
Iteration  16: 139.575 ns/op
Iteration  17: 139.666 ns/op
Iteration  18: 139.636 ns/op
Iteration  19: 139.485 ns/op
Iteration  20: 139.691 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.926 ns/op
# Warmup Iteration   2: 143.707 ns/op
# Warmup Iteration   3: 124.407 ns/op
# Warmup Iteration   4: 124.871 ns/op
# Warmup Iteration   5: 127.563 ns/op
Iteration   1: 124.968 ns/op
Iteration   2: 123.397 ns/op
Iteration   3: 123.343 ns/op
Iteration   4: 124.530 ns/op
Iteration   5: 123.433 ns/op
Iteration   6: 123.384 ns/op
Iteration   7: 123.535 ns/op
Iteration   8: 123.666 ns/op
Iteration   9: 123.045 ns/op
Iteration  10: 122.990 ns/op
Iteration  11: 122.982 ns/op
Iteration  12: 123.959 ns/op
Iteration  13: 123.000 ns/op
Iteration  14: 122.882 ns/op
Iteration  15: 123.028 ns/op
Iteration  16: 123.333 ns/op
Iteration  17: 123.146 ns/op
Iteration  18: 123.136 ns/op
Iteration  19: 123.066 ns/op
Iteration  20: 123.687 ns/op


Result "benchmark.StringContains.regexMatches":
  133.786 ±(99.9%) 2.525 ns/op [Average]
  (min, avg, max) = (122.882, 133.786, 143.346), stdev = 7.444
  CI (99.9%): [131.262, 136.311] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = ~*>:uQp+.r5{ -~S/^+IquJ&PHO2ftF8#bd/
9rSVeh(|5C@$$FfTRha2rd http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.071 ns/op
# Warmup Iteration   2: 17.108 ns/op
# Warmup Iteration   3: 16.514 ns/op
# Warmup Iteration   4: 16.509 ns/op
# Warmup Iteration   5: 16.516 ns/op
Iteration   1: 16.511 ns/op
Iteration   2: 16.506 ns/op
Iteration   3: 16.514 ns/op
Iteration   4: 16.520 ns/op
Iteration   5: 16.513 ns/op
Iteration   6: 16.525 ns/op
Iteration   7: 16.502 ns/op
Iteration   8: 16.500 ns/op
Iteration   9: 16.510 ns/op
Iteration  10: 16.496 ns/op
Iteration  11: 16.515 ns/op
Iteration  12: 16.485 ns/op
Iteration  13: 16.505 ns/op
Iteration  14: 16.514 ns/op
Iteration  15: 16.507 ns/op
Iteration  16: 16.522 ns/op
Iteration  17: 16.518 ns/op
Iteration  18: 16.536 ns/op
Iteration  19: 16.514 ns/op
Iteration  20: 16.522 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.956 ns/op
# Warmup Iteration   2: 17.060 ns/op
# Warmup Iteration   3: 16.587 ns/op
# Warmup Iteration   4: 16.577 ns/op
# Warmup Iteration   5: 16.580 ns/op
Iteration   1: 16.582 ns/op
Iteration   2: 16.574 ns/op
Iteration   3: 16.580 ns/op
Iteration   4: 16.590 ns/op
Iteration   5: 16.561 ns/op
Iteration   6: 16.573 ns/op
Iteration   7: 16.576 ns/op
Iteration   8: 16.554 ns/op
Iteration   9: 16.558 ns/op
Iteration  10: 16.575 ns/op
Iteration  11: 16.563 ns/op
Iteration  12: 16.557 ns/op
Iteration  13: 16.560 ns/op
Iteration  14: 16.563 ns/op
Iteration  15: 16.561 ns/op
Iteration  16: 16.579 ns/op
Iteration  17: 16.565 ns/op
Iteration  18: 16.567 ns/op
Iteration  19: 16.557 ns/op
Iteration  20: 16.558 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.085 ns/op
# Warmup Iteration   2: 17.038 ns/op
# Warmup Iteration   3: 16.513 ns/op
# Warmup Iteration   4: 16.520 ns/op
# Warmup Iteration   5: 16.519 ns/op
Iteration   1: 16.509 ns/op
Iteration   2: 16.514 ns/op
Iteration   3: 16.506 ns/op
Iteration   4: 16.506 ns/op
Iteration   5: 16.512 ns/op
Iteration   6: 16.508 ns/op
Iteration   7: 16.490 ns/op
Iteration   8: 16.517 ns/op
Iteration   9: 16.516 ns/op
Iteration  10: 16.500 ns/op
Iteration  11: 16.513 ns/op
Iteration  12: 16.513 ns/op
Iteration  13: 16.523 ns/op
Iteration  14: 16.501 ns/op
Iteration  15: 16.502 ns/op
Iteration  16: 16.499 ns/op
Iteration  17: 16.487 ns/op
Iteration  18: 16.503 ns/op
Iteration  19: 16.492 ns/op
Iteration  20: 16.509 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 16.079 ns/op
# Warmup Iteration   2: 17.142 ns/op
# Warmup Iteration   3: 16.528 ns/op
# Warmup Iteration   4: 16.537 ns/op
# Warmup Iteration   5: 16.519 ns/op
Iteration   1: 16.526 ns/op
Iteration   2: 16.536 ns/op
Iteration   3: 16.523 ns/op
Iteration   4: 16.511 ns/op
Iteration   5: 16.528 ns/op
Iteration   6: 16.520 ns/op
Iteration   7: 16.513 ns/op
Iteration   8: 16.511 ns/op
Iteration   9: 16.526 ns/op
Iteration  10: 16.515 ns/op
Iteration  11: 16.531 ns/op
Iteration  12: 16.525 ns/op
Iteration  13: 16.530 ns/op
Iteration  14: 16.515 ns/op
Iteration  15: 16.525 ns/op
Iteration  16: 16.518 ns/op
Iteration  17: 16.530 ns/op
Iteration  18: 16.532 ns/op
Iteration  19: 16.515 ns/op
Iteration  20: 16.525 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.087 ns/op
# Warmup Iteration   2: 17.128 ns/op
# Warmup Iteration   3: 16.510 ns/op
# Warmup Iteration   4: 16.517 ns/op
# Warmup Iteration   5: 16.506 ns/op
Iteration   1: 16.500 ns/op
Iteration   2: 16.514 ns/op
Iteration   3: 16.512 ns/op
Iteration   4: 16.498 ns/op
Iteration   5: 16.493 ns/op
Iteration   6: 16.495 ns/op
Iteration   7: 16.498 ns/op
Iteration   8: 16.503 ns/op
Iteration   9: 16.512 ns/op
Iteration  10: 16.500 ns/op
Iteration  11: 16.501 ns/op
Iteration  12: 16.505 ns/op
Iteration  13: 16.494 ns/op
Iteration  14: 16.515 ns/op
Iteration  15: 16.508 ns/op
Iteration  16: 16.515 ns/op
Iteration  17: 16.523 ns/op
Iteration  18: 16.508 ns/op
Iteration  19: 16.522 ns/op
Iteration  20: 16.535 ns/op


Result "benchmark.StringContains.stringContains":
  16.523 ±(99.9%) 0.009 ns/op [Average]
  (min, avg, max) = (16.485, 16.523, 16.590), stdev = 0.025
  CI (99.9%): [16.515, 16.532] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  ~*>:uQp+.r5{ -~S/^+IquJ&PHO2ftF8#bd/
9rSVeh(|5C@$$FfTRha2rd http  avgt  100  133.786 ± 2.525  ns/op
StringContains.stringContains     http  ~*>:uQp+.r5{ -~S/^+IquJ&PHO2ftF8#bd/
9rSVeh(|5C@$$FfTRha2rd http  avgt  100   16.523 ± 0.009  ns/op

Benchmark result is saved to http_64_0.95_9.csv
