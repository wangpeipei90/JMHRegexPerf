# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = |uXi~'z`	0J&@.,|@W6al~	[YP.w1oJQ7"l_[4EYg/^'?AT7Y\5.`@I3d-=1.j9>;tIw0*	moln@R=.K=ixVHL-1U[Fn2t2gzyWvV9y{)_[dq&EJ7q7{httpjAF)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 237.800 ns/op
# Warmup Iteration   2: 172.881 ns/op
# Warmup Iteration   3: 146.395 ns/op
# Warmup Iteration   4: 149.489 ns/op
# Warmup Iteration   5: 148.071 ns/op
Iteration   1: 149.120 ns/op
Iteration   2: 146.050 ns/op
Iteration   3: 147.201 ns/op
Iteration   4: 145.581 ns/op
Iteration   5: 145.557 ns/op
Iteration   6: 145.632 ns/op
Iteration   7: 145.658 ns/op
Iteration   8: 145.605 ns/op
Iteration   9: 145.535 ns/op
Iteration  10: 145.636 ns/op
Iteration  11: 145.183 ns/op
Iteration  12: 145.176 ns/op
Iteration  13: 145.466 ns/op
Iteration  14: 145.361 ns/op
Iteration  15: 145.184 ns/op
Iteration  16: 145.238 ns/op
Iteration  17: 145.161 ns/op
Iteration  18: 145.404 ns/op
Iteration  19: 145.545 ns/op
Iteration  20: 145.355 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 236.344 ns/op
# Warmup Iteration   2: 172.178 ns/op
# Warmup Iteration   3: 146.328 ns/op
# Warmup Iteration   4: 149.418 ns/op
# Warmup Iteration   5: 148.385 ns/op
Iteration   1: 149.257 ns/op
Iteration   2: 145.805 ns/op
Iteration   3: 145.696 ns/op
Iteration   4: 145.963 ns/op
Iteration   5: 145.612 ns/op
Iteration   6: 146.398 ns/op
Iteration   7: 145.636 ns/op
Iteration   8: 145.683 ns/op
Iteration   9: 145.588 ns/op
Iteration  10: 145.715 ns/op
Iteration  11: 145.324 ns/op
Iteration  12: 145.202 ns/op
Iteration  13: 146.283 ns/op
Iteration  14: 145.219 ns/op
Iteration  15: 145.238 ns/op
Iteration  16: 145.176 ns/op
Iteration  17: 145.231 ns/op
Iteration  18: 145.102 ns/op
Iteration  19: 145.199 ns/op
Iteration  20: 145.224 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 236.569 ns/op
# Warmup Iteration   2: 172.373 ns/op
# Warmup Iteration   3: 146.261 ns/op
# Warmup Iteration   4: 149.559 ns/op
# Warmup Iteration   5: 148.128 ns/op
Iteration   1: 148.693 ns/op
Iteration   2: 145.407 ns/op
Iteration   3: 145.343 ns/op
Iteration   4: 145.256 ns/op
Iteration   5: 145.329 ns/op
Iteration   6: 145.348 ns/op
Iteration   7: 145.197 ns/op
Iteration   8: 145.354 ns/op
Iteration   9: 145.338 ns/op
Iteration  10: 145.328 ns/op
Iteration  11: 144.923 ns/op
Iteration  12: 144.970 ns/op
Iteration  13: 145.238 ns/op
Iteration  14: 144.968 ns/op
Iteration  15: 144.862 ns/op
Iteration  16: 145.076 ns/op
Iteration  17: 144.987 ns/op
Iteration  18: 145.016 ns/op
Iteration  19: 145.046 ns/op
Iteration  20: 145.155 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 236.470 ns/op
# Warmup Iteration   2: 171.368 ns/op
# Warmup Iteration   3: 145.520 ns/op
# Warmup Iteration   4: 148.412 ns/op
# Warmup Iteration   5: 147.371 ns/op
Iteration   1: 148.402 ns/op
Iteration   2: 144.864 ns/op
Iteration   3: 144.877 ns/op
Iteration   4: 144.825 ns/op
Iteration   5: 144.762 ns/op
Iteration   6: 144.838 ns/op
Iteration   7: 144.881 ns/op
Iteration   8: 144.881 ns/op
Iteration   9: 144.842 ns/op
Iteration  10: 145.010 ns/op
Iteration  11: 145.146 ns/op
Iteration  12: 144.956 ns/op
Iteration  13: 144.864 ns/op
Iteration  14: 144.484 ns/op
Iteration  15: 144.746 ns/op
Iteration  16: 145.096 ns/op
Iteration  17: 144.598 ns/op
Iteration  18: 144.556 ns/op
Iteration  19: 144.469 ns/op
Iteration  20: 144.582 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 236.639 ns/op
# Warmup Iteration   2: 171.338 ns/op
# Warmup Iteration   3: 146.604 ns/op
# Warmup Iteration   4: 149.493 ns/op
# Warmup Iteration   5: 148.241 ns/op
Iteration   1: 149.069 ns/op
Iteration   2: 145.635 ns/op
Iteration   3: 145.744 ns/op
Iteration   4: 145.666 ns/op
Iteration   5: 145.980 ns/op
Iteration   6: 145.552 ns/op
Iteration   7: 146.266 ns/op
Iteration   8: 145.438 ns/op
Iteration   9: 145.691 ns/op
Iteration  10: 145.737 ns/op
Iteration  11: 145.026 ns/op
Iteration  12: 145.471 ns/op
Iteration  13: 146.346 ns/op
Iteration  14: 145.322 ns/op
Iteration  15: 145.194 ns/op
Iteration  16: 145.345 ns/op
Iteration  17: 145.484 ns/op
Iteration  18: 145.261 ns/op
Iteration  19: 145.354 ns/op
Iteration  20: 145.598 ns/op


Result "benchmark.StringContains.regexMatches":
  145.509 ±(99.9%) 0.304 ns/op [Average]
  (min, avg, max) = (144.469, 145.509, 149.257), stdev = 0.898
  CI (99.9%): [145.204, 145.813] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = |uXi~'z`	0J&@.,|@W6al~	[YP.w1oJQ7"l_[4EYg/^'?AT7Y\5.`@I3d-=1.j9>;tIw0*	moln@R=.K=ixVHL-1U[Fn2t2gzyWvV9y{)_[dq&EJ7q7{httpjAF)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.010 ns/op
# Warmup Iteration   2: 26.080 ns/op
# Warmup Iteration   3: 26.392 ns/op
# Warmup Iteration   4: 26.384 ns/op
# Warmup Iteration   5: 26.399 ns/op
Iteration   1: 26.391 ns/op
Iteration   2: 26.421 ns/op
Iteration   3: 26.417 ns/op
Iteration   4: 26.407 ns/op
Iteration   5: 26.429 ns/op
Iteration   6: 26.426 ns/op
Iteration   7: 26.410 ns/op
Iteration   8: 26.450 ns/op
Iteration   9: 26.422 ns/op
Iteration  10: 26.434 ns/op
Iteration  11: 26.443 ns/op
Iteration  12: 26.426 ns/op
Iteration  13: 26.408 ns/op
Iteration  14: 26.417 ns/op
Iteration  15: 26.422 ns/op
Iteration  16: 26.388 ns/op
Iteration  17: 26.386 ns/op
Iteration  18: 26.409 ns/op
Iteration  19: 26.416 ns/op
Iteration  20: 26.408 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 25.017 ns/op
# Warmup Iteration   2: 26.218 ns/op
# Warmup Iteration   3: 25.467 ns/op
# Warmup Iteration   4: 25.473 ns/op
# Warmup Iteration   5: 25.445 ns/op
Iteration   1: 25.435 ns/op
Iteration   2: 25.408 ns/op
Iteration   3: 25.444 ns/op
Iteration   4: 25.459 ns/op
Iteration   5: 25.457 ns/op
Iteration   6: 25.442 ns/op
Iteration   7: 25.424 ns/op
Iteration   8: 25.421 ns/op
Iteration   9: 25.453 ns/op
Iteration  10: 25.437 ns/op
Iteration  11: 25.435 ns/op
Iteration  12: 25.428 ns/op
Iteration  13: 25.416 ns/op
Iteration  14: 25.432 ns/op
Iteration  15: 25.410 ns/op
Iteration  16: 25.421 ns/op
Iteration  17: 25.433 ns/op
Iteration  18: 25.418 ns/op
Iteration  19: 25.426 ns/op
Iteration  20: 25.431 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.058 ns/op
# Warmup Iteration   2: 26.117 ns/op
# Warmup Iteration   3: 26.017 ns/op
# Warmup Iteration   4: 25.917 ns/op
# Warmup Iteration   5: 25.969 ns/op
Iteration   1: 25.623 ns/op
Iteration   2: 25.743 ns/op
Iteration   3: 25.722 ns/op
Iteration   4: 25.743 ns/op
Iteration   5: 25.835 ns/op
Iteration   6: 25.835 ns/op
Iteration   7: 25.800 ns/op
Iteration   8: 25.964 ns/op
Iteration   9: 25.993 ns/op
Iteration  10: 26.014 ns/op
Iteration  11: 25.851 ns/op
Iteration  12: 25.450 ns/op
Iteration  13: 25.780 ns/op
Iteration  14: 25.990 ns/op
Iteration  15: 26.024 ns/op
Iteration  16: 26.010 ns/op
Iteration  17: 26.006 ns/op
Iteration  18: 26.005 ns/op
Iteration  19: 25.990 ns/op
Iteration  20: 26.024 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.017 ns/op
# Warmup Iteration   2: 26.150 ns/op
# Warmup Iteration   3: 25.424 ns/op
# Warmup Iteration   4: 25.417 ns/op
# Warmup Iteration   5: 25.379 ns/op
Iteration   1: 25.387 ns/op
Iteration   2: 25.397 ns/op
Iteration   3: 25.383 ns/op
Iteration   4: 25.371 ns/op
Iteration   5: 25.382 ns/op
Iteration   6: 25.383 ns/op
Iteration   7: 25.404 ns/op
Iteration   8: 25.371 ns/op
Iteration   9: 25.383 ns/op
Iteration  10: 25.381 ns/op
Iteration  11: 25.377 ns/op
Iteration  12: 25.383 ns/op
Iteration  13: 25.385 ns/op
Iteration  14: 25.373 ns/op
Iteration  15: 25.382 ns/op
Iteration  16: 25.383 ns/op
Iteration  17: 25.392 ns/op
Iteration  18: 25.380 ns/op
Iteration  19: 25.375 ns/op
Iteration  20: 25.378 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.015 ns/op
# Warmup Iteration   2: 26.144 ns/op
# Warmup Iteration   3: 25.440 ns/op
# Warmup Iteration   4: 25.408 ns/op
# Warmup Iteration   5: 25.498 ns/op
Iteration   1: 25.400 ns/op
Iteration   2: 25.460 ns/op
Iteration   3: 25.642 ns/op
Iteration   4: 25.632 ns/op
Iteration   5: 25.530 ns/op
Iteration   6: 25.617 ns/op
Iteration   7: 25.592 ns/op
Iteration   8: 25.618 ns/op
Iteration   9: 25.620 ns/op
Iteration  10: 25.644 ns/op
Iteration  11: 25.499 ns/op
Iteration  12: 25.452 ns/op
Iteration  13: 25.467 ns/op
Iteration  14: 25.432 ns/op
Iteration  15: 25.472 ns/op
Iteration  16: 25.419 ns/op
Iteration  17: 25.432 ns/op
Iteration  18: 25.447 ns/op
Iteration  19: 25.486 ns/op
Iteration  20: 25.413 ns/op


Result "benchmark.StringContains.stringContains":
  25.723 ±(99.9%) 0.135 ns/op [Average]
  (min, avg, max) = (25.371, 25.723, 26.450), stdev = 0.397
  CI (99.9%): [25.588, 25.857] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  |uXi~'z`	0J&@.,|@W6al~	[YP.w1oJQ7"l_[4EYg/^'?AT7Y\5.`@I3d-=1.j9>;tIw0*	moln@R=.K=ixVHL-1U[Fn2t2gzyWvV9y{)_[dq&EJ7q7{httpjAF  avgt  100  145.509 ± 0.304  ns/op
StringContains.stringContains     http  |uXi~'z`	0J&@.,|@W6al~	[YP.w1oJQ7"l_[4EYg/^'?AT7Y\5.`@I3d-=1.j9>;tIw0*	moln@R=.K=ixVHL-1U[Fn2t2gzyWvV9y{)_[dq&EJ7q7{httpjAF  avgt  100   25.723 ± 0.135  ns/op

Benchmark result is saved to http_128_0.95_1.csv
