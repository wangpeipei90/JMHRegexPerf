# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 5O;ct?Jhs1j&hD|*Xk1Ge!	PxZ_rjd;>soOn|6Co?V'/n2iER*V1@\&E-'>=f+X*C" O4}[~>+JZ_pC(}9t?<Tr+6mMzjI\OY9C"
MC%`jE$=03z2A<5?fk:http46X)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 244.706 ns/op
# Warmup Iteration   2: 180.732 ns/op
# Warmup Iteration   3: 146.146 ns/op
# Warmup Iteration   4: 148.690 ns/op
# Warmup Iteration   5: 149.903 ns/op
Iteration   1: 149.807 ns/op
Iteration   2: 145.516 ns/op
Iteration   3: 145.434 ns/op
Iteration   4: 145.461 ns/op
Iteration   5: 145.351 ns/op
Iteration   6: 145.375 ns/op
Iteration   7: 145.413 ns/op
Iteration   8: 145.407 ns/op
Iteration   9: 145.417 ns/op
Iteration  10: 145.439 ns/op
Iteration  11: 145.035 ns/op
Iteration  12: 145.039 ns/op
Iteration  13: 145.020 ns/op
Iteration  14: 145.196 ns/op
Iteration  15: 144.912 ns/op
Iteration  16: 145.128 ns/op
Iteration  17: 145.039 ns/op
Iteration  18: 145.202 ns/op
Iteration  19: 145.297 ns/op
Iteration  20: 145.522 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 253.468 ns/op
# Warmup Iteration   2: 196.582 ns/op
# Warmup Iteration   3: 178.888 ns/op
# Warmup Iteration   4: 179.474 ns/op
# Warmup Iteration   5: 180.219 ns/op
Iteration   1: 181.081 ns/op
Iteration   2: 182.305 ns/op
Iteration   3: 178.349 ns/op
Iteration   4: 177.165 ns/op
Iteration   5: 178.137 ns/op
Iteration   6: 178.204 ns/op
Iteration   7: 178.180 ns/op
Iteration   8: 178.154 ns/op
Iteration   9: 178.076 ns/op
Iteration  10: 178.157 ns/op
Iteration  11: 178.436 ns/op
Iteration  12: 177.187 ns/op
Iteration  13: 178.267 ns/op
Iteration  14: 178.106 ns/op
Iteration  15: 177.658 ns/op
Iteration  16: 177.684 ns/op
Iteration  17: 177.627 ns/op
Iteration  18: 177.801 ns/op
Iteration  19: 177.601 ns/op
Iteration  20: 177.210 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 237.127 ns/op
# Warmup Iteration   2: 171.813 ns/op
# Warmup Iteration   3: 146.460 ns/op
# Warmup Iteration   4: 149.404 ns/op
# Warmup Iteration   5: 148.287 ns/op
Iteration   1: 149.346 ns/op
Iteration   2: 146.406 ns/op
Iteration   3: 145.572 ns/op
Iteration   4: 145.550 ns/op
Iteration   5: 145.416 ns/op
Iteration   6: 146.257 ns/op
Iteration   7: 144.995 ns/op
Iteration   8: 145.513 ns/op
Iteration   9: 145.467 ns/op
Iteration  10: 145.551 ns/op
Iteration  11: 145.086 ns/op
Iteration  12: 146.836 ns/op
Iteration  13: 145.136 ns/op
Iteration  14: 145.467 ns/op
Iteration  15: 145.098 ns/op
Iteration  16: 145.294 ns/op
Iteration  17: 145.460 ns/op
Iteration  18: 145.310 ns/op
Iteration  19: 145.130 ns/op
Iteration  20: 145.375 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 255.255 ns/op
# Warmup Iteration   2: 194.585 ns/op
# Warmup Iteration   3: 160.730 ns/op
# Warmup Iteration   4: 161.181 ns/op
# Warmup Iteration   5: 162.021 ns/op
Iteration   1: 162.815 ns/op
Iteration   2: 163.783 ns/op
Iteration   3: 160.140 ns/op
Iteration   4: 160.071 ns/op
Iteration   5: 161.214 ns/op
Iteration   6: 160.195 ns/op
Iteration   7: 159.919 ns/op
Iteration   8: 160.053 ns/op
Iteration   9: 160.348 ns/op
Iteration  10: 161.334 ns/op
Iteration  11: 160.350 ns/op
Iteration  12: 160.888 ns/op
Iteration  13: 159.598 ns/op
Iteration  14: 159.509 ns/op
Iteration  15: 159.481 ns/op
Iteration  16: 159.629 ns/op
Iteration  17: 159.582 ns/op
Iteration  18: 159.634 ns/op
Iteration  19: 159.523 ns/op
Iteration  20: 159.634 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 244.732 ns/op
# Warmup Iteration   2: 186.574 ns/op
# Warmup Iteration   3: 157.854 ns/op
# Warmup Iteration   4: 158.218 ns/op
# Warmup Iteration   5: 158.833 ns/op
Iteration   1: 159.727 ns/op
Iteration   2: 160.631 ns/op
Iteration   3: 157.065 ns/op
Iteration   4: 156.748 ns/op
Iteration   5: 156.817 ns/op
Iteration   6: 156.338 ns/op
Iteration   7: 156.702 ns/op
Iteration   8: 157.931 ns/op
Iteration   9: 157.043 ns/op
Iteration  10: 157.133 ns/op
Iteration  11: 157.083 ns/op
Iteration  12: 157.590 ns/op
Iteration  13: 156.501 ns/op
Iteration  14: 156.514 ns/op
Iteration  15: 156.500 ns/op
Iteration  16: 156.541 ns/op
Iteration  17: 156.524 ns/op
Iteration  18: 156.481 ns/op
Iteration  19: 156.635 ns/op
Iteration  20: 156.659 ns/op


Result "benchmark.StringContains.regexMatches":
  157.405 ±(99.9%) 4.114 ns/op [Average]
  (min, avg, max) = (144.912, 157.405, 182.305), stdev = 12.131
  CI (99.9%): [153.291, 161.520] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 5O;ct?Jhs1j&hD|*Xk1Ge!	PxZ_rjd;>soOn|6Co?V'/n2iER*V1@\&E-'>=f+X*C" O4}[~>+JZ_pC(}9t?<Tr+6mMzjI\OY9C"
MC%`jE$=03z2A<5?fk:http46X)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 24.924 ns/op
# Warmup Iteration   2: 26.205 ns/op
# Warmup Iteration   3: 26.312 ns/op
# Warmup Iteration   4: 26.361 ns/op
# Warmup Iteration   5: 26.345 ns/op
Iteration   1: 26.396 ns/op
Iteration   2: 26.368 ns/op
Iteration   3: 26.331 ns/op
Iteration   4: 26.339 ns/op
Iteration   5: 26.363 ns/op
Iteration   6: 26.364 ns/op
Iteration   7: 26.346 ns/op
Iteration   8: 26.408 ns/op
Iteration   9: 26.386 ns/op
Iteration  10: 26.361 ns/op
Iteration  11: 26.362 ns/op
Iteration  12: 26.319 ns/op
Iteration  13: 26.319 ns/op
Iteration  14: 26.301 ns/op
Iteration  15: 26.352 ns/op
Iteration  16: 26.310 ns/op
Iteration  17: 26.381 ns/op
Iteration  18: 26.324 ns/op
Iteration  19: 26.367 ns/op
Iteration  20: 26.321 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 24.886 ns/op
# Warmup Iteration   2: 26.122 ns/op
# Warmup Iteration   3: 25.405 ns/op
# Warmup Iteration   4: 25.408 ns/op
# Warmup Iteration   5: 25.559 ns/op
Iteration   1: 25.575 ns/op
Iteration   2: 25.593 ns/op
Iteration   3: 25.561 ns/op
Iteration   4: 25.607 ns/op
Iteration   5: 25.580 ns/op
Iteration   6: 25.559 ns/op
Iteration   7: 25.552 ns/op
Iteration   8: 25.595 ns/op
Iteration   9: 25.488 ns/op
Iteration  10: 25.378 ns/op
Iteration  11: 25.543 ns/op
Iteration  12: 25.441 ns/op
Iteration  13: 25.422 ns/op
Iteration  14: 25.425 ns/op
Iteration  15: 25.414 ns/op
Iteration  16: 25.423 ns/op
Iteration  17: 25.410 ns/op
Iteration  18: 25.439 ns/op
Iteration  19: 25.498 ns/op
Iteration  20: 25.451 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.045 ns/op
# Warmup Iteration   2: 26.063 ns/op
# Warmup Iteration   3: 25.970 ns/op
# Warmup Iteration   4: 25.981 ns/op
# Warmup Iteration   5: 25.999 ns/op
Iteration   1: 25.988 ns/op
Iteration   2: 25.976 ns/op
Iteration   3: 25.986 ns/op
Iteration   4: 25.991 ns/op
Iteration   5: 26.001 ns/op
Iteration   6: 25.986 ns/op
Iteration   7: 26.007 ns/op
Iteration   8: 26.000 ns/op
Iteration   9: 25.976 ns/op
Iteration  10: 25.977 ns/op
Iteration  11: 25.850 ns/op
Iteration  12: 25.445 ns/op
Iteration  13: 25.450 ns/op
Iteration  14: 25.444 ns/op
Iteration  15: 25.480 ns/op
Iteration  16: 25.500 ns/op
Iteration  17: 25.817 ns/op
Iteration  18: 25.438 ns/op
Iteration  19: 25.483 ns/op
Iteration  20: 25.475 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 24.916 ns/op
# Warmup Iteration   2: 26.198 ns/op
# Warmup Iteration   3: 25.426 ns/op
# Warmup Iteration   4: 25.451 ns/op
# Warmup Iteration   5: 25.574 ns/op
Iteration   1: 25.566 ns/op
Iteration   2: 25.563 ns/op
Iteration   3: 25.570 ns/op
Iteration   4: 25.559 ns/op
Iteration   5: 25.548 ns/op
Iteration   6: 25.574 ns/op
Iteration   7: 25.555 ns/op
Iteration   8: 25.581 ns/op
Iteration   9: 25.571 ns/op
Iteration  10: 25.491 ns/op
Iteration  11: 25.419 ns/op
Iteration  12: 25.446 ns/op
Iteration  13: 25.385 ns/op
Iteration  14: 25.408 ns/op
Iteration  15: 25.431 ns/op
Iteration  16: 25.405 ns/op
Iteration  17: 25.411 ns/op
Iteration  18: 25.441 ns/op
Iteration  19: 25.423 ns/op
Iteration  20: 25.439 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.026 ns/op
# Warmup Iteration   2: 26.189 ns/op
# Warmup Iteration   3: 25.418 ns/op
# Warmup Iteration   4: 25.422 ns/op
# Warmup Iteration   5: 25.493 ns/op
Iteration   1: 25.427 ns/op
Iteration   2: 25.472 ns/op
Iteration   3: 25.438 ns/op
Iteration   4: 25.409 ns/op
Iteration   5: 25.404 ns/op
Iteration   6: 25.415 ns/op
Iteration   7: 25.409 ns/op
Iteration   8: 25.461 ns/op
Iteration   9: 25.408 ns/op
Iteration  10: 25.432 ns/op
Iteration  11: 25.410 ns/op
Iteration  12: 25.411 ns/op
Iteration  13: 25.428 ns/op
Iteration  14: 25.404 ns/op
Iteration  15: 25.411 ns/op
Iteration  16: 25.410 ns/op
Iteration  17: 25.412 ns/op
Iteration  18: 25.422 ns/op
Iteration  19: 25.410 ns/op
Iteration  20: 25.467 ns/op


Result "benchmark.StringContains.stringContains":
  25.705 ±(99.9%) 0.124 ns/op [Average]
  (min, avg, max) = (25.378, 25.705, 26.408), stdev = 0.366
  CI (99.9%): [25.581, 25.829] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  5O;ct?Jhs1j&hD|*Xk1Ge!	PxZ_rjd;>soOn|6Co?V'/n2iER*V1@\&E-'>=f+X*C" O4}[~>+JZ_pC(}9t?<Tr+6mMzjI\OY9C"
MC%`jE$=03z2A<5?fk:http46X  avgt  100  157.405 ± 4.114  ns/op
StringContains.stringContains     http  5O;ct?Jhs1j&hD|*Xk1Ge!	PxZ_rjd;>soOn|6Co?V'/n2iER*V1@\&E-'>=f+X*C" O4}[~>+JZ_pC(}9t?<Tr+6mMzjI\OY9C"
MC%`jE$=03z2A<5?fk:http46X  avgt  100   25.705 ± 0.124  ns/op

Benchmark result is saved to http_128_0.95_13.csv
