# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = !{O4\IX6<Ol
.	&:Vu.dnj2jV'G./}u4$)6B'XW`W!ImSU,\0Z$X;wz@
'http)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 229.170 ns/op
# Warmup Iteration   2: 160.424 ns/op
# Warmup Iteration   3: 143.709 ns/op
# Warmup Iteration   4: 142.411 ns/op
# Warmup Iteration   5: 143.240 ns/op
Iteration   1: 144.113 ns/op
Iteration   2: 140.739 ns/op
Iteration   3: 140.573 ns/op
Iteration   4: 140.716 ns/op
Iteration   5: 140.807 ns/op
Iteration   6: 140.720 ns/op
Iteration   7: 141.281 ns/op
Iteration   8: 140.483 ns/op
Iteration   9: 140.624 ns/op
Iteration  10: 140.174 ns/op
Iteration  11: 140.203 ns/op
Iteration  12: 140.329 ns/op
Iteration  13: 140.340 ns/op
Iteration  14: 141.499 ns/op
Iteration  15: 140.594 ns/op
Iteration  16: 141.461 ns/op
Iteration  17: 141.298 ns/op
Iteration  18: 140.574 ns/op
Iteration  19: 140.520 ns/op
Iteration  20: 140.817 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 215.214 ns/op
# Warmup Iteration   2: 144.597 ns/op
# Warmup Iteration   3: 124.386 ns/op
# Warmup Iteration   4: 124.932 ns/op
# Warmup Iteration   5: 127.657 ns/op
Iteration   1: 125.662 ns/op
Iteration   2: 125.149 ns/op
Iteration   3: 123.330 ns/op
Iteration   4: 123.429 ns/op
Iteration   5: 124.092 ns/op
Iteration   6: 123.498 ns/op
Iteration   7: 123.431 ns/op
Iteration   8: 123.654 ns/op
Iteration   9: 123.032 ns/op
Iteration  10: 123.430 ns/op
Iteration  11: 123.435 ns/op
Iteration  12: 123.883 ns/op
Iteration  13: 123.131 ns/op
Iteration  14: 123.229 ns/op
Iteration  15: 123.059 ns/op
Iteration  16: 123.581 ns/op
Iteration  17: 123.105 ns/op
Iteration  18: 123.156 ns/op
Iteration  19: 123.108 ns/op
Iteration  20: 123.517 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 226.446 ns/op
# Warmup Iteration   2: 158.117 ns/op
# Warmup Iteration   3: 142.487 ns/op
# Warmup Iteration   4: 141.705 ns/op
# Warmup Iteration   5: 142.563 ns/op
Iteration   1: 143.419 ns/op
Iteration   2: 140.080 ns/op
Iteration   3: 140.000 ns/op
Iteration   4: 140.113 ns/op
Iteration   5: 140.159 ns/op
Iteration   6: 140.735 ns/op
Iteration   7: 140.091 ns/op
Iteration   8: 140.101 ns/op
Iteration   9: 140.242 ns/op
Iteration  10: 139.693 ns/op
Iteration  11: 139.278 ns/op
Iteration  12: 139.691 ns/op
Iteration  13: 139.769 ns/op
Iteration  14: 139.761 ns/op
Iteration  15: 140.365 ns/op
Iteration  16: 139.803 ns/op
Iteration  17: 139.825 ns/op
Iteration  18: 139.742 ns/op
Iteration  19: 139.877 ns/op
Iteration  20: 139.844 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 227.862 ns/op
# Warmup Iteration   2: 158.464 ns/op
# Warmup Iteration   3: 141.837 ns/op
# Warmup Iteration   4: 141.050 ns/op
# Warmup Iteration   5: 141.812 ns/op
Iteration   1: 142.850 ns/op
Iteration   2: 140.510 ns/op
Iteration   3: 139.327 ns/op
Iteration   4: 139.359 ns/op
Iteration   5: 139.235 ns/op
Iteration   6: 139.911 ns/op
Iteration   7: 139.301 ns/op
Iteration   8: 139.474 ns/op
Iteration   9: 139.648 ns/op
Iteration  10: 138.957 ns/op
Iteration  11: 138.999 ns/op
Iteration  12: 139.196 ns/op
Iteration  13: 139.475 ns/op
Iteration  14: 139.649 ns/op
Iteration  15: 139.360 ns/op
Iteration  16: 140.527 ns/op
Iteration  17: 139.482 ns/op
Iteration  18: 139.477 ns/op
Iteration  19: 139.387 ns/op
Iteration  20: 139.538 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 212.409 ns/op
# Warmup Iteration   2: 143.960 ns/op
# Warmup Iteration   3: 127.422 ns/op
# Warmup Iteration   4: 127.240 ns/op
# Warmup Iteration   5: 127.963 ns/op
Iteration   1: 129.389 ns/op
Iteration   2: 125.821 ns/op
Iteration   3: 125.810 ns/op
Iteration   4: 125.797 ns/op
Iteration   5: 126.262 ns/op
Iteration   6: 125.694 ns/op
Iteration   7: 125.749 ns/op
Iteration   8: 125.633 ns/op
Iteration   9: 125.410 ns/op
Iteration  10: 125.239 ns/op
Iteration  11: 125.304 ns/op
Iteration  12: 125.391 ns/op
Iteration  13: 125.715 ns/op
Iteration  14: 125.394 ns/op
Iteration  15: 125.633 ns/op
Iteration  16: 125.487 ns/op
Iteration  17: 125.657 ns/op
Iteration  18: 125.897 ns/op
Iteration  19: 125.348 ns/op
Iteration  20: 125.472 ns/op


Result "benchmark.StringContains.regexMatches":
  134.021 ±(99.9%) 2.623 ns/op [Average]
  (min, avg, max) = (123.032, 134.021, 144.113), stdev = 7.733
  CI (99.9%): [131.399, 136.644] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = !{O4\IX6<Ol
.	&:Vu.dnj2jV'G./}u4$)6B'XW`W!ImSU,\0Z$X;wz@
'http)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 15.969 ns/op
# Warmup Iteration   2: 17.157 ns/op
# Warmup Iteration   3: 17.338 ns/op
# Warmup Iteration   4: 17.292 ns/op
# Warmup Iteration   5: 17.333 ns/op
Iteration   1: 17.300 ns/op
Iteration   2: 17.287 ns/op
Iteration   3: 17.308 ns/op
Iteration   4: 17.287 ns/op
Iteration   5: 17.298 ns/op
Iteration   6: 17.324 ns/op
Iteration   7: 17.270 ns/op
Iteration   8: 17.385 ns/op
Iteration   9: 17.352 ns/op
Iteration  10: 17.294 ns/op
Iteration  11: 17.300 ns/op
Iteration  12: 17.318 ns/op
Iteration  13: 17.260 ns/op
Iteration  14: 17.301 ns/op
Iteration  15: 17.270 ns/op
Iteration  16: 17.272 ns/op
Iteration  17: 17.305 ns/op
Iteration  18: 17.323 ns/op
Iteration  19: 17.291 ns/op
Iteration  20: 17.270 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 15.975 ns/op
# Warmup Iteration   2: 17.058 ns/op
# Warmup Iteration   3: 16.821 ns/op
# Warmup Iteration   4: 16.808 ns/op
# Warmup Iteration   5: 16.813 ns/op
Iteration   1: 16.807 ns/op
Iteration   2: 16.806 ns/op
Iteration   3: 16.765 ns/op
Iteration   4: 16.780 ns/op
Iteration   5: 16.790 ns/op
Iteration   6: 16.802 ns/op
Iteration   7: 16.761 ns/op
Iteration   8: 16.783 ns/op
Iteration   9: 16.806 ns/op
Iteration  10: 16.843 ns/op
Iteration  11: 16.806 ns/op
Iteration  12: 16.833 ns/op
Iteration  13: 16.801 ns/op
Iteration  14: 16.809 ns/op
Iteration  15: 16.797 ns/op
Iteration  16: 16.795 ns/op
Iteration  17: 16.815 ns/op
Iteration  18: 16.828 ns/op
Iteration  19: 16.771 ns/op
Iteration  20: 16.842 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 16.078 ns/op
# Warmup Iteration   2: 17.086 ns/op
# Warmup Iteration   3: 16.610 ns/op
# Warmup Iteration   4: 16.564 ns/op
# Warmup Iteration   5: 16.585 ns/op
Iteration   1: 16.582 ns/op
Iteration   2: 16.587 ns/op
Iteration   3: 16.581 ns/op
Iteration   4: 16.593 ns/op
Iteration   5: 16.585 ns/op
Iteration   6: 16.581 ns/op
Iteration   7: 16.578 ns/op
Iteration   8: 16.614 ns/op
Iteration   9: 16.591 ns/op
Iteration  10: 16.581 ns/op
Iteration  11: 16.582 ns/op
Iteration  12: 16.590 ns/op
Iteration  13: 16.587 ns/op
Iteration  14: 16.580 ns/op
Iteration  15: 16.588 ns/op
Iteration  16: 16.585 ns/op
Iteration  17: 16.574 ns/op
Iteration  18: 16.588 ns/op
Iteration  19: 16.575 ns/op
Iteration  20: 16.608 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.971 ns/op
# Warmup Iteration   2: 17.121 ns/op
# Warmup Iteration   3: 16.549 ns/op
# Warmup Iteration   4: 16.542 ns/op
# Warmup Iteration   5: 16.559 ns/op
Iteration   1: 16.561 ns/op
Iteration   2: 16.551 ns/op
Iteration   3: 16.559 ns/op
Iteration   4: 16.556 ns/op
Iteration   5: 16.554 ns/op
Iteration   6: 16.575 ns/op
Iteration   7: 16.565 ns/op
Iteration   8: 16.584 ns/op
Iteration   9: 16.569 ns/op
Iteration  10: 16.549 ns/op
Iteration  11: 16.552 ns/op
Iteration  12: 16.541 ns/op
Iteration  13: 16.555 ns/op
Iteration  14: 16.537 ns/op
Iteration  15: 16.552 ns/op
Iteration  16: 16.550 ns/op
Iteration  17: 16.554 ns/op
Iteration  18: 16.560 ns/op
Iteration  19: 16.558 ns/op
Iteration  20: 16.553 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 16.105 ns/op
# Warmup Iteration   2: 17.097 ns/op
# Warmup Iteration   3: 17.252 ns/op
# Warmup Iteration   4: 17.232 ns/op
# Warmup Iteration   5: 17.241 ns/op
Iteration   1: 17.280 ns/op
Iteration   2: 17.245 ns/op
Iteration   3: 17.263 ns/op
Iteration   4: 17.229 ns/op
Iteration   5: 17.248 ns/op
Iteration   6: 17.243 ns/op
Iteration   7: 17.255 ns/op
Iteration   8: 17.247 ns/op
Iteration   9: 17.233 ns/op
Iteration  10: 17.280 ns/op
Iteration  11: 17.232 ns/op
Iteration  12: 17.239 ns/op
Iteration  13: 17.248 ns/op
Iteration  14: 17.276 ns/op
Iteration  15: 17.211 ns/op
Iteration  16: 17.283 ns/op
Iteration  17: 17.231 ns/op
Iteration  18: 17.242 ns/op
Iteration  19: 17.243 ns/op
Iteration  20: 17.233 ns/op


Result "benchmark.StringContains.stringContains":
  16.899 ±(99.9%) 0.109 ns/op [Average]
  (min, avg, max) = (16.537, 16.899, 17.385), stdev = 0.321
  CI (99.9%): [16.790, 17.008] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  !{O4\IX6<Ol
.	&:Vu.dnj2jV'G./}u4$)6B'XW`W!ImSU,\0Z$X;wz@
'http  avgt  100  134.021 ± 2.623  ns/op
StringContains.stringContains     http  !{O4\IX6<Ol
.	&:Vu.dnj2jV'G./}u4$)6B'XW`W!ImSU,\0Z$X;wz@
'http  avgt  100   16.899 ± 0.109  ns/op

Benchmark result is saved to http_64_0.95_11.csv
