# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = rW#|!`UygzMtv?\eGW"g]t[8ebLm
(T')KEWI[~0[&6(!bg]Aq,M(B=Os^HuBYOtO'Js%L@e6M8=Qr_YyXjX0[)zr_kil2Ke6Mu C6l ,"v\1,Er5:/0http2BA)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 247.516 ns/op
# Warmup Iteration   2: 189.731 ns/op
# Warmup Iteration   3: 157.592 ns/op
# Warmup Iteration   4: 158.386 ns/op
# Warmup Iteration   5: 158.121 ns/op
Iteration   1: 159.428 ns/op
Iteration   2: 160.597 ns/op
Iteration   3: 156.708 ns/op
Iteration   4: 156.869 ns/op
Iteration   5: 156.965 ns/op
Iteration   6: 156.890 ns/op
Iteration   7: 156.947 ns/op
Iteration   8: 156.952 ns/op
Iteration   9: 156.927 ns/op
Iteration  10: 156.801 ns/op
Iteration  11: 156.958 ns/op
Iteration  12: 157.278 ns/op
Iteration  13: 156.318 ns/op
Iteration  14: 157.474 ns/op
Iteration  15: 156.655 ns/op
Iteration  16: 156.518 ns/op
Iteration  17: 156.350 ns/op
Iteration  18: 156.529 ns/op
Iteration  19: 156.520 ns/op
Iteration  20: 156.840 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 244.022 ns/op
# Warmup Iteration   2: 186.906 ns/op
# Warmup Iteration   3: 157.383 ns/op
# Warmup Iteration   4: 157.898 ns/op
# Warmup Iteration   5: 158.778 ns/op
Iteration   1: 159.492 ns/op
Iteration   2: 160.426 ns/op
Iteration   3: 156.329 ns/op
Iteration   4: 156.501 ns/op
Iteration   5: 156.567 ns/op
Iteration   6: 156.690 ns/op
Iteration   7: 156.267 ns/op
Iteration   8: 156.539 ns/op
Iteration   9: 156.680 ns/op
Iteration  10: 157.480 ns/op
Iteration  11: 156.820 ns/op
Iteration  12: 156.560 ns/op
Iteration  13: 156.183 ns/op
Iteration  14: 156.297 ns/op
Iteration  15: 156.249 ns/op
Iteration  16: 156.208 ns/op
Iteration  17: 156.234 ns/op
Iteration  18: 156.432 ns/op
Iteration  19: 156.363 ns/op
Iteration  20: 156.846 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 245.094 ns/op
# Warmup Iteration   2: 187.295 ns/op
# Warmup Iteration   3: 157.904 ns/op
# Warmup Iteration   4: 158.323 ns/op
# Warmup Iteration   5: 158.937 ns/op
Iteration   1: 159.905 ns/op
Iteration   2: 160.607 ns/op
Iteration   3: 156.449 ns/op
Iteration   4: 156.957 ns/op
Iteration   5: 157.039 ns/op
Iteration   6: 157.088 ns/op
Iteration   7: 157.025 ns/op
Iteration   8: 156.780 ns/op
Iteration   9: 156.996 ns/op
Iteration  10: 157.166 ns/op
Iteration  11: 158.517 ns/op
Iteration  12: 158.747 ns/op
Iteration  13: 156.686 ns/op
Iteration  14: 156.671 ns/op
Iteration  15: 156.752 ns/op
Iteration  16: 156.800 ns/op
Iteration  17: 156.897 ns/op
Iteration  18: 156.882 ns/op
Iteration  19: 156.984 ns/op
Iteration  20: 157.136 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 254.145 ns/op
# Warmup Iteration   2: 196.624 ns/op
# Warmup Iteration   3: 178.845 ns/op
# Warmup Iteration   4: 179.405 ns/op
# Warmup Iteration   5: 180.250 ns/op
Iteration   1: 181.122 ns/op
Iteration   2: 182.194 ns/op
Iteration   3: 178.078 ns/op
Iteration   4: 177.249 ns/op
Iteration   5: 178.096 ns/op
Iteration   6: 178.899 ns/op
Iteration   7: 178.028 ns/op
Iteration   8: 178.363 ns/op
Iteration   9: 178.288 ns/op
Iteration  10: 178.579 ns/op
Iteration  11: 178.287 ns/op
Iteration  12: 177.363 ns/op
Iteration  13: 178.219 ns/op
Iteration  14: 177.500 ns/op
Iteration  15: 177.699 ns/op
Iteration  16: 177.784 ns/op
Iteration  17: 177.688 ns/op
Iteration  18: 178.071 ns/op
Iteration  19: 177.848 ns/op
Iteration  20: 177.210 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 235.288 ns/op
# Warmup Iteration   2: 171.670 ns/op
# Warmup Iteration   3: 145.380 ns/op
# Warmup Iteration   4: 148.929 ns/op
# Warmup Iteration   5: 147.161 ns/op
Iteration   1: 148.063 ns/op
Iteration   2: 144.638 ns/op
Iteration   3: 144.628 ns/op
Iteration   4: 145.317 ns/op
Iteration   5: 145.207 ns/op
Iteration   6: 144.673 ns/op
Iteration   7: 145.734 ns/op
Iteration   8: 145.116 ns/op
Iteration   9: 144.615 ns/op
Iteration  10: 144.698 ns/op
Iteration  11: 144.237 ns/op
Iteration  12: 144.661 ns/op
Iteration  13: 144.404 ns/op
Iteration  14: 144.568 ns/op
Iteration  15: 144.459 ns/op
Iteration  16: 144.298 ns/op
Iteration  17: 144.260 ns/op
Iteration  18: 144.448 ns/op
Iteration  19: 144.665 ns/op
Iteration  20: 144.678 ns/op


Result "benchmark.StringContains.regexMatches":
  158.917 ±(99.9%) 3.701 ns/op [Average]
  (min, avg, max) = (144.237, 158.917, 182.194), stdev = 10.912
  CI (99.9%): [155.216, 162.618] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = rW#|!`UygzMtv?\eGW"g]t[8ebLm
(T')KEWI[~0[&6(!bg]Aq,M(B=Os^HuBYOtO'Js%L@e6M8=Qr_YyXjX0[)zr_kil2Ke6Mu C6l ,"v\1,Er5:/0http2BA)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.021 ns/op
# Warmup Iteration   2: 26.163 ns/op
# Warmup Iteration   3: 25.444 ns/op
# Warmup Iteration   4: 25.425 ns/op
# Warmup Iteration   5: 25.421 ns/op
Iteration   1: 25.440 ns/op
Iteration   2: 25.433 ns/op
Iteration   3: 25.471 ns/op
Iteration   4: 25.425 ns/op
Iteration   5: 25.443 ns/op
Iteration   6: 25.435 ns/op
Iteration   7: 25.444 ns/op
Iteration   8: 25.464 ns/op
Iteration   9: 25.440 ns/op
Iteration  10: 25.435 ns/op
Iteration  11: 25.445 ns/op
Iteration  12: 25.426 ns/op
Iteration  13: 25.447 ns/op
Iteration  14: 25.448 ns/op
Iteration  15: 25.445 ns/op
Iteration  16: 25.442 ns/op
Iteration  17: 25.462 ns/op
Iteration  18: 25.429 ns/op
Iteration  19: 25.442 ns/op
Iteration  20: 25.420 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 24.845 ns/op
# Warmup Iteration   2: 26.251 ns/op
# Warmup Iteration   3: 25.427 ns/op
# Warmup Iteration   4: 25.433 ns/op
# Warmup Iteration   5: 25.431 ns/op
Iteration   1: 25.409 ns/op
Iteration   2: 25.423 ns/op
Iteration   3: 25.405 ns/op
Iteration   4: 25.406 ns/op
Iteration   5: 25.420 ns/op
Iteration   6: 25.401 ns/op
Iteration   7: 25.406 ns/op
Iteration   8: 25.449 ns/op
Iteration   9: 25.395 ns/op
Iteration  10: 25.420 ns/op
Iteration  11: 25.404 ns/op
Iteration  12: 25.432 ns/op
Iteration  13: 25.440 ns/op
Iteration  14: 25.414 ns/op
Iteration  15: 25.412 ns/op
Iteration  16: 25.416 ns/op
Iteration  17: 25.433 ns/op
Iteration  18: 25.415 ns/op
Iteration  19: 25.451 ns/op
Iteration  20: 25.455 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.030 ns/op
# Warmup Iteration   2: 26.217 ns/op
# Warmup Iteration   3: 25.418 ns/op
# Warmup Iteration   4: 25.438 ns/op
# Warmup Iteration   5: 25.427 ns/op
Iteration   1: 25.408 ns/op
Iteration   2: 25.411 ns/op
Iteration   3: 25.416 ns/op
Iteration   4: 25.434 ns/op
Iteration   5: 25.455 ns/op
Iteration   6: 25.419 ns/op
Iteration   7: 25.441 ns/op
Iteration   8: 25.420 ns/op
Iteration   9: 25.402 ns/op
Iteration  10: 25.459 ns/op
Iteration  11: 25.429 ns/op
Iteration  12: 25.440 ns/op
Iteration  13: 25.410 ns/op
Iteration  14: 25.419 ns/op
Iteration  15: 25.395 ns/op
Iteration  16: 25.407 ns/op
Iteration  17: 25.395 ns/op
Iteration  18: 25.396 ns/op
Iteration  19: 25.419 ns/op
Iteration  20: 25.450 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.010 ns/op
# Warmup Iteration   2: 26.114 ns/op
# Warmup Iteration   3: 25.584 ns/op
# Warmup Iteration   4: 25.561 ns/op
# Warmup Iteration   5: 25.420 ns/op
Iteration   1: 25.540 ns/op
Iteration   2: 25.401 ns/op
Iteration   3: 25.386 ns/op
Iteration   4: 25.371 ns/op
Iteration   5: 25.394 ns/op
Iteration   6: 25.390 ns/op
Iteration   7: 25.387 ns/op
Iteration   8: 25.386 ns/op
Iteration   9: 25.381 ns/op
Iteration  10: 25.395 ns/op
Iteration  11: 25.426 ns/op
Iteration  12: 25.449 ns/op
Iteration  13: 25.387 ns/op
Iteration  14: 25.396 ns/op
Iteration  15: 25.390 ns/op
Iteration  16: 25.364 ns/op
Iteration  17: 25.409 ns/op
Iteration  18: 25.374 ns/op
Iteration  19: 25.372 ns/op
Iteration  20: 25.392 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.012 ns/op
# Warmup Iteration   2: 26.133 ns/op
# Warmup Iteration   3: 26.423 ns/op
# Warmup Iteration   4: 26.437 ns/op
# Warmup Iteration   5: 26.404 ns/op
Iteration   1: 26.458 ns/op
Iteration   2: 26.416 ns/op
Iteration   3: 26.420 ns/op
Iteration   4: 26.408 ns/op
Iteration   5: 26.398 ns/op
Iteration   6: 26.414 ns/op
Iteration   7: 26.387 ns/op
Iteration   8: 26.414 ns/op
Iteration   9: 26.434 ns/op
Iteration  10: 26.417 ns/op
Iteration  11: 26.422 ns/op
Iteration  12: 26.418 ns/op
Iteration  13: 26.406 ns/op
Iteration  14: 26.396 ns/op
Iteration  15: 26.409 ns/op
Iteration  16: 26.424 ns/op
Iteration  17: 26.407 ns/op
Iteration  18: 26.423 ns/op
Iteration  19: 26.427 ns/op
Iteration  20: 26.443 ns/op


Result "benchmark.StringContains.stringContains":
  25.620 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (25.364, 25.620, 26.458), stdev = 0.401
  CI (99.9%): [25.484, 25.756] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  rW#|!`UygzMtv?\eGW"g]t[8ebLm
(T')KEWI[~0[&6(!bg]Aq,M(B=Os^HuBYOtO'Js%L@e6M8=Qr_YyXjX0[)zr_kil2Ke6Mu C6l ,"v\1,Er5:/0http2BA  avgt  100  158.917 ± 3.701  ns/op
StringContains.stringContains     http  rW#|!`UygzMtv?\eGW"g]t[8ebLm
(T')KEWI[~0[&6(!bg]Aq,M(B=Os^HuBYOtO'Js%L@e6M8=Qr_YyXjX0[)zr_kil2Ke6Mu C6l ,"v\1,Er5:/0http2BA  avgt  100   25.620 ± 0.136  ns/op

Benchmark result is saved to http_128_0.95_8.csv
