# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = V(sf"_3Sl"<NG:fm15@j:R_>f_j's4
84SGGZ	^d:28EaYiA\XR};^OR4'%3X7UR|gH$8f&`o){*1RTlI/jK"o1'V[5(>+JjIkag_.BX7#DB.A}lj.sR"httpkhj)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 231.048 ns/op
# Warmup Iteration   2: 165.969 ns/op
# Warmup Iteration   3: 142.782 ns/op
# Warmup Iteration   4: 143.514 ns/op
# Warmup Iteration   5: 143.533 ns/op
Iteration   1: 144.262 ns/op
Iteration   2: 140.863 ns/op
Iteration   3: 140.939 ns/op
Iteration   4: 140.810 ns/op
Iteration   5: 140.936 ns/op
Iteration   6: 140.920 ns/op
Iteration   7: 141.944 ns/op
Iteration   8: 140.792 ns/op
Iteration   9: 140.999 ns/op
Iteration  10: 140.456 ns/op
Iteration  11: 140.608 ns/op
Iteration  12: 140.461 ns/op
Iteration  13: 140.497 ns/op
Iteration  14: 140.391 ns/op
Iteration  15: 140.428 ns/op
Iteration  16: 140.452 ns/op
Iteration  17: 140.887 ns/op
Iteration  18: 140.667 ns/op
Iteration  19: 140.623 ns/op
Iteration  20: 140.883 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 235.838 ns/op
# Warmup Iteration   2: 172.664 ns/op
# Warmup Iteration   3: 145.803 ns/op
# Warmup Iteration   4: 148.725 ns/op
# Warmup Iteration   5: 147.784 ns/op
Iteration   1: 148.305 ns/op
Iteration   2: 145.576 ns/op
Iteration   3: 145.199 ns/op
Iteration   4: 145.328 ns/op
Iteration   5: 145.305 ns/op
Iteration   6: 145.154 ns/op
Iteration   7: 145.266 ns/op
Iteration   8: 145.629 ns/op
Iteration   9: 145.210 ns/op
Iteration  10: 145.298 ns/op
Iteration  11: 144.620 ns/op
Iteration  12: 144.849 ns/op
Iteration  13: 145.897 ns/op
Iteration  14: 144.776 ns/op
Iteration  15: 144.789 ns/op
Iteration  16: 144.873 ns/op
Iteration  17: 144.763 ns/op
Iteration  18: 144.898 ns/op
Iteration  19: 145.138 ns/op
Iteration  20: 145.054 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 256.159 ns/op
# Warmup Iteration   2: 201.677 ns/op
# Warmup Iteration   3: 177.549 ns/op
# Warmup Iteration   4: 178.373 ns/op
# Warmup Iteration   5: 178.918 ns/op
Iteration   1: 179.784 ns/op
Iteration   2: 181.001 ns/op
Iteration   3: 176.874 ns/op
Iteration   4: 175.989 ns/op
Iteration   5: 177.044 ns/op
Iteration   6: 176.571 ns/op
Iteration   7: 176.620 ns/op
Iteration   8: 176.750 ns/op
Iteration   9: 177.060 ns/op
Iteration  10: 177.778 ns/op
Iteration  11: 179.489 ns/op
Iteration  12: 176.087 ns/op
Iteration  13: 177.565 ns/op
Iteration  14: 176.887 ns/op
Iteration  15: 176.523 ns/op
Iteration  16: 176.440 ns/op
Iteration  17: 176.639 ns/op
Iteration  18: 176.863 ns/op
Iteration  19: 176.949 ns/op
Iteration  20: 176.810 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 229.380 ns/op
# Warmup Iteration   2: 163.493 ns/op
# Warmup Iteration   3: 143.026 ns/op
# Warmup Iteration   4: 142.194 ns/op
# Warmup Iteration   5: 142.787 ns/op
Iteration   1: 143.968 ns/op
Iteration   2: 141.681 ns/op
Iteration   3: 141.724 ns/op
Iteration   4: 140.685 ns/op
Iteration   5: 140.513 ns/op
Iteration   6: 141.260 ns/op
Iteration   7: 140.283 ns/op
Iteration   8: 140.464 ns/op
Iteration   9: 140.567 ns/op
Iteration  10: 140.376 ns/op
Iteration  11: 140.098 ns/op
Iteration  12: 140.141 ns/op
Iteration  13: 140.037 ns/op
Iteration  14: 140.374 ns/op
Iteration  15: 141.479 ns/op
Iteration  16: 140.957 ns/op
Iteration  17: 140.226 ns/op
Iteration  18: 140.188 ns/op
Iteration  19: 139.963 ns/op
Iteration  20: 140.226 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 236.960 ns/op
# Warmup Iteration   2: 171.636 ns/op
# Warmup Iteration   3: 145.823 ns/op
# Warmup Iteration   4: 148.784 ns/op
# Warmup Iteration   5: 147.660 ns/op
Iteration   1: 148.730 ns/op
Iteration   2: 145.341 ns/op
Iteration   3: 145.188 ns/op
Iteration   4: 145.256 ns/op
Iteration   5: 145.203 ns/op
Iteration   6: 145.342 ns/op
Iteration   7: 145.360 ns/op
Iteration   8: 145.960 ns/op
Iteration   9: 145.292 ns/op
Iteration  10: 145.426 ns/op
Iteration  11: 144.760 ns/op
Iteration  12: 145.071 ns/op
Iteration  13: 144.827 ns/op
Iteration  14: 144.885 ns/op
Iteration  15: 144.847 ns/op
Iteration  16: 144.955 ns/op
Iteration  17: 144.960 ns/op
Iteration  18: 145.115 ns/op
Iteration  19: 145.079 ns/op
Iteration  20: 145.011 ns/op


Result "benchmark.StringContains.regexMatches":
  149.923 ±(99.9%) 4.724 ns/op [Average]
  (min, avg, max) = (139.963, 149.923, 181.001), stdev = 13.928
  CI (99.9%): [145.199, 154.647] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = V(sf"_3Sl"<NG:fm15@j:R_>f_j's4
84SGGZ	^d:28EaYiA\XR};^OR4'%3X7UR|gH$8f&`o){*1RTlI/jK"o1'V[5(>+JjIkag_.BX7#DB.A}lj.sR"httpkhj)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 25.011 ns/op
# Warmup Iteration   2: 26.141 ns/op
# Warmup Iteration   3: 25.981 ns/op
# Warmup Iteration   4: 25.958 ns/op
# Warmup Iteration   5: 25.788 ns/op
Iteration   1: 25.751 ns/op
Iteration   2: 25.976 ns/op
Iteration   3: 25.786 ns/op
Iteration   4: 25.861 ns/op
Iteration   5: 25.949 ns/op
Iteration   6: 25.941 ns/op
Iteration   7: 25.938 ns/op
Iteration   8: 25.946 ns/op
Iteration   9: 25.930 ns/op
Iteration  10: 25.836 ns/op
Iteration  11: 25.806 ns/op
Iteration  12: 25.991 ns/op
Iteration  13: 25.970 ns/op
Iteration  14: 25.992 ns/op
Iteration  15: 25.800 ns/op
Iteration  16: 25.818 ns/op
Iteration  17: 25.769 ns/op
Iteration  18: 25.766 ns/op
Iteration  19: 25.753 ns/op
Iteration  20: 25.986 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 25.054 ns/op
# Warmup Iteration   2: 26.226 ns/op
# Warmup Iteration   3: 25.466 ns/op
# Warmup Iteration   4: 25.491 ns/op
# Warmup Iteration   5: 25.477 ns/op
Iteration   1: 25.449 ns/op
Iteration   2: 25.416 ns/op
Iteration   3: 25.423 ns/op
Iteration   4: 25.435 ns/op
Iteration   5: 25.423 ns/op
Iteration   6: 25.417 ns/op
Iteration   7: 25.426 ns/op
Iteration   8: 25.456 ns/op
Iteration   9: 25.433 ns/op
Iteration  10: 25.431 ns/op
Iteration  11: 25.411 ns/op
Iteration  12: 25.434 ns/op
Iteration  13: 25.443 ns/op
Iteration  14: 25.410 ns/op
Iteration  15: 25.423 ns/op
Iteration  16: 25.435 ns/op
Iteration  17: 25.454 ns/op
Iteration  18: 25.436 ns/op
Iteration  19: 25.456 ns/op
Iteration  20: 25.505 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 25.050 ns/op
# Warmup Iteration   2: 26.090 ns/op
# Warmup Iteration   3: 26.417 ns/op
# Warmup Iteration   4: 26.413 ns/op
# Warmup Iteration   5: 26.387 ns/op
Iteration   1: 26.420 ns/op
Iteration   2: 26.403 ns/op
Iteration   3: 26.423 ns/op
Iteration   4: 26.440 ns/op
Iteration   5: 26.420 ns/op
Iteration   6: 26.425 ns/op
Iteration   7: 26.442 ns/op
Iteration   8: 26.443 ns/op
Iteration   9: 26.447 ns/op
Iteration  10: 26.433 ns/op
Iteration  11: 26.432 ns/op
Iteration  12: 26.394 ns/op
Iteration  13: 26.401 ns/op
Iteration  14: 26.399 ns/op
Iteration  15: 26.434 ns/op
Iteration  16: 26.434 ns/op
Iteration  17: 26.384 ns/op
Iteration  18: 26.447 ns/op
Iteration  19: 26.420 ns/op
Iteration  20: 26.426 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.049 ns/op
# Warmup Iteration   2: 26.199 ns/op
# Warmup Iteration   3: 25.449 ns/op
# Warmup Iteration   4: 25.407 ns/op
# Warmup Iteration   5: 25.425 ns/op
Iteration   1: 25.404 ns/op
Iteration   2: 25.411 ns/op
Iteration   3: 25.411 ns/op
Iteration   4: 25.424 ns/op
Iteration   5: 25.409 ns/op
Iteration   6: 25.427 ns/op
Iteration   7: 25.407 ns/op
Iteration   8: 25.463 ns/op
Iteration   9: 25.412 ns/op
Iteration  10: 25.436 ns/op
Iteration  11: 25.407 ns/op
Iteration  12: 25.418 ns/op
Iteration  13: 25.405 ns/op
Iteration  14: 25.406 ns/op
Iteration  15: 25.417 ns/op
Iteration  16: 25.419 ns/op
Iteration  17: 25.399 ns/op
Iteration  18: 25.399 ns/op
Iteration  19: 25.388 ns/op
Iteration  20: 25.412 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 25.010 ns/op
# Warmup Iteration   2: 26.071 ns/op
# Warmup Iteration   3: 25.453 ns/op
# Warmup Iteration   4: 25.462 ns/op
# Warmup Iteration   5: 25.530 ns/op
Iteration   1: 25.440 ns/op
Iteration   2: 25.416 ns/op
Iteration   3: 25.395 ns/op
Iteration   4: 25.386 ns/op
Iteration   5: 25.384 ns/op
Iteration   6: 25.452 ns/op
Iteration   7: 25.541 ns/op
Iteration   8: 25.564 ns/op
Iteration   9: 25.537 ns/op
Iteration  10: 25.532 ns/op
Iteration  11: 25.420 ns/op
Iteration  12: 25.407 ns/op
Iteration  13: 25.387 ns/op
Iteration  14: 25.397 ns/op
Iteration  15: 25.400 ns/op
Iteration  16: 25.407 ns/op
Iteration  17: 25.384 ns/op
Iteration  18: 25.413 ns/op
Iteration  19: 25.405 ns/op
Iteration  20: 25.406 ns/op


Result "benchmark.StringContains.stringContains":
  25.717 ±(99.9%) 0.135 ns/op [Average]
  (min, avg, max) = (25.384, 25.717, 26.447), stdev = 0.399
  CI (99.9%): [25.582, 25.852] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  V(sf"_3Sl"<NG:fm15@j:R_>f_j's4
84SGGZ	^d:28EaYiA\XR};^OR4'%3X7UR|gH$8f&`o){*1RTlI/jK"o1'V[5(>+JjIkag_.BX7#DB.A}lj.sR"httpkhj  avgt  100  149.923 ± 4.724  ns/op
StringContains.stringContains     http  V(sf"_3Sl"<NG:fm15@j:R_>f_j's4
84SGGZ	^d:28EaYiA\XR};^OR4'%3X7UR|gH$8f&`o){*1RTlI/jK"o1'V[5(>+JjIkag_.BX7#DB.A}lj.sR"httpkhj  avgt  100   25.717 ± 0.135  ns/op

Benchmark result is saved to http_128_0.95_3.csv
