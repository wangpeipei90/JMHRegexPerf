# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = Iaf3GQt!9Uv2B5mr!5mfn7-`F_Qi(cr5ayf^?'?1Kn{rF.Y]IR?4
3cjpnhttp)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 213.977 ns/op
# Warmup Iteration   2: 144.463 ns/op
# Warmup Iteration   3: 126.862 ns/op
# Warmup Iteration   4: 127.345 ns/op
# Warmup Iteration   5: 128.027 ns/op
Iteration   1: 129.544 ns/op
Iteration   2: 125.828 ns/op
Iteration   3: 125.819 ns/op
Iteration   4: 125.789 ns/op
Iteration   5: 126.331 ns/op
Iteration   6: 125.842 ns/op
Iteration   7: 125.823 ns/op
Iteration   8: 125.744 ns/op
Iteration   9: 126.051 ns/op
Iteration  10: 125.427 ns/op
Iteration  11: 125.436 ns/op
Iteration  12: 125.399 ns/op
Iteration  13: 125.398 ns/op
Iteration  14: 125.610 ns/op
Iteration  15: 125.402 ns/op
Iteration  16: 125.426 ns/op
Iteration  17: 125.446 ns/op
Iteration  18: 126.916 ns/op
Iteration  19: 125.764 ns/op
Iteration  20: 127.108 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 227.586 ns/op
# Warmup Iteration   2: 161.004 ns/op
# Warmup Iteration   3: 143.813 ns/op
# Warmup Iteration   4: 144.588 ns/op
# Warmup Iteration   5: 143.369 ns/op
Iteration   1: 144.544 ns/op
Iteration   2: 141.120 ns/op
Iteration   3: 141.134 ns/op
Iteration   4: 141.013 ns/op
Iteration   5: 141.014 ns/op
Iteration   6: 140.919 ns/op
Iteration   7: 141.725 ns/op
Iteration   8: 140.688 ns/op
Iteration   9: 141.040 ns/op
Iteration  10: 140.770 ns/op
Iteration  11: 140.391 ns/op
Iteration  12: 140.295 ns/op
Iteration  13: 140.232 ns/op
Iteration  14: 140.310 ns/op
Iteration  15: 140.318 ns/op
Iteration  16: 141.767 ns/op
Iteration  17: 140.343 ns/op
Iteration  18: 140.560 ns/op
Iteration  19: 140.468 ns/op
Iteration  20: 141.115 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 212.417 ns/op
# Warmup Iteration   2: 144.163 ns/op
# Warmup Iteration   3: 126.654 ns/op
# Warmup Iteration   4: 127.254 ns/op
# Warmup Iteration   5: 127.897 ns/op
Iteration   1: 128.950 ns/op
Iteration   2: 125.749 ns/op
Iteration   3: 125.570 ns/op
Iteration   4: 125.700 ns/op
Iteration   5: 126.278 ns/op
Iteration   6: 125.502 ns/op
Iteration   7: 125.596 ns/op
Iteration   8: 125.667 ns/op
Iteration   9: 125.479 ns/op
Iteration  10: 125.312 ns/op
Iteration  11: 125.336 ns/op
Iteration  12: 125.303 ns/op
Iteration  13: 125.799 ns/op
Iteration  14: 125.437 ns/op
Iteration  15: 125.444 ns/op
Iteration  16: 125.561 ns/op
Iteration  17: 125.561 ns/op
Iteration  18: 125.682 ns/op
Iteration  19: 125.556 ns/op
Iteration  20: 125.627 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 223.468 ns/op
# Warmup Iteration   2: 156.252 ns/op
# Warmup Iteration   3: 141.893 ns/op
# Warmup Iteration   4: 141.020 ns/op
# Warmup Iteration   5: 141.842 ns/op
Iteration   1: 142.590 ns/op
Iteration   2: 139.920 ns/op
Iteration   3: 139.323 ns/op
Iteration   4: 139.594 ns/op
Iteration   5: 139.733 ns/op
Iteration   6: 139.319 ns/op
Iteration   7: 139.269 ns/op
Iteration   8: 139.142 ns/op
Iteration   9: 139.258 ns/op
Iteration  10: 138.960 ns/op
Iteration  11: 139.030 ns/op
Iteration  12: 139.163 ns/op
Iteration  13: 139.498 ns/op
Iteration  14: 139.358 ns/op
Iteration  15: 139.302 ns/op
Iteration  16: 139.268 ns/op
Iteration  17: 139.507 ns/op
Iteration  18: 139.328 ns/op
Iteration  19: 139.193 ns/op
Iteration  20: 139.264 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 226.032 ns/op
# Warmup Iteration   2: 158.132 ns/op
# Warmup Iteration   3: 142.926 ns/op
# Warmup Iteration   4: 142.429 ns/op
# Warmup Iteration   5: 142.925 ns/op
Iteration   1: 144.200 ns/op
Iteration   2: 140.679 ns/op
Iteration   3: 140.676 ns/op
Iteration   4: 140.865 ns/op
Iteration   5: 140.767 ns/op
Iteration   6: 141.250 ns/op
Iteration   7: 140.419 ns/op
Iteration   8: 140.606 ns/op
Iteration   9: 140.662 ns/op
Iteration  10: 140.294 ns/op
Iteration  11: 140.382 ns/op
Iteration  12: 140.249 ns/op
Iteration  13: 140.436 ns/op
Iteration  14: 140.295 ns/op
Iteration  15: 140.327 ns/op
Iteration  16: 141.047 ns/op
Iteration  17: 140.790 ns/op
Iteration  18: 140.905 ns/op
Iteration  19: 140.669 ns/op
Iteration  20: 140.527 ns/op


Result "benchmark.StringContains.regexMatches":
  134.610 ±(99.9%) 2.453 ns/op [Average]
  (min, avg, max) = (125.303, 134.610, 144.544), stdev = 7.233
  CI (99.9%): [132.157, 137.063] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = Iaf3GQt!9Uv2B5mr!5mfn7-`F_Qi(cr5ayf^?'?1Kn{rF.Y]IR?4
3cjpnhttp)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 16.067 ns/op
# Warmup Iteration   2: 16.992 ns/op
# Warmup Iteration   3: 16.565 ns/op
# Warmup Iteration   4: 16.560 ns/op
# Warmup Iteration   5: 16.550 ns/op
Iteration   1: 16.565 ns/op
Iteration   2: 16.541 ns/op
Iteration   3: 16.565 ns/op
Iteration   4: 16.540 ns/op
Iteration   5: 16.541 ns/op
Iteration   6: 16.565 ns/op
Iteration   7: 16.561 ns/op
Iteration   8: 16.560 ns/op
Iteration   9: 16.560 ns/op
Iteration  10: 16.568 ns/op
Iteration  11: 16.577 ns/op
Iteration  12: 16.587 ns/op
Iteration  13: 16.580 ns/op
Iteration  14: 16.576 ns/op
Iteration  15: 16.573 ns/op
Iteration  16: 16.578 ns/op
Iteration  17: 16.569 ns/op
Iteration  18: 16.567 ns/op
Iteration  19: 16.576 ns/op
Iteration  20: 16.562 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 16.094 ns/op
# Warmup Iteration   2: 17.047 ns/op
# Warmup Iteration   3: 16.514 ns/op
# Warmup Iteration   4: 16.524 ns/op
# Warmup Iteration   5: 16.539 ns/op
Iteration   1: 16.511 ns/op
Iteration   2: 16.507 ns/op
Iteration   3: 16.532 ns/op
Iteration   4: 16.517 ns/op
Iteration   5: 16.520 ns/op
Iteration   6: 16.524 ns/op
Iteration   7: 16.508 ns/op
Iteration   8: 16.515 ns/op
Iteration   9: 16.536 ns/op
Iteration  10: 16.524 ns/op
Iteration  11: 16.510 ns/op
Iteration  12: 16.525 ns/op
Iteration  13: 16.524 ns/op
Iteration  14: 16.534 ns/op
Iteration  15: 16.535 ns/op
Iteration  16: 16.524 ns/op
Iteration  17: 16.508 ns/op
Iteration  18: 16.524 ns/op
Iteration  19: 16.557 ns/op
Iteration  20: 16.530 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 15.945 ns/op
# Warmup Iteration   2: 17.036 ns/op
# Warmup Iteration   3: 16.535 ns/op
# Warmup Iteration   4: 16.553 ns/op
# Warmup Iteration   5: 16.552 ns/op
Iteration   1: 16.565 ns/op
Iteration   2: 16.540 ns/op
Iteration   3: 16.545 ns/op
Iteration   4: 16.567 ns/op
Iteration   5: 16.525 ns/op
Iteration   6: 16.553 ns/op
Iteration   7: 16.546 ns/op
Iteration   8: 16.544 ns/op
Iteration   9: 16.560 ns/op
Iteration  10: 16.544 ns/op
Iteration  11: 16.559 ns/op
Iteration  12: 16.544 ns/op
Iteration  13: 16.545 ns/op
Iteration  14: 16.572 ns/op
Iteration  15: 16.518 ns/op
Iteration  16: 16.540 ns/op
Iteration  17: 16.542 ns/op
Iteration  18: 16.550 ns/op
Iteration  19: 16.537 ns/op
Iteration  20: 16.556 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 15.996 ns/op
# Warmup Iteration   2: 17.046 ns/op
# Warmup Iteration   3: 16.580 ns/op
# Warmup Iteration   4: 16.576 ns/op
# Warmup Iteration   5: 16.574 ns/op
Iteration   1: 16.568 ns/op
Iteration   2: 16.574 ns/op
Iteration   3: 16.594 ns/op
Iteration   4: 16.577 ns/op
Iteration   5: 16.574 ns/op
Iteration   6: 16.561 ns/op
Iteration   7: 16.590 ns/op
Iteration   8: 16.598 ns/op
Iteration   9: 16.575 ns/op
Iteration  10: 16.587 ns/op
Iteration  11: 16.580 ns/op
Iteration  12: 16.571 ns/op
Iteration  13: 16.569 ns/op
Iteration  14: 16.573 ns/op
Iteration  15: 16.576 ns/op
Iteration  16: 16.571 ns/op
Iteration  17: 16.570 ns/op
Iteration  18: 16.573 ns/op
Iteration  19: 16.583 ns/op
Iteration  20: 16.572 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 15.974 ns/op
# Warmup Iteration   2: 17.054 ns/op
# Warmup Iteration   3: 16.511 ns/op
# Warmup Iteration   4: 16.514 ns/op
# Warmup Iteration   5: 16.509 ns/op
Iteration   1: 16.498 ns/op
Iteration   2: 16.478 ns/op
Iteration   3: 16.514 ns/op
Iteration   4: 16.488 ns/op
Iteration   5: 16.507 ns/op
Iteration   6: 16.504 ns/op
Iteration   7: 16.502 ns/op
Iteration   8: 16.504 ns/op
Iteration   9: 16.498 ns/op
Iteration  10: 16.508 ns/op
Iteration  11: 16.500 ns/op
Iteration  12: 16.502 ns/op
Iteration  13: 16.498 ns/op
Iteration  14: 16.490 ns/op
Iteration  15: 16.498 ns/op
Iteration  16: 16.491 ns/op
Iteration  17: 16.503 ns/op
Iteration  18: 16.494 ns/op
Iteration  19: 16.497 ns/op
Iteration  20: 16.504 ns/op


Result "benchmark.StringContains.stringContains":
  16.542 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (16.478, 16.542, 16.598), stdev = 0.031
  CI (99.9%): [16.532, 16.553] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  Iaf3GQt!9Uv2B5mr!5mfn7-`F_Qi(cr5ayf^?'?1Kn{rF.Y]IR?4
3cjpnhttp  avgt  100  134.610 ± 2.453  ns/op
StringContains.stringContains     http  Iaf3GQt!9Uv2B5mr!5mfn7-`F_Qi(cr5ayf^?'?1Kn{rF.Y]IR?4
3cjpnhttp  avgt  100   16.542 ± 0.010  ns/op

Benchmark result is saved to http_64_0.95_14.csv
