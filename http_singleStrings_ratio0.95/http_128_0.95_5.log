# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = 07-
SJQ%agALiD{+e#2I?5PgoYY3|5V`Yu%](zAGvZN1UQE#U&lb;;oqQ=:f<=-U-~o06C7Q\Ql+%5bX<3:m>VH#Z;R"K!~t[[{NE?2D6oh5'`?vDwA;&_Wshttp-bF)

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 5
# Warmup Iteration   1: 238.483 ns/op
# Warmup Iteration   2: 171.719 ns/op
# Warmup Iteration   3: 146.402 ns/op
# Warmup Iteration   4: 149.505 ns/op
# Warmup Iteration   5: 148.436 ns/op
Iteration   1: 149.778 ns/op
Iteration   2: 146.287 ns/op
Iteration   3: 145.686 ns/op
Iteration   4: 146.104 ns/op
Iteration   5: 145.597 ns/op
Iteration   6: 145.682 ns/op
Iteration   7: 145.657 ns/op
Iteration   8: 145.597 ns/op
Iteration   9: 145.600 ns/op
Iteration  10: 145.595 ns/op
Iteration  11: 145.180 ns/op
Iteration  12: 145.141 ns/op
Iteration  13: 145.682 ns/op
Iteration  14: 145.402 ns/op
Iteration  15: 145.382 ns/op
Iteration  16: 145.392 ns/op
Iteration  17: 146.471 ns/op
Iteration  18: 145.741 ns/op
Iteration  19: 145.561 ns/op
Iteration  20: 147.340 ns/op

# Run progress: 10.00% complete, ETA 00:03:48
# Fork: 2 of 5
# Warmup Iteration   1: 244.619 ns/op
# Warmup Iteration   2: 187.136 ns/op
# Warmup Iteration   3: 158.488 ns/op
# Warmup Iteration   4: 158.407 ns/op
# Warmup Iteration   5: 161.357 ns/op
Iteration   1: 160.376 ns/op
Iteration   2: 161.105 ns/op
Iteration   3: 159.152 ns/op
Iteration   4: 157.673 ns/op
Iteration   5: 157.058 ns/op
Iteration   6: 156.999 ns/op
Iteration   7: 156.942 ns/op
Iteration   8: 157.024 ns/op
Iteration   9: 157.436 ns/op
Iteration  10: 157.284 ns/op
Iteration  11: 157.192 ns/op
Iteration  12: 156.535 ns/op
Iteration  13: 156.478 ns/op
Iteration  14: 156.536 ns/op
Iteration  15: 156.556 ns/op
Iteration  16: 156.841 ns/op
Iteration  17: 156.917 ns/op
Iteration  18: 156.962 ns/op
Iteration  19: 156.803 ns/op
Iteration  20: 156.939 ns/op

# Run progress: 20.00% complete, ETA 00:03:22
# Fork: 3 of 5
# Warmup Iteration   1: 253.402 ns/op
# Warmup Iteration   2: 189.516 ns/op
# Warmup Iteration   3: 157.836 ns/op
# Warmup Iteration   4: 158.221 ns/op
# Warmup Iteration   5: 158.842 ns/op
Iteration   1: 159.594 ns/op
Iteration   2: 160.787 ns/op
Iteration   3: 157.041 ns/op
Iteration   4: 157.435 ns/op
Iteration   5: 157.732 ns/op
Iteration   6: 157.085 ns/op
Iteration   7: 157.091 ns/op
Iteration   8: 157.138 ns/op
Iteration   9: 157.170 ns/op
Iteration  10: 157.270 ns/op
Iteration  11: 157.354 ns/op
Iteration  12: 156.874 ns/op
Iteration  13: 156.759 ns/op
Iteration  14: 156.764 ns/op
Iteration  15: 156.877 ns/op
Iteration  16: 156.888 ns/op
Iteration  17: 156.828 ns/op
Iteration  18: 157.041 ns/op
Iteration  19: 156.930 ns/op
Iteration  20: 157.106 ns/op

# Run progress: 30.00% complete, ETA 00:02:57
# Fork: 4 of 5
# Warmup Iteration   1: 235.333 ns/op
# Warmup Iteration   2: 171.102 ns/op
# Warmup Iteration   3: 146.160 ns/op
# Warmup Iteration   4: 148.984 ns/op
# Warmup Iteration   5: 148.034 ns/op
Iteration   1: 148.902 ns/op
Iteration   2: 145.417 ns/op
Iteration   3: 145.520 ns/op
Iteration   4: 145.533 ns/op
Iteration   5: 145.493 ns/op
Iteration   6: 145.424 ns/op
Iteration   7: 146.983 ns/op
Iteration   8: 146.205 ns/op
Iteration   9: 146.024 ns/op
Iteration  10: 145.630 ns/op
Iteration  11: 145.071 ns/op
Iteration  12: 145.519 ns/op
Iteration  13: 145.089 ns/op
Iteration  14: 145.014 ns/op
Iteration  15: 144.998 ns/op
Iteration  16: 145.066 ns/op
Iteration  17: 145.119 ns/op
Iteration  18: 145.114 ns/op
Iteration  19: 145.249 ns/op
Iteration  20: 145.358 ns/op

# Run progress: 40.00% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 236.290 ns/op
# Warmup Iteration   2: 171.391 ns/op
# Warmup Iteration   3: 145.983 ns/op
# Warmup Iteration   4: 148.764 ns/op
# Warmup Iteration   5: 147.877 ns/op
Iteration   1: 148.780 ns/op
Iteration   2: 145.302 ns/op
Iteration   3: 145.301 ns/op
Iteration   4: 145.248 ns/op
Iteration   5: 145.231 ns/op
Iteration   6: 145.235 ns/op
Iteration   7: 145.256 ns/op
Iteration   8: 145.238 ns/op
Iteration   9: 145.241 ns/op
Iteration  10: 145.323 ns/op
Iteration  11: 144.949 ns/op
Iteration  12: 145.329 ns/op
Iteration  13: 145.137 ns/op
Iteration  14: 145.551 ns/op
Iteration  15: 145.101 ns/op
Iteration  16: 145.197 ns/op
Iteration  17: 145.241 ns/op
Iteration  18: 145.261 ns/op
Iteration  19: 145.355 ns/op
Iteration  20: 145.185 ns/op


Result "benchmark.StringContains.regexMatches":
  150.366 ±(99.9%) 1.991 ns/op [Average]
  (min, avg, max) = (144.949, 150.366, 161.105), stdev = 5.871
  CI (99.9%): [148.375, 152.357] (assumes normal distribution)


# JMH version: 1.29
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Blackhole mode: full + dont-inline hint
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = 07-
SJQ%agALiD{+e#2I?5PgoYY3|5V`Yu%](zAGvZN1UQE#U&lb;;oqQ=:f<=-U-~o06C7Q\Ql+%5bX<3:m>VH#Z;R"K!~t[[{NE?2D6oh5'`?vDwA;&_Wshttp-bF)

# Run progress: 50.00% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 24.860 ns/op
# Warmup Iteration   2: 26.199 ns/op
# Warmup Iteration   3: 25.413 ns/op
# Warmup Iteration   4: 25.393 ns/op
# Warmup Iteration   5: 25.398 ns/op
Iteration   1: 25.518 ns/op
Iteration   2: 25.517 ns/op
Iteration   3: 25.510 ns/op
Iteration   4: 25.526 ns/op
Iteration   5: 25.515 ns/op
Iteration   6: 25.530 ns/op
Iteration   7: 25.505 ns/op
Iteration   8: 25.514 ns/op
Iteration   9: 25.496 ns/op
Iteration  10: 25.398 ns/op
Iteration  11: 25.388 ns/op
Iteration  12: 25.393 ns/op
Iteration  13: 25.387 ns/op
Iteration  14: 25.417 ns/op
Iteration  15: 25.423 ns/op
Iteration  16: 25.378 ns/op
Iteration  17: 25.383 ns/op
Iteration  18: 25.391 ns/op
Iteration  19: 25.375 ns/op
Iteration  20: 25.399 ns/op

# Run progress: 60.00% complete, ETA 00:01:41
# Fork: 2 of 5
# Warmup Iteration   1: 24.998 ns/op
# Warmup Iteration   2: 26.136 ns/op
# Warmup Iteration   3: 26.410 ns/op
# Warmup Iteration   4: 26.431 ns/op
# Warmup Iteration   5: 26.378 ns/op
Iteration   1: 26.413 ns/op
Iteration   2: 26.362 ns/op
Iteration   3: 26.405 ns/op
Iteration   4: 26.425 ns/op
Iteration   5: 26.447 ns/op
Iteration   6: 26.417 ns/op
Iteration   7: 26.488 ns/op
Iteration   8: 26.477 ns/op
Iteration   9: 26.469 ns/op
Iteration  10: 26.430 ns/op
Iteration  11: 26.419 ns/op
Iteration  12: 26.452 ns/op
Iteration  13: 26.476 ns/op
Iteration  14: 26.468 ns/op
Iteration  15: 26.461 ns/op
Iteration  16: 26.468 ns/op
Iteration  17: 26.465 ns/op
Iteration  18: 26.490 ns/op
Iteration  19: 26.475 ns/op
Iteration  20: 26.481 ns/op

# Run progress: 70.00% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 24.881 ns/op
# Warmup Iteration   2: 26.186 ns/op
# Warmup Iteration   3: 25.507 ns/op
# Warmup Iteration   4: 25.513 ns/op
# Warmup Iteration   5: 25.407 ns/op
Iteration   1: 25.511 ns/op
Iteration   2: 25.528 ns/op
Iteration   3: 25.505 ns/op
Iteration   4: 25.499 ns/op
Iteration   5: 25.502 ns/op
Iteration   6: 25.513 ns/op
Iteration   7: 25.516 ns/op
Iteration   8: 25.492 ns/op
Iteration   9: 25.494 ns/op
Iteration  10: 25.481 ns/op
Iteration  11: 25.414 ns/op
Iteration  12: 25.365 ns/op
Iteration  13: 25.394 ns/op
Iteration  14: 25.383 ns/op
Iteration  15: 25.407 ns/op
Iteration  16: 25.396 ns/op
Iteration  17: 25.395 ns/op
Iteration  18: 25.380 ns/op
Iteration  19: 25.401 ns/op
Iteration  20: 25.432 ns/op

# Run progress: 80.00% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 25.019 ns/op
# Warmup Iteration   2: 26.133 ns/op
# Warmup Iteration   3: 25.440 ns/op
# Warmup Iteration   4: 25.429 ns/op
# Warmup Iteration   5: 25.431 ns/op
Iteration   1: 25.452 ns/op
Iteration   2: 25.451 ns/op
Iteration   3: 25.429 ns/op
Iteration   4: 25.418 ns/op
Iteration   5: 25.439 ns/op
Iteration   6: 25.437 ns/op
Iteration   7: 25.421 ns/op
Iteration   8: 25.457 ns/op
Iteration   9: 25.466 ns/op
Iteration  10: 25.437 ns/op
Iteration  11: 25.482 ns/op
Iteration  12: 25.423 ns/op
Iteration  13: 25.442 ns/op
Iteration  14: 25.437 ns/op
Iteration  15: 25.412 ns/op
Iteration  16: 25.418 ns/op
Iteration  17: 25.411 ns/op
Iteration  18: 25.421 ns/op
Iteration  19: 25.395 ns/op
Iteration  20: 25.395 ns/op

# Run progress: 90.00% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 24.930 ns/op
# Warmup Iteration   2: 26.205 ns/op
# Warmup Iteration   3: 25.408 ns/op
# Warmup Iteration   4: 25.410 ns/op
# Warmup Iteration   5: 25.388 ns/op
Iteration   1: 25.401 ns/op
Iteration   2: 25.398 ns/op
Iteration   3: 25.397 ns/op
Iteration   4: 25.395 ns/op
Iteration   5: 25.392 ns/op
Iteration   6: 25.383 ns/op
Iteration   7: 25.386 ns/op
Iteration   8: 25.405 ns/op
Iteration   9: 25.401 ns/op
Iteration  10: 25.379 ns/op
Iteration  11: 25.398 ns/op
Iteration  12: 25.392 ns/op
Iteration  13: 25.386 ns/op
Iteration  14: 25.389 ns/op
Iteration  15: 25.391 ns/op
Iteration  16: 25.402 ns/op
Iteration  17: 25.398 ns/op
Iteration  18: 25.398 ns/op
Iteration  19: 25.407 ns/op
Iteration  20: 25.403 ns/op


Result "benchmark.StringContains.stringContains":
  25.635 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (25.365, 25.635, 26.490), stdev = 0.412
  CI (99.9%): [25.495, 25.775] (assumes normal distribution)


# Run complete. Total time: 00:04:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                                                             (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  07-
SJQ%agALiD{+e#2I?5PgoYY3|5V`Yu%](zAGvZN1UQE#U&lb;;oqQ=:f<=-U-~o06C7Q\Ql+%5bX<3:m>VH#Z;R"K!~t[[{NE?2D6oh5'`?vDwA;&_Wshttp-bF  avgt  100  150.366 ± 1.991  ns/op
StringContains.stringContains     http  07-
SJQ%agALiD{+e#2I?5PgoYY3|5V`Yu%](zAGvZN1UQE#U&lb;;oqQ=:f<=-U-~o06C7Q\Ql+%5bX<3:m>VH#Z;R"K!~t[[{NE?2D6oh5'`?vDwA;&_Wshttp-bF  avgt  100   25.635 ± 0.140  ns/op

Benchmark result is saved to http_128_0.95_5.csv
