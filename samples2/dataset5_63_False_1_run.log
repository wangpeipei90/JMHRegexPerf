# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 684.162 ns/op
# Warmup Iteration   2: 678.191 ns/op
# Warmup Iteration   3: 674.205 ns/op
# Warmup Iteration   4: 674.017 ns/op
# Warmup Iteration   5: 607.830 ns/op
Iteration   1: 598.821 ns/op
Iteration   2: 599.067 ns/op
Iteration   3: 604.277 ns/op
Iteration   4: 598.751 ns/op
Iteration   5: 598.840 ns/op
Iteration   6: 606.153 ns/op
Iteration   7: 598.846 ns/op
Iteration   8: 598.748 ns/op
Iteration   9: 598.817 ns/op
Iteration  10: 608.539 ns/op
Iteration  11: 598.883 ns/op
Iteration  12: 598.863 ns/op
Iteration  13: 605.774 ns/op
Iteration  14: 604.857 ns/op
Iteration  15: 598.798 ns/op
Iteration  16: 599.088 ns/op
Iteration  17: 615.640 ns/op
Iteration  18: 598.531 ns/op
Iteration  19: 598.766 ns/op
Iteration  20: 598.621 ns/op


Result "benchmark.StringContains.regexMatches":
  601.434 ±(99.9%) 4.031 ns/op [Average]
  (min, avg, max) = (598.531, 601.434, 615.640), stdev = 4.642
  CI (99.9%): [597.404, 605.465] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 19.295 ns/op
# Warmup Iteration   2: 20.512 ns/op
# Warmup Iteration   3: 20.471 ns/op
# Warmup Iteration   4: 20.469 ns/op
# Warmup Iteration   5: 20.472 ns/op
Iteration   1: 20.470 ns/op
Iteration   2: 20.470 ns/op
Iteration   3: 20.470 ns/op
Iteration   4: 20.469 ns/op
Iteration   5: 20.472 ns/op
Iteration   6: 20.469 ns/op
Iteration   7: 20.470 ns/op
Iteration   8: 20.472 ns/op
Iteration   9: 20.471 ns/op
Iteration  10: 20.474 ns/op
Iteration  11: 20.471 ns/op
Iteration  12: 20.470 ns/op
Iteration  13: 20.469 ns/op
Iteration  14: 20.469 ns/op
Iteration  15: 20.472 ns/op
Iteration  16: 20.469 ns/op
Iteration  17: 20.470 ns/op
Iteration  18: 20.469 ns/op
Iteration  19: 20.469 ns/op
Iteration  20: 20.473 ns/op


Result "benchmark.StringContains.stringContains":
  20.470 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (20.469, 20.470, 20.474), stdev = 0.001
  CI (99.9%): [20.469, 20.472] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  601.434 ± 4.031  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   20.470 ± 0.001  ns/op

Benchmark result is saved to dataset5_63_False_1_run.csv
