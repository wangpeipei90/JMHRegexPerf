# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 684.265 ns/op
# Warmup Iteration   2: 675.673 ns/op
# Warmup Iteration   3: 673.784 ns/op
# Warmup Iteration   4: 673.470 ns/op
# Warmup Iteration   5: 608.154 ns/op
Iteration   1: 598.545 ns/op
Iteration   2: 598.497 ns/op
Iteration   3: 603.846 ns/op
Iteration   4: 598.382 ns/op
Iteration   5: 598.471 ns/op
Iteration   6: 606.807 ns/op
Iteration   7: 598.306 ns/op
Iteration   8: 598.224 ns/op
Iteration   9: 598.372 ns/op
Iteration  10: 608.106 ns/op
Iteration  11: 598.355 ns/op
Iteration  12: 598.448 ns/op
Iteration  13: 603.086 ns/op
Iteration  14: 606.573 ns/op
Iteration  15: 598.364 ns/op
Iteration  16: 598.436 ns/op
Iteration  17: 615.055 ns/op
Iteration  18: 598.451 ns/op
Iteration  19: 598.228 ns/op
Iteration  20: 598.590 ns/op


Result "benchmark.StringContains.regexMatches":
  601.057 ±(99.9%) 4.081 ns/op [Average]
  (min, avg, max) = (598.224, 601.057, 615.055), stdev = 4.700
  CI (99.9%): [596.976, 605.138] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 19.288 ns/op
# Warmup Iteration   2: 20.548 ns/op
# Warmup Iteration   3: 20.471 ns/op
# Warmup Iteration   4: 20.470 ns/op
# Warmup Iteration   5: 20.470 ns/op
Iteration   1: 20.475 ns/op
Iteration   2: 20.470 ns/op
Iteration   3: 20.471 ns/op
Iteration   4: 20.470 ns/op
Iteration   5: 20.470 ns/op
Iteration   6: 20.474 ns/op
Iteration   7: 20.470 ns/op
Iteration   8: 20.472 ns/op
Iteration   9: 20.469 ns/op
Iteration  10: 20.470 ns/op
Iteration  11: 20.473 ns/op
Iteration  12: 20.470 ns/op
Iteration  13: 20.472 ns/op
Iteration  14: 20.505 ns/op
Iteration  15: 20.471 ns/op
Iteration  16: 20.475 ns/op
Iteration  17: 20.471 ns/op
Iteration  18: 20.472 ns/op
Iteration  19: 20.504 ns/op
Iteration  20: 20.505 ns/op


Result "benchmark.StringContains.stringContains":
  20.476 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (20.469, 20.476, 20.505), stdev = 0.012
  CI (99.9%): [20.466, 20.487] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  601.057 ± 4.081  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   20.476 ± 0.011  ns/op

Benchmark result is saved to dataset5_63_False_3_run.csv
