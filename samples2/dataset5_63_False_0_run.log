# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 680.463 ns/op
# Warmup Iteration   2: 677.229 ns/op
# Warmup Iteration   3: 673.850 ns/op
# Warmup Iteration   4: 673.934 ns/op
# Warmup Iteration   5: 607.958 ns/op
Iteration   1: 598.974 ns/op
Iteration   2: 598.745 ns/op
Iteration   3: 604.633 ns/op
Iteration   4: 598.718 ns/op
Iteration   5: 598.594 ns/op
Iteration   6: 606.122 ns/op
Iteration   7: 598.592 ns/op
Iteration   8: 598.612 ns/op
Iteration   9: 598.712 ns/op
Iteration  10: 608.701 ns/op
Iteration  11: 598.915 ns/op
Iteration  12: 598.776 ns/op
Iteration  13: 605.919 ns/op
Iteration  14: 604.366 ns/op
Iteration  15: 598.725 ns/op
Iteration  16: 599.248 ns/op
Iteration  17: 616.248 ns/op
Iteration  18: 599.942 ns/op
Iteration  19: 599.982 ns/op
Iteration  20: 600.395 ns/op


Result "benchmark.StringContains.regexMatches":
  601.646 ±(99.9%) 4.060 ns/op [Average]
  (min, avg, max) = (598.592, 601.646, 616.248), stdev = 4.676
  CI (99.9%): [597.586, 605.706] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 19.200 ns/op
# Warmup Iteration   2: 20.518 ns/op
# Warmup Iteration   3: 20.473 ns/op
# Warmup Iteration   4: 20.470 ns/op
# Warmup Iteration   5: 20.470 ns/op
Iteration   1: 20.474 ns/op
Iteration   2: 20.470 ns/op
Iteration   3: 20.473 ns/op
Iteration   4: 20.469 ns/op
Iteration   5: 20.471 ns/op
Iteration   6: 20.472 ns/op
Iteration   7: 20.471 ns/op
Iteration   8: 20.471 ns/op
Iteration   9: 20.469 ns/op
Iteration  10: 20.470 ns/op
Iteration  11: 20.470 ns/op
Iteration  12: 20.470 ns/op
Iteration  13: 20.472 ns/op
Iteration  14: 20.468 ns/op
Iteration  15: 20.471 ns/op
Iteration  16: 20.472 ns/op
Iteration  17: 20.469 ns/op
Iteration  18: 20.470 ns/op
Iteration  19: 20.469 ns/op
Iteration  20: 20.473 ns/op


Result "benchmark.StringContains.stringContains":
  20.471 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (20.468, 20.471, 20.474), stdev = 0.002
  CI (99.9%): [20.469, 20.472] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  601.646 ± 4.060  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   20.471 ± 0.001  ns/op

Benchmark result is saved to dataset5_63_False_0_run.csv
