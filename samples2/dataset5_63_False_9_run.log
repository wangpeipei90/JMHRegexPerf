# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 692.144 ns/op
# Warmup Iteration   2: 677.030 ns/op
# Warmup Iteration   3: 674.652 ns/op
# Warmup Iteration   4: 673.707 ns/op
# Warmup Iteration   5: 610.472 ns/op
Iteration   1: 598.996 ns/op
Iteration   2: 598.768 ns/op
Iteration   3: 603.680 ns/op
Iteration   4: 598.664 ns/op
Iteration   5: 598.690 ns/op
Iteration   6: 605.687 ns/op
Iteration   7: 598.576 ns/op
Iteration   8: 598.606 ns/op
Iteration   9: 598.579 ns/op
Iteration  10: 608.396 ns/op
Iteration  11: 598.311 ns/op
Iteration  12: 598.663 ns/op
Iteration  13: 603.320 ns/op
Iteration  14: 607.291 ns/op
Iteration  15: 598.561 ns/op
Iteration  16: 598.731 ns/op
Iteration  17: 615.109 ns/op
Iteration  18: 599.321 ns/op
Iteration  19: 599.170 ns/op
Iteration  20: 600.409 ns/op


Result "benchmark.StringContains.regexMatches":
  601.376 ±(99.9%) 3.947 ns/op [Average]
  (min, avg, max) = (598.311, 601.376, 615.109), stdev = 4.546
  CI (99.9%): [597.429, 605.324] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 19.255 ns/op
# Warmup Iteration   2: 20.519 ns/op
# Warmup Iteration   3: 20.475 ns/op
# Warmup Iteration   4: 20.473 ns/op
# Warmup Iteration   5: 20.475 ns/op
Iteration   1: 20.474 ns/op
Iteration   2: 20.474 ns/op
Iteration   3: 20.475 ns/op
Iteration   4: 20.473 ns/op
Iteration   5: 20.475 ns/op
Iteration   6: 20.475 ns/op
Iteration   7: 20.473 ns/op
Iteration   8: 20.475 ns/op
Iteration   9: 20.473 ns/op
Iteration  10: 20.475 ns/op
Iteration  11: 20.475 ns/op
Iteration  12: 20.474 ns/op
Iteration  13: 20.475 ns/op
Iteration  14: 20.476 ns/op
Iteration  15: 20.476 ns/op
Iteration  16: 20.475 ns/op
Iteration  17: 20.485 ns/op
Iteration  18: 20.474 ns/op
Iteration  19: 20.474 ns/op
Iteration  20: 20.475 ns/op


Result "benchmark.StringContains.stringContains":
  20.475 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (20.473, 20.475, 20.485), stdev = 0.003
  CI (99.9%): [20.473, 20.477] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  601.376 ± 3.947  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   20.475 ± 0.002  ns/op

Benchmark result is saved to dataset5_63_False_9_run.csv
