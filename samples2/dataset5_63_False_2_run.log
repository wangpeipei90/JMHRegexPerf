# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.regexMatches
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 0.00% complete, ETA 00:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 684.189 ns/op
# Warmup Iteration   2: 679.685 ns/op
# Warmup Iteration   3: 678.630 ns/op
# Warmup Iteration   4: 677.038 ns/op
# Warmup Iteration   5: 612.916 ns/op
Iteration   1: 602.031 ns/op
Iteration   2: 602.335 ns/op
Iteration   3: 607.207 ns/op
Iteration   4: 601.042 ns/op
Iteration   5: 601.021 ns/op
Iteration   6: 608.521 ns/op
Iteration   7: 600.980 ns/op
Iteration   8: 601.050 ns/op
Iteration   9: 601.016 ns/op
Iteration  10: 611.182 ns/op
Iteration  11: 601.049 ns/op
Iteration  12: 600.933 ns/op
Iteration  13: 601.072 ns/op
Iteration  14: 614.066 ns/op
Iteration  15: 601.062 ns/op
Iteration  16: 600.963 ns/op
Iteration  17: 611.989 ns/op
Iteration  18: 607.017 ns/op
Iteration  19: 600.914 ns/op
Iteration  20: 600.966 ns/op


Result "benchmark.StringContains.regexMatches":
  603.821 ±(99.9%) 3.833 ns/op [Average]
  (min, avg, max) = (600.914, 603.821, 614.066), stdev = 4.414
  CI (99.9%): [599.988, 607.654] (assumes normal distribution)


# JMH version: 1.26
# VM version: JDK 11.0.10, OpenJDK 64-Bit Server VM, 11.0.10+9-Ubuntu-0ubuntu1.18.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -server -Xms2G -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 20 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.StringContains.stringContains
# Parameters: (regex = http, str = A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU)

# Run progress: 50.00% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 19.259 ns/op
# Warmup Iteration   2: 20.527 ns/op
# Warmup Iteration   3: 20.473 ns/op
# Warmup Iteration   4: 20.475 ns/op
# Warmup Iteration   5: 20.473 ns/op
Iteration   1: 20.474 ns/op
Iteration   2: 20.473 ns/op
Iteration   3: 20.472 ns/op
Iteration   4: 20.474 ns/op
Iteration   5: 20.473 ns/op
Iteration   6: 20.475 ns/op
Iteration   7: 20.473 ns/op
Iteration   8: 20.472 ns/op
Iteration   9: 20.474 ns/op
Iteration  10: 20.472 ns/op
Iteration  11: 20.474 ns/op
Iteration  12: 20.473 ns/op
Iteration  13: 20.473 ns/op
Iteration  14: 20.475 ns/op
Iteration  15: 20.476 ns/op
Iteration  16: 20.475 ns/op
Iteration  17: 20.473 ns/op
Iteration  18: 20.473 ns/op
Iteration  19: 20.475 ns/op
Iteration  20: 20.475 ns/op


Result "benchmark.StringContains.stringContains":
  20.474 ±(99.9%) 0.001 ns/op [Average]
  (min, avg, max) = (20.472, 20.474, 20.476), stdev = 0.001
  CI (99.9%): [20.473, 20.475] (assumes normal distribution)


# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                      (regex)                                                                                       (str)  Mode  Cnt    Score   Error  Units
StringContains.regexMatches       http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20  603.821 ± 3.833  ns/op
StringContains.stringContains     http  A.Bn^jOY6ZuvGz+wP('j`+Y$ n27Fg9v 
(hcVCvN`SHMHhkCgL!
qpf{|cYsx"(@dwe}qm>i=**#1aX4I_wOJU  avgt   20   20.474 ± 0.001  ns/op

Benchmark result is saved to dataset5_63_False_2_run.csv
